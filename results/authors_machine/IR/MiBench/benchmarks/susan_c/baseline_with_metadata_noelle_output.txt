make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_c'
./runEnablers.sh susan_c susan_c.bc large "-lm -lstdc++ -lpthread -ltermcap" -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_c /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_c
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_c

opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs susan_c.bc -o baseline.bc
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_c /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_c
Running: ./baseline_prof input_large.pgm output_large.corners.pgm -c in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/MiBench/automotive/susan
--------------------------------------------------------------------------------------
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_c
DONE
opt -pgo-test-profile-file=/tmp/tmp.1Hrvh6hob8 -block-freq -pgo-instr-use baseline.bc -o baseline_pre.bc
opt --strip-debug --strip-debug-declare baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.uquxGCamsx (.ll version is /tmp/tmp.hJZr9Tmphl)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.a3K7N03ud5 (.ll version is /tmp/tmp.LD5Ly2JRB6)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.uquxGCamsx -o /tmp/tmp.a3K7N03ud5
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.uquxGCamsx -o /tmp/tmp.a3K7N03ud5
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.uquxGCamsx -o /tmp/tmp.a3K7N03ud5
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.uquxGCamsx -o /tmp/tmp.a3K7N03ud5
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       usage
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       getint
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       susan_corners
DeadFunctionEliminator:       susan_corners_quick
DeadFunctionEliminator:       main
DeadFunctionEliminator:       atof
DeadFunctionEliminator:       atoi
DeadFunctionEliminator:       strtol
DeadFunctionEliminator:       getc
DeadFunctionEliminator:       fgets
DeadFunctionEliminator:       fprintf
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       get_image
DeadFunctionEliminator:       fopen
DeadFunctionEliminator:       fgetc
DeadFunctionEliminator:       malloc
DeadFunctionEliminator:       fread
DeadFunctionEliminator:       fclose
DeadFunctionEliminator:       put_image
DeadFunctionEliminator:       fwrite
DeadFunctionEliminator:       int_to_uchar
DeadFunctionEliminator:       setup_brightness_lut
DeadFunctionEliminator:       exp
DeadFunctionEliminator:       susan_principle
DeadFunctionEliminator:       llvm.memset.p0i8.i64
DeadFunctionEliminator:       susan_principle_small
DeadFunctionEliminator:       median
DeadFunctionEliminator:       free
DeadFunctionEliminator:       enlarge
DeadFunctionEliminator:       llvm.memcpy.p0i8.p0i8.i64
DeadFunctionEliminator:       susan_smoothing
DeadFunctionEliminator:       edge_draw
DeadFunctionEliminator:       susan_thin
DeadFunctionEliminator:       susan_edges
DeadFunctionEliminator:       susan_edges_small
DeadFunctionEliminator:       corner_draw
DeadFunctionEliminator:       strtod
DeadFunctionEliminator:       puts
DeadFunctionEliminator:       sqrtf
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:     Loop "  %20 = icmp slt i32 %.013, %0" (1.816546e-08%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (9.999999e+01%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (0.000000e+00%)
Noelle:  Function "susan_corners"
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv45, %24" (9.502273e+01%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv43, %23" (9.501161e+01%)
Noelle:     Loop "  %613 = icmp slt i64 %indvars.iv41, %604" (4.939426e+00%)
Noelle:     Loop "  %628 = icmp slt i64 %indvars.iv, %603" (4.919211e+00%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (3.728643e-02%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %33 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %10 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (2.957759e-04%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  br label %NodeBlock" (2.143524e-08%)
Noelle:     Loop "  %18 = mul nsw i32 %.02, 10" (3.814747e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %139 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %145 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (0.000000e+00%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (0.000000e+00%)
Noelle:     Loop "  %74 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %80 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %100 = icmp sgt i32 %.017, %.09" (0.000000e+00%)
Noelle:     Loop "  %102 = icmp sgt i32 %.016, %.09" (0.000000e+00%)
Noelle:  Function "susan_principle"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv4, %19" (0.000000e+00%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (0.000000e+00%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i32 %.1, %4" (0.000000e+00%)
Noelle:     Loop "  %58 = icmp slt i32 %.2, %4" (0.000000e+00%)
Noelle:     Loop "  %61 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %8" (0.000000e+00%)
Noelle:     Loop "  %38 = icmp slt i32 %.12, %.pre-phi" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %23 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv29, %20" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %19" (0.000000e+00%)
Noelle:     Loop "  %340 = icmp slt i64 %indvars.iv25, %337" (0.000000e+00%)
Noelle:     Loop "  %347 = icmp slt i64 %indvars.iv, %336" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv23, %109" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i64 %indvars.iv, %108" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %381 = icmp slt i64 %indvars.iv34, %372" (0.000000e+00%)
Noelle:     Loop "  %396 = icmp slt i64 %indvars.iv, %371" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %20 = icmp slt i32 %.013, %0" (1.816546e-08%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (9.999999e+01%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (0.000000e+00%)
Noelle:  Function "susan_corners"
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv45, %24" (9.502273e+01%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv43, %23" (9.501161e+01%)
Noelle:     Loop "  %613 = icmp slt i64 %indvars.iv41, %604" (4.939426e+00%)
Noelle:     Loop "  %628 = icmp slt i64 %indvars.iv, %603" (4.919211e+00%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (3.728643e-02%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %33 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %10 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (2.957759e-04%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  br label %NodeBlock" (2.143524e-08%)
Noelle:     Loop "  %18 = mul nsw i32 %.02, 10" (3.814747e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %139 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %145 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (0.000000e+00%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (0.000000e+00%)
Noelle:     Loop "  %74 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %80 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %100 = icmp sgt i32 %.017, %.09" (0.000000e+00%)
Noelle:     Loop "  %102 = icmp sgt i32 %.016, %.09" (0.000000e+00%)
Noelle:  Function "susan_principle"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv4, %19" (0.000000e+00%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (0.000000e+00%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i32 %.1, %4" (0.000000e+00%)
Noelle:     Loop "  %58 = icmp slt i32 %.2, %4" (0.000000e+00%)
Noelle:     Loop "  %61 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %8" (0.000000e+00%)
Noelle:     Loop "  %38 = icmp slt i32 %.12, %.pre-phi" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %23 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv29, %20" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %19" (0.000000e+00%)
Noelle:     Loop "  %340 = icmp slt i64 %indvars.iv25, %337" (0.000000e+00%)
Noelle:     Loop "  %347 = icmp slt i64 %indvars.iv, %336" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv23, %109" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i64 %indvars.iv, %108" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %381 = icmp slt i64 %indvars.iv34, %372" (0.000000e+00%)
Noelle:     Loop "  %396 = icmp slt i64 %indvars.iv, %371" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-inline baseline_pre.bc "-noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier"
NOELLE: Inliner: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.bxleuNd6bj (.ll version is /tmp/tmp.UQMMhg2ep3)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.sXGOtP4hdR (.ll version is /tmp/tmp.R2hlmwFPj0)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.bxleuNd6bj -o /tmp/tmp.sXGOtP4hdR
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.bxleuNd6bj -o /tmp/tmp.sXGOtP4hdR
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.bxleuNd6bj -o /tmp/tmp.sXGOtP4hdR
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.bxleuNd6bj -o /tmp/tmp.sXGOtP4hdR
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.bxleuNd6bj -o /tmp/tmp.sXGOtP4hdR
Inliner: Start
Inliner:   Number of program instructions = 5839
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 8
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: main (305 instructions. The inlining will add 49 instructions),   call void @setup_brightness_lut(i8** nonnull %4, i32 %.016.lcssa, i32 6)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0" (1.746462e-08%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (1.497591e-06%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (9.999999e+01%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (0.000000e+00%)
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (9.501444e+01%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (9.500330e+01%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (4.947730e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (4.926475e+00%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (3.734154e-02%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (2.962131e-04%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (1.819231e-08%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (3.820386e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %135 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %141 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp sgt i32 %.010, %.09" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp sgt i32 %.013, %.09" (0.000000e+00%)
Noelle:     Loop "  %73 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %79 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %99 = icmp sgt i32 %.017, %.09" (0.000000e+00%)
Noelle:     Loop "  %100 = icmp sgt i32 %.016, %.09" (0.000000e+00%)
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (0.000000e+00%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (0.000000e+00%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (0.000000e+00%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0" (1.745862e-08%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (1.497077e-06%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (9.996263e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, 257" (3.432505e-02%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (3.736146e-02%)
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (9.498181e+01%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (9.497067e+01%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (4.946031e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (4.924783e+00%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (3.732872e-02%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (2.961114e-04%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (1.818607e-08%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (3.819074e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %135 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %141 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp sgt i32 %.010, %.09" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp sgt i32 %.013, %.09" (0.000000e+00%)
Noelle:     Loop "  %73 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %79 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %99 = icmp sgt i32 %.017, %.09" (0.000000e+00%)
Noelle:     Loop "  %100 = icmp sgt i32 %.016, %.09" (0.000000e+00%)
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (0.000000e+00%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (0.000000e+00%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (0.000000e+00%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
NOELLE: FixedPoint:       There are 21 different instructions and 39 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.sXGOtP4hdR -o /tmp/tmp.sXGOtP4hdR
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.sXGOtP4hdR -o /tmp/tmp.sXGOtP4hdR
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.bxleuNd6bj -o /tmp/tmp.sXGOtP4hdR
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.bxleuNd6bj -o /tmp/tmp.sXGOtP4hdR
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.bxleuNd6bj -o /tmp/tmp.sXGOtP4hdR
Inliner: Start
Inliner:   Number of program instructions = 5863
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 8
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: main (329 instructions. The inlining will add 988 instructions),   %138 = call i32 @susan_corners(i8* %116, i32* %113, i8* %137, i32 1850, %struct.anon* nonnull %115, i32 %107, i32 %108)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0" (1.745862e-08%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (1.497077e-06%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (9.996263e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, 257" (3.432505e-02%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (3.736146e-02%)
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (9.498181e+01%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (9.497067e+01%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (4.946031e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (4.924783e+00%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (3.732872e-02%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (2.961114e-04%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (1.818607e-08%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (3.819074e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %135 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %141 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp sgt i32 %.010, %.09" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp sgt i32 %.013, %.09" (0.000000e+00%)
Noelle:     Loop "  %73 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %79 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %99 = icmp sgt i32 %.017, %.09" (0.000000e+00%)
Noelle:     Loop "  %100 = icmp sgt i32 %.016, %.09" (0.000000e+00%)
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (0.000000e+00%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (0.000000e+00%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (0.000000e+00%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (4.753829e+01%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (4.753272e+01%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (2.475483e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (2.464849e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0" (8.738023e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (9.599082e-07%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (4.996747e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, 257" (1.865882e-02%)
Noelle:     Loop "  %156 = icmp slt i64 %indvars.iv45.i, %152" (4.747681e+01%)
Noelle:     Loop "  %164 = icmp slt i64 %indvars.iv43.i, %149" (4.747124e+01%)
Noelle:     Loop "  %720 = icmp slt i64 %indvars.iv41.i, %152" (2.471776e+00%)
Noelle:     Loop "  %736 = icmp slt i64 %indvars.iv.i1, %149" (2.461661e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (1.869937e-02%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (1.868298e-02%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (1.482034e-04%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (9.102107e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (1.911442e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %135 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %141 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp sgt i32 %.010, %.09" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp sgt i32 %.013, %.09" (0.000000e+00%)
Noelle:     Loop "  %73 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %79 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %99 = icmp sgt i32 %.017, %.09" (0.000000e+00%)
Noelle:     Loop "  %100 = icmp sgt i32 %.016, %.09" (0.000000e+00%)
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (0.000000e+00%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (0.000000e+00%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (0.000000e+00%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
NOELLE: FixedPoint:       There are 892 different instructions and 2596 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.sXGOtP4hdR -o /tmp/tmp.sXGOtP4hdR
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.sXGOtP4hdR -o /tmp/tmp.sXGOtP4hdR
NOELLE: FixedPoint:     Invocation 2
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.bxleuNd6bj -o /tmp/tmp.sXGOtP4hdR
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.bxleuNd6bj -o /tmp/tmp.sXGOtP4hdR
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.bxleuNd6bj -o /tmp/tmp.sXGOtP4hdR
Inliner: Start
Inliner:   Number of program instructions = 6849
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 928
DOALL:     	  %859 = getelementptr inbounds i32, i32* %113, i64 %858
DOALL:     	  %860 = load i32, i32* %859, align 4, !tbaa !38
DOALL:     	  %861 = icmp sgt i32 %740, %860
DOALL:     	  br i1 %861, label %862, label %.._crit_edge69_crit_edge75.i, !prof !96
DOALL:     	  %863 = add nsw i64 %738, 1
DOALL:     	  %864 = getelementptr inbounds i32, i32* %113, i64 %863
DOALL:     	  %865 = load i32, i32* %864, align 4, !tbaa !38
DOALL:     	  %866 = icmp slt i32 %740, %865
DOALL:     	  br i1 %866, label %.._crit_edge69_crit_edge76.i, label %867, !prof !97
DOALL:     	  %868 = add nsw i64 %738, 2
DOALL:     	  %869 = getelementptr inbounds i32, i32* %113, i64 %868
DOALL:     	  %870 = load i32, i32* %869, align 4, !tbaa !38
DOALL:     	  %871 = icmp slt i32 %740, %870
DOALL:     	  br i1 %871, label %.._crit_edge69_crit_edge77.i, label %872, !prof !98
DOALL:     	  %873 = add nsw i64 %738, 3
DOALL:     	  %874 = getelementptr inbounds i32, i32* %113, i64 %873
DOALL:     	  %875 = load i32, i32* %874, align 4, !tbaa !38
DOALL:     	  %876 = icmp slt i32 %740, %875
DOALL:     	  br i1 %876, label %.._crit_edge69_crit_edge78.i, label %877, !prof !99
DOALL:     	  %878 = add nsw i64 %729, %indvars.iv.i1
DOALL:     	  %879 = add nsw i64 %878, -3
DOALL:     	  %880 = getelementptr inbounds i32, i32* %113, i64 %879
DOALL:     	  %881 = load i32, i32* %880, align 4, !tbaa !38
DOALL:     	  %882 = icmp slt i32 %740, %881
DOALL:     	  br i1 %882, label %.._crit_edge69_crit_edge79.i, label %883, !prof !100
DOALL:     	  %884 = add nsw i64 %878, -2
DOALL:     	  %885 = getelementptr inbounds i32, i32* %113, i64 %884
DOALL:     	  %886 = load i32, i32* %885, align 4, !tbaa !38
DOALL:     	  %887 = icmp slt i32 %740, %886
DOALL:     	  br i1 %887, label %.._crit_edge69_crit_edge80.i, label %888, !prof !101
DOALL:     	  %889 = add nsw i64 %878, -1
DOALL:     	  %890 = getelementptr inbounds i32, i32* %113, i64 %889
DOALL:     	  %891 = load i32, i32* %890, align 4, !tbaa !38
DOALL:     	  %892 = icmp slt i32 %740, %891
DOALL:     	  br i1 %892, label %.._crit_edge69_crit_edge81.i, label %893, !prof !102
DOALL:     	  %894 = getelementptr inbounds i32, i32* %113, i64 %878
DOALL:     	  %895 = load i32, i32* %894, align 4, !tbaa !38
DOALL:     	  %896 = icmp slt i32 %740, %895
DOALL:     	  br i1 %896, label %.._crit_edge69_crit_edge82.i, label %897, !prof !103
DOALL:     	  %898 = add nsw i64 %878, 1
DOALL:     	  %899 = getelementptr inbounds i32, i32* %113, i64 %898
DOALL:     	  %900 = load i32, i32* %899, align 4, !tbaa !38
DOALL:     	  %901 = icmp slt i32 %740, %900
DOALL:     	  br i1 %901, label %.._crit_edge69_crit_edge83.i, label %902, !prof !104
DOALL:     	  %903 = add nsw i64 %878, 2
DOALL:     	  %904 = getelementptr inbounds i32, i32* %113, i64 %903
DOALL:     	  %905 = load i32, i32* %904, align 4, !tbaa !38
DOALL:     	  %906 = icmp slt i32 %740, %905
DOALL:     	  br i1 %906, label %.._crit_edge69_crit_edge84.i, label %907, !prof !105
DOALL:     	  %908 = add nsw i64 %878, 3
DOALL:     	  %909 = getelementptr inbounds i32, i32* %113, i64 %908
DOALL:     	  %910 = load i32, i32* %909, align 4, !tbaa !38
DOALL:     	  %911 = icmp slt i32 %740, %910
DOALL:     	  br i1 %911, label %.._crit_edge69_crit_edge85.i, label %912, !prof !106
DOALL:     	  %913 = add nsw i64 %731, %indvars.iv.i1
DOALL:     	  %914 = add nsw i64 %913, -3
DOALL:     	  %915 = getelementptr inbounds i32, i32* %113, i64 %914
DOALL:     	  %916 = load i32, i32* %915, align 4, !tbaa !38
DOALL:     	  %917 = icmp slt i32 %740, %916
DOALL:     	  br i1 %917, label %.._crit_edge69_crit_edge86.i, label %918, !prof !107
DOALL:     	  %919 = add nsw i64 %913, -2
DOALL:     	  %920 = getelementptr inbounds i32, i32* %113, i64 %919
DOALL:     	  %921 = load i32, i32* %920, align 4, !tbaa !38
DOALL:     	  %922 = icmp slt i32 %740, %921
DOALL:     	  br i1 %922, label %.._crit_edge69_crit_edge87.i, label %923, !prof !108
DOALL:     	  %924 = add nsw i64 %913, -1
DOALL:     	  %925 = getelementptr inbounds i32, i32* %113, i64 %924
DOALL:     	  %926 = load i32, i32* %925, align 4, !tbaa !38
DOALL:     	  %927 = icmp slt i32 %740, %926
DOALL:     	  br i1 %927, label %.._crit_edge69_crit_edge88.i, label %928, !prof !109
DOALL:     	  %929 = getelementptr inbounds i32, i32* %113, i64 %913
DOALL:     	  %930 = load i32, i32* %929, align 4, !tbaa !38
DOALL:     	  %931 = icmp slt i32 %740, %930
DOALL:     	  br i1 %931, label %.._crit_edge69_crit_edge89.i, label %932, !prof !110
DOALL:     	  %933 = add nsw i64 %913, 1
DOALL:     	  %934 = getelementptr inbounds i32, i32* %113, i64 %933
DOALL:     	  %935 = load i32, i32* %934, align 4, !tbaa !38
DOALL:     	  %936 = icmp slt i32 %740, %935
DOALL:     	  br i1 %936, label %.._crit_edge69_crit_edge90.i, label %937, !prof !111
DOALL:     	  %938 = add nsw i64 %913, 2
DOALL:     	  %939 = getelementptr inbounds i32, i32* %113, i64 %938
DOALL:     	  %940 = load i32, i32* %939, align 4, !tbaa !38
DOALL:     	  %941 = icmp slt i32 %740, %940
DOALL:     	  br i1 %941, label %.._crit_edge69_crit_edge91.i, label %942, !prof !112
DOALL:     	  %943 = add nsw i64 %913, 3
DOALL:     	  %944 = getelementptr inbounds i32, i32* %113, i64 %943
DOALL:     	  %945 = load i32, i32* %944, align 4, !tbaa !38
DOALL:     	  %946 = icmp slt i32 %740, %945
DOALL:     	  br i1 %946, label %.._crit_edge69_crit_edge92.i, label %947, !prof !113
DOALL:     	  %948 = add nsw i64 %733, %indvars.iv.i1
DOALL:     	  %949 = add nsw i64 %948, -3
DOALL:     	  %950 = getelementptr inbounds i32, i32* %113, i64 %949
DOALL:     	  %951 = load i32, i32* %950, align 4, !tbaa !38
DOALL:     	  %952 = icmp slt i32 %740, %951
DOALL:     	  br i1 %952, label %.._crit_edge69_crit_edge93.i, label %953, !prof !114
DOALL:     	  %954 = add nsw i64 %948, -2
DOALL:     	  %955 = getelementptr inbounds i32, i32* %113, i64 %954
DOALL:     	  %956 = load i32, i32* %955, align 4, !tbaa !38
DOALL:     	  %957 = icmp slt i32 %740, %956
DOALL:     	  br i1 %957, label %.._crit_edge69_crit_edge94.i, label %958, !prof !115
DOALL:     	  %959 = add nsw i64 %948, -1
DOALL:     	  %960 = getelementptr inbounds i32, i32* %113, i64 %959
DOALL:     	  %961 = load i32, i32* %960, align 4, !tbaa !38
DOALL:     	  %962 = icmp slt i32 %740, %961
DOALL:     	  br i1 %962, label %.._crit_edge69_crit_edge95.i, label %963, !prof !116
DOALL:     	  %964 = getelementptr inbounds i32, i32* %113, i64 %948
DOALL:     	  %965 = load i32, i32* %964, align 4, !tbaa !38
DOALL:     	  %966 = icmp slt i32 %740, %965
DOALL:     	  br i1 %966, label %.._crit_edge69_crit_edge96.i, label %967, !prof !117
DOALL:     	  %968 = add nsw i64 %948, 1
DOALL:     	  %969 = getelementptr inbounds i32, i32* %113, i64 %968
DOALL:     	  %970 = load i32, i32* %969, align 4, !tbaa !38
DOALL:     	  %971 = icmp slt i32 %740, %970
DOALL:     	  br i1 %971, label %.._crit_edge69_crit_edge97.i, label %972, !prof !118
DOALL:     	  %973 = add nsw i64 %948, 2
DOALL:     	  %974 = getelementptr inbounds i32, i32* %113, i64 %973
DOALL:     	  %975 = load i32, i32* %974, align 4, !tbaa !38
DOALL:     	  %976 = icmp slt i32 %740, %975
DOALL:     	  br i1 %976, label %.._crit_edge69_crit_edge98.i, label %977, !prof !119
DOALL:     	  %978 = add nsw i64 %948, 3
DOALL:     	  %979 = getelementptr inbounds i32, i32* %113, i64 %978
DOALL:     	  %980 = load i32, i32* %979, align 4, !tbaa !38
DOALL:     	  %981 = icmp slt i32 %740, %980
DOALL:     	  br i1 %981, label %.._crit_edge69_crit_edge99.i, label %982, !prof !120
DOALL:     	  %983 = sext i32 %.15.i to i64
DOALL:     	  %984 = getelementptr inbounds %struct.anon, %struct.anon* %115, i64 %983, i32 2
DOALL:     	  store i32 0, i32* %984, align 4, !tbaa !121
DOALL:     	  %985 = getelementptr inbounds %struct.anon, %struct.anon* %115, i64 %983, i32 0
DOALL:     	  %986 = trunc i64 %indvars.iv.i1 to i32
DOALL:     	  store i32 %986, i32* %985, align 4, !tbaa !123
DOALL:     	  %987 = getelementptr inbounds %struct.anon, %struct.anon* %115, i64 %983, i32 1
DOALL:     	  store i32 %734, i32* %987, align 4, !tbaa !124
DOALL:     	  %988 = getelementptr inbounds i32, i32* %142, i64 %738
DOALL:     	  %989 = load i32, i32* %988, align 4, !tbaa !38
DOALL:     	  %990 = getelementptr inbounds %struct.anon, %struct.anon* %115, i64 %983, i32 3
DOALL:     	  store i32 %989, i32* %990, align 4, !tbaa !125
DOALL:     	  %991 = getelementptr inbounds i32, i32* %144, i64 %738
DOALL:     	  %992 = load i32, i32* %991, align 4, !tbaa !38
DOALL:     	  %993 = getelementptr inbounds %struct.anon, %struct.anon* %115, i64 %983, i32 4
DOALL:     	  store i32 %992, i32* %993, align 4, !tbaa !126
DOALL:     	  %994 = getelementptr inbounds i8, i8* %116, i64 %738
DOALL:     	  %995 = load i8, i8* %994, align 1, !tbaa !36
DOALL:     	  %996 = zext i8 %995 to i32
DOALL:     	  %997 = getelementptr inbounds %struct.anon, %struct.anon* %115, i64 %983, i32 5
DOALL:     	  store i32 %996, i32* %997, align 4, !tbaa !127
DOALL:     	  %998 = add nsw i32 %.15.i, 1
DOALL:     	  %999 = icmp eq i32 %998, 15000
DOALL:     	  br i1 %999, label %1000, label %.._crit_edge69_crit_edge100.i, !prof !128
DOALL:     	  %.3.i = phi i32 [ %.15.i, %.._crit_edge69_crit_edge.i ], [ %.15.i, %.._crit_edge69_crit_edge52.i ], [ %.15.i, %.._crit_edge69_crit_edge53.i ], [ %.15.i, %.._crit_edge69_crit_edge54.i ], [ %.15.i, %.._crit_edge69_crit_edge55.i ], [ %.15.i, %.._crit_edge69_crit_edge56.i ], [ %.15.i, %.._crit_edge69_crit_edge57.i ], [ %.15.i, %.._crit_edge69_crit_edge58.i ], [ %.15.i, %.._crit_edge69_crit_edge59.i ], [ %.15.i, %.._crit_edge69_crit_edge60.i ], [ %.15.i, %.._crit_edge69_crit_edge61.i ], [ %.15.i, %.._crit_edge69_crit_edge62.i ], [ %.15.i, %.._crit_edge69_crit_edge63.i ], [ %.15.i, %.._crit_edge69_crit_edge64.i ], [ %.15.i, %.._crit_edge69_crit_edge65.i ], [ %.15.i, %.._crit_edge69_crit_edge66.i ], [ %.15.i, %.._crit_edge69_crit_edge67.i ], [ %.15.i, %.._crit_edge69_crit_edge68.i ], [ %.15.i, %.._crit_edge69_crit_edge69.i ], [ %.15.i, %.._crit_edge69_crit_edge70.i ], [ %.15.i, %.._crit_edge69_crit_edge71.i ], [ %.15.i, %.._crit_edge69_crit_edge72.i ], [ %.15.i, %.._crit_edge69_crit_edge73.i ], [ %.15.i, %.._crit_edge69_crit_edge74.i ], [ %.15.i, %.._crit_edge69_crit_edge75.i ], [ %.15.i, %.._crit_edge69_crit_edge76.i ], [ %.15.i, %.._crit_edge69_crit_edge77.i ], [ %.15.i, %.._crit_edge69_crit_edge78.i ], [ %.15.i, %.._crit_edge69_crit_edge79.i ], [ %.15.i, %.._crit_edge69_crit_edge80.i ], [ %.15.i, %.._crit_edge69_crit_edge81.i ], [ %.15.i, %.._crit_edge69_crit_edge82.i ], [ %.15.i, %.._crit_edge69_crit_edge83.i ], [ %.15.i, %.._crit_edge69_crit_edge84.i ], [ %.15.i, %.._crit_edge69_crit_edge85.i ], [ %.15.i, %.._crit_edge69_crit_edge86.i ], [ %.15.i, %.._crit_edge69_crit_edge87.i ], [ %.15.i, %.._crit_edge69_crit_edge88.i ], [ %.15.i, %.._crit_edge69_crit_edge89.i ], [ %.15.i, %.._crit_edge69_crit_edge90.i ], [ %.15.i, %.._crit_edge69_crit_edge91.i ], [ %.15.i, %.._crit_edge69_crit_edge92.i ], [ %.15.i, %.._crit_edge69_crit_edge93.i ], [ %.15.i, %.._crit_edge69_crit_edge94.i ], [ %.15.i, %.._crit_edge69_crit_edge95.i ], [ %.15.i, %.._crit_edge69_crit_edge96.i ], [ %.15.i, %.._crit_edge69_crit_edge97.i ], [ %.15.i, %.._crit_edge69_crit_edge98.i ], [ %.15.i, %.._crit_edge69_crit_edge99.i ], [ %998, %.._crit_edge69_crit_edge100.i ]
DOALL:     	  %indvars.iv.next.i2 = add nuw nsw i64 %indvars.iv.i1, 1
DOALL:     	  %.04.i.lcssa = phi i32 [ %.04.i, %719 ]
DOALL:     	  %1004 = sext i32 %.04.i.lcssa to i64
DOALL:     	  %1005 = getelementptr inbounds %struct.anon, %struct.anon* %115, i64 %1004, i32 2
DOALL:     	  store i32 7, i32* %1005, align 4, !tbaa !121
DOALL:     	  call void @free(i8* %141) #12
DOALL:     	  call void @free(i8* %143) #12
DOALL:     	  %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa)
DOALL:     	  %1007 = add nuw nsw i32 %.0.us.us, 1
DOALL:     	  %.0.us.us = phi i32 [ %1007, %susan_corners.exit ], [ 0, %.split64.us.preheader.split.us ]
DOALL:     	  %exitcond86.us = icmp eq i32 %.0.us.us, 10000
DOALL:     	  br i1 %exitcond86.us, label %.loopexit.loopexit19.us-lcssa.us, label %118, !prof !41
DOALL:     	  %119 = call noalias i8* @malloc(i64 516) #12
DOALL:     	  %120 = getelementptr inbounds i8, i8* %119, i64 258
DOALL:     	  store i8* %120, i8** %4, align 8, !tbaa !31
DOALL:     	  %121 = sitofp i32 %.016.lcssa to float
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %122 ], [ -256, %118 ]
DOALL:     	  %exitcond.i = icmp eq i64 %indvars.iv.i, 257
DOALL:     	  br i1 %exitcond.i, label %setup_brightness_lut.exit, label %122, !prof !42
DOALL:     	  %123 = trunc i64 %indvars.iv.i to i32
DOALL:     	  %124 = sitofp i32 %123 to float
DOALL:     	  %125 = fdiv float %124, %121
DOALL:     	  %126 = fmul float %125, %125
DOALL:     	  %127 = fmul float %126, %126
DOALL:     	  %128 = fmul float %127, %126
DOALL:     	  %129 = fsub float -0.000000e+00, %128
DOALL:     	  %130 = fpext float %129 to double
DOALL:     	  %131 = call double @exp(double %130) #12
DOALL:     	  %132 = fmul double %131, 1.000000e+02
DOALL:     	  %133 = fptrunc double %132 to float
DOALL:     	  %134 = fptoui float %133 to i8
DOALL:     	  %135 = load i8*, i8** %4, align 8, !tbaa !31
DOALL:     	  %136 = getelementptr inbounds i8, i8* %135, i64 %indvars.iv.i
DOALL:     	  store i8 %134, i8* %136, align 1, !tbaa !36
DOALL:     	  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, 1
DOALL:     	  %137 = load i8*, i8** %4, align 8, !tbaa !31
DOALL:     	  %138 = mul nsw i32 %107, %108
DOALL:     	  %139 = sext i32 %138 to i64
DOALL:     	  %140 = shl nsw i64 %139, 2
DOALL:     	  call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43
DOALL:     	  %141 = call noalias i8* @malloc(i64 %140) #12
DOALL:     	  %142 = bitcast i8* %141 to i32*
DOALL:     	  %143 = call noalias i8* @malloc(i64 %140) #12
DOALL:     	  %144 = bitcast i8* %143 to i32*
DOALL:     	  %145 = add nsw i32 %108, -5
DOALL:     	  %146 = add nsw i32 %107, -5
DOALL:     	  %147 = add nsw i32 %107, -3
DOALL:     	  %148 = sext i32 %147 to i64
DOALL:     	  %149 = sext i32 %146 to i64
DOALL:     	  %150 = add nsw i32 %107, -6
DOALL:     	  %151 = sext i32 %150 to i64
DOALL:     	  %152 = sext i32 %145 to i64
DOALL:     	  %153 = sext i32 %107 to i64
DOALL:     	  %154 = getelementptr inbounds i8, i8* %116, i64 -1
DOALL:     	  %indvars.iv45.i = phi i64 [ %indvars.iv.next46.i, %718 ], [ 5, %setup_brightness_lut.exit ]
DOALL:     	  %156 = icmp slt i64 %indvars.iv45.i, %152
DOALL:     	  br i1 %156, label %157, label %.preheader.i, !prof !44
DOALL:     	  %158 = add nsw i64 %indvars.iv45.i, -3
DOALL:     	  %159 = mul nsw i64 %158, %153
DOALL:     	  %160 = mul nsw i64 %indvars.iv45.i, %153
DOALL:     	  %161 = getelementptr inbounds i8, i8* %154, i64 %159
DOALL:     	  %162 = trunc i64 %indvars.iv45.i to i32
DOALL:     	  %indvars.iv43.i = phi i64 [ %indvars.iv.next44.i, %._crit_edge.i ], [ 5, %157 ]
DOALL:     	  %164 = icmp slt i64 %indvars.iv43.i, %149
DOALL:     	  br i1 %164, label %165, label %718, !prof !45
DOALL:     	  %166 = getelementptr inbounds i8, i8* %161, i64 %indvars.iv43.i
DOALL:     	  %167 = add nsw i64 %160, %indvars.iv43.i
DOALL:     	  %168 = getelementptr inbounds i8, i8* %116, i64 %167
DOALL:     	  %169 = load i8, i8* %168, align 1, !tbaa !36
DOALL:     	  %170 = zext i8 %169 to i64
DOALL:     	  %171 = getelementptr inbounds i8, i8* %137, i64 %170
DOALL:     	  %172 = getelementptr inbounds i8, i8* %166, i64 1
DOALL:     	  %173 = load i8, i8* %166, align 1, !tbaa !36
DOALL:     	  %174 = zext i8 %173 to i64
DOALL:     	  %175 = sub nsw i64 0, %174
DOALL:     	  %176 = getelementptr inbounds i8, i8* %171, i64 %175
DOALL:     	  %177 = load i8, i8* %176, align 1, !tbaa !36
DOALL:     	  %178 = zext i8 %177 to i32
DOALL:     	  %179 = add nuw nsw i32 %178, 100
DOALL:     	  %180 = getelementptr inbounds i8, i8* %172, i64 1
DOALL:     	  %181 = load i8, i8* %172, align 1, !tbaa !36
DOALL:     	  %182 = zext i8 %181 to i64
DOALL:     	  %183 = sub nsw i64 0, %182
DOALL:     	  %184 = getelementptr inbounds i8, i8* %171, i64 %183
DOALL:     	  %185 = load i8, i8* %184, align 1, !tbaa !36
DOALL:     	  %186 = zext i8 %185 to i32
DOALL:     	  %187 = add nuw nsw i32 %179, %186
DOALL:     	  %188 = load i8, i8* %180, align 1, !tbaa !36
DOALL:     	  %189 = zext i8 %188 to i64
DOALL:     	  %190 = sub nsw i64 0, %189
DOALL:     	  %191 = getelementptr inbounds i8, i8* %171, i64 %190
DOALL:     	  %192 = load i8, i8* %191, align 1, !tbaa !36
DOALL:     	  %193 = zext i8 %192 to i32
DOALL:     	  %194 = add nuw nsw i32 %187, %193
DOALL:     	  %195 = getelementptr inbounds i8, i8* %180, i64 %148
DOALL:     	  %196 = getelementptr inbounds i8, i8* %195, i64 1
DOALL:     	  %197 = load i8, i8* %195, align 1, !tbaa !36
DOALL:     	  %198 = zext i8 %197 to i64
DOALL:     	  %199 = sub nsw i64 0, %198
DOALL:     	  %200 = getelementptr inbounds i8, i8* %171, i64 %199
DOALL:     	  %201 = load i8, i8* %200, align 1, !tbaa !36
DOALL:     	  %202 = zext i8 %201 to i32
DOALL:     	  %203 = add nuw nsw i32 %194, %202
DOALL:     	  %204 = getelementptr inbounds i8, i8* %196, i64 1
DOALL:     	  %205 = load i8, i8* %196, align 1, !tbaa !36
DOALL:     	  %206 = zext i8 %205 to i64
DOALL:     	  %207 = sub nsw i64 0, %206
DOALL:     	  %208 = getelementptr inbounds i8, i8* %171, i64 %207
DOALL:     	  %209 = load i8, i8* %208, align 1, !tbaa !36
DOALL:     	  %210 = zext i8 %209 to i32
DOALL:     	  %211 = add nuw nsw i32 %203, %210
DOALL:     	  %212 = getelementptr inbounds i8, i8* %204, i64 1
DOALL:     	  %213 = load i8, i8* %204, align 1, !tbaa !36
DOALL:     	  %214 = zext i8 %213 to i64
DOALL:     	  %215 = sub nsw i64 0, %214
DOALL:     	  %216 = getelementptr inbounds i8, i8* %171, i64 %215
DOALL:     	  %217 = load i8, i8* %216, align 1, !tbaa !36
DOALL:     	  %218 = zext i8 %217 to i32
DOALL:     	  %219 = add nuw nsw i32 %211, %218
DOALL:     	  %220 = getelementptr inbounds i8, i8* %212, i64 1
DOALL:     	  %221 = load i8, i8* %212, align 1, !tbaa !36
DOALL:     	  %222 = zext i8 %221 to i64
DOALL:     	  %223 = sub nsw i64 0, %222
DOALL:     	  %224 = getelementptr inbounds i8, i8* %171, i64 %223
DOALL:     	  %225 = load i8, i8* %224, align 1, !tbaa !36
DOALL:     	  %226 = zext i8 %225 to i32
DOALL:     	  %227 = add nsw i32 %219, %226
DOALL:     	  %228 = load i8, i8* %220, align 1, !tbaa !36
DOALL:     	  %229 = zext i8 %228 to i64
DOALL:     	  %230 = sub nsw i64 0, %229
DOALL:     	  %231 = getelementptr inbounds i8, i8* %171, i64 %230
DOALL:     	  %232 = load i8, i8* %231, align 1, !tbaa !36
DOALL:     	  %233 = zext i8 %232 to i32
DOALL:     	  %234 = add nsw i32 %227, %233
DOALL:     	  %235 = getelementptr inbounds i8, i8* %220, i64 %149
DOALL:     	  %236 = getelementptr inbounds i8, i8* %235, i64 1
DOALL:     	  %237 = load i8, i8* %235, align 1, !tbaa !36
DOALL:     	  %238 = zext i8 %237 to i64
DOALL:     	  %239 = sub nsw i64 0, %238
DOALL:     	  %240 = getelementptr inbounds i8, i8* %171, i64 %239
DOALL:     	  %241 = load i8, i8* %240, align 1, !tbaa !36
DOALL:     	  %242 = zext i8 %241 to i32
DOALL:     	  %243 = add nsw i32 %234, %242
DOALL:     	  %244 = getelementptr inbounds i8, i8* %236, i64 1
DOALL:     	  %245 = load i8, i8* %236, align 1, !tbaa !36
DOALL:     	  %246 = zext i8 %245 to i64
DOALL:     	  %247 = sub nsw i64 0, %246
DOALL:     	  %248 = getelementptr inbounds i8, i8* %171, i64 %247
DOALL:     	  %249 = load i8, i8* %248, align 1, !tbaa !36
DOALL:     	  %250 = zext i8 %249 to i32
DOALL:     	  %251 = add nsw i32 %243, %250
DOALL:     	  %252 = getelementptr inbounds i8, i8* %244, i64 1
DOALL:     	  %253 = load i8, i8* %244, align 1, !tbaa !36
DOALL:     	  %254 = zext i8 %253 to i64
DOALL:     	  %255 = sub nsw i64 0, %254
DOALL:     	  %256 = getelementptr inbounds i8, i8* %171, i64 %255
DOALL:     	  %257 = load i8, i8* %256, align 1, !tbaa !36
DOALL:     	  %258 = zext i8 %257 to i32
DOALL:     	  %259 = add nsw i32 %251, %258
DOALL:     	  %260 = getelementptr inbounds i8, i8* %252, i64 1
DOALL:     	  %261 = load i8, i8* %252, align 1, !tbaa !36
DOALL:     	  %262 = zext i8 %261 to i64
DOALL:     	  %263 = sub nsw i64 0, %262
DOALL:     	  %264 = getelementptr inbounds i8, i8* %171, i64 %263
DOALL:     	  %265 = load i8, i8* %264, align 1, !tbaa !36
DOALL:     	  %266 = zext i8 %265 to i32
DOALL:     	  %267 = add nsw i32 %259, %266
DOALL:     	  %268 = getelementptr inbounds i8, i8* %260, i64 1
DOALL:     	  %269 = load i8, i8* %260, align 1, !tbaa !36
DOALL:     	  %270 = zext i8 %269 to i64
DOALL:     	  %271 = sub nsw i64 0, %270
DOALL:     	  %272 = getelementptr inbounds i8, i8* %171, i64 %271
DOALL:     	  %273 = load i8, i8* %272, align 1, !tbaa !36
DOALL:     	  %274 = zext i8 %273 to i32
DOALL:     	  %275 = add nsw i32 %267, %274
DOALL:     	  %276 = getelementptr inbounds i8, i8* %268, i64 1
DOALL:     	  %277 = load i8, i8* %268, align 1, !tbaa !36
DOALL:     	  %278 = zext i8 %277 to i64
DOALL:     	  %279 = sub nsw i64 0, %278
DOALL:     	  %280 = getelementptr inbounds i8, i8* %171, i64 %279
DOALL:     	  %281 = load i8, i8* %280, align 1, !tbaa !36
DOALL:     	  %282 = zext i8 %281 to i32
DOALL:     	  %283 = add nsw i32 %275, %282
DOALL:     	  %284 = load i8, i8* %276, align 1, !tbaa !36
DOALL:     	  %285 = zext i8 %284 to i64
DOALL:     	  %286 = sub nsw i64 0, %285
DOALL:     	  %287 = getelementptr inbounds i8, i8* %171, i64 %286
DOALL:     	  %288 = load i8, i8* %287, align 1, !tbaa !36
DOALL:     	  %289 = zext i8 %288 to i32
DOALL:     	  %290 = add nsw i32 %283, %289
DOALL:     	  %291 = getelementptr inbounds i8, i8* %276, i64 %151
DOALL:     	  %292 = getelementptr inbounds i8, i8* %291, i64 1
DOALL:     	  %293 = load i8, i8* %291, align 1, !tbaa !36
DOALL:     	  %294 = zext i8 %293 to i64
DOALL:     	  %295 = sub nsw i64 0, %294
DOALL:     	  %296 = getelementptr inbounds i8, i8* %171, i64 %295
DOALL:     	  %297 = load i8, i8* %296, align 1, !tbaa !36
DOALL:     	  %298 = zext i8 %297 to i32
DOALL:     	  %299 = add nsw i32 %290, %298
DOALL:     	  %300 = getelementptr inbounds i8, i8* %292, i64 1
DOALL:     	  %301 = load i8, i8* %292, align 1, !tbaa !36
DOALL:     	  %302 = zext i8 %301 to i64
DOALL:     	  %303 = sub nsw i64 0, %302
DOALL:     	  %304 = getelementptr inbounds i8, i8* %171, i64 %303
DOALL:     	  %305 = load i8, i8* %304, align 1, !tbaa !36
DOALL:     	  %306 = zext i8 %305 to i32
DOALL:     	  %307 = add nsw i32 %299, %306
DOALL:     	  %308 = load i8, i8* %300, align 1, !tbaa !36
DOALL:     	  %309 = zext i8 %308 to i64
DOALL:     	  %310 = sub nsw i64 0, %309
DOALL:     	  %311 = getelementptr inbounds i8, i8* %171, i64 %310
DOALL:     	  %312 = load i8, i8* %311, align 1, !tbaa !36
DOALL:     	  %313 = zext i8 %312 to i32
DOALL:     	  %314 = add nsw i32 %307, %313
DOALL:     	  %315 = icmp slt i32 %314, 1850
DOALL:     	  br i1 %315, label %316, label %.._crit_edge_crit_edge.i, !prof !46
DOALL:     	  %317 = getelementptr inbounds i8, i8* %300, i64 2
DOALL:     	  %318 = getelementptr inbounds i8, i8* %317, i64 1
DOALL:     	  %319 = load i8, i8* %317, align 1, !tbaa !36
DOALL:     	  %320 = zext i8 %319 to i64
DOALL:     	  %321 = sub nsw i64 0, %320
DOALL:     	  %322 = getelementptr inbounds i8, i8* %171, i64 %321
DOALL:     	  %323 = load i8, i8* %322, align 1, !tbaa !36
DOALL:     	  %324 = zext i8 %323 to i32
DOALL:     	  %325 = add nsw i32 %314, %324
DOALL:     	  %326 = icmp slt i32 %325, 1850
DOALL:     	  br i1 %326, label %327, label %.._crit_edge_crit_edge32.i, !prof !47
DOALL:     	  %328 = getelementptr inbounds i8, i8* %318, i64 1
DOALL:     	  %329 = load i8, i8* %318, align 1, !tbaa !36
DOALL:     	  %330 = zext i8 %329 to i64
DOALL:     	  %331 = sub nsw i64 0, %330
DOALL:     	  %332 = getelementptr inbounds i8, i8* %171, i64 %331
DOALL:     	  %333 = load i8, i8* %332, align 1, !tbaa !36
DOALL:     	  %334 = zext i8 %333 to i32
DOALL:     	  %335 = add nsw i32 %325, %334
DOALL:     	  %336 = icmp slt i32 %335, 1850
DOALL:     	  br i1 %336, label %337, label %.._crit_edge_crit_edge33.i, !prof !48
DOALL:     	  %338 = load i8, i8* %328, align 1, !tbaa !36
DOALL:     	  %339 = zext i8 %338 to i64
DOALL:     	  %340 = sub nsw i64 0, %339
DOALL:     	  %341 = getelementptr inbounds i8, i8* %171, i64 %340
DOALL:     	  %342 = load i8, i8* %341, align 1, !tbaa !36
DOALL:     	  %343 = zext i8 %342 to i32
DOALL:     	  %344 = add nsw i32 %335, %343
DOALL:     	  %345 = icmp slt i32 %344, 1850
DOALL:     	  br i1 %345, label %346, label %.._crit_edge_crit_edge34.i, !prof !49
DOALL:     	  %347 = getelementptr inbounds i8, i8* %328, i64 %151
DOALL:     	  %348 = getelementptr inbounds i8, i8* %347, i64 1
DOALL:     	  %349 = load i8, i8* %347, align 1, !tbaa !36
DOALL:     	  %350 = zext i8 %349 to i64
DOALL:     	  %351 = sub nsw i64 0, %350
DOALL:     	  %352 = getelementptr inbounds i8, i8* %171, i64 %351
DOALL:     	  %353 = load i8, i8* %352, align 1, !tbaa !36
DOALL:     	  %354 = zext i8 %353 to i32
DOALL:     	  %355 = add nsw i32 %344, %354
DOALL:     	  %356 = icmp slt i32 %355, 1850
DOALL:     	  br i1 %356, label %357, label %.._crit_edge_crit_edge35.i, !prof !50
DOALL:     	  %358 = getelementptr inbounds i8, i8* %348, i64 1
DOALL:     	  %359 = load i8, i8* %348, align 1, !tbaa !36
DOALL:     	  %360 = zext i8 %359 to i64
DOALL:     	  %361 = sub nsw i64 0, %360
DOALL:     	  %362 = getelementptr inbounds i8, i8* %171, i64 %361
DOALL:     	  %363 = load i8, i8* %362, align 1, !tbaa !36
DOALL:     	  %364 = zext i8 %363 to i32
DOALL:     	  %365 = add nsw i32 %355, %364
DOALL:     	  %366 = icmp slt i32 %365, 1850
DOALL:     	  br i1 %366, label %367, label %.._crit_edge_crit_edge36.i, !prof !51
DOALL:     	  %368 = getelementptr inbounds i8, i8* %358, i64 1
DOALL:     	  %369 = load i8, i8* %358, align 1, !tbaa !36
DOALL:     	  %370 = zext i8 %369 to i64
DOALL:     	  %371 = sub nsw i64 0, %370
DOALL:     	  %372 = getelementptr inbounds i8, i8* %171, i64 %371
DOALL:     	  %373 = load i8, i8* %372, align 1, !tbaa !36
DOALL:     	  %374 = zext i8 %373 to i32
DOALL:     	  %375 = add nsw i32 %365, %374
DOALL:     	  %376 = icmp slt i32 %375, 1850
DOALL:     	  br i1 %376, label %377, label %.._crit_edge_crit_edge37.i, !prof !52
DOALL:     	  %378 = getelementptr inbounds i8, i8* %368, i64 1
DOALL:     	  %379 = load i8, i8* %368, align 1, !tbaa !36
DOALL:     	  %380 = zext i8 %379 to i64
DOALL:     	  %381 = sub nsw i64 0, %380
DOALL:     	  %382 = getelementptr inbounds i8, i8* %171, i64 %381
DOALL:     	  %383 = load i8, i8* %382, align 1, !tbaa !36
DOALL:     	  %384 = zext i8 %383 to i32
DOALL:     	  %385 = add nsw i32 %375, %384
DOALL:     	  %386 = icmp slt i32 %385, 1850
DOALL:     	  br i1 %386, label %387, label %.._crit_edge_crit_edge38.i, !prof !53
DOALL:     	  %388 = getelementptr inbounds i8, i8* %378, i64 1
DOALL:     	  %389 = load i8, i8* %378, align 1, !tbaa !36
DOALL:     	  %390 = zext i8 %389 to i64
DOALL:     	  %391 = sub nsw i64 0, %390
DOALL:     	  %392 = getelementptr inbounds i8, i8* %171, i64 %391
DOALL:     	  %393 = load i8, i8* %392, align 1, !tbaa !36
DOALL:     	  %394 = zext i8 %393 to i32
DOALL:     	  %395 = add nsw i32 %385, %394
DOALL:     	  %396 = icmp slt i32 %395, 1850
DOALL:     	  br i1 %396, label %397, label %.._crit_edge_crit_edge39.i, !prof !54
DOALL:     	  %398 = getelementptr inbounds i8, i8* %388, i64 1
DOALL:     	  %399 = load i8, i8* %388, align 1, !tbaa !36
DOALL:     	  %400 = zext i8 %399 to i64
DOALL:     	  %401 = sub nsw i64 0, %400
DOALL:     	  %402 = getelementptr inbounds i8, i8* %171, i64 %401
DOALL:     	  %403 = load i8, i8* %402, align 1, !tbaa !36
DOALL:     	  %404 = zext i8 %403 to i32
DOALL:     	  %405 = add nsw i32 %395, %404
DOALL:     	  %406 = icmp slt i32 %405, 1850
DOALL:     	  br i1 %406, label %407, label %.._crit_edge_crit_edge40.i, !prof !55
DOALL:     	  %408 = load i8, i8* %398, align 1, !tbaa !36
DOALL:     	  %409 = zext i8 %408 to i64
DOALL:     	  %410 = sub nsw i64 0, %409
DOALL:     	  %411 = getelementptr inbounds i8, i8* %171, i64 %410
DOALL:     	  %412 = load i8, i8* %411, align 1, !tbaa !36
DOALL:     	  %413 = zext i8 %412 to i32
DOALL:     	  %414 = add nsw i32 %405, %413
DOALL:     	  %415 = icmp slt i32 %414, 1850
DOALL:     	  br i1 %415, label %416, label %.._crit_edge_crit_edge41.i, !prof !56
DOALL:     	  %417 = getelementptr inbounds i8, i8* %398, i64 %149
DOALL:     	  %418 = getelementptr inbounds i8, i8* %417, i64 1
DOALL:     	  %419 = load i8, i8* %417, align 1, !tbaa !36
DOALL:     	  %420 = zext i8 %419 to i64
DOALL:     	  %421 = sub nsw i64 0, %420
DOALL:     	  %422 = getelementptr inbounds i8, i8* %171, i64 %421
DOALL:     	  %423 = load i8, i8* %422, align 1, !tbaa !36
DOALL:     	  %424 = zext i8 %423 to i32
DOALL:     	  %425 = add nsw i32 %414, %424
DOALL:     	  %426 = icmp slt i32 %425, 1850
DOALL:     	  br i1 %426, label %427, label %.._crit_edge_crit_edge42.i, !prof !57
DOALL:     	  %428 = getelementptr inbounds i8, i8* %418, i64 1
DOALL:     	  %429 = load i8, i8* %418, align 1, !tbaa !36
DOALL:     	  %430 = zext i8 %429 to i64
DOALL:     	  %431 = sub nsw i64 0, %430
DOALL:     	  %432 = getelementptr inbounds i8, i8* %171, i64 %431
DOALL:     	  %433 = load i8, i8* %432, align 1, !tbaa !36
DOALL:     	  %434 = zext i8 %433 to i32
DOALL:     	  %435 = add nsw i32 %425, %434
DOALL:     	  %436 = icmp slt i32 %435, 1850
DOALL:     	  br i1 %436, label %437, label %.._crit_edge_crit_edge43.i, !prof !58
DOALL:     	  %438 = getelementptr inbounds i8, i8* %428, i64 1
DOALL:     	  %439 = load i8, i8* %428, align 1, !tbaa !36
DOALL:     	  %440 = zext i8 %439 to i64
DOALL:     	  %441 = sub nsw i64 0, %440
DOALL:     	  %442 = getelementptr inbounds i8, i8* %171, i64 %441
DOALL:     	  %443 = load i8, i8* %442, align 1, !tbaa !36
DOALL:     	  %444 = zext i8 %443 to i32
DOALL:     	  %445 = add nsw i32 %435, %444
DOALL:     	  %446 = icmp slt i32 %445, 1850
DOALL:     	  br i1 %446, label %447, label %.._crit_edge_crit_edge44.i, !prof !59
DOALL:     	  %448 = getelementptr inbounds i8, i8* %438, i64 1
DOALL:     	  %449 = load i8, i8* %438, align 1, !tbaa !36
DOALL:     	  %450 = zext i8 %449 to i64
DOALL:     	  %451 = sub nsw i64 0, %450
DOALL:     	  %452 = getelementptr inbounds i8, i8* %171, i64 %451
DOALL:     	  %453 = load i8, i8* %452, align 1, !tbaa !36
DOALL:     	  %454 = zext i8 %453 to i32
DOALL:     	  %455 = add nsw i32 %445, %454
DOALL:     	  %456 = icmp slt i32 %455, 1850
DOALL:     	  br i1 %456, label %457, label %.._crit_edge_crit_edge45.i, !prof !60
DOALL:     	  %458 = load i8, i8* %448, align 1, !tbaa !36
DOALL:     	  %459 = zext i8 %458 to i64
DOALL:     	  %460 = sub nsw i64 0, %459
DOALL:     	  %461 = getelementptr inbounds i8, i8* %171, i64 %460
DOALL:     	  %462 = load i8, i8* %461, align 1, !tbaa !36
DOALL:     	  %463 = zext i8 %462 to i32
DOALL:     	  %464 = add nsw i32 %455, %463
DOALL:     	  %465 = icmp slt i32 %464, 1850
DOALL:     	  br i1 %465, label %466, label %.._crit_edge_crit_edge46.i, !prof !61
DOALL:     	  %467 = getelementptr inbounds i8, i8* %448, i64 %148
DOALL:     	  %468 = getelementptr inbounds i8, i8* %467, i64 1
DOALL:     	  %469 = load i8, i8* %467, align 1, !tbaa !36
DOALL:     	  %470 = zext i8 %469 to i64
DOALL:     	  %471 = sub nsw i64 0, %470
DOALL:     	  %472 = getelementptr inbounds i8, i8* %171, i64 %471
DOALL:     	  %473 = load i8, i8* %472, align 1, !tbaa !36
DOALL:     	  %474 = zext i8 %473 to i32
DOALL:     	  %475 = add nsw i32 %464, %474
DOALL:     	  %476 = icmp slt i32 %475, 1850
DOALL:     	  br i1 %476, label %477, label %.._crit_edge_crit_edge47.i, !prof !62
DOALL:     	  %478 = load i8, i8* %468, align 1, !tbaa !36
DOALL:     	  %479 = zext i8 %478 to i64
DOALL:     	  %480 = sub nsw i64 0, %479
DOALL:     	  %481 = getelementptr inbounds i8, i8* %171, i64 %480
DOALL:     	  %482 = load i8, i8* %481, align 1, !tbaa !36
DOALL:     	  %483 = zext i8 %482 to i32
DOALL:     	  %484 = add nsw i32 %475, %483
DOALL:     	  %485 = icmp slt i32 %484, 1850
DOALL:     	  br i1 %485, label %486, label %.._crit_edge_crit_edge48.i, !prof !63
DOALL:     	  %487 = getelementptr inbounds i8, i8* %468, i64 1
DOALL:     	  %488 = load i8, i8* %487, align 1, !tbaa !36
DOALL:     	  %489 = zext i8 %488 to i64
DOALL:     	  %490 = sub nsw i64 0, %489
DOALL:     	  %491 = getelementptr inbounds i8, i8* %171, i64 %490
DOALL:     	  %492 = load i8, i8* %491, align 1, !tbaa !36
DOALL:     	  %493 = zext i8 %492 to i32
DOALL:     	  %494 = add nsw i32 %484, %493
DOALL:     	  %495 = icmp slt i32 %494, 1850
DOALL:     	  br i1 %495, label %496, label %.._crit_edge_crit_edge49.i, !prof !64
DOALL:     	  %497 = add nuw nsw i32 %178, %186
DOALL:     	  %498 = sub nsw i32 %193, %178
DOALL:     	  %499 = add nuw nsw i32 %497, %193
DOALL:     	  %500 = mul nsw i32 %499, -3
DOALL:     	  %501 = shl nuw nsw i32 %202, 1
DOALL:     	  %502 = sub nsw i32 %498, %501
DOALL:     	  %503 = sub nsw i32 %500, %501
DOALL:     	  %504 = sub nsw i32 %502, %210
DOALL:     	  %505 = shl nuw nsw i32 %210, 1
DOALL:     	  %506 = sub nsw i32 %503, %505
DOALL:     	  %507 = shl nuw nsw i32 %218, 1
DOALL:     	  %508 = sub nsw i32 %506, %507
DOALL:     	  %509 = add nsw i32 %504, %226
DOALL:     	  %510 = shl nuw nsw i32 %226, 1
DOALL:     	  %511 = sub nsw i32 %508, %510
DOALL:     	  %512 = shl nuw nsw i32 %233, 1
DOALL:     	  %513 = add nsw i32 %509, %512
DOALL:     	  %514 = sub nsw i32 %511, %512
DOALL:     	  %515 = mul nsw i32 %242, -3
DOALL:     	  %516 = add nsw i32 %513, %515
DOALL:     	  %517 = sub nsw i32 %514, %242
DOALL:     	  %518 = shl nuw nsw i32 %250, 1
DOALL:     	  %519 = sub nsw i32 %516, %518
DOALL:     	  %520 = sub nsw i32 %517, %250
DOALL:     	  %521 = sub nsw i32 %519, %258
DOALL:     	  %522 = sub nsw i32 %520, %258
DOALL:     	  %523 = sub nsw i32 %522, %266
DOALL:     	  %524 = add nsw i32 %521, %274
DOALL:     	  %525 = sub nsw i32 %523, %274
DOALL:     	  %526 = shl nuw nsw i32 %282, 1
DOALL:     	  %527 = add nsw i32 %524, %526
DOALL:     	  %528 = sub nsw i32 %525, %282
DOALL:     	  %529 = mul nuw nsw i32 %289, 3
DOALL:     	  %530 = add nsw i32 %527, %529
DOALL:     	  %531 = sub nsw i32 %528, %289
DOALL:     	  %532 = mul nsw i32 %298, -3
DOALL:     	  %533 = add i32 %530, %532
DOALL:     	  %534 = shl nuw nsw i32 %306, 1
DOALL:     	  %535 = sub nsw i32 %533, %534
DOALL:     	  %536 = sub nsw i32 %535, %313
DOALL:     	  %537 = add nsw i32 %536, %324
DOALL:     	  %538 = shl nuw nsw i32 %334, 1
DOALL:     	  %539 = add nsw i32 %537, %538
DOALL:     	  %540 = mul nuw nsw i32 %343, 3
DOALL:     	  %541 = add nsw i32 %539, %540
DOALL:     	  %542 = mul nsw i32 %354, -3
DOALL:     	  %543 = add i32 %541, %542
DOALL:     	  %544 = add nsw i32 %531, %354
DOALL:     	  %545 = shl nuw nsw i32 %364, 1
DOALL:     	  %546 = sub nsw i32 %543, %545
DOALL:     	  %547 = add nsw i32 %544, %364
DOALL:     	  %548 = sub nsw i32 %546, %374
DOALL:     	  %549 = add nsw i32 %547, %374
DOALL:     	  %550 = add nsw i32 %549, %384
DOALL:     	  %551 = add nsw i32 %548, %394
DOALL:     	  %552 = add nsw i32 %550, %394
DOALL:     	  %553 = shl nuw nsw i32 %404, 1
DOALL:     	  %554 = add nsw i32 %551, %553
DOALL:     	  %555 = add nsw i32 %552, %404
DOALL:     	  %556 = mul nuw nsw i32 %413, 3
DOALL:     	  %557 = add nsw i32 %554, %556
DOALL:     	  %558 = add nsw i32 %555, %413
DOALL:     	  %559 = shl nuw nsw i32 %424, 1
DOALL:     	  %560 = sub nsw i32 %557, %559
DOALL:     	  %561 = add nsw i32 %558, %559
DOALL:     	  %562 = sub nsw i32 %560, %434
DOALL:     	  %563 = shl nuw nsw i32 %434, 1
DOALL:     	  %564 = add nsw i32 %561, %563
DOALL:     	  %565 = shl nuw nsw i32 %444, 1
DOALL:     	  %566 = add nsw i32 %564, %565
DOALL:     	  %567 = add nsw i32 %562, %454
DOALL:     	  %568 = shl nuw nsw i32 %454, 1
DOALL:     	  %569 = add nsw i32 %566, %568
DOALL:     	  %570 = shl nuw nsw i32 %463, 1
DOALL:     	  %571 = add nsw i32 %567, %570
DOALL:     	  %572 = add nsw i32 %569, %570
DOALL:     	  %573 = sub nsw i32 %571, %474
DOALL:     	  %574 = mul nuw nsw i32 %474, 3
DOALL:     	  %575 = add nsw i32 %572, %574
DOALL:     	  %576 = mul nuw nsw i32 %483, 3
DOALL:     	  %577 = add nsw i32 %575, %576
DOALL:     	  %578 = add nsw i32 %573, %493
DOALL:     	  %579 = mul nuw nsw i32 %493, 3
DOALL:     	  %580 = add nsw i32 %577, %579
DOALL:     	  %581 = mul nsw i32 %578, %578
DOALL:     	  %582 = mul nsw i32 %580, %580
DOALL:     	  %583 = add nuw nsw i32 %581, %582
DOALL:     	  %584 = mul nsw i32 %494, %494
DOALL:     	  %585 = lshr i32 %584, 1
DOALL:     	  %586 = icmp ugt i32 %583, %585
DOALL:     	  br i1 %586, label %587, label %.._crit_edge_crit_edge50.i, !prof !65
DOALL:     	  %588 = icmp ult i32 %582, %581
DOALL:     	  br i1 %588, label %589, label %648, !prof !66
DOALL:     	  %590 = sitofp i32 %580 to float
DOALL:     	  %591 = icmp slt i32 %578, 0
DOALL:     	  %neg10.i = sub nsw i32 0, %578
DOALL:     	  %592 = select i1 %591, i32 %neg10.i, i32 %578, !prof !67
DOALL:     	  %593 = sitofp i32 %592 to float
DOALL:     	  %594 = fdiv float %590, %593
DOALL:     	  %595 = sdiv i32 %592, %578
DOALL:     	  %596 = fcmp olt float %594, 0.000000e+00
DOALL:     	  %597 = fpext float %594 to double
DOALL:     	  %.v11.v.i = select i1 %596, double -5.000000e-01, double 5.000000e-01, !prof !68
DOALL:     	  %.v11.i = fadd double %.v11.v.i, %597
DOALL:     	  %598 = fptosi double %.v11.i to i32
DOALL:     	  %599 = add nsw i32 %162, %598
DOALL:     	  %600 = mul nsw i32 %599, %107
DOALL:     	  %601 = trunc i64 %indvars.iv43.i to i32
DOALL:     	  %602 = add nsw i32 %600, %601
DOALL:     	  %603 = add nsw i32 %602, %595
DOALL:     	  %604 = sext i32 %603 to i64
DOALL:     	  %605 = getelementptr inbounds i8, i8* %116, i64 %604
DOALL:     	  %606 = load i8, i8* %605, align 1, !tbaa !36
DOALL:     	  %607 = zext i8 %606 to i64
DOALL:     	  %608 = sub nsw i64 0, %607
DOALL:     	  %609 = getelementptr inbounds i8, i8* %171, i64 %608
DOALL:     	  %610 = load i8, i8* %609, align 1, !tbaa !36
DOALL:     	  %611 = zext i8 %610 to i32
DOALL:     	  %612 = fmul float %594, 2.000000e+00
DOALL:     	  %613 = fcmp olt float %612, 0.000000e+00
DOALL:     	  %614 = fpext float %612 to double
DOALL:     	  %.v12.v.i = select i1 %613, double -5.000000e-01, double 5.000000e-01, !prof !68
DOALL:     	  %.v12.i = fadd double %.v12.v.i, %614
DOALL:     	  %615 = fptosi double %.v12.i to i32
DOALL:     	  %616 = add nsw i32 %162, %615
DOALL:     	  %617 = mul nsw i32 %616, %107
DOALL:     	  %618 = add nsw i32 %617, %601
DOALL:     	  %619 = shl nsw i32 %595, 1
DOALL:     	  %620 = add nsw i32 %618, %619
DOALL:     	  %621 = sext i32 %620 to i64
DOALL:     	  %622 = getelementptr inbounds i8, i8* %116, i64 %621
DOALL:     	  %623 = load i8, i8* %622, align 1, !tbaa !36
DOALL:     	  %624 = zext i8 %623 to i64
DOALL:     	  %625 = sub nsw i64 0, %624
DOALL:     	  %626 = getelementptr inbounds i8, i8* %171, i64 %625
DOALL:     	  %627 = load i8, i8* %626, align 1, !tbaa !36
DOALL:     	  %628 = zext i8 %627 to i32
DOALL:     	  %629 = add nuw nsw i32 %611, %628
DOALL:     	  %630 = fmul float %594, 3.000000e+00
DOALL:     	  %631 = fcmp olt float %630, 0.000000e+00
DOALL:     	  %632 = fpext float %630 to double
DOALL:     	  %.v13.v.i = select i1 %631, double -5.000000e-01, double 5.000000e-01, !prof !68
DOALL:     	  %.v13.i = fadd double %.v13.v.i, %632
DOALL:     	  %633 = fptosi double %.v13.i to i32
DOALL:     	  %634 = add nsw i32 %162, %633
DOALL:     	  %635 = mul nsw i32 %634, %107
DOALL:     	  %636 = add nsw i32 %635, %601
DOALL:     	  %637 = mul nsw i32 %595, 3
DOALL:     	  %638 = add nsw i32 %636, %637
DOALL:     	  %639 = sext i32 %638 to i64
DOALL:     	  %640 = getelementptr inbounds i8, i8* %116, i64 %639
DOALL:     	  %641 = load i8, i8* %640, align 1, !tbaa !36
DOALL:     	  %642 = zext i8 %641 to i64
DOALL:     	  %643 = sub nsw i64 0, %642
DOALL:     	  %644 = getelementptr inbounds i8, i8* %171, i64 %643
DOALL:     	  %645 = load i8, i8* %644, align 1, !tbaa !36
DOALL:     	  %646 = zext i8 %645 to i32
DOALL:     	  %647 = add nuw nsw i32 %629, %646
DOALL:     	  %649 = sitofp i32 %578 to float
DOALL:     	  %650 = icmp slt i32 %580, 0
DOALL:     	  %neg.i = sub nsw i32 0, %580
DOALL:     	  %651 = select i1 %650, i32 %neg.i, i32 %580, !prof !69
DOALL:     	  %652 = sitofp i32 %651 to float
DOALL:     	  %653 = fdiv float %649, %652
DOALL:     	  %654 = sdiv i32 %651, %580
DOALL:     	  %655 = add nsw i32 %654, %162
DOALL:     	  %656 = mul nsw i32 %655, %107
DOALL:     	  %657 = trunc i64 %indvars.iv43.i to i32
DOALL:     	  %658 = add nsw i32 %656, %657
DOALL:     	  %659 = fcmp olt float %653, 0.000000e+00
DOALL:     	  %660 = fpext float %653 to double
DOALL:     	  %.v.v.i = select i1 %659, double -5.000000e-01, double 5.000000e-01, !prof !70
DOALL:     	  %.v.i = fadd double %.v.v.i, %660
DOALL:     	  %661 = fptosi double %.v.i to i32
DOALL:     	  %662 = add nsw i32 %658, %661
DOALL:     	  %663 = sext i32 %662 to i64
DOALL:     	  %664 = getelementptr inbounds i8, i8* %116, i64 %663
DOALL:     	  %665 = load i8, i8* %664, align 1, !tbaa !36
DOALL:     	  %666 = zext i8 %665 to i64
DOALL:     	  %667 = sub nsw i64 0, %666
DOALL:     	  %668 = getelementptr inbounds i8, i8* %171, i64 %667
DOALL:     	  %669 = load i8, i8* %668, align 1, !tbaa !36
DOALL:     	  %670 = zext i8 %669 to i32
DOALL:     	  %671 = shl nsw i32 %654, 1
DOALL:     	  %672 = add nsw i32 %671, %162
DOALL:     	  %673 = mul nsw i32 %672, %107
DOALL:     	  %674 = add nsw i32 %673, %657
DOALL:     	  %675 = fmul float %653, 2.000000e+00
DOALL:     	  %676 = fcmp olt float %675, 0.000000e+00
DOALL:     	  %677 = fpext float %675 to double
DOALL:     	  %.v8.v.i = select i1 %676, double -5.000000e-01, double 5.000000e-01, !prof !70
DOALL:     	  %.v8.i = fadd double %.v8.v.i, %677
DOALL:     	  %678 = fptosi double %.v8.i to i32
DOALL:     	  %679 = add nsw i32 %674, %678
DOALL:     	  %680 = sext i32 %679 to i64
DOALL:     	  %681 = getelementptr inbounds i8, i8* %116, i64 %680
DOALL:     	  %682 = load i8, i8* %681, align 1, !tbaa !36
DOALL:     	  %683 = zext i8 %682 to i64
DOALL:     	  %684 = sub nsw i64 0, %683
DOALL:     	  %685 = getelementptr inbounds i8, i8* %171, i64 %684
DOALL:     	  %686 = load i8, i8* %685, align 1, !tbaa !36
DOALL:     	  %687 = zext i8 %686 to i32
DOALL:     	  %688 = add nuw nsw i32 %670, %687
DOALL:     	  %689 = mul nsw i32 %654, 3
DOALL:     	  %690 = add nsw i32 %689, %162
DOALL:     	  %691 = mul nsw i32 %690, %107
DOALL:     	  %692 = add nsw i32 %691, %657
DOALL:     	  %693 = fmul float %653, 3.000000e+00
DOALL:     	  %694 = fcmp olt float %693, 0.000000e+00
DOALL:     	  %695 = fpext float %693 to double
DOALL:     	  %.v9.v.i = select i1 %694, double -5.000000e-01, double 5.000000e-01, !prof !70
DOALL:     	  %.v9.i = fadd double %.v9.v.i, %695
DOALL:     	  %696 = fptosi double %.v9.i to i32
DOALL:     	  %697 = add nsw i32 %692, %696
DOALL:     	  %698 = sext i32 %697 to i64
DOALL:     	  %699 = getelementptr inbounds i8, i8* %116, i64 %698
DOALL:     	  %700 = load i8, i8* %699, align 1, !tbaa !36
DOALL:     	  %701 = zext i8 %700 to i64
DOALL:     	  %702 = sub nsw i64 0, %701
DOALL:     	  %703 = getelementptr inbounds i8, i8* %171, i64 %702
DOALL:     	  %704 = load i8, i8* %703, align 1, !tbaa !36
DOALL:     	  %705 = zext i8 %704 to i32
DOALL:     	  %706 = add nuw nsw i32 %688, %705
DOALL:     	  %.03.i = phi i32 [ %647, %589 ], [ %706, %648 ]
DOALL:     	  %708 = icmp sgt i32 %.03.i, 290
DOALL:     	  br i1 %708, label %709, label %.._crit_edge_crit_edge51.i, !prof !71
DOALL:     	  %710 = sub nsw i32 1850, %494
DOALL:     	  %711 = getelementptr inbounds i32, i32* %113, i64 %167
DOALL:     	  store i32 %710, i32* %711, align 4, !tbaa !38
DOALL:     	  %712 = mul nsw i32 %578, 51
DOALL:     	  %713 = sdiv i32 %712, %494
DOALL:     	  %714 = getelementptr inbounds i32, i32* %142, i64 %167
DOALL:     	  store i32 %713, i32* %714, align 4, !tbaa !38
DOALL:     	  %715 = mul nsw i32 %580, 51
DOALL:     	  %716 = sdiv i32 %715, %494
DOALL:     	  %717 = getelementptr inbounds i32, i32* %144, i64 %167
DOALL:     	  store i32 %716, i32* %717, align 4, !tbaa !38
DOALL:     	  %indvars.iv.next44.i = add nuw nsw i64 %indvars.iv43.i, 1
DOALL:     	  %indvars.iv.next46.i = add nuw nsw i64 %indvars.iv45.i, 1
DOALL:     	  %.15.i.lcssa = phi i32 [ %.15.i, %735 ]
DOALL:     	  %indvars.iv41.i = phi i64 [ %indvars.iv.next42.i, %.loopexit.i ], [ 5, %.preheader.i ]
DOALL:     	  %.04.i = phi i32 [ %.15.i.lcssa, %.loopexit.i ], [ 0, %.preheader.i ]
DOALL:     	  %720 = icmp slt i64 %indvars.iv41.i, %152
DOALL:     	  br i1 %720, label %721, label %susan_corners.exit, !prof !44
DOALL:     	  %722 = mul nsw i64 %indvars.iv41.i, %153
DOALL:     	  %723 = add nsw i64 %indvars.iv41.i, -3
DOALL:     	  %724 = mul nsw i64 %723, %153
DOALL:     	  %725 = add nsw i64 %indvars.iv41.i, -2
DOALL:     	  %726 = mul nsw i64 %725, %153
DOALL:     	  %727 = add nsw i64 %indvars.iv41.i, -1
DOALL:     	  %728 = mul nsw i64 %727, %153
DOALL:     	  %indvars.iv.next42.i = add nuw nsw i64 %indvars.iv41.i, 1
DOALL:     	  %729 = mul nsw i64 %indvars.iv.next42.i, %153
DOALL:     	  %730 = add nuw nsw i64 %indvars.iv41.i, 2
DOALL:     	  %731 = mul nsw i64 %730, %153
DOALL:     	  %732 = add nuw nsw i64 %indvars.iv41.i, 3
DOALL:     	  %733 = mul nsw i64 %732, %153
DOALL:     	  %734 = trunc i64 %indvars.iv41.i to i32
DOALL:     	  %indvars.iv.i1 = phi i64 [ %indvars.iv.next.i2, %._crit_edge69.i ], [ 5, %721 ]
DOALL:     	  %.15.i = phi i32 [ %.3.i, %._crit_edge69.i ], [ %.04.i, %721 ]
DOALL:     	  %736 = icmp slt i64 %indvars.iv.i1, %149
DOALL:     	  br i1 %736, label %737, label %.loopexit.i, !prof !45
DOALL:     	  %738 = add nsw i64 %722, %indvars.iv.i1
DOALL:     	  %739 = getelementptr inbounds i32, i32* %113, i64 %738
DOALL:     	  %740 = load i32, i32* %739, align 4, !tbaa !38
DOALL:     	  %741 = icmp sgt i32 %740, 0
DOALL:     	  br i1 %741, label %742, label %.._crit_edge69_crit_edge.i, !prof !72
DOALL:     	  %743 = add nsw i64 %724, %indvars.iv.i1
DOALL:     	  %744 = add nsw i64 %743, -3
DOALL:     	  %745 = getelementptr inbounds i32, i32* %113, i64 %744
DOALL:     	  %746 = load i32, i32* %745, align 4, !tbaa !38
DOALL:     	  %747 = icmp sgt i32 %740, %746
DOALL:     	  br i1 %747, label %748, label %.._crit_edge69_crit_edge52.i, !prof !73
DOALL:     	  %749 = add nsw i64 %743, -2
DOALL:     	  %750 = getelementptr inbounds i32, i32* %113, i64 %749
DOALL:     	  %751 = load i32, i32* %750, align 4, !tbaa !38
DOALL:     	  %752 = icmp sgt i32 %740, %751
DOALL:     	  br i1 %752, label %753, label %.._crit_edge69_crit_edge53.i, !prof !74
DOALL:     	  %754 = add nsw i64 %743, -1
DOALL:     	  %755 = getelementptr inbounds i32, i32* %113, i64 %754
DOALL:     	  %756 = load i32, i32* %755, align 4, !tbaa !38
DOALL:     	  %757 = icmp sgt i32 %740, %756
DOALL:     	  br i1 %757, label %758, label %.._crit_edge69_crit_edge54.i, !prof !75
DOALL:     	  %759 = getelementptr inbounds i32, i32* %113, i64 %743
DOALL:     	  %760 = load i32, i32* %759, align 4, !tbaa !38
DOALL:     	  %761 = icmp sgt i32 %740, %760
DOALL:     	  br i1 %761, label %762, label %.._crit_edge69_crit_edge55.i, !prof !76
DOALL:     	  %763 = add nsw i64 %743, 1
DOALL:     	  %764 = getelementptr inbounds i32, i32* %113, i64 %763
DOALL:     	  %765 = load i32, i32* %764, align 4, !tbaa !38
DOALL:     	  %766 = icmp sgt i32 %740, %765
DOALL:     	  br i1 %766, label %767, label %.._crit_edge69_crit_edge56.i, !prof !77
DOALL:     	  %768 = add nsw i64 %743, 2
DOALL:     	  %769 = getelementptr inbounds i32, i32* %113, i64 %768
DOALL:     	  %770 = load i32, i32* %769, align 4, !tbaa !38
DOALL:     	  %771 = icmp sgt i32 %740, %770
DOALL:     	  br i1 %771, label %772, label %.._crit_edge69_crit_edge57.i, !prof !78
DOALL:     	  %773 = add nsw i64 %743, 3
DOALL:     	  %774 = getelementptr inbounds i32, i32* %113, i64 %773
DOALL:     	  %775 = load i32, i32* %774, align 4, !tbaa !38
DOALL:     	  %776 = icmp sgt i32 %740, %775
DOALL:     	  br i1 %776, label %777, label %.._crit_edge69_crit_edge58.i, !prof !79
DOALL:     	  %778 = add nsw i64 %726, %indvars.iv.i1
DOALL:     	  %779 = add nsw i64 %778, -3
DOALL:     	  %780 = getelementptr inbounds i32, i32* %113, i64 %779
DOALL:     	  %781 = load i32, i32* %780, align 4, !tbaa !38
DOALL:     	  %782 = icmp sgt i32 %740, %781
DOALL:     	  br i1 %782, label %783, label %.._crit_edge69_crit_edge59.i, !prof !80
DOALL:     	  %784 = add nsw i64 %778, -2
DOALL:     	  %785 = getelementptr inbounds i32, i32* %113, i64 %784
DOALL:     	  %786 = load i32, i32* %785, align 4, !tbaa !38
DOALL:     	  %787 = icmp sgt i32 %740, %786
DOALL:     	  br i1 %787, label %788, label %.._crit_edge69_crit_edge60.i, !prof !81
DOALL:     	  %789 = add nsw i64 %778, -1
DOALL:     	  %790 = getelementptr inbounds i32, i32* %113, i64 %789
DOALL:     	  %791 = load i32, i32* %790, align 4, !tbaa !38
DOALL:     	  %792 = icmp sgt i32 %740, %791
DOALL:     	  br i1 %792, label %793, label %.._crit_edge69_crit_edge61.i, !prof !82
DOALL:     	  %794 = getelementptr inbounds i32, i32* %113, i64 %778
DOALL:     	  %795 = load i32, i32* %794, align 4, !tbaa !38
DOALL:     	  %796 = icmp sgt i32 %740, %795
DOALL:     	  br i1 %796, label %797, label %.._crit_edge69_crit_edge62.i, !prof !83
DOALL:     	  %798 = add nsw i64 %778, 1
DOALL:     	  %799 = getelementptr inbounds i32, i32* %113, i64 %798
DOALL:     	  %800 = load i32, i32* %799, align 4, !tbaa !38
DOALL:     	  %801 = icmp sgt i32 %740, %800
DOALL:     	  br i1 %801, label %802, label %.._crit_edge69_crit_edge63.i, !prof !84
DOALL:     	  %803 = add nsw i64 %778, 2
DOALL:     	  %804 = getelementptr inbounds i32, i32* %113, i64 %803
DOALL:     	  %805 = load i32, i32* %804, align 4, !tbaa !38
DOALL:     	  %806 = icmp sgt i32 %740, %805
DOALL:     	  br i1 %806, label %807, label %.._crit_edge69_crit_edge64.i, !prof !85
DOALL:     	  %808 = add nsw i64 %778, 3
DOALL:     	  %809 = getelementptr inbounds i32, i32* %113, i64 %808
DOALL:     	  %810 = load i32, i32* %809, align 4, !tbaa !38
DOALL:     	  %811 = icmp sgt i32 %740, %810
DOALL:     	  br i1 %811, label %812, label %.._crit_edge69_crit_edge65.i, !prof !86
DOALL:     	  %813 = add nsw i64 %728, %indvars.iv.i1
DOALL:     	  %814 = add nsw i64 %813, -3
DOALL:     	  %815 = getelementptr inbounds i32, i32* %113, i64 %814
DOALL:     	  %816 = load i32, i32* %815, align 4, !tbaa !38
DOALL:     	  %817 = icmp sgt i32 %740, %816
DOALL:     	  br i1 %817, label %818, label %.._crit_edge69_crit_edge66.i, !prof !87
DOALL:     	  %819 = add nsw i64 %813, -2
DOALL:     	  %820 = getelementptr inbounds i32, i32* %113, i64 %819
DOALL:     	  %821 = load i32, i32* %820, align 4, !tbaa !38
DOALL:     	  %822 = icmp sgt i32 %740, %821
DOALL:     	  br i1 %822, label %823, label %.._crit_edge69_crit_edge67.i, !prof !88
DOALL:     	  %824 = add nsw i64 %813, -1
DOALL:     	  %825 = getelementptr inbounds i32, i32* %113, i64 %824
DOALL:     	  %826 = load i32, i32* %825, align 4, !tbaa !38
DOALL:     	  %827 = icmp sgt i32 %740, %826
DOALL:     	  br i1 %827, label %828, label %.._crit_edge69_crit_edge68.i, !prof !89
DOALL:     	  %829 = getelementptr inbounds i32, i32* %113, i64 %813
DOALL:     	  %830 = load i32, i32* %829, align 4, !tbaa !38
DOALL:     	  %831 = icmp sgt i32 %740, %830
DOALL:     	  br i1 %831, label %832, label %.._crit_edge69_crit_edge69.i, !prof !90
DOALL:     	  %833 = add nsw i64 %813, 1
DOALL:     	  %834 = getelementptr inbounds i32, i32* %113, i64 %833
DOALL:     	  %835 = load i32, i32* %834, align 4, !tbaa !38
DOALL:     	  %836 = icmp sgt i32 %740, %835
DOALL:     	  br i1 %836, label %837, label %.._crit_edge69_crit_edge70.i, !prof !91
DOALL:     	  %838 = add nsw i64 %813, 2
DOALL:     	  %839 = getelementptr inbounds i32, i32* %113, i64 %838
DOALL:     	  %840 = load i32, i32* %839, align 4, !tbaa !38
DOALL:     	  %841 = icmp sgt i32 %740, %840
DOALL:     	  br i1 %841, label %842, label %.._crit_edge69_crit_edge71.i, !prof !92
DOALL:     	  %843 = add nsw i64 %813, 3
DOALL:     	  %844 = getelementptr inbounds i32, i32* %113, i64 %843
DOALL:     	  %845 = load i32, i32* %844, align 4, !tbaa !38
DOALL:     	  %846 = icmp sgt i32 %740, %845
DOALL:     	  br i1 %846, label %847, label %.._crit_edge69_crit_edge72.i, !prof !93
DOALL:     	  %848 = add nsw i64 %738, -3
DOALL:     	  %849 = getelementptr inbounds i32, i32* %113, i64 %848
DOALL:     	  %850 = load i32, i32* %849, align 4, !tbaa !38
DOALL:     	  %851 = icmp sgt i32 %740, %850
DOALL:     	  br i1 %851, label %852, label %.._crit_edge69_crit_edge73.i, !prof !94
DOALL:     	  %853 = add nsw i64 %738, -2
DOALL:     	  %854 = getelementptr inbounds i32, i32* %113, i64 %853
DOALL:     	  %855 = load i32, i32* %854, align 4, !tbaa !38
DOALL:     	  %856 = icmp sgt i32 %740, %855
DOALL:     	  br i1 %856, label %857, label %.._crit_edge69_crit_edge74.i, !prof !95
DOALL:     	  %858 = add nsw i64 %738, -1
DOALL:     External nodes: 85
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %735
DOALL:     	  br label %.split64.us.us
DOALL:     	  br label %.split.us.i
DOALL:     	  br label %.split.us.i
DOALL:     	  br label %155
DOALL:     	  br label %719
DOALL:     	  br label %163
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %707
DOALL:     	  br label %707
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %163
DOALL:     	  br label %155
DOALL:     	  br label %719
DOALL:     	  br label %735
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     	  br label %._crit_edge69.i
DOALL:     Edges: 3669
DOALL:     Loop-carried data dependences
DOALL:         %253 = load i8, i8* %244, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %253 = load i8, i8* %244, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %249 = load i8, i8* %248, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %249 = load i8, i8* %248, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %201 = load i8, i8* %200, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %201 = load i8, i8* %200, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %221 = load i8, i8* %212, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %221 = load i8, i8* %212, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %257 = load i8, i8* %256, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %257 = load i8, i8* %256, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %205 = load i8, i8* %196, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %205 = load i8, i8* %196, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %281 = load i8, i8* %280, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %281 = load i8, i8* %280, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %265 = load i8, i8* %264, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %265 = load i8, i8* %264, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %261 = load i8, i8* %252, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %261 = load i8, i8* %252, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %209 = load i8, i8* %208, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %209 = load i8, i8* %208, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %273 = load i8, i8* %272, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %273 = load i8, i8* %272, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %269 = load i8, i8* %260, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %269 = load i8, i8* %260, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %342 = load i8, i8* %341, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %342 = load i8, i8* %341, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %284 = load i8, i8* %276, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %284 = load i8, i8* %276, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %185 = load i8, i8* %184, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %185 = load i8, i8* %184, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %305 = load i8, i8* %304, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %305 = load i8, i8* %304, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %288 = load i8, i8* %287, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %288 = load i8, i8* %287, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %349 = load i8, i8* %347, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %349 = load i8, i8* %347, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %312 = load i8, i8* %311, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %312 = load i8, i8* %311, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %308 = load i8, i8* %300, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %308 = load i8, i8* %300, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %277 = load i8, i8* %268, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %277 = load i8, i8* %268, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %458 = load i8, i8* %448, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %458 = load i8, i8* %448, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %462 = load i8, i8* %461, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %462 = load i8, i8* %461, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %469 = load i8, i8* %467, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %469 = load i8, i8* %467, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %473 = load i8, i8* %472, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %473 = load i8, i8* %472, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %478 = load i8, i8* %468, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %478 = load i8, i8* %468, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %482 = load i8, i8* %481, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %482 = load i8, i8* %481, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %488 = load i8, i8* %487, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %488 = load i8, i8* %487, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %492 = load i8, i8* %491, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %492 = load i8, i8* %491, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %363 = load i8, i8* %362, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %363 = load i8, i8* %362, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %369 = load i8, i8* %358, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %369 = load i8, i8* %358, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %373 = load i8, i8* %372, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %373 = load i8, i8* %372, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %379 = load i8, i8* %368, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %379 = load i8, i8* %368, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %383 = load i8, i8* %382, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %383 = load i8, i8* %382, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %389 = load i8, i8* %378, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %389 = load i8, i8* %378, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %393 = load i8, i8* %392, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %393 = load i8, i8* %392, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %338 = load i8, i8* %328, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %338 = load i8, i8* %328, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %333 = load i8, i8* %332, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %333 = load i8, i8* %332, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %323 = load i8, i8* %322, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %323 = load i8, i8* %322, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %786 = load i32, i32* %785, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %786 = load i32, i32* %785, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %791 = load i32, i32* %790, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %791 = load i32, i32* %790, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %795 = load i32, i32* %794, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %795 = load i32, i32* %794, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %800 = load i32, i32* %799, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %800 = load i32, i32* %799, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %805 = load i32, i32* %804, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %805 = load i32, i32* %804, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %810 = load i32, i32* %809, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %810 = load i32, i32* %809, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %816 = load i32, i32* %815, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %816 = load i32, i32* %815, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %821 = load i32, i32* %820, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %821 = load i32, i32* %820, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %826 = load i32, i32* %825, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %826 = load i32, i32* %825, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %830 = load i32, i32* %829, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %830 = load i32, i32* %829, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %835 = load i32, i32* %834, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %835 = load i32, i32* %834, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %840 = load i32, i32* %839, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %840 = load i32, i32* %839, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %740 = load i32, i32* %739, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %740 = load i32, i32* %739, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %746 = load i32, i32* %745, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %746 = load i32, i32* %745, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %751 = load i32, i32* %750, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %751 = load i32, i32* %750, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %756 = load i32, i32* %755, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %756 = load i32, i32* %755, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %760 = load i32, i32* %759, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %760 = load i32, i32* %759, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %765 = load i32, i32* %764, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %765 = load i32, i32* %764, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %770 = load i32, i32* %769, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %770 = load i32, i32* %769, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %775 = load i32, i32* %774, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %775 = load i32, i32* %774, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %781 = load i32, i32* %780, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %781 = load i32, i32* %780, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %845 = load i32, i32* %844, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %845 = load i32, i32* %844, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %850 = load i32, i32* %849, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %850 = load i32, i32* %849, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %855 = load i32, i32* %854, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %855 = load i32, i32* %854, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %177 = load i8, i8* %176, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %177 = load i8, i8* %176, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %181 = load i8, i8* %172, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %181 = load i8, i8* %172, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %173 = load i8, i8* %166, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %173 = load i8, i8* %166, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %169 = load i8, i8* %168, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %169 = load i8, i8* %168, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %359 = load i8, i8* %348, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %359 = load i8, i8* %348, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %353 = load i8, i8* %352, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %353 = load i8, i8* %352, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %329 = load i8, i8* %318, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %329 = load i8, i8* %318, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %217 = load i8, i8* %216, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %217 = load i8, i8* %216, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %301 = load i8, i8* %292, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %301 = load i8, i8* %292, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %319 = load i8, i8* %317, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %319 = load i8, i8* %317, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %213 = load i8, i8* %204, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %213 = load i8, i8* %204, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %297 = load i8, i8* %296, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %297 = load i8, i8* %296, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %197 = load i8, i8* %195, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %197 = load i8, i8* %195, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %192 = load i8, i8* %191, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %192 = load i8, i8* %191, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %245 = load i8, i8* %236, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %245 = load i8, i8* %236, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %293 = load i8, i8* %291, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %293 = load i8, i8* %291, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %188 = load i8, i8* %180, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %188 = load i8, i8* %180, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %232 = load i8, i8* %231, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %232 = load i8, i8* %231, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %237 = load i8, i8* %235, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %237 = load i8, i8* %235, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %241 = load i8, i8* %240, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %241 = load i8, i8* %240, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %225 = load i8, i8* %224, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %225 = load i8, i8* %224, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %228 = load i8, i8* %220, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %228 = load i8, i8* %220, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %399 = load i8, i8* %388, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %399 = load i8, i8* %388, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %403 = load i8, i8* %402, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %403 = load i8, i8* %402, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %408 = load i8, i8* %398, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %408 = load i8, i8* %398, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %412 = load i8, i8* %411, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %412 = load i8, i8* %411, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %419 = load i8, i8* %417, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %419 = load i8, i8* %417, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %423 = load i8, i8* %422, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %423 = load i8, i8* %422, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %606 = load i8, i8* %605, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %606 = load i8, i8* %605, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %610 = load i8, i8* %609, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %610 = load i8, i8* %609, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %623 = load i8, i8* %622, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %623 = load i8, i8* %622, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %627 = load i8, i8* %626, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %627 = load i8, i8* %626, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %641 = load i8, i8* %640, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %641 = load i8, i8* %640, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %645 = load i8, i8* %644, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %645 = load i8, i8* %644, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %665 = load i8, i8* %664, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %665 = load i8, i8* %664, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %669 = load i8, i8* %668, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %669 = load i8, i8* %668, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %429 = load i8, i8* %418, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %429 = load i8, i8* %418, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %433 = load i8, i8* %432, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %433 = load i8, i8* %432, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %439 = load i8, i8* %428, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %439 = load i8, i8* %428, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %443 = load i8, i8* %442, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %443 = load i8, i8* %442, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %449 = load i8, i8* %438, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %449 = load i8, i8* %438, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %453 = load i8, i8* %452, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %453 = load i8, i8* %452, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %682 = load i8, i8* %681, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %682 = load i8, i8* %681, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %686 = load i8, i8* %685, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %686 = load i8, i8* %685, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %700 = load i8, i8* %699, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %700 = load i8, i8* %699, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %704 = load i8, i8* %703, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %704 = load i8, i8* %703, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %855 = load i32, i32* %854, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %850 = load i32, i32* %849, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %826 = load i32, i32* %825, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %821 = load i32, i32* %820, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %816 = load i32, i32* %815, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %810 = load i32, i32* %809, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %805 = load i32, i32* %804, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %800 = load i32, i32* %799, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %795 = load i32, i32* %794, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %791 = load i32, i32* %790, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %786 = load i32, i32* %785, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %930 = load i32, i32* %929, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %905 = load i32, i32* %904, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %900 = load i32, i32* %899, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %926 = load i32, i32* %925, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %845 = load i32, i32* %844, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %891 = load i32, i32* %890, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %895 = load i32, i32* %894, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %865 = load i32, i32* %864, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %980 = load i32, i32* %979, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %746 = load i32, i32* %745, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %935 = load i32, i32* %934, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %945 = load i32, i32* %944, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %975 = load i32, i32* %974, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %740 = load i32, i32* %739, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %910 = load i32, i32* %909, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %830 = load i32, i32* %829, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %875 = load i32, i32* %874, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %860 = load i32, i32* %859, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %835 = load i32, i32* %834, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %881 = load i32, i32* %880, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %916 = load i32, i32* %915, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %870 = load i32, i32* %869, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %921 = load i32, i32* %920, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %840 = load i32, i32* %839, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %886 = load i32, i32* %885, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %940 = load i32, i32* %939, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %951 = load i32, i32* %950, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %956 = load i32, i32* %955, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %961 = load i32, i32* %960, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %965 = load i32, i32* %964, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %970 = load i32, i32* %969, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %751 = load i32, i32* %750, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %756 = load i32, i32* %755, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %760 = load i32, i32* %759, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %765 = load i32, i32* %764, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %770 = load i32, i32* %769, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %775 = load i32, i32* %774, align 4, !tbaa !38 via memory
DOALL:         store i32 %710, i32* %711, align 4, !tbaa !38 --->   %781 = load i32, i32* %780, align 4, !tbaa !38 via memory
DOALL:         %860 = load i32, i32* %859, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %860 = load i32, i32* %859, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %865 = load i32, i32* %864, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %865 = load i32, i32* %864, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %870 = load i32, i32* %869, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %870 = load i32, i32* %869, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %875 = load i32, i32* %874, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %875 = load i32, i32* %874, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %881 = load i32, i32* %880, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %881 = load i32, i32* %880, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %886 = load i32, i32* %885, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %886 = load i32, i32* %885, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %891 = load i32, i32* %890, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %891 = load i32, i32* %890, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %895 = load i32, i32* %894, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %895 = load i32, i32* %894, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %900 = load i32, i32* %899, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %900 = load i32, i32* %899, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %905 = load i32, i32* %904, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %905 = load i32, i32* %904, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %910 = load i32, i32* %909, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %910 = load i32, i32* %909, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %916 = load i32, i32* %915, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %916 = load i32, i32* %915, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %921 = load i32, i32* %920, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %921 = load i32, i32* %920, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %926 = load i32, i32* %925, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %926 = load i32, i32* %925, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %930 = load i32, i32* %929, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %930 = load i32, i32* %929, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %935 = load i32, i32* %934, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %935 = load i32, i32* %934, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %940 = load i32, i32* %939, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %940 = load i32, i32* %939, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %945 = load i32, i32* %944, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %945 = load i32, i32* %944, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %951 = load i32, i32* %950, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %951 = load i32, i32* %950, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %956 = load i32, i32* %955, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %956 = load i32, i32* %955, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %961 = load i32, i32* %960, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %961 = load i32, i32* %960, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %965 = load i32, i32* %964, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %965 = load i32, i32* %964, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %970 = load i32, i32* %969, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %970 = load i32, i32* %969, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %975 = load i32, i32* %974, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %975 = load i32, i32* %974, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %980 = load i32, i32* %979, align 4, !tbaa !38 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %980 = load i32, i32* %979, align 4, !tbaa !38 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         store i32 0, i32* %984, align 4, !tbaa !121 --->   store i32 0, i32* %984, align 4, !tbaa !121 via memory
DOALL:         store i32 0, i32* %984, align 4, !tbaa !121 --->   store i32 7, i32* %1005, align 4, !tbaa !121 via memory
DOALL:         store i32 %986, i32* %985, align 4, !tbaa !123 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         store i32 %986, i32* %985, align 4, !tbaa !123 --->   store i32 %986, i32* %985, align 4, !tbaa !123 via memory
DOALL:         store i32 %734, i32* %987, align 4, !tbaa !124 --->   store i32 %734, i32* %987, align 4, !tbaa !124 via memory
DOALL:         store i32 %989, i32* %990, align 4, !tbaa !125 --->   store i32 %989, i32* %990, align 4, !tbaa !125 via memory
DOALL:         store i32 %992, i32* %993, align 4, !tbaa !126 --->   store i32 %992, i32* %993, align 4, !tbaa !126 via memory
DOALL:         %995 = load i8, i8* %994, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %995 = load i8, i8* %994, align 1, !tbaa !36 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         store i32 %996, i32* %997, align 4, !tbaa !127 --->   store i32 %996, i32* %997, align 4, !tbaa !127 via memory
DOALL:         store i32 7, i32* %1005, align 4, !tbaa !121 --->   store i32 0, i32* %984, align 4, !tbaa !121 via memory
DOALL:         store i32 7, i32* %1005, align 4, !tbaa !121 --->   store i32 7, i32* %1005, align 4, !tbaa !121 via memory
DOALL:         call void @free(i8* %141) #12 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         call void @free(i8* %141) #12 --->   %141 = call noalias i8* @malloc(i64 %140) #12 via memory
DOALL:         call void @free(i8* %141) #12 --->   %141 = call noalias i8* @malloc(i64 %140) #12 via memory
DOALL:         call void @free(i8* %143) #12 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         call void @free(i8* %143) #12 --->   %143 = call noalias i8* @malloc(i64 %140) #12 via memory
DOALL:         call void @free(i8* %143) #12 --->   %143 = call noalias i8* @malloc(i64 %140) #12 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %700 = load i8, i8* %699, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %682 = load i8, i8* %681, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %665 = load i8, i8* %664, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %641 = load i8, i8* %640, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %623 = load i8, i8* %622, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %606 = load i8, i8* %605, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %488 = load i8, i8* %487, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %478 = load i8, i8* %468, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %439 = load i8, i8* %428, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %429 = load i8, i8* %418, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %419 = load i8, i8* %417, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %408 = load i8, i8* %398, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %399 = load i8, i8* %388, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %389 = load i8, i8* %378, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %379 = load i8, i8* %368, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %369 = load i8, i8* %358, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %359 = load i8, i8* %348, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %349 = load i8, i8* %347, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %338 = load i8, i8* %328, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %329 = load i8, i8* %318, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %269 = load i8, i8* %260, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %319 = load i8, i8* %317, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   call void @free(i8* %143) #12 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %277 = load i8, i8* %268, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %293 = load i8, i8* %291, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   call void @free(i8* %143) #12 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %284 = load i8, i8* %276, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %301 = load i8, i8* %292, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %261 = load i8, i8* %252, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   call void @free(i8* %141) #12 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %449 = load i8, i8* %438, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   store i32 %992, i32* %993, align 4, !tbaa !126 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   store i32 0, i32* %984, align 4, !tbaa !121 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %469 = load i8, i8* %467, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   store i32 %996, i32* %997, align 4, !tbaa !127 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   call void @free(i8* %141) #12 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %119 = call noalias i8* @malloc(i64 516) #12 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   store i32 %989, i32* %990, align 4, !tbaa !125 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   store i32 %986, i32* %985, align 4, !tbaa !123 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %141 = call noalias i8* @malloc(i64 %140) #12 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %213 = load i8, i8* %204, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %245 = load i8, i8* %236, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %308 = load i8, i8* %300, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   store i32 7, i32* %1005, align 4, !tbaa !121 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %458 = load i8, i8* %448, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %995 = load i8, i8* %994, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %205 = load i8, i8* %196, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %221 = load i8, i8* %212, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %237 = load i8, i8* %235, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %253 = load i8, i8* %244, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %143 = call noalias i8* @malloc(i64 %140) #12 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %197 = load i8, i8* %195, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %228 = load i8, i8* %220, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %143 = call noalias i8* @malloc(i64 %140) #12 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %119 = call noalias i8* @malloc(i64 516) #12 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   store i32 %734, i32* %987, align 4, !tbaa !124 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %188 = load i8, i8* %180, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %169 = load i8, i8* %168, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %141 = call noalias i8* @malloc(i64 %140) #12 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %181 = load i8, i8* %172, align 1, !tbaa !36 via memory
DOALL:         %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) --->   %173 = load i8, i8* %166, align 1, !tbaa !36 via memory
DOALL:         %1007 = add nuw nsw i32 %.0.us.us, 1 --->   %.0.us.us = phi i32 [ %1007, %susan_corners.exit ], [ 0, %.split64.us.preheader.split.us ] via variable
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %850 = load i32, i32* %849, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %845 = load i32, i32* %844, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %840 = load i32, i32* %839, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %775 = load i32, i32* %774, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %770 = load i32, i32* %769, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %746 = load i32, i32* %745, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %865 = load i32, i32* %864, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %740 = load i32, i32* %739, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %665 = load i8, i8* %664, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %645 = load i8, i8* %644, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %641 = load i8, i8* %640, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %627 = load i8, i8* %626, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %623 = load i8, i8* %622, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %606 = load i8, i8* %605, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %875 = load i32, i32* %874, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %488 = load i8, i8* %487, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %870 = load i32, i32* %869, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %482 = load i8, i8* %481, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %458 = load i8, i8* %448, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %453 = load i8, i8* %452, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %449 = load i8, i8* %438, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %443 = load i8, i8* %442, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %439 = load i8, i8* %428, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %423 = load i8, i8* %422, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %855 = load i32, i32* %854, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %419 = load i8, i8* %417, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %469 = load i8, i8* %467, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %359 = load i8, i8* %348, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %462 = load i8, i8* %461, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %353 = load i8, i8* %352, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %349 = load i8, i8* %347, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %342 = load i8, i8* %341, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %338 = load i8, i8* %328, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %333 = load i8, i8* %332, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %329 = load i8, i8* %318, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %433 = load i8, i8* %432, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %323 = load i8, i8* %322, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %429 = load i8, i8* %418, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %319 = load i8, i8* %317, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %312 = load i8, i8* %311, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %177 = load i8, i8* %176, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %253 = load i8, i8* %244, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %201 = load i8, i8* %200, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   store i32 %713, i32* %714, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %277 = load i8, i8* %268, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %192 = load i8, i8* %191, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %269 = load i8, i8* %260, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %188 = load i8, i8* %180, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %995 = load i8, i8* %994, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %185 = load i8, i8* %184, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %992 = load i32, i32* %991, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %181 = load i8, i8* %172, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %989 = load i32, i32* %988, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %980 = load i32, i32* %979, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %970 = load i32, i32* %969, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %682 = load i8, i8* %681, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %209 = load i8, i8* %208, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %965 = load i32, i32* %964, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %669 = load i8, i8* %668, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %205 = load i8, i8* %196, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %281 = load i8, i8* %280, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %961 = load i32, i32* %960, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %756 = load i32, i32* %755, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %900 = load i32, i32* %899, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %751 = load i32, i32* %750, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %895 = load i32, i32* %894, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   store i32 %716, i32* %717, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %791 = load i32, i32* %790, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %760 = load i32, i32* %759, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %905 = load i32, i32* %904, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %860 = load i32, i32* %859, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %881 = load i32, i32* %880, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %891 = load i32, i32* %890, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %478 = load i8, i8* %468, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %369 = load i8, i8* %358, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %795 = load i32, i32* %794, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %241 = load i8, i8* %240, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %886 = load i32, i32* %885, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %765 = load i32, i32* %764, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %910 = load i32, i32* %909, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %228 = load i8, i8* %220, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %393 = load i8, i8* %392, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %821 = load i32, i32* %820, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %956 = load i32, i32* %955, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %403 = load i8, i8* %402, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %926 = load i32, i32* %925, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %930 = load i32, i32* %929, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %940 = load i32, i32* %939, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %916 = load i32, i32* %915, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %951 = load i32, i32* %950, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %935 = load i32, i32* %934, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %492 = load i8, i8* %491, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %173 = load i8, i8* %166, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %249 = load i8, i8* %248, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %245 = load i8, i8* %236, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %945 = load i32, i32* %944, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %197 = load i8, i8* %195, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %686 = load i8, i8* %685, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %213 = load i8, i8* %204, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %700 = load i8, i8* %699, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %975 = load i32, i32* %974, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %217 = load i8, i8* %216, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %373 = load i8, i8* %372, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %800 = load i32, i32* %799, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %293 = load i8, i8* %291, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %704 = load i8, i8* %703, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %221 = load i8, i8* %212, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   store i32 %713, i32* %714, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %273 = load i8, i8* %272, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %232 = load i8, i8* %231, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %399 = load i8, i8* %388, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %921 = load i32, i32* %920, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %826 = load i32, i32* %825, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %610 = load i8, i8* %609, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %308 = load i8, i8* %300, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %781 = load i32, i32* %780, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   store i32 %716, i32* %717, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %786 = load i32, i32* %785, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %379 = load i8, i8* %368, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %169 = load i8, i8* %168, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %297 = load i8, i8* %296, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %805 = load i32, i32* %804, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %383 = load i8, i8* %382, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %301 = load i8, i8* %292, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %810 = load i32, i32* %809, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %830 = load i32, i32* %829, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %408 = load i8, i8* %398, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %835 = load i32, i32* %834, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %412 = load i8, i8* %411, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %237 = load i8, i8* %235, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %257 = load i8, i8* %256, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %261 = load i8, i8* %252, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %225 = load i8, i8* %224, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %265 = load i8, i8* %264, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %473 = load i8, i8* %472, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %363 = load i8, i8* %362, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %284 = load i8, i8* %276, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %288 = load i8, i8* %287, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %389 = load i8, i8* %378, align 1, !tbaa !36 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %816 = load i32, i32* %815, align 4, !tbaa !38 via memory
DOALL:         %119 = call noalias i8* @malloc(i64 516) #12 --->   %305 = load i8, i8* %304, align 1, !tbaa !36 via memory
DOALL:         store i8* %120, i8** %4, align 8, !tbaa !31 --->   store i8* %120, i8** %4, align 8, !tbaa !31 via memory
DOALL:         %135 = load i8*, i8** %4, align 8, !tbaa !31 --->   store i8* %120, i8** %4, align 8, !tbaa !31 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %704 = load i8, i8* %703, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %669 = load i8, i8* %668, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %645 = load i8, i8* %644, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %627 = load i8, i8* %626, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %610 = load i8, i8* %609, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %482 = load i8, i8* %481, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %241 = load i8, i8* %240, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %323 = load i8, i8* %322, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %423 = load i8, i8* %422, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %412 = load i8, i8* %411, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %265 = load i8, i8* %264, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %453 = load i8, i8* %452, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %257 = load i8, i8* %256, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %177 = load i8, i8* %176, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %297 = load i8, i8* %296, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %393 = load i8, i8* %392, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %249 = load i8, i8* %248, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %209 = load i8, i8* %208, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %225 = load i8, i8* %224, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %305 = load i8, i8* %304, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %217 = load i8, i8* %216, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %443 = load i8, i8* %442, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %492 = load i8, i8* %491, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %288 = load i8, i8* %287, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %185 = load i8, i8* %184, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %353 = load i8, i8* %352, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %403 = load i8, i8* %402, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %232 = load i8, i8* %231, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %281 = load i8, i8* %280, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %192 = load i8, i8* %191, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %363 = load i8, i8* %362, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %462 = load i8, i8* %461, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %201 = load i8, i8* %200, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %312 = load i8, i8* %311, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %686 = load i8, i8* %685, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %333 = load i8, i8* %332, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %383 = load i8, i8* %382, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %433 = load i8, i8* %432, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %342 = load i8, i8* %341, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %373 = load i8, i8* %372, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %273 = load i8, i8* %272, align 1, !tbaa !36 via memory
DOALL:         store i8 %134, i8* %136, align 1, !tbaa !36 --->   %473 = load i8, i8* %472, align 1, !tbaa !36 via memory
DOALL:         %137 = load i8*, i8** %4, align 8, !tbaa !31 --->   store i8* %120, i8** %4, align 8, !tbaa !31 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %845 = load i32, i32* %844, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %835 = load i32, i32* %834, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %830 = load i32, i32* %829, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %826 = load i32, i32* %825, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %816 = load i32, i32* %815, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %810 = load i32, i32* %809, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %800 = load i32, i32* %799, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %791 = load i32, i32* %790, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %704 = load i8, i8* %703, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %700 = load i8, i8* %699, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %686 = load i8, i8* %685, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %682 = load i8, i8* %681, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %669 = load i8, i8* %668, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %665 = load i8, i8* %664, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %641 = load i8, i8* %640, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %627 = load i8, i8* %626, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %623 = load i8, i8* %622, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %606 = load i8, i8* %605, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %492 = load i8, i8* %491, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %488 = load i8, i8* %487, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %462 = load i8, i8* %461, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %449 = load i8, i8* %438, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %423 = load i8, i8* %422, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %419 = load i8, i8* %417, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %408 = load i8, i8* %398, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %403 = load i8, i8* %402, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %399 = load i8, i8* %388, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %393 = load i8, i8* %392, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %821 = load i32, i32* %820, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %389 = load i8, i8* %378, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %383 = load i8, i8* %382, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %379 = load i8, i8* %368, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %805 = load i32, i32* %804, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %373 = load i8, i8* %372, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %363 = load i8, i8* %362, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %359 = load i8, i8* %348, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %353 = load i8, i8* %352, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %349 = load i8, i8* %347, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %342 = load i8, i8* %341, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %338 = load i8, i8* %328, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %333 = load i8, i8* %332, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %301 = load i8, i8* %292, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %169 = load i8, i8* %168, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %249 = load i8, i8* %248, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %119 = call noalias i8* @malloc(i64 516) #12 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %221 = load i8, i8* %212, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %610 = load i8, i8* %609, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %143 = call noalias i8* @malloc(i64 %140) #12 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %751 = load i32, i32* %750, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %795 = load i32, i32* %794, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %980 = load i32, i32* %979, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %143 = call noalias i8* @malloc(i64 %140) #12 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %921 = load i32, i32* %920, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %439 = load i8, i8* %428, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %746 = load i32, i32* %745, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %284 = load i8, i8* %276, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %956 = load i32, i32* %955, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %329 = load i8, i8* %318, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %951 = load i32, i32* %950, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %781 = load i32, i32* %780, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %119 = call noalias i8* @malloc(i64 516) #12 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %323 = load i8, i8* %322, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %945 = load i32, i32* %944, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %886 = load i32, i32* %885, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %881 = load i32, i32* %880, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %930 = load i32, i32* %929, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %756 = load i32, i32* %755, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %473 = load i8, i8* %472, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %891 = load i32, i32* %890, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %312 = load i8, i8* %311, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %935 = load i32, i32* %934, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %458 = load i8, i8* %448, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %875 = load i32, i32* %874, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %870 = load i32, i32* %869, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %297 = load i8, i8* %296, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %860 = load i32, i32* %859, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %482 = load i8, i8* %481, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %197 = load i8, i8* %195, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %288 = load i8, i8* %287, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %141 = call noalias i8* @malloc(i64 %140) #12 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %905 = load i32, i32* %904, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %995 = load i8, i8* %994, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %961 = load i32, i32* %960, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %265 = load i8, i8* %264, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %865 = load i32, i32* %864, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %469 = load i8, i8* %467, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %293 = load i8, i8* %291, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %645 = load i8, i8* %644, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %940 = load i32, i32* %939, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %965 = load i32, i32* %964, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %269 = load i8, i8* %260, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %478 = load i8, i8* %468, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %895 = load i32, i32* %894, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %900 = load i32, i32* %899, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %141 = call noalias i8* @malloc(i64 %140) #12 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %910 = load i32, i32* %909, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %192 = load i8, i8* %191, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %916 = load i32, i32* %915, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %433 = load i8, i8* %432, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %740 = load i32, i32* %739, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %429 = load i8, i8* %418, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %241 = load i8, i8* %240, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %855 = load i32, i32* %854, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %308 = load i8, i8* %300, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %173 = load i8, i8* %166, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %760 = load i32, i32* %759, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %369 = load i8, i8* %358, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %765 = load i32, i32* %764, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %181 = load i8, i8* %172, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %185 = load i8, i8* %184, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %319 = load i8, i8* %317, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %228 = load i8, i8* %220, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %770 = load i32, i32* %769, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %775 = load i32, i32* %774, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %975 = load i32, i32* %974, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %277 = load i8, i8* %268, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %786 = load i32, i32* %785, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %201 = load i8, i8* %200, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %205 = load i8, i8* %196, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %840 = load i32, i32* %839, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %209 = load i8, i8* %208, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %261 = load i8, i8* %252, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %412 = load i8, i8* %411, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %213 = load i8, i8* %204, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %850 = load i32, i32* %849, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %305 = load i8, i8* %304, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %926 = load i32, i32* %925, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %217 = load i8, i8* %216, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %177 = load i8, i8* %176, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %225 = load i8, i8* %224, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %237 = load i8, i8* %235, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %245 = load i8, i8* %236, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %232 = load i8, i8* %231, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %253 = load i8, i8* %244, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %188 = load i8, i8* %180, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %257 = load i8, i8* %256, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %443 = load i8, i8* %442, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %970 = load i32, i32* %969, align 4, !tbaa !38 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %273 = load i8, i8* %272, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %453 = load i8, i8* %452, align 1, !tbaa !36 via memory
DOALL:         call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 --->   %281 = load i8, i8* %280, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %830 = load i32, i32* %829, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %826 = load i32, i32* %825, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %786 = load i32, i32* %785, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %760 = load i32, i32* %759, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %756 = load i32, i32* %755, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %751 = load i32, i32* %750, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %746 = load i32, i32* %745, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   store i32 %716, i32* %717, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   store i32 %713, i32* %714, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   store i32 %713, i32* %714, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %704 = load i8, i8* %703, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %700 = load i8, i8* %699, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %686 = load i8, i8* %685, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %682 = load i8, i8* %681, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %669 = load i8, i8* %668, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %665 = load i8, i8* %664, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %645 = load i8, i8* %644, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %641 = load i8, i8* %640, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %627 = load i8, i8* %626, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %623 = load i8, i8* %622, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %610 = load i8, i8* %609, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %606 = load i8, i8* %605, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %488 = load i8, i8* %487, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %855 = load i32, i32* %854, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %478 = load i8, i8* %468, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %850 = load i32, i32* %849, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %473 = load i8, i8* %472, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %845 = load i32, i32* %844, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %469 = load i8, i8* %467, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %840 = load i32, i32* %839, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %462 = load i8, i8* %461, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %835 = load i32, i32* %834, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %458 = load i8, i8* %448, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %453 = load i8, i8* %452, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %791 = load i32, i32* %790, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %443 = load i8, i8* %442, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %439 = load i8, i8* %428, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %433 = load i8, i8* %432, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %429 = load i8, i8* %418, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %423 = load i8, i8* %422, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %419 = load i8, i8* %417, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %412 = load i8, i8* %411, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %408 = load i8, i8* %398, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %403 = load i8, i8* %402, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %399 = load i8, i8* %388, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %393 = load i8, i8* %392, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %389 = load i8, i8* %378, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %363 = load i8, i8* %362, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %359 = load i8, i8* %348, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %353 = load i8, i8* %352, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %349 = load i8, i8* %347, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %342 = load i8, i8* %341, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %338 = load i8, i8* %328, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %333 = load i8, i8* %332, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %323 = load i8, i8* %322, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %319 = load i8, i8* %317, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %312 = load i8, i8* %311, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %308 = load i8, i8* %300, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %305 = load i8, i8* %304, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %301 = load i8, i8* %292, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %383 = load i8, i8* %382, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %297 = load i8, i8* %296, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   call void @free(i8* %141) #12 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   call void @free(i8* %141) #12 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %995 = load i8, i8* %994, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %992 = load i32, i32* %991, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %379 = load i8, i8* %368, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %293 = load i8, i8* %291, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %373 = load i8, i8* %372, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %288 = load i8, i8* %287, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %369 = load i8, i8* %358, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %284 = load i8, i8* %276, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %795 = load i32, i32* %794, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %881 = load i32, i32* %880, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %905 = load i32, i32* %904, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %956 = load i32, i32* %955, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %197 = load i8, i8* %195, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %875 = load i32, i32* %874, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %900 = load i32, i32* %899, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %951 = load i32, i32* %950, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %192 = load i8, i8* %191, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %886 = load i32, i32* %885, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %910 = load i32, i32* %909, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %449 = load i8, i8* %438, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %961 = load i32, i32* %960, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %201 = load i8, i8* %200, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %945 = load i32, i32* %944, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %188 = load i8, i8* %180, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %775 = load i32, i32* %774, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %989 = load i32, i32* %988, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %740 = load i32, i32* %739, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %870 = load i32, i32* %869, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %237 = load i8, i8* %235, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %281 = load i8, i8* %280, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   store i32 %716, i32* %717, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %865 = load i32, i32* %864, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %482 = load i8, i8* %481, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %770 = load i32, i32* %769, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %232 = load i8, i8* %231, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %891 = load i32, i32* %890, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %860 = load i32, i32* %859, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %916 = load i32, i32* %915, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %965 = load i32, i32* %964, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %205 = load i8, i8* %196, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %970 = load i32, i32* %969, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %209 = load i8, i8* %208, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %975 = load i32, i32* %974, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %213 = load i8, i8* %204, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %980 = load i32, i32* %979, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %217 = load i8, i8* %216, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %895 = load i32, i32* %894, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %921 = load i32, i32* %920, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %169 = load i8, i8* %168, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %926 = load i32, i32* %925, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %173 = load i8, i8* %166, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %930 = load i32, i32* %929, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %177 = load i8, i8* %176, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %935 = load i32, i32* %934, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %181 = load i8, i8* %172, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %940 = load i32, i32* %939, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %185 = load i8, i8* %184, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %221 = load i8, i8* %212, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %269 = load i8, i8* %260, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %765 = load i32, i32* %764, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %273 = load i8, i8* %272, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %492 = load i8, i8* %491, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %781 = load i32, i32* %780, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %800 = load i32, i32* %799, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %805 = load i32, i32* %804, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %810 = load i32, i32* %809, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %816 = load i32, i32* %815, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %821 = load i32, i32* %820, align 4, !tbaa !38 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %225 = load i8, i8* %224, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %228 = load i8, i8* %220, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %241 = load i8, i8* %240, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %245 = load i8, i8* %236, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %249 = load i8, i8* %248, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %329 = load i8, i8* %318, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %253 = load i8, i8* %244, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %257 = load i8, i8* %256, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %261 = load i8, i8* %252, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %265 = load i8, i8* %264, align 1, !tbaa !36 via memory
DOALL:         %141 = call noalias i8* @malloc(i64 %140) #12 --->   %277 = load i8, i8* %268, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %795 = load i32, i32* %794, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %855 = load i32, i32* %854, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %623 = load i8, i8* %622, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %610 = load i8, i8* %609, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %606 = load i8, i8* %605, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %492 = load i8, i8* %491, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %488 = load i8, i8* %487, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %845 = load i32, i32* %844, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %482 = load i8, i8* %481, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %840 = load i32, i32* %839, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %478 = load i8, i8* %468, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %835 = load i32, i32* %834, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %473 = load i8, i8* %472, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %830 = load i32, i32* %829, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %469 = load i8, i8* %467, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %826 = load i32, i32* %825, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %462 = load i8, i8* %461, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %770 = load i32, i32* %769, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %458 = load i8, i8* %448, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %756 = load i32, i32* %755, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %443 = load i8, i8* %442, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %751 = load i32, i32* %750, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %439 = load i8, i8* %428, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %746 = load i32, i32* %745, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %433 = load i8, i8* %432, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %740 = load i32, i32* %739, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %429 = load i8, i8* %418, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   store i32 %716, i32* %717, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %669 = load i8, i8* %668, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %423 = load i8, i8* %422, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %665 = load i8, i8* %664, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %419 = load i8, i8* %417, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %403 = load i8, i8* %402, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   store i32 %710, i32* %711, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %399 = load i8, i8* %388, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %645 = load i8, i8* %644, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %363 = load i8, i8* %362, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %641 = load i8, i8* %640, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %359 = load i8, i8* %348, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %704 = load i8, i8* %703, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %393 = load i8, i8* %392, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %342 = load i8, i8* %341, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %700 = load i8, i8* %699, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %389 = load i8, i8* %378, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %338 = load i8, i8* %328, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %686 = load i8, i8* %685, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %383 = load i8, i8* %382, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %333 = load i8, i8* %332, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %682 = load i8, i8* %681, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %379 = load i8, i8* %368, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %329 = load i8, i8* %318, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %373 = load i8, i8* %372, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %323 = load i8, i8* %322, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %369 = load i8, i8* %358, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %319 = load i8, i8* %317, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %312 = load i8, i8* %311, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %308 = load i8, i8* %300, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %627 = load i8, i8* %626, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %305 = load i8, i8* %304, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %850 = load i32, i32* %849, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %301 = load i8, i8* %292, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %284 = load i8, i8* %276, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %281 = load i8, i8* %280, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %277 = load i8, i8* %268, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %297 = load i8, i8* %296, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %273 = load i8, i8* %272, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %293 = load i8, i8* %291, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %269 = load i8, i8* %260, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %805 = load i32, i32* %804, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %257 = load i8, i8* %256, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %800 = load i32, i32* %799, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %765 = load i32, i32* %764, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %453 = load i8, i8* %452, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %232 = load i8, i8* %231, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %253 = load i8, i8* %244, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %821 = load i32, i32* %820, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %760 = load i32, i32* %759, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %449 = load i8, i8* %438, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %228 = load i8, i8* %220, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %249 = load i8, i8* %248, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   store i32 %716, i32* %717, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %816 = load i32, i32* %815, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %245 = load i8, i8* %236, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   store i32 %713, i32* %714, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %412 = load i8, i8* %411, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   call void @free(i8* %143) #12 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %791 = load i32, i32* %790, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %241 = load i8, i8* %240, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %408 = load i8, i8* %398, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   call void @free(i8* %143) #12 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %786 = load i32, i32* %785, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   store i32 %713, i32* %714, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %237 = load i8, i8* %235, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %353 = load i8, i8* %352, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %995 = load i8, i8* %994, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %781 = load i32, i32* %780, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %349 = load i8, i8* %347, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %992 = load i32, i32* %991, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %775 = load i32, i32* %774, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %881 = load i32, i32* %880, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %905 = load i32, i32* %904, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %956 = load i32, i32* %955, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %197 = load i8, i8* %195, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %875 = load i32, i32* %874, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   store i8 %134, i8* %136, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %900 = load i32, i32* %899, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %951 = load i32, i32* %950, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %192 = load i8, i8* %191, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %886 = load i32, i32* %885, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %910 = load i32, i32* %909, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %961 = load i32, i32* %960, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %201 = load i8, i8* %200, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %945 = load i32, i32* %944, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %188 = load i8, i8* %180, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %225 = load i8, i8* %224, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %265 = load i8, i8* %264, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %870 = load i32, i32* %869, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %810 = load i32, i32* %809, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %261 = load i8, i8* %252, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %865 = load i32, i32* %864, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %891 = load i32, i32* %890, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   call void @llvm.memset.p0i8.i64(i8* align 4 %112, i8 0, i64 %140, i1 false) #12, !prof !43 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %860 = load i32, i32* %859, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %916 = load i32, i32* %915, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %965 = load i32, i32* %964, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %205 = load i8, i8* %196, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %970 = load i32, i32* %969, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %209 = load i8, i8* %208, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %975 = load i32, i32* %974, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %213 = load i8, i8* %204, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %980 = load i32, i32* %979, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %217 = load i8, i8* %216, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %895 = load i32, i32* %894, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %1006 = call i32 @corner_draw(i8* %116, %struct.anon* nonnull %115, i32 %107, i32 %.07.lcssa) via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %989 = load i32, i32* %988, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %221 = load i8, i8* %212, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %921 = load i32, i32* %920, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %169 = load i8, i8* %168, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %926 = load i32, i32* %925, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %173 = load i8, i8* %166, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %930 = load i32, i32* %929, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %177 = load i8, i8* %176, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %935 = load i32, i32* %934, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %181 = load i8, i8* %172, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %940 = load i32, i32* %939, align 4, !tbaa !38 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %185 = load i8, i8* %184, align 1, !tbaa !36 via memory
DOALL:         %143 = call noalias i8* @malloc(i64 %140) #12 --->   %288 = load i8, i8* %287, align 1, !tbaa !36 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 0
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   No remaining calls need to be inlined due to loop-carried data dependences
Inliner:   The code has not been modified
Inliner: Exit
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (4.753805e+01%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (4.753248e+01%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (2.475471e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (2.464836e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0" (8.737978e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (9.599033e-07%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (4.996772e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, 257" (1.865873e-02%)
Noelle:     Loop "  %156 = icmp slt i64 %indvars.iv45.i, %152" (4.747657e+01%)
Noelle:     Loop "  %164 = icmp slt i64 %indvars.iv43.i, %149" (4.747100e+01%)
Noelle:     Loop "  %720 = icmp slt i64 %indvars.iv41.i, %152" (2.472269e+00%)
Noelle:     Loop "  %736 = icmp slt i64 %indvars.iv.i1, %149" (2.461648e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (1.869927e-02%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (1.868289e-02%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (1.482027e-04%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (9.102061e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (1.911433e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %135 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %141 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp sgt i32 %.010, %.09" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp sgt i32 %.013, %.09" (0.000000e+00%)
Noelle:     Loop "  %73 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %79 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %99 = icmp sgt i32 %.017, %.09" (0.000000e+00%)
Noelle:     Loop "  %100 = icmp sgt i32 %.016, %.09" (0.000000e+00%)
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (0.000000e+00%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (0.000000e+00%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (0.000000e+00%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (4.753805e+01%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (4.753248e+01%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (2.475471e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (2.464836e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0" (8.737978e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (9.599033e-07%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (4.996772e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, 257" (1.865873e-02%)
Noelle:     Loop "  %156 = icmp slt i64 %indvars.iv45.i, %152" (4.747657e+01%)
Noelle:     Loop "  %164 = icmp slt i64 %indvars.iv43.i, %149" (4.747100e+01%)
Noelle:     Loop "  %720 = icmp slt i64 %indvars.iv41.i, %152" (2.472269e+00%)
Noelle:     Loop "  %736 = icmp slt i64 %indvars.iv.i1, %149" (2.461648e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (1.869927e-02%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (1.868289e-02%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (1.482027e-04%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (9.102061e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (1.911433e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %135 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %141 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp sgt i32 %.010, %.09" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp sgt i32 %.013, %.09" (0.000000e+00%)
Noelle:     Loop "  %73 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %79 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %99 = icmp sgt i32 %.017, %.09" (0.000000e+00%)
Noelle:     Loop "  %100 = icmp sgt i32 %.016, %.09" (0.000000e+00%)
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (0.000000e+00%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (0.000000e+00%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (0.000000e+00%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: Inliner: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.JNuDdBUfMJ (.ll version is /tmp/tmp.oGffhc8oCd)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.VuS8TmWkz8 (.ll version is /tmp/tmp.ekRGEgRNQg)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.JNuDdBUfMJ -o /tmp/tmp.VuS8TmWkz8
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.JNuDdBUfMJ -o /tmp/tmp.VuS8TmWkz8
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.JNuDdBUfMJ -o /tmp/tmp.VuS8TmWkz8
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.JNuDdBUfMJ -o /tmp/tmp.VuS8TmWkz8
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       usage
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       getint
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       susan_corners
DeadFunctionEliminator:       susan_corners_quick
DeadFunctionEliminator:       main
DeadFunctionEliminator:       atof
DeadFunctionEliminator:       atoi
DeadFunctionEliminator:       strtol
DeadFunctionEliminator:       getc
DeadFunctionEliminator:       fgets
DeadFunctionEliminator:       fprintf
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       get_image
DeadFunctionEliminator:       fopen
DeadFunctionEliminator:       fgetc
DeadFunctionEliminator:       malloc
DeadFunctionEliminator:       fread
DeadFunctionEliminator:       fclose
DeadFunctionEliminator:       put_image
DeadFunctionEliminator:       fwrite
DeadFunctionEliminator:       int_to_uchar
DeadFunctionEliminator:       setup_brightness_lut
DeadFunctionEliminator:       exp
DeadFunctionEliminator:       susan_principle
DeadFunctionEliminator:       llvm.memset.p0i8.i64
DeadFunctionEliminator:       susan_principle_small
DeadFunctionEliminator:       median
DeadFunctionEliminator:       free
DeadFunctionEliminator:       enlarge
DeadFunctionEliminator:       llvm.memcpy.p0i8.p0i8.i64
DeadFunctionEliminator:       susan_smoothing
DeadFunctionEliminator:       edge_draw
DeadFunctionEliminator:       susan_thin
DeadFunctionEliminator:       susan_edges
DeadFunctionEliminator:       susan_edges_small
DeadFunctionEliminator:       corner_draw
DeadFunctionEliminator:       strtod
DeadFunctionEliminator:       puts
DeadFunctionEliminator:       sqrtf
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (7.603158e+01%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (7.602267e+01%)
Noelle:     Loop "  %590 = icmp slt i64 %indvars.iv41, %23" (3.959228e+00%)
Noelle:     Loop "  %606 = icmp slt i64 %indvars.iv, %20" (3.942218e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0" (1.397538e-08%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (1.956212e-04%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (1.997901e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, 257" (7.087692e-03%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv45.i, %128" (1.898331e+01%)
Noelle:     Loop "  %161 = icmp slt i64 %indvars.iv43.i, %125" (1.898109e+01%)
Noelle:     Loop "  %716 = icmp slt i64 %indvars.iv41.i, %128" (9.885267e-01%)
Noelle:     Loop "  %732 = icmp slt i64 %indvars.iv.i1, %125" (9.842799e-01%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (2.990731e-02%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (2.988111e-02%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (2.370329e-04%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (1.455769e-08%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (3.057114e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %135 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %141 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp sgt i32 %.010, %.09" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp sgt i32 %.013, %.09" (0.000000e+00%)
Noelle:     Loop "  %73 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %79 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %99 = icmp sgt i32 %.017, %.09" (0.000000e+00%)
Noelle:     Loop "  %100 = icmp sgt i32 %.016, %.09" (0.000000e+00%)
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (0.000000e+00%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i32 %.1, %4" (0.000000e+00%)
Noelle:     Loop "  %54 = icmp slt i32 %.2, %4" (0.000000e+00%)
Noelle:     Loop "  %57 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %368 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %384 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (7.603158e+01%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (7.602267e+01%)
Noelle:     Loop "  %590 = icmp slt i64 %indvars.iv41, %23" (3.959228e+00%)
Noelle:     Loop "  %606 = icmp slt i64 %indvars.iv, %20" (3.942218e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0" (1.397538e-08%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (1.956212e-04%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (1.997901e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, 257" (7.087692e-03%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv45.i, %128" (1.898331e+01%)
Noelle:     Loop "  %161 = icmp slt i64 %indvars.iv43.i, %125" (1.898109e+01%)
Noelle:     Loop "  %716 = icmp slt i64 %indvars.iv41.i, %128" (9.885267e-01%)
Noelle:     Loop "  %732 = icmp slt i64 %indvars.iv.i1, %125" (9.842799e-01%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (2.990731e-02%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (2.988111e-02%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (2.370329e-04%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (1.455769e-08%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (3.057114e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %135 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %141 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp sgt i32 %.010, %.09" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp sgt i32 %.013, %.09" (0.000000e+00%)
Noelle:     Loop "  %73 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %79 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %99 = icmp sgt i32 %.017, %.09" (0.000000e+00%)
Noelle:     Loop "  %100 = icmp sgt i32 %.016, %.09" (0.000000e+00%)
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (0.000000e+00%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i32 %.1, %4" (0.000000e+00%)
Noelle:     Loop "  %54 = icmp slt i32 %.2, %4" (0.000000e+00%)
Noelle:     Loop "  %57 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %368 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %384 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-enable baseline_pre.bc baseline_pre.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: Enablers: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.YtHJ0tvqep (.ll version is /tmp/tmp.KHKc2dbIr2)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.kxflkDR7GE (.ll version is /tmp/tmp.oSU4efPz02)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.YtHJ0tvqep -o /tmp/tmp.kxflkDR7GE
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.YtHJ0tvqep -o /tmp/tmp.kxflkDR7GE
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.YtHJ0tvqep -o /tmp/tmp.kxflkDR7GE
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.YtHJ0tvqep -o /tmp/tmp.kxflkDR7GE
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.YtHJ0tvqep -o /tmp/tmp.kxflkDR7GE
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0" (1.397538e-08%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (1.956212e-04%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (1.997901e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, 257" (7.087692e-03%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv45.i, %128" (1.898331e+01%)
Noelle:     Loop "  %161 = icmp slt i64 %indvars.iv43.i, %125" (1.898109e+01%)
Noelle:     Loop "  %716 = icmp slt i64 %indvars.iv41.i, %128" (9.885267e-01%)
Noelle:     Loop "  %732 = icmp slt i64 %indvars.iv.i1, %125" (9.842799e-01%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (2.990731e-02%)
Noelle:  Disable loop "15" as cold code
Noelle:  Function "setup_brightness_lut"
Noelle:  Disable "setup_brightness_lut" as cold function
Noelle:  Function "corner_draw"
Noelle:  Disable "corner_draw" as cold function
Noelle:  Function "get_image"
Noelle:  Disable "get_image" as cold function
Noelle:  Function "getint"
Noelle:  Disable "getint" as cold function
Noelle:  Function "put_image"
Noelle:  Disable "put_image" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "atof"
Noelle:  Disable "atof" as cold function
Noelle:  Function "int_to_uchar"
Noelle:  Disable "int_to_uchar" as cold function
Noelle:  Function "susan_corners_quick"
Noelle:  Disable "susan_corners_quick" as cold function
Noelle:  Function "susan_principle"
Noelle:  Disable "susan_principle" as cold function
Noelle:  Function "susan_principle_small"
Noelle:  Disable "susan_principle_small" as cold function
Noelle:  Function "median"
Noelle:  Disable "median" as cold function
Noelle:  Function "enlarge"
Noelle:  Disable "enlarge" as cold function
Noelle:  Function "susan_smoothing"
Noelle:  Disable "susan_smoothing" as cold function
Noelle:  Function "edge_draw"
Noelle:  Disable "edge_draw" as cold function
Noelle:  Function "susan_thin"
Noelle:  Disable "susan_thin" as cold function
Noelle:  Function "susan_edges"
Noelle:  Disable "susan_edges" as cold function
Noelle:  Function "susan_edges_small"
Noelle:  Disable "susan_edges_small" as cold function
Noelle:  Function "usage"
Noelle:  Disable "usage" as cold function
EnablersManager:   Try to improve all 5 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %153 = icmp slt i64 %indvars.iv45.i, %128
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %153 = icmp slt i64 %indvars.iv45.i, %128"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %153, label %154, label %.preheader.i.preheader, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %161 = icmp slt i64 %indvars.iv43.i, %125
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %161 = icmp slt i64 %indvars.iv43.i, %125"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %161, label %162, label %715, !prof !45
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %716 = icmp slt i64 %indvars.iv41.i, %128
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %716 = icmp slt i64 %indvars.iv41.i, %128"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %716, label %717, label %susan_corners.exit, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %732 = icmp slt i64 %indvars.iv.i1, %125
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %732 = icmp slt i64 %indvars.iv.i1, %125"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %732, label %733, label %.preheader.i.loopexit, !prof !45
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (7.603158e+01%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (7.602267e+01%)
Noelle:     Loop "  %590 = icmp slt i64 %indvars.iv41, %23" (3.959228e+00%)
Noelle:     Loop "  %606 = icmp slt i64 %indvars.iv, %20" (3.942218e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0" (1.397538e-08%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (1.956212e-04%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (1.997901e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, 257" (7.087692e-03%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv45.i, %128" (1.898331e+01%)
Noelle:     Loop "  %161 = icmp slt i64 %indvars.iv43.i, %125" (1.898109e+01%)
Noelle:     Loop "  %716 = icmp slt i64 %indvars.iv41.i, %128" (9.885267e-01%)
Noelle:     Loop "  %732 = icmp slt i64 %indvars.iv.i1, %125" (9.842799e-01%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (2.990731e-02%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (2.988111e-02%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (2.370329e-04%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (1.455769e-08%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (3.057114e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %135 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %141 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp sgt i32 %.010, %.09" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp sgt i32 %.013, %.09" (0.000000e+00%)
Noelle:     Loop "  %73 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %79 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %99 = icmp sgt i32 %.017, %.09" (0.000000e+00%)
Noelle:     Loop "  %100 = icmp sgt i32 %.016, %.09" (0.000000e+00%)
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (0.000000e+00%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i32 %.1, %4" (0.000000e+00%)
Noelle:     Loop "  %54 = icmp slt i32 %.2, %4" (0.000000e+00%)
Noelle:     Loop "  %57 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %368 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %384 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (7.603158e+01%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (7.602267e+01%)
Noelle:     Loop "  %590 = icmp slt i64 %indvars.iv41, %23" (3.959228e+00%)
Noelle:     Loop "  %606 = icmp slt i64 %indvars.iv, %20" (3.942218e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0" (1.397538e-08%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (1.956212e-04%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (1.997901e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, 257" (7.087692e-03%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv45.i, %128" (1.898331e+01%)
Noelle:     Loop "  %161 = icmp slt i64 %indvars.iv43.i, %125" (1.898109e+01%)
Noelle:     Loop "  %716 = icmp slt i64 %indvars.iv41.i, %128" (9.885267e-01%)
Noelle:     Loop "  %732 = icmp slt i64 %indvars.iv.i1, %125" (9.842799e-01%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (2.990731e-02%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (2.988111e-02%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (2.370329e-04%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (1.455769e-08%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (3.057114e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %135 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %141 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp sgt i32 %.010, %.09" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp sgt i32 %.013, %.09" (0.000000e+00%)
Noelle:     Loop "  %73 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %79 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %99 = icmp sgt i32 %.017, %.09" (0.000000e+00%)
Noelle:     Loop "  %100 = icmp sgt i32 %.016, %.09" (0.000000e+00%)
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (0.000000e+00%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i32 %.1, %4" (0.000000e+00%)
Noelle:     Loop "  %54 = icmp slt i32 %.2, %4" (0.000000e+00%)
Noelle:     Loop "  %57 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %368 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %384 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: Enablers: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true baseline_pre.bc -o baseline_pre.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata baseline_pre.bc -o baseline_pre.bc
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_c /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_c
Running: ./baseline_pre_prof input_large.pgm output_large.corners.pgm -c in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/MiBench/automotive/susan
--------------------------------------------------------------------------------------
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_c
DONE
opt -pgo-test-profile-file=/tmp/tmp.JqJ8GVf7fA -block-freq -pgo-instr-use baseline_pre.bc -o baseline_with_metadata.bc
noelle-load -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
PDGAnalysis: Construct PDG from Analysis
Embed PDG as metadata
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0, !noelle.pdg.inst.id !3287" (1.748758e-08%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000, !noelle.pdg.inst.id !4430" (0.000000e+00%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000, !noelle.pdg.inst.id !4424" (1.921084e-06%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000, !noelle.pdg.inst.id !3486" (9.999999e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, 257, !noelle.pdg.inst.id !3493" (3.547570e-02%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv45.i, %128, !noelle.pdg.inst.id !3517" (9.501629e+01%)
Noelle:     Loop "  %161 = icmp slt i64 %indvars.iv43.i, %125, !noelle.pdg.inst.id !3529" (9.500515e+01%)
Noelle:     Loop "  %716 = icmp slt i64 %indvars.iv41.i, %128, !noelle.pdg.inst.id !4071" (4.947827e+00%)
Noelle:     Loop "  %732 = icmp slt i64 %indvars.iv.i1, %125, !noelle.pdg.inst.id !4091" (4.926571e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000, !noelle.pdg.inst.id !3457" (0.000000e+00%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000, !noelle.pdg.inst.id !3420" (0.000000e+00%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000, !noelle.pdg.inst.id !3451" (0.000000e+00%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000, !noelle.pdg.inst.id !3445" (0.000000e+00%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000, !noelle.pdg.inst.id !3439" (0.000000e+00%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000, !noelle.pdg.inst.id !3430" (0.000000e+00%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000, !noelle.pdg.inst.id !3401" (0.000000e+00%)
Noelle:  Disable loop "15" as cold code
Noelle:  Function "corner_draw"
Noelle:  Disable "corner_draw" as cold function
Noelle:  Function "get_image"
Noelle:  Disable "get_image" as cold function
Noelle:  Function "getint"
Noelle:  Disable "getint" as cold function
Noelle:  Function "put_image"
Noelle:  Disable "put_image" as cold function
Noelle:  Function "susan_smoothing"
Noelle:  Disable "susan_smoothing" as cold function
Noelle:  Function "setup_brightness_lut"
Noelle:  Disable "setup_brightness_lut" as cold function
Noelle:  Function "susan_principle"
Noelle:  Disable "susan_principle" as cold function
Noelle:  Function "susan_principle_small"
Noelle:  Disable "susan_principle_small" as cold function
Noelle:  Function "median"
Noelle:  Disable "median" as cold function
Noelle:  Function "enlarge"
Noelle:  Disable "enlarge" as cold function
Noelle:  Function "edge_draw"
Noelle:  Disable "edge_draw" as cold function
Noelle:  Function "susan_thin"
Noelle:  Disable "susan_thin" as cold function
Noelle:  Function "susan_edges"
Noelle:  Disable "susan_edges" as cold function
Noelle:  Function "susan_edges_small"
Noelle:  Disable "susan_edges_small" as cold function
Noelle:  Function "usage"
Noelle:  Disable "usage" as cold function
Noelle:  Function "susan_corners"
Noelle:  Disable "susan_corners" as cold function
Noelle:  Function "susan_corners_quick"
Noelle:  Disable "susan_corners_quick" as cold function
Noelle:  Function "atof"
Noelle:  Disable "atof" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "int_to_uchar"
Noelle:  Disable "int_to_uchar" as cold function
Planner:    There are 5 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:  There are 1 loop nesting trees in the program
Planner:    ID: 51 (1)
Planner:      Function: "main"
Planner:      Loop: "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000, !noelle.pdg.inst.id !3486"
Planner:      Loop nesting level: 1
Planner:      Hotness = 9.999999e+01 %
Planner:      Average instructions per invocation = 2.744805e+11 %
Planner:      Average iterations per invocation = 9.987000e+03 %
Planner:    
Planner:      ID: 53 (2)
Planner:        Function: "main"
Planner:        Loop: "  %153 = icmp slt i64 %indvars.iv45.i, %128, !noelle.pdg.inst.id !3517"
Planner:        Loop nesting level: 2
Planner:        Hotness = 9.501629e+01 %
Planner:        Average instructions per invocation = 2.611407e+07 %
Planner:        Average iterations per invocation = 2.790018e+02 %
Planner:      
Planner:        ID: 54 (3)
Planner:          Function: "main"
Planner:          Loop: "  %161 = icmp slt i64 %indvars.iv43.i, %125, !noelle.pdg.inst.id !3529"
Planner:          Loop nesting level: 3
Planner:          Hotness = 9.500515e+01 %
Planner:          Average instructions per invocation = 9.392388e+04 %
Planner:          Average iterations per invocation = 3.750001e+02 %
Planner:        
Planner:      ID: 55 (2)
Planner:        Function: "main"
Planner:        Loop: "  %716 = icmp slt i64 %indvars.iv41.i, %128, !noelle.pdg.inst.id !4071"
Planner:        Loop nesting level: 2
Planner:        Hotness = 4.947827e+00 %
Planner:        Average instructions per invocation = 1.359850e+06 %
Planner:        Average iterations per invocation = 2.790017e+02 %
Planner:      
Planner:        ID: 56 (3)
Planner:          Function: "main"
Planner:          Loop: "  %732 = icmp slt i64 %indvars.iv.i1, %125, !noelle.pdg.inst.id !4091"
Planner:          Loop nesting level: 3
Planner:          Hotness = 4.926571e+00 %
Planner:          Average instructions per invocation = 4.870500e+03 %
Planner:          Average iterations per invocation = 3.750000e+02 %
Planner:        
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3255
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !3254
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !3253
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8, !noelle.pdg.inst.id !3251
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8, !noelle.pdg.inst.id !3252
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3255
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !3254
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !3253
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8, !noelle.pdg.inst.id !3251
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8, !noelle.pdg.inst.id !3252
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3255
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !3254
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !3253
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8, !noelle.pdg.inst.id !3251
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8, !noelle.pdg.inst.id !3252
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3255
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !3254
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !3253
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8, !noelle.pdg.inst.id !3251
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8, !noelle.pdg.inst.id !3252
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3255
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !3254
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !3253
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8, !noelle.pdg.inst.id !3251
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8, !noelle.pdg.inst.id !3252
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3255
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !3254
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !3253
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8, !noelle.pdg.inst.id !3251
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8, !noelle.pdg.inst.id !3252
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3255
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !3254
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !3253
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8, !noelle.pdg.inst.id !3251
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8, !noelle.pdg.inst.id !3252
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3255
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !3254
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !3253
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8, !noelle.pdg.inst.id !3251
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8, !noelle.pdg.inst.id !3252
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3255
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !3254
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !3253
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8, !noelle.pdg.inst.id !3251
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8, !noelle.pdg.inst.id !3252
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3255
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !3254
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !3253
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8, !noelle.pdg.inst.id !3251
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8, !noelle.pdg.inst.id !3252
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 51 saves only 1.582516e+00 when parallelized. Skip it
Planner: LoopSelector:  Loop 55 saves only 7.598174e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 56 saves only 7.567829e-01 when parallelized. Skip it
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 53
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %153 = icmp slt i64 %indvars.iv45.i, %128, !noelle.pdg.inst.id !3517"
Planner: LoopSelector:      Coverage: 9.501629e+01%
Planner: LoopSelector:      Whole-program savings = 9.501629e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 54
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %161 = icmp slt i64 %indvars.iv43.i, %125, !noelle.pdg.inst.id !3529"
Planner: LoopSelector:      Coverage: 9.500515e+01%
Planner: LoopSelector:      Whole-program savings = 9.500515e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
Planner:   Maximum time saved = 9.577611e+01% (262886747896)
Planner:   Maximum time saved with DOALL only = 0.000000e+00% (0)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0, !noelle.pdg.inst.id !3289" (1.748758e-08%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000, !noelle.pdg.inst.id !4434" (0.000000e+00%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000, !noelle.pdg.inst.id !4428" (0.000000e+00%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000, !noelle.pdg.inst.id !3488" (1.000000e+02%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, 257, !noelle.pdg.inst.id !3495" (3.547570e-02%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv45.i, %128, !noelle.pdg.inst.id !3519" (9.501629e+01%)
Noelle:     Loop "  %161 = icmp slt i64 %indvars.iv43.i, %125, !noelle.pdg.inst.id !3532" (9.500515e+01%)
Noelle:     Loop "  %716 = icmp slt i64 %indvars.iv41.i, %128, !noelle.pdg.inst.id !4075" (4.947827e+00%)
Noelle:     Loop "  %732 = icmp slt i64 %indvars.iv.i1, %125, !noelle.pdg.inst.id !4095" (4.926571e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000, !noelle.pdg.inst.id !3459" (0.000000e+00%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000, !noelle.pdg.inst.id !3422" (0.000000e+00%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000, !noelle.pdg.inst.id !3453" (0.000000e+00%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000, !noelle.pdg.inst.id !3447" (0.000000e+00%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000, !noelle.pdg.inst.id !3441" (0.000000e+00%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000, !noelle.pdg.inst.id !3432" (0.000000e+00%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000, !noelle.pdg.inst.id !3403" (0.000000e+00%)
Noelle:  Disable loop "15" as cold code
Noelle:  Function "corner_draw"
Noelle:  Disable "corner_draw" as cold function
Noelle:  Function "get_image"
Noelle:  Disable "get_image" as cold function
Noelle:  Function "getint"
Noelle:  Disable "getint" as cold function
Noelle:  Function "put_image"
Noelle:  Disable "put_image" as cold function
Noelle:  Function "susan_smoothing"
Noelle:  Disable "susan_smoothing" as cold function
Noelle:  Function "susan_principle_small"
Noelle:  Disable "susan_principle_small" as cold function
Noelle:  Function "median"
Noelle:  Disable "median" as cold function
Noelle:  Function "enlarge"
Noelle:  Disable "enlarge" as cold function
Noelle:  Function "edge_draw"
Noelle:  Disable "edge_draw" as cold function
Noelle:  Function "susan_thin"
Noelle:  Disable "susan_thin" as cold function
Noelle:  Function "susan_edges"
Noelle:  Disable "susan_edges" as cold function
Noelle:  Function "susan_edges_small"
Noelle:  Disable "susan_edges_small" as cold function
Noelle:  Function "susan_corners"
Noelle:  Disable "susan_corners" as cold function
Noelle:  Function "susan_corners_quick"
Noelle:  Disable "susan_corners_quick" as cold function
Noelle:  Function "atof"
Noelle:  Disable "atof" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "int_to_uchar"
Noelle:  Disable "int_to_uchar" as cold function
Noelle:  Function "setup_brightness_lut"
Noelle:  Disable "setup_brightness_lut" as cold function
Noelle:  Function "susan_principle"
Noelle:  Disable "susan_principle" as cold function
Noelle:  Function "usage"
Noelle:  Disable "usage" as cold function
Parallelizer:    There are 5 loops in the program we are going to consider
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3257
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !3256
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !3255
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8, !noelle.pdg.inst.id !3253
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8, !noelle.pdg.inst.id !3254
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3257
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !3256
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !3255
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8, !noelle.pdg.inst.id !3253
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8, !noelle.pdg.inst.id !3254
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3257
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !3256
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !3255
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8, !noelle.pdg.inst.id !3253
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8, !noelle.pdg.inst.id !3254
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3257
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !3256
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !3255
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8, !noelle.pdg.inst.id !3253
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8, !noelle.pdg.inst.id !3254
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 53 = "  %153 = icmp slt i64 %indvars.iv45.i, %128, !noelle.pdg.inst.id !3519"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %109 = load i32, i32* %5, align 4, !tbaa !3408, !noelle.pdg.inst.id !898
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %115 = bitcast i8* %114 to i32*, !noelle.pdg.inst.id !3467
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %118 = load i8*, i8** %3, align 8, !noelle.pdg.inst.id !905
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %124 = sext i32 %123 to i64, !noelle.pdg.inst.id !3479
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %125 = sext i32 %122 to i64, !noelle.pdg.inst.id !3480
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %127 = sext i32 %126 to i64, !noelle.pdg.inst.id !3482
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %128 = sext i32 %121 to i64, !noelle.pdg.inst.id !3483
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %129 = sext i32 %109 to i64, !noelle.pdg.inst.id !3484
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %130 = getelementptr inbounds i8, i8* %118, i64 -1, !noelle.pdg.inst.id !3485
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %133 = getelementptr inbounds i8, i8* %132, i64 258, !noelle.pdg.inst.id !3492
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %149 = bitcast i8* %148 to i32*, !noelle.pdg.inst.id !3515
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %151 = bitcast i8* %150 to i32*, !noelle.pdg.inst.id !3516
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 54 = "  %161 = icmp slt i64 %indvars.iv43.i, %125, !noelle.pdg.inst.id !3532"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %109 = load i32, i32* %5, align 4, !tbaa !3408, !noelle.pdg.inst.id !898
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %115 = bitcast i8* %114 to i32*, !noelle.pdg.inst.id !3467
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %118 = load i8*, i8** %3, align 8, !noelle.pdg.inst.id !905
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %124 = sext i32 %123 to i64, !noelle.pdg.inst.id !3479
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %125 = sext i32 %122 to i64, !noelle.pdg.inst.id !3480
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %127 = sext i32 %126 to i64, !noelle.pdg.inst.id !3482
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %133 = getelementptr inbounds i8, i8* %132, i64 258, !noelle.pdg.inst.id !3492
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %149 = bitcast i8* %148 to i32*, !noelle.pdg.inst.id !3515
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %151 = bitcast i8* %150 to i32*, !noelle.pdg.inst.id !3516
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %157 = mul nsw i64 %indvars.iv45.i, %129, !noelle.pdg.inst.id !3527
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %158 = getelementptr inbounds i8, i8* %130, i64 %156, !noelle.pdg.inst.id !3528
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %159 = trunc i64 %indvars.iv45.i to i32, !noelle.pdg.inst.id !3529
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc susan_c.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_c'
