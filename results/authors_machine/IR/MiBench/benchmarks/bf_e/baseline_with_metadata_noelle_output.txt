make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/bf_e'
./runEnablers.sh bf_e bf_e.bc large "-lm -lstdc++ -lpthread -ltermcap" -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/bf_e /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/bf_e
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/bf_e

opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs bf_e.bc -o baseline.bc
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/bf_e /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/bf_e
Running: ./baseline_prof e input_verylarge.asc output_verylarge.enc 1234567890abcdeffedcba0987654321 in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/MiBench/security/blowfish
--------------------------------------------------------------------------------------
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/bf_e
DONE
opt -pgo-test-profile-file=/tmp/tmp.AxQjBUne2K -block-freq -pgo-instr-use baseline.bc -o baseline_pre.bc
opt --strip-debug --strip-debug-declare baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.N6jlaBpslx (.ll version is /tmp/tmp.Z7fIjPQIHq)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.lBd0klqauP (.ll version is /tmp/tmp.ftio4yGWX8)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.N6jlaBpslx -o /tmp/tmp.lBd0klqauP
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.N6jlaBpslx -o /tmp/tmp.lBd0klqauP
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.N6jlaBpslx -o /tmp/tmp.lBd0klqauP
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.N6jlaBpslx -o /tmp/tmp.lBd0klqauP
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       main
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       BF_encrypt
DeadFunctionEliminator:       toupper
DeadFunctionEliminator:       fopen
DeadFunctionEliminator:       feof
DeadFunctionEliminator:       getc
DeadFunctionEliminator:       fputc
DeadFunctionEliminator:       BF_set_key
DeadFunctionEliminator:       llvm.memcpy.p0i8.p0i8.i64
DeadFunctionEliminator:       BF_cfb64_encrypt
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:     Loop "  %64 = load i32, i32* %13, align 4" (2.824603e-07%)
Noelle:     Loop "  %159 = load %struct._IO_FILE*, %struct._IO_FILE** %17, align 8" (9.998562e+01%)
Noelle:     Loop "  %165 = load %struct._IO_FILE*, %struct._IO_FILE** %17, align 8" (1.100659e+01%)
Noelle:     Loop "  %189 = load i32, i32* %19, align 4" (9.217479e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %174 = load i64, i64* %19, align 8" (7.104830e-09%)
Noelle:     Loop "  %32 = load i64, i64* %19, align 8" (7.878689e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (2.375786e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (1.070577e-06%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (6.120880e-05%)
Noelle:  Function "main"
Noelle:     Loop "  %64 = load i32, i32* %13, align 4" (2.824603e-07%)
Noelle:     Loop "  %159 = load %struct._IO_FILE*, %struct._IO_FILE** %17, align 8" (9.998562e+01%)
Noelle:     Loop "  %165 = load %struct._IO_FILE*, %struct._IO_FILE** %17, align 8" (1.100659e+01%)
Noelle:     Loop "  %189 = load i32, i32* %19, align 4" (9.217479e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %174 = load i64, i64* %19, align 8" (7.104830e-09%)
Noelle:     Loop "  %32 = load i64, i64* %19, align 8" (7.878689e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (2.375786e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (1.070577e-06%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (6.120880e-05%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-inline baseline_pre.bc "-noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier"
NOELLE: Inliner: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.hQcNUEQBRd (.ll version is /tmp/tmp.LGvWwpC4Sx)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.ito7qMgzHc (.ll version is /tmp/tmp.CLmEHRrUit)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.hQcNUEQBRd -o /tmp/tmp.ito7qMgzHc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.hQcNUEQBRd -o /tmp/tmp.ito7qMgzHc
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.hQcNUEQBRd -o /tmp/tmp.ito7qMgzHc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.hQcNUEQBRd -o /tmp/tmp.ito7qMgzHc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.hQcNUEQBRd -o /tmp/tmp.ito7qMgzHc
Inliner: Start
Inliner:   Number of program instructions = 2144
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: BF_cfb64_encrypt (426 instructions. The inlining will add 1282 instructions),   call void @BF_encrypt(i64* %93, %struct.bf_key_st* %94, i32 1)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %64 = load i32, i32* %13, align 4" (2.824603e-07%)
Noelle:     Loop "  %159 = load %struct._IO_FILE*, %struct._IO_FILE** %17, align 8" (9.998562e+01%)
Noelle:     Loop "  %165 = load %struct._IO_FILE*, %struct._IO_FILE** %17, align 8" (1.100659e+01%)
Noelle:     Loop "  %189 = load i32, i32* %19, align 4" (9.217479e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %174 = load i64, i64* %19, align 8" (7.104830e-09%)
Noelle:     Loop "  %32 = load i64, i64* %19, align 8" (7.878689e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (2.375786e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (1.070577e-06%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (6.120880e-05%)
Noelle:  Function "main"
Noelle:     Loop "  %64 = load i32, i32* %13, align 4" (1.912103e-07%)
Noelle:     Loop "  %159 = load %struct._IO_FILE*, %struct._IO_FILE** %17, align 8" (6.851342e+01%)
Noelle:     Loop "  %165 = load %struct._IO_FILE*, %struct._IO_FILE** %17, align 8" (7.450861e+00%)
Noelle:     Loop "  %189 = load i32, i32* %19, align 4" (6.239733e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (4.809584e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (5.414398e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.608278e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (7.247221e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (3.147689e+01%)
NOELLE: FixedPoint:       There are 1302 different instructions and 1295 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.ito7qMgzHc -o /tmp/tmp.ito7qMgzHc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.ito7qMgzHc -o /tmp/tmp.ito7qMgzHc
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.hQcNUEQBRd -o /tmp/tmp.ito7qMgzHc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.hQcNUEQBRd -o /tmp/tmp.ito7qMgzHc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.hQcNUEQBRd -o /tmp/tmp.ito7qMgzHc
Inliner: Start
Inliner:   Number of program instructions = 3448
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca %struct.bf_key_st*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i32, align 4
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [40 x i8], align 16
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [40 x i8], align 16
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [8 x i8], align 1
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i32, align 4
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [40 x i8], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 45
DOALL:     	  call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187)
DOALL:     	  %201 = load i32, i32* %19, align 4
DOALL:     	  %202 = add nsw i32 %201, 1
DOALL:     	  store i32 %202, i32* %19, align 4
DOALL:     	  store i32 0, i32* %13, align 4
DOALL:     	  %159 = load %struct._IO_FILE*, %struct._IO_FILE** %17, align 8
DOALL:     	  %160 = call i32 @feof(%struct._IO_FILE* %159) #10
DOALL:     	  %161 = icmp ne i32 %160, 0
DOALL:     	  %162 = xor i1 %161, true
DOALL:     	  br i1 %162, label %163, label %204, !prof !38
DOALL:     	  %165 = load %struct._IO_FILE*, %struct._IO_FILE** %17, align 8
DOALL:     	  %166 = call i32 @feof(%struct._IO_FILE* %165) #10
DOALL:     	  %167 = icmp ne i32 %166, 0
DOALL:     	  br i1 %167, label %._crit_edge10, label %168, !prof !39
DOALL:     	  %169 = load i32, i32* %13, align 4
DOALL:     	  %170 = icmp slt i32 %169, 40
DOALL:     	  %172 = phi i1 [ false, %._crit_edge10 ], [ %170, %168 ]
DOALL:     	  br i1 %172, label %173, label %181, !prof !40
DOALL:     	  %174 = load %struct._IO_FILE*, %struct._IO_FILE** %17, align 8
DOALL:     	  %175 = call i32 @getc(%struct._IO_FILE* %174)
DOALL:     	  %176 = trunc i32 %175 to i8
DOALL:     	  %177 = load i32, i32* %13, align 4
DOALL:     	  %178 = add nsw i32 %177, 1
DOALL:     	  store i32 %178, i32* %13, align 4
DOALL:     	  %179 = sext i32 %177 to i64
DOALL:     	  %180 = getelementptr inbounds [40 x i8], [40 x i8]* %8, i64 0, i64 %179
DOALL:     	  store i8 %176, i8* %180, align 1
DOALL:     	  %182 = getelementptr inbounds [40 x i8], [40 x i8]* %8, i64 0, i64 0
DOALL:     	  %183 = getelementptr inbounds [40 x i8], [40 x i8]* %9, i64 0, i64 0
DOALL:     	  %184 = load i32, i32* %13, align 4
DOALL:     	  %185 = sext i32 %184 to i64
DOALL:     	  %186 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 0
DOALL:     	  %187 = load i32, i32* %14, align 4
DOALL:     	  store i32 0, i32* %19, align 4
DOALL:     	  %189 = load i32, i32* %19, align 4
DOALL:     	  %190 = load i32, i32* %13, align 4
DOALL:     	  %191 = icmp slt i32 %189, %190
DOALL:     	  br i1 %191, label %192, label %203, !prof !40
DOALL:     	  %193 = load i32, i32* %19, align 4
DOALL:     	  %194 = sext i32 %193 to i64
DOALL:     	  %195 = getelementptr inbounds [40 x i8], [40 x i8]* %9, i64 0, i64 %194
DOALL:     	  %196 = load i8, i8* %195, align 1
DOALL:     	  %197 = zext i8 %196 to i32
DOALL:     	  %198 = load %struct._IO_FILE*, %struct._IO_FILE** %18, align 8
DOALL:     	  %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198)
DOALL:     External nodes: 8
DOALL:     	  br label %200
DOALL:     	  br label %188
DOALL:     	  br label %158
DOALL:     	  br label %164
DOALL:     	  br label %171
DOALL:     	  br label %171
DOALL:     	  br label %164
DOALL:     	  br label %188
DOALL:     Edges: 189
DOALL:     Loop-carried data dependences
DOALL:         %160 = call i32 @feof(%struct._IO_FILE* %159) #10 --->   %175 = call i32 @getc(%struct._IO_FILE* %174) via memory
DOALL:         %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) --->   %175 = call i32 @getc(%struct._IO_FILE* %174) via memory
DOALL:         call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) --->   %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) via memory
DOALL:         call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) --->   %196 = load i8, i8* %195, align 1 via memory
DOALL:         call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) --->   %166 = call i32 @feof(%struct._IO_FILE* %165) #10 via memory
DOALL:         %175 = call i32 @getc(%struct._IO_FILE* %174) --->   %175 = call i32 @getc(%struct._IO_FILE* %174) via memory
DOALL:         %175 = call i32 @getc(%struct._IO_FILE* %174) --->   %166 = call i32 @feof(%struct._IO_FILE* %165) #10 via memory
DOALL:         %175 = call i32 @getc(%struct._IO_FILE* %174) --->   %175 = call i32 @getc(%struct._IO_FILE* %174) via memory
DOALL:         %175 = call i32 @getc(%struct._IO_FILE* %174) --->   %160 = call i32 @feof(%struct._IO_FILE* %159) #10 via memory
DOALL:         %175 = call i32 @getc(%struct._IO_FILE* %174) --->   %175 = call i32 @getc(%struct._IO_FILE* %174) via memory
DOALL:         %189 = load i32, i32* %19, align 4 --->   store i32 0, i32* %19, align 4 via memory
DOALL:         store i32 0, i32* %13, align 4 --->   %184 = load i32, i32* %13, align 4 via memory
DOALL:         store i32 0, i32* %13, align 4 --->   %190 = load i32, i32* %13, align 4 via memory
DOALL:         store i32 0, i32* %13, align 4 --->   %169 = load i32, i32* %13, align 4 via memory
DOALL:         %166 = call i32 @feof(%struct._IO_FILE* %165) #10 --->   %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) via memory
DOALL:         %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) --->   %166 = call i32 @feof(%struct._IO_FILE* %165) #10 via memory
DOALL:         %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) --->   %175 = call i32 @getc(%struct._IO_FILE* %174) via memory
DOALL:         call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) --->   call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) via memory
DOALL:         call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) --->   call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) via memory
DOALL:         %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) --->   %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) via memory
DOALL:         %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) --->   call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) via memory
DOALL:         %196 = load i8, i8* %195, align 1 --->   call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) via memory
DOALL:         %166 = call i32 @feof(%struct._IO_FILE* %165) #10 --->   %175 = call i32 @getc(%struct._IO_FILE* %174) via memory
DOALL:         %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) --->   %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) via memory
DOALL:         %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) --->   %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) via memory
DOALL:         %166 = call i32 @feof(%struct._IO_FILE* %165) #10 --->   %175 = call i32 @getc(%struct._IO_FILE* %174) via memory
DOALL:         %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) --->   %160 = call i32 @feof(%struct._IO_FILE* %159) #10 via memory
DOALL:         %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) --->   %160 = call i32 @feof(%struct._IO_FILE* %159) #10 via memory
DOALL:         %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) --->   %166 = call i32 @feof(%struct._IO_FILE* %165) #10 via memory
DOALL:         %166 = call i32 @feof(%struct._IO_FILE* %165) #10 --->   %166 = call i32 @feof(%struct._IO_FILE* %165) #10 via memory
DOALL:         %175 = call i32 @getc(%struct._IO_FILE* %174) --->   call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) via memory
DOALL:         %175 = call i32 @getc(%struct._IO_FILE* %174) --->   %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) via memory
DOALL:         %160 = call i32 @feof(%struct._IO_FILE* %159) #10 --->   %160 = call i32 @feof(%struct._IO_FILE* %159) #10 via memory
DOALL:         store i32 %202, i32* %19, align 4 --->   store i32 0, i32* %19, align 4 via memory
DOALL:         %166 = call i32 @feof(%struct._IO_FILE* %165) #10 --->   %166 = call i32 @feof(%struct._IO_FILE* %165) #10 via memory
DOALL:         %175 = call i32 @getc(%struct._IO_FILE* %174) --->   %166 = call i32 @feof(%struct._IO_FILE* %165) #10 via memory
DOALL:         %160 = call i32 @feof(%struct._IO_FILE* %159) #10 --->   %160 = call i32 @feof(%struct._IO_FILE* %159) #10 via memory
DOALL:         %175 = call i32 @getc(%struct._IO_FILE* %174) --->   %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) via memory
DOALL:         %166 = call i32 @feof(%struct._IO_FILE* %165) #10 --->   %160 = call i32 @feof(%struct._IO_FILE* %159) #10 via memory
DOALL:         %175 = call i32 @getc(%struct._IO_FILE* %174) --->   %160 = call i32 @feof(%struct._IO_FILE* %159) #10 via memory
DOALL:         %160 = call i32 @feof(%struct._IO_FILE* %159) #10 --->   %166 = call i32 @feof(%struct._IO_FILE* %165) #10 via memory
DOALL:         %166 = call i32 @feof(%struct._IO_FILE* %165) #10 --->   call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) via memory
DOALL:         store i8 %176, i8* %180, align 1 --->   call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) via memory
DOALL:         store i8 %176, i8* %180, align 1 --->   store i8 %176, i8* %180, align 1 via memory
DOALL:         %166 = call i32 @feof(%struct._IO_FILE* %165) #10 --->   %166 = call i32 @feof(%struct._IO_FILE* %165) #10 via memory
DOALL:         %160 = call i32 @feof(%struct._IO_FILE* %159) #10 --->   %166 = call i32 @feof(%struct._IO_FILE* %165) #10 via memory
DOALL:         %166 = call i32 @feof(%struct._IO_FILE* %165) #10 --->   %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) via memory
DOALL:         %160 = call i32 @feof(%struct._IO_FILE* %159) #10 --->   %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) via memory
DOALL:         store i32 0, i32* %19, align 4 --->   store i32 0, i32* %19, align 4 via memory
DOALL:         %160 = call i32 @feof(%struct._IO_FILE* %159) #10 --->   %199 = call i32 @fputc(i32 %197, %struct._IO_FILE* %198) via memory
DOALL:         store i8 %176, i8* %180, align 1 --->   call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) via memory
DOALL:         %160 = call i32 @feof(%struct._IO_FILE* %159) #10 --->   %160 = call i32 @feof(%struct._IO_FILE* %159) #10 via memory
DOALL:         %166 = call i32 @feof(%struct._IO_FILE* %165) #10 --->   %160 = call i32 @feof(%struct._IO_FILE* %159) #10 via memory
DOALL:         %160 = call i32 @feof(%struct._IO_FILE* %159) #10 --->   call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) via memory
DOALL:         call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) --->   store i8 %176, i8* %180, align 1 via memory
DOALL:         call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) --->   call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) via memory
DOALL:         call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) --->   %160 = call i32 @feof(%struct._IO_FILE* %159) #10 via memory
DOALL:         call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) --->   store i8 %176, i8* %180, align 1 via memory
DOALL:         call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187) --->   %175 = call i32 @getc(%struct._IO_FILE* %174) via memory
DOALL:         %160 = call i32 @feof(%struct._IO_FILE* %159) #10 --->   %175 = call i32 @getc(%struct._IO_FILE* %174) via memory
DOALL:         store i32 0, i32* %13, align 4 --->   store i32 %178, i32* %13, align 4 via memory
DOALL:         store i32 0, i32* %13, align 4 --->   %177 = load i32, i32* %13, align 4 via memory
DOALL:         store i32 0, i32* %13, align 4 --->   store i32 0, i32* %13, align 4 via memory
Inliner:   Inlining in: main (250 instructions. The inlining will add 1730 instructions),   call void @BF_cfb64_encrypt(i8* %182, i8* %183, i64 %185, %struct.bf_key_st* %6, i8* %186, i32* %11, i32 %187)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %64 = load i32, i32* %13, align 4" (1.912103e-07%)
Noelle:     Loop "  %159 = load %struct._IO_FILE*, %struct._IO_FILE** %17, align 8" (6.851342e+01%)
Noelle:     Loop "  %165 = load %struct._IO_FILE*, %struct._IO_FILE** %17, align 8" (7.450861e+00%)
Noelle:     Loop "  %189 = load i32, i32* %19, align 4" (6.239733e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (4.809584e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (5.414398e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.608278e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (7.247221e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (3.147689e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.226067e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.476280e+01%)
Noelle:     Loop "  %188 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.777598e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.083973e-09%)
Noelle:     Loop "  %233 = load i64, i64* %21, align 8" (3.531943e+01%)
Noelle:     Loop "  %1741 = load i32, i32* %42, align 4" (4.001005e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.083973e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.471789e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.031251e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.647021e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.018343e+01%)
NOELLE: FixedPoint:       There are 1776 different instructions and 3418 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.ito7qMgzHc -o /tmp/tmp.ito7qMgzHc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.ito7qMgzHc -o /tmp/tmp.ito7qMgzHc
NOELLE: FixedPoint:     Invocation 2
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.hQcNUEQBRd -o /tmp/tmp.ito7qMgzHc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.hQcNUEQBRd -o /tmp/tmp.ito7qMgzHc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.hQcNUEQBRd -o /tmp/tmp.ito7qMgzHc
Inliner: Start
Inliner:   Number of program instructions = 5236
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca i8*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i8*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca %struct.bf_key_st*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i8*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %22 = alloca [2 x i64], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %19 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %23 = alloca i8*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %20 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %24 = alloca i8, align 1 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %21 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %25 = alloca i8, align 1 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1701
DOALL:     	  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
DOALL:     	  %183 = call i32 @feof(%struct._IO_FILE* %182) #10
DOALL:     	  %184 = icmp ne i32 %183, 0
DOALL:     	  %185 = xor i1 %184, true
DOALL:     	  br i1 %185, label %186, label %1756, !prof !38
DOALL:     	  %188 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
DOALL:     	  %189 = call i32 @feof(%struct._IO_FILE* %188) #10
DOALL:     	  %190 = icmp ne i32 %189, 0
DOALL:     	  br i1 %190, label %._crit_edge10, label %191, !prof !39
DOALL:     	  %192 = load i32, i32* %36, align 4
DOALL:     	  %193 = icmp slt i32 %192, 40
DOALL:     	  %490 = xor i64 %482, %489
DOALL:     	  %492 = load i64, i64* %6, align 8
DOALL:     	  %493 = and i64 %492, 255
DOALL:     	  %494 = add i64 768, %493
DOALL:     	  %495 = getelementptr inbounds i64, i64* %491, i64 %494
DOALL:     	  %496 = load i64, i64* %495, align 8
DOALL:     	  %497 = add i64 %490, %496
DOALL:     	  %498 = and i64 %497, 4294967295
DOALL:     	  %499 = load i64, i64* %7, align 8
DOALL:     	  %500 = xor i64 %499, %498
DOALL:     	  store i64 %500, i64* %7, align 8
DOALL:     	  %501 = load i64*, i64** %8, align 8
DOALL:     	  %502 = getelementptr inbounds i64, i64* %501, i64 6
DOALL:     	  %503 = load i64, i64* %502, align 8
DOALL:     	  %504 = load i64, i64* %6, align 8
DOALL:     	  %505 = xor i64 %504, %503
DOALL:     	  store i64 %505, i64* %6, align 8
DOALL:     	  %506 = load i64*, i64** %9, align 8
DOALL:     	  %507 = load i64, i64* %7, align 8
DOALL:     	  %508 = lshr i64 %507, 24
DOALL:     	  %509 = getelementptr inbounds i64, i64* %506, i64 %508
DOALL:     	  %510 = load i64, i64* %509, align 8
DOALL:     	  %511 = load i64*, i64** %9, align 8
DOALL:     	  %512 = load i64, i64* %7, align 8
DOALL:     	  %513 = lshr i64 %512, 16
DOALL:     	  %514 = and i64 %513, 255
DOALL:     	  %515 = add i64 256, %514
DOALL:     	  %516 = getelementptr inbounds i64, i64* %511, i64 %515
DOALL:     	  %517 = load i64, i64* %516, align 8
DOALL:     	  %518 = add i64 %510, %517
DOALL:     	  %519 = load i64*, i64** %9, align 8
DOALL:     	  %520 = load i64, i64* %7, align 8
DOALL:     	  %521 = lshr i64 %520, 8
DOALL:     	  %522 = and i64 %521, 255
DOALL:     	  %523 = add i64 512, %522
DOALL:     	  %524 = getelementptr inbounds i64, i64* %519, i64 %523
DOALL:     	  %525 = load i64, i64* %524, align 8
DOALL:     	  %527 = load i64*, i64** %9, align 8
DOALL:     	  %195 = phi i1 [ false, %._crit_edge10 ], [ %193, %191 ]
DOALL:     	  store i64* %308, i64** %9, align 8
DOALL:     	  %309 = load i64*, i64** %3, align 8
DOALL:     	  %310 = load i64, i64* %309, align 8
DOALL:     	  store i64 %310, i64* %6, align 8
DOALL:     	  %311 = load i64*, i64** %3, align 8
DOALL:     	  %312 = getelementptr inbounds i64, i64* %311, i64 1
DOALL:     	  %313 = load i64, i64* %312, align 8
DOALL:     	  store i64 %313, i64* %7, align 8
DOALL:     	  %314 = load i32, i32* %5, align 4
DOALL:     	  %315 = icmp ne i32 %314, 0
DOALL:     	  br i1 %315, label %316, label %902, !prof !43
DOALL:     	  %317 = load i64*, i64** %8, align 8
DOALL:     	  %318 = load i64, i64* %317, align 8
DOALL:     	  %319 = load i64, i64* %6, align 8
DOALL:     	  %320 = xor i64 %319, %318
DOALL:     	  store i64 %320, i64* %6, align 8
DOALL:     	  %321 = load i64*, i64** %8, align 8
DOALL:     	  %322 = getelementptr inbounds i64, i64* %321, i64 1
DOALL:     	  %323 = load i64, i64* %322, align 8
DOALL:     	  %324 = load i64, i64* %7, align 8
DOALL:     	  %325 = xor i64 %324, %323
DOALL:     	  store i64 %325, i64* %7, align 8
DOALL:     	  %326 = load i64*, i64** %9, align 8
DOALL:     	  %327 = load i64, i64* %6, align 8
DOALL:     	  %328 = lshr i64 %327, 24
DOALL:     	  %329 = getelementptr inbounds i64, i64* %326, i64 %328
DOALL:     	  %330 = load i64, i64* %329, align 8
DOALL:     	  %331 = load i64*, i64** %9, align 8
DOALL:     	  %332 = load i64, i64* %6, align 8
DOALL:     	  %333 = lshr i64 %332, 16
DOALL:     	  %334 = and i64 %333, 255
DOALL:     	  %335 = add i64 256, %334
DOALL:     	  %336 = getelementptr inbounds i64, i64* %331, i64 %335
DOALL:     	  %337 = load i64, i64* %336, align 8
DOALL:     	  %338 = add i64 %330, %337
DOALL:     	  %339 = load i64*, i64** %9, align 8
DOALL:     	  %340 = load i64, i64* %6, align 8
DOALL:     	  %341 = lshr i64 %340, 8
DOALL:     	  %342 = and i64 %341, 255
DOALL:     	  %343 = add i64 512, %342
DOALL:     	  %344 = getelementptr inbounds i64, i64* %339, i64 %343
DOALL:     	  %345 = load i64, i64* %344, align 8
DOALL:     	  %346 = xor i64 %338, %345
DOALL:     	  %347 = load i64*, i64** %9, align 8
DOALL:     	  %348 = load i64, i64* %6, align 8
DOALL:     	  %349 = and i64 %348, 255
DOALL:     	  %350 = add i64 768, %349
DOALL:     	  %351 = getelementptr inbounds i64, i64* %347, i64 %350
DOALL:     	  %352 = load i64, i64* %351, align 8
DOALL:     	  %353 = add i64 %346, %352
DOALL:     	  %354 = and i64 %353, 4294967295
DOALL:     	  %355 = load i64, i64* %7, align 8
DOALL:     	  %356 = xor i64 %355, %354
DOALL:     	  store i64 %356, i64* %7, align 8
DOALL:     	  %357 = load i64*, i64** %8, align 8
DOALL:     	  %358 = getelementptr inbounds i64, i64* %357, i64 2
DOALL:     	  %359 = load i64, i64* %358, align 8
DOALL:     	  %360 = load i64, i64* %6, align 8
DOALL:     	  %361 = xor i64 %360, %359
DOALL:     	  store i64 %361, i64* %6, align 8
DOALL:     	  %362 = load i64*, i64** %9, align 8
DOALL:     	  %363 = load i64, i64* %7, align 8
DOALL:     	  %364 = lshr i64 %363, 24
DOALL:     	  %365 = getelementptr inbounds i64, i64* %362, i64 %364
DOALL:     	  %366 = load i64, i64* %365, align 8
DOALL:     	  %367 = load i64*, i64** %9, align 8
DOALL:     	  %368 = load i64, i64* %7, align 8
DOALL:     	  %369 = lshr i64 %368, 16
DOALL:     	  %370 = and i64 %369, 255
DOALL:     	  %371 = add i64 256, %370
DOALL:     	  %372 = getelementptr inbounds i64, i64* %367, i64 %371
DOALL:     	  %373 = load i64, i64* %372, align 8
DOALL:     	  %374 = add i64 %366, %373
DOALL:     	  %375 = load i64*, i64** %9, align 8
DOALL:     	  %376 = load i64, i64* %7, align 8
DOALL:     	  store i8* %205, i8** %10, align 8
DOALL:     	  %952 = getelementptr inbounds i64, i64* %949, i64 %951
DOALL:     	  %953 = load i64, i64* %952, align 8
DOALL:     	  %954 = load i64*, i64** %9, align 8
DOALL:     	  %955 = load i64, i64* %7, align 8
DOALL:     	  %956 = lshr i64 %955, 16
DOALL:     	  %957 = and i64 %956, 255
DOALL:     	  %958 = add i64 256, %957
DOALL:     	  %959 = getelementptr inbounds i64, i64* %954, i64 %958
DOALL:     	  %960 = load i64, i64* %959, align 8
DOALL:     	  %961 = add i64 %953, %960
DOALL:     	  %962 = load i64*, i64** %9, align 8
DOALL:     	  %963 = load i64, i64* %7, align 8
DOALL:     	  %964 = lshr i64 %963, 8
DOALL:     	  %965 = and i64 %964, 255
DOALL:     	  %966 = add i64 512, %965
DOALL:     	  %967 = getelementptr inbounds i64, i64* %962, i64 %966
DOALL:     	  %968 = load i64, i64* %967, align 8
DOALL:     	  %969 = xor i64 %961, %968
DOALL:     	  %970 = load i64*, i64** %9, align 8
DOALL:     	  %971 = load i64, i64* %7, align 8
DOALL:     	  %972 = and i64 %971, 255
DOALL:     	  %973 = add i64 768, %972
DOALL:     	  %974 = getelementptr inbounds i64, i64* %970, i64 %973
DOALL:     	  %975 = load i64, i64* %974, align 8
DOALL:     	  %976 = add i64 %969, %975
DOALL:     	  %977 = and i64 %976, 4294967295
DOALL:     	  %978 = load i64, i64* %6, align 8
DOALL:     	  %979 = xor i64 %978, %977
DOALL:     	  store i64 %979, i64* %6, align 8
DOALL:     	  %980 = load i64*, i64** %8, align 8
DOALL:     	  %981 = getelementptr inbounds i64, i64* %980, i64 14
DOALL:     	  %982 = load i64, i64* %981, align 8
DOALL:     	  %983 = load i64, i64* %7, align 8
DOALL:     	  %984 = xor i64 %983, %982
DOALL:     	  store i64 %984, i64* %7, align 8
DOALL:     	  %985 = load i64*, i64** %9, align 8
DOALL:     	  %986 = load i64, i64* %6, align 8
DOALL:     	  %987 = lshr i64 %986, 24
DOALL:     	  %988 = getelementptr inbounds i64, i64* %985, i64 %987
DOALL:     	  %989 = load i64, i64* %988, align 8
DOALL:     	  %990 = load i64*, i64** %9, align 8
DOALL:     	  %991 = load i64, i64* %6, align 8
DOALL:     	  %992 = lshr i64 %991, 16
DOALL:     	  %993 = and i64 %992, 255
DOALL:     	  %994 = add i64 256, %993
DOALL:     	  %995 = getelementptr inbounds i64, i64* %990, i64 %994
DOALL:     	  %996 = load i64, i64* %995, align 8
DOALL:     	  %997 = add i64 %989, %996
DOALL:     	  %998 = load i64*, i64** %9, align 8
DOALL:     	  %999 = load i64, i64* %6, align 8
DOALL:     	  %1000 = lshr i64 %999, 8
DOALL:     	  %1001 = and i64 %1000, 255
DOALL:     	  %1002 = add i64 512, %1001
DOALL:     	  %1003 = getelementptr inbounds i64, i64* %998, i64 %1002
DOALL:     	  %1004 = load i64, i64* %1003, align 8
DOALL:     	  %1005 = xor i64 %997, %1004
DOALL:     	  %1006 = load i64*, i64** %9, align 8
DOALL:     	  %1007 = load i64, i64* %6, align 8
DOALL:     	  %1008 = and i64 %1007, 255
DOALL:     	  %1009 = add i64 768, %1008
DOALL:     	  %1010 = getelementptr inbounds i64, i64* %1006, i64 %1009
DOALL:     	  %1011 = load i64, i64* %1010, align 8
DOALL:     	  %1012 = add i64 %1005, %1011
DOALL:     	  %1013 = and i64 %1012, 4294967295
DOALL:     	  %1014 = load i64, i64* %7, align 8
DOALL:     	  %1015 = xor i64 %1014, %1013
DOALL:     	  store i64 %1015, i64* %7, align 8
DOALL:     	  %1016 = load i64*, i64** %8, align 8
DOALL:     	  %1017 = getelementptr inbounds i64, i64* %1016, i64 13
DOALL:     	  %1018 = load i64, i64* %1017, align 8
DOALL:     	  %1019 = load i64, i64* %6, align 8
DOALL:     	  %1020 = xor i64 %1019, %1018
DOALL:     	  store i64 %1020, i64* %6, align 8
DOALL:     	  %1021 = load i64*, i64** %9, align 8
DOALL:     	  %1022 = load i64, i64* %7, align 8
DOALL:     	  %1025 = load i64, i64* %1024, align 8
DOALL:     	  %455 = load i64*, i64** %9, align 8
DOALL:     	  %456 = load i64, i64* %7, align 8
DOALL:     	  %457 = and i64 %456, 255
DOALL:     	  %458 = add i64 768, %457
DOALL:     	  %459 = getelementptr inbounds i64, i64* %455, i64 %458
DOALL:     	  %460 = load i64, i64* %459, align 8
DOALL:     	  %461 = add i64 %454, %460
DOALL:     	  %462 = and i64 %461, 4294967295
DOALL:     	  %463 = load i64, i64* %6, align 8
DOALL:     	  %464 = xor i64 %463, %462
DOALL:     	  store i64 %464, i64* %6, align 8
DOALL:     	  %465 = load i64*, i64** %8, align 8
DOALL:     	  %466 = getelementptr inbounds i64, i64* %465, i64 5
DOALL:     	  %467 = load i64, i64* %466, align 8
DOALL:     	  %468 = load i64, i64* %7, align 8
DOALL:     	  %469 = xor i64 %468, %467
DOALL:     	  store i64 %469, i64* %7, align 8
DOALL:     	  %470 = load i64*, i64** %9, align 8
DOALL:     	  %471 = load i64, i64* %6, align 8
DOALL:     	  %472 = lshr i64 %471, 24
DOALL:     	  %473 = getelementptr inbounds i64, i64* %470, i64 %472
DOALL:     	  %474 = load i64, i64* %473, align 8
DOALL:     	  %475 = load i64*, i64** %9, align 8
DOALL:     	  %476 = load i64, i64* %6, align 8
DOALL:     	  %477 = lshr i64 %476, 16
DOALL:     	  %478 = and i64 %477, 255
DOALL:     	  %479 = add i64 256, %478
DOALL:     	  %480 = getelementptr inbounds i64, i64* %475, i64 %479
DOALL:     	  %481 = load i64, i64* %480, align 8
DOALL:     	  %482 = add i64 %474, %481
DOALL:     	  %483 = load i64*, i64** %9, align 8
DOALL:     	  %484 = load i64, i64* %6, align 8
DOALL:     	  %485 = lshr i64 %484, 8
DOALL:     	  %486 = and i64 %485, 255
DOALL:     	  %487 = add i64 512, %486
DOALL:     	  %488 = getelementptr inbounds i64, i64* %483, i64 %487
DOALL:     	  %489 = load i64, i64* %488, align 8
DOALL:     	  %491 = load i64*, i64** %9, align 8
DOALL:     	  br i1 %195, label %196, label %204, !prof !40
DOALL:     	  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
DOALL:     	  %198 = call i32 @getc(%struct._IO_FILE* %197)
DOALL:     	  %199 = trunc i32 %198 to i8
DOALL:     	  %200 = load i32, i32* %36, align 4
DOALL:     	  %201 = add nsw i32 %200, 1
DOALL:     	  store i32 %201, i32* %36, align 4
DOALL:     	  %202 = sext i32 %200 to i64
DOALL:     	  %203 = getelementptr inbounds [40 x i8], [40 x i8]* %31, i64 0, i64 %202
DOALL:     	  store i8 %199, i8* %203, align 1
DOALL:     	  %205 = getelementptr inbounds [40 x i8], [40 x i8]* %31, i64 0, i64 0
DOALL:     	  %206 = getelementptr inbounds [40 x i8], [40 x i8]* %32, i64 0, i64 0
DOALL:     	  %207 = load i32, i32* %36, align 4
DOALL:     	  %208 = sext i32 %207 to i64
DOALL:     	  %209 = getelementptr inbounds [8 x i8], [8 x i8]* %33, i64 0, i64 0
DOALL:     	  %210 = load i32, i32* %37, align 4
DOALL:     	  %419 = load i64*, i64** %9, align 8
DOALL:     	  %420 = load i64, i64* %6, align 8
DOALL:     	  %421 = and i64 %420, 255
DOALL:     	  %422 = add i64 768, %421
DOALL:     	  %423 = getelementptr inbounds i64, i64* %419, i64 %422
DOALL:     	  %424 = load i64, i64* %423, align 8
DOALL:     	  %425 = add i64 %418, %424
DOALL:     	  %426 = and i64 %425, 4294967295
DOALL:     	  %427 = load i64, i64* %7, align 8
DOALL:     	  %428 = xor i64 %427, %426
DOALL:     	  store i64 %428, i64* %7, align 8
DOALL:     	  %429 = load i64*, i64** %8, align 8
DOALL:     	  %430 = getelementptr inbounds i64, i64* %429, i64 4
DOALL:     	  %431 = load i64, i64* %430, align 8
DOALL:     	  %432 = load i64, i64* %6, align 8
DOALL:     	  %433 = xor i64 %432, %431
DOALL:     	  store i64 %433, i64* %6, align 8
DOALL:     	  %434 = load i64*, i64** %9, align 8
DOALL:     	  %435 = load i64, i64* %7, align 8
DOALL:     	  %436 = lshr i64 %435, 24
DOALL:     	  %437 = getelementptr inbounds i64, i64* %434, i64 %436
DOALL:     	  %438 = load i64, i64* %437, align 8
DOALL:     	  %439 = load i64*, i64** %9, align 8
DOALL:     	  %440 = load i64, i64* %7, align 8
DOALL:     	  %441 = lshr i64 %440, 16
DOALL:     	  %442 = and i64 %441, 255
DOALL:     	  %443 = add i64 256, %442
DOALL:     	  %444 = getelementptr inbounds i64, i64* %439, i64 %443
DOALL:     	  %445 = load i64, i64* %444, align 8
DOALL:     	  %446 = add i64 %438, %445
DOALL:     	  %447 = load i64*, i64** %9, align 8
DOALL:     	  %448 = load i64, i64* %7, align 8
DOALL:     	  %449 = lshr i64 %448, 8
DOALL:     	  %450 = and i64 %449, 255
DOALL:     	  %451 = add i64 512, %450
DOALL:     	  %452 = getelementptr inbounds i64, i64* %447, i64 %451
DOALL:     	  %453 = load i64, i64* %452, align 8
DOALL:     	  %454 = xor i64 %446, %453
DOALL:     	  store i8* %206, i8** %11, align 8
DOALL:     	  store i64 %208, i64* %12, align 8
DOALL:     	  store %struct.bf_key_st* %29, %struct.bf_key_st** %13, align 8
DOALL:     	  store i8* %209, i8** %14, align 8
DOALL:     	  store i32* %34, i32** %15, align 8
DOALL:     	  store i32 %210, i32* %16, align 4
DOALL:     	  %225 = load i32*, i32** %15, align 8
DOALL:     	  %226 = load i32, i32* %225, align 4
DOALL:     	  store i32 %226, i32* %20, align 4
DOALL:     	  %227 = load i64, i64* %12, align 8
DOALL:     	  store i64 %227, i64* %21, align 8
DOALL:     	  %228 = load i8*, i8** %14, align 8
DOALL:     	  store i8* %228, i8** %23, align 8
DOALL:     	  %229 = load i32, i32* %16, align 4
DOALL:     	  %230 = icmp ne i32 %229, 0
DOALL:     	  br i1 %230, label %231, label %1579, !prof !41
DOALL:     	  %233 = load i64, i64* %21, align 8
DOALL:     	  %234 = add nsw i64 %233, -1
DOALL:     	  store i64 %234, i64* %21, align 8
DOALL:     	  %235 = icmp ne i64 %233, 0
DOALL:     	  br i1 %235, label %236, label %1578, !prof !40
DOALL:     	  %237 = load i32, i32* %20, align 4
DOALL:     	  %238 = icmp eq i32 %237, 0
DOALL:     	  br i1 %238, label %239, label %._crit_edge.i, !prof !42
DOALL:     	  %240 = load i8*, i8** %23, align 8
DOALL:     	  %241 = getelementptr inbounds i8, i8* %240, i32 1
DOALL:     	  store i8* %241, i8** %23, align 8
DOALL:     	  %242 = load i8, i8* %240, align 1
DOALL:     	  %243 = zext i8 %242 to i64
DOALL:     	  %244 = shl i64 %243, 24
DOALL:     	  store i64 %244, i64* %17, align 8
DOALL:     	  %245 = load i8*, i8** %23, align 8
DOALL:     	  %246 = getelementptr inbounds i8, i8* %245, i32 1
DOALL:     	  store i8* %246, i8** %23, align 8
DOALL:     	  %247 = load i8, i8* %245, align 1
DOALL:     	  %248 = zext i8 %247 to i64
DOALL:     	  %249 = shl i64 %248, 16
DOALL:     	  %250 = load i64, i64* %17, align 8
DOALL:     	  %251 = or i64 %250, %249
DOALL:     	  store i64 %251, i64* %17, align 8
DOALL:     	  %252 = load i8*, i8** %23, align 8
DOALL:     	  %253 = getelementptr inbounds i8, i8* %252, i32 1
DOALL:     	  store i8* %253, i8** %23, align 8
DOALL:     	  %254 = load i8, i8* %252, align 1
DOALL:     	  %255 = zext i8 %254 to i64
DOALL:     	  %256 = shl i64 %255, 8
DOALL:     	  %257 = load i64, i64* %17, align 8
DOALL:     	  %258 = or i64 %257, %256
DOALL:     	  store i64 %258, i64* %17, align 8
DOALL:     	  %259 = load i8*, i8** %23, align 8
DOALL:     	  %260 = getelementptr inbounds i8, i8* %259, i32 1
DOALL:     	  store i8* %260, i8** %23, align 8
DOALL:     	  %261 = load i8, i8* %259, align 1
DOALL:     	  %262 = zext i8 %261 to i64
DOALL:     	  %263 = load i64, i64* %17, align 8
DOALL:     	  %264 = or i64 %263, %262
DOALL:     	  store i64 %264, i64* %17, align 8
DOALL:     	  %265 = load i64, i64* %17, align 8
DOALL:     	  %266 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
DOALL:     	  store i64 %265, i64* %266, align 16
DOALL:     	  %267 = load i8*, i8** %23, align 8
DOALL:     	  %268 = getelementptr inbounds i8, i8* %267, i32 1
DOALL:     	  store i8* %268, i8** %23, align 8
DOALL:     	  %269 = load i8, i8* %267, align 1
DOALL:     	  %270 = zext i8 %269 to i64
DOALL:     	  %271 = shl i64 %270, 24
DOALL:     	  store i64 %271, i64* %18, align 8
DOALL:     	  %272 = load i8*, i8** %23, align 8
DOALL:     	  %273 = getelementptr inbounds i8, i8* %272, i32 1
DOALL:     	  store i8* %273, i8** %23, align 8
DOALL:     	  %274 = load i8, i8* %272, align 1
DOALL:     	  %275 = zext i8 %274 to i64
DOALL:     	  %276 = shl i64 %275, 16
DOALL:     	  %277 = load i64, i64* %18, align 8
DOALL:     	  %278 = or i64 %277, %276
DOALL:     	  store i64 %278, i64* %18, align 8
DOALL:     	  %279 = load i8*, i8** %23, align 8
DOALL:     	  %280 = getelementptr inbounds i8, i8* %279, i32 1
DOALL:     	  store i8* %280, i8** %23, align 8
DOALL:     	  %281 = load i8, i8* %279, align 1
DOALL:     	  %282 = zext i8 %281 to i64
DOALL:     	  %283 = shl i64 %282, 8
DOALL:     	  %284 = load i64, i64* %18, align 8
DOALL:     	  %285 = or i64 %284, %283
DOALL:     	  store i64 %285, i64* %18, align 8
DOALL:     	  %286 = load i8*, i8** %23, align 8
DOALL:     	  %287 = getelementptr inbounds i8, i8* %286, i32 1
DOALL:     	  store i8* %287, i8** %23, align 8
DOALL:     	  %288 = load i8, i8* %286, align 1
DOALL:     	  %289 = zext i8 %288 to i64
DOALL:     	  %290 = load i64, i64* %18, align 8
DOALL:     	  %291 = or i64 %290, %289
DOALL:     	  store i64 %291, i64* %18, align 8
DOALL:     	  %292 = load i64, i64* %18, align 8
DOALL:     	  %293 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1
DOALL:     	  store i64 %292, i64* %293, align 8
DOALL:     	  %294 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
DOALL:     	  %295 = load %struct.bf_key_st*, %struct.bf_key_st** %13, align 8
DOALL:     	  store i64* %294, i64** %3, align 8
DOALL:     	  store %struct.bf_key_st* %295, %struct.bf_key_st** %4, align 8
DOALL:     	  store i32 1, i32* %5, align 4
DOALL:     	  %303 = load %struct.bf_key_st*, %struct.bf_key_st** %4, align 8
DOALL:     	  %304 = getelementptr inbounds %struct.bf_key_st, %struct.bf_key_st* %303, i32 0, i32 0
DOALL:     	  %305 = getelementptr inbounds [18 x i64], [18 x i64]* %304, i64 0, i64 0
DOALL:     	  store i64* %305, i64** %8, align 8
DOALL:     	  %306 = load %struct.bf_key_st*, %struct.bf_key_st** %4, align 8
DOALL:     	  %307 = getelementptr inbounds %struct.bf_key_st, %struct.bf_key_st* %306, i32 0, i32 1
DOALL:     	  %308 = getelementptr inbounds [1024 x i64], [1024 x i64]* %307, i64 0, i64 0
DOALL:     	  %694 = and i64 %693, 255
DOALL:     	  %695 = add i64 256, %694
DOALL:     	  %696 = getelementptr inbounds i64, i64* %691, i64 %695
DOALL:     	  %697 = load i64, i64* %696, align 8
DOALL:     	  %698 = add i64 %690, %697
DOALL:     	  %699 = load i64*, i64** %9, align 8
DOALL:     	  %700 = load i64, i64* %6, align 8
DOALL:     	  %701 = lshr i64 %700, 8
DOALL:     	  %702 = and i64 %701, 255
DOALL:     	  %703 = add i64 512, %702
DOALL:     	  %704 = getelementptr inbounds i64, i64* %699, i64 %703
DOALL:     	  %705 = load i64, i64* %704, align 8
DOALL:     	  %706 = xor i64 %698, %705
DOALL:     	  %707 = load i64*, i64** %9, align 8
DOALL:     	  %708 = load i64, i64* %6, align 8
DOALL:     	  %709 = and i64 %708, 255
DOALL:     	  %710 = add i64 768, %709
DOALL:     	  %711 = getelementptr inbounds i64, i64* %707, i64 %710
DOALL:     	  %712 = load i64, i64* %711, align 8
DOALL:     	  %713 = add i64 %706, %712
DOALL:     	  %714 = and i64 %713, 4294967295
DOALL:     	  %715 = load i64, i64* %7, align 8
DOALL:     	  %716 = xor i64 %715, %714
DOALL:     	  store i64 %716, i64* %7, align 8
DOALL:     	  %717 = load i64*, i64** %8, align 8
DOALL:     	  %718 = getelementptr inbounds i64, i64* %717, i64 12
DOALL:     	  %719 = load i64, i64* %718, align 8
DOALL:     	  %720 = load i64, i64* %6, align 8
DOALL:     	  %721 = xor i64 %720, %719
DOALL:     	  store i64 %721, i64* %6, align 8
DOALL:     	  %722 = load i64*, i64** %9, align 8
DOALL:     	  %723 = load i64, i64* %7, align 8
DOALL:     	  %724 = lshr i64 %723, 24
DOALL:     	  %725 = getelementptr inbounds i64, i64* %722, i64 %724
DOALL:     	  %726 = load i64, i64* %725, align 8
DOALL:     	  %727 = load i64*, i64** %9, align 8
DOALL:     	  %728 = load i64, i64* %7, align 8
DOALL:     	  %729 = lshr i64 %728, 16
DOALL:     	  %730 = and i64 %729, 255
DOALL:     	  %731 = add i64 256, %730
DOALL:     	  %732 = getelementptr inbounds i64, i64* %727, i64 %731
DOALL:     	  %733 = load i64, i64* %732, align 8
DOALL:     	  %734 = add i64 %726, %733
DOALL:     	  %735 = load i64*, i64** %9, align 8
DOALL:     	  %736 = load i64, i64* %7, align 8
DOALL:     	  %737 = lshr i64 %736, 8
DOALL:     	  %738 = and i64 %737, 255
DOALL:     	  %739 = add i64 512, %738
DOALL:     	  %740 = getelementptr inbounds i64, i64* %735, i64 %739
DOALL:     	  %741 = load i64, i64* %740, align 8
DOALL:     	  %742 = xor i64 %734, %741
DOALL:     	  %743 = load i64*, i64** %9, align 8
DOALL:     	  %744 = load i64, i64* %7, align 8
DOALL:     	  %745 = and i64 %744, 255
DOALL:     	  %746 = add i64 768, %745
DOALL:     	  %747 = getelementptr inbounds i64, i64* %743, i64 %746
DOALL:     	  %748 = load i64, i64* %747, align 8
DOALL:     	  %749 = add i64 %742, %748
DOALL:     	  %750 = and i64 %749, 4294967295
DOALL:     	  %751 = load i64, i64* %6, align 8
DOALL:     	  %752 = xor i64 %751, %750
DOALL:     	  store i64 %752, i64* %6, align 8
DOALL:     	  %753 = load i64*, i64** %8, align 8
DOALL:     	  %754 = getelementptr inbounds i64, i64* %753, i64 13
DOALL:     	  %755 = load i64, i64* %754, align 8
DOALL:     	  %756 = load i64, i64* %7, align 8
DOALL:     	  %757 = xor i64 %756, %755
DOALL:     	  store i64 %757, i64* %7, align 8
DOALL:     	  %758 = load i64*, i64** %9, align 8
DOALL:     	  %759 = load i64, i64* %6, align 8
DOALL:     	  %760 = lshr i64 %759, 24
DOALL:     	  %761 = getelementptr inbounds i64, i64* %758, i64 %760
DOALL:     	  %762 = load i64, i64* %761, align 8
DOALL:     	  %763 = load i64*, i64** %9, align 8
DOALL:     	  %764 = load i64, i64* %6, align 8
DOALL:     	  %765 = lshr i64 %764, 16
DOALL:     	  %766 = and i64 %765, 255
DOALL:     	  %767 = add i64 256, %766
DOALL:     	  %768 = getelementptr inbounds i64, i64* %763, i64 %767
DOALL:     	  %769 = load i64, i64* %768, align 8
DOALL:     	  %770 = add i64 %762, %769
DOALL:     	  %771 = load i64*, i64** %9, align 8
DOALL:     	  %772 = load i64, i64* %6, align 8
DOALL:     	  %773 = lshr i64 %772, 8
DOALL:     	  %774 = and i64 %773, 255
DOALL:     	  %775 = add i64 512, %774
DOALL:     	  %776 = getelementptr inbounds i64, i64* %771, i64 %775
DOALL:     	  %777 = load i64, i64* %776, align 8
DOALL:     	  %778 = xor i64 %770, %777
DOALL:     	  %779 = load i64*, i64** %9, align 8
DOALL:     	  %780 = load i64, i64* %6, align 8
DOALL:     	  %781 = and i64 %780, 255
DOALL:     	  %782 = add i64 768, %781
DOALL:     	  %783 = getelementptr inbounds i64, i64* %779, i64 %782
DOALL:     	  %784 = load i64, i64* %783, align 8
DOALL:     	  %785 = add i64 %778, %784
DOALL:     	  %786 = and i64 %785, 4294967295
DOALL:     	  %787 = load i64, i64* %7, align 8
DOALL:     	  %788 = xor i64 %787, %786
DOALL:     	  store i64 %788, i64* %7, align 8
DOALL:     	  %789 = load i64*, i64** %8, align 8
DOALL:     	  %790 = getelementptr inbounds i64, i64* %789, i64 14
DOALL:     	  %791 = load i64, i64* %790, align 8
DOALL:     	  %792 = load i64, i64* %6, align 8
DOALL:     	  %793 = xor i64 %792, %791
DOALL:     	  store i64 %793, i64* %6, align 8
DOALL:     	  %794 = load i64*, i64** %9, align 8
DOALL:     	  %795 = load i64, i64* %7, align 8
DOALL:     	  %796 = lshr i64 %795, 24
DOALL:     	  %797 = getelementptr inbounds i64, i64* %794, i64 %796
DOALL:     	  %798 = load i64, i64* %797, align 8
DOALL:     	  %799 = load i64*, i64** %9, align 8
DOALL:     	  %800 = load i64, i64* %7, align 8
DOALL:     	  %801 = lshr i64 %800, 16
DOALL:     	  %802 = and i64 %801, 255
DOALL:     	  %803 = add i64 256, %802
DOALL:     	  %804 = getelementptr inbounds i64, i64* %799, i64 %803
DOALL:     	  %805 = load i64, i64* %804, align 8
DOALL:     	  %806 = add i64 %798, %805
DOALL:     	  %807 = load i64*, i64** %9, align 8
DOALL:     	  %808 = load i64, i64* %7, align 8
DOALL:     	  %809 = lshr i64 %808, 8
DOALL:     	  %810 = and i64 %809, 255
DOALL:     	  %811 = add i64 512, %810
DOALL:     	  %812 = getelementptr inbounds i64, i64* %807, i64 %811
DOALL:     	  %813 = load i64, i64* %812, align 8
DOALL:     	  %814 = xor i64 %806, %813
DOALL:     	  %815 = load i64*, i64** %9, align 8
DOALL:     	  %816 = load i64, i64* %7, align 8
DOALL:     	  %817 = and i64 %816, 255
DOALL:     	  %818 = add i64 768, %817
DOALL:     	  %819 = getelementptr inbounds i64, i64* %815, i64 %818
DOALL:     	  %820 = load i64, i64* %819, align 8
DOALL:     	  %821 = add i64 %814, %820
DOALL:     	  %822 = and i64 %821, 4294967295
DOALL:     	  %823 = load i64, i64* %6, align 8
DOALL:     	  %824 = xor i64 %823, %822
DOALL:     	  store i64 %824, i64* %6, align 8
DOALL:     	  %825 = load i64*, i64** %8, align 8
DOALL:     	  %826 = getelementptr inbounds i64, i64* %825, i64 15
DOALL:     	  %827 = load i64, i64* %826, align 8
DOALL:     	  %828 = load i64, i64* %7, align 8
DOALL:     	  %829 = xor i64 %828, %827
DOALL:     	  store i64 %829, i64* %7, align 8
DOALL:     	  %830 = load i64*, i64** %9, align 8
DOALL:     	  %831 = load i64, i64* %6, align 8
DOALL:     	  %832 = lshr i64 %831, 24
DOALL:     	  %833 = getelementptr inbounds i64, i64* %830, i64 %832
DOALL:     	  %834 = load i64, i64* %833, align 8
DOALL:     	  %835 = load i64*, i64** %9, align 8
DOALL:     	  %836 = load i64, i64* %6, align 8
DOALL:     	  %377 = lshr i64 %376, 8
DOALL:     	  %378 = and i64 %377, 255
DOALL:     	  %379 = add i64 512, %378
DOALL:     	  %380 = getelementptr inbounds i64, i64* %375, i64 %379
DOALL:     	  %381 = load i64, i64* %380, align 8
DOALL:     	  %382 = xor i64 %374, %381
DOALL:     	  %383 = load i64*, i64** %9, align 8
DOALL:     	  %384 = load i64, i64* %7, align 8
DOALL:     	  %385 = and i64 %384, 255
DOALL:     	  %386 = add i64 768, %385
DOALL:     	  %387 = getelementptr inbounds i64, i64* %383, i64 %386
DOALL:     	  %388 = load i64, i64* %387, align 8
DOALL:     	  %389 = add i64 %382, %388
DOALL:     	  %390 = and i64 %389, 4294967295
DOALL:     	  %391 = load i64, i64* %6, align 8
DOALL:     	  %392 = xor i64 %391, %390
DOALL:     	  store i64 %392, i64* %6, align 8
DOALL:     	  %393 = load i64*, i64** %8, align 8
DOALL:     	  %394 = getelementptr inbounds i64, i64* %393, i64 3
DOALL:     	  %395 = load i64, i64* %394, align 8
DOALL:     	  %396 = load i64, i64* %7, align 8
DOALL:     	  %397 = xor i64 %396, %395
DOALL:     	  store i64 %397, i64* %7, align 8
DOALL:     	  %398 = load i64*, i64** %9, align 8
DOALL:     	  %399 = load i64, i64* %6, align 8
DOALL:     	  %400 = lshr i64 %399, 24
DOALL:     	  %401 = getelementptr inbounds i64, i64* %398, i64 %400
DOALL:     	  %402 = load i64, i64* %401, align 8
DOALL:     	  %403 = load i64*, i64** %9, align 8
DOALL:     	  %404 = load i64, i64* %6, align 8
DOALL:     	  %405 = lshr i64 %404, 16
DOALL:     	  %406 = and i64 %405, 255
DOALL:     	  %407 = add i64 256, %406
DOALL:     	  %408 = getelementptr inbounds i64, i64* %403, i64 %407
DOALL:     	  %409 = load i64, i64* %408, align 8
DOALL:     	  %410 = add i64 %402, %409
DOALL:     	  %411 = load i64*, i64** %9, align 8
DOALL:     	  %412 = load i64, i64* %6, align 8
DOALL:     	  %413 = lshr i64 %412, 8
DOALL:     	  %414 = and i64 %413, 255
DOALL:     	  %415 = add i64 512, %414
DOALL:     	  %416 = getelementptr inbounds i64, i64* %411, i64 %415
DOALL:     	  %417 = load i64, i64* %416, align 8
DOALL:     	  %418 = xor i64 %410, %417
DOALL:     	  %910 = load i64, i64* %909, align 8
DOALL:     	  %911 = load i64, i64* %7, align 8
DOALL:     	  %912 = xor i64 %911, %910
DOALL:     	  store i64 %912, i64* %7, align 8
DOALL:     	  %913 = load i64*, i64** %9, align 8
DOALL:     	  %914 = load i64, i64* %6, align 8
DOALL:     	  %915 = lshr i64 %914, 24
DOALL:     	  %916 = getelementptr inbounds i64, i64* %913, i64 %915
DOALL:     	  %917 = load i64, i64* %916, align 8
DOALL:     	  %918 = load i64*, i64** %9, align 8
DOALL:     	  %919 = load i64, i64* %6, align 8
DOALL:     	  %920 = lshr i64 %919, 16
DOALL:     	  %921 = and i64 %920, 255
DOALL:     	  %922 = add i64 256, %921
DOALL:     	  %923 = getelementptr inbounds i64, i64* %918, i64 %922
DOALL:     	  %924 = load i64, i64* %923, align 8
DOALL:     	  %925 = add i64 %917, %924
DOALL:     	  %926 = load i64*, i64** %9, align 8
DOALL:     	  %927 = load i64, i64* %6, align 8
DOALL:     	  %928 = lshr i64 %927, 8
DOALL:     	  %929 = and i64 %928, 255
DOALL:     	  %930 = add i64 512, %929
DOALL:     	  %931 = getelementptr inbounds i64, i64* %926, i64 %930
DOALL:     	  %932 = load i64, i64* %931, align 8
DOALL:     	  %933 = xor i64 %925, %932
DOALL:     	  %934 = load i64*, i64** %9, align 8
DOALL:     	  %935 = load i64, i64* %6, align 8
DOALL:     	  %936 = and i64 %935, 255
DOALL:     	  %937 = add i64 768, %936
DOALL:     	  %938 = getelementptr inbounds i64, i64* %934, i64 %937
DOALL:     	  %939 = load i64, i64* %938, align 8
DOALL:     	  %940 = add i64 %933, %939
DOALL:     	  %941 = and i64 %940, 4294967295
DOALL:     	  %942 = load i64, i64* %7, align 8
DOALL:     	  %943 = xor i64 %942, %941
DOALL:     	  store i64 %943, i64* %7, align 8
DOALL:     	  %944 = load i64*, i64** %8, align 8
DOALL:     	  %945 = getelementptr inbounds i64, i64* %944, i64 15
DOALL:     	  %946 = load i64, i64* %945, align 8
DOALL:     	  %947 = load i64, i64* %6, align 8
DOALL:     	  %948 = xor i64 %947, %946
DOALL:     	  store i64 %948, i64* %6, align 8
DOALL:     	  %949 = load i64*, i64** %9, align 8
DOALL:     	  %950 = load i64, i64* %7, align 8
DOALL:     	  %951 = lshr i64 %950, 24
DOALL:     	  %1023 = lshr i64 %1022, 24
DOALL:     	  %1024 = getelementptr inbounds i64, i64* %1021, i64 %1023
DOALL:     	  %1026 = load i64*, i64** %9, align 8
DOALL:     	  %1027 = load i64, i64* %7, align 8
DOALL:     	  %1028 = lshr i64 %1027, 16
DOALL:     	  %1029 = and i64 %1028, 255
DOALL:     	  %1030 = add i64 256, %1029
DOALL:     	  %1031 = getelementptr inbounds i64, i64* %1026, i64 %1030
DOALL:     	  %1032 = load i64, i64* %1031, align 8
DOALL:     	  %1033 = add i64 %1025, %1032
DOALL:     	  %1034 = load i64*, i64** %9, align 8
DOALL:     	  %1035 = load i64, i64* %7, align 8
DOALL:     	  %1036 = lshr i64 %1035, 8
DOALL:     	  %1037 = and i64 %1036, 255
DOALL:     	  %1038 = add i64 512, %1037
DOALL:     	  %1039 = getelementptr inbounds i64, i64* %1034, i64 %1038
DOALL:     	  %1040 = load i64, i64* %1039, align 8
DOALL:     	  %1041 = xor i64 %1033, %1040
DOALL:     	  %1042 = load i64*, i64** %9, align 8
DOALL:     	  %1043 = load i64, i64* %7, align 8
DOALL:     	  %1044 = and i64 %1043, 255
DOALL:     	  %1045 = add i64 768, %1044
DOALL:     	  %1046 = getelementptr inbounds i64, i64* %1042, i64 %1045
DOALL:     	  %1047 = load i64, i64* %1046, align 8
DOALL:     	  %1048 = add i64 %1041, %1047
DOALL:     	  %1049 = and i64 %1048, 4294967295
DOALL:     	  %1050 = load i64, i64* %6, align 8
DOALL:     	  %1051 = xor i64 %1050, %1049
DOALL:     	  store i64 %1051, i64* %6, align 8
DOALL:     	  %1052 = load i64*, i64** %8, align 8
DOALL:     	  %1053 = getelementptr inbounds i64, i64* %1052, i64 12
DOALL:     	  %1054 = load i64, i64* %1053, align 8
DOALL:     	  %1055 = load i64, i64* %7, align 8
DOALL:     	  %1056 = xor i64 %1055, %1054
DOALL:     	  store i64 %1056, i64* %7, align 8
DOALL:     	  %1057 = load i64*, i64** %9, align 8
DOALL:     	  %1058 = load i64, i64* %6, align 8
DOALL:     	  %1059 = lshr i64 %1058, 24
DOALL:     	  %1060 = getelementptr inbounds i64, i64* %1057, i64 %1059
DOALL:     	  %1061 = load i64, i64* %1060, align 8
DOALL:     	  %1062 = load i64*, i64** %9, align 8
DOALL:     	  %1063 = load i64, i64* %6, align 8
DOALL:     	  %1064 = lshr i64 %1063, 16
DOALL:     	  %1065 = and i64 %1064, 255
DOALL:     	  %1066 = add i64 256, %1065
DOALL:     	  %1067 = getelementptr inbounds i64, i64* %1062, i64 %1066
DOALL:     	  %1068 = load i64, i64* %1067, align 8
DOALL:     	  %1069 = add i64 %1061, %1068
DOALL:     	  %1070 = load i64*, i64** %9, align 8
DOALL:     	  %1071 = load i64, i64* %6, align 8
DOALL:     	  %1072 = lshr i64 %1071, 8
DOALL:     	  %1073 = and i64 %1072, 255
DOALL:     	  %1074 = add i64 512, %1073
DOALL:     	  %1075 = getelementptr inbounds i64, i64* %1070, i64 %1074
DOALL:     	  %1076 = load i64, i64* %1075, align 8
DOALL:     	  %1077 = xor i64 %1069, %1076
DOALL:     	  %1078 = load i64*, i64** %9, align 8
DOALL:     	  %1079 = load i64, i64* %6, align 8
DOALL:     	  %1080 = and i64 %1079, 255
DOALL:     	  %1081 = add i64 768, %1080
DOALL:     	  %1082 = getelementptr inbounds i64, i64* %1078, i64 %1081
DOALL:     	  %1083 = load i64, i64* %1082, align 8
DOALL:     	  %1084 = add i64 %1077, %1083
DOALL:     	  %1085 = and i64 %1084, 4294967295
DOALL:     	  %1086 = load i64, i64* %7, align 8
DOALL:     	  %1087 = xor i64 %1086, %1085
DOALL:     	  store i64 %1087, i64* %7, align 8
DOALL:     	  %1088 = load i64*, i64** %8, align 8
DOALL:     	  %1089 = getelementptr inbounds i64, i64* %1088, i64 11
DOALL:     	  %1090 = load i64, i64* %1089, align 8
DOALL:     	  %1091 = load i64, i64* %6, align 8
DOALL:     	  %1092 = xor i64 %1091, %1090
DOALL:     	  store i64 %1092, i64* %6, align 8
DOALL:     	  %1093 = load i64*, i64** %9, align 8
DOALL:     	  %1094 = load i64, i64* %7, align 8
DOALL:     	  %1095 = lshr i64 %1094, 24
DOALL:     	  %1096 = getelementptr inbounds i64, i64* %1093, i64 %1095
DOALL:     	  %1097 = load i64, i64* %1096, align 8
DOALL:     	  %1098 = load i64*, i64** %9, align 8
DOALL:     	  %1099 = load i64, i64* %7, align 8
DOALL:     	  %1100 = lshr i64 %1099, 16
DOALL:     	  %1101 = and i64 %1100, 255
DOALL:     	  %1102 = add i64 256, %1101
DOALL:     	  %1103 = getelementptr inbounds i64, i64* %1098, i64 %1102
DOALL:     	  %1104 = load i64, i64* %1103, align 8
DOALL:     	  %1105 = add i64 %1097, %1104
DOALL:     	  %1106 = load i64*, i64** %9, align 8
DOALL:     	  %1107 = load i64, i64* %7, align 8
DOALL:     	  %1108 = lshr i64 %1107, 8
DOALL:     	  %1109 = and i64 %1108, 255
DOALL:     	  %1110 = add i64 512, %1109
DOALL:     	  %1111 = getelementptr inbounds i64, i64* %1106, i64 %1110
DOALL:     	  %1112 = load i64, i64* %1111, align 8
DOALL:     	  %1113 = xor i64 %1105, %1112
DOALL:     	  %1114 = load i64*, i64** %9, align 8
DOALL:     	  %1115 = load i64, i64* %7, align 8
DOALL:     	  %1116 = and i64 %1115, 255
DOALL:     	  %1117 = add i64 768, %1116
DOALL:     	  %1118 = getelementptr inbounds i64, i64* %1114, i64 %1117
DOALL:     	  %1119 = load i64, i64* %1118, align 8
DOALL:     	  %1120 = add i64 %1113, %1119
DOALL:     	  %1121 = and i64 %1120, 4294967295
DOALL:     	  %1122 = load i64, i64* %6, align 8
DOALL:     	  %1123 = xor i64 %1122, %1121
DOALL:     	  store i64 %1123, i64* %6, align 8
DOALL:     	  %1124 = load i64*, i64** %8, align 8
DOALL:     	  %1125 = getelementptr inbounds i64, i64* %1124, i64 10
DOALL:     	  %526 = xor i64 %518, %525
DOALL:     	  %528 = load i64, i64* %7, align 8
DOALL:     	  %529 = and i64 %528, 255
DOALL:     	  %530 = add i64 768, %529
DOALL:     	  %531 = getelementptr inbounds i64, i64* %527, i64 %530
DOALL:     	  %532 = load i64, i64* %531, align 8
DOALL:     	  %533 = add i64 %526, %532
DOALL:     	  %534 = and i64 %533, 4294967295
DOALL:     	  %535 = load i64, i64* %6, align 8
DOALL:     	  %536 = xor i64 %535, %534
DOALL:     	  store i64 %536, i64* %6, align 8
DOALL:     	  %537 = load i64*, i64** %8, align 8
DOALL:     	  %538 = getelementptr inbounds i64, i64* %537, i64 7
DOALL:     	  %539 = load i64, i64* %538, align 8
DOALL:     	  %540 = load i64, i64* %7, align 8
DOALL:     	  %541 = xor i64 %540, %539
DOALL:     	  store i64 %541, i64* %7, align 8
DOALL:     	  %542 = load i64*, i64** %9, align 8
DOALL:     	  %543 = load i64, i64* %6, align 8
DOALL:     	  %544 = lshr i64 %543, 24
DOALL:     	  %545 = getelementptr inbounds i64, i64* %542, i64 %544
DOALL:     	  %546 = load i64, i64* %545, align 8
DOALL:     	  %547 = load i64*, i64** %9, align 8
DOALL:     	  %548 = load i64, i64* %6, align 8
DOALL:     	  %549 = lshr i64 %548, 16
DOALL:     	  %550 = and i64 %549, 255
DOALL:     	  %551 = add i64 256, %550
DOALL:     	  %552 = getelementptr inbounds i64, i64* %547, i64 %551
DOALL:     	  %553 = load i64, i64* %552, align 8
DOALL:     	  %554 = add i64 %546, %553
DOALL:     	  %555 = load i64*, i64** %9, align 8
DOALL:     	  %556 = load i64, i64* %6, align 8
DOALL:     	  %557 = lshr i64 %556, 8
DOALL:     	  %558 = and i64 %557, 255
DOALL:     	  %559 = add i64 512, %558
DOALL:     	  %560 = getelementptr inbounds i64, i64* %555, i64 %559
DOALL:     	  %561 = load i64, i64* %560, align 8
DOALL:     	  %562 = xor i64 %554, %561
DOALL:     	  %563 = load i64*, i64** %9, align 8
DOALL:     	  %564 = load i64, i64* %6, align 8
DOALL:     	  %565 = and i64 %564, 255
DOALL:     	  %566 = add i64 768, %565
DOALL:     	  %567 = getelementptr inbounds i64, i64* %563, i64 %566
DOALL:     	  %568 = load i64, i64* %567, align 8
DOALL:     	  %569 = add i64 %562, %568
DOALL:     	  %570 = and i64 %569, 4294967295
DOALL:     	  %571 = load i64, i64* %7, align 8
DOALL:     	  %572 = xor i64 %571, %570
DOALL:     	  store i64 %572, i64* %7, align 8
DOALL:     	  %573 = load i64*, i64** %8, align 8
DOALL:     	  %574 = getelementptr inbounds i64, i64* %573, i64 8
DOALL:     	  %575 = load i64, i64* %574, align 8
DOALL:     	  %576 = load i64, i64* %6, align 8
DOALL:     	  %577 = xor i64 %576, %575
DOALL:     	  store i64 %577, i64* %6, align 8
DOALL:     	  %578 = load i64*, i64** %9, align 8
DOALL:     	  %579 = load i64, i64* %7, align 8
DOALL:     	  %580 = lshr i64 %579, 24
DOALL:     	  %581 = getelementptr inbounds i64, i64* %578, i64 %580
DOALL:     	  %582 = load i64, i64* %581, align 8
DOALL:     	  %583 = load i64*, i64** %9, align 8
DOALL:     	  %584 = load i64, i64* %7, align 8
DOALL:     	  %585 = lshr i64 %584, 16
DOALL:     	  %586 = and i64 %585, 255
DOALL:     	  %587 = add i64 256, %586
DOALL:     	  %588 = getelementptr inbounds i64, i64* %583, i64 %587
DOALL:     	  %589 = load i64, i64* %588, align 8
DOALL:     	  %590 = add i64 %582, %589
DOALL:     	  %591 = load i64*, i64** %9, align 8
DOALL:     	  %592 = load i64, i64* %7, align 8
DOALL:     	  %593 = lshr i64 %592, 8
DOALL:     	  %594 = and i64 %593, 255
DOALL:     	  %595 = add i64 512, %594
DOALL:     	  %596 = getelementptr inbounds i64, i64* %591, i64 %595
DOALL:     	  %597 = load i64, i64* %596, align 8
DOALL:     	  %598 = xor i64 %590, %597
DOALL:     	  %599 = load i64*, i64** %9, align 8
DOALL:     	  %600 = load i64, i64* %7, align 8
DOALL:     	  %601 = and i64 %600, 255
DOALL:     	  %602 = add i64 768, %601
DOALL:     	  %603 = getelementptr inbounds i64, i64* %599, i64 %602
DOALL:     	  %604 = load i64, i64* %603, align 8
DOALL:     	  %605 = add i64 %598, %604
DOALL:     	  %606 = and i64 %605, 4294967295
DOALL:     	  %607 = load i64, i64* %6, align 8
DOALL:     	  %608 = xor i64 %607, %606
DOALL:     	  store i64 %608, i64* %6, align 8
DOALL:     	  %609 = load i64*, i64** %8, align 8
DOALL:     	  %610 = getelementptr inbounds i64, i64* %609, i64 9
DOALL:     	  %611 = load i64, i64* %610, align 8
DOALL:     	  %612 = load i64, i64* %7, align 8
DOALL:     	  %613 = xor i64 %612, %611
DOALL:     	  store i64 %613, i64* %7, align 8
DOALL:     	  %614 = load i64*, i64** %9, align 8
DOALL:     	  %615 = load i64, i64* %6, align 8
DOALL:     	  %616 = lshr i64 %615, 24
DOALL:     	  %617 = getelementptr inbounds i64, i64* %614, i64 %616
DOALL:     	  %618 = load i64, i64* %617, align 8
DOALL:     	  %619 = load i64*, i64** %9, align 8
DOALL:     	  %620 = load i64, i64* %6, align 8
DOALL:     	  %621 = lshr i64 %620, 16
DOALL:     	  %622 = and i64 %621, 255
DOALL:     	  %623 = add i64 256, %622
DOALL:     	  %624 = getelementptr inbounds i64, i64* %619, i64 %623
DOALL:     	  %625 = load i64, i64* %624, align 8
DOALL:     	  %626 = add i64 %618, %625
DOALL:     	  %627 = load i64*, i64** %9, align 8
DOALL:     	  %628 = load i64, i64* %6, align 8
DOALL:     	  %629 = lshr i64 %628, 8
DOALL:     	  %630 = and i64 %629, 255
DOALL:     	  %631 = add i64 512, %630
DOALL:     	  %632 = getelementptr inbounds i64, i64* %627, i64 %631
DOALL:     	  %633 = load i64, i64* %632, align 8
DOALL:     	  %634 = xor i64 %626, %633
DOALL:     	  %635 = load i64*, i64** %9, align 8
DOALL:     	  %636 = load i64, i64* %6, align 8
DOALL:     	  %637 = and i64 %636, 255
DOALL:     	  %638 = add i64 768, %637
DOALL:     	  %639 = getelementptr inbounds i64, i64* %635, i64 %638
DOALL:     	  %640 = load i64, i64* %639, align 8
DOALL:     	  %641 = add i64 %634, %640
DOALL:     	  %642 = and i64 %641, 4294967295
DOALL:     	  %643 = load i64, i64* %7, align 8
DOALL:     	  %644 = xor i64 %643, %642
DOALL:     	  store i64 %644, i64* %7, align 8
DOALL:     	  %645 = load i64*, i64** %8, align 8
DOALL:     	  %646 = getelementptr inbounds i64, i64* %645, i64 10
DOALL:     	  %647 = load i64, i64* %646, align 8
DOALL:     	  %648 = load i64, i64* %6, align 8
DOALL:     	  %649 = xor i64 %648, %647
DOALL:     	  store i64 %649, i64* %6, align 8
DOALL:     	  %650 = load i64*, i64** %9, align 8
DOALL:     	  %651 = load i64, i64* %7, align 8
DOALL:     	  %652 = lshr i64 %651, 24
DOALL:     	  %653 = getelementptr inbounds i64, i64* %650, i64 %652
DOALL:     	  %654 = load i64, i64* %653, align 8
DOALL:     	  %655 = load i64*, i64** %9, align 8
DOALL:     	  %656 = load i64, i64* %7, align 8
DOALL:     	  %657 = lshr i64 %656, 16
DOALL:     	  %658 = and i64 %657, 255
DOALL:     	  %659 = add i64 256, %658
DOALL:     	  %660 = getelementptr inbounds i64, i64* %655, i64 %659
DOALL:     	  %661 = load i64, i64* %660, align 8
DOALL:     	  %662 = add i64 %654, %661
DOALL:     	  %663 = load i64*, i64** %9, align 8
DOALL:     	  %664 = load i64, i64* %7, align 8
DOALL:     	  %665 = lshr i64 %664, 8
DOALL:     	  %666 = and i64 %665, 255
DOALL:     	  %667 = add i64 512, %666
DOALL:     	  %668 = getelementptr inbounds i64, i64* %663, i64 %667
DOALL:     	  %669 = load i64, i64* %668, align 8
DOALL:     	  %670 = xor i64 %662, %669
DOALL:     	  %671 = load i64*, i64** %9, align 8
DOALL:     	  %672 = load i64, i64* %7, align 8
DOALL:     	  %673 = and i64 %672, 255
DOALL:     	  %674 = add i64 768, %673
DOALL:     	  %675 = getelementptr inbounds i64, i64* %671, i64 %674
DOALL:     	  %676 = load i64, i64* %675, align 8
DOALL:     	  %677 = add i64 %670, %676
DOALL:     	  %678 = and i64 %677, 4294967295
DOALL:     	  %679 = load i64, i64* %6, align 8
DOALL:     	  %680 = xor i64 %679, %678
DOALL:     	  store i64 %680, i64* %6, align 8
DOALL:     	  %681 = load i64*, i64** %8, align 8
DOALL:     	  %682 = getelementptr inbounds i64, i64* %681, i64 11
DOALL:     	  %683 = load i64, i64* %682, align 8
DOALL:     	  %684 = load i64, i64* %7, align 8
DOALL:     	  %685 = xor i64 %684, %683
DOALL:     	  store i64 %685, i64* %7, align 8
DOALL:     	  %686 = load i64*, i64** %9, align 8
DOALL:     	  %687 = load i64, i64* %6, align 8
DOALL:     	  %688 = lshr i64 %687, 24
DOALL:     	  %689 = getelementptr inbounds i64, i64* %686, i64 %688
DOALL:     	  %690 = load i64, i64* %689, align 8
DOALL:     	  %691 = load i64*, i64** %9, align 8
DOALL:     	  %692 = load i64, i64* %6, align 8
DOALL:     	  %693 = lshr i64 %692, 16
DOALL:     	  %1463 = getelementptr inbounds i64, i64* %1458, i64 %1462
DOALL:     	  %1464 = load i64, i64* %1463, align 8
DOALL:     	  %1465 = add i64 %1457, %1464
DOALL:     	  %1466 = load i64*, i64** %9, align 8
DOALL:     	  %1467 = load i64, i64* %7, align 8
DOALL:     	  %1468 = lshr i64 %1467, 8
DOALL:     	  %1469 = and i64 %1468, 255
DOALL:     	  %1470 = add i64 512, %1469
DOALL:     	  %1471 = getelementptr inbounds i64, i64* %1466, i64 %1470
DOALL:     	  %1472 = load i64, i64* %1471, align 8
DOALL:     	  %1473 = xor i64 %1465, %1472
DOALL:     	  %1474 = load i64*, i64** %9, align 8
DOALL:     	  %1475 = load i64, i64* %7, align 8
DOALL:     	  %1476 = and i64 %1475, 255
DOALL:     	  %1477 = add i64 768, %1476
DOALL:     	  %1478 = getelementptr inbounds i64, i64* %1474, i64 %1477
DOALL:     	  %1479 = load i64, i64* %1478, align 8
DOALL:     	  %1480 = add i64 %1473, %1479
DOALL:     	  %1481 = and i64 %1480, 4294967295
DOALL:     	  %1482 = load i64, i64* %6, align 8
DOALL:     	  %1483 = xor i64 %1482, %1481
DOALL:     	  store i64 %1483, i64* %6, align 8
DOALL:     	  %1484 = load i64*, i64** %8, align 8
DOALL:     	  %1485 = load i64, i64* %1484, align 8
DOALL:     	  %1486 = load i64, i64* %7, align 8
DOALL:     	  %1487 = xor i64 %1486, %1485
DOALL:     	  store i64 %1487, i64* %7, align 8
DOALL:     	  %1488 = load i64, i64* %6, align 8
DOALL:     	  %1489 = and i64 %1488, 4294967295
DOALL:     	  %1490 = load i64*, i64** %3, align 8
DOALL:     	  %1491 = getelementptr inbounds i64, i64* %1490, i64 1
DOALL:     	  store i64 %1489, i64* %1491, align 8
DOALL:     	  %1492 = load i64, i64* %7, align 8
DOALL:     	  %1493 = and i64 %1492, 4294967295
DOALL:     	  %1494 = load i64*, i64** %3, align 8
DOALL:     	  store i64 %1493, i64* %1494, align 8
DOALL:     	  %1502 = load i8*, i8** %14, align 8
DOALL:     	  store i8* %1502, i8** %23, align 8
DOALL:     	  %1503 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
DOALL:     	  %1504 = load i64, i64* %1503, align 16
DOALL:     	  store i64 %1504, i64* %19, align 8
DOALL:     	  %1505 = load i64, i64* %19, align 8
DOALL:     	  %1506 = lshr i64 %1505, 24
DOALL:     	  %1507 = and i64 %1506, 255
DOALL:     	  %1508 = trunc i64 %1507 to i8
DOALL:     	  %1509 = load i8*, i8** %23, align 8
DOALL:     	  %1510 = getelementptr inbounds i8, i8* %1509, i32 1
DOALL:     	  store i8* %1510, i8** %23, align 8
DOALL:     	  store i8 %1508, i8* %1509, align 1
DOALL:     	  %1511 = load i64, i64* %19, align 8
DOALL:     	  %1512 = lshr i64 %1511, 16
DOALL:     	  %1513 = and i64 %1512, 255
DOALL:     	  %1514 = trunc i64 %1513 to i8
DOALL:     	  %1515 = load i8*, i8** %23, align 8
DOALL:     	  %1516 = getelementptr inbounds i8, i8* %1515, i32 1
DOALL:     	  store i8* %1516, i8** %23, align 8
DOALL:     	  store i8 %1514, i8* %1515, align 1
DOALL:     	  %1517 = load i64, i64* %19, align 8
DOALL:     	  %1518 = lshr i64 %1517, 8
DOALL:     	  %1519 = and i64 %1518, 255
DOALL:     	  %1520 = trunc i64 %1519 to i8
DOALL:     	  %1521 = load i8*, i8** %23, align 8
DOALL:     	  %1522 = getelementptr inbounds i8, i8* %1521, i32 1
DOALL:     	  store i8* %1522, i8** %23, align 8
DOALL:     	  store i8 %1520, i8* %1521, align 1
DOALL:     	  %1523 = load i64, i64* %19, align 8
DOALL:     	  %1524 = and i64 %1523, 255
DOALL:     	  %1525 = trunc i64 %1524 to i8
DOALL:     	  %1526 = load i8*, i8** %23, align 8
DOALL:     	  %1527 = getelementptr inbounds i8, i8* %1526, i32 1
DOALL:     	  store i8* %1527, i8** %23, align 8
DOALL:     	  store i8 %1525, i8* %1526, align 1
DOALL:     	  %1528 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1
DOALL:     	  %1529 = load i64, i64* %1528, align 8
DOALL:     	  store i64 %1529, i64* %19, align 8
DOALL:     	  %1530 = load i64, i64* %19, align 8
DOALL:     	  %1531 = lshr i64 %1530, 24
DOALL:     	  %1532 = and i64 %1531, 255
DOALL:     	  %1533 = trunc i64 %1532 to i8
DOALL:     	  %1534 = load i8*, i8** %23, align 8
DOALL:     	  %1535 = getelementptr inbounds i8, i8* %1534, i32 1
DOALL:     	  store i8* %1535, i8** %23, align 8
DOALL:     	  store i8 %1533, i8* %1534, align 1
DOALL:     	  %1536 = load i64, i64* %19, align 8
DOALL:     	  %1537 = lshr i64 %1536, 16
DOALL:     	  %1538 = and i64 %1537, 255
DOALL:     	  %1539 = trunc i64 %1538 to i8
DOALL:     	  %1540 = load i8*, i8** %23, align 8
DOALL:     	  %1541 = getelementptr inbounds i8, i8* %1540, i32 1
DOALL:     	  store i8* %1541, i8** %23, align 8
DOALL:     	  store i8 %1539, i8* %1540, align 1
DOALL:     	  %1542 = load i64, i64* %19, align 8
DOALL:     	  %1543 = lshr i64 %1542, 8
DOALL:     	  %1544 = and i64 %1543, 255
DOALL:     	  %1545 = trunc i64 %1544 to i8
DOALL:     	  %1546 = load i8*, i8** %23, align 8
DOALL:     	  %1547 = getelementptr inbounds i8, i8* %1546, i32 1
DOALL:     	  store i8* %1547, i8** %23, align 8
DOALL:     	  store i8 %1545, i8* %1546, align 1
DOALL:     	  %1548 = load i64, i64* %19, align 8
DOALL:     	  %1549 = and i64 %1548, 255
DOALL:     	  %1550 = trunc i64 %1549 to i8
DOALL:     	  %1551 = load i8*, i8** %23, align 8
DOALL:     	  %1552 = getelementptr inbounds i8, i8* %1551, i32 1
DOALL:     	  store i8* %1552, i8** %23, align 8
DOALL:     	  store i8 %1550, i8* %1551, align 1
DOALL:     	  %1553 = load i8*, i8** %14, align 8
DOALL:     	  store i8* %1553, i8** %23, align 8
DOALL:     	  %1555 = load i8*, i8** %10, align 8
DOALL:     	  %1556 = getelementptr inbounds i8, i8* %1555, i32 1
DOALL:     	  store i8* %1556, i8** %10, align 8
DOALL:     	  %1557 = load i8, i8* %1555, align 1
DOALL:     	  %1558 = zext i8 %1557 to i32
DOALL:     	  %1559 = load i8*, i8** %23, align 8
DOALL:     	  %1560 = load i32, i32* %20, align 4
DOALL:     	  %1561 = sext i32 %1560 to i64
DOALL:     	  %1562 = getelementptr inbounds i8, i8* %1559, i64 %1561
DOALL:     	  %1563 = load i8, i8* %1562, align 1
DOALL:     	  %1564 = zext i8 %1563 to i32
DOALL:     	  %1565 = xor i32 %1558, %1564
DOALL:     	  %1566 = trunc i32 %1565 to i8
DOALL:     	  store i8 %1566, i8* %24, align 1
DOALL:     	  %1567 = load i8, i8* %24, align 1
DOALL:     	  %1568 = load i8*, i8** %11, align 8
DOALL:     	  %1569 = getelementptr inbounds i8, i8* %1568, i32 1
DOALL:     	  store i8* %1569, i8** %11, align 8
DOALL:     	  store i8 %1567, i8* %1568, align 1
DOALL:     	  %1570 = load i8, i8* %24, align 1
DOALL:     	  %1571 = load i8*, i8** %23, align 8
DOALL:     	  %1572 = load i32, i32* %20, align 4
DOALL:     	  %1573 = sext i32 %1572 to i64
DOALL:     	  %1574 = getelementptr inbounds i8, i8* %1571, i64 %1573
DOALL:     	  store i8 %1570, i8* %1574, align 1
DOALL:     	  %1575 = load i32, i32* %20, align 4
DOALL:     	  %1576 = add nsw i32 %1575, 1
DOALL:     	  %1577 = and i32 %1576, 7
DOALL:     	  store i32 %1577, i32* %20, align 4
DOALL:     	  %1581 = load i64, i64* %21, align 8
DOALL:     	  %1582 = add nsw i64 %1581, -1
DOALL:     	  store i64 %1582, i64* %21, align 8
DOALL:     	  %1583 = icmp ne i64 %1581, 0
DOALL:     	  br i1 %1583, label %1584, label %1721
DOALL:     	  %1585 = load i32, i32* %20, align 4
DOALL:     	  %1586 = icmp eq i32 %1585, 0
DOALL:     	  br i1 %1586, label %1587, label %._crit_edge1.i
DOALL:     	  %1588 = load i8*, i8** %23, align 8
DOALL:     	  %1589 = getelementptr inbounds i8, i8* %1588, i32 1
DOALL:     	  store i8* %1589, i8** %23, align 8
DOALL:     	  %1590 = load i8, i8* %1588, align 1
DOALL:     	  %1591 = zext i8 %1590 to i64
DOALL:     	  %1592 = shl i64 %1591, 24
DOALL:     	  store i64 %1592, i64* %17, align 8
DOALL:     	  %1593 = load i8*, i8** %23, align 8
DOALL:     	  %1594 = getelementptr inbounds i8, i8* %1593, i32 1
DOALL:     	  store i8* %1594, i8** %23, align 8
DOALL:     	  %1595 = load i8, i8* %1593, align 1
DOALL:     	  %1596 = zext i8 %1595 to i64
DOALL:     	  %1597 = shl i64 %1596, 16
DOALL:     	  %1598 = load i64, i64* %17, align 8
DOALL:     	  %1599 = or i64 %1598, %1597
DOALL:     	  store i64 %1599, i64* %17, align 8
DOALL:     	  %1600 = load i8*, i8** %23, align 8
DOALL:     	  %1601 = getelementptr inbounds i8, i8* %1600, i32 1
DOALL:     	  store i8* %1601, i8** %23, align 8
DOALL:     	  %1602 = load i8, i8* %1600, align 1
DOALL:     	  %1603 = zext i8 %1602 to i64
DOALL:     	  %1604 = shl i64 %1603, 8
DOALL:     	  %1605 = load i64, i64* %17, align 8
DOALL:     	  %1606 = or i64 %1605, %1604
DOALL:     	  store i64 %1606, i64* %17, align 8
DOALL:     	  %1607 = load i8*, i8** %23, align 8
DOALL:     	  %1608 = getelementptr inbounds i8, i8* %1607, i32 1
DOALL:     	  store i8* %1608, i8** %23, align 8
DOALL:     	  %1609 = load i8, i8* %1607, align 1
DOALL:     	  %1610 = zext i8 %1609 to i64
DOALL:     	  %1611 = load i64, i64* %17, align 8
DOALL:     	  %1612 = or i64 %1611, %1610
DOALL:     	  store i64 %1612, i64* %17, align 8
DOALL:     	  %1613 = load i64, i64* %17, align 8
DOALL:     	  %1614 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
DOALL:     	  store i64 %1613, i64* %1614, align 16
DOALL:     	  %1615 = load i8*, i8** %23, align 8
DOALL:     	  %1616 = getelementptr inbounds i8, i8* %1615, i32 1
DOALL:     	  store i8* %1616, i8** %23, align 8
DOALL:     	  %1617 = load i8, i8* %1615, align 1
DOALL:     	  %1618 = zext i8 %1617 to i64
DOALL:     	  %1619 = shl i64 %1618, 24
DOALL:     	  store i64 %1619, i64* %18, align 8
DOALL:     	  %1620 = load i8*, i8** %23, align 8
DOALL:     	  %1621 = getelementptr inbounds i8, i8* %1620, i32 1
DOALL:     	  store i8* %1621, i8** %23, align 8
DOALL:     	  %1622 = load i8, i8* %1620, align 1
DOALL:     	  %1623 = zext i8 %1622 to i64
DOALL:     	  %1624 = shl i64 %1623, 16
DOALL:     	  %1625 = load i64, i64* %18, align 8
DOALL:     	  %1626 = or i64 %1625, %1624
DOALL:     	  store i64 %1626, i64* %18, align 8
DOALL:     	  %1627 = load i8*, i8** %23, align 8
DOALL:     	  %1628 = getelementptr inbounds i8, i8* %1627, i32 1
DOALL:     	  store i8* %1628, i8** %23, align 8
DOALL:     	  %1629 = load i8, i8* %1627, align 1
DOALL:     	  %1630 = zext i8 %1629 to i64
DOALL:     	  %1631 = shl i64 %1630, 8
DOALL:     	  %1632 = load i64, i64* %18, align 8
DOALL:     	  %1633 = or i64 %1632, %1631
DOALL:     	  store i64 %1633, i64* %18, align 8
DOALL:     	  %1634 = load i8*, i8** %23, align 8
DOALL:     	  %1635 = getelementptr inbounds i8, i8* %1634, i32 1
DOALL:     	  store i8* %1635, i8** %23, align 8
DOALL:     	  %1636 = load i8, i8* %1634, align 1
DOALL:     	  %1637 = zext i8 %1636 to i64
DOALL:     	  %1638 = load i64, i64* %18, align 8
DOALL:     	  %1639 = or i64 %1638, %1637
DOALL:     	  store i64 %1639, i64* %18, align 8
DOALL:     	  %1640 = load i64, i64* %18, align 8
DOALL:     	  %1641 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1
DOALL:     	  store i64 %1640, i64* %1641, align 8
DOALL:     	  %1642 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
DOALL:     	  %1643 = load %struct.bf_key_st*, %struct.bf_key_st** %13, align 8
DOALL:     	  call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10
DOALL:     	  %1644 = load i8*, i8** %14, align 8
DOALL:     	  store i8* %1644, i8** %23, align 8
DOALL:     	  %1645 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
DOALL:     	  %1646 = load i64, i64* %1645, align 16
DOALL:     	  store i64 %1646, i64* %19, align 8
DOALL:     	  %1647 = load i64, i64* %19, align 8
DOALL:     	  %1648 = lshr i64 %1647, 24
DOALL:     	  %1649 = and i64 %1648, 255
DOALL:     	  %1650 = trunc i64 %1649 to i8
DOALL:     	  %1651 = load i8*, i8** %23, align 8
DOALL:     	  %1652 = getelementptr inbounds i8, i8* %1651, i32 1
DOALL:     	  store i8* %1652, i8** %23, align 8
DOALL:     	  store i8 %1650, i8* %1651, align 1
DOALL:     	  %1653 = load i64, i64* %19, align 8
DOALL:     	  %1654 = lshr i64 %1653, 16
DOALL:     	  %1655 = and i64 %1654, 255
DOALL:     	  %1656 = trunc i64 %1655 to i8
DOALL:     	  %1657 = load i8*, i8** %23, align 8
DOALL:     	  %1658 = getelementptr inbounds i8, i8* %1657, i32 1
DOALL:     	  store i8* %1658, i8** %23, align 8
DOALL:     	  store i8 %1656, i8* %1657, align 1
DOALL:     	  %1659 = load i64, i64* %19, align 8
DOALL:     	  %1660 = lshr i64 %1659, 8
DOALL:     	  %1661 = and i64 %1660, 255
DOALL:     	  %1662 = trunc i64 %1661 to i8
DOALL:     	  %1663 = load i8*, i8** %23, align 8
DOALL:     	  %1664 = getelementptr inbounds i8, i8* %1663, i32 1
DOALL:     	  store i8* %1664, i8** %23, align 8
DOALL:     	  store i8 %1662, i8* %1663, align 1
DOALL:     	  %1665 = load i64, i64* %19, align 8
DOALL:     	  %1666 = and i64 %1665, 255
DOALL:     	  %1667 = trunc i64 %1666 to i8
DOALL:     	  %1668 = load i8*, i8** %23, align 8
DOALL:     	  %1669 = getelementptr inbounds i8, i8* %1668, i32 1
DOALL:     	  store i8* %1669, i8** %23, align 8
DOALL:     	  store i8 %1667, i8* %1668, align 1
DOALL:     	  %1670 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1
DOALL:     	  %1671 = load i64, i64* %1670, align 8
DOALL:     	  store i64 %1671, i64* %19, align 8
DOALL:     	  %1672 = load i64, i64* %19, align 8
DOALL:     	  %1673 = lshr i64 %1672, 24
DOALL:     	  %1674 = and i64 %1673, 255
DOALL:     	  %1675 = trunc i64 %1674 to i8
DOALL:     	  %1676 = load i8*, i8** %23, align 8
DOALL:     	  %1677 = getelementptr inbounds i8, i8* %1676, i32 1
DOALL:     	  store i8* %1677, i8** %23, align 8
DOALL:     	  store i8 %1675, i8* %1676, align 1
DOALL:     	  %1678 = load i64, i64* %19, align 8
DOALL:     	  %1679 = lshr i64 %1678, 16
DOALL:     	  %1680 = and i64 %1679, 255
DOALL:     	  %837 = lshr i64 %836, 16
DOALL:     	  %838 = and i64 %837, 255
DOALL:     	  %839 = add i64 256, %838
DOALL:     	  %840 = getelementptr inbounds i64, i64* %835, i64 %839
DOALL:     	  %841 = load i64, i64* %840, align 8
DOALL:     	  %842 = add i64 %834, %841
DOALL:     	  %843 = load i64*, i64** %9, align 8
DOALL:     	  %844 = load i64, i64* %6, align 8
DOALL:     	  %845 = lshr i64 %844, 8
DOALL:     	  %846 = and i64 %845, 255
DOALL:     	  %847 = add i64 512, %846
DOALL:     	  %848 = getelementptr inbounds i64, i64* %843, i64 %847
DOALL:     	  %849 = load i64, i64* %848, align 8
DOALL:     	  %850 = xor i64 %842, %849
DOALL:     	  %851 = load i64*, i64** %9, align 8
DOALL:     	  %852 = load i64, i64* %6, align 8
DOALL:     	  %853 = and i64 %852, 255
DOALL:     	  %854 = add i64 768, %853
DOALL:     	  %855 = getelementptr inbounds i64, i64* %851, i64 %854
DOALL:     	  %856 = load i64, i64* %855, align 8
DOALL:     	  %857 = add i64 %850, %856
DOALL:     	  %858 = and i64 %857, 4294967295
DOALL:     	  %859 = load i64, i64* %7, align 8
DOALL:     	  %860 = xor i64 %859, %858
DOALL:     	  store i64 %860, i64* %7, align 8
DOALL:     	  %861 = load i64*, i64** %8, align 8
DOALL:     	  %862 = getelementptr inbounds i64, i64* %861, i64 16
DOALL:     	  %863 = load i64, i64* %862, align 8
DOALL:     	  %864 = load i64, i64* %6, align 8
DOALL:     	  %865 = xor i64 %864, %863
DOALL:     	  store i64 %865, i64* %6, align 8
DOALL:     	  %866 = load i64*, i64** %9, align 8
DOALL:     	  %867 = load i64, i64* %7, align 8
DOALL:     	  %868 = lshr i64 %867, 24
DOALL:     	  %869 = getelementptr inbounds i64, i64* %866, i64 %868
DOALL:     	  %870 = load i64, i64* %869, align 8
DOALL:     	  %871 = load i64*, i64** %9, align 8
DOALL:     	  %872 = load i64, i64* %7, align 8
DOALL:     	  %873 = lshr i64 %872, 16
DOALL:     	  %874 = and i64 %873, 255
DOALL:     	  %875 = add i64 256, %874
DOALL:     	  %876 = getelementptr inbounds i64, i64* %871, i64 %875
DOALL:     	  %877 = load i64, i64* %876, align 8
DOALL:     	  %878 = add i64 %870, %877
DOALL:     	  %879 = load i64*, i64** %9, align 8
DOALL:     	  %880 = load i64, i64* %7, align 8
DOALL:     	  %881 = lshr i64 %880, 8
DOALL:     	  %882 = and i64 %881, 255
DOALL:     	  %883 = add i64 512, %882
DOALL:     	  %884 = getelementptr inbounds i64, i64* %879, i64 %883
DOALL:     	  %885 = load i64, i64* %884, align 8
DOALL:     	  %886 = xor i64 %878, %885
DOALL:     	  %887 = load i64*, i64** %9, align 8
DOALL:     	  %888 = load i64, i64* %7, align 8
DOALL:     	  %889 = and i64 %888, 255
DOALL:     	  %890 = add i64 768, %889
DOALL:     	  %891 = getelementptr inbounds i64, i64* %887, i64 %890
DOALL:     	  %892 = load i64, i64* %891, align 8
DOALL:     	  %893 = add i64 %886, %892
DOALL:     	  %894 = and i64 %893, 4294967295
DOALL:     	  %895 = load i64, i64* %6, align 8
DOALL:     	  %896 = xor i64 %895, %894
DOALL:     	  store i64 %896, i64* %6, align 8
DOALL:     	  %897 = load i64*, i64** %8, align 8
DOALL:     	  %898 = getelementptr inbounds i64, i64* %897, i64 17
DOALL:     	  %899 = load i64, i64* %898, align 8
DOALL:     	  %900 = load i64, i64* %7, align 8
DOALL:     	  %901 = xor i64 %900, %899
DOALL:     	  store i64 %901, i64* %7, align 8
DOALL:     	  %903 = load i64*, i64** %8, align 8
DOALL:     	  %904 = getelementptr inbounds i64, i64* %903, i64 17
DOALL:     	  %905 = load i64, i64* %904, align 8
DOALL:     	  %906 = load i64, i64* %6, align 8
DOALL:     	  %907 = xor i64 %906, %905
DOALL:     	  store i64 %907, i64* %6, align 8
DOALL:     	  %908 = load i64*, i64** %8, align 8
DOALL:     	  %909 = getelementptr inbounds i64, i64* %908, i64 16
DOALL:     	  %1126 = load i64, i64* %1125, align 8
DOALL:     	  %1127 = load i64, i64* %7, align 8
DOALL:     	  %1128 = xor i64 %1127, %1126
DOALL:     	  store i64 %1128, i64* %7, align 8
DOALL:     	  %1129 = load i64*, i64** %9, align 8
DOALL:     	  %1130 = load i64, i64* %6, align 8
DOALL:     	  %1131 = lshr i64 %1130, 24
DOALL:     	  %1132 = getelementptr inbounds i64, i64* %1129, i64 %1131
DOALL:     	  %1133 = load i64, i64* %1132, align 8
DOALL:     	  %1134 = load i64*, i64** %9, align 8
DOALL:     	  %1135 = load i64, i64* %6, align 8
DOALL:     	  %1136 = lshr i64 %1135, 16
DOALL:     	  %1137 = and i64 %1136, 255
DOALL:     	  %1138 = add i64 256, %1137
DOALL:     	  %1139 = getelementptr inbounds i64, i64* %1134, i64 %1138
DOALL:     	  %1140 = load i64, i64* %1139, align 8
DOALL:     	  %1141 = add i64 %1133, %1140
DOALL:     	  %1142 = load i64*, i64** %9, align 8
DOALL:     	  %1143 = load i64, i64* %6, align 8
DOALL:     	  %1144 = lshr i64 %1143, 8
DOALL:     	  %1145 = and i64 %1144, 255
DOALL:     	  %1146 = add i64 512, %1145
DOALL:     	  %1147 = getelementptr inbounds i64, i64* %1142, i64 %1146
DOALL:     	  %1148 = load i64, i64* %1147, align 8
DOALL:     	  %1149 = xor i64 %1141, %1148
DOALL:     	  %1150 = load i64*, i64** %9, align 8
DOALL:     	  %1151 = load i64, i64* %6, align 8
DOALL:     	  %1152 = and i64 %1151, 255
DOALL:     	  %1153 = add i64 768, %1152
DOALL:     	  %1154 = getelementptr inbounds i64, i64* %1150, i64 %1153
DOALL:     	  %1155 = load i64, i64* %1154, align 8
DOALL:     	  %1156 = add i64 %1149, %1155
DOALL:     	  %1157 = and i64 %1156, 4294967295
DOALL:     	  %1158 = load i64, i64* %7, align 8
DOALL:     	  %1159 = xor i64 %1158, %1157
DOALL:     	  store i64 %1159, i64* %7, align 8
DOALL:     	  %1160 = load i64*, i64** %8, align 8
DOALL:     	  %1161 = getelementptr inbounds i64, i64* %1160, i64 9
DOALL:     	  %1162 = load i64, i64* %1161, align 8
DOALL:     	  %1163 = load i64, i64* %6, align 8
DOALL:     	  %1164 = xor i64 %1163, %1162
DOALL:     	  store i64 %1164, i64* %6, align 8
DOALL:     	  %1165 = load i64*, i64** %9, align 8
DOALL:     	  %1166 = load i64, i64* %7, align 8
DOALL:     	  %1167 = lshr i64 %1166, 24
DOALL:     	  %1168 = getelementptr inbounds i64, i64* %1165, i64 %1167
DOALL:     	  %1169 = load i64, i64* %1168, align 8
DOALL:     	  %1170 = load i64*, i64** %9, align 8
DOALL:     	  %1171 = load i64, i64* %7, align 8
DOALL:     	  %1172 = lshr i64 %1171, 16
DOALL:     	  %1173 = and i64 %1172, 255
DOALL:     	  %1174 = add i64 256, %1173
DOALL:     	  %1175 = getelementptr inbounds i64, i64* %1170, i64 %1174
DOALL:     	  %1176 = load i64, i64* %1175, align 8
DOALL:     	  %1177 = add i64 %1169, %1176
DOALL:     	  %1178 = load i64*, i64** %9, align 8
DOALL:     	  %1179 = load i64, i64* %7, align 8
DOALL:     	  %1180 = lshr i64 %1179, 8
DOALL:     	  %1181 = and i64 %1180, 255
DOALL:     	  %1182 = add i64 512, %1181
DOALL:     	  %1183 = getelementptr inbounds i64, i64* %1178, i64 %1182
DOALL:     	  %1184 = load i64, i64* %1183, align 8
DOALL:     	  %1185 = xor i64 %1177, %1184
DOALL:     	  %1186 = load i64*, i64** %9, align 8
DOALL:     	  %1187 = load i64, i64* %7, align 8
DOALL:     	  %1188 = and i64 %1187, 255
DOALL:     	  %1189 = add i64 768, %1188
DOALL:     	  %1190 = getelementptr inbounds i64, i64* %1186, i64 %1189
DOALL:     	  %1191 = load i64, i64* %1190, align 8
DOALL:     	  %1192 = add i64 %1185, %1191
DOALL:     	  %1193 = and i64 %1192, 4294967295
DOALL:     	  %1194 = load i64, i64* %6, align 8
DOALL:     	  %1195 = xor i64 %1194, %1193
DOALL:     	  store i64 %1195, i64* %6, align 8
DOALL:     	  %1196 = load i64*, i64** %8, align 8
DOALL:     	  %1197 = getelementptr inbounds i64, i64* %1196, i64 8
DOALL:     	  %1198 = load i64, i64* %1197, align 8
DOALL:     	  %1199 = load i64, i64* %7, align 8
DOALL:     	  %1200 = xor i64 %1199, %1198
DOALL:     	  store i64 %1200, i64* %7, align 8
DOALL:     	  %1201 = load i64*, i64** %9, align 8
DOALL:     	  %1202 = load i64, i64* %6, align 8
DOALL:     	  %1203 = lshr i64 %1202, 24
DOALL:     	  %1204 = getelementptr inbounds i64, i64* %1201, i64 %1203
DOALL:     	  %1205 = load i64, i64* %1204, align 8
DOALL:     	  %1206 = load i64*, i64** %9, align 8
DOALL:     	  %1207 = load i64, i64* %6, align 8
DOALL:     	  %1208 = lshr i64 %1207, 16
DOALL:     	  %1209 = and i64 %1208, 255
DOALL:     	  %1210 = add i64 256, %1209
DOALL:     	  %1211 = getelementptr inbounds i64, i64* %1206, i64 %1210
DOALL:     	  %1212 = load i64, i64* %1211, align 8
DOALL:     	  %1213 = add i64 %1205, %1212
DOALL:     	  %1214 = load i64*, i64** %9, align 8
DOALL:     	  %1215 = load i64, i64* %6, align 8
DOALL:     	  %1216 = lshr i64 %1215, 8
DOALL:     	  %1217 = and i64 %1216, 255
DOALL:     	  %1218 = add i64 512, %1217
DOALL:     	  %1219 = getelementptr inbounds i64, i64* %1214, i64 %1218
DOALL:     	  %1220 = load i64, i64* %1219, align 8
DOALL:     	  %1221 = xor i64 %1213, %1220
DOALL:     	  %1222 = load i64*, i64** %9, align 8
DOALL:     	  %1223 = load i64, i64* %6, align 8
DOALL:     	  %1224 = and i64 %1223, 255
DOALL:     	  %1225 = add i64 768, %1224
DOALL:     	  %1226 = getelementptr inbounds i64, i64* %1222, i64 %1225
DOALL:     	  %1227 = load i64, i64* %1226, align 8
DOALL:     	  %1228 = add i64 %1221, %1227
DOALL:     	  %1229 = and i64 %1228, 4294967295
DOALL:     	  %1230 = load i64, i64* %7, align 8
DOALL:     	  %1231 = xor i64 %1230, %1229
DOALL:     	  store i64 %1231, i64* %7, align 8
DOALL:     	  %1232 = load i64*, i64** %8, align 8
DOALL:     	  %1233 = getelementptr inbounds i64, i64* %1232, i64 7
DOALL:     	  %1234 = load i64, i64* %1233, align 8
DOALL:     	  %1235 = load i64, i64* %6, align 8
DOALL:     	  %1236 = xor i64 %1235, %1234
DOALL:     	  store i64 %1236, i64* %6, align 8
DOALL:     	  %1237 = load i64*, i64** %9, align 8
DOALL:     	  %1238 = load i64, i64* %7, align 8
DOALL:     	  %1239 = lshr i64 %1238, 24
DOALL:     	  %1240 = getelementptr inbounds i64, i64* %1237, i64 %1239
DOALL:     	  %1241 = load i64, i64* %1240, align 8
DOALL:     	  %1242 = load i64*, i64** %9, align 8
DOALL:     	  %1243 = load i64, i64* %7, align 8
DOALL:     	  %1244 = lshr i64 %1243, 16
DOALL:     	  %1245 = and i64 %1244, 255
DOALL:     	  %1246 = add i64 256, %1245
DOALL:     	  %1247 = getelementptr inbounds i64, i64* %1242, i64 %1246
DOALL:     	  %1248 = load i64, i64* %1247, align 8
DOALL:     	  %1249 = add i64 %1241, %1248
DOALL:     	  %1250 = load i64*, i64** %9, align 8
DOALL:     	  %1251 = load i64, i64* %7, align 8
DOALL:     	  %1252 = lshr i64 %1251, 8
DOALL:     	  %1253 = and i64 %1252, 255
DOALL:     	  %1254 = add i64 512, %1253
DOALL:     	  %1255 = getelementptr inbounds i64, i64* %1250, i64 %1254
DOALL:     	  %1256 = load i64, i64* %1255, align 8
DOALL:     	  %1257 = xor i64 %1249, %1256
DOALL:     	  %1258 = load i64*, i64** %9, align 8
DOALL:     	  %1259 = load i64, i64* %7, align 8
DOALL:     	  %1260 = and i64 %1259, 255
DOALL:     	  %1261 = add i64 768, %1260
DOALL:     	  %1262 = getelementptr inbounds i64, i64* %1258, i64 %1261
DOALL:     	  %1263 = load i64, i64* %1262, align 8
DOALL:     	  %1264 = add i64 %1257, %1263
DOALL:     	  %1265 = and i64 %1264, 4294967295
DOALL:     	  %1266 = load i64, i64* %6, align 8
DOALL:     	  %1267 = xor i64 %1266, %1265
DOALL:     	  store i64 %1267, i64* %6, align 8
DOALL:     	  %1268 = load i64*, i64** %8, align 8
DOALL:     	  %1269 = getelementptr inbounds i64, i64* %1268, i64 6
DOALL:     	  %1270 = load i64, i64* %1269, align 8
DOALL:     	  %1271 = load i64, i64* %7, align 8
DOALL:     	  %1272 = xor i64 %1271, %1270
DOALL:     	  store i64 %1272, i64* %7, align 8
DOALL:     	  %1273 = load i64*, i64** %9, align 8
DOALL:     	  %1274 = load i64, i64* %6, align 8
DOALL:     	  %1275 = lshr i64 %1274, 24
DOALL:     	  %1276 = getelementptr inbounds i64, i64* %1273, i64 %1275
DOALL:     	  %1277 = load i64, i64* %1276, align 8
DOALL:     	  %1278 = load i64*, i64** %9, align 8
DOALL:     	  %1279 = load i64, i64* %6, align 8
DOALL:     	  %1280 = lshr i64 %1279, 16
DOALL:     	  %1281 = and i64 %1280, 255
DOALL:     	  %1282 = add i64 256, %1281
DOALL:     	  %1283 = getelementptr inbounds i64, i64* %1278, i64 %1282
DOALL:     	  %1284 = load i64, i64* %1283, align 8
DOALL:     	  %1285 = add i64 %1277, %1284
DOALL:     	  %1286 = load i64*, i64** %9, align 8
DOALL:     	  %1287 = load i64, i64* %6, align 8
DOALL:     	  %1288 = lshr i64 %1287, 8
DOALL:     	  %1289 = and i64 %1288, 255
DOALL:     	  %1290 = add i64 512, %1289
DOALL:     	  %1291 = getelementptr inbounds i64, i64* %1286, i64 %1290
DOALL:     	  %1292 = load i64, i64* %1291, align 8
DOALL:     	  %1293 = xor i64 %1285, %1292
DOALL:     	  %1294 = load i64*, i64** %9, align 8
DOALL:     	  %1295 = load i64, i64* %6, align 8
DOALL:     	  %1296 = and i64 %1295, 255
DOALL:     	  %1297 = add i64 768, %1296
DOALL:     	  %1298 = getelementptr inbounds i64, i64* %1294, i64 %1297
DOALL:     	  %1299 = load i64, i64* %1298, align 8
DOALL:     	  %1300 = add i64 %1293, %1299
DOALL:     	  %1301 = and i64 %1300, 4294967295
DOALL:     	  %1302 = load i64, i64* %7, align 8
DOALL:     	  %1303 = xor i64 %1302, %1301
DOALL:     	  store i64 %1303, i64* %7, align 8
DOALL:     	  %1304 = load i64*, i64** %8, align 8
DOALL:     	  %1305 = getelementptr inbounds i64, i64* %1304, i64 5
DOALL:     	  %1306 = load i64, i64* %1305, align 8
DOALL:     	  %1307 = load i64, i64* %6, align 8
DOALL:     	  %1308 = xor i64 %1307, %1306
DOALL:     	  store i64 %1308, i64* %6, align 8
DOALL:     	  %1309 = load i64*, i64** %9, align 8
DOALL:     	  %1310 = load i64, i64* %7, align 8
DOALL:     	  %1311 = lshr i64 %1310, 24
DOALL:     	  %1312 = getelementptr inbounds i64, i64* %1309, i64 %1311
DOALL:     	  %1313 = load i64, i64* %1312, align 8
DOALL:     	  %1314 = load i64*, i64** %9, align 8
DOALL:     	  %1315 = load i64, i64* %7, align 8
DOALL:     	  %1316 = lshr i64 %1315, 16
DOALL:     	  %1317 = and i64 %1316, 255
DOALL:     	  %1318 = add i64 256, %1317
DOALL:     	  %1319 = getelementptr inbounds i64, i64* %1314, i64 %1318
DOALL:     	  %1320 = load i64, i64* %1319, align 8
DOALL:     	  %1321 = add i64 %1313, %1320
DOALL:     	  %1322 = load i64*, i64** %9, align 8
DOALL:     	  %1323 = load i64, i64* %7, align 8
DOALL:     	  %1324 = lshr i64 %1323, 8
DOALL:     	  %1325 = and i64 %1324, 255
DOALL:     	  %1326 = add i64 512, %1325
DOALL:     	  %1327 = getelementptr inbounds i64, i64* %1322, i64 %1326
DOALL:     	  %1328 = load i64, i64* %1327, align 8
DOALL:     	  %1329 = xor i64 %1321, %1328
DOALL:     	  %1330 = load i64*, i64** %9, align 8
DOALL:     	  %1331 = load i64, i64* %7, align 8
DOALL:     	  %1332 = and i64 %1331, 255
DOALL:     	  %1333 = add i64 768, %1332
DOALL:     	  %1334 = getelementptr inbounds i64, i64* %1330, i64 %1333
DOALL:     	  %1335 = load i64, i64* %1334, align 8
DOALL:     	  %1336 = add i64 %1329, %1335
DOALL:     	  %1337 = and i64 %1336, 4294967295
DOALL:     	  %1338 = load i64, i64* %6, align 8
DOALL:     	  %1339 = xor i64 %1338, %1337
DOALL:     	  store i64 %1339, i64* %6, align 8
DOALL:     	  %1340 = load i64*, i64** %8, align 8
DOALL:     	  %1341 = getelementptr inbounds i64, i64* %1340, i64 4
DOALL:     	  %1342 = load i64, i64* %1341, align 8
DOALL:     	  %1343 = load i64, i64* %7, align 8
DOALL:     	  %1344 = xor i64 %1343, %1342
DOALL:     	  store i64 %1344, i64* %7, align 8
DOALL:     	  %1345 = load i64*, i64** %9, align 8
DOALL:     	  %1346 = load i64, i64* %6, align 8
DOALL:     	  %1347 = lshr i64 %1346, 24
DOALL:     	  %1348 = getelementptr inbounds i64, i64* %1345, i64 %1347
DOALL:     	  %1349 = load i64, i64* %1348, align 8
DOALL:     	  %1350 = load i64*, i64** %9, align 8
DOALL:     	  %1351 = load i64, i64* %6, align 8
DOALL:     	  %1352 = lshr i64 %1351, 16
DOALL:     	  %1353 = and i64 %1352, 255
DOALL:     	  %1354 = add i64 256, %1353
DOALL:     	  %1355 = getelementptr inbounds i64, i64* %1350, i64 %1354
DOALL:     	  %1356 = load i64, i64* %1355, align 8
DOALL:     	  %1357 = add i64 %1349, %1356
DOALL:     	  %1358 = load i64*, i64** %9, align 8
DOALL:     	  %1359 = load i64, i64* %6, align 8
DOALL:     	  %1360 = lshr i64 %1359, 8
DOALL:     	  %1361 = and i64 %1360, 255
DOALL:     	  %1362 = add i64 512, %1361
DOALL:     	  %1363 = getelementptr inbounds i64, i64* %1358, i64 %1362
DOALL:     	  %1364 = load i64, i64* %1363, align 8
DOALL:     	  %1365 = xor i64 %1357, %1364
DOALL:     	  %1366 = load i64*, i64** %9, align 8
DOALL:     	  %1367 = load i64, i64* %6, align 8
DOALL:     	  %1368 = and i64 %1367, 255
DOALL:     	  %1369 = add i64 768, %1368
DOALL:     	  %1370 = getelementptr inbounds i64, i64* %1366, i64 %1369
DOALL:     	  %1371 = load i64, i64* %1370, align 8
DOALL:     	  %1372 = add i64 %1365, %1371
DOALL:     	  %1373 = and i64 %1372, 4294967295
DOALL:     	  %1374 = load i64, i64* %7, align 8
DOALL:     	  %1375 = xor i64 %1374, %1373
DOALL:     	  store i64 %1375, i64* %7, align 8
DOALL:     	  %1376 = load i64*, i64** %8, align 8
DOALL:     	  %1377 = getelementptr inbounds i64, i64* %1376, i64 3
DOALL:     	  %1378 = load i64, i64* %1377, align 8
DOALL:     	  %1379 = load i64, i64* %6, align 8
DOALL:     	  %1380 = xor i64 %1379, %1378
DOALL:     	  store i64 %1380, i64* %6, align 8
DOALL:     	  %1381 = load i64*, i64** %9, align 8
DOALL:     	  %1382 = load i64, i64* %7, align 8
DOALL:     	  %1383 = lshr i64 %1382, 24
DOALL:     	  %1384 = getelementptr inbounds i64, i64* %1381, i64 %1383
DOALL:     	  %1385 = load i64, i64* %1384, align 8
DOALL:     	  %1386 = load i64*, i64** %9, align 8
DOALL:     	  %1387 = load i64, i64* %7, align 8
DOALL:     	  %1388 = lshr i64 %1387, 16
DOALL:     	  %1389 = and i64 %1388, 255
DOALL:     	  %1390 = add i64 256, %1389
DOALL:     	  %1391 = getelementptr inbounds i64, i64* %1386, i64 %1390
DOALL:     	  %1392 = load i64, i64* %1391, align 8
DOALL:     	  %1393 = add i64 %1385, %1392
DOALL:     	  %1394 = load i64*, i64** %9, align 8
DOALL:     	  %1395 = load i64, i64* %7, align 8
DOALL:     	  %1396 = lshr i64 %1395, 8
DOALL:     	  %1397 = and i64 %1396, 255
DOALL:     	  %1398 = add i64 512, %1397
DOALL:     	  %1399 = getelementptr inbounds i64, i64* %1394, i64 %1398
DOALL:     	  %1400 = load i64, i64* %1399, align 8
DOALL:     	  %1401 = xor i64 %1393, %1400
DOALL:     	  %1402 = load i64*, i64** %9, align 8
DOALL:     	  %1403 = load i64, i64* %7, align 8
DOALL:     	  %1404 = and i64 %1403, 255
DOALL:     	  %1405 = add i64 768, %1404
DOALL:     	  %1406 = getelementptr inbounds i64, i64* %1402, i64 %1405
DOALL:     	  %1407 = load i64, i64* %1406, align 8
DOALL:     	  %1408 = add i64 %1401, %1407
DOALL:     	  %1409 = and i64 %1408, 4294967295
DOALL:     	  %1410 = load i64, i64* %6, align 8
DOALL:     	  %1411 = xor i64 %1410, %1409
DOALL:     	  store i64 %1411, i64* %6, align 8
DOALL:     	  %1412 = load i64*, i64** %8, align 8
DOALL:     	  %1413 = getelementptr inbounds i64, i64* %1412, i64 2
DOALL:     	  %1414 = load i64, i64* %1413, align 8
DOALL:     	  %1415 = load i64, i64* %7, align 8
DOALL:     	  %1416 = xor i64 %1415, %1414
DOALL:     	  store i64 %1416, i64* %7, align 8
DOALL:     	  %1417 = load i64*, i64** %9, align 8
DOALL:     	  %1418 = load i64, i64* %6, align 8
DOALL:     	  %1419 = lshr i64 %1418, 24
DOALL:     	  %1420 = getelementptr inbounds i64, i64* %1417, i64 %1419
DOALL:     	  %1421 = load i64, i64* %1420, align 8
DOALL:     	  %1422 = load i64*, i64** %9, align 8
DOALL:     	  %1423 = load i64, i64* %6, align 8
DOALL:     	  %1424 = lshr i64 %1423, 16
DOALL:     	  %1425 = and i64 %1424, 255
DOALL:     	  %1426 = add i64 256, %1425
DOALL:     	  %1427 = getelementptr inbounds i64, i64* %1422, i64 %1426
DOALL:     	  %1428 = load i64, i64* %1427, align 8
DOALL:     	  %1429 = add i64 %1421, %1428
DOALL:     	  %1430 = load i64*, i64** %9, align 8
DOALL:     	  %1431 = load i64, i64* %6, align 8
DOALL:     	  %1432 = lshr i64 %1431, 8
DOALL:     	  %1433 = and i64 %1432, 255
DOALL:     	  %1434 = add i64 512, %1433
DOALL:     	  %1435 = getelementptr inbounds i64, i64* %1430, i64 %1434
DOALL:     	  %1436 = load i64, i64* %1435, align 8
DOALL:     	  %1437 = xor i64 %1429, %1436
DOALL:     	  %1438 = load i64*, i64** %9, align 8
DOALL:     	  %1439 = load i64, i64* %6, align 8
DOALL:     	  %1440 = and i64 %1439, 255
DOALL:     	  %1441 = add i64 768, %1440
DOALL:     	  %1442 = getelementptr inbounds i64, i64* %1438, i64 %1441
DOALL:     	  %1443 = load i64, i64* %1442, align 8
DOALL:     	  %1444 = add i64 %1437, %1443
DOALL:     	  %1445 = and i64 %1444, 4294967295
DOALL:     	  %1446 = load i64, i64* %7, align 8
DOALL:     	  %1447 = xor i64 %1446, %1445
DOALL:     	  store i64 %1447, i64* %7, align 8
DOALL:     	  %1448 = load i64*, i64** %8, align 8
DOALL:     	  %1449 = getelementptr inbounds i64, i64* %1448, i64 1
DOALL:     	  %1450 = load i64, i64* %1449, align 8
DOALL:     	  %1451 = load i64, i64* %6, align 8
DOALL:     	  %1452 = xor i64 %1451, %1450
DOALL:     	  store i64 %1452, i64* %6, align 8
DOALL:     	  %1453 = load i64*, i64** %9, align 8
DOALL:     	  %1454 = load i64, i64* %7, align 8
DOALL:     	  %1455 = lshr i64 %1454, 24
DOALL:     	  %1456 = getelementptr inbounds i64, i64* %1453, i64 %1455
DOALL:     	  %1457 = load i64, i64* %1456, align 8
DOALL:     	  %1458 = load i64*, i64** %9, align 8
DOALL:     	  %1459 = load i64, i64* %7, align 8
DOALL:     	  %1460 = lshr i64 %1459, 16
DOALL:     	  %1461 = and i64 %1460, 255
DOALL:     	  %1462 = add i64 256, %1461
DOALL:     	  %1681 = trunc i64 %1680 to i8
DOALL:     	  %1682 = load i8*, i8** %23, align 8
DOALL:     	  %1683 = getelementptr inbounds i8, i8* %1682, i32 1
DOALL:     	  store i8* %1683, i8** %23, align 8
DOALL:     	  store i8 %1681, i8* %1682, align 1
DOALL:     	  %1684 = load i64, i64* %19, align 8
DOALL:     	  %1685 = lshr i64 %1684, 8
DOALL:     	  %1686 = and i64 %1685, 255
DOALL:     	  %1687 = trunc i64 %1686 to i8
DOALL:     	  %1688 = load i8*, i8** %23, align 8
DOALL:     	  %1689 = getelementptr inbounds i8, i8* %1688, i32 1
DOALL:     	  store i8* %1689, i8** %23, align 8
DOALL:     	  store i8 %1687, i8* %1688, align 1
DOALL:     	  %1690 = load i64, i64* %19, align 8
DOALL:     	  %1691 = and i64 %1690, 255
DOALL:     	  %1692 = trunc i64 %1691 to i8
DOALL:     	  %1693 = load i8*, i8** %23, align 8
DOALL:     	  %1694 = getelementptr inbounds i8, i8* %1693, i32 1
DOALL:     	  store i8* %1694, i8** %23, align 8
DOALL:     	  store i8 %1692, i8* %1693, align 1
DOALL:     	  %1695 = load i8*, i8** %14, align 8
DOALL:     	  store i8* %1695, i8** %23, align 8
DOALL:     	  %1697 = load i8*, i8** %10, align 8
DOALL:     	  %1698 = getelementptr inbounds i8, i8* %1697, i32 1
DOALL:     	  store i8* %1698, i8** %10, align 8
DOALL:     	  %1699 = load i8, i8* %1697, align 1
DOALL:     	  store i8 %1699, i8* %25, align 1
DOALL:     	  %1700 = load i8*, i8** %23, align 8
DOALL:     	  %1701 = load i32, i32* %20, align 4
DOALL:     	  %1702 = sext i32 %1701 to i64
DOALL:     	  %1703 = getelementptr inbounds i8, i8* %1700, i64 %1702
DOALL:     	  %1704 = load i8, i8* %1703, align 1
DOALL:     	  store i8 %1704, i8* %24, align 1
DOALL:     	  %1705 = load i8, i8* %25, align 1
DOALL:     	  %1706 = load i8*, i8** %23, align 8
DOALL:     	  %1707 = load i32, i32* %20, align 4
DOALL:     	  %1708 = sext i32 %1707 to i64
DOALL:     	  %1709 = getelementptr inbounds i8, i8* %1706, i64 %1708
DOALL:     	  store i8 %1705, i8* %1709, align 1
DOALL:     	  %1710 = load i8, i8* %24, align 1
DOALL:     	  %1711 = zext i8 %1710 to i32
DOALL:     	  %1712 = load i8, i8* %25, align 1
DOALL:     	  %1713 = zext i8 %1712 to i32
DOALL:     	  %1714 = xor i32 %1711, %1713
DOALL:     	  %1715 = trunc i32 %1714 to i8
DOALL:     	  %1716 = load i8*, i8** %11, align 8
DOALL:     	  %1717 = getelementptr inbounds i8, i8* %1716, i32 1
DOALL:     	  store i8* %1717, i8** %11, align 8
DOALL:     	  store i8 %1715, i8* %1716, align 1
DOALL:     	  %1718 = load i32, i32* %20, align 4
DOALL:     	  %1719 = add nsw i32 %1718, 1
DOALL:     	  %1720 = and i32 %1719, 7
DOALL:     	  store i32 %1720, i32* %20, align 4
DOALL:     	  %1724 = load i32, i32* %20, align 4
DOALL:     	  %1725 = load i32*, i32** %15, align 8
DOALL:     	  store i32 %1724, i32* %1725, align 4
DOALL:     	  store i32 0, i32* %42, align 4
DOALL:     	  %1741 = load i32, i32* %42, align 4
DOALL:     	  %1742 = load i32, i32* %36, align 4
DOALL:     	  %1743 = icmp slt i32 %1741, %1742
DOALL:     	  br i1 %1743, label %1744, label %1755, !prof !40
DOALL:     	  %1745 = load i32, i32* %42, align 4
DOALL:     	  %1746 = sext i32 %1745 to i64
DOALL:     	  %1747 = getelementptr inbounds [40 x i8], [40 x i8]* %32, i64 0, i64 %1746
DOALL:     	  %1748 = load i8, i8* %1747, align 1
DOALL:     	  %1749 = zext i8 %1748 to i32
DOALL:     	  %1750 = load %struct._IO_FILE*, %struct._IO_FILE** %41, align 8
DOALL:     	  %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750)
DOALL:     	  %1753 = load i32, i32* %42, align 4
DOALL:     	  %1754 = add nsw i32 %1753, 1
DOALL:     	  store i32 %1754, i32* %42, align 4
DOALL:     	  store i32 0, i32* %36, align 4
DOALL:     External nodes: 117
DOALL:     	  br label %187
DOALL:     	  br label %194
DOALL:     	  br label %194
DOALL:     	  %218 = bitcast i64* %17 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %218)
DOALL:     	  %219 = bitcast i64* %18 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %219)
DOALL:     	  %220 = bitcast i64* %19 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %220)
DOALL:     	  %221 = bitcast i32* %20 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* %221)
DOALL:     	  %222 = bitcast i64* %21 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %222)
DOALL:     	  %223 = bitcast [2 x i64]* %22 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 16, i8* %223)
DOALL:     	  %224 = bitcast i8** %23 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %224)
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 1, i8* %24)
DOALL:     	  br label %187
DOALL:     	  %211 = bitcast i8** %10 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %211)
DOALL:     	  %212 = bitcast i8** %11 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %212)
DOALL:     	  %213 = bitcast i64* %12 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %213)
DOALL:     	  %214 = bitcast %struct.bf_key_st** %13 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %214)
DOALL:     	  %215 = bitcast i8** %14 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %215)
DOALL:     	  %216 = bitcast i32** %15 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %216)
DOALL:     	  %217 = bitcast i32* %16 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* %217)
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 1, i8* %25)
DOALL:     	  br label %232
DOALL:     	  br label %1554
DOALL:     	  %296 = bitcast i64** %3 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %296) #10
DOALL:     	  %297 = bitcast %struct.bf_key_st** %4 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %297) #10
DOALL:     	  %298 = bitcast i32* %5 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* %298) #10
DOALL:     	  %299 = bitcast i64* %6 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %299) #10
DOALL:     	  %300 = bitcast i64* %7 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %300) #10
DOALL:     	  %301 = bitcast i64** %8 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %301) #10
DOALL:     	  %302 = bitcast i64** %9 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %302) #10
DOALL:     	  br label %BF_encrypt.exit.i
DOALL:     	  %1495 = bitcast i64** %3 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1495) #10
DOALL:     	  %1496 = bitcast %struct.bf_key_st** %4 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1496) #10
DOALL:     	  %1497 = bitcast i32* %5 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1497) #10
DOALL:     	  %1498 = bitcast i64* %6 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1498) #10
DOALL:     	  %1499 = bitcast i64* %7 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1499) #10
DOALL:     	  %1500 = bitcast i64** %8 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1500) #10
DOALL:     	  %1501 = bitcast i64** %9 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1501) #10
DOALL:     	  br label %1554
DOALL:     	  br label %232
DOALL:     	  br label %BF_cfb64_encrypt.exit
DOALL:     	  br label %1580
DOALL:     	  br label %1696
DOALL:     	  br label %BF_encrypt.exit.i
DOALL:     	  br label %1696
DOALL:     	  br label %1580
DOALL:     	  br label %BF_cfb64_encrypt.exit
DOALL:     	  store i8 0, i8* %25, align 1
DOALL:     	  store i8 0, i8* %24, align 1
DOALL:     	  store i64 0, i64* %19, align 8
DOALL:     	  %1722 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1
DOALL:     	  store i64 0, i64* %1722, align 8
DOALL:     	  %1723 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
DOALL:     	  store i64 0, i64* %1723, align 16
DOALL:     	  store i64 0, i64* %18, align 8
DOALL:     	  store i64 0, i64* %17, align 8
DOALL:     	  %1726 = bitcast i8** %10 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1726)
DOALL:     	  %1727 = bitcast i8** %11 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1727)
DOALL:     	  %1728 = bitcast i64* %12 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1728)
DOALL:     	  %1729 = bitcast %struct.bf_key_st** %13 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1729)
DOALL:     	  %1730 = bitcast i8** %14 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1730)
DOALL:     	  %1731 = bitcast i32** %15 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1731)
DOALL:     	  %1732 = bitcast i32* %16 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1732)
DOALL:     	  %1733 = bitcast i64* %17 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1733)
DOALL:     	  %1734 = bitcast i64* %18 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1734)
DOALL:     	  %1735 = bitcast i64* %19 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1735)
DOALL:     	  %1736 = bitcast i32* %20 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1736)
DOALL:     	  %1737 = bitcast i64* %21 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1737)
DOALL:     	  %1738 = bitcast [2 x i64]* %22 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 16, i8* %1738)
DOALL:     	  %1739 = bitcast i8** %23 to i8*
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1739)
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 1, i8* %24)
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 1, i8* %25)
DOALL:     	  br label %1740
DOALL:     	  br label %1752
DOALL:     	  br label %1740
DOALL:     	  br label %181
DOALL:     Edges: 18704
DOALL:     Loop-carried data dependences
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %1704 = load i8, i8* %1703, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         store i8 %1667, i8* %1668, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %1741 = load i32, i32* %42, align 4 --->   store i32 0, i32* %42, align 4 via memory
DOALL:         store i32 0, i32* %42, align 4 --->   store i32 0, i32* %42, align 4 via memory
DOALL:         %1748 = load i8, i8* %1747, align 1 --->   store i8 %1715, i8* %1716, align 1 via memory
DOALL:         %1748 = load i8, i8* %1747, align 1 --->   store i8 %1567, i8* %1568, align 1 via memory
DOALL:         store i32 0, i32* %36, align 4 --->   store i32 0, i32* %36, align 4 via memory
DOALL:         store i32 0, i32* %36, align 4 --->   %1742 = load i32, i32* %36, align 4 via memory
DOALL:         store i32 0, i32* %36, align 4 --->   %207 = load i32, i32* %36, align 4 via memory
DOALL:         store i32 0, i32* %36, align 4 --->   store i32 %201, i32* %36, align 4 via memory
DOALL:         store i32 0, i32* %36, align 4 --->   %192 = load i32, i32* %36, align 4 via memory
DOALL:         store i32 0, i32* %36, align 4 --->   %200 = load i32, i32* %36, align 4 via memory
DOALL:         store i32 %1754, i32* %42, align 4 --->   store i32 0, i32* %42, align 4 via memory
DOALL:         %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) --->   %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) via memory
DOALL:         %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) --->   %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) via memory
DOALL:         %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) --->   call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 via memory
DOALL:         %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) --->   %183 = call i32 @feof(%struct._IO_FILE* %182) #10 via memory
DOALL:         %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) --->   %189 = call i32 @feof(%struct._IO_FILE* %188) #10 via memory
DOALL:         %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) --->   %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) via memory
DOALL:         %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) --->   %183 = call i32 @feof(%struct._IO_FILE* %182) #10 via memory
DOALL:         %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) --->   %189 = call i32 @feof(%struct._IO_FILE* %188) #10 via memory
DOALL:         %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) --->   %198 = call i32 @getc(%struct._IO_FILE* %197) via memory
DOALL:         %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) --->   %198 = call i32 @getc(%struct._IO_FILE* %197) via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1681, i8* %1682, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         store i8 %1687, i8* %1688, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %1699 = load i8, i8* %1697, align 1 --->   store i8 %199, i8* %203, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         store i8 %1692, i8* %1693, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         store i8 %1705, i8* %1709, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         store i8 %1715, i8* %1716, align 1 --->   store i8 %1567, i8* %1568, align 1 via memory
DOALL:         store i8 %1715, i8* %1716, align 1 --->   %1748 = load i8, i8* %1747, align 1 via memory
DOALL:         store i8 %1715, i8* %1716, align 1 --->   store i8 %1715, i8* %1716, align 1 via memory
DOALL:         store i32 %1724, i32* %1725, align 4 --->   store i32 %1724, i32* %1725, align 4 via memory
DOALL:         store i32 %1724, i32* %1725, align 4 --->   %226 = load i32, i32* %225, align 4 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1662, i8* %1663, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %183 = call i32 @feof(%struct._IO_FILE* %182) #10 --->   %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) via memory
DOALL:         %183 = call i32 @feof(%struct._IO_FILE* %182) #10 --->   %183 = call i32 @feof(%struct._IO_FILE* %182) #10 via memory
DOALL:         %183 = call i32 @feof(%struct._IO_FILE* %182) #10 --->   %183 = call i32 @feof(%struct._IO_FILE* %182) #10 via memory
DOALL:         %183 = call i32 @feof(%struct._IO_FILE* %182) #10 --->   %183 = call i32 @feof(%struct._IO_FILE* %182) #10 via memory
DOALL:         %183 = call i32 @feof(%struct._IO_FILE* %182) #10 --->   %189 = call i32 @feof(%struct._IO_FILE* %188) #10 via memory
DOALL:         %183 = call i32 @feof(%struct._IO_FILE* %182) #10 --->   %198 = call i32 @getc(%struct._IO_FILE* %197) via memory
DOALL:         %183 = call i32 @feof(%struct._IO_FILE* %182) #10 --->   %189 = call i32 @feof(%struct._IO_FILE* %188) #10 via memory
DOALL:         %183 = call i32 @feof(%struct._IO_FILE* %182) #10 --->   %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) via memory
DOALL:         %183 = call i32 @feof(%struct._IO_FILE* %182) #10 --->   call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 via memory
DOALL:         %183 = call i32 @feof(%struct._IO_FILE* %182) #10 --->   %198 = call i32 @getc(%struct._IO_FILE* %197) via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         store i8 %1675, i8* %1676, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         %1622 = load i8, i8* %1620, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         store i8 %1656, i8* %1657, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         store i8 %1650, i8* %1651, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 --->   %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) via memory
DOALL:         call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 --->   %183 = call i32 @feof(%struct._IO_FILE* %182) #10 via memory
DOALL:         call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 --->   store i64 %1489, i64* %1491, align 8 via memory
DOALL:         call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 --->   store i64 %1493, i64* %1494, align 8 via memory
DOALL:         call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 --->   %198 = call i32 @getc(%struct._IO_FILE* %197) via memory
DOALL:         call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 --->   %313 = load i64, i64* %312, align 8 via memory
DOALL:         call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 --->   store i64 %1489, i64* %1491, align 8 via memory
DOALL:         call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 --->   store i64 %1493, i64* %1494, align 8 via memory
DOALL:         call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 --->   %310 = load i64, i64* %309, align 8 via memory
DOALL:         call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 --->   call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 via memory
DOALL:         call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 --->   %189 = call i32 @feof(%struct._IO_FILE* %188) #10 via memory
DOALL:         call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 --->   call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 via memory
DOALL:         call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 --->   call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         %1636 = load i8, i8* %1634, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         %1629 = load i8, i8* %1627, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %1617 = load i8, i8* %1615, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %1609 = load i8, i8* %1607, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         %1602 = load i8, i8* %1600, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %1595 = load i8, i8* %1593, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %1590 = load i8, i8* %1588, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1570, i8* %1574, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1567, i8* %1568, align 1 --->   store i8 %1567, i8* %1568, align 1 via memory
DOALL:         store i8 %1567, i8* %1568, align 1 --->   %1748 = load i8, i8* %1747, align 1 via memory
DOALL:         store i8 %1567, i8* %1568, align 1 --->   store i8 %1715, i8* %1716, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         %1563 = load i8, i8* %1562, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         %1557 = load i8, i8* %1555, align 1 --->   store i8 %199, i8* %203, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         store i8 %1550, i8* %1551, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         store i8 %1545, i8* %1546, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1539, i8* %1540, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         store i8 %1533, i8* %1534, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1525, i8* %1526, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1520, i8* %1521, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         store i8 %1514, i8* %1515, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %1704 = load i8, i8* %1703, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %1636 = load i8, i8* %1634, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %1629 = load i8, i8* %1627, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %1617 = load i8, i8* %1615, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %1609 = load i8, i8* %1607, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %1595 = load i8, i8* %1593, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %1590 = load i8, i8* %1588, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %1563 = load i8, i8* %1562, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %247 = load i8, i8* %245, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %1622 = load i8, i8* %1620, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %269 = load i8, i8* %267, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %242 = load i8, i8* %240, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %1602 = load i8, i8* %1600, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %281 = load i8, i8* %279, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %254 = load i8, i8* %252, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %274 = load i8, i8* %272, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %288 = load i8, i8* %286, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   %261 = load i8, i8* %259, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         store i8 %1508, i8* %1509, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         store i64 %1493, i64* %1494, align 8 --->   call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 via memory
DOALL:         store i64 %1493, i64* %1494, align 8 --->   %313 = load i64, i64* %312, align 8 via memory
DOALL:         store i64 %1493, i64* %1494, align 8 --->   %310 = load i64, i64* %309, align 8 via memory
DOALL:         store i64 %1493, i64* %1494, align 8 --->   store i64 %1489, i64* %1491, align 8 via memory
DOALL:         store i64 %1493, i64* %1494, align 8 --->   call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 via memory
DOALL:         store i64 %1493, i64* %1494, align 8 --->   store i64 %1493, i64* %1494, align 8 via memory
DOALL:         store i64 %1489, i64* %1491, align 8 --->   call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 via memory
DOALL:         store i64 %1489, i64* %1491, align 8 --->   %313 = load i64, i64* %312, align 8 via memory
DOALL:         store i64 %1489, i64* %1491, align 8 --->   %310 = load i64, i64* %309, align 8 via memory
DOALL:         store i64 %1489, i64* %1491, align 8 --->   store i64 %1489, i64* %1491, align 8 via memory
DOALL:         store i64 %1489, i64* %1491, align 8 --->   call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 via memory
DOALL:         store i64 %1489, i64* %1491, align 8 --->   store i64 %1493, i64* %1494, align 8 via memory
DOALL:         %189 = call i32 @feof(%struct._IO_FILE* %188) #10 --->   %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) via memory
DOALL:         %189 = call i32 @feof(%struct._IO_FILE* %188) #10 --->   call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 via memory
DOALL:         %189 = call i32 @feof(%struct._IO_FILE* %188) #10 --->   %198 = call i32 @getc(%struct._IO_FILE* %197) via memory
DOALL:         %189 = call i32 @feof(%struct._IO_FILE* %188) #10 --->   %183 = call i32 @feof(%struct._IO_FILE* %182) #10 via memory
DOALL:         %189 = call i32 @feof(%struct._IO_FILE* %188) #10 --->   %183 = call i32 @feof(%struct._IO_FILE* %182) #10 via memory
DOALL:         %189 = call i32 @feof(%struct._IO_FILE* %188) #10 --->   %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) via memory
DOALL:         %189 = call i32 @feof(%struct._IO_FILE* %188) #10 --->   %189 = call i32 @feof(%struct._IO_FILE* %188) #10 via memory
DOALL:         %189 = call i32 @feof(%struct._IO_FILE* %188) #10 --->   %189 = call i32 @feof(%struct._IO_FILE* %188) #10 via memory
DOALL:         %189 = call i32 @feof(%struct._IO_FILE* %188) #10 --->   %189 = call i32 @feof(%struct._IO_FILE* %188) #10 via memory
DOALL:         %189 = call i32 @feof(%struct._IO_FILE* %188) #10 --->   %198 = call i32 @getc(%struct._IO_FILE* %197) via memory
DOALL:         %310 = load i64, i64* %309, align 8 --->   store i64 %1489, i64* %1491, align 8 via memory
DOALL:         %310 = load i64, i64* %309, align 8 --->   call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 via memory
DOALL:         %310 = load i64, i64* %309, align 8 --->   store i64 %1493, i64* %1494, align 8 via memory
DOALL:         %313 = load i64, i64* %312, align 8 --->   store i64 %1489, i64* %1491, align 8 via memory
DOALL:         %313 = load i64, i64* %312, align 8 --->   store i64 %1493, i64* %1494, align 8 via memory
DOALL:         %313 = load i64, i64* %312, align 8 --->   call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 via memory
DOALL:         %198 = call i32 @getc(%struct._IO_FILE* %197) --->   %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) via memory
DOALL:         %198 = call i32 @getc(%struct._IO_FILE* %197) --->   %1751 = call i32 @fputc(i32 %1749, %struct._IO_FILE* %1750) via memory
DOALL:         %198 = call i32 @getc(%struct._IO_FILE* %197) --->   call void @BF_encrypt(i64* %1642, %struct.bf_key_st* %1643, i32 1) #10 via memory
DOALL:         %198 = call i32 @getc(%struct._IO_FILE* %197) --->   %198 = call i32 @getc(%struct._IO_FILE* %197) via memory
DOALL:         %198 = call i32 @getc(%struct._IO_FILE* %197) --->   %183 = call i32 @feof(%struct._IO_FILE* %182) #10 via memory
DOALL:         %198 = call i32 @getc(%struct._IO_FILE* %197) --->   %189 = call i32 @feof(%struct._IO_FILE* %188) #10 via memory
DOALL:         %198 = call i32 @getc(%struct._IO_FILE* %197) --->   %183 = call i32 @feof(%struct._IO_FILE* %182) #10 via memory
DOALL:         %198 = call i32 @getc(%struct._IO_FILE* %197) --->   %189 = call i32 @feof(%struct._IO_FILE* %188) #10 via memory
DOALL:         %198 = call i32 @getc(%struct._IO_FILE* %197) --->   %198 = call i32 @getc(%struct._IO_FILE* %197) via memory
DOALL:         %198 = call i32 @getc(%struct._IO_FILE* %197) --->   %198 = call i32 @getc(%struct._IO_FILE* %197) via memory
DOALL:         store i8 %199, i8* %203, align 1 --->   store i8 %199, i8* %203, align 1 via memory
DOALL:         store i8 %199, i8* %203, align 1 --->   %1699 = load i8, i8* %1697, align 1 via memory
DOALL:         store i8 %199, i8* %203, align 1 --->   %1557 = load i8, i8* %1555, align 1 via memory
DOALL:         %226 = load i32, i32* %225, align 4 --->   store i32 %1724, i32* %1725, align 4 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %242 = load i8, i8* %240, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         %247 = load i8, i8* %245, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %254 = load i8, i8* %252, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         %261 = load i8, i8* %259, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %269 = load i8, i8* %267, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %274 = load i8, i8* %272, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %281 = load i8, i8* %279, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1687, i8* %1688, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1533, i8* %1534, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1662, i8* %1663, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1525, i8* %1526, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1539, i8* %1540, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1667, i8* %1668, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1514, i8* %1515, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1508, i8* %1509, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1545, i8* %1546, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1705, i8* %1709, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1570, i8* %1574, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1650, i8* %1651, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1550, i8* %1551, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1692, i8* %1693, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1656, i8* %1657, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1675, i8* %1676, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1520, i8* %1521, align 1 via memory
DOALL:         %288 = load i8, i8* %286, align 1 --->   store i8 %1681, i8* %1682, align 1 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   No remaining calls need to be inlined due to loop-carried data dependences
Inliner:   The code has not been modified
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.226067e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.476280e+01%)
Noelle:     Loop "  %188 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.777598e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.083973e-09%)
Noelle:     Loop "  %233 = load i64, i64* %21, align 8" (3.531943e+01%)
Noelle:     Loop "  %1741 = load i32, i32* %42, align 4" (4.001005e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.083973e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.471789e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.031251e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.647021e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.018343e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.226067e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.476280e+01%)
Noelle:     Loop "  %188 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.777598e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.083973e-09%)
Noelle:     Loop "  %233 = load i64, i64* %21, align 8" (3.531943e+01%)
Noelle:     Loop "  %1741 = load i32, i32* %42, align 4" (4.001005e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.083973e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.471789e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.031251e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.647021e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.018343e+01%)
NOELLE: FixedPoint: Exit
NOELLE: Inliner: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.9PHu6y5XrG (.ll version is /tmp/tmp.TStpw3u418)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.BAiyfqX0pq (.ll version is /tmp/tmp.U2xDA416On)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.9PHu6y5XrG -o /tmp/tmp.BAiyfqX0pq
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.9PHu6y5XrG -o /tmp/tmp.BAiyfqX0pq
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.9PHu6y5XrG -o /tmp/tmp.BAiyfqX0pq
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.9PHu6y5XrG -o /tmp/tmp.BAiyfqX0pq
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       main
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       BF_encrypt
DeadFunctionEliminator:       toupper
DeadFunctionEliminator:       fopen
DeadFunctionEliminator:       feof
DeadFunctionEliminator:       getc
DeadFunctionEliminator:       fputc
DeadFunctionEliminator:       BF_set_key
DeadFunctionEliminator:       llvm.memcpy.p0i8.p0i8.i64
DeadFunctionEliminator:       BF_cfb64_encrypt
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.226067e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.476280e+01%)
Noelle:     Loop "  %188 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.777598e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.083973e-09%)
Noelle:     Loop "  %233 = load i64, i64* %21, align 8" (3.531943e+01%)
Noelle:     Loop "  %1741 = load i32, i32* %42, align 4" (4.001005e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.083973e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.471789e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.031251e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.647021e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.018343e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.226067e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.476280e+01%)
Noelle:     Loop "  %188 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.777598e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.083973e-09%)
Noelle:     Loop "  %233 = load i64, i64* %21, align 8" (3.531943e+01%)
Noelle:     Loop "  %1741 = load i32, i32* %42, align 4" (4.001005e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.083973e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.471789e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.031251e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.647021e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.018343e+01%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-enable baseline_pre.bc baseline_pre.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: Enablers: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.VGeHb7BfUo (.ll version is /tmp/tmp.jkpE2AraTP)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.abuEEN0E7l (.ll version is /tmp/tmp.214vDvOD28)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.226067e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.476280e+01%)
Noelle:     Loop "  %188 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.777598e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.083973e-09%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %233 = load i64, i64* %21, align 8" (3.531943e+01%)
Noelle:     Loop "  %1741 = load i32, i32* %42, align 4" (4.001005e+00%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:  Disable "BF_set_key" as cold function
EnablersManager:   Try to improve all 4 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %188 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %188 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8"
LICM:     Invariant = "  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %188 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %1741 = load i32, i32* %42, align 4
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %233 = load i64, i64* %21, align 8
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.226067e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.476280e+01%)
Noelle:     Loop "  %188 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.777598e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.083973e-09%)
Noelle:     Loop "  %233 = load i64, i64* %21, align 8" (3.531943e+01%)
Noelle:     Loop "  %1741 = load i32, i32* %42, align 4" (4.001005e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.083973e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.471789e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.031251e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.647021e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.018343e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.232115e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.449035e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.295448e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.099184e-09%)
Noelle:     Loop "  %233 = load i64, i64* %21, align 8" (3.549364e+01%)
Noelle:     Loop "  %1741 = load i32, i32* %42, align 4" (4.020739e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.099184e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.488913e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.036337e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.669942e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.028298e+01%)
NOELLE: FixedPoint:       There are 0 different instructions and -2 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.232115e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.449035e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.295448e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.099184e-09%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %233 = load i64, i64* %21, align 8" (3.549364e+01%)
Noelle:     Loop "  %1741 = load i32, i32* %42, align 4" (4.020739e+00%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:  Disable "BF_set_key" as cold function
EnablersManager:   Try to improve all 4 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %190 = call i32 @feof(%struct._IO_FILE* %187) #10
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %191, label %._crit_edge10, label %192, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %1741 = load i32, i32* %42, align 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1741 = load i32, i32* %42, align 4"
LICM:     Invariant = "  %1742 = load i32, i32* %36, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1750 = load %struct._IO_FILE*, %struct._IO_FILE** %41, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %233 = load i64, i64* %21, align 8
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.232115e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.449035e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.295448e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.099184e-09%)
Noelle:     Loop "  %233 = load i64, i64* %21, align 8" (3.549364e+01%)
Noelle:     Loop "  %1741 = load i32, i32* %42, align 4" (4.020739e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.099184e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.488913e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.036337e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.669942e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.028298e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.238222e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.421521e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.316740e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.114546e-09%)
Noelle:     Loop "  %233 = load i64, i64* %21, align 8" (3.566957e+01%)
Noelle:     Loop "  %1743 = load i32, i32* %42, align 4" (3.532448e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.114546e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.506207e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.041474e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.693089e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.038351e+01%)
NOELLE: FixedPoint:       There are 0 different instructions and -2 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
NOELLE: FixedPoint:     Invocation 2
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.238222e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.421521e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.316740e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.114546e-09%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %233 = load i64, i64* %21, align 8" (3.566957e+01%)
Noelle:     Loop "  %1743 = load i32, i32* %42, align 4" (3.532448e+00%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:  Disable "BF_set_key" as cold function
EnablersManager:   Try to improve all 4 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %190 = call i32 @feof(%struct._IO_FILE* %187) #10
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %191, label %._crit_edge10, label %192, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %1743 = load i32, i32* %42, align 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1743 = load i32, i32* %42, align 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1744, label %1745, label %1755, !prof !40
Mem2Reg:   The loop has 1SCCs that each one access the same memory location
Mem2Reg:     Loop invariant memory location:   %42 = alloca i32, align 4
Mem2Reg:     SCC:
Internal nodes: 7
	  %1743 = load i32, i32* %42, align 4
	  %1744 = icmp slt i32 %1743, %1740
	  br i1 %1744, label %1745, label %1755, !prof !40
	  %1746 = load i32, i32* %42, align 4
	  %1753 = load i32, i32* %42, align 4
	  %1754 = add nsw i32 %1753, 1
	  store i32 %1754, i32* %42, align 4
External nodes: 7
	  %1747 = sext i32 %1746 to i64
	  %1748 = getelementptr inbounds [40 x i8], [40 x i8]* %32, i64 0, i64 %1747
	  %1749 = load i8, i8* %1748, align 1
	  %1750 = zext i8 %1749 to i32
	  %1751 = call i32 @fputc(i32 %1750, %struct._IO_FILE* %1741)
	  br label %1752
	  br label %1742
Edges: 26

Mem2Reg:  Collecting and ordering memory loads/stores by basic block
Mem2Reg: Iterating basic blocks to determine last stored values
Mem2Reg: placeholder PHI required: label %1743
Mem2Reg:  checking for last value entering block: label %1743
Mem2Reg:  Last value entering block: label %1743	  %1744 = phi i32 
Mem2Reg:  checking for last value entering block: label %1747
Mem2Reg:  Last value entering block: label %1747	  %1744 = phi i32 
Mem2Reg:  checking for last value entering block: label %1754
Mem2Reg:  Last value entering block: label %1754	  %1744 = phi i32 
Mem2Reg:  Value updated:   %1756 = add nsw i32 %1744, 1
Mem2Reg:  Removing
  %1748 = load i32, i32* %42, align 4
Mem2Reg:  Removing
  %1754 = load i32, i32* %42, align 4
Mem2Reg:  Removing
  store i32 %1754, i32* %42, align 4
Mem2Reg:  Removing
  %1745 = load i32, i32* %42, align 4
Mem2Reg:       The memory location has been promoted
Mem2Reg: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %233 = load i64, i64* %21, align 8
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.238222e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.421521e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.316740e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.114546e-09%)
Noelle:     Loop "  %233 = load i64, i64* %21, align 8" (3.566957e+01%)
Noelle:     Loop "  %1743 = load i32, i32* %42, align 4" (3.532448e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.114546e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.506207e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.041474e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.693089e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.038351e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.247458e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.379911e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.348938e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.137777e-09%)
Noelle:     Loop "  %233 = load i64, i64* %21, align 8" (3.593563e+01%)
Noelle:     Loop "  %1745 = icmp slt i32 %1744, %1740" (2.800261e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.137777e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.532359e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.049242e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.728095e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.053555e+01%)
NOELLE: FixedPoint:       There are -2 different instructions and -6 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
NOELLE: FixedPoint:     Invocation 3
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.247379e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.380267e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.348663e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.137579e-09%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %233 = load i64, i64* %21, align 8" (3.593336e+01%)
Noelle:     Loop "  %1745 = icmp slt i32 %1744, %1740" (2.800084e+00%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:  Disable "BF_set_key" as cold function
EnablersManager:   Try to improve all 4 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %190 = call i32 @feof(%struct._IO_FILE* %187) #10
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %191, label %._crit_edge10, label %192, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %233 = load i64, i64* %21, align 8
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %233 = load i64, i64* %21, align 8"
LICM:     Invariant = "  %1495 = bitcast i64** %3 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1496 = bitcast %struct.bf_key_st** %4 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1497 = bitcast i32* %5 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1498 = bitcast i64* %6 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1499 = bitcast i64* %7 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1500 = bitcast i64** %8 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1501 = bitcast i64** %9 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1502 = load i8*, i8** %14, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1503 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1528 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1553 = load i8*, i8** %14, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %266 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %293 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %294 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %295 = load %struct.bf_key_st*, %struct.bf_key_st** %13, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %296 = bitcast i64** %3 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %297 = bitcast %struct.bf_key_st** %4 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %298 = bitcast i32* %5 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %299 = bitcast i64* %6 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %300 = bitcast i64* %7 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %301 = bitcast i64** %8 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %302 = bitcast i64** %9 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  store i64* %294, i64** %3, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store %struct.bf_key_st* %295, %struct.bf_key_st** %4, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i32 1, i32* %5, align 4
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %1745 = icmp slt i32 %1744, %1740
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.247379e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.380267e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.348663e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.137579e-09%)
Noelle:     Loop "  %233 = load i64, i64* %21, align 8" (3.593336e+01%)
Noelle:     Loop "  %1745 = icmp slt i32 %1744, %1740" (2.800084e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.137579e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.532136e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.049176e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.727796e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.053426e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.254356e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.348833e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.372987e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.155129e-09%)
Noelle:     Loop "  %255 = load i64, i64* %21, align 8" (3.543517e+01%)
Noelle:     Loop "  %1745 = icmp slt i32 %1744, %1740" (2.815746e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.155129e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.551892e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.055044e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.754240e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.064911e+01%)
NOELLE: FixedPoint:       There are 0 different instructions and -22 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
NOELLE: FixedPoint:     Invocation 4
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.254356e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.348833e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.372987e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.155129e-09%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %255 = load i64, i64* %21, align 8" (3.543517e+01%)
Noelle:     Loop "  %1745 = icmp slt i32 %1744, %1740" (2.815746e+00%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:  Disable "BF_set_key" as cold function
EnablersManager:   Try to improve all 4 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %190 = call i32 @feof(%struct._IO_FILE* %187) #10
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %191, label %._crit_edge10, label %192, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %1745 = icmp slt i32 %1744, %1740
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1745 = icmp slt i32 %1744, %1740"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1745, label %1746, label %1754, !prof !40
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %255 = load i64, i64* %21, align 8
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %255 = load i64, i64* %21, align 8"
LICM:     Invariant = "  store i64* %234, i64** %3, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store %struct.bf_key_st* %235, %struct.bf_key_st** %4, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i32 1, i32* %5, align 4
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %257, label %258, label %1578, !prof !40
Mem2Reg:   The loop has 2SCCs that each one access the same memory location
Mem2Reg:     Loop invariant memory location:   %20 = alloca i32, align 4
Mem2Reg:     SCC:
Internal nodes: 7
	  %259 = load i32, i32* %20, align 4
	  %1560 = load i32, i32* %20, align 4
	  %1572 = load i32, i32* %20, align 4
	  %1575 = load i32, i32* %20, align 4
	  %1576 = add nsw i32 %1575, 1
	  %1577 = and i32 %1576, 7
	  store i32 %1577, i32* %20, align 4
External nodes: 4
	  br i1 %257, label %258, label %1578, !prof !40
	  %260 = icmp eq i32 %259, 0
	  %1561 = sext i32 %1560 to i64
	  %1573 = sext i32 %1572 to i64
Edges: 22

Mem2Reg:  Collecting and ordering memory loads/stores by basic block
Mem2Reg: Iterating basic blocks to determine last stored values
Mem2Reg: placeholder PHI required: label %255
Mem2Reg:  checking for last value entering block: label %255
Mem2Reg:  Last value entering block: label %255	  %256 = phi i32 
Mem2Reg:  checking for last value entering block: label %260
Mem2Reg:  Last value entering block: label %260	  %256 = phi i32 
Mem2Reg:  checking for last value entering block: label %263
Mem2Reg:  Last value entering block: label %263	  %256 = phi i32 
Mem2Reg:  checking for last value entering block: label %._crit_edge.i
Mem2Reg:  Last value entering block: label %._crit_edge.i	  %256 = phi i32 
Mem2Reg:  checking for last value entering block: label %329
Mem2Reg:  Last value entering block: label %329	  %256 = phi i32 
Mem2Reg:  checking for last value entering block: label %915
Mem2Reg:  Last value entering block: label %915	  %256 = phi i32 
Mem2Reg: placeholder PHI required: label %1556
Mem2Reg:  checking for last value entering block: label %1556
Mem2Reg:  Last value entering block: label %1556	  %1557 = phi i32 
Mem2Reg:  Value updated:   %1580 = and i32 %1579, 7
Mem2Reg:  checking for last value entering block: label %BF_encrypt.exit.i
Mem2Reg:  Last value entering block: label %BF_encrypt.exit.i	  %1501 = phi i32 [ %256, %915 ], [ %256, %329 ]
Mem2Reg:  Removing
  %261 = load i32, i32* %20, align 4
Mem2Reg:  Removing
  %1563 = load i32, i32* %20, align 4
Mem2Reg:  Removing
  %1574 = load i32, i32* %20, align 4
Mem2Reg:  Removing
  %1576 = load i32, i32* %20, align 4
Mem2Reg:  Removing
  store i32 %1577, i32* %20, align 4
Mem2Reg:       The memory location has been promoted
Mem2Reg: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.254356e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.348833e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.372987e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.155129e-09%)
Noelle:     Loop "  %255 = load i64, i64* %21, align 8" (3.543517e+01%)
Noelle:     Loop "  %1745 = icmp slt i32 %1744, %1740" (2.815746e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.155129e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.551892e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.055044e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.754240e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.064911e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.263350e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.308315e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.404340e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.177750e-09%)
Noelle:     Loop "  %257 = load i64, i64* %21, align 8" (3.495945e+01%)
Noelle:     Loop "  %1745 = icmp slt i32 %1744, %1740" (2.835934e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.177750e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.577359e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.062609e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.788327e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.079716e+01%)
NOELLE: FixedPoint:       There are -3 different instructions and -8 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
NOELLE: FixedPoint:     Invocation 5
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.263269e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.308680e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.404058e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.177547e-09%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %257 = load i64, i64* %21, align 8" (3.495721e+01%)
Noelle:     Loop "  %1745 = icmp slt i32 %1744, %1740" (2.835753e+00%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:  Disable "BF_set_key" as cold function
EnablersManager:   Try to improve all 4 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %190 = call i32 @feof(%struct._IO_FILE* %187) #10
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %191, label %._crit_edge10, label %192, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %1745 = icmp slt i32 %1744, %1740
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1745 = icmp slt i32 %1744, %1740"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1745, label %1746, label %1754, !prof !40
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %257 = load i64, i64* %21, align 8
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %257 = load i64, i64* %21, align 8"
LICM:     Invariant = "  store i64* %234, i64** %3, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store %struct.bf_key_st* %235, %struct.bf_key_st** %4, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i32 1, i32* %5, align 4
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %259, label %260, label %1578, !prof !40
Mem2Reg:   The loop has 2SCCs that each one access the same memory location
Mem2Reg:     Loop invariant memory location:   %5 = alloca i32, align 4
Mem2Reg:     SCC:
Internal nodes: 11
	  %261 = icmp eq i32 %256, 0
	  br i1 %261, label %262, label %._crit_edge.i, !prof !42
	  store i32 1, i32* %5, align 4
	  %326 = load i32, i32* %5, align 4
	  %327 = icmp ne i32 %326, 0
	  br i1 %327, label %328, label %914, !prof !43
	  %256 = phi i32 [ %1577, %1556 ], [ %254, %231 ]
	  %1500 = phi i32 [ %256, %914 ], [ %256, %328 ]
	  %1557 = phi i32 [ %1500, %BF_encrypt.exit.i ], [ %256, %._crit_edge.i ]
	  %1576 = add nsw i32 %1557, 1
	  %1577 = and i32 %1576, 7
External nodes: 1423
	  br i1 %259, label %260, label %1578, !prof !40
	  br label %1556
	  %263 = load i8*, i8** %23, align 8
	  %264 = getelementptr inbounds i8, i8* %263, i32 1
	  store i8* %264, i8** %23, align 8
	  %265 = load i8, i8* %263, align 1
	  %266 = zext i8 %265 to i64
	  %267 = shl i64 %266, 24
	  store i64 %267, i64* %17, align 8
	  %268 = load i8*, i8** %23, align 8
	  %269 = getelementptr inbounds i8, i8* %268, i32 1
	  store i8* %269, i8** %23, align 8
	  %270 = load i8, i8* %268, align 1
	  %271 = zext i8 %270 to i64
	  %272 = shl i64 %271, 16
	  %273 = load i64, i64* %17, align 8
	  %274 = or i64 %273, %272
	  store i64 %274, i64* %17, align 8
	  %275 = load i8*, i8** %23, align 8
	  %276 = getelementptr inbounds i8, i8* %275, i32 1
	  store i8* %276, i8** %23, align 8
	  %277 = load i8, i8* %275, align 1
	  %278 = zext i8 %277 to i64
	  %279 = shl i64 %278, 8
	  %280 = load i64, i64* %17, align 8
	  %281 = or i64 %280, %279
	  store i64 %281, i64* %17, align 8
	  %282 = load i8*, i8** %23, align 8
	  %283 = getelementptr inbounds i8, i8* %282, i32 1
	  store i8* %283, i8** %23, align 8
	  store i64 %307, i64* %18, align 8
	  %308 = load i8*, i8** %23, align 8
	  %309 = getelementptr inbounds i8, i8* %308, i32 1
	  store i8* %309, i8** %23, align 8
	  %310 = load i8, i8* %308, align 1
	  %311 = zext i8 %310 to i64
	  %312 = load i64, i64* %18, align 8
	  %313 = or i64 %312, %311
	  store i64 %313, i64* %18, align 8
	  %314 = load i64, i64* %18, align 8
	  store i64 %314, i64* %233, align 8
	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %236) #10
	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %237) #10
	  call void @llvm.lifetime.start.p0i8(i64 4, i8* %238) #10
	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %239) #10
	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %240) #10
	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %241) #10
	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %242) #10
	  store i64* %234, i64** %3, align 8
	  store %struct.bf_key_st* %235, %struct.bf_key_st** %4, align 8
	  %315 = load %struct.bf_key_st*, %struct.bf_key_st** %4, align 8
	  %316 = getelementptr inbounds %struct.bf_key_st, %struct.bf_key_st* %315, i32 0, i32 0
	  %317 = getelementptr inbounds [18 x i64], [18 x i64]* %316, i64 0, i64 0
	  store i64* %317, i64** %8, align 8
	  %318 = load %struct.bf_key_st*, %struct.bf_key_st** %4, align 8
	  %319 = getelementptr inbounds %struct.bf_key_st, %struct.bf_key_st* %318, i32 0, i32 1
	  %320 = getelementptr inbounds [1024 x i64], [1024 x i64]* %319, i64 0, i64 0
	  store i64* %320, i64** %9, align 8
	  %321 = load i64*, i64** %3, align 8
	  %322 = load i64, i64* %321, align 8
	  store i64 %322, i64* %6, align 8
	  %323 = load i64*, i64** %3, align 8
	  %324 = getelementptr inbounds i64, i64* %323, i64 1
	  %325 = load i64, i64* %324, align 8
	  store i64 %325, i64* %7, align 8
	  %329 = load i64*, i64** %8, align 8
	  %330 = load i64, i64* %329, align 8
	  %331 = load i64, i64* %6, align 8
	  %332 = xor i64 %331, %330
	  store i64 %332, i64* %6, align 8
	  %333 = load i64*, i64** %8, align 8
	  %334 = getelementptr inbounds i64, i64* %333, i64 1
	  %335 = load i64, i64* %334, align 8
	  %336 = load i64, i64* %7, align 8
	  %337 = xor i64 %336, %335
	  store i64 %337, i64* %7, align 8
	  %338 = load i64*, i64** %9, align 8
	  %339 = load i64, i64* %6, align 8
	  %340 = lshr i64 %339, 24
	  %341 = getelementptr inbounds i64, i64* %338, i64 %340
	  %342 = load i64, i64* %341, align 8
	  %343 = load i64*, i64** %9, align 8
	  %344 = load i64, i64* %6, align 8
	  %345 = lshr i64 %344, 16
	  %346 = and i64 %345, 255
	  %347 = add i64 256, %346
	  %348 = getelementptr inbounds i64, i64* %343, i64 %347
	  %349 = load i64, i64* %348, align 8
	  %350 = add i64 %342, %349
	  %351 = load i64*, i64** %9, align 8
	  %352 = load i64, i64* %6, align 8
	  %353 = lshr i64 %352, 8
	  %354 = and i64 %353, 255
	  %355 = add i64 512, %354
	  %356 = getelementptr inbounds i64, i64* %351, i64 %355
	  %284 = load i8, i8* %282, align 1
	  %285 = zext i8 %284 to i64
	  %286 = load i64, i64* %17, align 8
	  %287 = or i64 %286, %285
	  store i64 %287, i64* %17, align 8
	  %288 = load i64, i64* %17, align 8
	  store i64 %288, i64* %232, align 16
	  %289 = load i8*, i8** %23, align 8
	  %290 = getelementptr inbounds i8, i8* %289, i32 1
	  store i8* %290, i8** %23, align 8
	  %291 = load i8, i8* %289, align 1
	  %292 = zext i8 %291 to i64
	  %293 = shl i64 %292, 24
	  store i64 %293, i64* %18, align 8
	  %294 = load i8*, i8** %23, align 8
	  %295 = getelementptr inbounds i8, i8* %294, i32 1
	  store i8* %295, i8** %23, align 8
	  %296 = load i8, i8* %294, align 1
	  %297 = zext i8 %296 to i64
	  %298 = shl i64 %297, 16
	  %299 = load i64, i64* %18, align 8
	  %300 = or i64 %299, %298
	  store i64 %300, i64* %18, align 8
	  %301 = load i8*, i8** %23, align 8
	  %302 = getelementptr inbounds i8, i8* %301, i32 1
	  store i8* %302, i8** %23, align 8
	  %303 = load i8, i8* %301, align 1
	  %304 = zext i8 %303 to i64
	  %305 = shl i64 %304, 8
	  %306 = load i64, i64* %18, align 8
	  %307 = or i64 %306, %305
	  %357 = load i64, i64* %356, align 8
	  %358 = xor i64 %350, %357
	  %359 = load i64*, i64** %9, align 8
	  %360 = load i64, i64* %6, align 8
	  %361 = and i64 %360, 255
	  %362 = add i64 768, %361
	  %363 = getelementptr inbounds i64, i64* %359, i64 %362
	  %364 = load i64, i64* %363, align 8
	  %365 = add i64 %358, %364
	  %366 = and i64 %365, 4294967295
	  %367 = load i64, i64* %7, align 8
	  %368 = xor i64 %367, %366
	  store i64 %368, i64* %7, align 8
	  %369 = load i64*, i64** %8, align 8
	  %370 = getelementptr inbounds i64, i64* %369, i64 2
	  %371 = load i64, i64* %370, align 8
	  %372 = load i64, i64* %6, align 8
	  %373 = xor i64 %372, %371
	  store i64 %373, i64* %6, align 8
	  %374 = load i64*, i64** %9, align 8
	  %375 = load i64, i64* %7, align 8
	  %376 = lshr i64 %375, 24
	  %377 = getelementptr inbounds i64, i64* %374, i64 %376
	  %378 = load i64, i64* %377, align 8
	  %379 = load i64*, i64** %9, align 8
	  %380 = load i64, i64* %7, align 8
	  %381 = lshr i64 %380, 16
	  %382 = and i64 %381, 255
	  %383 = add i64 256, %382
	  %384 = getelementptr inbounds i64, i64* %379, i64 %383
	  %385 = load i64, i64* %384, align 8
	  %386 = add i64 %378, %385
	  %387 = load i64*, i64** %9, align 8
	  %388 = load i64, i64* %7, align 8
	  %389 = lshr i64 %388, 8
	  %390 = and i64 %389, 255
	  %391 = add i64 512, %390
	  %392 = getelementptr inbounds i64, i64* %387, i64 %391
	  %393 = load i64, i64* %392, align 8
	  %394 = xor i64 %386, %393
	  %395 = load i64*, i64** %9, align 8
	  %396 = load i64, i64* %7, align 8
	  %397 = and i64 %396, 255
	  %398 = add i64 768, %397
	  %399 = getelementptr inbounds i64, i64* %395, i64 %398
	  %400 = load i64, i64* %399, align 8
	  %401 = add i64 %394, %400
	  %402 = and i64 %401, 4294967295
	  %403 = load i64, i64* %6, align 8
	  %404 = xor i64 %403, %402
	  store i64 %404, i64* %6, align 8
	  %405 = load i64*, i64** %8, align 8
	  %406 = getelementptr inbounds i64, i64* %405, i64 3
	  %407 = load i64, i64* %406, align 8
	  %408 = load i64, i64* %7, align 8
	  %409 = xor i64 %408, %407
	  store i64 %409, i64* %7, align 8
	  %410 = load i64*, i64** %9, align 8
	  %411 = load i64, i64* %6, align 8
	  %412 = lshr i64 %411, 24
	  %413 = getelementptr inbounds i64, i64* %410, i64 %412
	  %414 = load i64, i64* %413, align 8
	  %415 = load i64*, i64** %9, align 8
	  %416 = load i64, i64* %6, align 8
	  %417 = lshr i64 %416, 16
	  %418 = and i64 %417, 255
	  %419 = add i64 256, %418
	  %420 = getelementptr inbounds i64, i64* %415, i64 %419
	  %421 = load i64, i64* %420, align 8
	  %422 = add i64 %414, %421
	  %423 = load i64*, i64** %9, align 8
	  %424 = load i64, i64* %6, align 8
	  %425 = lshr i64 %424, 8
	  %426 = and i64 %425, 255
	  %427 = add i64 512, %426
	  %428 = getelementptr inbounds i64, i64* %423, i64 %427
	  %429 = load i64, i64* %428, align 8
	  %430 = xor i64 %422, %429
	  %431 = load i64*, i64** %9, align 8
	  %432 = load i64, i64* %6, align 8
	  %433 = and i64 %432, 255
	  %434 = add i64 768, %433
	  %435 = getelementptr inbounds i64, i64* %431, i64 %434
	  %436 = load i64, i64* %435, align 8
	  %437 = add i64 %430, %436
	  %438 = and i64 %437, 4294967295
	  %439 = load i64, i64* %7, align 8
	  %440 = xor i64 %439, %438
	  store i64 %440, i64* %7, align 8
	  %441 = load i64*, i64** %8, align 8
	  %442 = getelementptr inbounds i64, i64* %441, i64 4
	  %443 = load i64, i64* %442, align 8
	  %444 = load i64, i64* %6, align 8
	  %445 = xor i64 %444, %443
	  store i64 %445, i64* %6, align 8
	  %446 = load i64*, i64** %9, align 8
	  %447 = load i64, i64* %7, align 8
	  %448 = lshr i64 %447, 24
	  %449 = getelementptr inbounds i64, i64* %446, i64 %448
	  %450 = load i64, i64* %449, align 8
	  %451 = load i64*, i64** %9, align 8
	  %452 = load i64, i64* %7, align 8
	  %453 = lshr i64 %452, 16
	  %454 = and i64 %453, 255
	  %455 = add i64 256, %454
	  %456 = getelementptr inbounds i64, i64* %451, i64 %455
	  %457 = load i64, i64* %456, align 8
	  %458 = add i64 %450, %457
	  %459 = load i64*, i64** %9, align 8
	  %460 = load i64, i64* %7, align 8
	  %461 = lshr i64 %460, 8
	  %462 = and i64 %461, 255
	  %463 = add i64 512, %462
	  %464 = getelementptr inbounds i64, i64* %459, i64 %463
	  %465 = load i64, i64* %464, align 8
	  %466 = xor i64 %458, %465
	  %467 = load i64*, i64** %9, align 8
	  %468 = load i64, i64* %7, align 8
	  %469 = and i64 %468, 255
	  %470 = add i64 768, %469
	  store i64 %692, i64* %6, align 8
	  %693 = load i64*, i64** %8, align 8
	  %694 = getelementptr inbounds i64, i64* %693, i64 11
	  %695 = load i64, i64* %694, align 8
	  %696 = load i64, i64* %7, align 8
	  %697 = xor i64 %696, %695
	  store i64 %697, i64* %7, align 8
	  %698 = load i64*, i64** %9, align 8
	  %699 = load i64, i64* %6, align 8
	  %700 = lshr i64 %699, 24
	  %701 = getelementptr inbounds i64, i64* %698, i64 %700
	  %702 = load i64, i64* %701, align 8
	  %703 = load i64*, i64** %9, align 8
	  %704 = load i64, i64* %6, align 8
	  %705 = lshr i64 %704, 16
	  %706 = and i64 %705, 255
	  %707 = add i64 256, %706
	  %708 = getelementptr inbounds i64, i64* %703, i64 %707
	  %709 = load i64, i64* %708, align 8
	  %710 = add i64 %702, %709
	  %711 = load i64*, i64** %9, align 8
	  %712 = load i64, i64* %6, align 8
	  %713 = lshr i64 %712, 8
	  %714 = and i64 %713, 255
	  %715 = add i64 512, %714
	  %716 = getelementptr inbounds i64, i64* %711, i64 %715
	  %717 = load i64, i64* %716, align 8
	  %718 = xor i64 %710, %717
	  %719 = load i64*, i64** %9, align 8
	  %720 = load i64, i64* %6, align 8
	  %721 = and i64 %720, 255
	  %722 = add i64 768, %721
	  %723 = getelementptr inbounds i64, i64* %719, i64 %722
	  %724 = load i64, i64* %723, align 8
	  %725 = add i64 %718, %724
	  %726 = and i64 %725, 4294967295
	  %727 = load i64, i64* %7, align 8
	  %728 = xor i64 %727, %726
	  store i64 %728, i64* %7, align 8
	  %729 = load i64*, i64** %8, align 8
	  %730 = getelementptr inbounds i64, i64* %729, i64 12
	  %731 = load i64, i64* %730, align 8
	  %732 = load i64, i64* %6, align 8
	  %733 = xor i64 %732, %731
	  store i64 %733, i64* %6, align 8
	  %734 = load i64*, i64** %9, align 8
	  %735 = load i64, i64* %7, align 8
	  %736 = lshr i64 %735, 24
	  %737 = getelementptr inbounds i64, i64* %734, i64 %736
	  %738 = load i64, i64* %737, align 8
	  %739 = load i64*, i64** %9, align 8
	  %740 = load i64, i64* %7, align 8
	  %741 = lshr i64 %740, 16
	  %742 = and i64 %741, 255
	  %743 = add i64 256, %742
	  %744 = getelementptr inbounds i64, i64* %739, i64 %743
	  %745 = load i64, i64* %744, align 8
	  %746 = add i64 %738, %745
	  %747 = load i64*, i64** %9, align 8
	  %748 = load i64, i64* %7, align 8
	  %749 = lshr i64 %748, 8
	  %750 = and i64 %749, 255
	  %751 = add i64 512, %750
	  %752 = getelementptr inbounds i64, i64* %747, i64 %751
	  %753 = load i64, i64* %752, align 8
	  %754 = xor i64 %746, %753
	  %755 = load i64*, i64** %9, align 8
	  %756 = load i64, i64* %7, align 8
	  %757 = and i64 %756, 255
	  %758 = add i64 768, %757
	  %759 = getelementptr inbounds i64, i64* %755, i64 %758
	  %760 = load i64, i64* %759, align 8
	  %761 = add i64 %754, %760
	  %762 = and i64 %761, 4294967295
	  %763 = load i64, i64* %6, align 8
	  %764 = xor i64 %763, %762
	  store i64 %764, i64* %6, align 8
	  %765 = load i64*, i64** %8, align 8
	  %766 = getelementptr inbounds i64, i64* %765, i64 13
	  %767 = load i64, i64* %766, align 8
	  %768 = load i64, i64* %7, align 8
	  %769 = xor i64 %768, %767
	  store i64 %769, i64* %7, align 8
	  %770 = load i64*, i64** %9, align 8
	  %771 = load i64, i64* %6, align 8
	  %772 = lshr i64 %771, 24
	  %773 = getelementptr inbounds i64, i64* %770, i64 %772
	  %774 = load i64, i64* %773, align 8
	  %775 = load i64*, i64** %9, align 8
	  %776 = load i64, i64* %6, align 8
	  %777 = lshr i64 %776, 16
	  %778 = and i64 %777, 255
	  %779 = add i64 256, %778
	  %780 = getelementptr inbounds i64, i64* %775, i64 %779
	  %781 = load i64, i64* %780, align 8
	  %782 = add i64 %774, %781
	  %783 = load i64*, i64** %9, align 8
	  %784 = load i64, i64* %6, align 8
	  %785 = lshr i64 %784, 8
	  %786 = and i64 %785, 255
	  %787 = add i64 512, %786
	  %788 = getelementptr inbounds i64, i64* %783, i64 %787
	  %789 = load i64, i64* %788, align 8
	  %790 = xor i64 %782, %789
	  %791 = load i64*, i64** %9, align 8
	  %792 = load i64, i64* %6, align 8
	  %793 = and i64 %792, 255
	  %794 = add i64 768, %793
	  %795 = getelementptr inbounds i64, i64* %791, i64 %794
	  %796 = load i64, i64* %795, align 8
	  %797 = add i64 %790, %796
	  %798 = and i64 %797, 4294967295
	  %799 = load i64, i64* %7, align 8
	  %800 = xor i64 %799, %798
	  store i64 %800, i64* %7, align 8
	  %801 = load i64*, i64** %8, align 8
	  %802 = getelementptr inbounds i64, i64* %801, i64 14
	  %803 = load i64, i64* %802, align 8
	  %804 = load i64, i64* %6, align 8
	  %805 = xor i64 %804, %803
	  store i64 %805, i64* %6, align 8
	  %806 = load i64*, i64** %9, align 8
	  %807 = load i64, i64* %7, align 8
	  %808 = lshr i64 %807, 24
	  %809 = getelementptr inbounds i64, i64* %806, i64 %808
	  %810 = load i64, i64* %809, align 8
	  %811 = load i64*, i64** %9, align 8
	  %812 = load i64, i64* %7, align 8
	  %813 = lshr i64 %812, 16
	  %814 = and i64 %813, 255
	  %815 = add i64 256, %814
	  %816 = getelementptr inbounds i64, i64* %811, i64 %815
	  %817 = load i64, i64* %816, align 8
	  %818 = add i64 %810, %817
	  %819 = load i64*, i64** %9, align 8
	  %820 = load i64, i64* %7, align 8
	  %821 = lshr i64 %820, 8
	  %822 = and i64 %821, 255
	  %823 = add i64 512, %822
	  %824 = getelementptr inbounds i64, i64* %819, i64 %823
	  %825 = load i64, i64* %824, align 8
	  %826 = xor i64 %818, %825
	  %827 = load i64*, i64** %9, align 8
	  %828 = load i64, i64* %7, align 8
	  %829 = and i64 %828, 255
	  %830 = add i64 768, %829
	  %831 = getelementptr inbounds i64, i64* %827, i64 %830
	  %832 = load i64, i64* %831, align 8
	  %833 = add i64 %826, %832
	  %834 = and i64 %833, 4294967295
	  %835 = load i64, i64* %6, align 8
	  %912 = load i64, i64* %7, align 8
	  %913 = xor i64 %912, %911
	  store i64 %913, i64* %7, align 8
	  br label %BF_encrypt.exit.i
	  %915 = load i64*, i64** %8, align 8
	  %916 = getelementptr inbounds i64, i64* %915, i64 17
	  %917 = load i64, i64* %916, align 8
	  %918 = load i64, i64* %6, align 8
	  %919 = xor i64 %918, %917
	  store i64 %919, i64* %6, align 8
	  %920 = load i64*, i64** %8, align 8
	  %921 = getelementptr inbounds i64, i64* %920, i64 16
	  %922 = load i64, i64* %921, align 8
	  %923 = load i64, i64* %7, align 8
	  %924 = xor i64 %923, %922
	  store i64 %924, i64* %7, align 8
	  %925 = load i64*, i64** %9, align 8
	  %926 = load i64, i64* %6, align 8
	  %927 = lshr i64 %926, 24
	  %928 = getelementptr inbounds i64, i64* %925, i64 %927
	  %929 = load i64, i64* %928, align 8
	  %930 = load i64*, i64** %9, align 8
	  %931 = load i64, i64* %6, align 8
	  %932 = lshr i64 %931, 16
	  %933 = and i64 %932, 255
	  %934 = add i64 256, %933
	  %935 = getelementptr inbounds i64, i64* %930, i64 %934
	  %936 = load i64, i64* %935, align 8
	  %937 = add i64 %929, %936
	  %938 = load i64*, i64** %9, align 8
	  %939 = load i64, i64* %6, align 8
	  %940 = lshr i64 %939, 8
	  %941 = and i64 %940, 255
	  %942 = add i64 512, %941
	  %943 = getelementptr inbounds i64, i64* %938, i64 %942
	  %944 = load i64, i64* %943, align 8
	  %945 = xor i64 %937, %944
	  %946 = load i64*, i64** %9, align 8
	  %947 = load i64, i64* %6, align 8
	  %948 = and i64 %947, 255
	  %949 = add i64 768, %948
	  %950 = getelementptr inbounds i64, i64* %946, i64 %949
	  %951 = load i64, i64* %950, align 8
	  %952 = add i64 %945, %951
	  %953 = and i64 %952, 4294967295
	  %954 = load i64, i64* %7, align 8
	  %955 = xor i64 %954, %953
	  store i64 %955, i64* %7, align 8
	  %956 = load i64*, i64** %8, align 8
	  %957 = getelementptr inbounds i64, i64* %956, i64 15
	  %958 = load i64, i64* %957, align 8
	  %959 = load i64, i64* %6, align 8
	  %960 = xor i64 %959, %958
	  store i64 %960, i64* %6, align 8
	  %961 = load i64*, i64** %9, align 8
	  %962 = load i64, i64* %7, align 8
	  %963 = lshr i64 %962, 24
	  %964 = getelementptr inbounds i64, i64* %961, i64 %963
	  %965 = load i64, i64* %964, align 8
	  %966 = load i64*, i64** %9, align 8
	  %967 = load i64, i64* %7, align 8
	  %968 = lshr i64 %967, 16
	  %969 = and i64 %968, 255
	  %970 = add i64 256, %969
	  %971 = getelementptr inbounds i64, i64* %966, i64 %970
	  %972 = load i64, i64* %971, align 8
	  %973 = add i64 %965, %972
	  %974 = load i64*, i64** %9, align 8
	  %975 = load i64, i64* %7, align 8
	  %976 = lshr i64 %975, 8
	  %977 = and i64 %976, 255
	  %978 = add i64 512, %977
	  %979 = getelementptr inbounds i64, i64* %974, i64 %978
	  %980 = load i64, i64* %979, align 8
	  %981 = xor i64 %973, %980
	  %982 = load i64*, i64** %9, align 8
	  %983 = load i64, i64* %7, align 8
	  %471 = getelementptr inbounds i64, i64* %467, i64 %470
	  %472 = load i64, i64* %471, align 8
	  %473 = add i64 %466, %472
	  %474 = and i64 %473, 4294967295
	  %475 = load i64, i64* %6, align 8
	  %476 = xor i64 %475, %474
	  store i64 %476, i64* %6, align 8
	  %477 = load i64*, i64** %8, align 8
	  %478 = getelementptr inbounds i64, i64* %477, i64 5
	  %479 = load i64, i64* %478, align 8
	  %480 = load i64, i64* %7, align 8
	  %481 = xor i64 %480, %479
	  store i64 %481, i64* %7, align 8
	  %482 = load i64*, i64** %9, align 8
	  %483 = load i64, i64* %6, align 8
	  %484 = lshr i64 %483, 24
	  %485 = getelementptr inbounds i64, i64* %482, i64 %484
	  %486 = load i64, i64* %485, align 8
	  %487 = load i64*, i64** %9, align 8
	  %488 = load i64, i64* %6, align 8
	  %489 = lshr i64 %488, 16
	  %490 = and i64 %489, 255
	  %491 = add i64 256, %490
	  %492 = getelementptr inbounds i64, i64* %487, i64 %491
	  %493 = load i64, i64* %492, align 8
	  %494 = add i64 %486, %493
	  %495 = load i64*, i64** %9, align 8
	  %496 = load i64, i64* %6, align 8
	  %497 = lshr i64 %496, 8
	  %498 = and i64 %497, 255
	  %499 = add i64 512, %498
	  %500 = getelementptr inbounds i64, i64* %495, i64 %499
	  %501 = load i64, i64* %500, align 8
	  %502 = xor i64 %494, %501
	  %503 = load i64*, i64** %9, align 8
	  %504 = load i64, i64* %6, align 8
	  %505 = and i64 %504, 255
	  %506 = add i64 768, %505
	  %507 = getelementptr inbounds i64, i64* %503, i64 %506
	  %508 = load i64, i64* %507, align 8
	  %509 = add i64 %502, %508
	  %510 = and i64 %509, 4294967295
	  %511 = load i64, i64* %7, align 8
	  %512 = xor i64 %511, %510
	  store i64 %512, i64* %7, align 8
	  %513 = load i64*, i64** %8, align 8
	  %514 = getelementptr inbounds i64, i64* %513, i64 6
	  %515 = load i64, i64* %514, align 8
	  %516 = load i64, i64* %6, align 8
	  %517 = xor i64 %516, %515
	  store i64 %517, i64* %6, align 8
	  %518 = load i64*, i64** %9, align 8
	  %519 = load i64, i64* %7, align 8
	  %520 = lshr i64 %519, 24
	  %521 = getelementptr inbounds i64, i64* %518, i64 %520
	  %522 = load i64, i64* %521, align 8
	  %523 = load i64*, i64** %9, align 8
	  %524 = load i64, i64* %7, align 8
	  %525 = lshr i64 %524, 16
	  %526 = and i64 %525, 255
	  %527 = add i64 256, %526
	  %528 = getelementptr inbounds i64, i64* %523, i64 %527
	  %529 = load i64, i64* %528, align 8
	  %530 = add i64 %522, %529
	  %531 = load i64*, i64** %9, align 8
	  %532 = load i64, i64* %7, align 8
	  %533 = lshr i64 %532, 8
	  %534 = and i64 %533, 255
	  %535 = add i64 512, %534
	  %536 = getelementptr inbounds i64, i64* %531, i64 %535
	  %537 = load i64, i64* %536, align 8
	  %538 = xor i64 %530, %537
	  %539 = load i64*, i64** %9, align 8
	  %540 = load i64, i64* %7, align 8
	  %541 = and i64 %540, 255
	  %542 = add i64 768, %541
	  %543 = getelementptr inbounds i64, i64* %539, i64 %542
	  %544 = load i64, i64* %543, align 8
	  %545 = add i64 %538, %544
	  %546 = and i64 %545, 4294967295
	  %547 = load i64, i64* %6, align 8
	  %548 = xor i64 %547, %546
	  store i64 %548, i64* %6, align 8
	  %549 = load i64*, i64** %8, align 8
	  %550 = getelementptr inbounds i64, i64* %549, i64 7
	  %551 = load i64, i64* %550, align 8
	  %552 = load i64, i64* %7, align 8
	  %553 = xor i64 %552, %551
	  store i64 %553, i64* %7, align 8
	  %554 = load i64*, i64** %9, align 8
	  %555 = load i64, i64* %6, align 8
	  %556 = lshr i64 %555, 24
	  %557 = getelementptr inbounds i64, i64* %554, i64 %556
	  %558 = load i64, i64* %557, align 8
	  %559 = load i64*, i64** %9, align 8
	  %560 = load i64, i64* %6, align 8
	  %561 = lshr i64 %560, 16
	  %562 = and i64 %561, 255
	  %563 = add i64 256, %562
	  %564 = getelementptr inbounds i64, i64* %559, i64 %563
	  %565 = load i64, i64* %564, align 8
	  %566 = add i64 %558, %565
	  %567 = load i64*, i64** %9, align 8
	  %568 = load i64, i64* %6, align 8
	  %569 = lshr i64 %568, 8
	  %570 = and i64 %569, 255
	  %571 = add i64 512, %570
	  %572 = getelementptr inbounds i64, i64* %567, i64 %571
	  %573 = load i64, i64* %572, align 8
	  %574 = xor i64 %566, %573
	  %575 = load i64*, i64** %9, align 8
	  %576 = load i64, i64* %6, align 8
	  %577 = and i64 %576, 255
	  %578 = add i64 768, %577
	  %579 = getelementptr inbounds i64, i64* %575, i64 %578
	  %580 = load i64, i64* %579, align 8
	  %581 = add i64 %574, %580
	  %582 = and i64 %581, 4294967295
	  %583 = load i64, i64* %7, align 8
	  %584 = xor i64 %583, %582
	  store i64 %584, i64* %7, align 8
	  %585 = load i64*, i64** %8, align 8
	  %586 = getelementptr inbounds i64, i64* %585, i64 8
	  %587 = load i64, i64* %586, align 8
	  %588 = load i64, i64* %6, align 8
	  %589 = xor i64 %588, %587
	  store i64 %589, i64* %6, align 8
	  %590 = load i64*, i64** %9, align 8
	  %591 = load i64, i64* %7, align 8
	  %592 = lshr i64 %591, 24
	  %593 = getelementptr inbounds i64, i64* %590, i64 %592
	  %594 = load i64, i64* %593, align 8
	  %595 = load i64*, i64** %9, align 8
	  %596 = load i64, i64* %7, align 8
	  %597 = lshr i64 %596, 16
	  %598 = and i64 %597, 255
	  %599 = add i64 256, %598
	  %600 = getelementptr inbounds i64, i64* %595, i64 %599
	  %601 = load i64, i64* %600, align 8
	  %602 = add i64 %594, %601
	  %603 = load i64*, i64** %9, align 8
	  %604 = load i64, i64* %7, align 8
	  %605 = lshr i64 %604, 8
	  %606 = and i64 %605, 255
	  %607 = add i64 512, %606
	  %608 = getelementptr inbounds i64, i64* %603, i64 %607
	  %609 = load i64, i64* %608, align 8
	  %610 = xor i64 %602, %609
	  %611 = load i64*, i64** %9, align 8
	  %612 = load i64, i64* %7, align 8
	  %613 = and i64 %612, 255
	  %614 = add i64 768, %613
	  %615 = getelementptr inbounds i64, i64* %611, i64 %614
	  %616 = load i64, i64* %615, align 8
	  %617 = add i64 %610, %616
	  %618 = and i64 %617, 4294967295
	  %619 = load i64, i64* %6, align 8
	  %620 = xor i64 %619, %618
	  store i64 %620, i64* %6, align 8
	  %621 = load i64*, i64** %8, align 8
	  %622 = getelementptr inbounds i64, i64* %621, i64 9
	  %623 = load i64, i64* %622, align 8
	  %624 = load i64, i64* %7, align 8
	  %625 = xor i64 %624, %623
	  store i64 %625, i64* %7, align 8
	  %626 = load i64*, i64** %9, align 8
	  %627 = load i64, i64* %6, align 8
	  %628 = lshr i64 %627, 24
	  %629 = getelementptr inbounds i64, i64* %626, i64 %628
	  %630 = load i64, i64* %629, align 8
	  %631 = load i64*, i64** %9, align 8
	  %632 = load i64, i64* %6, align 8
	  %633 = lshr i64 %632, 16
	  %634 = and i64 %633, 255
	  %635 = add i64 256, %634
	  %636 = getelementptr inbounds i64, i64* %631, i64 %635
	  %637 = load i64, i64* %636, align 8
	  %638 = add i64 %630, %637
	  %639 = load i64*, i64** %9, align 8
	  %640 = load i64, i64* %6, align 8
	  %641 = lshr i64 %640, 8
	  %642 = and i64 %641, 255
	  %643 = add i64 512, %642
	  %644 = getelementptr inbounds i64, i64* %639, i64 %643
	  %645 = load i64, i64* %644, align 8
	  %646 = xor i64 %638, %645
	  %647 = load i64*, i64** %9, align 8
	  %648 = load i64, i64* %6, align 8
	  %649 = and i64 %648, 255
	  %650 = add i64 768, %649
	  %651 = getelementptr inbounds i64, i64* %647, i64 %650
	  %652 = load i64, i64* %651, align 8
	  %653 = add i64 %646, %652
	  %654 = and i64 %653, 4294967295
	  %655 = load i64, i64* %7, align 8
	  %656 = xor i64 %655, %654
	  store i64 %656, i64* %7, align 8
	  %657 = load i64*, i64** %8, align 8
	  %658 = getelementptr inbounds i64, i64* %657, i64 10
	  %659 = load i64, i64* %658, align 8
	  %660 = load i64, i64* %6, align 8
	  %661 = xor i64 %660, %659
	  store i64 %661, i64* %6, align 8
	  %662 = load i64*, i64** %9, align 8
	  %663 = load i64, i64* %7, align 8
	  %664 = lshr i64 %663, 24
	  %665 = getelementptr inbounds i64, i64* %662, i64 %664
	  %666 = load i64, i64* %665, align 8
	  %667 = load i64*, i64** %9, align 8
	  %668 = load i64, i64* %7, align 8
	  %669 = lshr i64 %668, 16
	  %670 = and i64 %669, 255
	  %671 = add i64 256, %670
	  %672 = getelementptr inbounds i64, i64* %667, i64 %671
	  %673 = load i64, i64* %672, align 8
	  %674 = add i64 %666, %673
	  %675 = load i64*, i64** %9, align 8
	  %676 = load i64, i64* %7, align 8
	  %677 = lshr i64 %676, 8
	  %678 = and i64 %677, 255
	  %679 = add i64 512, %678
	  %680 = getelementptr inbounds i64, i64* %675, i64 %679
	  %681 = load i64, i64* %680, align 8
	  %682 = xor i64 %674, %681
	  %683 = load i64*, i64** %9, align 8
	  %684 = load i64, i64* %7, align 8
	  %685 = and i64 %684, 255
	  %686 = add i64 768, %685
	  %687 = getelementptr inbounds i64, i64* %683, i64 %686
	  %688 = load i64, i64* %687, align 8
	  %689 = add i64 %682, %688
	  %690 = and i64 %689, 4294967295
	  %691 = load i64, i64* %6, align 8
	  %692 = xor i64 %691, %690
	  %1462 = load i64, i64* %1461, align 8
	  %1463 = load i64, i64* %6, align 8
	  %1464 = xor i64 %1463, %1462
	  store i64 %1464, i64* %6, align 8
	  %1465 = load i64*, i64** %9, align 8
	  %1466 = load i64, i64* %7, align 8
	  %1467 = lshr i64 %1466, 24
	  %1468 = getelementptr inbounds i64, i64* %1465, i64 %1467
	  %1469 = load i64, i64* %1468, align 8
	  %1470 = load i64*, i64** %9, align 8
	  %1471 = load i64, i64* %7, align 8
	  %1472 = lshr i64 %1471, 16
	  %1473 = and i64 %1472, 255
	  %1474 = add i64 256, %1473
	  %1475 = getelementptr inbounds i64, i64* %1470, i64 %1474
	  %1476 = load i64, i64* %1475, align 8
	  %1477 = add i64 %1469, %1476
	  %1478 = load i64*, i64** %9, align 8
	  %1479 = load i64, i64* %7, align 8
	  %1480 = lshr i64 %1479, 8
	  %1481 = and i64 %1480, 255
	  %1482 = add i64 512, %1481
	  %1483 = getelementptr inbounds i64, i64* %1478, i64 %1482
	  %1484 = load i64, i64* %1483, align 8
	  %1485 = xor i64 %1477, %1484
	  %1486 = load i64*, i64** %9, align 8
	  %1487 = load i64, i64* %7, align 8
	  %1488 = and i64 %1487, 255
	  %1489 = add i64 768, %1488
	  %1490 = getelementptr inbounds i64, i64* %1486, i64 %1489
	  %1491 = load i64, i64* %1490, align 8
	  %1492 = add i64 %1485, %1491
	  %1493 = and i64 %1492, 4294967295
	  %1494 = load i64, i64* %6, align 8
	  %1495 = xor i64 %1494, %1493
	  store i64 %1495, i64* %6, align 8
	  %1496 = load i64*, i64** %8, align 8
	  %1497 = load i64, i64* %1496, align 8
	  %1498 = load i64, i64* %7, align 8
	  %1499 = xor i64 %1498, %1497
	  store i64 %1499, i64* %7, align 8
	  br label %BF_encrypt.exit.i
	  %1501 = load i64, i64* %6, align 8
	  %1502 = and i64 %1501, 4294967295
	  %1503 = load i64*, i64** %3, align 8
	  %1504 = getelementptr inbounds i64, i64* %1503, i64 1
	  store i64 %1502, i64* %1504, align 8
	  %1505 = load i64, i64* %7, align 8
	  %1506 = and i64 %1505, 4294967295
	  %1507 = load i64*, i64** %3, align 8
	  store i64 %1506, i64* %1507, align 8
	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %243) #10
	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %244) #10
	  call void @llvm.lifetime.end.p0i8(i64 4, i8* %245) #10
	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %246) #10
	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %247) #10
	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %248) #10
	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %249) #10
	  store i8* %250, i8** %23, align 8
	  %1508 = load i64, i64* %251, align 16
	  store i64 %1508, i64* %19, align 8
	  %1509 = load i64, i64* %19, align 8
	  %1510 = lshr i64 %1509, 24
	  %1511 = and i64 %1510, 255
	  %1512 = trunc i64 %1511 to i8
	  %1513 = load i8*, i8** %23, align 8
	  %1514 = getelementptr inbounds i8, i8* %1513, i32 1
	  store i8* %1514, i8** %23, align 8
	  store i8 %1512, i8* %1513, align 1
	  %1515 = load i64, i64* %19, align 8
	  %1516 = lshr i64 %1515, 16
	  %1517 = and i64 %1516, 255
	  %1518 = trunc i64 %1517 to i8
	  %1519 = load i8*, i8** %23, align 8
	  %1520 = getelementptr inbounds i8, i8* %1519, i32 1
	  store i8* %1520, i8** %23, align 8
	  store i8 %1518, i8* %1519, align 1
	  %1521 = load i64, i64* %19, align 8
	  %1522 = lshr i64 %1521, 8
	  %1523 = and i64 %1522, 255
	  %1524 = trunc i64 %1523 to i8
	  %1525 = load i8*, i8** %23, align 8
	  %1526 = getelementptr inbounds i8, i8* %1525, i32 1
	  store i8* %1526, i8** %23, align 8
	  store i8 %1524, i8* %1525, align 1
	  %1527 = load i64, i64* %19, align 8
	  %1528 = and i64 %1527, 255
	  %1529 = trunc i64 %1528 to i8
	  %1530 = load i8*, i8** %23, align 8
	  %1531 = getelementptr inbounds i8, i8* %1530, i32 1
	  store i8* %1531, i8** %23, align 8
	  store i8 %1529, i8* %1530, align 1
	  %1532 = load i64, i64* %252, align 8
	  store i64 %1532, i64* %19, align 8
	  %1533 = load i64, i64* %19, align 8
	  %1534 = lshr i64 %1533, 24
	  %1535 = and i64 %1534, 255
	  %1536 = trunc i64 %1535 to i8
	  %1537 = load i8*, i8** %23, align 8
	  %1538 = getelementptr inbounds i8, i8* %1537, i32 1
	  store i8* %1538, i8** %23, align 8
	  store i8 %1536, i8* %1537, align 1
	  %1539 = load i64, i64* %19, align 8
	  %1540 = lshr i64 %1539, 16
	  %1541 = and i64 %1540, 255
	  %1542 = trunc i64 %1541 to i8
	  %1543 = load i8*, i8** %23, align 8
	  %1544 = getelementptr inbounds i8, i8* %1543, i32 1
	  store i8* %1544, i8** %23, align 8
	  store i8 %1542, i8* %1543, align 1
	  %1545 = load i64, i64* %19, align 8
	  %1546 = lshr i64 %1545, 8
	  %1547 = and i64 %1546, 255
	  %1548 = trunc i64 %1547 to i8
	  %1549 = load i8*, i8** %23, align 8
	  %1550 = getelementptr inbounds i8, i8* %1549, i32 1
	  store i8* %1550, i8** %23, align 8
	  store i8 %1548, i8* %1549, align 1
	  %1551 = load i64, i64* %19, align 8
	  %1552 = and i64 %1551, 255
	  %1553 = trunc i64 %1552 to i8
	  %1554 = load i8*, i8** %23, align 8
	  %1555 = getelementptr inbounds i8, i8* %1554, i32 1
	  store i8* %1555, i8** %23, align 8
	  store i8 %1553, i8* %1554, align 1
	  store i8* %253, i8** %23, align 8
	  br label %1556
	  %1563 = sext i32 %1557 to i64
	  %1574 = sext i32 %1557 to i64
	  %836 = xor i64 %835, %834
	  store i64 %836, i64* %6, align 8
	  %837 = load i64*, i64** %8, align 8
	  %838 = getelementptr inbounds i64, i64* %837, i64 15
	  %839 = load i64, i64* %838, align 8
	  %840 = load i64, i64* %7, align 8
	  %841 = xor i64 %840, %839
	  store i64 %841, i64* %7, align 8
	  %842 = load i64*, i64** %9, align 8
	  %843 = load i64, i64* %6, align 8
	  %844 = lshr i64 %843, 24
	  %845 = getelementptr inbounds i64, i64* %842, i64 %844
	  %846 = load i64, i64* %845, align 8
	  %847 = load i64*, i64** %9, align 8
	  %848 = load i64, i64* %6, align 8
	  %849 = lshr i64 %848, 16
	  %850 = and i64 %849, 255
	  %851 = add i64 256, %850
	  %852 = getelementptr inbounds i64, i64* %847, i64 %851
	  %853 = load i64, i64* %852, align 8
	  %854 = add i64 %846, %853
	  %855 = load i64*, i64** %9, align 8
	  %856 = load i64, i64* %6, align 8
	  %857 = lshr i64 %856, 8
	  %858 = and i64 %857, 255
	  %859 = add i64 512, %858
	  %860 = getelementptr inbounds i64, i64* %855, i64 %859
	  %861 = load i64, i64* %860, align 8
	  %862 = xor i64 %854, %861
	  %863 = load i64*, i64** %9, align 8
	  %864 = load i64, i64* %6, align 8
	  %865 = and i64 %864, 255
	  %866 = add i64 768, %865
	  %867 = getelementptr inbounds i64, i64* %863, i64 %866
	  %868 = load i64, i64* %867, align 8
	  %869 = add i64 %862, %868
	  %870 = and i64 %869, 4294967295
	  %871 = load i64, i64* %7, align 8
	  %872 = xor i64 %871, %870
	  store i64 %872, i64* %7, align 8
	  %873 = load i64*, i64** %8, align 8
	  %874 = getelementptr inbounds i64, i64* %873, i64 16
	  %875 = load i64, i64* %874, align 8
	  %876 = load i64, i64* %6, align 8
	  %877 = xor i64 %876, %875
	  store i64 %877, i64* %6, align 8
	  %878 = load i64*, i64** %9, align 8
	  %879 = load i64, i64* %7, align 8
	  %880 = lshr i64 %879, 24
	  %881 = getelementptr inbounds i64, i64* %878, i64 %880
	  %882 = load i64, i64* %881, align 8
	  %883 = load i64*, i64** %9, align 8
	  %884 = load i64, i64* %7, align 8
	  %885 = lshr i64 %884, 16
	  %886 = and i64 %885, 255
	  %887 = add i64 256, %886
	  %888 = getelementptr inbounds i64, i64* %883, i64 %887
	  %889 = load i64, i64* %888, align 8
	  %890 = add i64 %882, %889
	  %891 = load i64*, i64** %9, align 8
	  %892 = load i64, i64* %7, align 8
	  %893 = lshr i64 %892, 8
	  %894 = and i64 %893, 255
	  %895 = add i64 512, %894
	  %896 = getelementptr inbounds i64, i64* %891, i64 %895
	  %897 = load i64, i64* %896, align 8
	  %898 = xor i64 %890, %897
	  %899 = load i64*, i64** %9, align 8
	  %900 = load i64, i64* %7, align 8
	  %901 = and i64 %900, 255
	  %902 = add i64 768, %901
	  %903 = getelementptr inbounds i64, i64* %899, i64 %902
	  %904 = load i64, i64* %903, align 8
	  %905 = add i64 %898, %904
	  %906 = and i64 %905, 4294967295
	  %907 = load i64, i64* %6, align 8
	  %908 = xor i64 %907, %906
	  store i64 %908, i64* %6, align 8
	  %909 = load i64*, i64** %8, align 8
	  %910 = getelementptr inbounds i64, i64* %909, i64 17
	  %911 = load i64, i64* %910, align 8
	  %984 = and i64 %983, 255
	  %985 = add i64 768, %984
	  %986 = getelementptr inbounds i64, i64* %982, i64 %985
	  %987 = load i64, i64* %986, align 8
	  %988 = add i64 %981, %987
	  %989 = and i64 %988, 4294967295
	  %990 = load i64, i64* %6, align 8
	  %991 = xor i64 %990, %989
	  store i64 %991, i64* %6, align 8
	  %992 = load i64*, i64** %8, align 8
	  %993 = getelementptr inbounds i64, i64* %992, i64 14
	  %994 = load i64, i64* %993, align 8
	  %995 = load i64, i64* %7, align 8
	  %996 = xor i64 %995, %994
	  store i64 %996, i64* %7, align 8
	  %997 = load i64*, i64** %9, align 8
	  %998 = load i64, i64* %6, align 8
	  %999 = lshr i64 %998, 24
	  %1000 = getelementptr inbounds i64, i64* %997, i64 %999
	  %1001 = load i64, i64* %1000, align 8
	  %1002 = load i64*, i64** %9, align 8
	  %1003 = load i64, i64* %6, align 8
	  %1004 = lshr i64 %1003, 16
	  %1005 = and i64 %1004, 255
	  %1006 = add i64 256, %1005
	  %1007 = getelementptr inbounds i64, i64* %1002, i64 %1006
	  %1008 = load i64, i64* %1007, align 8
	  %1009 = add i64 %1001, %1008
	  %1010 = load i64*, i64** %9, align 8
	  %1011 = load i64, i64* %6, align 8
	  %1012 = lshr i64 %1011, 8
	  %1013 = and i64 %1012, 255
	  %1014 = add i64 512, %1013
	  %1015 = getelementptr inbounds i64, i64* %1010, i64 %1014
	  %1016 = load i64, i64* %1015, align 8
	  %1017 = xor i64 %1009, %1016
	  %1018 = load i64*, i64** %9, align 8
	  %1019 = load i64, i64* %6, align 8
	  %1020 = and i64 %1019, 255
	  %1021 = add i64 768, %1020
	  %1022 = getelementptr inbounds i64, i64* %1018, i64 %1021
	  %1023 = load i64, i64* %1022, align 8
	  %1024 = add i64 %1017, %1023
	  %1025 = and i64 %1024, 4294967295
	  %1026 = load i64, i64* %7, align 8
	  %1027 = xor i64 %1026, %1025
	  store i64 %1027, i64* %7, align 8
	  %1028 = load i64*, i64** %8, align 8
	  %1029 = getelementptr inbounds i64, i64* %1028, i64 13
	  %1030 = load i64, i64* %1029, align 8
	  %1031 = load i64, i64* %6, align 8
	  %1032 = xor i64 %1031, %1030
	  store i64 %1032, i64* %6, align 8
	  %1033 = load i64*, i64** %9, align 8
	  %1034 = load i64, i64* %7, align 8
	  %1035 = lshr i64 %1034, 24
	  %1036 = getelementptr inbounds i64, i64* %1033, i64 %1035
	  %1037 = load i64, i64* %1036, align 8
	  %1038 = load i64*, i64** %9, align 8
	  %1039 = load i64, i64* %7, align 8
	  %1040 = lshr i64 %1039, 16
	  %1041 = and i64 %1040, 255
	  %1042 = add i64 256, %1041
	  %1043 = getelementptr inbounds i64, i64* %1038, i64 %1042
	  %1044 = load i64, i64* %1043, align 8
	  %1045 = add i64 %1037, %1044
	  %1046 = load i64*, i64** %9, align 8
	  %1047 = load i64, i64* %7, align 8
	  %1048 = lshr i64 %1047, 8
	  %1049 = and i64 %1048, 255
	  %1050 = add i64 512, %1049
	  %1051 = getelementptr inbounds i64, i64* %1046, i64 %1050
	  %1052 = load i64, i64* %1051, align 8
	  %1053 = xor i64 %1045, %1052
	  %1054 = load i64*, i64** %9, align 8
	  %1055 = load i64, i64* %7, align 8
	  %1056 = and i64 %1055, 255
	  %1057 = add i64 768, %1056
	  %1058 = getelementptr inbounds i64, i64* %1054, i64 %1057
	  %1059 = load i64, i64* %1058, align 8
	  %1060 = add i64 %1053, %1059
	  %1061 = and i64 %1060, 4294967295
	  %1062 = load i64, i64* %6, align 8
	  %1063 = xor i64 %1062, %1061
	  store i64 %1063, i64* %6, align 8
	  %1064 = load i64*, i64** %8, align 8
	  %1065 = getelementptr inbounds i64, i64* %1064, i64 12
	  %1066 = load i64, i64* %1065, align 8
	  %1067 = load i64, i64* %7, align 8
	  %1068 = xor i64 %1067, %1066
	  store i64 %1068, i64* %7, align 8
	  %1069 = load i64*, i64** %9, align 8
	  %1070 = load i64, i64* %6, align 8
	  %1071 = lshr i64 %1070, 24
	  %1072 = getelementptr inbounds i64, i64* %1069, i64 %1071
	  %1073 = load i64, i64* %1072, align 8
	  %1074 = load i64*, i64** %9, align 8
	  %1075 = load i64, i64* %6, align 8
	  %1076 = lshr i64 %1075, 16
	  %1077 = and i64 %1076, 255
	  %1078 = add i64 256, %1077
	  %1079 = getelementptr inbounds i64, i64* %1074, i64 %1078
	  %1080 = load i64, i64* %1079, align 8
	  %1081 = add i64 %1073, %1080
	  %1082 = load i64*, i64** %9, align 8
	  %1083 = load i64, i64* %6, align 8
	  %1084 = lshr i64 %1083, 8
	  %1085 = and i64 %1084, 255
	  %1086 = add i64 512, %1085
	  %1087 = getelementptr inbounds i64, i64* %1082, i64 %1086
	  %1088 = load i64, i64* %1087, align 8
	  %1089 = xor i64 %1081, %1088
	  %1090 = load i64*, i64** %9, align 8
	  %1091 = load i64, i64* %6, align 8
	  %1092 = and i64 %1091, 255
	  %1093 = add i64 768, %1092
	  %1094 = getelementptr inbounds i64, i64* %1090, i64 %1093
	  %1095 = load i64, i64* %1094, align 8
	  %1096 = add i64 %1089, %1095
	  %1097 = and i64 %1096, 4294967295
	  %1098 = load i64, i64* %7, align 8
	  %1099 = xor i64 %1098, %1097
	  store i64 %1099, i64* %7, align 8
	  %1100 = load i64*, i64** %8, align 8
	  %1101 = getelementptr inbounds i64, i64* %1100, i64 11
	  %1102 = load i64, i64* %1101, align 8
	  %1103 = load i64, i64* %6, align 8
	  %1104 = xor i64 %1103, %1102
	  store i64 %1104, i64* %6, align 8
	  %1105 = load i64*, i64** %9, align 8
	  %1106 = load i64, i64* %7, align 8
	  %1107 = lshr i64 %1106, 24
	  %1108 = getelementptr inbounds i64, i64* %1105, i64 %1107
	  %1109 = load i64, i64* %1108, align 8
	  %1110 = load i64*, i64** %9, align 8
	  %1111 = load i64, i64* %7, align 8
	  %1112 = lshr i64 %1111, 16
	  %1113 = and i64 %1112, 255
	  %1114 = add i64 256, %1113
	  %1115 = getelementptr inbounds i64, i64* %1110, i64 %1114
	  %1116 = load i64, i64* %1115, align 8
	  %1117 = add i64 %1109, %1116
	  %1118 = load i64*, i64** %9, align 8
	  %1119 = load i64, i64* %7, align 8
	  %1120 = lshr i64 %1119, 8
	  %1121 = and i64 %1120, 255
	  %1122 = add i64 512, %1121
	  %1123 = getelementptr inbounds i64, i64* %1118, i64 %1122
	  %1124 = load i64, i64* %1123, align 8
	  %1125 = xor i64 %1117, %1124
	  %1126 = load i64*, i64** %9, align 8
	  %1127 = load i64, i64* %7, align 8
	  %1128 = and i64 %1127, 255
	  %1129 = add i64 768, %1128
	  %1130 = getelementptr inbounds i64, i64* %1126, i64 %1129
	  %1131 = load i64, i64* %1130, align 8
	  %1132 = add i64 %1125, %1131
	  %1133 = and i64 %1132, 4294967295
	  %1134 = load i64, i64* %6, align 8
	  %1135 = xor i64 %1134, %1133
	  store i64 %1135, i64* %6, align 8
	  %1136 = load i64*, i64** %8, align 8
	  %1137 = getelementptr inbounds i64, i64* %1136, i64 10
	  %1138 = load i64, i64* %1137, align 8
	  %1139 = load i64, i64* %7, align 8
	  %1140 = xor i64 %1139, %1138
	  store i64 %1140, i64* %7, align 8
	  %1141 = load i64*, i64** %9, align 8
	  %1142 = load i64, i64* %6, align 8
	  %1143 = lshr i64 %1142, 24
	  %1144 = getelementptr inbounds i64, i64* %1141, i64 %1143
	  %1145 = load i64, i64* %1144, align 8
	  %1146 = load i64*, i64** %9, align 8
	  %1147 = load i64, i64* %6, align 8
	  %1148 = lshr i64 %1147, 16
	  %1149 = and i64 %1148, 255
	  %1150 = add i64 256, %1149
	  %1151 = getelementptr inbounds i64, i64* %1146, i64 %1150
	  %1152 = load i64, i64* %1151, align 8
	  %1153 = add i64 %1145, %1152
	  %1154 = load i64*, i64** %9, align 8
	  %1155 = load i64, i64* %6, align 8
	  %1156 = lshr i64 %1155, 8
	  %1157 = and i64 %1156, 255
	  %1158 = add i64 512, %1157
	  %1159 = getelementptr inbounds i64, i64* %1154, i64 %1158
	  %1160 = load i64, i64* %1159, align 8
	  %1161 = xor i64 %1153, %1160
	  %1162 = load i64*, i64** %9, align 8
	  %1163 = load i64, i64* %6, align 8
	  %1164 = and i64 %1163, 255
	  %1165 = add i64 768, %1164
	  %1166 = getelementptr inbounds i64, i64* %1162, i64 %1165
	  %1167 = load i64, i64* %1166, align 8
	  %1168 = add i64 %1161, %1167
	  %1169 = and i64 %1168, 4294967295
	  %1170 = load i64, i64* %7, align 8
	  %1171 = xor i64 %1170, %1169
	  store i64 %1171, i64* %7, align 8
	  %1172 = load i64*, i64** %8, align 8
	  %1173 = getelementptr inbounds i64, i64* %1172, i64 9
	  %1174 = load i64, i64* %1173, align 8
	  %1175 = load i64, i64* %6, align 8
	  %1176 = xor i64 %1175, %1174
	  store i64 %1176, i64* %6, align 8
	  %1177 = load i64*, i64** %9, align 8
	  %1178 = load i64, i64* %7, align 8
	  %1179 = lshr i64 %1178, 24
	  %1180 = getelementptr inbounds i64, i64* %1177, i64 %1179
	  %1181 = load i64, i64* %1180, align 8
	  %1182 = load i64*, i64** %9, align 8
	  %1183 = load i64, i64* %7, align 8
	  %1184 = lshr i64 %1183, 16
	  %1185 = and i64 %1184, 255
	  %1186 = add i64 256, %1185
	  %1187 = getelementptr inbounds i64, i64* %1182, i64 %1186
	  %1188 = load i64, i64* %1187, align 8
	  %1189 = add i64 %1181, %1188
	  %1190 = load i64*, i64** %9, align 8
	  %1191 = load i64, i64* %7, align 8
	  %1192 = lshr i64 %1191, 8
	  %1193 = and i64 %1192, 255
	  %1194 = add i64 512, %1193
	  %1195 = getelementptr inbounds i64, i64* %1190, i64 %1194
	  %1196 = load i64, i64* %1195, align 8
	  %1197 = xor i64 %1189, %1196
	  %1198 = load i64*, i64** %9, align 8
	  %1199 = load i64, i64* %7, align 8
	  %1200 = and i64 %1199, 255
	  %1201 = add i64 768, %1200
	  %1202 = getelementptr inbounds i64, i64* %1198, i64 %1201
	  %1203 = load i64, i64* %1202, align 8
	  %1204 = add i64 %1197, %1203
	  %1205 = and i64 %1204, 4294967295
	  %1206 = load i64, i64* %6, align 8
	  %1207 = xor i64 %1206, %1205
	  store i64 %1207, i64* %6, align 8
	  %1208 = load i64*, i64** %8, align 8
	  %1209 = getelementptr inbounds i64, i64* %1208, i64 8
	  %1210 = load i64, i64* %1209, align 8
	  %1211 = load i64, i64* %7, align 8
	  %1212 = xor i64 %1211, %1210
	  store i64 %1212, i64* %7, align 8
	  %1213 = load i64*, i64** %9, align 8
	  %1214 = load i64, i64* %6, align 8
	  %1215 = lshr i64 %1214, 24
	  %1216 = getelementptr inbounds i64, i64* %1213, i64 %1215
	  %1217 = load i64, i64* %1216, align 8
	  %1218 = load i64*, i64** %9, align 8
	  %1219 = load i64, i64* %6, align 8
	  %1220 = lshr i64 %1219, 16
	  %1221 = and i64 %1220, 255
	  %1222 = add i64 256, %1221
	  %1223 = getelementptr inbounds i64, i64* %1218, i64 %1222
	  %1224 = load i64, i64* %1223, align 8
	  %1225 = add i64 %1217, %1224
	  %1226 = load i64*, i64** %9, align 8
	  %1227 = load i64, i64* %6, align 8
	  %1228 = lshr i64 %1227, 8
	  %1229 = and i64 %1228, 255
	  %1230 = add i64 512, %1229
	  %1231 = getelementptr inbounds i64, i64* %1226, i64 %1230
	  %1232 = load i64, i64* %1231, align 8
	  %1233 = xor i64 %1225, %1232
	  %1234 = load i64*, i64** %9, align 8
	  %1235 = load i64, i64* %6, align 8
	  %1236 = and i64 %1235, 255
	  %1237 = add i64 768, %1236
	  %1238 = getelementptr inbounds i64, i64* %1234, i64 %1237
	  %1239 = load i64, i64* %1238, align 8
	  %1240 = add i64 %1233, %1239
	  %1241 = and i64 %1240, 4294967295
	  %1242 = load i64, i64* %7, align 8
	  %1243 = xor i64 %1242, %1241
	  store i64 %1243, i64* %7, align 8
	  %1244 = load i64*, i64** %8, align 8
	  %1245 = getelementptr inbounds i64, i64* %1244, i64 7
	  %1246 = load i64, i64* %1245, align 8
	  %1247 = load i64, i64* %6, align 8
	  %1248 = xor i64 %1247, %1246
	  store i64 %1248, i64* %6, align 8
	  %1249 = load i64*, i64** %9, align 8
	  %1250 = load i64, i64* %7, align 8
	  %1251 = lshr i64 %1250, 24
	  %1252 = getelementptr inbounds i64, i64* %1249, i64 %1251
	  %1253 = load i64, i64* %1252, align 8
	  %1254 = load i64*, i64** %9, align 8
	  %1255 = load i64, i64* %7, align 8
	  %1256 = lshr i64 %1255, 16
	  %1257 = and i64 %1256, 255
	  %1258 = add i64 256, %1257
	  %1259 = getelementptr inbounds i64, i64* %1254, i64 %1258
	  %1260 = load i64, i64* %1259, align 8
	  %1261 = add i64 %1253, %1260
	  %1262 = load i64*, i64** %9, align 8
	  %1263 = load i64, i64* %7, align 8
	  %1264 = lshr i64 %1263, 8
	  %1265 = and i64 %1264, 255
	  %1266 = add i64 512, %1265
	  %1267 = getelementptr inbounds i64, i64* %1262, i64 %1266
	  %1268 = load i64, i64* %1267, align 8
	  %1269 = xor i64 %1261, %1268
	  %1270 = load i64*, i64** %9, align 8
	  %1271 = load i64, i64* %7, align 8
	  %1272 = and i64 %1271, 255
	  %1273 = add i64 768, %1272
	  %1274 = getelementptr inbounds i64, i64* %1270, i64 %1273
	  %1275 = load i64, i64* %1274, align 8
	  %1276 = add i64 %1269, %1275
	  %1277 = and i64 %1276, 4294967295
	  %1278 = load i64, i64* %6, align 8
	  %1279 = xor i64 %1278, %1277
	  store i64 %1279, i64* %6, align 8
	  %1280 = load i64*, i64** %8, align 8
	  %1281 = getelementptr inbounds i64, i64* %1280, i64 6
	  %1282 = load i64, i64* %1281, align 8
	  %1283 = load i64, i64* %7, align 8
	  %1284 = xor i64 %1283, %1282
	  store i64 %1284, i64* %7, align 8
	  %1285 = load i64*, i64** %9, align 8
	  %1286 = load i64, i64* %6, align 8
	  %1287 = lshr i64 %1286, 24
	  %1288 = getelementptr inbounds i64, i64* %1285, i64 %1287
	  %1289 = load i64, i64* %1288, align 8
	  %1290 = load i64*, i64** %9, align 8
	  %1291 = load i64, i64* %6, align 8
	  %1292 = lshr i64 %1291, 16
	  %1293 = and i64 %1292, 255
	  %1294 = add i64 256, %1293
	  %1295 = getelementptr inbounds i64, i64* %1290, i64 %1294
	  %1296 = load i64, i64* %1295, align 8
	  %1297 = add i64 %1289, %1296
	  %1298 = load i64*, i64** %9, align 8
	  %1299 = load i64, i64* %6, align 8
	  %1300 = lshr i64 %1299, 8
	  %1301 = and i64 %1300, 255
	  %1302 = add i64 512, %1301
	  %1303 = getelementptr inbounds i64, i64* %1298, i64 %1302
	  %1304 = load i64, i64* %1303, align 8
	  %1305 = xor i64 %1297, %1304
	  %1306 = load i64*, i64** %9, align 8
	  %1307 = load i64, i64* %6, align 8
	  %1308 = and i64 %1307, 255
	  %1309 = add i64 768, %1308
	  %1310 = getelementptr inbounds i64, i64* %1306, i64 %1309
	  %1311 = load i64, i64* %1310, align 8
	  %1312 = add i64 %1305, %1311
	  %1313 = and i64 %1312, 4294967295
	  %1314 = load i64, i64* %7, align 8
	  %1315 = xor i64 %1314, %1313
	  store i64 %1315, i64* %7, align 8
	  %1316 = load i64*, i64** %8, align 8
	  %1317 = getelementptr inbounds i64, i64* %1316, i64 5
	  %1318 = load i64, i64* %1317, align 8
	  %1319 = load i64, i64* %6, align 8
	  %1320 = xor i64 %1319, %1318
	  store i64 %1320, i64* %6, align 8
	  %1321 = load i64*, i64** %9, align 8
	  %1322 = load i64, i64* %7, align 8
	  %1323 = lshr i64 %1322, 24
	  %1324 = getelementptr inbounds i64, i64* %1321, i64 %1323
	  %1325 = load i64, i64* %1324, align 8
	  %1326 = load i64*, i64** %9, align 8
	  %1327 = load i64, i64* %7, align 8
	  %1328 = lshr i64 %1327, 16
	  %1329 = and i64 %1328, 255
	  %1330 = add i64 256, %1329
	  %1331 = getelementptr inbounds i64, i64* %1326, i64 %1330
	  %1332 = load i64, i64* %1331, align 8
	  %1333 = add i64 %1325, %1332
	  %1334 = load i64*, i64** %9, align 8
	  %1335 = load i64, i64* %7, align 8
	  %1336 = lshr i64 %1335, 8
	  %1337 = and i64 %1336, 255
	  %1338 = add i64 512, %1337
	  %1339 = getelementptr inbounds i64, i64* %1334, i64 %1338
	  %1340 = load i64, i64* %1339, align 8
	  %1341 = xor i64 %1333, %1340
	  %1342 = load i64*, i64** %9, align 8
	  %1343 = load i64, i64* %7, align 8
	  %1344 = and i64 %1343, 255
	  %1345 = add i64 768, %1344
	  %1346 = getelementptr inbounds i64, i64* %1342, i64 %1345
	  %1347 = load i64, i64* %1346, align 8
	  %1348 = add i64 %1341, %1347
	  %1349 = and i64 %1348, 4294967295
	  %1350 = load i64, i64* %6, align 8
	  %1351 = xor i64 %1350, %1349
	  store i64 %1351, i64* %6, align 8
	  %1352 = load i64*, i64** %8, align 8
	  %1353 = getelementptr inbounds i64, i64* %1352, i64 4
	  %1354 = load i64, i64* %1353, align 8
	  %1355 = load i64, i64* %7, align 8
	  %1356 = xor i64 %1355, %1354
	  store i64 %1356, i64* %7, align 8
	  %1357 = load i64*, i64** %9, align 8
	  %1358 = load i64, i64* %6, align 8
	  %1359 = lshr i64 %1358, 24
	  %1360 = getelementptr inbounds i64, i64* %1357, i64 %1359
	  %1361 = load i64, i64* %1360, align 8
	  %1362 = load i64*, i64** %9, align 8
	  %1363 = load i64, i64* %6, align 8
	  %1364 = lshr i64 %1363, 16
	  %1365 = and i64 %1364, 255
	  %1366 = add i64 256, %1365
	  %1367 = getelementptr inbounds i64, i64* %1362, i64 %1366
	  %1368 = load i64, i64* %1367, align 8
	  %1369 = add i64 %1361, %1368
	  %1370 = load i64*, i64** %9, align 8
	  %1371 = load i64, i64* %6, align 8
	  %1372 = lshr i64 %1371, 8
	  %1373 = and i64 %1372, 255
	  %1374 = add i64 512, %1373
	  %1375 = getelementptr inbounds i64, i64* %1370, i64 %1374
	  %1376 = load i64, i64* %1375, align 8
	  %1377 = xor i64 %1369, %1376
	  %1378 = load i64*, i64** %9, align 8
	  %1379 = load i64, i64* %6, align 8
	  %1380 = and i64 %1379, 255
	  %1381 = add i64 768, %1380
	  %1382 = getelementptr inbounds i64, i64* %1378, i64 %1381
	  %1383 = load i64, i64* %1382, align 8
	  %1384 = add i64 %1377, %1383
	  %1385 = and i64 %1384, 4294967295
	  %1386 = load i64, i64* %7, align 8
	  %1387 = xor i64 %1386, %1385
	  store i64 %1387, i64* %7, align 8
	  %1388 = load i64*, i64** %8, align 8
	  %1389 = getelementptr inbounds i64, i64* %1388, i64 3
	  %1390 = load i64, i64* %1389, align 8
	  %1391 = load i64, i64* %6, align 8
	  %1392 = xor i64 %1391, %1390
	  store i64 %1392, i64* %6, align 8
	  %1393 = load i64*, i64** %9, align 8
	  %1394 = load i64, i64* %7, align 8
	  %1395 = lshr i64 %1394, 24
	  %1396 = getelementptr inbounds i64, i64* %1393, i64 %1395
	  %1397 = load i64, i64* %1396, align 8
	  %1398 = load i64*, i64** %9, align 8
	  %1399 = load i64, i64* %7, align 8
	  %1400 = lshr i64 %1399, 16
	  %1401 = and i64 %1400, 255
	  %1402 = add i64 256, %1401
	  %1403 = getelementptr inbounds i64, i64* %1398, i64 %1402
	  %1404 = load i64, i64* %1403, align 8
	  %1405 = add i64 %1397, %1404
	  %1406 = load i64*, i64** %9, align 8
	  %1407 = load i64, i64* %7, align 8
	  %1408 = lshr i64 %1407, 8
	  %1409 = and i64 %1408, 255
	  %1410 = add i64 512, %1409
	  %1411 = getelementptr inbounds i64, i64* %1406, i64 %1410
	  %1412 = load i64, i64* %1411, align 8
	  %1413 = xor i64 %1405, %1412
	  %1414 = load i64*, i64** %9, align 8
	  %1415 = load i64, i64* %7, align 8
	  %1416 = and i64 %1415, 255
	  %1417 = add i64 768, %1416
	  %1418 = getelementptr inbounds i64, i64* %1414, i64 %1417
	  %1419 = load i64, i64* %1418, align 8
	  %1420 = add i64 %1413, %1419
	  %1421 = and i64 %1420, 4294967295
	  %1422 = load i64, i64* %6, align 8
	  %1423 = xor i64 %1422, %1421
	  store i64 %1423, i64* %6, align 8
	  %1424 = load i64*, i64** %8, align 8
	  %1425 = getelementptr inbounds i64, i64* %1424, i64 2
	  %1426 = load i64, i64* %1425, align 8
	  %1427 = load i64, i64* %7, align 8
	  %1428 = xor i64 %1427, %1426
	  store i64 %1428, i64* %7, align 8
	  %1429 = load i64*, i64** %9, align 8
	  %1430 = load i64, i64* %6, align 8
	  %1431 = lshr i64 %1430, 24
	  %1432 = getelementptr inbounds i64, i64* %1429, i64 %1431
	  %1433 = load i64, i64* %1432, align 8
	  %1434 = load i64*, i64** %9, align 8
	  %1435 = load i64, i64* %6, align 8
	  %1436 = lshr i64 %1435, 16
	  %1437 = and i64 %1436, 255
	  %1438 = add i64 256, %1437
	  %1439 = getelementptr inbounds i64, i64* %1434, i64 %1438
	  %1440 = load i64, i64* %1439, align 8
	  %1441 = add i64 %1433, %1440
	  %1442 = load i64*, i64** %9, align 8
	  %1443 = load i64, i64* %6, align 8
	  %1444 = lshr i64 %1443, 8
	  %1445 = and i64 %1444, 255
	  %1446 = add i64 512, %1445
	  %1447 = getelementptr inbounds i64, i64* %1442, i64 %1446
	  %1448 = load i64, i64* %1447, align 8
	  %1449 = xor i64 %1441, %1448
	  %1450 = load i64*, i64** %9, align 8
	  %1451 = load i64, i64* %6, align 8
	  %1452 = and i64 %1451, 255
	  %1453 = add i64 768, %1452
	  %1454 = getelementptr inbounds i64, i64* %1450, i64 %1453
	  %1455 = load i64, i64* %1454, align 8
	  %1456 = add i64 %1449, %1455
	  %1457 = and i64 %1456, 4294967295
	  %1458 = load i64, i64* %7, align 8
	  %1459 = xor i64 %1458, %1457
	  store i64 %1459, i64* %7, align 8
	  %1460 = load i64*, i64** %8, align 8
	  %1461 = getelementptr inbounds i64, i64* %1460, i64 1
Edges: 1447

Mem2Reg:  Collecting and ordering memory loads/stores by basic block
Mem2Reg: Iterating basic blocks to determine last stored values
Mem2Reg: placeholder PHI required: label %256
Mem2Reg:  checking for last value entering block: label %256
Mem2Reg:  Last value entering block: label %256	  %258 = phi i32 
Mem2Reg:  checking for last value entering block: label %262
Mem2Reg:  Last value entering block: label %262	  %258 = phi i32 
Mem2Reg:  checking for last value entering block: label %264
Mem2Reg:  Last value entering block: label %264	  %258 = phi i32 
Mem2Reg:  Value updated: i32 1
Mem2Reg:  checking for last value entering block: label %._crit_edge.i
Mem2Reg:  Last value entering block: label %._crit_edge.i	  %258 = phi i32 
Mem2Reg:  checking for last value entering block: label %330
Mem2Reg:  Last value entering block: label %330	i32 1
Mem2Reg:  checking for last value entering block: label %916
Mem2Reg:  Last value entering block: label %916	i32 1
Mem2Reg: placeholder PHI required: label %1558
Mem2Reg:  checking for last value entering block: label %1558
Mem2Reg:  Last value entering block: label %1558	  %1560 = phi i32 
Mem2Reg:  checking for last value entering block: label %BF_encrypt.exit.i
Mem2Reg:  Last value entering block: label %BF_encrypt.exit.i	  %1503 = phi i32 [ 1, %916 ], [ 1, %330 ]
Mem2Reg:  Removing
  store i32 1, i32* %5, align 4
Mem2Reg:  Removing
  %328 = load i32, i32* %5, align 4
Mem2Reg:       The memory location has been promoted
Mem2Reg: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.263269e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.308680e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.404058e+00%)
Noelle:     Loop "  %1581 = load i64, i64* %21, align 8" (3.177547e-09%)
Noelle:     Loop "  %257 = load i64, i64* %21, align 8" (3.495721e+01%)
Noelle:     Loop "  %1745 = icmp slt i32 %1744, %1740" (2.835753e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.177547e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.577130e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.062541e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.788021e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.079583e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.256993e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.336955e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.382178e+00%)
Noelle:     Loop "  %1584 = load i64, i64* %21, align 8" (3.161760e-09%)
Noelle:     Loop "  %259 = load i64, i64* %21, align 8" (3.526762e+01%)
Noelle:     Loop "  %1748 = icmp slt i32 %1747, %1743" (2.821664e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.161760e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.559358e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.057262e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.764233e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.069251e+01%)
NOELLE: FixedPoint:       There are 0 different instructions and -2 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
NOELLE: FixedPoint:     Invocation 6
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.256912e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.337316e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.381899e+00%)
Noelle:     Loop "  %1584 = load i64, i64* %21, align 8" (3.161559e-09%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %259 = load i64, i64* %21, align 8" (3.526537e+01%)
Noelle:     Loop "  %1748 = icmp slt i32 %1747, %1743" (2.821484e+00%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:  Disable "BF_set_key" as cold function
EnablersManager:   Try to improve all 4 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %190 = call i32 @feof(%struct._IO_FILE* %187) #10
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %191, label %._crit_edge10, label %192, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %1748 = icmp slt i32 %1747, %1743
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1748 = icmp slt i32 %1747, %1743"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1748, label %1749, label %1757, !prof !40
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %259 = load i64, i64* %21, align 8
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %259 = load i64, i64* %21, align 8"
LICM:     Invariant = "  %1502 = phi i32 [ 1, %915 ], [ 1, %329 ]
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  store i64* %234, i64** %3, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store %struct.bf_key_st* %235, %struct.bf_key_st** %4, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  %328 = icmp ne i32 1, 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.256912e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.337316e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.381899e+00%)
Noelle:     Loop "  %1584 = load i64, i64* %21, align 8" (3.161559e-09%)
Noelle:     Loop "  %259 = load i64, i64* %21, align 8" (3.526537e+01%)
Noelle:     Loop "  %1748 = icmp slt i32 %1747, %1743" (2.821484e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.161559e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.559131e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.057194e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.763930e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.069120e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.257233e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.335873e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.383016e+00%)
Noelle:     Loop "  %1584 = load i64, i64* %21, align 8" (3.162365e-09%)
Noelle:     Loop "  %260 = load i64, i64* %21, align 8" (3.524250e+01%)
Noelle:     Loop "  %1748 = icmp slt i32 %1747, %1743" (2.822203e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.162365e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.560038e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.057464e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.765144e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.069647e+01%)
NOELLE: FixedPoint:       There are 0 different instructions and -1 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
NOELLE: FixedPoint:     Invocation 7
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.257233e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.335873e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.383016e+00%)
Noelle:     Loop "  %1584 = load i64, i64* %21, align 8" (3.162365e-09%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %260 = load i64, i64* %21, align 8" (3.524250e+01%)
Noelle:     Loop "  %1748 = icmp slt i32 %1747, %1743" (2.822203e+00%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:  Disable "BF_set_key" as cold function
EnablersManager:   Try to improve all 4 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %190 = call i32 @feof(%struct._IO_FILE* %187) #10
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %191, label %._crit_edge10, label %192, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %1748 = icmp slt i32 %1747, %1743
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1748 = icmp slt i32 %1747, %1743"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1748, label %1749, label %1757, !prof !40
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %260 = load i64, i64* %21, align 8
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %260 = load i64, i64* %21, align 8"
LICM:     Invariant = "  %1502 = phi i32 [ 1, %915 ], [ 1, %329 ]
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  store i64* %234, i64** %3, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store %struct.bf_key_st* %235, %struct.bf_key_st** %4, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %262, label %263, label %1581, !prof !40
Mem2Reg:   The loop has 1SCCs that each one access the same memory location
Mem2Reg:     Loop invariant memory location:   %21 = alloca i64, align 8
Mem2Reg:     SCC:
Internal nodes: 5
	  %260 = load i64, i64* %21, align 8
	  %261 = add nsw i64 %260, -1
	  store i64 %261, i64* %21, align 8
	  %262 = icmp ne i64 %260, 0
	  br i1 %262, label %263, label %1581, !prof !40
External nodes: 32
	  %259 = phi i32 [ %1560, %1558 ], [ %255, %231 ]
	  %264 = icmp eq i32 %258, 0
	  br i1 %264, label %265, label %._crit_edge.i, !prof !42
	  %258 = phi i32 [ %1580, %1558 ], [ %254, %231 ]
	  %1559 = phi i32 [ %1501, %BF_encrypt.exit.i ], [ %258, %._crit_edge.i ]
	  %1560 = phi i32 [ %1502, %BF_encrypt.exit.i ], [ %259, %._crit_edge.i ]
	  %1561 = load i8*, i8** %10, align 8
	  %1562 = getelementptr inbounds i8, i8* %1561, i32 1
	  store i8* %1562, i8** %10, align 8
	  %1563 = load i8, i8* %1561, align 1
	  %1564 = zext i8 %1563 to i32
	  %1565 = load i8*, i8** %23, align 8
	  %1566 = sext i32 %1559 to i64
	  %1567 = getelementptr inbounds i8, i8* %1565, i64 %1566
	  %1568 = load i8, i8* %1567, align 1
	  %1569 = zext i8 %1568 to i32
	  %1570 = xor i32 %1564, %1569
	  %1571 = trunc i32 %1570 to i8
	  store i8 %1571, i8* %24, align 1
	  %1572 = load i8, i8* %24, align 1
	  %1573 = load i8*, i8** %11, align 8
	  %1574 = getelementptr inbounds i8, i8* %1573, i32 1
	  store i8* %1574, i8** %11, align 8
	  store i8 %1572, i8* %1573, align 1
	  %1575 = load i8, i8* %24, align 1
	  %1576 = load i8*, i8** %23, align 8
	  %1577 = sext i32 %1559 to i64
	  %1578 = getelementptr inbounds i8, i8* %1576, i64 %1577
	  store i8 %1575, i8* %1578, align 1
	  %1579 = add nsw i32 %1559, 1
	  %1580 = and i32 %1579, 7
	  br label %257
Edges: 44

Mem2Reg:  Collecting and ordering memory loads/stores by basic block
Mem2Reg: Iterating basic blocks to determine last stored values
Mem2Reg: placeholder PHI required: label %258
Mem2Reg:  checking for last value entering block: label %258
Mem2Reg:  Last value entering block: label %258	  %261 = phi i64 
Mem2Reg:  Value updated:   %263 = add nsw i64 %261, -1
Mem2Reg:  checking for last value entering block: label %265
Mem2Reg:  Last value entering block: label %265	  %263 = add nsw i64 %261, -1
Mem2Reg:  checking for last value entering block: label %267
Mem2Reg:  Last value entering block: label %267	  %263 = add nsw i64 %261, -1
Mem2Reg:  checking for last value entering block: label %._crit_edge.i
Mem2Reg:  Last value entering block: label %._crit_edge.i	  %263 = add nsw i64 %261, -1
Mem2Reg:  checking for last value entering block: label %331
Mem2Reg:  Last value entering block: label %331	  %263 = add nsw i64 %261, -1
Mem2Reg:  checking for last value entering block: label %917
Mem2Reg:  Last value entering block: label %917	  %263 = add nsw i64 %261, -1
Mem2Reg: placeholder PHI required: label %1560
Mem2Reg:  checking for last value entering block: label %1560
Mem2Reg:  Last value entering block: label %1560	  %1563 = phi i64 
Mem2Reg:  checking for last value entering block: label %BF_encrypt.exit.i
Mem2Reg:  Last value entering block: label %BF_encrypt.exit.i	  %1505 = phi i64 [ %263, %917 ], [ %263, %331 ]
Mem2Reg:  Removing
  %262 = load i64, i64* %21, align 8
Mem2Reg:  Removing
  store i64 %262, i64* %21, align 8
Mem2Reg:       The memory location has been promoted
Mem2Reg: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.257233e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.335873e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.383016e+00%)
Noelle:     Loop "  %1584 = load i64, i64* %21, align 8" (3.162365e-09%)
Noelle:     Loop "  %260 = load i64, i64* %21, align 8" (3.524250e+01%)
Noelle:     Loop "  %1748 = icmp slt i32 %1747, %1743" (2.822203e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.162365e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.560038e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.057464e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.765144e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.069647e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.256752e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.338037e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.381341e+00%)
Noelle:     Loop "  %1587 = load i64, i64* %21, align 8" (3.161156e-09%)
Noelle:     Loop "  %262 = add nsw i64 %261, -1" (3.525451e+01%)
Noelle:     Loop "  %1751 = icmp slt i32 %1750, %1746" (2.821125e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.161156e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.558678e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.057060e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.763323e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.068856e+01%)
NOELLE: FixedPoint:       There are 0 different instructions and -2 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
NOELLE: FixedPoint:     Invocation 8
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.256672e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.338398e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.381062e+00%)
Noelle:     Loop "  %1587 = load i64, i64* %21, align 8" (3.160955e-09%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %262 = add nsw i64 %261, -1" (3.525227e+01%)
Noelle:     Loop "  %1751 = icmp slt i32 %1750, %1746" (2.820945e+00%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:  Disable "BF_set_key" as cold function
EnablersManager:   Try to improve all 4 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %190 = call i32 @feof(%struct._IO_FILE* %187) #10
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %191, label %._crit_edge10, label %192, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %1751 = icmp slt i32 %1750, %1746
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1751 = icmp slt i32 %1750, %1746"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1751, label %1752, label %1760, !prof !40
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %262 = add nsw i64 %261, -1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
LoopDistribution: Success: Finished split of 
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) local_unnamed_addr #0 !prof !29 {
  %3 = alloca i64*, align 8
  %4 = alloca %struct.bf_key_st*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca %struct.bf_key_st*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i32*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca [2 x i64], align 16
  %23 = alloca i8*, align 8
  %24 = alloca i8, align 1
  %25 = alloca i8, align 1
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i8**, align 8
  %29 = alloca %struct.bf_key_st, align 8
  %30 = alloca [8 x i8], align 1
  %31 = alloca [40 x i8], align 16
  %32 = alloca [40 x i8], align 16
  %33 = alloca [8 x i8], align 1
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i8*, align 8
  %39 = alloca i8, align 1
  %40 = alloca %struct._IO_FILE*, align 8
  %41 = alloca %struct._IO_FILE*, align 8
  %42 = alloca i32, align 4
  store i32 0, i32* %26, align 4
  store i32 %0, i32* %27, align 4
  store i8** %1, i8*** %28, align 8
  store i32 0, i32* %35, align 4
  store i32 0, i32* %36, align 4
  store i32 -1, i32* %37, align 4
  %43 = load i32, i32* %27, align 4
  %44 = icmp slt i32 %43, 3
  br i1 %44, label %45, label %48, !prof !30

45:                                               ; preds = %2
  %46 = getelementptr [45 x i8], [45 x i8]* @.str, i64 0, i64 0
  %47 = call i32 (i8*, ...) @printf(i8* %46)
  call void @exit(i32 -1) #8
  br label %UnifiedUnreachableBlock

48:                                               ; preds = %2
  %49 = load i8**, i8*** %28, align 8
  %50 = getelementptr inbounds i8*, i8** %49, i64 1
  %51 = load i8*, i8** %50, align 8
  %52 = load i8, i8* %51, align 1
  %53 = sext i8 %52 to i32
  %54 = icmp eq i32 %53, 101
  br i1 %54, label %._crit_edge, label %55, !prof !31

._crit_edge:                                      ; preds = %48
  br label %62

55:                                               ; preds = %48
  %56 = load i8**, i8*** %28, align 8
  %57 = getelementptr inbounds i8*, i8** %56, i64 1
  %58 = load i8*, i8** %57, align 8
  %59 = load i8, i8* %58, align 1
  %60 = sext i8 %59 to i32
  %61 = icmp eq i32 %60, 69
  br i1 %61, label %._crit_edge1, label %63

._crit_edge1:                                     ; preds = %55
  br label %62

62:                                               ; preds = %._crit_edge1, %._crit_edge
  store i32 1, i32* %37, align 4
  br label %82

63:                                               ; preds = %55
  %64 = load i8**, i8*** %28, align 8
  %65 = getelementptr inbounds i8*, i8** %64, i64 1
  %66 = load i8*, i8** %65, align 8
  %67 = load i8, i8* %66, align 1
  %68 = sext i8 %67 to i32
  %69 = icmp eq i32 %68, 100
  br i1 %69, label %._crit_edge2, label %70

._crit_edge2:                                     ; preds = %63
  br label %77

70:                                               ; preds = %63
  %71 = load i8**, i8*** %28, align 8
  %72 = getelementptr inbounds i8*, i8** %71, i64 1
  %73 = load i8*, i8** %72, align 8
  %74 = load i8, i8* %73, align 1
  %75 = sext i8 %74 to i32
  %76 = icmp eq i32 %75, 68
  br i1 %76, label %._crit_edge3, label %78

._crit_edge3:                                     ; preds = %70
  br label %77

77:                                               ; preds = %._crit_edge3, %._crit_edge2
  store i32 0, i32* %37, align 4
  br label %81

78:                                               ; preds = %70
  %79 = getelementptr [45 x i8], [45 x i8]* @.str, i64 0, i64 0
  %80 = call i32 (i8*, ...) @printf(i8* %79)
  call void @exit(i32 -1) #8
  br label %UnifiedUnreachableBlock

81:                                               ; preds = %77
  br label %82

82:                                               ; preds = %81, %62
  %83 = load i8**, i8*** %28, align 8
  %84 = getelementptr inbounds i8*, i8** %83, i64 4
  %85 = load i8*, i8** %84, align 8
  store i8* %85, i8** %38, align 8
  br label %86

86:                                               ; preds = %151, %82
  %87 = load i32, i32* %36, align 4
  %88 = icmp slt i32 %87, 64
  br i1 %88, label %89, label %._crit_edge4, !prof !32

._crit_edge4:                                     ; preds = %86
  br label %94

89:                                               ; preds = %86
  %90 = load i8*, i8** %38, align 8
  %91 = load i8, i8* %90, align 1
  %92 = sext i8 %91 to i32
  %93 = icmp ne i32 %92, 0
  br label %94

94:                                               ; preds = %._crit_edge4, %89
  %95 = phi i1 [ false, %._crit_edge4 ], [ %93, %89 ]
  br i1 %95, label %96, label %152, !prof !33

96:                                               ; preds = %94
  %97 = load i8*, i8** %38, align 8
  %98 = getelementptr inbounds i8, i8* %97, i32 1
  store i8* %98, i8** %38, align 8
  %99 = load i8, i8* %97, align 1
  %100 = sext i8 %99 to i32
  %101 = call i32 @toupper(i32 %100) #9
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %39, align 1
  %103 = load i8, i8* %39, align 1
  %104 = sext i8 %103 to i32
  %105 = icmp sge i32 %104, 48
  br i1 %105, label %106, label %._crit_edge5, !prof !34

._crit_edge5:                                     ; preds = %96
  br label %117

106:                                              ; preds = %96
  %107 = load i8, i8* %39, align 1
  %108 = sext i8 %107 to i32
  %109 = icmp sle i32 %108, 57
  br i1 %109, label %110, label %._crit_edge6, !prof !35

._crit_edge6:                                     ; preds = %106
  br label %117

110:                                              ; preds = %106
  %111 = load i32, i32* %35, align 4
  %112 = shl i32 %111, 4
  %113 = load i8, i8* %39, align 1
  %114 = sext i8 %113 to i32
  %115 = add nsw i32 %112, %114
  %116 = sub nsw i32 %115, 48
  store i32 %116, i32* %35, align 4
  br label %137

117:                                              ; preds = %._crit_edge6, %._crit_edge5
  %118 = load i8, i8* %39, align 1
  %119 = sext i8 %118 to i32
  %120 = icmp sge i32 %119, 65
  br i1 %120, label %121, label %._crit_edge7, !prof !36

._crit_edge7:                                     ; preds = %117
  br label %133

121:                                              ; preds = %117
  %122 = load i8, i8* %39, align 1
  %123 = sext i8 %122 to i32
  %124 = icmp sle i32 %123, 70
  br i1 %124, label %125, label %._crit_edge8, !prof !36

._crit_edge8:                                     ; preds = %121
  br label %133

125:                                              ; preds = %121
  %126 = load i32, i32* %35, align 4
  %127 = shl i32 %126, 4
  %128 = load i8, i8* %39, align 1
  %129 = sext i8 %128 to i32
  %130 = add nsw i32 %127, %129
  %131 = sub nsw i32 %130, 65
  %132 = add nsw i32 %131, 10
  store i32 %132, i32* %35, align 4
  br label %136

133:                                              ; preds = %._crit_edge8, %._crit_edge7
  %134 = getelementptr [37 x i8], [37 x i8]* @.str.1, i64 0, i64 0
  %135 = call i32 (i8*, ...) @printf(i8* %134)
  call void @exit(i32 -1) #8
  br label %UnifiedUnreachableBlock

136:                                              ; preds = %125
  br label %137

137:                                              ; preds = %136, %110
  %138 = load i32, i32* %36, align 4
  %139 = add nsw i32 %138, 1
  store i32 %139, i32* %36, align 4
  %140 = and i32 %138, 1
  %141 = icmp ne i32 %140, 0
  br i1 %141, label %142, label %._crit_edge9, !prof !37

._crit_edge9:                                     ; preds = %137
  br label %151

142:                                              ; preds = %137
  %143 = load i32, i32* %35, align 4
  %144 = and i32 %143, 255
  %145 = trunc i32 %144 to i8
  %146 = load i32, i32* %36, align 4
  %147 = sdiv i32 %146, 2
  %148 = sub nsw i32 %147, 1
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 %149
  store i8 %145, i8* %150, align 1
  br label %151

151:                                              ; preds = %._crit_edge9, %142
  br label %86

152:                                              ; preds = %94
  %153 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 0
  call void @BF_set_key(%struct.bf_key_st* %29, i32 8, i8* %153)
  %154 = load i8*, i8** %38, align 8
  %155 = load i8, i8* %154, align 1
  %156 = icmp ne i8 %155, 0
  br i1 %156, label %157, label %160, !prof !30

157:                                              ; preds = %152
  %158 = getelementptr [16 x i8], [16 x i8]* @.str.2, i64 0, i64 0
  %159 = call i32 (i8*, ...) @printf(i8* %158)
  call void @exit(i32 -1) #8
  br label %UnifiedUnreachableBlock

160:                                              ; preds = %152
  %161 = load i8**, i8*** %28, align 8
  %162 = getelementptr inbounds i8*, i8** %161, i64 2
  %163 = load i8*, i8** %162, align 8
  %164 = getelementptr [2 x i8], [2 x i8]* @.str.3, i64 0, i64 0
  %165 = call %struct._IO_FILE* @fopen(i8* %163, i8* %164)
  store %struct._IO_FILE* %165, %struct._IO_FILE** %40, align 8
  %166 = icmp eq %struct._IO_FILE* %165, null
  br i1 %166, label %167, label %170, !prof !30

167:                                              ; preds = %160
  %168 = getelementptr [45 x i8], [45 x i8]* @.str, i64 0, i64 0
  %169 = call i32 (i8*, ...) @printf(i8* %168)
  call void @exit(i32 -1) #8
  br label %UnifiedUnreachableBlock

170:                                              ; preds = %160
  %171 = load i8**, i8*** %28, align 8
  %172 = getelementptr inbounds i8*, i8** %171, i64 3
  %173 = load i8*, i8** %172, align 8
  %174 = getelementptr [2 x i8], [2 x i8]* @.str.4, i64 0, i64 0
  %175 = call %struct._IO_FILE* @fopen(i8* %173, i8* %174)
  store %struct._IO_FILE* %175, %struct._IO_FILE** %41, align 8
  %176 = icmp eq %struct._IO_FILE* %175, null
  br i1 %176, label %177, label %180, !prof !30

177:                                              ; preds = %170
  %178 = getelementptr [45 x i8], [45 x i8]* @.str, i64 0, i64 0
  %179 = call i32 (i8*, ...) @printf(i8* %178)
  call void @exit(i32 -1) #8
  br label %UnifiedUnreachableBlock

180:                                              ; preds = %170
  store i32 0, i32* %36, align 4
  br label %181

181:                                              ; preds = %1757, %180
  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
  %183 = call i32 @feof(%struct._IO_FILE* %182) #10
  %184 = icmp ne i32 %183, 0
  %185 = xor i1 %184, true
  br i1 %185, label %186, label %1758, !prof !38

186:                                              ; preds = %181
  %187 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
  %188 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
  br label %189

189:                                              ; preds = %197, %186
  %190 = call i32 @feof(%struct._IO_FILE* %187) #10
  %191 = icmp ne i32 %190, 0
  br i1 %191, label %._crit_edge10, label %192, !prof !39

._crit_edge10:                                    ; preds = %189
  br label %195

192:                                              ; preds = %189
  %193 = load i32, i32* %36, align 4
  %194 = icmp slt i32 %193, 40
  br label %195

195:                                              ; preds = %._crit_edge10, %192
  %196 = phi i1 [ false, %._crit_edge10 ], [ %194, %192 ]
  br i1 %196, label %197, label %204, !prof !40

197:                                              ; preds = %195
  %198 = call i32 @getc(%struct._IO_FILE* %188)
  %199 = trunc i32 %198 to i8
  %200 = load i32, i32* %36, align 4
  %201 = add nsw i32 %200, 1
  store i32 %201, i32* %36, align 4
  %202 = sext i32 %200 to i64
  %203 = getelementptr inbounds [40 x i8], [40 x i8]* %31, i64 0, i64 %202
  store i8 %199, i8* %203, align 1
  br label %189

204:                                              ; preds = %195
  %205 = getelementptr inbounds [40 x i8], [40 x i8]* %31, i64 0, i64 0
  %206 = getelementptr inbounds [40 x i8], [40 x i8]* %32, i64 0, i64 0
  %207 = load i32, i32* %36, align 4
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds [8 x i8], [8 x i8]* %33, i64 0, i64 0
  %210 = load i32, i32* %37, align 4
  %211 = bitcast i8** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %211)
  %212 = bitcast i8** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %212)
  %213 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %213)
  %214 = bitcast %struct.bf_key_st** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %214)
  %215 = bitcast i8** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %215)
  %216 = bitcast i32** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %216)
  %217 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %217)
  %218 = bitcast i64* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %218)
  %219 = bitcast i64* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %219)
  %220 = bitcast i64* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %220)
  %221 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %221)
  %222 = bitcast i64* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %222)
  %223 = bitcast [2 x i64]* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %223)
  %224 = bitcast i8** %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %224)
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %24)
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %25)
  store i8* %205, i8** %10, align 8
  store i8* %206, i8** %11, align 8
  store i64 %208, i64* %12, align 8
  store %struct.bf_key_st* %29, %struct.bf_key_st** %13, align 8
  store i8* %209, i8** %14, align 8
  store i32* %34, i32** %15, align 8
  store i32 %210, i32* %16, align 4
  %225 = load i32*, i32** %15, align 8
  %226 = load i32, i32* %225, align 4
  store i32 %226, i32* %20, align 4
  %227 = load i64, i64* %12, align 8
  store i64 %227, i64* %21, align 8
  %228 = load i8*, i8** %14, align 8
  store i8* %228, i8** %23, align 8
  %229 = load i32, i32* %16, align 4
  %230 = icmp ne i32 %229, 0
  br i1 %230, label %231, label %1582, !prof !41

231:                                              ; preds = %204
  %232 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
  %233 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1
  %234 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
  %235 = load %struct.bf_key_st*, %struct.bf_key_st** %13, align 8
  %236 = bitcast i64** %3 to i8*
  %237 = bitcast %struct.bf_key_st** %4 to i8*
  %238 = bitcast i32* %5 to i8*
  %239 = bitcast i64* %6 to i8*
  %240 = bitcast i64* %7 to i8*
  %241 = bitcast i64** %8 to i8*
  %242 = bitcast i64** %9 to i8*
  %243 = bitcast i64** %3 to i8*
  %244 = bitcast %struct.bf_key_st** %4 to i8*
  %245 = bitcast i32* %5 to i8*
  %246 = bitcast i64* %6 to i8*
  %247 = bitcast i64* %7 to i8*
  %248 = bitcast i64** %8 to i8*
  %249 = bitcast i64** %9 to i8*
  %250 = load i8*, i8** %14, align 8
  %251 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
  %252 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1
  %253 = load i8*, i8** %14, align 8
  %254 = load i32, i32* %20
  %255 = load i32, i32* %5
  %256 = icmp ne i32 1, 0
  %257 = load i64, i64* %21
  br label %258

258:                                              ; preds = %1558, %231
  %259 = phi i32 [ %1580, %1558 ], [ %254, %231 ]
  %260 = phi i64 [ %1560, %1558 ], [ %257, %231 ]
  %261 = add nsw i64 %260, -1
  %262 = icmp ne i64 %260, 0
  br i1 %262, label %263, label %1786, !prof !40

263:                                              ; preds = %258
  %264 = icmp eq i32 %259, 0
  br i1 %264, label %265, label %._crit_edge.i, !prof !42

._crit_edge.i:                                    ; preds = %263
  br label %1558

265:                                              ; preds = %263
  %266 = load i8*, i8** %23, align 8
  %267 = getelementptr inbounds i8, i8* %266, i32 1
  store i8* %267, i8** %23, align 8
  %268 = load i8, i8* %266, align 1
  %269 = zext i8 %268 to i64
  %270 = shl i64 %269, 24
  store i64 %270, i64* %17, align 8
  %271 = load i8*, i8** %23, align 8
  %272 = getelementptr inbounds i8, i8* %271, i32 1
  store i8* %272, i8** %23, align 8
  %273 = load i8, i8* %271, align 1
  %274 = zext i8 %273 to i64
  %275 = shl i64 %274, 16
  %276 = load i64, i64* %17, align 8
  %277 = or i64 %276, %275
  store i64 %277, i64* %17, align 8
  %278 = load i8*, i8** %23, align 8
  %279 = getelementptr inbounds i8, i8* %278, i32 1
  store i8* %279, i8** %23, align 8
  %280 = load i8, i8* %278, align 1
  %281 = zext i8 %280 to i64
  %282 = shl i64 %281, 8
  %283 = load i64, i64* %17, align 8
  %284 = or i64 %283, %282
  store i64 %284, i64* %17, align 8
  %285 = load i8*, i8** %23, align 8
  %286 = getelementptr inbounds i8, i8* %285, i32 1
  store i8* %286, i8** %23, align 8
  %287 = load i8, i8* %285, align 1
  %288 = zext i8 %287 to i64
  %289 = load i64, i64* %17, align 8
  %290 = or i64 %289, %288
  store i64 %290, i64* %17, align 8
  %291 = load i64, i64* %17, align 8
  store i64 %291, i64* %232, align 16
  %292 = load i8*, i8** %23, align 8
  %293 = getelementptr inbounds i8, i8* %292, i32 1
  store i8* %293, i8** %23, align 8
  %294 = load i8, i8* %292, align 1
  %295 = zext i8 %294 to i64
  %296 = shl i64 %295, 24
  store i64 %296, i64* %18, align 8
  %297 = load i8*, i8** %23, align 8
  %298 = getelementptr inbounds i8, i8* %297, i32 1
  store i8* %298, i8** %23, align 8
  %299 = load i8, i8* %297, align 1
  %300 = zext i8 %299 to i64
  %301 = shl i64 %300, 16
  %302 = load i64, i64* %18, align 8
  %303 = or i64 %302, %301
  store i64 %303, i64* %18, align 8
  %304 = load i8*, i8** %23, align 8
  %305 = getelementptr inbounds i8, i8* %304, i32 1
  store i8* %305, i8** %23, align 8
  %306 = load i8, i8* %304, align 1
  %307 = zext i8 %306 to i64
  %308 = shl i64 %307, 8
  %309 = load i64, i64* %18, align 8
  %310 = or i64 %309, %308
  store i64 %310, i64* %18, align 8
  %311 = load i8*, i8** %23, align 8
  %312 = getelementptr inbounds i8, i8* %311, i32 1
  store i8* %312, i8** %23, align 8
  %313 = load i8, i8* %311, align 1
  %314 = zext i8 %313 to i64
  %315 = load i64, i64* %18, align 8
  %316 = or i64 %315, %314
  store i64 %316, i64* %18, align 8
  %317 = load i64, i64* %18, align 8
  store i64 %317, i64* %233, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %236) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %237) #10
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %238) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %239) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %240) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %241) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %242) #10
  store i64* %234, i64** %3, align 8
  store %struct.bf_key_st* %235, %struct.bf_key_st** %4, align 8
  %318 = load %struct.bf_key_st*, %struct.bf_key_st** %4, align 8
  %319 = getelementptr inbounds %struct.bf_key_st, %struct.bf_key_st* %318, i32 0, i32 0
  %320 = getelementptr inbounds [18 x i64], [18 x i64]* %319, i64 0, i64 0
  store i64* %320, i64** %8, align 8
  %321 = load %struct.bf_key_st*, %struct.bf_key_st** %4, align 8
  %322 = getelementptr inbounds %struct.bf_key_st, %struct.bf_key_st* %321, i32 0, i32 1
  %323 = getelementptr inbounds [1024 x i64], [1024 x i64]* %322, i64 0, i64 0
  store i64* %323, i64** %9, align 8
  %324 = load i64*, i64** %3, align 8
  %325 = load i64, i64* %324, align 8
  store i64 %325, i64* %6, align 8
  %326 = load i64*, i64** %3, align 8
  %327 = getelementptr inbounds i64, i64* %326, i64 1
  %328 = load i64, i64* %327, align 8
  store i64 %328, i64* %7, align 8
  br i1 %256, label %329, label %915, !prof !43

329:                                              ; preds = %265
  %330 = load i64*, i64** %8, align 8
  %331 = load i64, i64* %330, align 8
  %332 = load i64, i64* %6, align 8
  %333 = xor i64 %332, %331
  store i64 %333, i64* %6, align 8
  %334 = load i64*, i64** %8, align 8
  %335 = getelementptr inbounds i64, i64* %334, i64 1
  %336 = load i64, i64* %335, align 8
  %337 = load i64, i64* %7, align 8
  %338 = xor i64 %337, %336
  store i64 %338, i64* %7, align 8
  %339 = load i64*, i64** %9, align 8
  %340 = load i64, i64* %6, align 8
  %341 = lshr i64 %340, 24
  %342 = getelementptr inbounds i64, i64* %339, i64 %341
  %343 = load i64, i64* %342, align 8
  %344 = load i64*, i64** %9, align 8
  %345 = load i64, i64* %6, align 8
  %346 = lshr i64 %345, 16
  %347 = and i64 %346, 255
  %348 = add i64 256, %347
  %349 = getelementptr inbounds i64, i64* %344, i64 %348
  %350 = load i64, i64* %349, align 8
  %351 = add i64 %343, %350
  %352 = load i64*, i64** %9, align 8
  %353 = load i64, i64* %6, align 8
  %354 = lshr i64 %353, 8
  %355 = and i64 %354, 255
  %356 = add i64 512, %355
  %357 = getelementptr inbounds i64, i64* %352, i64 %356
  %358 = load i64, i64* %357, align 8
  %359 = xor i64 %351, %358
  %360 = load i64*, i64** %9, align 8
  %361 = load i64, i64* %6, align 8
  %362 = and i64 %361, 255
  %363 = add i64 768, %362
  %364 = getelementptr inbounds i64, i64* %360, i64 %363
  %365 = load i64, i64* %364, align 8
  %366 = add i64 %359, %365
  %367 = and i64 %366, 4294967295
  %368 = load i64, i64* %7, align 8
  %369 = xor i64 %368, %367
  store i64 %369, i64* %7, align 8
  %370 = load i64*, i64** %8, align 8
  %371 = getelementptr inbounds i64, i64* %370, i64 2
  %372 = load i64, i64* %371, align 8
  %373 = load i64, i64* %6, align 8
  %374 = xor i64 %373, %372
  store i64 %374, i64* %6, align 8
  %375 = load i64*, i64** %9, align 8
  %376 = load i64, i64* %7, align 8
  %377 = lshr i64 %376, 24
  %378 = getelementptr inbounds i64, i64* %375, i64 %377
  %379 = load i64, i64* %378, align 8
  %380 = load i64*, i64** %9, align 8
  %381 = load i64, i64* %7, align 8
  %382 = lshr i64 %381, 16
  %383 = and i64 %382, 255
  %384 = add i64 256, %383
  %385 = getelementptr inbounds i64, i64* %380, i64 %384
  %386 = load i64, i64* %385, align 8
  %387 = add i64 %379, %386
  %388 = load i64*, i64** %9, align 8
  %389 = load i64, i64* %7, align 8
  %390 = lshr i64 %389, 8
  %391 = and i64 %390, 255
  %392 = add i64 512, %391
  %393 = getelementptr inbounds i64, i64* %388, i64 %392
  %394 = load i64, i64* %393, align 8
  %395 = xor i64 %387, %394
  %396 = load i64*, i64** %9, align 8
  %397 = load i64, i64* %7, align 8
  %398 = and i64 %397, 255
  %399 = add i64 768, %398
  %400 = getelementptr inbounds i64, i64* %396, i64 %399
  %401 = load i64, i64* %400, align 8
  %402 = add i64 %395, %401
  %403 = and i64 %402, 4294967295
  %404 = load i64, i64* %6, align 8
  %405 = xor i64 %404, %403
  store i64 %405, i64* %6, align 8
  %406 = load i64*, i64** %8, align 8
  %407 = getelementptr inbounds i64, i64* %406, i64 3
  %408 = load i64, i64* %407, align 8
  %409 = load i64, i64* %7, align 8
  %410 = xor i64 %409, %408
  store i64 %410, i64* %7, align 8
  %411 = load i64*, i64** %9, align 8
  %412 = load i64, i64* %6, align 8
  %413 = lshr i64 %412, 24
  %414 = getelementptr inbounds i64, i64* %411, i64 %413
  %415 = load i64, i64* %414, align 8
  %416 = load i64*, i64** %9, align 8
  %417 = load i64, i64* %6, align 8
  %418 = lshr i64 %417, 16
  %419 = and i64 %418, 255
  %420 = add i64 256, %419
  %421 = getelementptr inbounds i64, i64* %416, i64 %420
  %422 = load i64, i64* %421, align 8
  %423 = add i64 %415, %422
  %424 = load i64*, i64** %9, align 8
  %425 = load i64, i64* %6, align 8
  %426 = lshr i64 %425, 8
  %427 = and i64 %426, 255
  %428 = add i64 512, %427
  %429 = getelementptr inbounds i64, i64* %424, i64 %428
  %430 = load i64, i64* %429, align 8
  %431 = xor i64 %423, %430
  %432 = load i64*, i64** %9, align 8
  %433 = load i64, i64* %6, align 8
  %434 = and i64 %433, 255
  %435 = add i64 768, %434
  %436 = getelementptr inbounds i64, i64* %432, i64 %435
  %437 = load i64, i64* %436, align 8
  %438 = add i64 %431, %437
  %439 = and i64 %438, 4294967295
  %440 = load i64, i64* %7, align 8
  %441 = xor i64 %440, %439
  store i64 %441, i64* %7, align 8
  %442 = load i64*, i64** %8, align 8
  %443 = getelementptr inbounds i64, i64* %442, i64 4
  %444 = load i64, i64* %443, align 8
  %445 = load i64, i64* %6, align 8
  %446 = xor i64 %445, %444
  store i64 %446, i64* %6, align 8
  %447 = load i64*, i64** %9, align 8
  %448 = load i64, i64* %7, align 8
  %449 = lshr i64 %448, 24
  %450 = getelementptr inbounds i64, i64* %447, i64 %449
  %451 = load i64, i64* %450, align 8
  %452 = load i64*, i64** %9, align 8
  %453 = load i64, i64* %7, align 8
  %454 = lshr i64 %453, 16
  %455 = and i64 %454, 255
  %456 = add i64 256, %455
  %457 = getelementptr inbounds i64, i64* %452, i64 %456
  %458 = load i64, i64* %457, align 8
  %459 = add i64 %451, %458
  %460 = load i64*, i64** %9, align 8
  %461 = load i64, i64* %7, align 8
  %462 = lshr i64 %461, 8
  %463 = and i64 %462, 255
  %464 = add i64 512, %463
  %465 = getelementptr inbounds i64, i64* %460, i64 %464
  %466 = load i64, i64* %465, align 8
  %467 = xor i64 %459, %466
  %468 = load i64*, i64** %9, align 8
  %469 = load i64, i64* %7, align 8
  %470 = and i64 %469, 255
  %471 = add i64 768, %470
  %472 = getelementptr inbounds i64, i64* %468, i64 %471
  %473 = load i64, i64* %472, align 8
  %474 = add i64 %467, %473
  %475 = and i64 %474, 4294967295
  %476 = load i64, i64* %6, align 8
  %477 = xor i64 %476, %475
  store i64 %477, i64* %6, align 8
  %478 = load i64*, i64** %8, align 8
  %479 = getelementptr inbounds i64, i64* %478, i64 5
  %480 = load i64, i64* %479, align 8
  %481 = load i64, i64* %7, align 8
  %482 = xor i64 %481, %480
  store i64 %482, i64* %7, align 8
  %483 = load i64*, i64** %9, align 8
  %484 = load i64, i64* %6, align 8
  %485 = lshr i64 %484, 24
  %486 = getelementptr inbounds i64, i64* %483, i64 %485
  %487 = load i64, i64* %486, align 8
  %488 = load i64*, i64** %9, align 8
  %489 = load i64, i64* %6, align 8
  %490 = lshr i64 %489, 16
  %491 = and i64 %490, 255
  %492 = add i64 256, %491
  %493 = getelementptr inbounds i64, i64* %488, i64 %492
  %494 = load i64, i64* %493, align 8
  %495 = add i64 %487, %494
  %496 = load i64*, i64** %9, align 8
  %497 = load i64, i64* %6, align 8
  %498 = lshr i64 %497, 8
  %499 = and i64 %498, 255
  %500 = add i64 512, %499
  %501 = getelementptr inbounds i64, i64* %496, i64 %500
  %502 = load i64, i64* %501, align 8
  %503 = xor i64 %495, %502
  %504 = load i64*, i64** %9, align 8
  %505 = load i64, i64* %6, align 8
  %506 = and i64 %505, 255
  %507 = add i64 768, %506
  %508 = getelementptr inbounds i64, i64* %504, i64 %507
  %509 = load i64, i64* %508, align 8
  %510 = add i64 %503, %509
  %511 = and i64 %510, 4294967295
  %512 = load i64, i64* %7, align 8
  %513 = xor i64 %512, %511
  store i64 %513, i64* %7, align 8
  %514 = load i64*, i64** %8, align 8
  %515 = getelementptr inbounds i64, i64* %514, i64 6
  %516 = load i64, i64* %515, align 8
  %517 = load i64, i64* %6, align 8
  %518 = xor i64 %517, %516
  store i64 %518, i64* %6, align 8
  %519 = load i64*, i64** %9, align 8
  %520 = load i64, i64* %7, align 8
  %521 = lshr i64 %520, 24
  %522 = getelementptr inbounds i64, i64* %519, i64 %521
  %523 = load i64, i64* %522, align 8
  %524 = load i64*, i64** %9, align 8
  %525 = load i64, i64* %7, align 8
  %526 = lshr i64 %525, 16
  %527 = and i64 %526, 255
  %528 = add i64 256, %527
  %529 = getelementptr inbounds i64, i64* %524, i64 %528
  %530 = load i64, i64* %529, align 8
  %531 = add i64 %523, %530
  %532 = load i64*, i64** %9, align 8
  %533 = load i64, i64* %7, align 8
  %534 = lshr i64 %533, 8
  %535 = and i64 %534, 255
  %536 = add i64 512, %535
  %537 = getelementptr inbounds i64, i64* %532, i64 %536
  %538 = load i64, i64* %537, align 8
  %539 = xor i64 %531, %538
  %540 = load i64*, i64** %9, align 8
  %541 = load i64, i64* %7, align 8
  %542 = and i64 %541, 255
  %543 = add i64 768, %542
  %544 = getelementptr inbounds i64, i64* %540, i64 %543
  %545 = load i64, i64* %544, align 8
  %546 = add i64 %539, %545
  %547 = and i64 %546, 4294967295
  %548 = load i64, i64* %6, align 8
  %549 = xor i64 %548, %547
  store i64 %549, i64* %6, align 8
  %550 = load i64*, i64** %8, align 8
  %551 = getelementptr inbounds i64, i64* %550, i64 7
  %552 = load i64, i64* %551, align 8
  %553 = load i64, i64* %7, align 8
  %554 = xor i64 %553, %552
  store i64 %554, i64* %7, align 8
  %555 = load i64*, i64** %9, align 8
  %556 = load i64, i64* %6, align 8
  %557 = lshr i64 %556, 24
  %558 = getelementptr inbounds i64, i64* %555, i64 %557
  %559 = load i64, i64* %558, align 8
  %560 = load i64*, i64** %9, align 8
  %561 = load i64, i64* %6, align 8
  %562 = lshr i64 %561, 16
  %563 = and i64 %562, 255
  %564 = add i64 256, %563
  %565 = getelementptr inbounds i64, i64* %560, i64 %564
  %566 = load i64, i64* %565, align 8
  %567 = add i64 %559, %566
  %568 = load i64*, i64** %9, align 8
  %569 = load i64, i64* %6, align 8
  %570 = lshr i64 %569, 8
  %571 = and i64 %570, 255
  %572 = add i64 512, %571
  %573 = getelementptr inbounds i64, i64* %568, i64 %572
  %574 = load i64, i64* %573, align 8
  %575 = xor i64 %567, %574
  %576 = load i64*, i64** %9, align 8
  %577 = load i64, i64* %6, align 8
  %578 = and i64 %577, 255
  %579 = add i64 768, %578
  %580 = getelementptr inbounds i64, i64* %576, i64 %579
  %581 = load i64, i64* %580, align 8
  %582 = add i64 %575, %581
  %583 = and i64 %582, 4294967295
  %584 = load i64, i64* %7, align 8
  %585 = xor i64 %584, %583
  store i64 %585, i64* %7, align 8
  %586 = load i64*, i64** %8, align 8
  %587 = getelementptr inbounds i64, i64* %586, i64 8
  %588 = load i64, i64* %587, align 8
  %589 = load i64, i64* %6, align 8
  %590 = xor i64 %589, %588
  store i64 %590, i64* %6, align 8
  %591 = load i64*, i64** %9, align 8
  %592 = load i64, i64* %7, align 8
  %593 = lshr i64 %592, 24
  %594 = getelementptr inbounds i64, i64* %591, i64 %593
  %595 = load i64, i64* %594, align 8
  %596 = load i64*, i64** %9, align 8
  %597 = load i64, i64* %7, align 8
  %598 = lshr i64 %597, 16
  %599 = and i64 %598, 255
  %600 = add i64 256, %599
  %601 = getelementptr inbounds i64, i64* %596, i64 %600
  %602 = load i64, i64* %601, align 8
  %603 = add i64 %595, %602
  %604 = load i64*, i64** %9, align 8
  %605 = load i64, i64* %7, align 8
  %606 = lshr i64 %605, 8
  %607 = and i64 %606, 255
  %608 = add i64 512, %607
  %609 = getelementptr inbounds i64, i64* %604, i64 %608
  %610 = load i64, i64* %609, align 8
  %611 = xor i64 %603, %610
  %612 = load i64*, i64** %9, align 8
  %613 = load i64, i64* %7, align 8
  %614 = and i64 %613, 255
  %615 = add i64 768, %614
  %616 = getelementptr inbounds i64, i64* %612, i64 %615
  %617 = load i64, i64* %616, align 8
  %618 = add i64 %611, %617
  %619 = and i64 %618, 4294967295
  %620 = load i64, i64* %6, align 8
  %621 = xor i64 %620, %619
  store i64 %621, i64* %6, align 8
  %622 = load i64*, i64** %8, align 8
  %623 = getelementptr inbounds i64, i64* %622, i64 9
  %624 = load i64, i64* %623, align 8
  %625 = load i64, i64* %7, align 8
  %626 = xor i64 %625, %624
  store i64 %626, i64* %7, align 8
  %627 = load i64*, i64** %9, align 8
  %628 = load i64, i64* %6, align 8
  %629 = lshr i64 %628, 24
  %630 = getelementptr inbounds i64, i64* %627, i64 %629
  %631 = load i64, i64* %630, align 8
  %632 = load i64*, i64** %9, align 8
  %633 = load i64, i64* %6, align 8
  %634 = lshr i64 %633, 16
  %635 = and i64 %634, 255
  %636 = add i64 256, %635
  %637 = getelementptr inbounds i64, i64* %632, i64 %636
  %638 = load i64, i64* %637, align 8
  %639 = add i64 %631, %638
  %640 = load i64*, i64** %9, align 8
  %641 = load i64, i64* %6, align 8
  %642 = lshr i64 %641, 8
  %643 = and i64 %642, 255
  %644 = add i64 512, %643
  %645 = getelementptr inbounds i64, i64* %640, i64 %644
  %646 = load i64, i64* %645, align 8
  %647 = xor i64 %639, %646
  %648 = load i64*, i64** %9, align 8
  %649 = load i64, i64* %6, align 8
  %650 = and i64 %649, 255
  %651 = add i64 768, %650
  %652 = getelementptr inbounds i64, i64* %648, i64 %651
  %653 = load i64, i64* %652, align 8
  %654 = add i64 %647, %653
  %655 = and i64 %654, 4294967295
  %656 = load i64, i64* %7, align 8
  %657 = xor i64 %656, %655
  store i64 %657, i64* %7, align 8
  %658 = load i64*, i64** %8, align 8
  %659 = getelementptr inbounds i64, i64* %658, i64 10
  %660 = load i64, i64* %659, align 8
  %661 = load i64, i64* %6, align 8
  %662 = xor i64 %661, %660
  store i64 %662, i64* %6, align 8
  %663 = load i64*, i64** %9, align 8
  %664 = load i64, i64* %7, align 8
  %665 = lshr i64 %664, 24
  %666 = getelementptr inbounds i64, i64* %663, i64 %665
  %667 = load i64, i64* %666, align 8
  %668 = load i64*, i64** %9, align 8
  %669 = load i64, i64* %7, align 8
  %670 = lshr i64 %669, 16
  %671 = and i64 %670, 255
  %672 = add i64 256, %671
  %673 = getelementptr inbounds i64, i64* %668, i64 %672
  %674 = load i64, i64* %673, align 8
  %675 = add i64 %667, %674
  %676 = load i64*, i64** %9, align 8
  %677 = load i64, i64* %7, align 8
  %678 = lshr i64 %677, 8
  %679 = and i64 %678, 255
  %680 = add i64 512, %679
  %681 = getelementptr inbounds i64, i64* %676, i64 %680
  %682 = load i64, i64* %681, align 8
  %683 = xor i64 %675, %682
  %684 = load i64*, i64** %9, align 8
  %685 = load i64, i64* %7, align 8
  %686 = and i64 %685, 255
  %687 = add i64 768, %686
  %688 = getelementptr inbounds i64, i64* %684, i64 %687
  %689 = load i64, i64* %688, align 8
  %690 = add i64 %683, %689
  %691 = and i64 %690, 4294967295
  %692 = load i64, i64* %6, align 8
  %693 = xor i64 %692, %691
  store i64 %693, i64* %6, align 8
  %694 = load i64*, i64** %8, align 8
  %695 = getelementptr inbounds i64, i64* %694, i64 11
  %696 = load i64, i64* %695, align 8
  %697 = load i64, i64* %7, align 8
  %698 = xor i64 %697, %696
  store i64 %698, i64* %7, align 8
  %699 = load i64*, i64** %9, align 8
  %700 = load i64, i64* %6, align 8
  %701 = lshr i64 %700, 24
  %702 = getelementptr inbounds i64, i64* %699, i64 %701
  %703 = load i64, i64* %702, align 8
  %704 = load i64*, i64** %9, align 8
  %705 = load i64, i64* %6, align 8
  %706 = lshr i64 %705, 16
  %707 = and i64 %706, 255
  %708 = add i64 256, %707
  %709 = getelementptr inbounds i64, i64* %704, i64 %708
  %710 = load i64, i64* %709, align 8
  %711 = add i64 %703, %710
  %712 = load i64*, i64** %9, align 8
  %713 = load i64, i64* %6, align 8
  %714 = lshr i64 %713, 8
  %715 = and i64 %714, 255
  %716 = add i64 512, %715
  %717 = getelementptr inbounds i64, i64* %712, i64 %716
  %718 = load i64, i64* %717, align 8
  %719 = xor i64 %711, %718
  %720 = load i64*, i64** %9, align 8
  %721 = load i64, i64* %6, align 8
  %722 = and i64 %721, 255
  %723 = add i64 768, %722
  %724 = getelementptr inbounds i64, i64* %720, i64 %723
  %725 = load i64, i64* %724, align 8
  %726 = add i64 %719, %725
  %727 = and i64 %726, 4294967295
  %728 = load i64, i64* %7, align 8
  %729 = xor i64 %728, %727
  store i64 %729, i64* %7, align 8
  %730 = load i64*, i64** %8, align 8
  %731 = getelementptr inbounds i64, i64* %730, i64 12
  %732 = load i64, i64* %731, align 8
  %733 = load i64, i64* %6, align 8
  %734 = xor i64 %733, %732
  store i64 %734, i64* %6, align 8
  %735 = load i64*, i64** %9, align 8
  %736 = load i64, i64* %7, align 8
  %737 = lshr i64 %736, 24
  %738 = getelementptr inbounds i64, i64* %735, i64 %737
  %739 = load i64, i64* %738, align 8
  %740 = load i64*, i64** %9, align 8
  %741 = load i64, i64* %7, align 8
  %742 = lshr i64 %741, 16
  %743 = and i64 %742, 255
  %744 = add i64 256, %743
  %745 = getelementptr inbounds i64, i64* %740, i64 %744
  %746 = load i64, i64* %745, align 8
  %747 = add i64 %739, %746
  %748 = load i64*, i64** %9, align 8
  %749 = load i64, i64* %7, align 8
  %750 = lshr i64 %749, 8
  %751 = and i64 %750, 255
  %752 = add i64 512, %751
  %753 = getelementptr inbounds i64, i64* %748, i64 %752
  %754 = load i64, i64* %753, align 8
  %755 = xor i64 %747, %754
  %756 = load i64*, i64** %9, align 8
  %757 = load i64, i64* %7, align 8
  %758 = and i64 %757, 255
  %759 = add i64 768, %758
  %760 = getelementptr inbounds i64, i64* %756, i64 %759
  %761 = load i64, i64* %760, align 8
  %762 = add i64 %755, %761
  %763 = and i64 %762, 4294967295
  %764 = load i64, i64* %6, align 8
  %765 = xor i64 %764, %763
  store i64 %765, i64* %6, align 8
  %766 = load i64*, i64** %8, align 8
  %767 = getelementptr inbounds i64, i64* %766, i64 13
  %768 = load i64, i64* %767, align 8
  %769 = load i64, i64* %7, align 8
  %770 = xor i64 %769, %768
  store i64 %770, i64* %7, align 8
  %771 = load i64*, i64** %9, align 8
  %772 = load i64, i64* %6, align 8
  %773 = lshr i64 %772, 24
  %774 = getelementptr inbounds i64, i64* %771, i64 %773
  %775 = load i64, i64* %774, align 8
  %776 = load i64*, i64** %9, align 8
  %777 = load i64, i64* %6, align 8
  %778 = lshr i64 %777, 16
  %779 = and i64 %778, 255
  %780 = add i64 256, %779
  %781 = getelementptr inbounds i64, i64* %776, i64 %780
  %782 = load i64, i64* %781, align 8
  %783 = add i64 %775, %782
  %784 = load i64*, i64** %9, align 8
  %785 = load i64, i64* %6, align 8
  %786 = lshr i64 %785, 8
  %787 = and i64 %786, 255
  %788 = add i64 512, %787
  %789 = getelementptr inbounds i64, i64* %784, i64 %788
  %790 = load i64, i64* %789, align 8
  %791 = xor i64 %783, %790
  %792 = load i64*, i64** %9, align 8
  %793 = load i64, i64* %6, align 8
  %794 = and i64 %793, 255
  %795 = add i64 768, %794
  %796 = getelementptr inbounds i64, i64* %792, i64 %795
  %797 = load i64, i64* %796, align 8
  %798 = add i64 %791, %797
  %799 = and i64 %798, 4294967295
  %800 = load i64, i64* %7, align 8
  %801 = xor i64 %800, %799
  store i64 %801, i64* %7, align 8
  %802 = load i64*, i64** %8, align 8
  %803 = getelementptr inbounds i64, i64* %802, i64 14
  %804 = load i64, i64* %803, align 8
  %805 = load i64, i64* %6, align 8
  %806 = xor i64 %805, %804
  store i64 %806, i64* %6, align 8
  %807 = load i64*, i64** %9, align 8
  %808 = load i64, i64* %7, align 8
  %809 = lshr i64 %808, 24
  %810 = getelementptr inbounds i64, i64* %807, i64 %809
  %811 = load i64, i64* %810, align 8
  %812 = load i64*, i64** %9, align 8
  %813 = load i64, i64* %7, align 8
  %814 = lshr i64 %813, 16
  %815 = and i64 %814, 255
  %816 = add i64 256, %815
  %817 = getelementptr inbounds i64, i64* %812, i64 %816
  %818 = load i64, i64* %817, align 8
  %819 = add i64 %811, %818
  %820 = load i64*, i64** %9, align 8
  %821 = load i64, i64* %7, align 8
  %822 = lshr i64 %821, 8
  %823 = and i64 %822, 255
  %824 = add i64 512, %823
  %825 = getelementptr inbounds i64, i64* %820, i64 %824
  %826 = load i64, i64* %825, align 8
  %827 = xor i64 %819, %826
  %828 = load i64*, i64** %9, align 8
  %829 = load i64, i64* %7, align 8
  %830 = and i64 %829, 255
  %831 = add i64 768, %830
  %832 = getelementptr inbounds i64, i64* %828, i64 %831
  %833 = load i64, i64* %832, align 8
  %834 = add i64 %827, %833
  %835 = and i64 %834, 4294967295
  %836 = load i64, i64* %6, align 8
  %837 = xor i64 %836, %835
  store i64 %837, i64* %6, align 8
  %838 = load i64*, i64** %8, align 8
  %839 = getelementptr inbounds i64, i64* %838, i64 15
  %840 = load i64, i64* %839, align 8
  %841 = load i64, i64* %7, align 8
  %842 = xor i64 %841, %840
  store i64 %842, i64* %7, align 8
  %843 = load i64*, i64** %9, align 8
  %844 = load i64, i64* %6, align 8
  %845 = lshr i64 %844, 24
  %846 = getelementptr inbounds i64, i64* %843, i64 %845
  %847 = load i64, i64* %846, align 8
  %848 = load i64*, i64** %9, align 8
  %849 = load i64, i64* %6, align 8
  %850 = lshr i64 %849, 16
  %851 = and i64 %850, 255
  %852 = add i64 256, %851
  %853 = getelementptr inbounds i64, i64* %848, i64 %852
  %854 = load i64, i64* %853, align 8
  %855 = add i64 %847, %854
  %856 = load i64*, i64** %9, align 8
  %857 = load i64, i64* %6, align 8
  %858 = lshr i64 %857, 8
  %859 = and i64 %858, 255
  %860 = add i64 512, %859
  %861 = getelementptr inbounds i64, i64* %856, i64 %860
  %862 = load i64, i64* %861, align 8
  %863 = xor i64 %855, %862
  %864 = load i64*, i64** %9, align 8
  %865 = load i64, i64* %6, align 8
  %866 = and i64 %865, 255
  %867 = add i64 768, %866
  %868 = getelementptr inbounds i64, i64* %864, i64 %867
  %869 = load i64, i64* %868, align 8
  %870 = add i64 %863, %869
  %871 = and i64 %870, 4294967295
  %872 = load i64, i64* %7, align 8
  %873 = xor i64 %872, %871
  store i64 %873, i64* %7, align 8
  %874 = load i64*, i64** %8, align 8
  %875 = getelementptr inbounds i64, i64* %874, i64 16
  %876 = load i64, i64* %875, align 8
  %877 = load i64, i64* %6, align 8
  %878 = xor i64 %877, %876
  store i64 %878, i64* %6, align 8
  %879 = load i64*, i64** %9, align 8
  %880 = load i64, i64* %7, align 8
  %881 = lshr i64 %880, 24
  %882 = getelementptr inbounds i64, i64* %879, i64 %881
  %883 = load i64, i64* %882, align 8
  %884 = load i64*, i64** %9, align 8
  %885 = load i64, i64* %7, align 8
  %886 = lshr i64 %885, 16
  %887 = and i64 %886, 255
  %888 = add i64 256, %887
  %889 = getelementptr inbounds i64, i64* %884, i64 %888
  %890 = load i64, i64* %889, align 8
  %891 = add i64 %883, %890
  %892 = load i64*, i64** %9, align 8
  %893 = load i64, i64* %7, align 8
  %894 = lshr i64 %893, 8
  %895 = and i64 %894, 255
  %896 = add i64 512, %895
  %897 = getelementptr inbounds i64, i64* %892, i64 %896
  %898 = load i64, i64* %897, align 8
  %899 = xor i64 %891, %898
  %900 = load i64*, i64** %9, align 8
  %901 = load i64, i64* %7, align 8
  %902 = and i64 %901, 255
  %903 = add i64 768, %902
  %904 = getelementptr inbounds i64, i64* %900, i64 %903
  %905 = load i64, i64* %904, align 8
  %906 = add i64 %899, %905
  %907 = and i64 %906, 4294967295
  %908 = load i64, i64* %6, align 8
  %909 = xor i64 %908, %907
  store i64 %909, i64* %6, align 8
  %910 = load i64*, i64** %8, align 8
  %911 = getelementptr inbounds i64, i64* %910, i64 17
  %912 = load i64, i64* %911, align 8
  %913 = load i64, i64* %7, align 8
  %914 = xor i64 %913, %912
  store i64 %914, i64* %7, align 8
  br label %BF_encrypt.exit.i

915:                                              ; preds = %265
  %916 = load i64*, i64** %8, align 8
  %917 = getelementptr inbounds i64, i64* %916, i64 17
  %918 = load i64, i64* %917, align 8
  %919 = load i64, i64* %6, align 8
  %920 = xor i64 %919, %918
  store i64 %920, i64* %6, align 8
  %921 = load i64*, i64** %8, align 8
  %922 = getelementptr inbounds i64, i64* %921, i64 16
  %923 = load i64, i64* %922, align 8
  %924 = load i64, i64* %7, align 8
  %925 = xor i64 %924, %923
  store i64 %925, i64* %7, align 8
  %926 = load i64*, i64** %9, align 8
  %927 = load i64, i64* %6, align 8
  %928 = lshr i64 %927, 24
  %929 = getelementptr inbounds i64, i64* %926, i64 %928
  %930 = load i64, i64* %929, align 8
  %931 = load i64*, i64** %9, align 8
  %932 = load i64, i64* %6, align 8
  %933 = lshr i64 %932, 16
  %934 = and i64 %933, 255
  %935 = add i64 256, %934
  %936 = getelementptr inbounds i64, i64* %931, i64 %935
  %937 = load i64, i64* %936, align 8
  %938 = add i64 %930, %937
  %939 = load i64*, i64** %9, align 8
  %940 = load i64, i64* %6, align 8
  %941 = lshr i64 %940, 8
  %942 = and i64 %941, 255
  %943 = add i64 512, %942
  %944 = getelementptr inbounds i64, i64* %939, i64 %943
  %945 = load i64, i64* %944, align 8
  %946 = xor i64 %938, %945
  %947 = load i64*, i64** %9, align 8
  %948 = load i64, i64* %6, align 8
  %949 = and i64 %948, 255
  %950 = add i64 768, %949
  %951 = getelementptr inbounds i64, i64* %947, i64 %950
  %952 = load i64, i64* %951, align 8
  %953 = add i64 %946, %952
  %954 = and i64 %953, 4294967295
  %955 = load i64, i64* %7, align 8
  %956 = xor i64 %955, %954
  store i64 %956, i64* %7, align 8
  %957 = load i64*, i64** %8, align 8
  %958 = getelementptr inbounds i64, i64* %957, i64 15
  %959 = load i64, i64* %958, align 8
  %960 = load i64, i64* %6, align 8
  %961 = xor i64 %960, %959
  store i64 %961, i64* %6, align 8
  %962 = load i64*, i64** %9, align 8
  %963 = load i64, i64* %7, align 8
  %964 = lshr i64 %963, 24
  %965 = getelementptr inbounds i64, i64* %962, i64 %964
  %966 = load i64, i64* %965, align 8
  %967 = load i64*, i64** %9, align 8
  %968 = load i64, i64* %7, align 8
  %969 = lshr i64 %968, 16
  %970 = and i64 %969, 255
  %971 = add i64 256, %970
  %972 = getelementptr inbounds i64, i64* %967, i64 %971
  %973 = load i64, i64* %972, align 8
  %974 = add i64 %966, %973
  %975 = load i64*, i64** %9, align 8
  %976 = load i64, i64* %7, align 8
  %977 = lshr i64 %976, 8
  %978 = and i64 %977, 255
  %979 = add i64 512, %978
  %980 = getelementptr inbounds i64, i64* %975, i64 %979
  %981 = load i64, i64* %980, align 8
  %982 = xor i64 %974, %981
  %983 = load i64*, i64** %9, align 8
  %984 = load i64, i64* %7, align 8
  %985 = and i64 %984, 255
  %986 = add i64 768, %985
  %987 = getelementptr inbounds i64, i64* %983, i64 %986
  %988 = load i64, i64* %987, align 8
  %989 = add i64 %982, %988
  %990 = and i64 %989, 4294967295
  %991 = load i64, i64* %6, align 8
  %992 = xor i64 %991, %990
  store i64 %992, i64* %6, align 8
  %993 = load i64*, i64** %8, align 8
  %994 = getelementptr inbounds i64, i64* %993, i64 14
  %995 = load i64, i64* %994, align 8
  %996 = load i64, i64* %7, align 8
  %997 = xor i64 %996, %995
  store i64 %997, i64* %7, align 8
  %998 = load i64*, i64** %9, align 8
  %999 = load i64, i64* %6, align 8
  %1000 = lshr i64 %999, 24
  %1001 = getelementptr inbounds i64, i64* %998, i64 %1000
  %1002 = load i64, i64* %1001, align 8
  %1003 = load i64*, i64** %9, align 8
  %1004 = load i64, i64* %6, align 8
  %1005 = lshr i64 %1004, 16
  %1006 = and i64 %1005, 255
  %1007 = add i64 256, %1006
  %1008 = getelementptr inbounds i64, i64* %1003, i64 %1007
  %1009 = load i64, i64* %1008, align 8
  %1010 = add i64 %1002, %1009
  %1011 = load i64*, i64** %9, align 8
  %1012 = load i64, i64* %6, align 8
  %1013 = lshr i64 %1012, 8
  %1014 = and i64 %1013, 255
  %1015 = add i64 512, %1014
  %1016 = getelementptr inbounds i64, i64* %1011, i64 %1015
  %1017 = load i64, i64* %1016, align 8
  %1018 = xor i64 %1010, %1017
  %1019 = load i64*, i64** %9, align 8
  %1020 = load i64, i64* %6, align 8
  %1021 = and i64 %1020, 255
  %1022 = add i64 768, %1021
  %1023 = getelementptr inbounds i64, i64* %1019, i64 %1022
  %1024 = load i64, i64* %1023, align 8
  %1025 = add i64 %1018, %1024
  %1026 = and i64 %1025, 4294967295
  %1027 = load i64, i64* %7, align 8
  %1028 = xor i64 %1027, %1026
  store i64 %1028, i64* %7, align 8
  %1029 = load i64*, i64** %8, align 8
  %1030 = getelementptr inbounds i64, i64* %1029, i64 13
  %1031 = load i64, i64* %1030, align 8
  %1032 = load i64, i64* %6, align 8
  %1033 = xor i64 %1032, %1031
  store i64 %1033, i64* %6, align 8
  %1034 = load i64*, i64** %9, align 8
  %1035 = load i64, i64* %7, align 8
  %1036 = lshr i64 %1035, 24
  %1037 = getelementptr inbounds i64, i64* %1034, i64 %1036
  %1038 = load i64, i64* %1037, align 8
  %1039 = load i64*, i64** %9, align 8
  %1040 = load i64, i64* %7, align 8
  %1041 = lshr i64 %1040, 16
  %1042 = and i64 %1041, 255
  %1043 = add i64 256, %1042
  %1044 = getelementptr inbounds i64, i64* %1039, i64 %1043
  %1045 = load i64, i64* %1044, align 8
  %1046 = add i64 %1038, %1045
  %1047 = load i64*, i64** %9, align 8
  %1048 = load i64, i64* %7, align 8
  %1049 = lshr i64 %1048, 8
  %1050 = and i64 %1049, 255
  %1051 = add i64 512, %1050
  %1052 = getelementptr inbounds i64, i64* %1047, i64 %1051
  %1053 = load i64, i64* %1052, align 8
  %1054 = xor i64 %1046, %1053
  %1055 = load i64*, i64** %9, align 8
  %1056 = load i64, i64* %7, align 8
  %1057 = and i64 %1056, 255
  %1058 = add i64 768, %1057
  %1059 = getelementptr inbounds i64, i64* %1055, i64 %1058
  %1060 = load i64, i64* %1059, align 8
  %1061 = add i64 %1054, %1060
  %1062 = and i64 %1061, 4294967295
  %1063 = load i64, i64* %6, align 8
  %1064 = xor i64 %1063, %1062
  store i64 %1064, i64* %6, align 8
  %1065 = load i64*, i64** %8, align 8
  %1066 = getelementptr inbounds i64, i64* %1065, i64 12
  %1067 = load i64, i64* %1066, align 8
  %1068 = load i64, i64* %7, align 8
  %1069 = xor i64 %1068, %1067
  store i64 %1069, i64* %7, align 8
  %1070 = load i64*, i64** %9, align 8
  %1071 = load i64, i64* %6, align 8
  %1072 = lshr i64 %1071, 24
  %1073 = getelementptr inbounds i64, i64* %1070, i64 %1072
  %1074 = load i64, i64* %1073, align 8
  %1075 = load i64*, i64** %9, align 8
  %1076 = load i64, i64* %6, align 8
  %1077 = lshr i64 %1076, 16
  %1078 = and i64 %1077, 255
  %1079 = add i64 256, %1078
  %1080 = getelementptr inbounds i64, i64* %1075, i64 %1079
  %1081 = load i64, i64* %1080, align 8
  %1082 = add i64 %1074, %1081
  %1083 = load i64*, i64** %9, align 8
  %1084 = load i64, i64* %6, align 8
  %1085 = lshr i64 %1084, 8
  %1086 = and i64 %1085, 255
  %1087 = add i64 512, %1086
  %1088 = getelementptr inbounds i64, i64* %1083, i64 %1087
  %1089 = load i64, i64* %1088, align 8
  %1090 = xor i64 %1082, %1089
  %1091 = load i64*, i64** %9, align 8
  %1092 = load i64, i64* %6, align 8
  %1093 = and i64 %1092, 255
  %1094 = add i64 768, %1093
  %1095 = getelementptr inbounds i64, i64* %1091, i64 %1094
  %1096 = load i64, i64* %1095, align 8
  %1097 = add i64 %1090, %1096
  %1098 = and i64 %1097, 4294967295
  %1099 = load i64, i64* %7, align 8
  %1100 = xor i64 %1099, %1098
  store i64 %1100, i64* %7, align 8
  %1101 = load i64*, i64** %8, align 8
  %1102 = getelementptr inbounds i64, i64* %1101, i64 11
  %1103 = load i64, i64* %1102, align 8
  %1104 = load i64, i64* %6, align 8
  %1105 = xor i64 %1104, %1103
  store i64 %1105, i64* %6, align 8
  %1106 = load i64*, i64** %9, align 8
  %1107 = load i64, i64* %7, align 8
  %1108 = lshr i64 %1107, 24
  %1109 = getelementptr inbounds i64, i64* %1106, i64 %1108
  %1110 = load i64, i64* %1109, align 8
  %1111 = load i64*, i64** %9, align 8
  %1112 = load i64, i64* %7, align 8
  %1113 = lshr i64 %1112, 16
  %1114 = and i64 %1113, 255
  %1115 = add i64 256, %1114
  %1116 = getelementptr inbounds i64, i64* %1111, i64 %1115
  %1117 = load i64, i64* %1116, align 8
  %1118 = add i64 %1110, %1117
  %1119 = load i64*, i64** %9, align 8
  %1120 = load i64, i64* %7, align 8
  %1121 = lshr i64 %1120, 8
  %1122 = and i64 %1121, 255
  %1123 = add i64 512, %1122
  %1124 = getelementptr inbounds i64, i64* %1119, i64 %1123
  %1125 = load i64, i64* %1124, align 8
  %1126 = xor i64 %1118, %1125
  %1127 = load i64*, i64** %9, align 8
  %1128 = load i64, i64* %7, align 8
  %1129 = and i64 %1128, 255
  %1130 = add i64 768, %1129
  %1131 = getelementptr inbounds i64, i64* %1127, i64 %1130
  %1132 = load i64, i64* %1131, align 8
  %1133 = add i64 %1126, %1132
  %1134 = and i64 %1133, 4294967295
  %1135 = load i64, i64* %6, align 8
  %1136 = xor i64 %1135, %1134
  store i64 %1136, i64* %6, align 8
  %1137 = load i64*, i64** %8, align 8
  %1138 = getelementptr inbounds i64, i64* %1137, i64 10
  %1139 = load i64, i64* %1138, align 8
  %1140 = load i64, i64* %7, align 8
  %1141 = xor i64 %1140, %1139
  store i64 %1141, i64* %7, align 8
  %1142 = load i64*, i64** %9, align 8
  %1143 = load i64, i64* %6, align 8
  %1144 = lshr i64 %1143, 24
  %1145 = getelementptr inbounds i64, i64* %1142, i64 %1144
  %1146 = load i64, i64* %1145, align 8
  %1147 = load i64*, i64** %9, align 8
  %1148 = load i64, i64* %6, align 8
  %1149 = lshr i64 %1148, 16
  %1150 = and i64 %1149, 255
  %1151 = add i64 256, %1150
  %1152 = getelementptr inbounds i64, i64* %1147, i64 %1151
  %1153 = load i64, i64* %1152, align 8
  %1154 = add i64 %1146, %1153
  %1155 = load i64*, i64** %9, align 8
  %1156 = load i64, i64* %6, align 8
  %1157 = lshr i64 %1156, 8
  %1158 = and i64 %1157, 255
  %1159 = add i64 512, %1158
  %1160 = getelementptr inbounds i64, i64* %1155, i64 %1159
  %1161 = load i64, i64* %1160, align 8
  %1162 = xor i64 %1154, %1161
  %1163 = load i64*, i64** %9, align 8
  %1164 = load i64, i64* %6, align 8
  %1165 = and i64 %1164, 255
  %1166 = add i64 768, %1165
  %1167 = getelementptr inbounds i64, i64* %1163, i64 %1166
  %1168 = load i64, i64* %1167, align 8
  %1169 = add i64 %1162, %1168
  %1170 = and i64 %1169, 4294967295
  %1171 = load i64, i64* %7, align 8
  %1172 = xor i64 %1171, %1170
  store i64 %1172, i64* %7, align 8
  %1173 = load i64*, i64** %8, align 8
  %1174 = getelementptr inbounds i64, i64* %1173, i64 9
  %1175 = load i64, i64* %1174, align 8
  %1176 = load i64, i64* %6, align 8
  %1177 = xor i64 %1176, %1175
  store i64 %1177, i64* %6, align 8
  %1178 = load i64*, i64** %9, align 8
  %1179 = load i64, i64* %7, align 8
  %1180 = lshr i64 %1179, 24
  %1181 = getelementptr inbounds i64, i64* %1178, i64 %1180
  %1182 = load i64, i64* %1181, align 8
  %1183 = load i64*, i64** %9, align 8
  %1184 = load i64, i64* %7, align 8
  %1185 = lshr i64 %1184, 16
  %1186 = and i64 %1185, 255
  %1187 = add i64 256, %1186
  %1188 = getelementptr inbounds i64, i64* %1183, i64 %1187
  %1189 = load i64, i64* %1188, align 8
  %1190 = add i64 %1182, %1189
  %1191 = load i64*, i64** %9, align 8
  %1192 = load i64, i64* %7, align 8
  %1193 = lshr i64 %1192, 8
  %1194 = and i64 %1193, 255
  %1195 = add i64 512, %1194
  %1196 = getelementptr inbounds i64, i64* %1191, i64 %1195
  %1197 = load i64, i64* %1196, align 8
  %1198 = xor i64 %1190, %1197
  %1199 = load i64*, i64** %9, align 8
  %1200 = load i64, i64* %7, align 8
  %1201 = and i64 %1200, 255
  %1202 = add i64 768, %1201
  %1203 = getelementptr inbounds i64, i64* %1199, i64 %1202
  %1204 = load i64, i64* %1203, align 8
  %1205 = add i64 %1198, %1204
  %1206 = and i64 %1205, 4294967295
  %1207 = load i64, i64* %6, align 8
  %1208 = xor i64 %1207, %1206
  store i64 %1208, i64* %6, align 8
  %1209 = load i64*, i64** %8, align 8
  %1210 = getelementptr inbounds i64, i64* %1209, i64 8
  %1211 = load i64, i64* %1210, align 8
  %1212 = load i64, i64* %7, align 8
  %1213 = xor i64 %1212, %1211
  store i64 %1213, i64* %7, align 8
  %1214 = load i64*, i64** %9, align 8
  %1215 = load i64, i64* %6, align 8
  %1216 = lshr i64 %1215, 24
  %1217 = getelementptr inbounds i64, i64* %1214, i64 %1216
  %1218 = load i64, i64* %1217, align 8
  %1219 = load i64*, i64** %9, align 8
  %1220 = load i64, i64* %6, align 8
  %1221 = lshr i64 %1220, 16
  %1222 = and i64 %1221, 255
  %1223 = add i64 256, %1222
  %1224 = getelementptr inbounds i64, i64* %1219, i64 %1223
  %1225 = load i64, i64* %1224, align 8
  %1226 = add i64 %1218, %1225
  %1227 = load i64*, i64** %9, align 8
  %1228 = load i64, i64* %6, align 8
  %1229 = lshr i64 %1228, 8
  %1230 = and i64 %1229, 255
  %1231 = add i64 512, %1230
  %1232 = getelementptr inbounds i64, i64* %1227, i64 %1231
  %1233 = load i64, i64* %1232, align 8
  %1234 = xor i64 %1226, %1233
  %1235 = load i64*, i64** %9, align 8
  %1236 = load i64, i64* %6, align 8
  %1237 = and i64 %1236, 255
  %1238 = add i64 768, %1237
  %1239 = getelementptr inbounds i64, i64* %1235, i64 %1238
  %1240 = load i64, i64* %1239, align 8
  %1241 = add i64 %1234, %1240
  %1242 = and i64 %1241, 4294967295
  %1243 = load i64, i64* %7, align 8
  %1244 = xor i64 %1243, %1242
  store i64 %1244, i64* %7, align 8
  %1245 = load i64*, i64** %8, align 8
  %1246 = getelementptr inbounds i64, i64* %1245, i64 7
  %1247 = load i64, i64* %1246, align 8
  %1248 = load i64, i64* %6, align 8
  %1249 = xor i64 %1248, %1247
  store i64 %1249, i64* %6, align 8
  %1250 = load i64*, i64** %9, align 8
  %1251 = load i64, i64* %7, align 8
  %1252 = lshr i64 %1251, 24
  %1253 = getelementptr inbounds i64, i64* %1250, i64 %1252
  %1254 = load i64, i64* %1253, align 8
  %1255 = load i64*, i64** %9, align 8
  %1256 = load i64, i64* %7, align 8
  %1257 = lshr i64 %1256, 16
  %1258 = and i64 %1257, 255
  %1259 = add i64 256, %1258
  %1260 = getelementptr inbounds i64, i64* %1255, i64 %1259
  %1261 = load i64, i64* %1260, align 8
  %1262 = add i64 %1254, %1261
  %1263 = load i64*, i64** %9, align 8
  %1264 = load i64, i64* %7, align 8
  %1265 = lshr i64 %1264, 8
  %1266 = and i64 %1265, 255
  %1267 = add i64 512, %1266
  %1268 = getelementptr inbounds i64, i64* %1263, i64 %1267
  %1269 = load i64, i64* %1268, align 8
  %1270 = xor i64 %1262, %1269
  %1271 = load i64*, i64** %9, align 8
  %1272 = load i64, i64* %7, align 8
  %1273 = and i64 %1272, 255
  %1274 = add i64 768, %1273
  %1275 = getelementptr inbounds i64, i64* %1271, i64 %1274
  %1276 = load i64, i64* %1275, align 8
  %1277 = add i64 %1270, %1276
  %1278 = and i64 %1277, 4294967295
  %1279 = load i64, i64* %6, align 8
  %1280 = xor i64 %1279, %1278
  store i64 %1280, i64* %6, align 8
  %1281 = load i64*, i64** %8, align 8
  %1282 = getelementptr inbounds i64, i64* %1281, i64 6
  %1283 = load i64, i64* %1282, align 8
  %1284 = load i64, i64* %7, align 8
  %1285 = xor i64 %1284, %1283
  store i64 %1285, i64* %7, align 8
  %1286 = load i64*, i64** %9, align 8
  %1287 = load i64, i64* %6, align 8
  %1288 = lshr i64 %1287, 24
  %1289 = getelementptr inbounds i64, i64* %1286, i64 %1288
  %1290 = load i64, i64* %1289, align 8
  %1291 = load i64*, i64** %9, align 8
  %1292 = load i64, i64* %6, align 8
  %1293 = lshr i64 %1292, 16
  %1294 = and i64 %1293, 255
  %1295 = add i64 256, %1294
  %1296 = getelementptr inbounds i64, i64* %1291, i64 %1295
  %1297 = load i64, i64* %1296, align 8
  %1298 = add i64 %1290, %1297
  %1299 = load i64*, i64** %9, align 8
  %1300 = load i64, i64* %6, align 8
  %1301 = lshr i64 %1300, 8
  %1302 = and i64 %1301, 255
  %1303 = add i64 512, %1302
  %1304 = getelementptr inbounds i64, i64* %1299, i64 %1303
  %1305 = load i64, i64* %1304, align 8
  %1306 = xor i64 %1298, %1305
  %1307 = load i64*, i64** %9, align 8
  %1308 = load i64, i64* %6, align 8
  %1309 = and i64 %1308, 255
  %1310 = add i64 768, %1309
  %1311 = getelementptr inbounds i64, i64* %1307, i64 %1310
  %1312 = load i64, i64* %1311, align 8
  %1313 = add i64 %1306, %1312
  %1314 = and i64 %1313, 4294967295
  %1315 = load i64, i64* %7, align 8
  %1316 = xor i64 %1315, %1314
  store i64 %1316, i64* %7, align 8
  %1317 = load i64*, i64** %8, align 8
  %1318 = getelementptr inbounds i64, i64* %1317, i64 5
  %1319 = load i64, i64* %1318, align 8
  %1320 = load i64, i64* %6, align 8
  %1321 = xor i64 %1320, %1319
  store i64 %1321, i64* %6, align 8
  %1322 = load i64*, i64** %9, align 8
  %1323 = load i64, i64* %7, align 8
  %1324 = lshr i64 %1323, 24
  %1325 = getelementptr inbounds i64, i64* %1322, i64 %1324
  %1326 = load i64, i64* %1325, align 8
  %1327 = load i64*, i64** %9, align 8
  %1328 = load i64, i64* %7, align 8
  %1329 = lshr i64 %1328, 16
  %1330 = and i64 %1329, 255
  %1331 = add i64 256, %1330
  %1332 = getelementptr inbounds i64, i64* %1327, i64 %1331
  %1333 = load i64, i64* %1332, align 8
  %1334 = add i64 %1326, %1333
  %1335 = load i64*, i64** %9, align 8
  %1336 = load i64, i64* %7, align 8
  %1337 = lshr i64 %1336, 8
  %1338 = and i64 %1337, 255
  %1339 = add i64 512, %1338
  %1340 = getelementptr inbounds i64, i64* %1335, i64 %1339
  %1341 = load i64, i64* %1340, align 8
  %1342 = xor i64 %1334, %1341
  %1343 = load i64*, i64** %9, align 8
  %1344 = load i64, i64* %7, align 8
  %1345 = and i64 %1344, 255
  %1346 = add i64 768, %1345
  %1347 = getelementptr inbounds i64, i64* %1343, i64 %1346
  %1348 = load i64, i64* %1347, align 8
  %1349 = add i64 %1342, %1348
  %1350 = and i64 %1349, 4294967295
  %1351 = load i64, i64* %6, align 8
  %1352 = xor i64 %1351, %1350
  store i64 %1352, i64* %6, align 8
  %1353 = load i64*, i64** %8, align 8
  %1354 = getelementptr inbounds i64, i64* %1353, i64 4
  %1355 = load i64, i64* %1354, align 8
  %1356 = load i64, i64* %7, align 8
  %1357 = xor i64 %1356, %1355
  store i64 %1357, i64* %7, align 8
  %1358 = load i64*, i64** %9, align 8
  %1359 = load i64, i64* %6, align 8
  %1360 = lshr i64 %1359, 24
  %1361 = getelementptr inbounds i64, i64* %1358, i64 %1360
  %1362 = load i64, i64* %1361, align 8
  %1363 = load i64*, i64** %9, align 8
  %1364 = load i64, i64* %6, align 8
  %1365 = lshr i64 %1364, 16
  %1366 = and i64 %1365, 255
  %1367 = add i64 256, %1366
  %1368 = getelementptr inbounds i64, i64* %1363, i64 %1367
  %1369 = load i64, i64* %1368, align 8
  %1370 = add i64 %1362, %1369
  %1371 = load i64*, i64** %9, align 8
  %1372 = load i64, i64* %6, align 8
  %1373 = lshr i64 %1372, 8
  %1374 = and i64 %1373, 255
  %1375 = add i64 512, %1374
  %1376 = getelementptr inbounds i64, i64* %1371, i64 %1375
  %1377 = load i64, i64* %1376, align 8
  %1378 = xor i64 %1370, %1377
  %1379 = load i64*, i64** %9, align 8
  %1380 = load i64, i64* %6, align 8
  %1381 = and i64 %1380, 255
  %1382 = add i64 768, %1381
  %1383 = getelementptr inbounds i64, i64* %1379, i64 %1382
  %1384 = load i64, i64* %1383, align 8
  %1385 = add i64 %1378, %1384
  %1386 = and i64 %1385, 4294967295
  %1387 = load i64, i64* %7, align 8
  %1388 = xor i64 %1387, %1386
  store i64 %1388, i64* %7, align 8
  %1389 = load i64*, i64** %8, align 8
  %1390 = getelementptr inbounds i64, i64* %1389, i64 3
  %1391 = load i64, i64* %1390, align 8
  %1392 = load i64, i64* %6, align 8
  %1393 = xor i64 %1392, %1391
  store i64 %1393, i64* %6, align 8
  %1394 = load i64*, i64** %9, align 8
  %1395 = load i64, i64* %7, align 8
  %1396 = lshr i64 %1395, 24
  %1397 = getelementptr inbounds i64, i64* %1394, i64 %1396
  %1398 = load i64, i64* %1397, align 8
  %1399 = load i64*, i64** %9, align 8
  %1400 = load i64, i64* %7, align 8
  %1401 = lshr i64 %1400, 16
  %1402 = and i64 %1401, 255
  %1403 = add i64 256, %1402
  %1404 = getelementptr inbounds i64, i64* %1399, i64 %1403
  %1405 = load i64, i64* %1404, align 8
  %1406 = add i64 %1398, %1405
  %1407 = load i64*, i64** %9, align 8
  %1408 = load i64, i64* %7, align 8
  %1409 = lshr i64 %1408, 8
  %1410 = and i64 %1409, 255
  %1411 = add i64 512, %1410
  %1412 = getelementptr inbounds i64, i64* %1407, i64 %1411
  %1413 = load i64, i64* %1412, align 8
  %1414 = xor i64 %1406, %1413
  %1415 = load i64*, i64** %9, align 8
  %1416 = load i64, i64* %7, align 8
  %1417 = and i64 %1416, 255
  %1418 = add i64 768, %1417
  %1419 = getelementptr inbounds i64, i64* %1415, i64 %1418
  %1420 = load i64, i64* %1419, align 8
  %1421 = add i64 %1414, %1420
  %1422 = and i64 %1421, 4294967295
  %1423 = load i64, i64* %6, align 8
  %1424 = xor i64 %1423, %1422
  store i64 %1424, i64* %6, align 8
  %1425 = load i64*, i64** %8, align 8
  %1426 = getelementptr inbounds i64, i64* %1425, i64 2
  %1427 = load i64, i64* %1426, align 8
  %1428 = load i64, i64* %7, align 8
  %1429 = xor i64 %1428, %1427
  store i64 %1429, i64* %7, align 8
  %1430 = load i64*, i64** %9, align 8
  %1431 = load i64, i64* %6, align 8
  %1432 = lshr i64 %1431, 24
  %1433 = getelementptr inbounds i64, i64* %1430, i64 %1432
  %1434 = load i64, i64* %1433, align 8
  %1435 = load i64*, i64** %9, align 8
  %1436 = load i64, i64* %6, align 8
  %1437 = lshr i64 %1436, 16
  %1438 = and i64 %1437, 255
  %1439 = add i64 256, %1438
  %1440 = getelementptr inbounds i64, i64* %1435, i64 %1439
  %1441 = load i64, i64* %1440, align 8
  %1442 = add i64 %1434, %1441
  %1443 = load i64*, i64** %9, align 8
  %1444 = load i64, i64* %6, align 8
  %1445 = lshr i64 %1444, 8
  %1446 = and i64 %1445, 255
  %1447 = add i64 512, %1446
  %1448 = getelementptr inbounds i64, i64* %1443, i64 %1447
  %1449 = load i64, i64* %1448, align 8
  %1450 = xor i64 %1442, %1449
  %1451 = load i64*, i64** %9, align 8
  %1452 = load i64, i64* %6, align 8
  %1453 = and i64 %1452, 255
  %1454 = add i64 768, %1453
  %1455 = getelementptr inbounds i64, i64* %1451, i64 %1454
  %1456 = load i64, i64* %1455, align 8
  %1457 = add i64 %1450, %1456
  %1458 = and i64 %1457, 4294967295
  %1459 = load i64, i64* %7, align 8
  %1460 = xor i64 %1459, %1458
  store i64 %1460, i64* %7, align 8
  %1461 = load i64*, i64** %8, align 8
  %1462 = getelementptr inbounds i64, i64* %1461, i64 1
  %1463 = load i64, i64* %1462, align 8
  %1464 = load i64, i64* %6, align 8
  %1465 = xor i64 %1464, %1463
  store i64 %1465, i64* %6, align 8
  %1466 = load i64*, i64** %9, align 8
  %1467 = load i64, i64* %7, align 8
  %1468 = lshr i64 %1467, 24
  %1469 = getelementptr inbounds i64, i64* %1466, i64 %1468
  %1470 = load i64, i64* %1469, align 8
  %1471 = load i64*, i64** %9, align 8
  %1472 = load i64, i64* %7, align 8
  %1473 = lshr i64 %1472, 16
  %1474 = and i64 %1473, 255
  %1475 = add i64 256, %1474
  %1476 = getelementptr inbounds i64, i64* %1471, i64 %1475
  %1477 = load i64, i64* %1476, align 8
  %1478 = add i64 %1470, %1477
  %1479 = load i64*, i64** %9, align 8
  %1480 = load i64, i64* %7, align 8
  %1481 = lshr i64 %1480, 8
  %1482 = and i64 %1481, 255
  %1483 = add i64 512, %1482
  %1484 = getelementptr inbounds i64, i64* %1479, i64 %1483
  %1485 = load i64, i64* %1484, align 8
  %1486 = xor i64 %1478, %1485
  %1487 = load i64*, i64** %9, align 8
  %1488 = load i64, i64* %7, align 8
  %1489 = and i64 %1488, 255
  %1490 = add i64 768, %1489
  %1491 = getelementptr inbounds i64, i64* %1487, i64 %1490
  %1492 = load i64, i64* %1491, align 8
  %1493 = add i64 %1486, %1492
  %1494 = and i64 %1493, 4294967295
  %1495 = load i64, i64* %6, align 8
  %1496 = xor i64 %1495, %1494
  store i64 %1496, i64* %6, align 8
  %1497 = load i64*, i64** %8, align 8
  %1498 = load i64, i64* %1497, align 8
  %1499 = load i64, i64* %7, align 8
  %1500 = xor i64 %1499, %1498
  store i64 %1500, i64* %7, align 8
  br label %BF_encrypt.exit.i

BF_encrypt.exit.i:                                ; preds = %915, %329
  %1501 = phi i32 [ %259, %915 ], [ %259, %329 ]
  %1502 = phi i64 [ %261, %915 ], [ %261, %329 ]
  %1503 = load i64, i64* %6, align 8
  %1504 = and i64 %1503, 4294967295
  %1505 = load i64*, i64** %3, align 8
  %1506 = getelementptr inbounds i64, i64* %1505, i64 1
  store i64 %1504, i64* %1506, align 8
  %1507 = load i64, i64* %7, align 8
  %1508 = and i64 %1507, 4294967295
  %1509 = load i64*, i64** %3, align 8
  store i64 %1508, i64* %1509, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %243) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %244) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %245) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %246) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %247) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %248) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %249) #10
  store i8* %250, i8** %23, align 8
  %1510 = load i64, i64* %251, align 16
  store i64 %1510, i64* %19, align 8
  %1511 = load i64, i64* %19, align 8
  %1512 = lshr i64 %1511, 24
  %1513 = and i64 %1512, 255
  %1514 = trunc i64 %1513 to i8
  %1515 = load i8*, i8** %23, align 8
  %1516 = getelementptr inbounds i8, i8* %1515, i32 1
  store i8* %1516, i8** %23, align 8
  store i8 %1514, i8* %1515, align 1
  %1517 = load i64, i64* %19, align 8
  %1518 = lshr i64 %1517, 16
  %1519 = and i64 %1518, 255
  %1520 = trunc i64 %1519 to i8
  %1521 = load i8*, i8** %23, align 8
  %1522 = getelementptr inbounds i8, i8* %1521, i32 1
  store i8* %1522, i8** %23, align 8
  store i8 %1520, i8* %1521, align 1
  %1523 = load i64, i64* %19, align 8
  %1524 = lshr i64 %1523, 8
  %1525 = and i64 %1524, 255
  %1526 = trunc i64 %1525 to i8
  %1527 = load i8*, i8** %23, align 8
  %1528 = getelementptr inbounds i8, i8* %1527, i32 1
  store i8* %1528, i8** %23, align 8
  store i8 %1526, i8* %1527, align 1
  %1529 = load i64, i64* %19, align 8
  %1530 = and i64 %1529, 255
  %1531 = trunc i64 %1530 to i8
  %1532 = load i8*, i8** %23, align 8
  %1533 = getelementptr inbounds i8, i8* %1532, i32 1
  store i8* %1533, i8** %23, align 8
  store i8 %1531, i8* %1532, align 1
  %1534 = load i64, i64* %252, align 8
  store i64 %1534, i64* %19, align 8
  %1535 = load i64, i64* %19, align 8
  %1536 = lshr i64 %1535, 24
  %1537 = and i64 %1536, 255
  %1538 = trunc i64 %1537 to i8
  %1539 = load i8*, i8** %23, align 8
  %1540 = getelementptr inbounds i8, i8* %1539, i32 1
  store i8* %1540, i8** %23, align 8
  store i8 %1538, i8* %1539, align 1
  %1541 = load i64, i64* %19, align 8
  %1542 = lshr i64 %1541, 16
  %1543 = and i64 %1542, 255
  %1544 = trunc i64 %1543 to i8
  %1545 = load i8*, i8** %23, align 8
  %1546 = getelementptr inbounds i8, i8* %1545, i32 1
  store i8* %1546, i8** %23, align 8
  store i8 %1544, i8* %1545, align 1
  %1547 = load i64, i64* %19, align 8
  %1548 = lshr i64 %1547, 8
  %1549 = and i64 %1548, 255
  %1550 = trunc i64 %1549 to i8
  %1551 = load i8*, i8** %23, align 8
  %1552 = getelementptr inbounds i8, i8* %1551, i32 1
  store i8* %1552, i8** %23, align 8
  store i8 %1550, i8* %1551, align 1
  %1553 = load i64, i64* %19, align 8
  %1554 = and i64 %1553, 255
  %1555 = trunc i64 %1554 to i8
  %1556 = load i8*, i8** %23, align 8
  %1557 = getelementptr inbounds i8, i8* %1556, i32 1
  store i8* %1557, i8** %23, align 8
  store i8 %1555, i8* %1556, align 1
  store i8* %253, i8** %23, align 8
  br label %1558

1558:                                             ; preds = %BF_encrypt.exit.i, %._crit_edge.i
  %1559 = phi i32 [ %1501, %BF_encrypt.exit.i ], [ %259, %._crit_edge.i ]
  %1560 = phi i64 [ %1502, %BF_encrypt.exit.i ], [ %261, %._crit_edge.i ]
  %1561 = load i8*, i8** %10, align 8
  %1562 = getelementptr inbounds i8, i8* %1561, i32 1
  store i8* %1562, i8** %10, align 8
  %1563 = load i8, i8* %1561, align 1
  %1564 = zext i8 %1563 to i32
  %1565 = load i8*, i8** %23, align 8
  %1566 = sext i32 %1559 to i64
  %1567 = getelementptr inbounds i8, i8* %1565, i64 %1566
  %1568 = load i8, i8* %1567, align 1
  %1569 = zext i8 %1568 to i32
  %1570 = xor i32 %1564, %1569
  %1571 = trunc i32 %1570 to i8
  store i8 %1571, i8* %24, align 1
  %1572 = load i8, i8* %24, align 1
  %1573 = load i8*, i8** %11, align 8
  %1574 = getelementptr inbounds i8, i8* %1573, i32 1
  store i8* %1574, i8** %11, align 8
  store i8 %1572, i8* %1573, align 1
  %1575 = load i8, i8* %24, align 1
  %1576 = load i8*, i8** %23, align 8
  %1577 = sext i32 %1559 to i64
  %1578 = getelementptr inbounds i8, i8* %1576, i64 %1577
  store i8 %1575, i8* %1578, align 1
  %1579 = add nsw i32 %1559, 1
  %1580 = and i32 %1579, 7
  br label %258

1581:                                             ; preds = %1775
  %.lcssa3 = phi i64 [ %1779, %1775 ]
  %.lcssa2 = phi i32 [ %1777, %1775 ]
  %.lcssa1 = phi i32 [ %1776, %1775 ]
  store i64 %.lcssa3, i64* %21
  store i32 %.lcssa2, i32* %5
  store i32 %.lcssa1, i32* %20
  br label %BF_cfb64_encrypt.exit

1582:                                             ; preds = %204
  br label %1583

1583:                                             ; preds = %1699, %1582
  %1584 = load i64, i64* %21, align 8
  %1585 = add nsw i64 %1584, -1
  store i64 %1585, i64* %21, align 8
  %1586 = icmp ne i64 %1584, 0
  br i1 %1586, label %1587, label %1724

1587:                                             ; preds = %1583
  %1588 = load i32, i32* %20, align 4
  %1589 = icmp eq i32 %1588, 0
  br i1 %1589, label %1590, label %._crit_edge1.i

._crit_edge1.i:                                   ; preds = %1587
  br label %1699

1590:                                             ; preds = %1587
  %1591 = load i8*, i8** %23, align 8
  %1592 = getelementptr inbounds i8, i8* %1591, i32 1
  store i8* %1592, i8** %23, align 8
  %1593 = load i8, i8* %1591, align 1
  %1594 = zext i8 %1593 to i64
  %1595 = shl i64 %1594, 24
  store i64 %1595, i64* %17, align 8
  %1596 = load i8*, i8** %23, align 8
  %1597 = getelementptr inbounds i8, i8* %1596, i32 1
  store i8* %1597, i8** %23, align 8
  %1598 = load i8, i8* %1596, align 1
  %1599 = zext i8 %1598 to i64
  %1600 = shl i64 %1599, 16
  %1601 = load i64, i64* %17, align 8
  %1602 = or i64 %1601, %1600
  store i64 %1602, i64* %17, align 8
  %1603 = load i8*, i8** %23, align 8
  %1604 = getelementptr inbounds i8, i8* %1603, i32 1
  store i8* %1604, i8** %23, align 8
  %1605 = load i8, i8* %1603, align 1
  %1606 = zext i8 %1605 to i64
  %1607 = shl i64 %1606, 8
  %1608 = load i64, i64* %17, align 8
  %1609 = or i64 %1608, %1607
  store i64 %1609, i64* %17, align 8
  %1610 = load i8*, i8** %23, align 8
  %1611 = getelementptr inbounds i8, i8* %1610, i32 1
  store i8* %1611, i8** %23, align 8
  %1612 = load i8, i8* %1610, align 1
  %1613 = zext i8 %1612 to i64
  %1614 = load i64, i64* %17, align 8
  %1615 = or i64 %1614, %1613
  store i64 %1615, i64* %17, align 8
  %1616 = load i64, i64* %17, align 8
  %1617 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
  store i64 %1616, i64* %1617, align 16
  %1618 = load i8*, i8** %23, align 8
  %1619 = getelementptr inbounds i8, i8* %1618, i32 1
  store i8* %1619, i8** %23, align 8
  %1620 = load i8, i8* %1618, align 1
  %1621 = zext i8 %1620 to i64
  %1622 = shl i64 %1621, 24
  store i64 %1622, i64* %18, align 8
  %1623 = load i8*, i8** %23, align 8
  %1624 = getelementptr inbounds i8, i8* %1623, i32 1
  store i8* %1624, i8** %23, align 8
  %1625 = load i8, i8* %1623, align 1
  %1626 = zext i8 %1625 to i64
  %1627 = shl i64 %1626, 16
  %1628 = load i64, i64* %18, align 8
  %1629 = or i64 %1628, %1627
  store i64 %1629, i64* %18, align 8
  %1630 = load i8*, i8** %23, align 8
  %1631 = getelementptr inbounds i8, i8* %1630, i32 1
  store i8* %1631, i8** %23, align 8
  %1632 = load i8, i8* %1630, align 1
  %1633 = zext i8 %1632 to i64
  %1634 = shl i64 %1633, 8
  %1635 = load i64, i64* %18, align 8
  %1636 = or i64 %1635, %1634
  store i64 %1636, i64* %18, align 8
  %1637 = load i8*, i8** %23, align 8
  %1638 = getelementptr inbounds i8, i8* %1637, i32 1
  store i8* %1638, i8** %23, align 8
  %1639 = load i8, i8* %1637, align 1
  %1640 = zext i8 %1639 to i64
  %1641 = load i64, i64* %18, align 8
  %1642 = or i64 %1641, %1640
  store i64 %1642, i64* %18, align 8
  %1643 = load i64, i64* %18, align 8
  %1644 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1
  store i64 %1643, i64* %1644, align 8
  %1645 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
  %1646 = load %struct.bf_key_st*, %struct.bf_key_st** %13, align 8
  call void @BF_encrypt(i64* %1645, %struct.bf_key_st* %1646, i32 1) #10
  %1647 = load i8*, i8** %14, align 8
  store i8* %1647, i8** %23, align 8
  %1648 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
  %1649 = load i64, i64* %1648, align 16
  store i64 %1649, i64* %19, align 8
  %1650 = load i64, i64* %19, align 8
  %1651 = lshr i64 %1650, 24
  %1652 = and i64 %1651, 255
  %1653 = trunc i64 %1652 to i8
  %1654 = load i8*, i8** %23, align 8
  %1655 = getelementptr inbounds i8, i8* %1654, i32 1
  store i8* %1655, i8** %23, align 8
  store i8 %1653, i8* %1654, align 1
  %1656 = load i64, i64* %19, align 8
  %1657 = lshr i64 %1656, 16
  %1658 = and i64 %1657, 255
  %1659 = trunc i64 %1658 to i8
  %1660 = load i8*, i8** %23, align 8
  %1661 = getelementptr inbounds i8, i8* %1660, i32 1
  store i8* %1661, i8** %23, align 8
  store i8 %1659, i8* %1660, align 1
  %1662 = load i64, i64* %19, align 8
  %1663 = lshr i64 %1662, 8
  %1664 = and i64 %1663, 255
  %1665 = trunc i64 %1664 to i8
  %1666 = load i8*, i8** %23, align 8
  %1667 = getelementptr inbounds i8, i8* %1666, i32 1
  store i8* %1667, i8** %23, align 8
  store i8 %1665, i8* %1666, align 1
  %1668 = load i64, i64* %19, align 8
  %1669 = and i64 %1668, 255
  %1670 = trunc i64 %1669 to i8
  %1671 = load i8*, i8** %23, align 8
  %1672 = getelementptr inbounds i8, i8* %1671, i32 1
  store i8* %1672, i8** %23, align 8
  store i8 %1670, i8* %1671, align 1
  %1673 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1
  %1674 = load i64, i64* %1673, align 8
  store i64 %1674, i64* %19, align 8
  %1675 = load i64, i64* %19, align 8
  %1676 = lshr i64 %1675, 24
  %1677 = and i64 %1676, 255
  %1678 = trunc i64 %1677 to i8
  %1679 = load i8*, i8** %23, align 8
  %1680 = getelementptr inbounds i8, i8* %1679, i32 1
  store i8* %1680, i8** %23, align 8
  store i8 %1678, i8* %1679, align 1
  %1681 = load i64, i64* %19, align 8
  %1682 = lshr i64 %1681, 16
  %1683 = and i64 %1682, 255
  %1684 = trunc i64 %1683 to i8
  %1685 = load i8*, i8** %23, align 8
  %1686 = getelementptr inbounds i8, i8* %1685, i32 1
  store i8* %1686, i8** %23, align 8
  store i8 %1684, i8* %1685, align 1
  %1687 = load i64, i64* %19, align 8
  %1688 = lshr i64 %1687, 8
  %1689 = and i64 %1688, 255
  %1690 = trunc i64 %1689 to i8
  %1691 = load i8*, i8** %23, align 8
  %1692 = getelementptr inbounds i8, i8* %1691, i32 1
  store i8* %1692, i8** %23, align 8
  store i8 %1690, i8* %1691, align 1
  %1693 = load i64, i64* %19, align 8
  %1694 = and i64 %1693, 255
  %1695 = trunc i64 %1694 to i8
  %1696 = load i8*, i8** %23, align 8
  %1697 = getelementptr inbounds i8, i8* %1696, i32 1
  store i8* %1697, i8** %23, align 8
  store i8 %1695, i8* %1696, align 1
  %1698 = load i8*, i8** %14, align 8
  store i8* %1698, i8** %23, align 8
  br label %1699

1699:                                             ; preds = %1590, %._crit_edge1.i
  %1700 = load i8*, i8** %10, align 8
  %1701 = getelementptr inbounds i8, i8* %1700, i32 1
  store i8* %1701, i8** %10, align 8
  %1702 = load i8, i8* %1700, align 1
  store i8 %1702, i8* %25, align 1
  %1703 = load i8*, i8** %23, align 8
  %1704 = load i32, i32* %20, align 4
  %1705 = sext i32 %1704 to i64
  %1706 = getelementptr inbounds i8, i8* %1703, i64 %1705
  %1707 = load i8, i8* %1706, align 1
  store i8 %1707, i8* %24, align 1
  %1708 = load i8, i8* %25, align 1
  %1709 = load i8*, i8** %23, align 8
  %1710 = load i32, i32* %20, align 4
  %1711 = sext i32 %1710 to i64
  %1712 = getelementptr inbounds i8, i8* %1709, i64 %1711
  store i8 %1708, i8* %1712, align 1
  %1713 = load i8, i8* %24, align 1
  %1714 = zext i8 %1713 to i32
  %1715 = load i8, i8* %25, align 1
  %1716 = zext i8 %1715 to i32
  %1717 = xor i32 %1714, %1716
  %1718 = trunc i32 %1717 to i8
  %1719 = load i8*, i8** %11, align 8
  %1720 = getelementptr inbounds i8, i8* %1719, i32 1
  store i8* %1720, i8** %11, align 8
  store i8 %1718, i8* %1719, align 1
  %1721 = load i32, i32* %20, align 4
  %1722 = add nsw i32 %1721, 1
  %1723 = and i32 %1722, 7
  store i32 %1723, i32* %20, align 4
  br label %1583

1724:                                             ; preds = %1583
  br label %BF_cfb64_encrypt.exit

BF_cfb64_encrypt.exit:                            ; preds = %1581, %1724
  store i8 0, i8* %25, align 1
  store i8 0, i8* %24, align 1
  store i64 0, i64* %19, align 8
  %1725 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1
  store i64 0, i64* %1725, align 8
  %1726 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
  store i64 0, i64* %1726, align 16
  store i64 0, i64* %18, align 8
  store i64 0, i64* %17, align 8
  %1727 = load i32, i32* %20, align 4
  %1728 = load i32*, i32** %15, align 8
  store i32 %1727, i32* %1728, align 4
  %1729 = bitcast i8** %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1729)
  %1730 = bitcast i8** %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1730)
  %1731 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1731)
  %1732 = bitcast %struct.bf_key_st** %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1732)
  %1733 = bitcast i8** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1733)
  %1734 = bitcast i32** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1734)
  %1735 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1735)
  %1736 = bitcast i64* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1736)
  %1737 = bitcast i64* %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1737)
  %1738 = bitcast i64* %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1738)
  %1739 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1739)
  %1740 = bitcast i64* %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1740)
  %1741 = bitcast [2 x i64]* %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %1741)
  %1742 = bitcast i8** %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1742)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %24)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %25)
  store i32 0, i32* %42, align 4
  %1743 = load i32, i32* %36, align 4
  %1744 = load %struct._IO_FILE*, %struct._IO_FILE** %41, align 8
  %1745 = load i32, i32* %42
  br label %1746

1746:                                             ; preds = %1755, %BF_cfb64_encrypt.exit
  %1747 = phi i32 [ %1756, %1755 ], [ %1745, %BF_cfb64_encrypt.exit ]
  %1748 = icmp slt i32 %1747, %1743
  br i1 %1748, label %1749, label %1757, !prof !40

1749:                                             ; preds = %1746
  %1750 = sext i32 %1747 to i64
  %1751 = getelementptr inbounds [40 x i8], [40 x i8]* %32, i64 0, i64 %1750
  %1752 = load i8, i8* %1751, align 1
  %1753 = zext i8 %1752 to i32
  %1754 = call i32 @fputc(i32 %1753, %struct._IO_FILE* %1744)
  br label %1755

1755:                                             ; preds = %1749
  %1756 = add nsw i32 %1747, 1
  br label %1746

1757:                                             ; preds = %1746
  %.lcssa = phi i32 [ %1747, %1746 ]
  store i32 %.lcssa, i32* %42
  store i32 0, i32* %36, align 4
  br label %181

1758:                                             ; preds = %181
  %1759 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
  %1760 = call i32 (%struct._IO_FILE*, ...) bitcast (i32 (...)* @close to i32 (%struct._IO_FILE*, ...)*)(%struct._IO_FILE* %1759)
  %1761 = load %struct._IO_FILE*, %struct._IO_FILE** %41, align 8
  %1762 = call i32 (%struct._IO_FILE*, ...) bitcast (i32 (...)* @close to i32 (%struct._IO_FILE*, ...)*)(%struct._IO_FILE* %1761)
  ret i32 0

UnifiedUnreachableBlock:                          ; preds = %177, %167, %157, %133, %78, %45
  unreachable

1763:                                             ; preds = %1781, %1769
  %1764 = phi i32 [ %1770, %1769 ], [ %1776, %1781 ]
  %1765 = phi i32 [ %1771, %1769 ], [ %1777, %1781 ]
  %1766 = phi i64 [ %1772, %1769 ], [ %1779, %1781 ]
  %1767 = add nsw i32 %1764, 1
  %1768 = and i32 %1767, 7
  br label %1775

1769:                                             ; preds = %1784, %1783
  %1770 = phi i32 [ %1776, %1783 ], [ %1776, %1784 ]
  %1771 = phi i32 [ 1, %1783 ], [ 1, %1784 ]
  %1772 = phi i64 [ %1779, %1783 ], [ %1779, %1784 ]
  br label %1763

1773:                                             ; preds = %1775
  %1774 = icmp eq i32 %1776, 0
  br i1 %1774, label %1782, label %1781, !prof !42

1775:                                             ; preds = %1785, %1763
  %1776 = phi i32 [ %1768, %1763 ], [ %254, %1785 ]
  %1777 = phi i32 [ %1765, %1763 ], [ %255, %1785 ]
  %1778 = phi i64 [ %1766, %1763 ], [ %257, %1785 ]
  %1779 = add nsw i64 %1778, -1
  %1780 = icmp ne i64 %1778, 0
  br i1 %1780, label %1773, label %1581, !prof !40

1781:                                             ; preds = %1773
  br label %1763

1782:                                             ; preds = %1773
  br i1 %256, label %1784, label %1783, !prof !43

1783:                                             ; preds = %1782
  br label %1769

1784:                                             ; preds = %1782
  br label %1769

1785:                                             ; preds = %1786
  br label %1775

1786:                                             ; preds = %258
  br label %1785
}

EnablersManager:       Distributed loop
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.256672e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.338398e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.381062e+00%)
Noelle:     Loop "  %1587 = load i64, i64* %21, align 8" (3.160955e-09%)
Noelle:     Loop "  %262 = add nsw i64 %261, -1" (3.525227e+01%)
Noelle:     Loop "  %1751 = icmp slt i32 %1750, %1746" (2.820945e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.160955e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.558451e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.056993e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.763020e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.068724e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.214373e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.528965e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.233597e+00%)
Noelle:     Loop "  %1584 = load i64, i64* %21, align 8" (3.054559e-09%)
Noelle:     Loop "  %261 = add nsw i64 %260, -1" (3.353649e+01%)
Noelle:     Loop "  %1779 = add nsw i64 %1778, -1" (3.882849e+00%)
Noelle:     Loop "  %1748 = icmp slt i32 %1747, %1743" (2.725994e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.054559e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.438676e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.021415e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.602698e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (1.999092e+01%)
NOELLE: FixedPoint:       There are 8 different instructions and 16 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
NOELLE: FixedPoint:     Invocation 9
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.214373e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.528965e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.233597e+00%)
Noelle:     Loop "  %1584 = load i64, i64* %21, align 8" (3.054559e-09%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %261 = add nsw i64 %260, -1" (3.353649e+01%)
Noelle:     Loop "  %1779 = add nsw i64 %1778, -1" (3.882849e+00%)
Noelle:     Loop "  %1748 = icmp slt i32 %1747, %1743" (2.725994e+00%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:  Disable "BF_set_key" as cold function
EnablersManager:   Try to improve all 5 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %190 = call i32 @feof(%struct._IO_FILE* %187) #10
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %191, label %._crit_edge10, label %192, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %1779 = add nsw i64 %1778, -1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1779 = add nsw i64 %1778, -1"
LICM:     Invariant = "  %1771 = phi i32 [ 1, %1783 ], [ 1, %1784 ]
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1780, label %1773, label %1581, !prof !40
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %1748 = icmp slt i32 %1747, %1743
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1748 = icmp slt i32 %1747, %1743"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1748, label %1749, label %1757, !prof !40
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %261 = add nsw i64 %260, -1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %261 = add nsw i64 %260, -1"
LICM:     Invariant = "  store i64* %234, i64** %3, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store %struct.bf_key_st* %235, %struct.bf_key_st** %4, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %262, label %263, label %1786, !prof !40
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca i8*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i8*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %21 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %22 = alloca [2 x i64], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %23 = alloca i8*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca %struct.bf_key_st*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %24 = alloca i8, align 1 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i8*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %25 = alloca i8, align 1 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %19 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %20 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8"
LICM:     Invariant = "  %232 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %233 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %234 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %236 = bitcast i64** %3 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %237 = bitcast %struct.bf_key_st** %4 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %238 = bitcast i32* %5 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %239 = bitcast i64* %6 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %240 = bitcast i64* %7 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %241 = bitcast i64** %8 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %242 = bitcast i64** %9 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %243 = bitcast i64** %3 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %244 = bitcast %struct.bf_key_st** %4 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %245 = bitcast i32* %5 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %246 = bitcast i64* %6 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %247 = bitcast i64* %7 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %248 = bitcast i64** %8 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %249 = bitcast i64** %9 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %251 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %252 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %256 = icmp ne i32 1, 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %205 = getelementptr inbounds [40 x i8], [40 x i8]* %31, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %206 = getelementptr inbounds [40 x i8], [40 x i8]* %32, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %209 = getelementptr inbounds [8 x i8], [8 x i8]* %33, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %210 = load i32, i32* %37, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %211 = bitcast i8** %10 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %212 = bitcast i8** %11 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %213 = bitcast i64* %12 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %214 = bitcast %struct.bf_key_st** %13 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %215 = bitcast i8** %14 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %216 = bitcast i32** %15 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %217 = bitcast i32* %16 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %218 = bitcast i64* %17 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %219 = bitcast i64* %18 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %220 = bitcast i64* %19 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %221 = bitcast i32* %20 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %222 = bitcast i64* %21 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %223 = bitcast [2 x i64]* %22 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %224 = bitcast i8** %23 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  store i8* %205, i8** %10, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i8* %206, i8** %11, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store %struct.bf_key_st* %29, %struct.bf_key_st** %13, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i8* %209, i8** %14, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i32* %34, i32** %15, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i32 %210, i32* %16, align 4
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  %187 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %188 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1617 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1644 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1645 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1648 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1673 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1725 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1726 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1729 = bitcast i8** %10 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1730 = bitcast i8** %11 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1731 = bitcast i64* %12 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1732 = bitcast %struct.bf_key_st** %13 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1733 = bitcast i8** %14 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1734 = bitcast i32** %15 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1735 = bitcast i32* %16 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1736 = bitcast i64* %17 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1737 = bitcast i64* %18 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1738 = bitcast i64* %19 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1739 = bitcast i32* %20 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1740 = bitcast i64* %21 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1741 = bitcast [2 x i64]* %22 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1742 = bitcast i8** %23 to i8*
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1744 = load %struct._IO_FILE*, %struct._IO_FILE** %41, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %1771 = phi i32 [ 1, %1783 ], [ 1, %1784 ]
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.214373e-07%)
Noelle:     Loop "  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8" (4.528965e+01%)
Noelle:     Loop "  %190 = call i32 @feof(%struct._IO_FILE* %187) #10" (4.233597e+00%)
Noelle:     Loop "  %1584 = load i64, i64* %21, align 8" (3.054559e-09%)
Noelle:     Loop "  %261 = add nsw i64 %260, -1" (3.353649e+01%)
Noelle:     Loop "  %1779 = add nsw i64 %1778, -1" (3.882849e+00%)
Noelle:     Loop "  %1748 = icmp slt i32 %1747, %1743" (2.725994e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.054559e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.438676e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.021415e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.602698e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (1.999092e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.218723e-07%)
Noelle:     Loop "  %245 = call i32 @feof(%struct._IO_FILE* %181) #10" (4.509368e+01%)
Noelle:     Loop "  %250 = call i32 @feof(%struct._IO_FILE* %182) #10" (4.248761e+00%)
Noelle:     Loop "  %1606 = load i64, i64* %21, align 8" (3.065500e-09%)
Noelle:     Loop "  %283 = add nsw i64 %282, -1" (3.365661e+01%)
Noelle:     Loop "  %1779 = add nsw i64 %1778, -1" (3.896756e+00%)
Noelle:     Loop "  %1748 = icmp slt i32 %1747, %1744" (2.735758e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.065500e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.450992e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.025073e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.619184e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.006252e+01%)
NOELLE: FixedPoint:       There are 0 different instructions and -68 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
NOELLE: FixedPoint:     Invocation 10
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.218723e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %245 = call i32 @feof(%struct._IO_FILE* %181) #10" (4.509368e+01%)
Noelle:     Loop "  %250 = call i32 @feof(%struct._IO_FILE* %182) #10" (4.248761e+00%)
Noelle:     Loop "  %1606 = load i64, i64* %21, align 8" (3.065500e-09%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %283 = add nsw i64 %282, -1" (3.365661e+01%)
Noelle:     Loop "  %1779 = add nsw i64 %1778, -1" (3.896756e+00%)
Noelle:     Loop "  %1748 = icmp slt i32 %1747, %1744" (2.735758e+00%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:  Disable "BF_set_key" as cold function
EnablersManager:   Try to improve all 5 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %250 = call i32 @feof(%struct._IO_FILE* %182) #10
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %250 = call i32 @feof(%struct._IO_FILE* %182) #10"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %251, label %._crit_edge10, label %252, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %283 = add nsw i64 %282, -1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %283 = add nsw i64 %282, -1"
LICM:     Invariant = "  store i64* %204, i64** %3, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store %struct.bf_key_st* %274, %struct.bf_key_st** %4, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %284, label %285, label %1786, !prof !40
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %1748 = icmp slt i32 %1747, %1744
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1748 = icmp slt i32 %1747, %1744"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1748, label %1749, label %1757, !prof !40
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %1779 = add nsw i64 %1778, -1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1779 = add nsw i64 %1778, -1"
LICM:     Invariant = "  %1771 = phi i32 [ 1, %1783 ], [ 1, %1784 ]
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1780, label %1773, label %1603, !prof !40
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %245 = call i32 @feof(%struct._IO_FILE* %181) #10
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca i8*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i8*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %21 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %22 = alloca [2 x i64], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %23 = alloca i8*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca %struct.bf_key_st*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %24 = alloca i8, align 1 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i8*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %25 = alloca i8, align 1 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %19 = alloca i64, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %20 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %245 = call i32 @feof(%struct._IO_FILE* %181) #10"
LICM:     Invariant = "  store i8* %184, i8** %10, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i8* %185, i8** %11, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store %struct.bf_key_st* %29, %struct.bf_key_st** %13, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i8* %186, i8** %14, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i32* %34, i32** %15, align 8
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i32 %187, i32* %16, align 4
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  %1771 = phi i32 [ 1, %1783 ], [ 1, %1784 ]
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %247, label %248, label %1758, !prof !38
Mem2Reg:   The loop has 1SCCs that each one access the same memory location
Mem2Reg:     Loop invariant memory location:   %5 = alloca i32, align 4
Mem2Reg:     SCC:
Internal nodes: 5
	  %278 = load i32, i32* %5
	  %1765 = phi i32 [ %1771, %1769 ], [ %1777, %1781 ]
	  %1777 = phi i32 [ %1765, %1763 ], [ %278, %1785 ]
	  %.lcssa2 = phi i32 [ %1777, %1775 ]
	  store i32 %.lcssa2, i32* %5
External nodes: 4
	  br i1 %272, label %273, label %1604, !prof !41
	  %1771 = phi i32 [ 1, %1783 ], [ 1, %1784 ]
	  br i1 %1774, label %1782, label %1781, !prof !42
	  br i1 %1780, label %1773, label %1603, !prof !40
Edges: 16

Mem2Reg:  Collecting and ordering memory loads/stores by basic block
Mem2Reg: Iterating basic blocks to determine last stored values
Mem2Reg: placeholder PHI required: label %245
Mem2Reg:  checking for last value entering block: label %245
Mem2Reg:  Last value entering block: label %245	  %246 = phi i32 
Mem2Reg:  checking for last value entering block: label %250
Mem2Reg:  Last value entering block: label %250	  %246 = phi i32 
Mem2Reg: placeholder PHI required: label %251
Mem2Reg:  checking for last value entering block: label %251
Mem2Reg:  Last value entering block: label %251	  %252 = phi i32 
Mem2Reg:  checking for last value entering block: label %._crit_edge10
Mem2Reg:  Last value entering block: label %._crit_edge10	  %252 = phi i32 
Mem2Reg:  checking for last value entering block: label %255
Mem2Reg:  Last value entering block: label %255	  %252 = phi i32 
Mem2Reg:  checking for last value entering block: label %258
Mem2Reg:  Last value entering block: label %258	  %260 = phi i32 [ %252, %._crit_edge10 ], [ %252, %255 ]
Mem2Reg:  checking for last value entering block: label %261
Mem2Reg:  Last value entering block: label %261	  %260 = phi i32 [ %252, %._crit_edge10 ], [ %252, %255 ]
Mem2Reg:  checking for last value entering block: label %268
Mem2Reg:  Last value entering block: label %268	  %260 = phi i32 [ %252, %._crit_edge10 ], [ %252, %255 ]
Mem2Reg:  checking for last value entering block: label %277
Mem2Reg:  Last value entering block: label %277	  %260 = phi i32 [ %252, %._crit_edge10 ], [ %252, %255 ]
Mem2Reg:  checking for last value entering block: label %1608
Mem2Reg:  Last value entering block: label %1608	  %260 = phi i32 [ %252, %._crit_edge10 ], [ %252, %255 ]
Mem2Reg: placeholder PHI required: label %284
Mem2Reg:  checking for last value entering block: label %284
Mem2Reg:  Last value entering block: label %284	  %287 = phi i32 
Mem2Reg: placeholder PHI required: label %1610
Mem2Reg:  checking for last value entering block: label %1610
Mem2Reg:  Last value entering block: label %1610	  %1611 = phi i32 
Mem2Reg:  checking for last value entering block: label %290
Mem2Reg:  Last value entering block: label %290	  %287 = phi i32 
Mem2Reg:  checking for last value entering block: label %1792
Mem2Reg:  Last value entering block: label %1792	  %287 = phi i32 
Mem2Reg:  checking for last value entering block: label %1615
Mem2Reg:  Last value entering block: label %1615	  %1611 = phi i32 
Mem2Reg:  checking for last value entering block: label %1747
Mem2Reg:  Last value entering block: label %1747	  %1611 = phi i32 
Mem2Reg:  checking for last value entering block: label %292
Mem2Reg:  Last value entering block: label %292	  %287 = phi i32 
Mem2Reg:  checking for last value entering block: label %._crit_edge.i
Mem2Reg:  Last value entering block: label %._crit_edge.i	  %287 = phi i32 
Mem2Reg:  checking for last value entering block: label %1791
Mem2Reg:  Last value entering block: label %1791	  %287 = phi i32 
Mem2Reg:  checking for last value entering block: label %1618
Mem2Reg:  Last value entering block: label %1618	  %1611 = phi i32 
Mem2Reg:  checking for last value entering block: label %._crit_edge1.i
Mem2Reg:  Last value entering block: label %._crit_edge1.i	  %1611 = phi i32 
Mem2Reg: placeholder PHI required: label %BF_cfb64_encrypt.exit
Mem2Reg:  checking for last value entering block: label %BF_cfb64_encrypt.exit
Mem2Reg:  Last value entering block: label %BF_cfb64_encrypt.exit	  %1748 = phi i32 
Mem2Reg:  checking for last value entering block: label %356
Mem2Reg:  Last value entering block: label %356	  %287 = phi i32 
Mem2Reg:  checking for last value entering block: label %942
Mem2Reg:  Last value entering block: label %942	  %287 = phi i32 
Mem2Reg: placeholder PHI required: label %1585
Mem2Reg:  checking for last value entering block: label %1585
Mem2Reg:  Last value entering block: label %1585	  %1588 = phi i32 
Mem2Reg: placeholder PHI required: label %1783
Mem2Reg:  checking for last value entering block: label %1783
Mem2Reg:  Last value entering block: label %1783	  %1787 = phi i32 
Mem2Reg:  checking for last value entering block: label %1723
Mem2Reg:  Last value entering block: label %1723	  %1724 = phi i32 [ %1612, %1619 ], [ %1612, %._crit_edge1.i ]
Mem2Reg: placeholder PHI required: label %1755
Mem2Reg:  checking for last value entering block: label %1755
Mem2Reg:  Last value entering block: label %1755	  %1757 = phi i32 
Mem2Reg:  checking for last value entering block: label %BF_encrypt.exit.i
Mem2Reg:  Last value entering block: label %BF_encrypt.exit.i	  %1530 = phi i32 [ %287, %942 ], [ %287, %356 ]
Mem2Reg:  checking for last value entering block: label %1784
Mem2Reg:  Last value entering block: label %1784	  %1790 = phi i32 
Mem2Reg:  checking for last value entering block: label %1610
Mem2Reg:  Last value entering block: label %1610	  %1790 = phi i32 
Mem2Reg:  Value updated:   %.lcssa2 = phi i32 [ %1788, %1786 ]
Mem2Reg:  checking for last value entering block: label %1760
Mem2Reg:  Last value entering block: label %1760	  %1758 = phi i32 
Mem2Reg:  checking for last value entering block: label %1768
Mem2Reg:  Last value entering block: label %1768	  %1758 = phi i32 
Mem2Reg:  checking for last value entering block: label %1794
Mem2Reg:  Last value entering block: label %1794	  %1790 = phi i32 
Mem2Reg:  checking for last value entering block: label %1793
Mem2Reg:  Last value entering block: label %1793	  %1790 = phi i32 
Mem2Reg:  checking for last value entering block: label %1766
Mem2Reg:  Last value entering block: label %1766	  %1758 = phi i32 
Mem2Reg:  checking for last value entering block: label %1796
Mem2Reg:  Last value entering block: label %1796	  %1790 = phi i32 
Mem2Reg:  checking for last value entering block: label %1795
Mem2Reg:  Last value entering block: label %1795	  %1790 = phi i32 
Mem2Reg: placeholder PHI required: label %1774
Mem2Reg:  checking for last value entering block: label %1774
Mem2Reg:  Last value entering block: label %1774	  %1778 = phi i32 
Mem2Reg:  checking for last value entering block: label %1781
Mem2Reg:  Last value entering block: label %1781	  %1785 = phi i32 [ %1792, %1798 ], [ %1792, %1797 ]
Mem2Reg:  Removing
  %282 = load i32, i32* %5
Mem2Reg:  Removing
  store i32 %.lcssa2, i32* %5
Mem2Reg:       The memory location has been promoted
Mem2Reg: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.218723e-07%)
Noelle:     Loop "  %245 = call i32 @feof(%struct._IO_FILE* %181) #10" (4.509368e+01%)
Noelle:     Loop "  %250 = call i32 @feof(%struct._IO_FILE* %182) #10" (4.248761e+00%)
Noelle:     Loop "  %1606 = load i64, i64* %21, align 8" (3.065500e-09%)
Noelle:     Loop "  %283 = add nsw i64 %282, -1" (3.365661e+01%)
Noelle:     Loop "  %1779 = add nsw i64 %1778, -1" (3.896756e+00%)
Noelle:     Loop "  %1748 = icmp slt i32 %1747, %1744" (2.735758e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.065500e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.450992e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.025073e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.619184e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (2.006252e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.194021e-07%)
Noelle:     Loop "  %247 = call i32 @feof(%struct._IO_FILE* %181) #10" (4.620656e+01%)
Noelle:     Loop "  %253 = call i32 @feof(%struct._IO_FILE* %182) #10" (4.658774e+00%)
Noelle:     Loop "  %1613 = load i64, i64* %21, align 8" (3.149872e-09%)
Noelle:     Loop "  %287 = add nsw i64 %285, -1" (3.349477e+01%)
Noelle:     Loop "  %1793 = add nsw i64 %1791, -1" (4.338105e+00%)
Noelle:     Loop "  %1758 = icmp slt i32 %1756, %1753" (3.170386e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.003366e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.381045e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.004296e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.525560e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (1.965588e+01%)
NOELLE: FixedPoint:       There are 0 different instructions and -2 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.abuEEN0E7l -o /tmp/tmp.abuEEN0E7l
NOELLE: FixedPoint:     Invocation 11
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.VGeHb7BfUo -o /tmp/tmp.abuEEN0E7l
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.193804e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %247 = call i32 @feof(%struct._IO_FILE* %181) #10" (4.621633e+01%)
Noelle:     Loop "  %253 = call i32 @feof(%struct._IO_FILE* %182) #10" (4.657928e+00%)
Noelle:     Loop "  %1613 = load i64, i64* %21, align 8" (3.149300e-09%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %287 = add nsw i64 %285, -1" (3.348869e+01%)
Noelle:     Loop "  %1793 = add nsw i64 %1791, -1" (4.337317e+00%)
Noelle:     Loop "  %1758 = icmp slt i32 %1756, %1753" (3.169811e+00%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:  Disable "BF_set_key" as cold function
EnablersManager:   Try to improve all 5 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %253 = call i32 @feof(%struct._IO_FILE* %182) #10
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %253 = call i32 @feof(%struct._IO_FILE* %182) #10"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %254, label %._crit_edge10, label %255, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
SCEVSimplification: Removing loop entry PHI (part of PHI-only propagation):   %252 = phi i32 [ %260, %261 ], [ %246, %250 ]
SCEVSimplification: 	Removing PHI (part of PHI-only propagation):   %260 = phi i32 [ %252, %._crit_edge10 ], [ %252, %255 ]
SCEVSimplification: 	Removing PHI (part of PHI-only propagation):   %252 = phi i32 [ %260, %261 ], [ %246, %250 ]
EnablersManager:       Loop constant PHIs have been simplified
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %285 = add nsw i64 %283, -1
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %1791 = add nsw i64 %1789, -1
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %1756 = icmp slt i32 %1754, %1751
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %247 = call i32 @feof(%struct._IO_FILE* %181) #10
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.193804e-07%)
Noelle:     Loop "  %247 = call i32 @feof(%struct._IO_FILE* %181) #10" (4.621633e+01%)
Noelle:     Loop "  %253 = call i32 @feof(%struct._IO_FILE* %182) #10" (4.657928e+00%)
Noelle:     Loop "  %1613 = load i64, i64* %21, align 8" (3.149300e-09%)
Noelle:     Loop "  %287 = add nsw i64 %285, -1" (3.348869e+01%)
Noelle:     Loop "  %1793 = add nsw i64 %1791, -1" (4.337317e+00%)
Noelle:     Loop "  %1758 = icmp slt i32 %1756, %1753" (3.169811e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.002821e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.380432e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.004114e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.524738e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (1.965231e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4" (1.199756e-07%)
Noelle:     Loop "  %247 = call i32 @feof(%struct._IO_FILE* %181) #10" (4.594821e+01%)
Noelle:     Loop "  %252 = call i32 @feof(%struct._IO_FILE* %182) #10" (4.182637e+00%)
Noelle:     Loop "  %1611 = load i64, i64* %21, align 8" (3.165000e-09%)
Noelle:     Loop "  %285 = add nsw i64 %283, -1" (3.365563e+01%)
Noelle:     Loop "  %1791 = add nsw i64 %1789, -1" (4.358940e+00%)
Noelle:     Loop "  %1756 = icmp slt i32 %1754, %1751" (3.185613e+00%)
Noelle:  Function "BF_cfb64_encrypt"
Noelle:     Loop "  %1387 = load i64, i64* %26, align 8" (3.017790e-09%)
Noelle:     Loop "  %39 = load i64, i64* %26, align 8" (3.397283e+01%)
Noelle:  Function "BF_encrypt"
Noelle:  Function "BF_set_key"
Noelle:     Loop "  %28 = load i32, i32* %7, align 4" (1.009120e-07%)
Noelle:     Loop "  %97 = load i32, i32* %7, align 4" (4.547295e-07%)
Noelle:     Loop "  %123 = load i32, i32* %7, align 4" (1.975028e+01%)
NOELLE: FixedPoint: Exit
NOELLE: Enablers: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true baseline_pre.bc -o baseline_pre.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata baseline_pre.bc -o baseline_pre.bc
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/bf_e /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/bf_e
Running: ./baseline_pre_prof e input_verylarge.asc output_verylarge.enc 1234567890abcdeffedcba0987654321 in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/MiBench/security/blowfish
--------------------------------------------------------------------------------------
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/bf_e
DONE
opt -pgo-test-profile-file=/tmp/tmp.uCGjZ2FWMs -block-freq -pgo-instr-use baseline_pre.bc -o baseline_with_metadata.bc
noelle-load -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
PDGAnalysis: Construct PDG from Analysis
Embed PDG as metadata
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4, !noelle.pdg.inst.id !146" (2.623251e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %246 = call i32 @feof(%struct._IO_FILE* %181) #10, !noelle.pdg.inst.id !40" (9.999994e+01%)
Noelle:     Loop "  %251 = call i32 @feof(%struct._IO_FILE* %182) #10, !noelle.pdg.inst.id !44" (9.145282e+00%)
Noelle:     Loop "  %1021 = load i64, i64* %21, align 8, !noelle.pdg.inst.id !702" (6.920232e-09%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %284 = add nsw i64 %282, -1, !noelle.pdg.inst.id !21805" (7.338823e+01%)
Noelle:     Loop "  %1197 = add nsw i64 %1195, -1, !noelle.pdg.inst.id !22372" (9.264916e+00%)
Noelle:     Loop "  %1166 = icmp slt i32 %1164, %1161, !noelle.pdg.inst.id !22343" (6.965302e+00%)
Noelle:  Function "BF_set_key"
Noelle:  Disable "BF_set_key" as cold function
Noelle:  Function "BF_encrypt"
Noelle:  Disable "BF_encrypt" as cold function
Noelle:  Function "BF_cfb64_encrypt"
Noelle:  Disable "BF_cfb64_encrypt" as cold function
Planner:    There are 5 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:    Loop 2 has 6.880000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 6 has 5.240000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 5 has 6.970000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:  There are 1 loop nesting trees in the program
Planner:    ID: 1 (1)
Planner:      Function: "main"
Planner:      Loop: "  %246 = call i32 @feof(%struct._IO_FILE* %181) #10, !noelle.pdg.inst.id !40"
Planner:      Loop nesting level: 1
Planner:      Hotness = 9.999994e+01 %
Planner:      Average instructions per invocation = 6.213661e+11 %
Planner:      Average iterations per invocation = 8.259552e+07 %
Planner:    
Planner:      ID: 4 (2)
Planner:        Function: "main"
Planner:        Loop: "  %284 = add nsw i64 %282, -1, !noelle.pdg.inst.id !21805"
Planner:        Loop nesting level: 2
Planner:        Hotness = 7.338823e+01 %
Planner:        Average instructions per invocation = 5.521000e+03 %
Planner:        Average iterations per invocation = 4.100000e+01 %
Planner:      
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21581
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21580
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21579
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1, !noelle.pdg.inst.id !21578
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21557
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21557 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21556
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21556 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21555
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21555 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21554
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21554 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21553
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21553 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21552
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21552 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21551
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21551 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21550
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21550 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21549
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21549 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21548
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21548 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21543
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21543 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21542
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21542 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !21544
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21545
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21545 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21546
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21546 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21547
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21547 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21558
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21558 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21559
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21559 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21560
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21560 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21561
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21561 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21562
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21562 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21563
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21563 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21564
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21564 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4, !noelle.pdg.inst.id !21565
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4, !noelle.pdg.inst.id !21566
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8, !noelle.pdg.inst.id !21567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21568
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21570
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21571
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21572
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21573
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4, !noelle.pdg.inst.id !21574
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21575
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4, !noelle.pdg.inst.id !21576
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8, !noelle.pdg.inst.id !21577
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21581
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21580
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21579
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1, !noelle.pdg.inst.id !21578
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21557
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21557 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21556
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21556 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21555
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21555 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21554
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21554 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21553
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21553 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21552
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21552 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21551
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21551 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21550
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21550 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21549
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21549 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21548
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21548 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21543
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21543 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21542
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21542 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !21544
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21545
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21545 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21546
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21546 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21547
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21547 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21558
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21558 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21559
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21559 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21560
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21560 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21561
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21561 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21562
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21562 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21563
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21563 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21564
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21564 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4, !noelle.pdg.inst.id !21565
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4, !noelle.pdg.inst.id !21566
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8, !noelle.pdg.inst.id !21567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21568
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21570
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21571
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21572
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21573
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4, !noelle.pdg.inst.id !21574
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21575
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4, !noelle.pdg.inst.id !21576
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8, !noelle.pdg.inst.id !21577
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21581
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21580
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21579
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1, !noelle.pdg.inst.id !21578
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21556
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21555
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21554
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21553
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21552
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21551
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21550
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21549
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21548
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21548 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21543
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21543 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21542
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21542 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !21544
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21545
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21545 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21546
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21546 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21547
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21547 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4, !noelle.pdg.inst.id !21565
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4, !noelle.pdg.inst.id !21566
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8, !noelle.pdg.inst.id !21567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21568
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21570
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21572
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21573
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4, !noelle.pdg.inst.id !21574
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21575
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4, !noelle.pdg.inst.id !21576
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8, !noelle.pdg.inst.id !21577
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21581
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21580
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21579
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1, !noelle.pdg.inst.id !21578
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21556
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21555
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21554
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21553
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21552
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21551
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21550
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21549
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21548
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21548 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21543
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21543 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21542
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21542 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !21544
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21545
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21545 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21546
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21546 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21547
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21547 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4, !noelle.pdg.inst.id !21565
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4, !noelle.pdg.inst.id !21566
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8, !noelle.pdg.inst.id !21567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21568
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21570
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21572
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21573
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4, !noelle.pdg.inst.id !21574
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21575
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4, !noelle.pdg.inst.id !21576
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8, !noelle.pdg.inst.id !21577
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 4
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %284 = add nsw i64 %282, -1, !noelle.pdg.inst.id !21805"
Planner: LoopSelector:      Coverage: 7.338823e+01%
Planner: LoopSelector:      Whole-program savings = 2.925693e+01%
Planner: LoopSelector:      Loop savings = 3.986597e+01%
Planner: LoopSelector:    Loop 1
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %246 = call i32 @feof(%struct._IO_FILE* %181) #10, !noelle.pdg.inst.id !40"
Planner: LoopSelector:      Coverage: 9.999994e+01%
Planner: LoopSelector:      Whole-program savings = 1.048783e+01%
Planner: LoopSelector:      Loop savings = 1.048784e+01%
Planner: LoopSelector: End
Planner:   Maximum time saved = 2.925693e+01% (181792742220)
Planner:   Maximum time saved with DOALL only = 0.000000e+00% (0)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4, !noelle.pdg.inst.id !148" (2.623251e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %246 = call i32 @feof(%struct._IO_FILE* %181) #11, !noelle.pdg.inst.id !42" (9.999994e+01%)
Noelle:     Loop "  %251 = call i32 @feof(%struct._IO_FILE* %182) #11, !noelle.pdg.inst.id !46" (9.145282e+00%)
Noelle:     Loop "  %1021 = load i64, i64* %21, align 8, !noelle.pdg.inst.id !704" (6.920232e-09%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %284 = add nsw i64 %282, -1, !noelle.pdg.inst.id !21807" (7.338823e+01%)
Noelle:     Loop "  %1197 = add nsw i64 %1195, -1, !noelle.pdg.inst.id !22374" (9.264916e+00%)
Noelle:     Loop "  %1166 = icmp slt i32 %1164, %1161, !noelle.pdg.inst.id !22345" (6.965302e+00%)
Noelle:  Function "BF_set_key"
Noelle:  Disable "BF_set_key" as cold function
Noelle:  Function "BF_encrypt"
Noelle:  Disable "BF_encrypt" as cold function
Noelle:  Function "BF_cfb64_encrypt"
Noelle:  Disable "BF_cfb64_encrypt" as cold function
Parallelizer:    There are 5 loops in the program we are going to consider
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21583
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21582
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21581
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1, !noelle.pdg.inst.id !21580
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21559
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21559 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21558
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21558 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21557
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21557 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21556
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21556 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21555
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21555 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21554
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21554 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21553
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21553 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21552
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21552 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21551
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21551 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21550
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21550 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21545
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21545 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21544
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21544 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !21546
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21547
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21547 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21548
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21548 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21549
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21549 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21560
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21560 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21561
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21561 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21562
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21562 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21563
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21563 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21564
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21564 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21565
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21565 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21566
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21566 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4, !noelle.pdg.inst.id !21567
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4, !noelle.pdg.inst.id !21568
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8, !noelle.pdg.inst.id !21569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21570
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21572
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21573
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21574
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21575
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4, !noelle.pdg.inst.id !21576
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21577
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4, !noelle.pdg.inst.id !21578
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8, !noelle.pdg.inst.id !21579
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21583
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21582
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21581
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1, !noelle.pdg.inst.id !21580
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21559
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21559 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21558
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21558 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21557
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21557 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21556
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21556 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21555
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21555 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21554
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21554 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21553
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21553 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21552
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21552 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21551
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21551 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21550
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21550 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21545
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21545 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21544
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21544 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !21546
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21547
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21547 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21548
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21548 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21549
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21549 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21560
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21560 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21561
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21561 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21562
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21562 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21563
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21563 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21564
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21564 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21565
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21565 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21566
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21566 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4, !noelle.pdg.inst.id !21567
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4, !noelle.pdg.inst.id !21568
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8, !noelle.pdg.inst.id !21569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21570
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21572
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21573
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21574
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21575
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4, !noelle.pdg.inst.id !21576
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21577
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4, !noelle.pdg.inst.id !21578
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8, !noelle.pdg.inst.id !21579
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21583
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21582
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21581
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1, !noelle.pdg.inst.id !21580
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21557
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21556
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21555
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21554
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21553
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21552
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21551
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21550
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21550 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21545
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21545 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21544
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21544 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !21546
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21547
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21547 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21548
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21548 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21549
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21549 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4, !noelle.pdg.inst.id !21567
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4, !noelle.pdg.inst.id !21568
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8, !noelle.pdg.inst.id !21569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21570
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21572
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21573
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21574
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21575
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4, !noelle.pdg.inst.id !21576
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21577
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4, !noelle.pdg.inst.id !21578
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8, !noelle.pdg.inst.id !21579
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21583
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21582
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21581
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1, !noelle.pdg.inst.id !21580
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21557
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21556
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21555
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21554
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21553
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21552
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21551
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21550
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21550 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21545
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21545 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21544
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21544 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !21546
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21547
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21547 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21548
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21548 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21549
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21549 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4, !noelle.pdg.inst.id !21567
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4, !noelle.pdg.inst.id !21568
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8, !noelle.pdg.inst.id !21569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21570
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21572
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21573
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21574
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21575
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4, !noelle.pdg.inst.id !21576
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21577
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4, !noelle.pdg.inst.id !21578
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8, !noelle.pdg.inst.id !21579
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 4 = "  %284 = add nsw i64 %282, -1, !noelle.pdg.inst.id !21807"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21551
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21552
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21558
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21559
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21560
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21564
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21565
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %202 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21719
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %203 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1, !noelle.pdg.inst.id !21720
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %204 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21721
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %205 = bitcast i64** %3 to i8*, !noelle.pdg.inst.id !21722
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %206 = bitcast %struct.bf_key_st** %4 to i8*, !noelle.pdg.inst.id !21723
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %207 = bitcast i32* %5 to i8*, !noelle.pdg.inst.id !21724
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %208 = bitcast i64* %6 to i8*, !noelle.pdg.inst.id !21725
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 =   %209 = bitcast i64* %7 to i8*, !noelle.pdg.inst.id !21726
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 =   %210 = bitcast i64** %8 to i8*, !noelle.pdg.inst.id !21727
Parallelizer: parallelizerLoop:   Environment:   Live-in 16 =   %211 = bitcast i64** %9 to i8*, !noelle.pdg.inst.id !21728
Parallelizer: parallelizerLoop:   Environment:   Live-in 17 =   %212 = bitcast i64** %3 to i8*, !noelle.pdg.inst.id !21729
Parallelizer: parallelizerLoop:   Environment:   Live-in 18 =   %213 = bitcast %struct.bf_key_st** %4 to i8*, !noelle.pdg.inst.id !21730
Parallelizer: parallelizerLoop:   Environment:   Live-in 19 =   %214 = bitcast i32* %5 to i8*, !noelle.pdg.inst.id !21731
Parallelizer: parallelizerLoop:   Environment:   Live-in 20 =   %215 = bitcast i64* %6 to i8*, !noelle.pdg.inst.id !21732
Parallelizer: parallelizerLoop:   Environment:   Live-in 21 =   %216 = bitcast i64* %7 to i8*, !noelle.pdg.inst.id !21733
Parallelizer: parallelizerLoop:   Environment:   Live-in 22 =   %217 = bitcast i64** %8 to i8*, !noelle.pdg.inst.id !21734
Parallelizer: parallelizerLoop:   Environment:   Live-in 23 =   %218 = bitcast i64** %9 to i8*, !noelle.pdg.inst.id !21735
Parallelizer: parallelizerLoop:   Environment:   Live-in 24 =   %219 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21736
Parallelizer: parallelizerLoop:   Environment:   Live-in 25 =   %220 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1, !noelle.pdg.inst.id !21737
Parallelizer: parallelizerLoop:   Environment:   Live-in 26 =   %.lcssa4 = phi i32 [ %245, %256 ], !noelle.pdg.inst.id !21782
Parallelizer: parallelizerLoop:   Environment:   Live-in 27 =   %275 = load %struct.bf_key_st*, %struct.bf_key_st** %13, align 8, !noelle.pdg.inst.id !440
Parallelizer: parallelizerLoop:   Environment:   Live-in 28 =   %276 = load i8*, i8** %14, align 8, !noelle.pdg.inst.id !462
Parallelizer: parallelizerLoop:   Environment:   Live-in 29 =   %277 = load i8*, i8** %14, align 8, !noelle.pdg.inst.id !464
Parallelizer: parallelizerLoop:   Environment:   Live-in 30 =   %278 = load i32, i32* %20, !noelle.pdg.inst.id !538
Parallelizer: parallelizerLoop:   Environment:   Live-in 31 =   %279 = load i64, i64* %21, !noelle.pdg.inst.id !997
Parallelizer: parallelizerLoop:   Environment:   Live-out 32 =   %283 = phi i32 [ %996, %993 ], [ %.lcssa4, %274 ], !noelle.pdg.inst.id !21806
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 1 = "  %246 = call i32 @feof(%struct._IO_FILE* %181) #11, !noelle.pdg.inst.id !42"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21570
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21572
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21573
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21575
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21577
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21583
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %228 = bitcast i8** %10 to i8*, !noelle.pdg.inst.id !21745
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %229 = bitcast i8** %11 to i8*, !noelle.pdg.inst.id !21746
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %230 = bitcast i64* %12 to i8*, !noelle.pdg.inst.id !21747
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %231 = bitcast %struct.bf_key_st** %13 to i8*, !noelle.pdg.inst.id !21748
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %232 = bitcast i8** %14 to i8*, !noelle.pdg.inst.id !21749
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %233 = bitcast i32** %15 to i8*, !noelle.pdg.inst.id !21750
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %234 = bitcast i32* %16 to i8*, !noelle.pdg.inst.id !21751
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %235 = bitcast i64* %17 to i8*, !noelle.pdg.inst.id !21752
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 =   %236 = bitcast i64* %18 to i8*, !noelle.pdg.inst.id !21753
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 =   %237 = bitcast i64* %19 to i8*, !noelle.pdg.inst.id !21754
Parallelizer: parallelizerLoop:   Environment:   Live-in 16 =   %238 = bitcast i32* %20 to i8*, !noelle.pdg.inst.id !21755
Parallelizer: parallelizerLoop:   Environment:   Live-in 17 =   %239 = bitcast i64* %21 to i8*, !noelle.pdg.inst.id !21756
Parallelizer: parallelizerLoop:   Environment:   Live-in 18 =   %240 = bitcast [2 x i64]* %22 to i8*, !noelle.pdg.inst.id !21757
Parallelizer: parallelizerLoop:   Environment:   Live-in 19 =   %241 = bitcast i8** %23 to i8*, !noelle.pdg.inst.id !21758
Parallelizer: parallelizerLoop:   Environment:   Live-in 20 =   %242 = load %struct._IO_FILE*, %struct._IO_FILE** %41, align 8, !noelle.pdg.inst.id !693
Parallelizer: parallelizerLoop:   Environment:   Live-in 21 =   %243 = load i32, i32* %5, !noelle.pdg.inst.id !695
Parallelizer: parallelizerLoop:   Environment:   Live-in 22 =   %181 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8, !noelle.pdg.inst.id !71
Parallelizer: parallelizerLoop:   Environment:   Live-in 23 =   %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8, !noelle.pdg.inst.id !79
Parallelizer: parallelizerLoop:   Environment:   Live-in 24 =   %183 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8, !noelle.pdg.inst.id !86
Parallelizer: parallelizerLoop:   Environment:   Live-in 25 =   %184 = getelementptr inbounds [40 x i8], [40 x i8]* %31, i64 0, i64 0, !noelle.pdg.inst.id !21702
Parallelizer: parallelizerLoop:   Environment:   Live-in 26 =   %185 = getelementptr inbounds [40 x i8], [40 x i8]* %32, i64 0, i64 0, !noelle.pdg.inst.id !21703
Parallelizer: parallelizerLoop:   Environment:   Live-in 27 =   %186 = getelementptr inbounds [8 x i8], [8 x i8]* %33, i64 0, i64 0, !noelle.pdg.inst.id !21704
Parallelizer: parallelizerLoop:   Environment:   Live-in 28 =   %187 = load i32, i32* %37, align 4, !noelle.pdg.inst.id !93
Parallelizer: parallelizerLoop:   Environment:   Live-in 29 =   %188 = bitcast i8** %10 to i8*, !noelle.pdg.inst.id !21705
Parallelizer: parallelizerLoop:   Environment:   Live-in 30 =   %189 = bitcast i8** %11 to i8*, !noelle.pdg.inst.id !21706
Parallelizer: parallelizerLoop:   Environment:   Live-in 31 =   %190 = bitcast i64* %12 to i8*, !noelle.pdg.inst.id !21707
Parallelizer: parallelizerLoop:   Environment:   Live-in 32 =   %191 = bitcast %struct.bf_key_st** %13 to i8*, !noelle.pdg.inst.id !21708
Parallelizer: parallelizerLoop:   Environment:   Live-in 33 =   %192 = bitcast i8** %14 to i8*, !noelle.pdg.inst.id !21709
Parallelizer: parallelizerLoop:   Environment:   Live-in 34 =   %193 = bitcast i32** %15 to i8*, !noelle.pdg.inst.id !21710
Parallelizer: parallelizerLoop:   Environment:   Live-in 35 =   %194 = bitcast i32* %16 to i8*, !noelle.pdg.inst.id !21711
Parallelizer: parallelizerLoop:   Environment:   Live-in 36 =   %195 = bitcast i64* %17 to i8*, !noelle.pdg.inst.id !21712
Parallelizer: parallelizerLoop:   Environment:   Live-in 37 =   %196 = bitcast i64* %18 to i8*, !noelle.pdg.inst.id !21713
Parallelizer: parallelizerLoop:   Environment:   Live-in 38 =   %197 = bitcast i64* %19 to i8*, !noelle.pdg.inst.id !21714
Parallelizer: parallelizerLoop:   Environment:   Live-in 39 =   %198 = bitcast i32* %20 to i8*, !noelle.pdg.inst.id !21715
Parallelizer: parallelizerLoop:   Environment:   Live-in 40 =   %199 = bitcast i64* %21 to i8*, !noelle.pdg.inst.id !21716
Parallelizer: parallelizerLoop:   Environment:   Live-in 41 =   %200 = bitcast [2 x i64]* %22 to i8*, !noelle.pdg.inst.id !21717
Parallelizer: parallelizerLoop:   Environment:   Live-in 42 =   %201 = bitcast i8** %23 to i8*, !noelle.pdg.inst.id !21718
Parallelizer: parallelizerLoop:   Environment:   Live-in 43 =   %202 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21719
Parallelizer: parallelizerLoop:   Environment:   Live-in 44 =   %203 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1, !noelle.pdg.inst.id !21720
Parallelizer: parallelizerLoop:   Environment:   Live-in 45 =   %204 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21721
Parallelizer: parallelizerLoop:   Environment:   Live-in 46 =   %205 = bitcast i64** %3 to i8*, !noelle.pdg.inst.id !21722
Parallelizer: parallelizerLoop:   Environment:   Live-in 47 =   %206 = bitcast %struct.bf_key_st** %4 to i8*, !noelle.pdg.inst.id !21723
Parallelizer: parallelizerLoop:   Environment:   Live-in 48 =   %207 = bitcast i32* %5 to i8*, !noelle.pdg.inst.id !21724
Parallelizer: parallelizerLoop:   Environment:   Live-in 49 =   %208 = bitcast i64* %6 to i8*, !noelle.pdg.inst.id !21725
Parallelizer: parallelizerLoop:   Environment:   Live-in 50 =   %209 = bitcast i64* %7 to i8*, !noelle.pdg.inst.id !21726
Parallelizer: parallelizerLoop:   Environment:   Live-in 51 =   %210 = bitcast i64** %8 to i8*, !noelle.pdg.inst.id !21727
Parallelizer: parallelizerLoop:   Environment:   Live-in 52 =   %211 = bitcast i64** %9 to i8*, !noelle.pdg.inst.id !21728
Parallelizer: parallelizerLoop:   Environment:   Live-in 53 =   %212 = bitcast i64** %3 to i8*, !noelle.pdg.inst.id !21729
Parallelizer: parallelizerLoop:   Environment:   Live-in 54 =   %213 = bitcast %struct.bf_key_st** %4 to i8*, !noelle.pdg.inst.id !21730
Parallelizer: parallelizerLoop:   Environment:   Live-in 55 =   %214 = bitcast i32* %5 to i8*, !noelle.pdg.inst.id !21731
Parallelizer: parallelizerLoop:   Environment:   Live-in 56 =   %215 = bitcast i64* %6 to i8*, !noelle.pdg.inst.id !21732
Parallelizer: parallelizerLoop:   Environment:   Live-in 57 =   %216 = bitcast i64* %7 to i8*, !noelle.pdg.inst.id !21733
Parallelizer: parallelizerLoop:   Environment:   Live-in 58 =   %217 = bitcast i64** %8 to i8*, !noelle.pdg.inst.id !21734
Parallelizer: parallelizerLoop:   Environment:   Live-in 59 =   %218 = bitcast i64** %9 to i8*, !noelle.pdg.inst.id !21735
Parallelizer: parallelizerLoop:   Environment:   Live-in 60 =   %219 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21736
Parallelizer: parallelizerLoop:   Environment:   Live-in 61 =   %220 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1, !noelle.pdg.inst.id !21737
Parallelizer: parallelizerLoop:   Environment:   Live-in 62 =   %221 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21738
Parallelizer: parallelizerLoop:   Environment:   Live-in 63 =   %222 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1, !noelle.pdg.inst.id !21739
Parallelizer: parallelizerLoop:   Environment:   Live-in 64 =   %223 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21740
Parallelizer: parallelizerLoop:   Environment:   Live-in 65 =   %224 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21741
Parallelizer: parallelizerLoop:   Environment:   Live-in 66 =   %225 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1, !noelle.pdg.inst.id !21742
Parallelizer: parallelizerLoop:   Environment:   Live-in 67 =   %226 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1, !noelle.pdg.inst.id !21743
Parallelizer: parallelizerLoop:   Environment:   Live-in 68 =   %227 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21744
Parallelizer: parallelizerLoop:   Environment:   Live-out 69 =   %245 = phi i32 [ %.lcssa7, %1176 ], [ %243, %180 ], !noelle.pdg.inst.id !21760
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc bf_e.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/bf_e'
