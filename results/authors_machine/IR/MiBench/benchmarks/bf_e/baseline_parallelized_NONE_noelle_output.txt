make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/bf_e'
./runEnablers.sh bf_e bf_e.bc large "-lm -lstdc++ -lpthread -ltermcap" -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/bf_e /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/bf_e
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/bf_e
The IR has already been transformed for enabling parallelization
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4, !noelle.pdg.inst.id !146" (2.623251e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %246 = call i32 @feof(%struct._IO_FILE* %181) #10, !noelle.pdg.inst.id !40" (9.999994e+01%)
Noelle:     Loop "  %251 = call i32 @feof(%struct._IO_FILE* %182) #10, !noelle.pdg.inst.id !44" (9.145282e+00%)
Noelle:     Loop "  %1021 = load i64, i64* %21, align 8, !noelle.pdg.inst.id !702" (6.920232e-09%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %284 = add nsw i64 %282, -1, !noelle.pdg.inst.id !21805" (7.338823e+01%)
Noelle:     Loop "  %1197 = add nsw i64 %1195, -1, !noelle.pdg.inst.id !22372" (9.264916e+00%)
Noelle:     Loop "  %1166 = icmp slt i32 %1164, %1161, !noelle.pdg.inst.id !22343" (6.965302e+00%)
Noelle:  Function "BF_set_key"
Noelle:  Disable "BF_set_key" as cold function
Noelle:  Function "BF_encrypt"
Noelle:  Disable "BF_encrypt" as cold function
Noelle:  Function "BF_cfb64_encrypt"
Noelle:  Disable "BF_cfb64_encrypt" as cold function
Planner:    There are 5 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:    Loop 2 has 6.880000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 6 has 5.240000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 5 has 6.970000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:  There are 1 loop nesting trees in the program
Planner:    ID: 1 (1)
Planner:      Function: "main"
Planner:      Loop: "  %246 = call i32 @feof(%struct._IO_FILE* %181) #10, !noelle.pdg.inst.id !40"
Planner:      Loop nesting level: 1
Planner:      Hotness = 9.999994e+01 %
Planner:      Average instructions per invocation = 6.213661e+11 %
Planner:      Average iterations per invocation = 8.259552e+07 %
Planner:    
Planner:      ID: 4 (2)
Planner:        Function: "main"
Planner:        Loop: "  %284 = add nsw i64 %282, -1, !noelle.pdg.inst.id !21805"
Planner:        Loop nesting level: 2
Planner:        Hotness = 7.338823e+01 %
Planner:        Average instructions per invocation = 5.521000e+03 %
Planner:        Average iterations per invocation = 4.100000e+01 %
Planner:      
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21581
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21580
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21579
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1, !noelle.pdg.inst.id !21578
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21557
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21557 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21556
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21556 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21555
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21555 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21554
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21554 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21553
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21553 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21552
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21552 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21551
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21551 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21550
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21550 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21549
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21549 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21548
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21548 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21543
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21543 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21542
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21542 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !21544
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21545
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21545 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21546
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21546 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21547
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21547 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21558
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21558 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21559
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21559 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21560
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21560 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21561
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21561 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21562
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21562 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21563
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21563 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21564
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21564 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4, !noelle.pdg.inst.id !21565
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4, !noelle.pdg.inst.id !21566
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8, !noelle.pdg.inst.id !21567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21568
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21570
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21571
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21572
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21573
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4, !noelle.pdg.inst.id !21574
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21575
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4, !noelle.pdg.inst.id !21576
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8, !noelle.pdg.inst.id !21577
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21581
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21580
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21579
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1, !noelle.pdg.inst.id !21578
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21557
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21557 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21556
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21556 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21555
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21555 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21554
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21554 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21553
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21553 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21552
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21552 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21551
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21551 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21550
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21550 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21549
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21549 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21548
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21548 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21543
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21543 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21542
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21542 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !21544
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21545
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21545 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21546
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21546 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21547
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21547 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21558
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21558 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21559
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21559 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21560
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21560 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21561
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21561 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21562
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21562 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21563
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21563 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21564
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21564 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4, !noelle.pdg.inst.id !21565
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4, !noelle.pdg.inst.id !21566
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8, !noelle.pdg.inst.id !21567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21568
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21570
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21571
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21572
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21573
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4, !noelle.pdg.inst.id !21574
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21575
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4, !noelle.pdg.inst.id !21576
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8, !noelle.pdg.inst.id !21577
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21581
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21580
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21579
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1, !noelle.pdg.inst.id !21578
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21556
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21555
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21554
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21553
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21552
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21551
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21550
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21549
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21548
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21548 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21543
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21543 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21542
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21542 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !21544
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21545
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21545 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21546
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21546 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21547
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21547 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4, !noelle.pdg.inst.id !21565
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4, !noelle.pdg.inst.id !21566
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8, !noelle.pdg.inst.id !21567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21568
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21570
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21572
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21573
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4, !noelle.pdg.inst.id !21574
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21575
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4, !noelle.pdg.inst.id !21576
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8, !noelle.pdg.inst.id !21577
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21581
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21580
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21579
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1, !noelle.pdg.inst.id !21578
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21556
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21555
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21554
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21553
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21552
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21551
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21550
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21549
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21548
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21548 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21543
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21543 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21542
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21542 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !21544
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21545
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21545 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21546
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21546 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21547
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21547 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4, !noelle.pdg.inst.id !21565
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4, !noelle.pdg.inst.id !21566
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8, !noelle.pdg.inst.id !21567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21568
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21570
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21572
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21573
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4, !noelle.pdg.inst.id !21574
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21575
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4, !noelle.pdg.inst.id !21576
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8, !noelle.pdg.inst.id !21577
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 4
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %284 = add nsw i64 %282, -1, !noelle.pdg.inst.id !21805"
Planner: LoopSelector:      Coverage: 7.338823e+01%
Planner: LoopSelector:      Whole-program savings = 2.925693e+01%
Planner: LoopSelector:      Loop savings = 3.986597e+01%
Planner: LoopSelector:    Loop 1
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %246 = call i32 @feof(%struct._IO_FILE* %181) #10, !noelle.pdg.inst.id !40"
Planner: LoopSelector:      Coverage: 9.999994e+01%
Planner: LoopSelector:      Whole-program savings = 1.048783e+01%
Planner: LoopSelector:      Loop savings = 1.048784e+01%
Planner: LoopSelector: End
Planner:   Maximum time saved = 2.925693e+01% (181792742220)
Planner:   Maximum time saved with DOALL only = 0.000000e+00% (0)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %87 = load i32, i32* %36, align 4, !noelle.pdg.inst.id !148" (2.623251e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %246 = call i32 @feof(%struct._IO_FILE* %181) #11, !noelle.pdg.inst.id !42" (9.999994e+01%)
Noelle:     Loop "  %251 = call i32 @feof(%struct._IO_FILE* %182) #11, !noelle.pdg.inst.id !46" (9.145282e+00%)
Noelle:     Loop "  %1021 = load i64, i64* %21, align 8, !noelle.pdg.inst.id !704" (6.920232e-09%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %284 = add nsw i64 %282, -1, !noelle.pdg.inst.id !21807" (7.338823e+01%)
Noelle:     Loop "  %1197 = add nsw i64 %1195, -1, !noelle.pdg.inst.id !22374" (9.264916e+00%)
Noelle:     Loop "  %1166 = icmp slt i32 %1164, %1161, !noelle.pdg.inst.id !22345" (6.965302e+00%)
Noelle:  Function "BF_set_key"
Noelle:  Disable "BF_set_key" as cold function
Noelle:  Function "BF_encrypt"
Noelle:  Disable "BF_encrypt" as cold function
Noelle:  Function "BF_cfb64_encrypt"
Noelle:  Disable "BF_cfb64_encrypt" as cold function
Parallelizer:    There are 5 loops in the program we are going to consider
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21583
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21582
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21581
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1, !noelle.pdg.inst.id !21580
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21559
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21559 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21558
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21558 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21557
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21557 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21556
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21556 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21555
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21555 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21554
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21554 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21553
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21553 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21552
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21552 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21551
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21551 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21550
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21550 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21545
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21545 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21544
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21544 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !21546
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21547
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21547 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21548
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21548 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21549
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21549 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21560
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21560 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21561
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21561 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21562
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21562 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21563
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21563 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21564
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21564 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21565
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21565 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21566
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21566 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4, !noelle.pdg.inst.id !21567
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4, !noelle.pdg.inst.id !21568
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8, !noelle.pdg.inst.id !21569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21570
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21572
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21573
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21574
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21575
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4, !noelle.pdg.inst.id !21576
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21577
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4, !noelle.pdg.inst.id !21578
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8, !noelle.pdg.inst.id !21579
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21583
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21582
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21581
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1, !noelle.pdg.inst.id !21580
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21559
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21559 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21558
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21558 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21557
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21557 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21556
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21556 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21555
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21555 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21554
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21554 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21553
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21553 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21552
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21552 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21551
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21551 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21550
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21550 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21545
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21545 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21544
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21544 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !21546
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21547
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21547 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21548
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21548 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21549
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21549 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21560
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21560 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21561
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21561 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21562
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21562 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21563
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21563 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21564
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21564 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21565
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21565 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21566
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21566 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4, !noelle.pdg.inst.id !21567
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4, !noelle.pdg.inst.id !21568
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8, !noelle.pdg.inst.id !21569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21570
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21572
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21573
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21574
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21575
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4, !noelle.pdg.inst.id !21576
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21577
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4, !noelle.pdg.inst.id !21578
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8, !noelle.pdg.inst.id !21579
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21583
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21582
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21581
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1, !noelle.pdg.inst.id !21580
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21557
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21556
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21555
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21554
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21553
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21552
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21551
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21550
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21550 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21545
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21545 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21544
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21544 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !21546
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21547
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21547 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21548
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21548 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21549
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21549 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4, !noelle.pdg.inst.id !21567
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4, !noelle.pdg.inst.id !21568
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8, !noelle.pdg.inst.id !21569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21570
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21572
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21573
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21574
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21575
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4, !noelle.pdg.inst.id !21576
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21577
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4, !noelle.pdg.inst.id !21578
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8, !noelle.pdg.inst.id !21579
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21583
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %41 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21582
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %40 = alloca %struct._IO_FILE*, align 8, !noelle.pdg.inst.id !21581
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %39 = alloca i8, align 1, !noelle.pdg.inst.id !21580
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !21557
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32*, align 8, !noelle.pdg.inst.id !21556
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i8*, align 8, !noelle.pdg.inst.id !21555
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21554
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i64, align 8, !noelle.pdg.inst.id !21553
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21552
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21551
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21550
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i64*, align 8, !noelle.pdg.inst.id !21550 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21545
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.bf_key_st*, align 8, !noelle.pdg.inst.id !21545 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21544
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i64*, align 8, !noelle.pdg.inst.id !21544 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !21546
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21547
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i64, align 8, !noelle.pdg.inst.id !21547 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21548
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i64, align 8, !noelle.pdg.inst.id !21548 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21549
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i64*, align 8, !noelle.pdg.inst.id !21549 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca i32, align 4, !noelle.pdg.inst.id !21561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca i64, align 8, !noelle.pdg.inst.id !21562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [2 x i64], align 16, !noelle.pdg.inst.id !21563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %25 = alloca i8, align 1, !noelle.pdg.inst.id !21566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %26 = alloca i32, align 4, !noelle.pdg.inst.id !21567
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %27 = alloca i32, align 4, !noelle.pdg.inst.id !21568
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %28 = alloca i8**, align 8, !noelle.pdg.inst.id !21569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21570
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %30 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21572
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21573
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %33 = alloca [8 x i8], align 1, !noelle.pdg.inst.id !21574
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21575
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %35 = alloca i32, align 4, !noelle.pdg.inst.id !21576
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21577
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %37 = alloca i32, align 4, !noelle.pdg.inst.id !21578
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %38 = alloca i8*, align 8, !noelle.pdg.inst.id !21579
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 4 = "  %284 = add nsw i64 %282, -1, !noelle.pdg.inst.id !21807"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %10 = alloca i8*, align 8, !noelle.pdg.inst.id !21551
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %11 = alloca i8*, align 8, !noelle.pdg.inst.id !21552
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %17 = alloca i64, align 8, !noelle.pdg.inst.id !21558
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %18 = alloca i64, align 8, !noelle.pdg.inst.id !21559
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %19 = alloca i64, align 8, !noelle.pdg.inst.id !21560
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %23 = alloca i8*, align 8, !noelle.pdg.inst.id !21564
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %24 = alloca i8, align 1, !noelle.pdg.inst.id !21565
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %202 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21719
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %203 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1, !noelle.pdg.inst.id !21720
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %204 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21721
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %205 = bitcast i64** %3 to i8*, !noelle.pdg.inst.id !21722
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %206 = bitcast %struct.bf_key_st** %4 to i8*, !noelle.pdg.inst.id !21723
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %207 = bitcast i32* %5 to i8*, !noelle.pdg.inst.id !21724
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %208 = bitcast i64* %6 to i8*, !noelle.pdg.inst.id !21725
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 =   %209 = bitcast i64* %7 to i8*, !noelle.pdg.inst.id !21726
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 =   %210 = bitcast i64** %8 to i8*, !noelle.pdg.inst.id !21727
Parallelizer: parallelizerLoop:   Environment:   Live-in 16 =   %211 = bitcast i64** %9 to i8*, !noelle.pdg.inst.id !21728
Parallelizer: parallelizerLoop:   Environment:   Live-in 17 =   %212 = bitcast i64** %3 to i8*, !noelle.pdg.inst.id !21729
Parallelizer: parallelizerLoop:   Environment:   Live-in 18 =   %213 = bitcast %struct.bf_key_st** %4 to i8*, !noelle.pdg.inst.id !21730
Parallelizer: parallelizerLoop:   Environment:   Live-in 19 =   %214 = bitcast i32* %5 to i8*, !noelle.pdg.inst.id !21731
Parallelizer: parallelizerLoop:   Environment:   Live-in 20 =   %215 = bitcast i64* %6 to i8*, !noelle.pdg.inst.id !21732
Parallelizer: parallelizerLoop:   Environment:   Live-in 21 =   %216 = bitcast i64* %7 to i8*, !noelle.pdg.inst.id !21733
Parallelizer: parallelizerLoop:   Environment:   Live-in 22 =   %217 = bitcast i64** %8 to i8*, !noelle.pdg.inst.id !21734
Parallelizer: parallelizerLoop:   Environment:   Live-in 23 =   %218 = bitcast i64** %9 to i8*, !noelle.pdg.inst.id !21735
Parallelizer: parallelizerLoop:   Environment:   Live-in 24 =   %219 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21736
Parallelizer: parallelizerLoop:   Environment:   Live-in 25 =   %220 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1, !noelle.pdg.inst.id !21737
Parallelizer: parallelizerLoop:   Environment:   Live-in 26 =   %.lcssa4 = phi i32 [ %245, %256 ], !noelle.pdg.inst.id !21782
Parallelizer: parallelizerLoop:   Environment:   Live-in 27 =   %275 = load %struct.bf_key_st*, %struct.bf_key_st** %13, align 8, !noelle.pdg.inst.id !440
Parallelizer: parallelizerLoop:   Environment:   Live-in 28 =   %276 = load i8*, i8** %14, align 8, !noelle.pdg.inst.id !462
Parallelizer: parallelizerLoop:   Environment:   Live-in 29 =   %277 = load i8*, i8** %14, align 8, !noelle.pdg.inst.id !464
Parallelizer: parallelizerLoop:   Environment:   Live-in 30 =   %278 = load i32, i32* %20, !noelle.pdg.inst.id !538
Parallelizer: parallelizerLoop:   Environment:   Live-in 31 =   %279 = load i64, i64* %21, !noelle.pdg.inst.id !997
Parallelizer: parallelizerLoop:   Environment:   Live-out 32 =   %283 = phi i32 [ %996, %993 ], [ %.lcssa4, %274 ], !noelle.pdg.inst.id !21806
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 1 = "  %246 = call i32 @feof(%struct._IO_FILE* %181) #11, !noelle.pdg.inst.id !42"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %29 = alloca %struct.bf_key_st, align 8, !noelle.pdg.inst.id !21570
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %31 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21572
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %32 = alloca [40 x i8], align 16, !noelle.pdg.inst.id !21573
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %34 = alloca i32, align 4, !noelle.pdg.inst.id !21575
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %36 = alloca i32, align 4, !noelle.pdg.inst.id !21577
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %42 = alloca i32, align 4, !noelle.pdg.inst.id !21583
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %228 = bitcast i8** %10 to i8*, !noelle.pdg.inst.id !21745
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %229 = bitcast i8** %11 to i8*, !noelle.pdg.inst.id !21746
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %230 = bitcast i64* %12 to i8*, !noelle.pdg.inst.id !21747
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %231 = bitcast %struct.bf_key_st** %13 to i8*, !noelle.pdg.inst.id !21748
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %232 = bitcast i8** %14 to i8*, !noelle.pdg.inst.id !21749
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %233 = bitcast i32** %15 to i8*, !noelle.pdg.inst.id !21750
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %234 = bitcast i32* %16 to i8*, !noelle.pdg.inst.id !21751
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %235 = bitcast i64* %17 to i8*, !noelle.pdg.inst.id !21752
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 =   %236 = bitcast i64* %18 to i8*, !noelle.pdg.inst.id !21753
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 =   %237 = bitcast i64* %19 to i8*, !noelle.pdg.inst.id !21754
Parallelizer: parallelizerLoop:   Environment:   Live-in 16 =   %238 = bitcast i32* %20 to i8*, !noelle.pdg.inst.id !21755
Parallelizer: parallelizerLoop:   Environment:   Live-in 17 =   %239 = bitcast i64* %21 to i8*, !noelle.pdg.inst.id !21756
Parallelizer: parallelizerLoop:   Environment:   Live-in 18 =   %240 = bitcast [2 x i64]* %22 to i8*, !noelle.pdg.inst.id !21757
Parallelizer: parallelizerLoop:   Environment:   Live-in 19 =   %241 = bitcast i8** %23 to i8*, !noelle.pdg.inst.id !21758
Parallelizer: parallelizerLoop:   Environment:   Live-in 20 =   %242 = load %struct._IO_FILE*, %struct._IO_FILE** %41, align 8, !noelle.pdg.inst.id !693
Parallelizer: parallelizerLoop:   Environment:   Live-in 21 =   %243 = load i32, i32* %5, !noelle.pdg.inst.id !695
Parallelizer: parallelizerLoop:   Environment:   Live-in 22 =   %181 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8, !noelle.pdg.inst.id !71
Parallelizer: parallelizerLoop:   Environment:   Live-in 23 =   %182 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8, !noelle.pdg.inst.id !79
Parallelizer: parallelizerLoop:   Environment:   Live-in 24 =   %183 = load %struct._IO_FILE*, %struct._IO_FILE** %40, align 8, !noelle.pdg.inst.id !86
Parallelizer: parallelizerLoop:   Environment:   Live-in 25 =   %184 = getelementptr inbounds [40 x i8], [40 x i8]* %31, i64 0, i64 0, !noelle.pdg.inst.id !21702
Parallelizer: parallelizerLoop:   Environment:   Live-in 26 =   %185 = getelementptr inbounds [40 x i8], [40 x i8]* %32, i64 0, i64 0, !noelle.pdg.inst.id !21703
Parallelizer: parallelizerLoop:   Environment:   Live-in 27 =   %186 = getelementptr inbounds [8 x i8], [8 x i8]* %33, i64 0, i64 0, !noelle.pdg.inst.id !21704
Parallelizer: parallelizerLoop:   Environment:   Live-in 28 =   %187 = load i32, i32* %37, align 4, !noelle.pdg.inst.id !93
Parallelizer: parallelizerLoop:   Environment:   Live-in 29 =   %188 = bitcast i8** %10 to i8*, !noelle.pdg.inst.id !21705
Parallelizer: parallelizerLoop:   Environment:   Live-in 30 =   %189 = bitcast i8** %11 to i8*, !noelle.pdg.inst.id !21706
Parallelizer: parallelizerLoop:   Environment:   Live-in 31 =   %190 = bitcast i64* %12 to i8*, !noelle.pdg.inst.id !21707
Parallelizer: parallelizerLoop:   Environment:   Live-in 32 =   %191 = bitcast %struct.bf_key_st** %13 to i8*, !noelle.pdg.inst.id !21708
Parallelizer: parallelizerLoop:   Environment:   Live-in 33 =   %192 = bitcast i8** %14 to i8*, !noelle.pdg.inst.id !21709
Parallelizer: parallelizerLoop:   Environment:   Live-in 34 =   %193 = bitcast i32** %15 to i8*, !noelle.pdg.inst.id !21710
Parallelizer: parallelizerLoop:   Environment:   Live-in 35 =   %194 = bitcast i32* %16 to i8*, !noelle.pdg.inst.id !21711
Parallelizer: parallelizerLoop:   Environment:   Live-in 36 =   %195 = bitcast i64* %17 to i8*, !noelle.pdg.inst.id !21712
Parallelizer: parallelizerLoop:   Environment:   Live-in 37 =   %196 = bitcast i64* %18 to i8*, !noelle.pdg.inst.id !21713
Parallelizer: parallelizerLoop:   Environment:   Live-in 38 =   %197 = bitcast i64* %19 to i8*, !noelle.pdg.inst.id !21714
Parallelizer: parallelizerLoop:   Environment:   Live-in 39 =   %198 = bitcast i32* %20 to i8*, !noelle.pdg.inst.id !21715
Parallelizer: parallelizerLoop:   Environment:   Live-in 40 =   %199 = bitcast i64* %21 to i8*, !noelle.pdg.inst.id !21716
Parallelizer: parallelizerLoop:   Environment:   Live-in 41 =   %200 = bitcast [2 x i64]* %22 to i8*, !noelle.pdg.inst.id !21717
Parallelizer: parallelizerLoop:   Environment:   Live-in 42 =   %201 = bitcast i8** %23 to i8*, !noelle.pdg.inst.id !21718
Parallelizer: parallelizerLoop:   Environment:   Live-in 43 =   %202 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21719
Parallelizer: parallelizerLoop:   Environment:   Live-in 44 =   %203 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1, !noelle.pdg.inst.id !21720
Parallelizer: parallelizerLoop:   Environment:   Live-in 45 =   %204 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21721
Parallelizer: parallelizerLoop:   Environment:   Live-in 46 =   %205 = bitcast i64** %3 to i8*, !noelle.pdg.inst.id !21722
Parallelizer: parallelizerLoop:   Environment:   Live-in 47 =   %206 = bitcast %struct.bf_key_st** %4 to i8*, !noelle.pdg.inst.id !21723
Parallelizer: parallelizerLoop:   Environment:   Live-in 48 =   %207 = bitcast i32* %5 to i8*, !noelle.pdg.inst.id !21724
Parallelizer: parallelizerLoop:   Environment:   Live-in 49 =   %208 = bitcast i64* %6 to i8*, !noelle.pdg.inst.id !21725
Parallelizer: parallelizerLoop:   Environment:   Live-in 50 =   %209 = bitcast i64* %7 to i8*, !noelle.pdg.inst.id !21726
Parallelizer: parallelizerLoop:   Environment:   Live-in 51 =   %210 = bitcast i64** %8 to i8*, !noelle.pdg.inst.id !21727
Parallelizer: parallelizerLoop:   Environment:   Live-in 52 =   %211 = bitcast i64** %9 to i8*, !noelle.pdg.inst.id !21728
Parallelizer: parallelizerLoop:   Environment:   Live-in 53 =   %212 = bitcast i64** %3 to i8*, !noelle.pdg.inst.id !21729
Parallelizer: parallelizerLoop:   Environment:   Live-in 54 =   %213 = bitcast %struct.bf_key_st** %4 to i8*, !noelle.pdg.inst.id !21730
Parallelizer: parallelizerLoop:   Environment:   Live-in 55 =   %214 = bitcast i32* %5 to i8*, !noelle.pdg.inst.id !21731
Parallelizer: parallelizerLoop:   Environment:   Live-in 56 =   %215 = bitcast i64* %6 to i8*, !noelle.pdg.inst.id !21732
Parallelizer: parallelizerLoop:   Environment:   Live-in 57 =   %216 = bitcast i64* %7 to i8*, !noelle.pdg.inst.id !21733
Parallelizer: parallelizerLoop:   Environment:   Live-in 58 =   %217 = bitcast i64** %8 to i8*, !noelle.pdg.inst.id !21734
Parallelizer: parallelizerLoop:   Environment:   Live-in 59 =   %218 = bitcast i64** %9 to i8*, !noelle.pdg.inst.id !21735
Parallelizer: parallelizerLoop:   Environment:   Live-in 60 =   %219 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21736
Parallelizer: parallelizerLoop:   Environment:   Live-in 61 =   %220 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1, !noelle.pdg.inst.id !21737
Parallelizer: parallelizerLoop:   Environment:   Live-in 62 =   %221 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21738
Parallelizer: parallelizerLoop:   Environment:   Live-in 63 =   %222 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1, !noelle.pdg.inst.id !21739
Parallelizer: parallelizerLoop:   Environment:   Live-in 64 =   %223 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21740
Parallelizer: parallelizerLoop:   Environment:   Live-in 65 =   %224 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21741
Parallelizer: parallelizerLoop:   Environment:   Live-in 66 =   %225 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1, !noelle.pdg.inst.id !21742
Parallelizer: parallelizerLoop:   Environment:   Live-in 67 =   %226 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 1, !noelle.pdg.inst.id !21743
Parallelizer: parallelizerLoop:   Environment:   Live-in 68 =   %227 = getelementptr inbounds [2 x i64], [2 x i64]* %22, i64 0, i64 0, !noelle.pdg.inst.id !21744
Parallelizer: parallelizerLoop:   Environment:   Live-out 69 =   %245 = phi i32 [ %.lcssa7, %1176 ], [ %243, %180 ], !noelle.pdg.inst.id !21760
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc bf_e.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/bf_e'
