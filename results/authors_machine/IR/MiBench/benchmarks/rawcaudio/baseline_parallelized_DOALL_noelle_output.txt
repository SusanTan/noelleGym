make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/rawcaudio'
./runEnablers.sh rawcaudio rawcaudio.bc large "-lm -lstdc++ -lpthread -ltermcap" -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/rawcaudio /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/rawcaudio
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/rawcaudio
The IR has already been transformed for enabling parallelization
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %53 = getelementptr [1000 x i16], [1000 x i16]* @sbuf, i64 0, i64 0, !noelle.pdg.inst.id !1446" (1.000000e+02%)
Noelle:     Loop "  %86 = icmp sgt i32 %84, 0, !noelle.pdg.inst.id !1486" (9.993149e+01%)
Noelle:  Function "adpcm_coder"
Noelle:  Disable "adpcm_coder" as cold function
Noelle:  Function "adpcm_decoder"
Noelle:  Disable "adpcm_decoder" as cold function
Planner:    There are 2 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:  There are 1 loop nesting trees in the program
Planner:    ID: 0 (1)
Planner:      Function: "main"
Planner:      Loop: "  %53 = getelementptr [1000 x i16], [1000 x i16]* @sbuf, i64 0, i64 0, !noelle.pdg.inst.id !1446"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.000000e+02 %
Planner:      Average instructions per invocation = 1.473242e+14 %
Planner:      Average iterations per invocation = 1.073742e+09 %
Planner:    
Planner:      ID: 1 (2)
Planner:        Function: "main"
Planner:        Loop: "  %86 = icmp sgt i32 %84, 0, !noelle.pdg.inst.id !1486"
Planner:        Loop nesting level: 2
Planner:        Hotness = 9.993149e+01 %
Planner:        Average instructions per invocation = 1.371123e+05 %
Planner:        Average iterations per invocation = 1.001000e+03 %
Planner:      
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i32, align 4, !noelle.pdg.inst.id !1412
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i32, align 4, !noelle.pdg.inst.id !1411
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !1400
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !1400 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i16*, align 8, !noelle.pdg.inst.id !1399
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca i16*, align 8, !noelle.pdg.inst.id !1399 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.adpcm_state*, align 8, !noelle.pdg.inst.id !1398
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.adpcm_state*, align 8, !noelle.pdg.inst.id !1398 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !1397
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !1397 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca i16*, align 8, !noelle.pdg.inst.id !1395
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %1 = alloca i16*, align 8, !noelle.pdg.inst.id !1395 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i8*, align 8, !noelle.pdg.inst.id !1396
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca i8*, align 8, !noelle.pdg.inst.id !1396 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !1401
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i32, align 4, !noelle.pdg.inst.id !1401 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !1402
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i32, align 4, !noelle.pdg.inst.id !1402 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4, !noelle.pdg.inst.id !1403
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i32, align 4, !noelle.pdg.inst.id !1403 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4, !noelle.pdg.inst.id !1404
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i32, align 4, !noelle.pdg.inst.id !1404 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4, !noelle.pdg.inst.id !1405
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca i32, align 4, !noelle.pdg.inst.id !1405 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4, !noelle.pdg.inst.id !1406
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i32, align 4, !noelle.pdg.inst.id !1406 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4, !noelle.pdg.inst.id !1407
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca i32, align 4, !noelle.pdg.inst.id !1407 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4, !noelle.pdg.inst.id !1408
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i32, align 4, !noelle.pdg.inst.id !1408 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32, align 4, !noelle.pdg.inst.id !1409
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32, align 4, !noelle.pdg.inst.id !1409 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !1410
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca i32, align 4, !noelle.pdg.inst.id !1410 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i32, align 4, !noelle.pdg.inst.id !1412
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i32, align 4, !noelle.pdg.inst.id !1411
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !1400
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !1400 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i16*, align 8, !noelle.pdg.inst.id !1399
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca i16*, align 8, !noelle.pdg.inst.id !1399 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.adpcm_state*, align 8, !noelle.pdg.inst.id !1398
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.adpcm_state*, align 8, !noelle.pdg.inst.id !1398 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !1397
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !1397 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca i16*, align 8, !noelle.pdg.inst.id !1395
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %1 = alloca i16*, align 8, !noelle.pdg.inst.id !1395 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i8*, align 8, !noelle.pdg.inst.id !1396
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca i8*, align 8, !noelle.pdg.inst.id !1396 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !1401
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i32, align 4, !noelle.pdg.inst.id !1401 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !1402
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i32, align 4, !noelle.pdg.inst.id !1402 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4, !noelle.pdg.inst.id !1403
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i32, align 4, !noelle.pdg.inst.id !1403 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4, !noelle.pdg.inst.id !1404
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i32, align 4, !noelle.pdg.inst.id !1404 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4, !noelle.pdg.inst.id !1405
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca i32, align 4, !noelle.pdg.inst.id !1405 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4, !noelle.pdg.inst.id !1406
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i32, align 4, !noelle.pdg.inst.id !1406 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4, !noelle.pdg.inst.id !1407
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca i32, align 4, !noelle.pdg.inst.id !1407 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4, !noelle.pdg.inst.id !1408
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i32, align 4, !noelle.pdg.inst.id !1408 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32, align 4, !noelle.pdg.inst.id !1409
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32, align 4, !noelle.pdg.inst.id !1409 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !1410
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca i32, align 4, !noelle.pdg.inst.id !1410 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i32, align 4, !noelle.pdg.inst.id !1412
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i32, align 4, !noelle.pdg.inst.id !1411
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !1400
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i16*, align 8, !noelle.pdg.inst.id !1399
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.adpcm_state*, align 8, !noelle.pdg.inst.id !1398
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !1397
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca i16*, align 8, !noelle.pdg.inst.id !1395
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i8*, align 8, !noelle.pdg.inst.id !1396
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !1401
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !1402
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4, !noelle.pdg.inst.id !1403
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4, !noelle.pdg.inst.id !1404
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4, !noelle.pdg.inst.id !1405
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4, !noelle.pdg.inst.id !1406
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4, !noelle.pdg.inst.id !1407
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4, !noelle.pdg.inst.id !1408
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32, align 4, !noelle.pdg.inst.id !1409
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !1410
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i32, align 4, !noelle.pdg.inst.id !1412
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i32, align 4, !noelle.pdg.inst.id !1411
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !1400
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i16*, align 8, !noelle.pdg.inst.id !1399
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.adpcm_state*, align 8, !noelle.pdg.inst.id !1398
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !1397
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca i16*, align 8, !noelle.pdg.inst.id !1395
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i8*, align 8, !noelle.pdg.inst.id !1396
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !1401
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !1402
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4, !noelle.pdg.inst.id !1403
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4, !noelle.pdg.inst.id !1404
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4, !noelle.pdg.inst.id !1405
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4, !noelle.pdg.inst.id !1406
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4, !noelle.pdg.inst.id !1407
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4, !noelle.pdg.inst.id !1408
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32, align 4, !noelle.pdg.inst.id !1409
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !1410
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 1
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %86 = icmp sgt i32 %84, 0, !noelle.pdg.inst.id !1486"
Planner: LoopSelector:      Coverage: 9.993149e+01%
Planner: LoopSelector:      Whole-program savings = 2.004353e+01%
Planner: LoopSelector:      Loop savings = 2.005727e+01%
Planner: LoopSelector:    Loop 0
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %53 = getelementptr [1000 x i16], [1000 x i16]* @sbuf, i64 0, i64 0, !noelle.pdg.inst.id !1446"
Planner: LoopSelector:      Coverage: 1.000000e+02%
Planner: LoopSelector:      Whole-program savings = 8.775831e+00%
Planner: LoopSelector:      Loop savings = 8.775831e+00%
Planner: LoopSelector: End
Planner:   Maximum time saved = 2.004353e+01% (29528964120644)
Planner:   Maximum time saved with DOALL only = 0.000000e+00% (0)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %53 = getelementptr [1000 x i16], [1000 x i16]* @sbuf, i64 0, i64 0, !noelle.pdg.inst.id !1448" (1.000000e+02%)
Noelle:     Loop "  %86 = icmp sgt i32 %84, 0, !noelle.pdg.inst.id !1489" (9.993149e+01%)
Noelle:  Function "adpcm_decoder"
Noelle:  Disable "adpcm_decoder" as cold function
Noelle:  Function "adpcm_coder"
Noelle:  Disable "adpcm_coder" as cold function
Parallelizer:    There are 2 loops in the program we are going to consider
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i32, align 4, !noelle.pdg.inst.id !1414
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i32, align 4, !noelle.pdg.inst.id !1413
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !1402
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !1402 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i16*, align 8, !noelle.pdg.inst.id !1401
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca i16*, align 8, !noelle.pdg.inst.id !1401 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.adpcm_state*, align 8, !noelle.pdg.inst.id !1400
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.adpcm_state*, align 8, !noelle.pdg.inst.id !1400 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !1399
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !1399 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca i16*, align 8, !noelle.pdg.inst.id !1397
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %1 = alloca i16*, align 8, !noelle.pdg.inst.id !1397 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i8*, align 8, !noelle.pdg.inst.id !1398
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca i8*, align 8, !noelle.pdg.inst.id !1398 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !1403
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i32, align 4, !noelle.pdg.inst.id !1403 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !1404
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i32, align 4, !noelle.pdg.inst.id !1404 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4, !noelle.pdg.inst.id !1405
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i32, align 4, !noelle.pdg.inst.id !1405 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4, !noelle.pdg.inst.id !1406
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i32, align 4, !noelle.pdg.inst.id !1406 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4, !noelle.pdg.inst.id !1407
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca i32, align 4, !noelle.pdg.inst.id !1407 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4, !noelle.pdg.inst.id !1408
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i32, align 4, !noelle.pdg.inst.id !1408 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4, !noelle.pdg.inst.id !1409
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca i32, align 4, !noelle.pdg.inst.id !1409 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4, !noelle.pdg.inst.id !1410
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i32, align 4, !noelle.pdg.inst.id !1410 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32, align 4, !noelle.pdg.inst.id !1411
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32, align 4, !noelle.pdg.inst.id !1411 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !1412
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca i32, align 4, !noelle.pdg.inst.id !1412 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i32, align 4, !noelle.pdg.inst.id !1414
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i32, align 4, !noelle.pdg.inst.id !1413
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !1402
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !1402 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i16*, align 8, !noelle.pdg.inst.id !1401
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca i16*, align 8, !noelle.pdg.inst.id !1401 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.adpcm_state*, align 8, !noelle.pdg.inst.id !1400
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %struct.adpcm_state*, align 8, !noelle.pdg.inst.id !1400 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !1399
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !1399 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca i16*, align 8, !noelle.pdg.inst.id !1397
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %1 = alloca i16*, align 8, !noelle.pdg.inst.id !1397 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i8*, align 8, !noelle.pdg.inst.id !1398
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca i8*, align 8, !noelle.pdg.inst.id !1398 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !1403
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i32, align 4, !noelle.pdg.inst.id !1403 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !1404
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca i32, align 4, !noelle.pdg.inst.id !1404 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4, !noelle.pdg.inst.id !1405
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i32, align 4, !noelle.pdg.inst.id !1405 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4, !noelle.pdg.inst.id !1406
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i32, align 4, !noelle.pdg.inst.id !1406 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4, !noelle.pdg.inst.id !1407
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca i32, align 4, !noelle.pdg.inst.id !1407 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4, !noelle.pdg.inst.id !1408
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i32, align 4, !noelle.pdg.inst.id !1408 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4, !noelle.pdg.inst.id !1409
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca i32, align 4, !noelle.pdg.inst.id !1409 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4, !noelle.pdg.inst.id !1410
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i32, align 4, !noelle.pdg.inst.id !1410 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32, align 4, !noelle.pdg.inst.id !1411
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32, align 4, !noelle.pdg.inst.id !1411 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !1412
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca i32, align 4, !noelle.pdg.inst.id !1412 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i32, align 4, !noelle.pdg.inst.id !1414
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i32, align 4, !noelle.pdg.inst.id !1413
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !1402
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i16*, align 8, !noelle.pdg.inst.id !1401
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.adpcm_state*, align 8, !noelle.pdg.inst.id !1400
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !1399
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca i16*, align 8, !noelle.pdg.inst.id !1397
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i8*, align 8, !noelle.pdg.inst.id !1398
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !1403
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !1404
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4, !noelle.pdg.inst.id !1405
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4, !noelle.pdg.inst.id !1406
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4, !noelle.pdg.inst.id !1407
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4, !noelle.pdg.inst.id !1408
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4, !noelle.pdg.inst.id !1409
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4, !noelle.pdg.inst.id !1410
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32, align 4, !noelle.pdg.inst.id !1411
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !1412
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i32, align 4, !noelle.pdg.inst.id !1414
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca i32, align 4, !noelle.pdg.inst.id !1413
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !1402
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i16*, align 8, !noelle.pdg.inst.id !1401
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.adpcm_state*, align 8, !noelle.pdg.inst.id !1400
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !1399
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca i16*, align 8, !noelle.pdg.inst.id !1397
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i8*, align 8, !noelle.pdg.inst.id !1398
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !1403
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !1404
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4, !noelle.pdg.inst.id !1405
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4, !noelle.pdg.inst.id !1406
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4, !noelle.pdg.inst.id !1407
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4, !noelle.pdg.inst.id !1408
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4, !noelle.pdg.inst.id !1409
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4, !noelle.pdg.inst.id !1410
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32, align 4, !noelle.pdg.inst.id !1411
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !1412
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 1 = "  %86 = icmp sgt i32 %84, 0, !noelle.pdg.inst.id !1489"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %5 = alloca i16*, align 8, !noelle.pdg.inst.id !1401
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !1402
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !1403
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !1404
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %9 = alloca i32, align 4, !noelle.pdg.inst.id !1405
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %10 = alloca i32, align 4, !noelle.pdg.inst.id !1406
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %11 = alloca i32, align 4, !noelle.pdg.inst.id !1407
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %12 = alloca i32, align 4, !noelle.pdg.inst.id !1408
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %13 = alloca i32, align 4, !noelle.pdg.inst.id !1409
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %14 = alloca i32, align 4, !noelle.pdg.inst.id !1410
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %16 = alloca i32, align 4, !noelle.pdg.inst.id !1412
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %35 = load i32, i32* %15, !noelle.pdg.inst.id !158
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %82 = load i32, i32* %3, !noelle.pdg.inst.id !653
Parallelizer: parallelizerLoop:   Environment:   Live-out 13 =   %85 = phi i32 [ %219, %217 ], [ %35, %63 ], !noelle.pdg.inst.id !1488
Parallelizer: parallelizerLoop:   Environment:   Live-out 14 =   %84 = phi i32 [ %224, %217 ], [ %82, %63 ], !noelle.pdg.inst.id !1487
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 13
DOALL:     Live-out ID = 14
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 0 = "  %53 = getelementptr [1000 x i16], [1000 x i16]* @sbuf, i64 0, i64 0, !noelle.pdg.inst.id !1448"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %18 = alloca i32, align 4, !noelle.pdg.inst.id !1414
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %19 = bitcast i16** %1 to i8*, !noelle.pdg.inst.id !1415
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %20 = bitcast i8** %2 to i8*, !noelle.pdg.inst.id !1416
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %21 = bitcast i32* %3 to i8*, !noelle.pdg.inst.id !1417
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %22 = bitcast %struct.adpcm_state** %4 to i8*, !noelle.pdg.inst.id !1418
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %23 = bitcast i16** %5 to i8*, !noelle.pdg.inst.id !1419
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %24 = bitcast i8** %6 to i8*, !noelle.pdg.inst.id !1420
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %25 = bitcast i32* %7 to i8*, !noelle.pdg.inst.id !1421
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %26 = bitcast i32* %8 to i8*, !noelle.pdg.inst.id !1422
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %27 = bitcast i32* %9 to i8*, !noelle.pdg.inst.id !1423
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %28 = bitcast i32* %10 to i8*, !noelle.pdg.inst.id !1424
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %29 = bitcast i32* %11 to i8*, !noelle.pdg.inst.id !1425
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %30 = bitcast i32* %12 to i8*, !noelle.pdg.inst.id !1426
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %31 = bitcast i32* %13 to i8*, !noelle.pdg.inst.id !1427
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 =   %32 = bitcast i32* %14 to i8*, !noelle.pdg.inst.id !1428
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 =   %33 = bitcast i32* %15 to i8*, !noelle.pdg.inst.id !1429
Parallelizer: parallelizerLoop:   Environment:   Live-in 16 =   %34 = bitcast i32* %16 to i8*, !noelle.pdg.inst.id !1430
Parallelizer: parallelizerLoop:   Environment:   Live-in 17 =   %35 = load i32, i32* %15, !noelle.pdg.inst.id !158
Parallelizer: parallelizerLoop:   Environment:   Live-in 18 =   %36 = bitcast i16** %1 to i8*, !noelle.pdg.inst.id !1431
Parallelizer: parallelizerLoop:   Environment:   Live-in 19 =   %37 = bitcast i8** %2 to i8*, !noelle.pdg.inst.id !1432
Parallelizer: parallelizerLoop:   Environment:   Live-in 20 =   %38 = bitcast i32* %3 to i8*, !noelle.pdg.inst.id !1433
Parallelizer: parallelizerLoop:   Environment:   Live-in 21 =   %39 = bitcast %struct.adpcm_state** %4 to i8*, !noelle.pdg.inst.id !1434
Parallelizer: parallelizerLoop:   Environment:   Live-in 22 =   %40 = bitcast i16** %5 to i8*, !noelle.pdg.inst.id !1435
Parallelizer: parallelizerLoop:   Environment:   Live-in 23 =   %41 = bitcast i8** %6 to i8*, !noelle.pdg.inst.id !1436
Parallelizer: parallelizerLoop:   Environment:   Live-in 24 =   %42 = bitcast i32* %7 to i8*, !noelle.pdg.inst.id !1437
Parallelizer: parallelizerLoop:   Environment:   Live-in 25 =   %43 = bitcast i32* %8 to i8*, !noelle.pdg.inst.id !1438
Parallelizer: parallelizerLoop:   Environment:   Live-in 26 =   %44 = bitcast i32* %9 to i8*, !noelle.pdg.inst.id !1439
Parallelizer: parallelizerLoop:   Environment:   Live-in 27 =   %45 = bitcast i32* %10 to i8*, !noelle.pdg.inst.id !1440
Parallelizer: parallelizerLoop:   Environment:   Live-in 28 =   %46 = bitcast i32* %11 to i8*, !noelle.pdg.inst.id !1441
Parallelizer: parallelizerLoop:   Environment:   Live-in 29 =   %47 = bitcast i32* %12 to i8*, !noelle.pdg.inst.id !1442
Parallelizer: parallelizerLoop:   Environment:   Live-in 30 =   %48 = bitcast i32* %13 to i8*, !noelle.pdg.inst.id !1443
Parallelizer: parallelizerLoop:   Environment:   Live-in 31 =   %49 = bitcast i32* %14 to i8*, !noelle.pdg.inst.id !1444
Parallelizer: parallelizerLoop:   Environment:   Live-in 32 =   %50 = bitcast i32* %15 to i8*, !noelle.pdg.inst.id !1445
Parallelizer: parallelizerLoop:   Environment:   Live-in 33 =   %51 = bitcast i32* %16 to i8*, !noelle.pdg.inst.id !1446
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47
DOALL:     External nodes: 10
DOALL:     	  br i1 %61, label %62, label %63, !prof !1458, !noelle.pdg.inst.id !1459
DOALL:     	  %72 = load i16, i16* %71, align 2, !noelle.pdg.inst.id !717
DOALL:     	  %76 = load i8, i8* %75, align 2, !noelle.pdg.inst.id !755
DOALL:     	  %90 = load i16, i16* %88, align 2, !noelle.pdg.inst.id !62
DOALL:     	  store i8 %214, i8* %215, align 1, !noelle.pdg.inst.id !1238
DOALL:     	  store i8 %230, i8* %231, align 1, !noelle.pdg.inst.id !1246
DOALL:     	  store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721
DOALL:     	  store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723
DOALL:     	  %242 = sdiv i32 %241, 4, !noelle.pdg.inst.id !1626
DOALL:     	  %243 = getelementptr [500 x i8], [500 x i8]* @abuf, i64 0, i64 0, !noelle.pdg.inst.id !1627
DOALL:     Edges: 14
DOALL:     Loop-carried data dependences
DOALL:         store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %230, i8* %231, align 1, !noelle.pdg.inst.id !1246 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         %72 = load i16, i16* %71, align 2, !noelle.pdg.inst.id !717 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         %90 = load i16, i16* %88, align 2, !noelle.pdg.inst.id !62 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         %76 = load i8, i8* %75, align 2, !noelle.pdg.inst.id !755 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %214, i8* %215, align 1, !noelle.pdg.inst.id !1238 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %214, i8* %215, align 1, !noelle.pdg.inst.id !1238 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %230, i8* %231, align 1, !noelle.pdg.inst.id !1246 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         %72 = load i16, i16* %71, align 2, !noelle.pdg.inst.id !717 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %214, i8* %215, align 1, !noelle.pdg.inst.id !1238 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %214, i8* %215, align 1, !noelle.pdg.inst.id !1238 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         %76 = load i8, i8* %75, align 2, !noelle.pdg.inst.id !755 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %230, i8* %231, align 1, !noelle.pdg.inst.id !1246 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %230, i8* %231, align 1, !noelle.pdg.inst.id !1246 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         %90 = load i16, i16* %88, align 2, !noelle.pdg.inst.id !62 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 213
DOALL:     	  %115 = sub nsw i32 %114, %113, !noelle.pdg.inst.id !1511
DOALL:     	  store i32 %115, i32* %10, align 4, !noelle.pdg.inst.id !109
DOALL:     	  %116 = load i32, i32* %11, align 4, !noelle.pdg.inst.id !278
DOALL:     	  %117 = load i32, i32* %13, align 4, !noelle.pdg.inst.id !169
DOALL:     	  %118 = add nsw i32 %117, %116, !noelle.pdg.inst.id !1512
DOALL:     	  store i32 %118, i32* %13, align 4, !noelle.pdg.inst.id !171
DOALL:     	  %120 = phi i32 [ %105, %112 ], [ %105, %._crit_edge1.i ], !noelle.pdg.inst.id !1514
DOALL:     	  %121 = phi i32 [ %106, %112 ], [ %106, %._crit_edge1.i ], !noelle.pdg.inst.id !1515
DOALL:     	  %122 = load i32, i32* %11, align 4, !noelle.pdg.inst.id !312
DOALL:     	  %123 = ashr i32 %122, 1, !noelle.pdg.inst.id !1516
DOALL:     	  store i32 %123, i32* %11, align 4, !noelle.pdg.inst.id !201
DOALL:     	  %124 = load i32, i32* %10, align 4, !noelle.pdg.inst.id !111
DOALL:     	  %125 = load i32, i32* %11, align 4, !noelle.pdg.inst.id !328
DOALL:     	  %126 = icmp sge i32 %124, %125, !noelle.pdg.inst.id !1517
DOALL:     	  br i1 %126, label %127, label %._crit_edge2.i, !prof !1518, !noelle.pdg.inst.id !1519
DOALL:     	  %128 = load i32, i32* %9, align 4, !noelle.pdg.inst.id !216
DOALL:     	  %129 = or i32 %128, 2, !noelle.pdg.inst.id !1521
DOALL:     	  store i32 %129, i32* %9, align 4, !noelle.pdg.inst.id !218
DOALL:     	  %130 = load i32, i32* %11, align 4, !noelle.pdg.inst.id !330
DOALL:     	  %131 = load i32, i32* %10, align 4, !noelle.pdg.inst.id !113
DOALL:     	  %132 = sub nsw i32 %131, %130, !noelle.pdg.inst.id !1522
DOALL:     	  store i32 %132, i32* %10, align 4, !noelle.pdg.inst.id !115
DOALL:     	  %133 = load i32, i32* %11, align 4, !noelle.pdg.inst.id !332
DOALL:     	  %134 = load i32, i32* %13, align 4, !noelle.pdg.inst.id !173
DOALL:     	  %135 = add nsw i32 %134, %133, !noelle.pdg.inst.id !1523
DOALL:     	  store i32 %135, i32* %13, align 4, !noelle.pdg.inst.id !179
DOALL:     	  %137 = phi i32 [ %120, %127 ], [ %120, %._crit_edge2.i ], !noelle.pdg.inst.id !1525
DOALL:     	  %138 = phi i32 [ %121, %127 ], [ %121, %._crit_edge2.i ], !noelle.pdg.inst.id !1526
DOALL:     	  %139 = load i32, i32* %11, align 4, !noelle.pdg.inst.id !342
DOALL:     	  %140 = ashr i32 %139, 1, !noelle.pdg.inst.id !1527
DOALL:     	  store i32 %140, i32* %11, align 4, !noelle.pdg.inst.id !209
DOALL:     	  %141 = load i32, i32* %10, align 4, !noelle.pdg.inst.id !125
DOALL:     	  %142 = load i32, i32* %11, align 4, !noelle.pdg.inst.id !345
DOALL:     	  %143 = icmp sge i32 %141, %142, !noelle.pdg.inst.id !1528
DOALL:     	  br i1 %143, label %144, label %._crit_edge3.i, !prof !1529, !noelle.pdg.inst.id !1530
DOALL:     	  %145 = load i32, i32* %9, align 4, !noelle.pdg.inst.id !230
DOALL:     	  %146 = or i32 %145, 1, !noelle.pdg.inst.id !1532
DOALL:     	  store i32 %146, i32* %9, align 4, !noelle.pdg.inst.id !232
DOALL:     	  %147 = load i32, i32* %11, align 4, !noelle.pdg.inst.id !347
DOALL:     	  %148 = load i32, i32* %13, align 4, !noelle.pdg.inst.id !181
DOALL:     	  %149 = add nsw i32 %148, %147, !noelle.pdg.inst.id !1533
DOALL:     	  store i32 %149, i32* %13, align 4, !noelle.pdg.inst.id !183
DOALL:     	  %151 = phi i32 [ %137, %144 ], [ %137, %._crit_edge3.i ], !noelle.pdg.inst.id !1535
DOALL:     	  %152 = phi i32 [ %138, %144 ], [ %138, %._crit_edge3.i ], !noelle.pdg.inst.id !1536
DOALL:     	  %153 = load i32, i32* %8, align 4, !noelle.pdg.inst.id !147
DOALL:     	  %154 = icmp ne i32 %153, 0, !noelle.pdg.inst.id !1537
DOALL:     	  br i1 %154, label %155, label %159, !prof !1497, !noelle.pdg.inst.id !1538
DOALL:     	  %156 = load i32, i32* %13, align 4, !noelle.pdg.inst.id !185
DOALL:     	  %157 = load i32, i32* %12, align 4, !noelle.pdg.inst.id !734
DOALL:     	  %158 = sub nsw i32 %157, %156, !noelle.pdg.inst.id !1539
DOALL:     	  store i32 %158, i32* %12, align 4, !noelle.pdg.inst.id !90
DOALL:     	  %160 = load i32, i32* %13, align 4, !noelle.pdg.inst.id !187
DOALL:     	  %161 = load i32, i32* %12, align 4, !noelle.pdg.inst.id !737
DOALL:     	  %162 = add nsw i32 %161, %160, !noelle.pdg.inst.id !1541
DOALL:     	  store i32 %162, i32* %12, align 4, !noelle.pdg.inst.id !92
DOALL:     	  %164 = phi i32 [ %151, %159 ], [ %151, %155 ], !noelle.pdg.inst.id !1543
DOALL:     	  %165 = phi i32 [ %152, %159 ], [ %152, %155 ], !noelle.pdg.inst.id !1544
DOALL:     	  %166 = load i32, i32* %12, align 4, !noelle.pdg.inst.id !740
DOALL:     	  %167 = icmp sgt i32 %166, 32767, !noelle.pdg.inst.id !1545
DOALL:     	  br i1 %167, label %168, label %169, !prof !1546, !noelle.pdg.inst.id !1547
DOALL:     	  store i32 32767, i32* %12, align 4, !noelle.pdg.inst.id !94
DOALL:     	  %170 = load i32, i32* %12, align 4, !noelle.pdg.inst.id !743
DOALL:     	  %171 = icmp slt i32 %170, -32768, !noelle.pdg.inst.id !1549
DOALL:     	  %84 = phi i32 [ %224, %217 ], [ %82, %63 ], !noelle.pdg.inst.id !1487
DOALL:     	  br i1 %171, label %172, label %._crit_edge4.i, !prof !1550, !noelle.pdg.inst.id !1551
DOALL:     	  store i32 -32768, i32* %12, align 4, !noelle.pdg.inst.id !96
DOALL:     	  %174 = phi i32 [ %164, %172 ], [ %164, %._crit_edge4.i ], !noelle.pdg.inst.id !1554
DOALL:     	  %175 = phi i32 [ %165, %172 ], [ %165, %._crit_edge4.i ], !noelle.pdg.inst.id !1555
DOALL:     	  %177 = phi i32 [ %174, %173 ], [ %164, %168 ], !noelle.pdg.inst.id !1557
DOALL:     	  %178 = phi i32 [ %175, %173 ], [ %165, %168 ], !noelle.pdg.inst.id !1558
DOALL:     	  %179 = load i32, i32* %8, align 4, !noelle.pdg.inst.id !149
DOALL:     	  %180 = load i32, i32* %9, align 4, !noelle.pdg.inst.id !234
DOALL:     	  %181 = or i32 %180, %179, !noelle.pdg.inst.id !1559
DOALL:     	  store i32 %181, i32* %9, align 4, !noelle.pdg.inst.id !236
DOALL:     	  %182 = load i32, i32* %9, align 4, !noelle.pdg.inst.id !238
DOALL:     	  %183 = sext i32 %182 to i64, !noelle.pdg.inst.id !1560
DOALL:     	  %184 = getelementptr inbounds [16 x i32], [16 x i32]* @indexTable, i64 0, i64 %183, !noelle.pdg.inst.id !1561
DOALL:     	  %185 = load i32, i32* %184, align 4, !noelle.pdg.inst.id !1142
DOALL:     	  %186 = load i32, i32* %14, align 4, !noelle.pdg.inst.id !772
DOALL:     	  %187 = add nsw i32 %186, %185, !noelle.pdg.inst.id !1562
DOALL:     	  store i32 %187, i32* %14, align 4, !noelle.pdg.inst.id !461
DOALL:     	  %188 = load i32, i32* %14, align 4, !noelle.pdg.inst.id !775
DOALL:     	  %189 = icmp slt i32 %188, 0, !noelle.pdg.inst.id !1563
DOALL:     	  br i1 %189, label %190, label %._crit_edge5.i, !prof !1564, !noelle.pdg.inst.id !1565
DOALL:     	  store i32 0, i32* %14, align 4, !noelle.pdg.inst.id !463
DOALL:     	  %192 = phi i32 [ %177, %190 ], [ %177, %._crit_edge5.i ], !noelle.pdg.inst.id !1568
DOALL:     	  %193 = phi i32 [ %178, %190 ], [ %178, %._crit_edge5.i ], !noelle.pdg.inst.id !1569
DOALL:     	  %194 = load i32, i32* %14, align 4, !noelle.pdg.inst.id !778
DOALL:     	  %195 = icmp sgt i32 %194, 88, !noelle.pdg.inst.id !1570
DOALL:     	  br i1 %195, label %196, label %._crit_edge6.i, !prof !1571, !noelle.pdg.inst.id !1572
DOALL:     	  store i32 88, i32* %14, align 4, !noelle.pdg.inst.id !465
DOALL:     	  %198 = phi i32 [ %192, %196 ], [ %192, %._crit_edge6.i ], !noelle.pdg.inst.id !1575
DOALL:     	  %199 = phi i32 [ %193, %196 ], [ %193, %._crit_edge6.i ], !noelle.pdg.inst.id !1576
DOALL:     	  %200 = load i32, i32* %14, align 4, !noelle.pdg.inst.id !455
DOALL:     	  %201 = sext i32 %200 to i64, !noelle.pdg.inst.id !1577
DOALL:     	  %202 = getelementptr inbounds [89 x i32], [89 x i32]* @stepsizeTable, i64 0, i64 %201, !noelle.pdg.inst.id !1578
DOALL:     	  %203 = load i32, i32* %202, align 4, !noelle.pdg.inst.id !468
DOALL:     	  store i32 %203, i32* %11, align 4, !noelle.pdg.inst.id !203
DOALL:     	  %204 = load i32, i32* %16, align 4, !noelle.pdg.inst.id !496
DOALL:     	  %205 = icmp ne i32 %204, 0, !noelle.pdg.inst.id !1579
DOALL:     	  %207 = load i32, i32* %9, align 4, !noelle.pdg.inst.id !220
DOALL:     	  br i1 %56, label %57, label %59, !prof !1450, !noelle.loop.id !1451, !noelle.pdg.inst.id !1452, !noelle.parallelizer.looporder !1453
DOALL:     	  %53 = getelementptr [1000 x i16], [1000 x i16]* @sbuf, i64 0, i64 0, !noelle.pdg.inst.id !1448
DOALL:     	  %54 = call i32 (i32, i16*, i32, ...) bitcast (i32 (...)* @read to i32 (i32, i16*, i32, ...)*)(i32 0, i16* %53, i32 2000), !noelle.pdg.inst.id !41
DOALL:     	  store i32 %54, i32* %18, align 4, !noelle.pdg.inst.id !588
DOALL:     	  %55 = load i32, i32* %18, align 4, !noelle.pdg.inst.id !594
DOALL:     	  %56 = icmp slt i32 %55, 0, !noelle.pdg.inst.id !1449
DOALL:     	  %60 = load i32, i32* %18, align 4, !noelle.pdg.inst.id !598
DOALL:     	  %61 = icmp eq i32 %60, 0, !noelle.pdg.inst.id !1457
DOALL:     	  br i1 %61, label %62, label %63, !prof !1458, !noelle.pdg.inst.id !1459
DOALL:     	  %64 = load i32, i32* %18, align 4, !noelle.pdg.inst.id !600
DOALL:     	  %65 = sdiv i32 %64, 2, !noelle.pdg.inst.id !1461
DOALL:     	  %66 = getelementptr [1000 x i16], [1000 x i16]* @sbuf, i64 0, i64 0, !noelle.pdg.inst.id !1478
DOALL:     	  store i16* %66, i16** %1, align 8, !noelle.pdg.inst.id !621
DOALL:     	  %67 = getelementptr [500 x i8], [500 x i8]* @abuf, i64 0, i64 0, !noelle.pdg.inst.id !1479
DOALL:     	  store i8* %67, i8** %2, align 8, !noelle.pdg.inst.id !633
DOALL:     	  store i32 %65, i32* %3, align 4, !noelle.pdg.inst.id !645
DOALL:     	  store %struct.adpcm_state* @state, %struct.adpcm_state** %4, align 8, !noelle.pdg.inst.id !659
DOALL:     	  %68 = load i8*, i8** %2, align 8, !noelle.pdg.inst.id !641
DOALL:     	  store i8* %68, i8** %6, align 8, !noelle.pdg.inst.id !527
DOALL:     	  %69 = load i16*, i16** %1, align 8, !noelle.pdg.inst.id !629
DOALL:     	  store i16* %69, i16** %5, align 8, !noelle.pdg.inst.id !45
DOALL:     	  %70 = load %struct.adpcm_state*, %struct.adpcm_state** %4, align 8, !noelle.pdg.inst.id !667
DOALL:     	  %71 = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %70, i32 0, i32 0, !noelle.pdg.inst.id !1480
DOALL:     	  %72 = load i16, i16* %71, align 2, !noelle.pdg.inst.id !717
DOALL:     	  %73 = sext i16 %72 to i32, !noelle.pdg.inst.id !1481
DOALL:     	  store i32 %73, i32* %12, align 4, !noelle.pdg.inst.id !88
DOALL:     	  %74 = load %struct.adpcm_state*, %struct.adpcm_state** %4, align 8, !noelle.pdg.inst.id !669
DOALL:     	  %75 = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %74, i32 0, i32 1, !noelle.pdg.inst.id !1482
DOALL:     	  %76 = load i8, i8* %75, align 2, !noelle.pdg.inst.id !755
DOALL:     	  %77 = sext i8 %76 to i32, !noelle.pdg.inst.id !1483
DOALL:     	  store i32 %77, i32* %14, align 4, !noelle.pdg.inst.id !459
DOALL:     	  %78 = load i32, i32* %14, align 4, !noelle.pdg.inst.id !770
DOALL:     	  %79 = sext i32 %78 to i64, !noelle.pdg.inst.id !1484
DOALL:     	  %80 = getelementptr inbounds [89 x i32], [89 x i32]* @stepsizeTable, i64 0, i64 %79, !noelle.pdg.inst.id !1485
DOALL:     	  %81 = load i32, i32* %80, align 4, !noelle.pdg.inst.id !793
DOALL:     	  store i32 %81, i32* %11, align 4, !noelle.pdg.inst.id !207
DOALL:     	  store i32 1, i32* %16, align 4, !noelle.pdg.inst.id !500
DOALL:     	  %82 = load i32, i32* %3, !noelle.pdg.inst.id !653
DOALL:     	  %85 = phi i32 [ %219, %217 ], [ %35, %63 ], !noelle.pdg.inst.id !1488
DOALL:     	  %86 = icmp sgt i32 %84, 0, !noelle.pdg.inst.id !1489
DOALL:     	  br i1 %86, label %87, label %225, !prof !1490, !noelle.loop.id !1453, !noelle.pdg.inst.id !1491, !noelle.parallelizer.looporder !1451
DOALL:     	  %88 = load i16*, i16** %5, align 8, !noelle.pdg.inst.id !33
DOALL:     	  %89 = getelementptr inbounds i16, i16* %88, i32 1, !noelle.pdg.inst.id !1492
DOALL:     	  store i16* %89, i16** %5, align 8, !noelle.pdg.inst.id !39
DOALL:     	  %90 = load i16, i16* %88, align 2, !noelle.pdg.inst.id !62
DOALL:     	  %91 = sext i16 %90 to i32, !noelle.pdg.inst.id !1493
DOALL:     	  store i32 %91, i32* %7, align 4, !noelle.pdg.inst.id !67
DOALL:     	  %92 = load i32, i32* %7, align 4, !noelle.pdg.inst.id !71
DOALL:     	  %93 = load i32, i32* %12, align 4, !noelle.pdg.inst.id !84
DOALL:     	  %94 = sub nsw i32 %92, %93, !noelle.pdg.inst.id !1494
DOALL:     	  store i32 %94, i32* %10, align 4, !noelle.pdg.inst.id !99
DOALL:     	  %95 = load i32, i32* %10, align 4, !noelle.pdg.inst.id !103
DOALL:     	  %96 = icmp slt i32 %95, 0, !noelle.pdg.inst.id !1495
DOALL:     	  br i1 %205, label %206, label %210, !prof !1580, !noelle.pdg.inst.id !1581
DOALL:     	  %208 = shl i32 %207, 4, !noelle.pdg.inst.id !1582
DOALL:     	  %209 = and i32 %208, 240, !noelle.pdg.inst.id !1583
DOALL:     	  %211 = load i32, i32* %9, align 4, !noelle.pdg.inst.id !222
DOALL:     	  %212 = and i32 %211, 15, !noelle.pdg.inst.id !1585
DOALL:     	  %213 = or i32 %212, %199, !noelle.pdg.inst.id !1586
DOALL:     	  %214 = trunc i32 %213 to i8, !noelle.pdg.inst.id !1587
DOALL:     	  %215 = load i8*, i8** %6, align 8, !noelle.pdg.inst.id !523
DOALL:     	  %216 = getelementptr inbounds i8, i8* %215, i32 1, !noelle.pdg.inst.id !1588
DOALL:     	  store i8* %216, i8** %6, align 8, !noelle.pdg.inst.id !529
DOALL:     	  store i8 %214, i8* %215, align 1, !noelle.pdg.inst.id !1238
DOALL:     	  %218 = phi i32 [ %198, %210 ], [ %198, %206 ], !noelle.pdg.inst.id !1590
DOALL:     	  %219 = phi i32 [ %199, %210 ], [ %209, %206 ], !noelle.pdg.inst.id !1591
DOALL:     	  %220 = load i32, i32* %16, align 4, !noelle.pdg.inst.id !829
DOALL:     	  %221 = icmp ne i32 %220, 0, !noelle.pdg.inst.id !1592
DOALL:     	  %223 = zext i1 %222 to i32, !noelle.pdg.inst.id !1594
DOALL:     	  %98 = select i1 %96, i32 8, i32 0, !prof !1497, !noelle.pdg.inst.id !1498
DOALL:     	  store i32 %98, i32* %8, align 4, !noelle.pdg.inst.id !137
DOALL:     	  %99 = load i32, i32* %8, align 4, !noelle.pdg.inst.id !141
DOALL:     	  %100 = icmp ne i32 %99, 0, !noelle.pdg.inst.id !1499
DOALL:     	  br i1 %100, label %101, label %._crit_edge.i, !prof !1497, !noelle.pdg.inst.id !1500
DOALL:     	  %102 = load i32, i32* %10, align 4, !noelle.pdg.inst.id !117
DOALL:     	  %103 = sub nsw i32 0, %102, !noelle.pdg.inst.id !1502
DOALL:     	  store i32 %103, i32* %10, align 4, !noelle.pdg.inst.id !119
DOALL:     	  %105 = phi i32 [ %84, %101 ], [ %84, %._crit_edge.i ], !noelle.pdg.inst.id !1504
DOALL:     	  %106 = phi i32 [ %85, %101 ], [ %85, %._crit_edge.i ], !noelle.pdg.inst.id !1505
DOALL:     	  store i32 0, i32* %9, align 4, !noelle.pdg.inst.id !224
DOALL:     	  %107 = load i32, i32* %11, align 4, !noelle.pdg.inst.id !335
DOALL:     	  %108 = ashr i32 %107, 3, !noelle.pdg.inst.id !1506
DOALL:     	  store i32 %108, i32* %13, align 4, !noelle.pdg.inst.id !165
DOALL:     	  %109 = load i32, i32* %10, align 4, !noelle.pdg.inst.id !105
DOALL:     	  %110 = load i32, i32* %11, align 4, !noelle.pdg.inst.id !199
DOALL:     	  %111 = icmp sge i32 %109, %110, !noelle.pdg.inst.id !1507
DOALL:     	  br i1 %111, label %112, label %._crit_edge1.i, !prof !1508, !noelle.pdg.inst.id !1509
DOALL:     	  store i32 4, i32* %9, align 4, !noelle.pdg.inst.id !212
DOALL:     	  %113 = load i32, i32* %11, align 4, !noelle.pdg.inst.id !242
DOALL:     	  %114 = load i32, i32* %10, align 4, !noelle.pdg.inst.id !107
DOALL:     	  %222 = xor i1 %221, true, !noelle.pdg.inst.id !1593
DOALL:     	  store i32 %223, i32* %16, align 4, !noelle.pdg.inst.id !502
DOALL:     	  %224 = add nsw i32 %218, -1, !noelle.pdg.inst.id !1595
DOALL:     	  %.lcssa1 = phi i32 [ %85, %83 ], !noelle.pdg.inst.id !1597
DOALL:     	  store i32 %.lcssa1, i32* %15, !noelle.pdg.inst.id !162
DOALL:     	  %226 = load i32, i32* %16, align 4, !noelle.pdg.inst.id !832
DOALL:     	  %227 = icmp ne i32 %226, 0, !noelle.pdg.inst.id !1599
DOALL:     	  br i1 %227, label %._crit_edge7.i, label %228, !prof !1600, !noelle.pdg.inst.id !1601
DOALL:     	  %229 = load i32, i32* %15, align 4, !noelle.pdg.inst.id !1276
DOALL:     	  %230 = trunc i32 %229 to i8, !noelle.pdg.inst.id !1603
DOALL:     	  %231 = load i8*, i8** %6, align 8, !noelle.pdg.inst.id !691
DOALL:     	  store i8 %230, i8* %231, align 1, !noelle.pdg.inst.id !1246
DOALL:     	  %233 = load i32, i32* %12, align 4, !noelle.pdg.inst.id !746
DOALL:     	  %234 = trunc i32 %233 to i16, !noelle.pdg.inst.id !1606
DOALL:     	  %235 = load %struct.adpcm_state*, %struct.adpcm_state** %4, align 8, !noelle.pdg.inst.id !671
DOALL:     	  %236 = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %235, i32 0, i32 0, !noelle.pdg.inst.id !1607
DOALL:     	  store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721
DOALL:     	  %237 = load i32, i32* %14, align 4, !noelle.pdg.inst.id !781
DOALL:     	  %238 = trunc i32 %237 to i8, !noelle.pdg.inst.id !1608
DOALL:     	  %239 = load %struct.adpcm_state*, %struct.adpcm_state** %4, align 8, !noelle.pdg.inst.id !673
DOALL:     	  %240 = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %239, i32 0, i32 1, !noelle.pdg.inst.id !1609
DOALL:     	  store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723
DOALL:     External nodes: 66
DOALL:     	  br label %119, !noelle.pdg.inst.id !1513
DOALL:     	  br label %136, !noelle.pdg.inst.id !1520
DOALL:     	  br label %136, !noelle.pdg.inst.id !1524
DOALL:     	  br label %150, !noelle.pdg.inst.id !1531
DOALL:     	  br label %150, !noelle.pdg.inst.id !1534
DOALL:     	  br label %163, !noelle.pdg.inst.id !1540
DOALL:     	  br label %163, !noelle.pdg.inst.id !1542
DOALL:     	  br label %176, !noelle.pdg.inst.id !1548
DOALL:     	  br label %173, !noelle.pdg.inst.id !1552
DOALL:     	  br label %173, !noelle.pdg.inst.id !1553
DOALL:     	  br label %176, !noelle.pdg.inst.id !1556
DOALL:     	  br label %191, !noelle.pdg.inst.id !1566
DOALL:     	  br label %191, !noelle.pdg.inst.id !1567
DOALL:     	  br label %197, !noelle.pdg.inst.id !1573
DOALL:     	  br label %197, !noelle.pdg.inst.id !1574
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19), !noelle.pdg.inst.id !1462
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %20), !noelle.pdg.inst.id !1463
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* %21), !noelle.pdg.inst.id !1464
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %22), !noelle.pdg.inst.id !1465
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %23), !noelle.pdg.inst.id !1466
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24), !noelle.pdg.inst.id !1467
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* %25), !noelle.pdg.inst.id !1468
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* %26), !noelle.pdg.inst.id !1469
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* %27), !noelle.pdg.inst.id !1470
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* %28), !noelle.pdg.inst.id !1471
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29), !noelle.pdg.inst.id !1472
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30), !noelle.pdg.inst.id !1473
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31), !noelle.pdg.inst.id !1474
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32), !noelle.pdg.inst.id !1475
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33), !noelle.pdg.inst.id !1476
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* %34), !noelle.pdg.inst.id !1477
DOALL:     	  br label %83, !noelle.pdg.inst.id !1486
DOALL:     	  %97 = zext i1 %96 to i64, !noelle.pdg.inst.id !1496
DOALL:     	  br label %217, !noelle.pdg.inst.id !1584
DOALL:     	  br label %217, !noelle.pdg.inst.id !1589
DOALL:     	  br label %104, !noelle.pdg.inst.id !1501
DOALL:     	  br label %104, !noelle.pdg.inst.id !1503
DOALL:     	  br label %119, !noelle.pdg.inst.id !1510
DOALL:     	  br label %83, !noelle.pdg.inst.id !1596
DOALL:     	  %.lcssa = phi i32 [ %84, %83 ], !noelle.pdg.inst.id !1598
DOALL:     	  store i32 %.lcssa, i32* %3, !noelle.pdg.inst.id !655
DOALL:     	  br label %adpcm_coder.exit, !noelle.pdg.inst.id !1602
DOALL:     	  %232 = getelementptr inbounds i8, i8* %231, i32 1, !noelle.pdg.inst.id !1604
DOALL:     	  store i8* %232, i8** %6, align 8, !noelle.pdg.inst.id !531
DOALL:     	  br label %adpcm_coder.exit, !noelle.pdg.inst.id !1605
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36), !noelle.pdg.inst.id !1610
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %37), !noelle.pdg.inst.id !1611
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* %38), !noelle.pdg.inst.id !1612
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %39), !noelle.pdg.inst.id !1613
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40), !noelle.pdg.inst.id !1614
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 8, i8* %41), !noelle.pdg.inst.id !1615
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* %42), !noelle.pdg.inst.id !1616
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* %43), !noelle.pdg.inst.id !1617
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* %44), !noelle.pdg.inst.id !1618
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* %45), !noelle.pdg.inst.id !1619
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* %46), !noelle.pdg.inst.id !1620
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* %47), !noelle.pdg.inst.id !1621
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* %48), !noelle.pdg.inst.id !1622
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* %49), !noelle.pdg.inst.id !1623
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* %50), !noelle.pdg.inst.id !1624
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* %51), !noelle.pdg.inst.id !1625
DOALL:     	  %241 = load i32, i32* %18, align 4, !noelle.pdg.inst.id !602
DOALL:     	  %242 = sdiv i32 %241, 4, !noelle.pdg.inst.id !1626
DOALL:     	  %243 = getelementptr [500 x i8], [500 x i8]* @abuf, i64 0, i64 0, !noelle.pdg.inst.id !1627
DOALL:     	  %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47
DOALL:     	  br label %52, !noelle.pdg.inst.id !1628
DOALL:     Edges: 966
DOALL:     Loop-carried data dependences
DOALL:         store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %230, i8* %231, align 1, !noelle.pdg.inst.id !1246 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         %72 = load i16, i16* %71, align 2, !noelle.pdg.inst.id !717 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         %90 = load i16, i16* %88, align 2, !noelle.pdg.inst.id !62 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         %76 = load i8, i8* %75, align 2, !noelle.pdg.inst.id !755 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %214, i8* %215, align 1, !noelle.pdg.inst.id !1238 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %214, i8* %215, align 1, !noelle.pdg.inst.id !1238 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %230, i8* %231, align 1, !noelle.pdg.inst.id !1246 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         %72 = load i16, i16* %71, align 2, !noelle.pdg.inst.id !717 --->   store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 via memory
DOALL:         %72 = load i16, i16* %71, align 2, !noelle.pdg.inst.id !717 --->   %54 = call i32 (i32, i16*, i32, ...) bitcast (i32 (...)* @read to i32 (i32, i16*, i32, ...)*)(i32 0, i16* %53, i32 2000), !noelle.pdg.inst.id !41 via memory
DOALL:         %72 = load i16, i16* %71, align 2, !noelle.pdg.inst.id !717 --->   store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 via memory
DOALL:         store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 --->   %54 = call i32 (i32, i16*, i32, ...) bitcast (i32 (...)* @read to i32 (i32, i16*, i32, ...)*)(i32 0, i16* %53, i32 2000), !noelle.pdg.inst.id !41 via memory
DOALL:         store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 --->   %72 = load i16, i16* %71, align 2, !noelle.pdg.inst.id !717 via memory
DOALL:         store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 --->   %54 = call i32 (i32, i16*, i32, ...) bitcast (i32 (...)* @read to i32 (i32, i16*, i32, ...)*)(i32 0, i16* %53, i32 2000), !noelle.pdg.inst.id !41 via memory
DOALL:         store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 --->   %76 = load i8, i8* %75, align 2, !noelle.pdg.inst.id !755 via memory
DOALL:         store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 --->   store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 via memory
DOALL:         store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 --->   store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 via memory
DOALL:         %60 = load i32, i32* %18, align 4, !noelle.pdg.inst.id !598 --->   store i32 %54, i32* %18, align 4, !noelle.pdg.inst.id !588 via memory
DOALL:         store i8 %214, i8* %215, align 1, !noelle.pdg.inst.id !1238 --->   store i8 %230, i8* %231, align 1, !noelle.pdg.inst.id !1246 via memory
DOALL:         store i8 %214, i8* %215, align 1, !noelle.pdg.inst.id !1238 --->   store i8 %214, i8* %215, align 1, !noelle.pdg.inst.id !1238 via memory
DOALL:         store i8 %214, i8* %215, align 1, !noelle.pdg.inst.id !1238 --->   %54 = call i32 (i32, i16*, i32, ...) bitcast (i32 (...)* @read to i32 (i32, i16*, i32, ...)*)(i32 0, i16* %53, i32 2000), !noelle.pdg.inst.id !41 via memory
DOALL:         store i8 %214, i8* %215, align 1, !noelle.pdg.inst.id !1238 --->   %54 = call i32 (i32, i16*, i32, ...) bitcast (i32 (...)* @read to i32 (i32, i16*, i32, ...)*)(i32 0, i16* %53, i32 2000), !noelle.pdg.inst.id !41 via memory
DOALL:         %55 = load i32, i32* %18, align 4, !noelle.pdg.inst.id !594 --->   store i32 %54, i32* %18, align 4, !noelle.pdg.inst.id !588 via memory
DOALL:         store i32 %54, i32* %18, align 4, !noelle.pdg.inst.id !588 --->   store i32 %54, i32* %18, align 4, !noelle.pdg.inst.id !588 via memory
DOALL:         %76 = load i8, i8* %75, align 2, !noelle.pdg.inst.id !755 --->   store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 via memory
DOALL:         %76 = load i8, i8* %75, align 2, !noelle.pdg.inst.id !755 --->   %54 = call i32 (i32, i16*, i32, ...) bitcast (i32 (...)* @read to i32 (i32, i16*, i32, ...)*)(i32 0, i16* %53, i32 2000), !noelle.pdg.inst.id !41 via memory
DOALL:         %76 = load i8, i8* %75, align 2, !noelle.pdg.inst.id !755 --->   store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 via memory
DOALL:         store i8 %230, i8* %231, align 1, !noelle.pdg.inst.id !1246 --->   store i8 %214, i8* %215, align 1, !noelle.pdg.inst.id !1238 via memory
DOALL:         store i8 %230, i8* %231, align 1, !noelle.pdg.inst.id !1246 --->   %54 = call i32 (i32, i16*, i32, ...) bitcast (i32 (...)* @read to i32 (i32, i16*, i32, ...)*)(i32 0, i16* %53, i32 2000), !noelle.pdg.inst.id !41 via memory
DOALL:         store i8 %230, i8* %231, align 1, !noelle.pdg.inst.id !1246 --->   store i8 %230, i8* %231, align 1, !noelle.pdg.inst.id !1246 via memory
DOALL:         store i8 %230, i8* %231, align 1, !noelle.pdg.inst.id !1246 --->   %54 = call i32 (i32, i16*, i32, ...) bitcast (i32 (...)* @read to i32 (i32, i16*, i32, ...)*)(i32 0, i16* %53, i32 2000), !noelle.pdg.inst.id !41 via memory
DOALL:         store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 --->   %54 = call i32 (i32, i16*, i32, ...) bitcast (i32 (...)* @read to i32 (i32, i16*, i32, ...)*)(i32 0, i16* %53, i32 2000), !noelle.pdg.inst.id !41 via memory
DOALL:         store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 --->   %72 = load i16, i16* %71, align 2, !noelle.pdg.inst.id !717 via memory
DOALL:         store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 --->   %54 = call i32 (i32, i16*, i32, ...) bitcast (i32 (...)* @read to i32 (i32, i16*, i32, ...)*)(i32 0, i16* %53, i32 2000), !noelle.pdg.inst.id !41 via memory
DOALL:         store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 --->   store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 via memory
DOALL:         store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 --->   %76 = load i8, i8* %75, align 2, !noelle.pdg.inst.id !755 via memory
DOALL:         store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 --->   store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 via memory
DOALL:         %90 = load i16, i16* %88, align 2, !noelle.pdg.inst.id !62 --->   %54 = call i32 (i32, i16*, i32, ...) bitcast (i32 (...)* @read to i32 (i32, i16*, i32, ...)*)(i32 0, i16* %53, i32 2000), !noelle.pdg.inst.id !41 via memory
DOALL:         %72 = load i16, i16* %71, align 2, !noelle.pdg.inst.id !717 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %238, i8* %240, align 2, !noelle.pdg.inst.id !723 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %214, i8* %215, align 1, !noelle.pdg.inst.id !1238 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %214, i8* %215, align 1, !noelle.pdg.inst.id !1238 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         %76 = load i8, i8* %75, align 2, !noelle.pdg.inst.id !755 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %230, i8* %231, align 1, !noelle.pdg.inst.id !1246 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i8 %230, i8* %231, align 1, !noelle.pdg.inst.id !1246 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         store i16 %234, i16* %236, align 2, !noelle.pdg.inst.id !721 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
DOALL:         %90 = load i16, i16* %88, align 2, !noelle.pdg.inst.id !62 --->   %244 = call i32 (i32, i8*, i32, ...) bitcast (i32 (...)* @write to i32 (i32, i8*, i32, ...)*)(i32 1, i8* %243, i32 %242), !noelle.pdg.inst.id !47 via memory
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc rawcaudio.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/rawcaudio'
