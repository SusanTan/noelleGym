make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/toast'
./runEnablers.sh toast toast.bc large "-lm -lstdc++ -lpthread -ltermcap" -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/toast /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/toast
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/toast

opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs toast.bc -o baseline.bc
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/toast /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/toast
WARNING: ./runme_toast.sh not found. Going up one dir.
Running: ./baseline_prof -fps -c data/large.au > output_large.encode.gsm in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/MiBench/telecomm/gsm
--------------------------------------------------------------------------------------
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/toast
DONE
opt -pgo-test-profile-file=/tmp/tmp.EDyQprngUb -block-freq -pgo-instr-use baseline.bc -o baseline_pre.bc
opt --strip-debug --strip-debug-declare baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.jlNzwzd0zi (.ll version is /tmp/tmp.FxVijX2bkJ)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.Bz2eLqN9d1 (.ll version is /tmp/tmp.0Yo6XcwgGL)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.jlNzwzd0zi -o /tmp/tmp.Bz2eLqN9d1
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.jlNzwzd0zi -o /tmp/tmp.Bz2eLqN9d1
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.jlNzwzd0zi -o /tmp/tmp.Bz2eLqN9d1
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.jlNzwzd0zi -o /tmp/tmp.Bz2eLqN9d1
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       main
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       parse_argv0
DeadFunctionEliminator:       getopt
DeadFunctionEliminator:       getchar
DeadFunctionEliminator:       getc
DeadFunctionEliminator:       endname
DeadFunctionEliminator:       strlen
DeadFunctionEliminator:       Transformation_to_Log_Area_Ratios
DeadFunctionEliminator:       Quantization_and_coding
DeadFunctionEliminator:       Gsm_Preprocess
DeadFunctionEliminator:       Gsm_RPE_Encoding
DeadFunctionEliminator:       Weighting_filter
DeadFunctionEliminator:       RPE_grid_selection
DeadFunctionEliminator:       APCM_quantization
DeadFunctionEliminator:       APCM_inverse_quantization
DeadFunctionEliminator:       strrchr
DeadFunctionEliminator:       Coefficients_13_26
DeadFunctionEliminator:       Coefficients_27_39
DeadFunctionEliminator:       Coefficients_40_159
DeadFunctionEliminator:       Gsm_Short_Term_Synthesis_Filter
DeadFunctionEliminator:       Short_term_synthesis_filtering
DeadFunctionEliminator:       gsm_add
DeadFunctionEliminator:       gsm_sub
DeadFunctionEliminator:       gsm_mult
DeadFunctionEliminator:       plainname
DeadFunctionEliminator:       length_okay
DeadFunctionEliminator:       open
DeadFunctionEliminator:       fdopen
DeadFunctionEliminator:       ok_to_replace
DeadFunctionEliminator:       fopen
DeadFunctionEliminator:       close
DeadFunctionEliminator:       isatty
DeadFunctionEliminator:       RPE_grid_positioning
DeadFunctionEliminator:       APCM_quantization_xmaxc_to_exp_mant
DeadFunctionEliminator:       Gsm_RPE_Decoding
DeadFunctionEliminator:       Gsm_Short_Term_Analysis_Filter
DeadFunctionEliminator:       Decoding_of_the_coded_Log_Area_Ratios
DeadFunctionEliminator:       Coefficients_0_12
DeadFunctionEliminator:       LARp_to_rp
DeadFunctionEliminator:       Short_term_analysis_filtering
DeadFunctionEliminator:       set_format
DeadFunctionEliminator:       version
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       help
DeadFunctionEliminator:       fprintf
DeadFunctionEliminator:       onintr
DeadFunctionEliminator:       catch_signals
DeadFunctionEliminator:       process
DeadFunctionEliminator:       codename
DeadFunctionEliminator:       open_input
DeadFunctionEliminator:       open_output
DeadFunctionEliminator:       process_decode
DeadFunctionEliminator:       process_encode
DeadFunctionEliminator:       fflush
DeadFunctionEliminator:       ferror
DeadFunctionEliminator:       perror
DeadFunctionEliminator:       update_times
DeadFunctionEliminator:       update_mode
DeadFunctionEliminator:       update_own
DeadFunctionEliminator:       fclose
DeadFunctionEliminator:       free
DeadFunctionEliminator:       unlink
DeadFunctionEliminator:       __errno_location
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       fileno
DeadFunctionEliminator:       fchown
DeadFunctionEliminator:       fchmod
DeadFunctionEliminator:       utime
DeadFunctionEliminator:       llvm.memset.p0i8.i64
DeadFunctionEliminator:       fwrite
DeadFunctionEliminator:       fread
DeadFunctionEliminator:       normalname
DeadFunctionEliminator:       emalloc
DeadFunctionEliminator:       strcpy
DeadFunctionEliminator:       suffix
DeadFunctionEliminator:       strcat
DeadFunctionEliminator:       malloc
DeadFunctionEliminator:       okay_as_input
DeadFunctionEliminator:       grok_format
DeadFunctionEliminator:       prepare_io
DeadFunctionEliminator:       fstat
DeadFunctionEliminator:       __fxstat
DeadFunctionEliminator:       signal
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       strncmp
DeadFunctionEliminator:       strcmp
DeadFunctionEliminator:       linear_input
DeadFunctionEliminator:       linear_output
DeadFunctionEliminator:       ulaw_input
DeadFunctionEliminator:       fgetc
DeadFunctionEliminator:       alaw_input
DeadFunctionEliminator:       audio_init_input
DeadFunctionEliminator:       get_u32
DeadFunctionEliminator:       fseek
DeadFunctionEliminator:       gsm_destroy
DeadFunctionEliminator:       gsm_decode
DeadFunctionEliminator:       gsm_encode
DeadFunctionEliminator:       gsm_create
DeadFunctionEliminator:       gsm_option
DeadFunctionEliminator:       Gsm_Coder
DeadFunctionEliminator:       llvm.memcpy.p0i8.p0i8.i64
DeadFunctionEliminator:       Gsm_Decoder
DeadFunctionEliminator:       Postprocessing
DeadFunctionEliminator:       Gsm_Long_Term_Predictor
DeadFunctionEliminator:       __assert_fail
DeadFunctionEliminator:       Calculation_of_the_LTP_parameters
DeadFunctionEliminator:       Long_term_analysis_filtering
DeadFunctionEliminator:       Gsm_Long_Term_Synthesis_Filtering
DeadFunctionEliminator:       Gsm_LPC_Analysis
DeadFunctionEliminator:       Autocorrelation
DeadFunctionEliminator:       Reflection_coefficients
DeadFunctionEliminator:       gsm_L_mult
DeadFunctionEliminator:       gsm_norm
DeadFunctionEliminator:       gsm_asl
DeadFunctionEliminator:       gsm_asr
DeadFunctionEliminator:       gsm_div
DeadFunctionEliminator:       putchar
DeadFunctionEliminator:       puts
DeadFunctionEliminator:       bcmp
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (2.028268e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %5 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0" (1.398542e-07%)
Noelle:     Loop "  %37 = icmp eq i32 %.01, 0" (3.161416e+01%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (1.838865e+01%)
Noelle:     Loop "  %15 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32" (7.850593e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (1.543109e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (4.494980e-02%)
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40" (3.325305e-02%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40" (2.575416e-02%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121" (1.088713e+00%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40" (2.794033e-02%)
Noelle:     Loop "  %457 = trunc i64 %indvars.iv to i16" (2.524316e-03%)
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (6.657156e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (6.419877e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Function "Autocorrelation"
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 160" (3.322993e-02%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 160" (3.833108e-06%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 160" (1.034939e-04%)
Noelle:     Loop "  %indvars.iv.next50 = add nsw i64 %indvars.iv49, -1" (8.931307e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (1.197328e-01%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.133076e-03%)
Noelle:     Loop "  %263 = icmp eq i32 %.7, 0" (9.913451e-05%)
Noelle:  Function "Weighting_filter"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (1.362358e-01%)
Noelle:  Function "Gsm_Preprocess"
Noelle:     Loop "  %12 = add nsw i32 %.0, -1" (1.274488e-01%)
Noelle:  Function "Long_term_analysis_filtering"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 40" (1.357710e-03%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 40" (1.222352e-02%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 40" (4.246097e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (3.564166e-03%)
Noelle:  Function "Reflection_coefficients"
Noelle:     Loop "  %exitcond52 = icmp eq i64 %indvars.iv50, 9" (1.475988e-03%)
Noelle:     Loop "  %exitcond49 = icmp eq i64 %indvars.iv47, 8" (8.776142e-04%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 9" (1.116964e-03%)
Noelle:     Loop "  br i1 true, label %48, label %..loopexit17_crit_edge, !prof !42" (4.399459e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv, %indvars.iv42" (1.517209e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.4, 9" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp eq i32 %.02, 0" (2.252388e-06%)
Noelle:  Function "APCM_quantization"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 13" (1.095250e-02%)
Noelle:     Loop "  %exitcond18 = icmp eq i32 %.14, 6" (6.779989e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (1.402348e-02%)
Noelle:  Function "APCM_inverse_quantization"
Noelle:     Loop "  %22 = add nsw i32 %.01, -1" (2.943332e-02%)
Noelle:  Function "gsm_div"
Noelle:     Loop "  %14 = icmp eq i32 %.01, 0" (2.286522e-02%)
Noelle:  Function "RPE_grid_selection"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (7.784900e-03%)
Noelle:  Function "RPE_grid_positioning"
Noelle:     Loop "  %26 = add i16 %.0, 1" (9.142634e-04%)
Noelle:  Function "LARp_to_rp"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 9" (1.028301e-02%)
Noelle:  Function "gsm_asr"
Noelle:  Function "Coefficients_0_12"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (3.812468e-03%)
Noelle:  Function "Coefficients_27_39"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (3.812468e-03%)
Noelle:  Function "Quantization_and_coding"
Noelle:  Function "gsm_norm"
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (2.805934e-03%)
Noelle:  Function "Coefficients_13_26"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (2.532759e-03%)
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:     Loop "  %11 = icmp slt i16 %.0, 8" (3.734621e-04%)
Noelle:  Function "gsm_mult"
Noelle:  Function "Coefficients_40_159"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (1.239719e-03%)
Noelle:  Function "gsm_sub"
Noelle:  Function "gsm_asl"
Noelle:  Function "gsm_add"
Noelle:  Function "process"
Noelle:  Function "audio_init_input"
Noelle:  Function "get_u32"
Noelle:  Function "open_input"
Noelle:  Function "parse_argv0"
Noelle:  Function "okay_as_input"
Noelle:  Function "gsm_option"
Noelle:  Function "prepare_io"
Noelle:  Function "open_output"
Noelle:  Function "endname"
Noelle:  Function "gsm_create"
Noelle:  Function "set_format"
Noelle:  Function "gsm_destroy"
Noelle:  Function "catch_signals"
Noelle:  Function "emalloc"
Noelle:  Function "ulaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "alaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (0.000000e+00%)
Noelle:  Function "linear_input"
Noelle:  Function "alaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "linear_output"
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 40" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 120" (0.000000e+00%)
Noelle:  Function "gsm_L_asr"
Noelle:  Function "gsm_L_asl"
Noelle:  Function "gsm_L_sub"
Noelle:  Function "gsm_L_add"
Noelle:  Function "gsm_L_mult"
Noelle:  Function "gsm_abs"
Noelle:  Function "Postprocessing"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (0.000000e+00%)
Noelle:  Function "Gsm_Decoder"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (0.000000e+00%)
Noelle:  Function "gsm_decode"
Noelle:  Function "put_u32"
Noelle:  Function "audio_init_output"
Noelle:  Function "length_okay"
Noelle:  Function "onintr"
Noelle:  Function "help"
Noelle:  Function "version"
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Function "ok_to_replace"
Noelle:     Loop "  %17 = icmp ne i32 %.01, 10" (0.000000e+00%)
Noelle:  Function "codename"
Noelle:  Function "plainname"
Noelle:  Function "gsm_mult_r"
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:     Loop "  %8 = add nsw i32 %.0, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Function "getchar"
Noelle:  Function "generic_init"
Noelle:  Function "grok_format"
Noelle:     Loop "  %7 = load %struct.fmtdesc*, %struct.fmtdesc** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "suffix"
Noelle:  Function "normalname"
Noelle:  Function "fstat"
Noelle:  Function "update_own"
Noelle:  Function "update_mode"
Noelle:  Function "update_times"
Noelle:  Function "process_decode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (0.000000e+00%)
Noelle:     Loop "  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @in, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (2.028268e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %5 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0" (1.398542e-07%)
Noelle:     Loop "  %37 = icmp eq i32 %.01, 0" (3.161416e+01%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (1.838865e+01%)
Noelle:     Loop "  %15 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32" (7.850593e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (1.543109e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (4.494980e-02%)
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40" (3.325305e-02%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40" (2.575416e-02%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121" (1.088713e+00%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40" (2.794033e-02%)
Noelle:     Loop "  %457 = trunc i64 %indvars.iv to i16" (2.524316e-03%)
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (6.657156e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (6.419877e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Function "Autocorrelation"
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 160" (3.322993e-02%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 160" (3.833108e-06%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 160" (1.034939e-04%)
Noelle:     Loop "  %indvars.iv.next50 = add nsw i64 %indvars.iv49, -1" (8.931307e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (1.197328e-01%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.133076e-03%)
Noelle:     Loop "  %263 = icmp eq i32 %.7, 0" (9.913451e-05%)
Noelle:  Function "Weighting_filter"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (1.362358e-01%)
Noelle:  Function "Gsm_Preprocess"
Noelle:     Loop "  %12 = add nsw i32 %.0, -1" (1.274488e-01%)
Noelle:  Function "Long_term_analysis_filtering"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 40" (1.357710e-03%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 40" (1.222352e-02%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 40" (4.246097e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (3.564166e-03%)
Noelle:  Function "Reflection_coefficients"
Noelle:     Loop "  %exitcond52 = icmp eq i64 %indvars.iv50, 9" (1.475988e-03%)
Noelle:     Loop "  %exitcond49 = icmp eq i64 %indvars.iv47, 8" (8.776142e-04%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 9" (1.116964e-03%)
Noelle:     Loop "  br i1 true, label %48, label %..loopexit17_crit_edge, !prof !42" (4.399459e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv, %indvars.iv42" (1.517209e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.4, 9" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp eq i32 %.02, 0" (2.252388e-06%)
Noelle:  Function "APCM_quantization"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 13" (1.095250e-02%)
Noelle:     Loop "  %exitcond18 = icmp eq i32 %.14, 6" (6.779989e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (1.402348e-02%)
Noelle:  Function "APCM_inverse_quantization"
Noelle:     Loop "  %22 = add nsw i32 %.01, -1" (2.943332e-02%)
Noelle:  Function "gsm_div"
Noelle:     Loop "  %14 = icmp eq i32 %.01, 0" (2.286522e-02%)
Noelle:  Function "RPE_grid_selection"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (7.784900e-03%)
Noelle:  Function "RPE_grid_positioning"
Noelle:     Loop "  %26 = add i16 %.0, 1" (9.142634e-04%)
Noelle:  Function "LARp_to_rp"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 9" (1.028301e-02%)
Noelle:  Function "gsm_asr"
Noelle:  Function "Coefficients_0_12"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (3.812468e-03%)
Noelle:  Function "Coefficients_27_39"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (3.812468e-03%)
Noelle:  Function "Quantization_and_coding"
Noelle:  Function "gsm_norm"
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (2.805934e-03%)
Noelle:  Function "Coefficients_13_26"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (2.532759e-03%)
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:     Loop "  %11 = icmp slt i16 %.0, 8" (3.734621e-04%)
Noelle:  Function "gsm_mult"
Noelle:  Function "Coefficients_40_159"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (1.239719e-03%)
Noelle:  Function "gsm_sub"
Noelle:  Function "gsm_asl"
Noelle:  Function "gsm_add"
Noelle:  Function "process"
Noelle:  Function "audio_init_input"
Noelle:  Function "get_u32"
Noelle:  Function "open_input"
Noelle:  Function "parse_argv0"
Noelle:  Function "okay_as_input"
Noelle:  Function "gsm_option"
Noelle:  Function "prepare_io"
Noelle:  Function "open_output"
Noelle:  Function "endname"
Noelle:  Function "gsm_create"
Noelle:  Function "set_format"
Noelle:  Function "gsm_destroy"
Noelle:  Function "catch_signals"
Noelle:  Function "emalloc"
Noelle:  Function "ulaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "alaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (0.000000e+00%)
Noelle:  Function "linear_input"
Noelle:  Function "alaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "linear_output"
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 40" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 120" (0.000000e+00%)
Noelle:  Function "gsm_L_asr"
Noelle:  Function "gsm_L_asl"
Noelle:  Function "gsm_L_sub"
Noelle:  Function "gsm_L_add"
Noelle:  Function "gsm_L_mult"
Noelle:  Function "gsm_abs"
Noelle:  Function "Postprocessing"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (0.000000e+00%)
Noelle:  Function "Gsm_Decoder"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (0.000000e+00%)
Noelle:  Function "gsm_decode"
Noelle:  Function "put_u32"
Noelle:  Function "audio_init_output"
Noelle:  Function "length_okay"
Noelle:  Function "onintr"
Noelle:  Function "help"
Noelle:  Function "version"
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Function "ok_to_replace"
Noelle:     Loop "  %17 = icmp ne i32 %.01, 10" (0.000000e+00%)
Noelle:  Function "codename"
Noelle:  Function "plainname"
Noelle:  Function "gsm_mult_r"
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:     Loop "  %8 = add nsw i32 %.0, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Function "getchar"
Noelle:  Function "generic_init"
Noelle:  Function "grok_format"
Noelle:     Loop "  %7 = load %struct.fmtdesc*, %struct.fmtdesc** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "suffix"
Noelle:  Function "normalname"
Noelle:  Function "fstat"
Noelle:  Function "update_own"
Noelle:  Function "update_mode"
Noelle:  Function "update_times"
Noelle:  Function "process_decode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (0.000000e+00%)
Noelle:     Loop "  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @in, align 8, !tbaa !30" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-inline baseline_pre.bc "-noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier"
NOELLE: Inliner: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.sDwqoVcfRx (.ll version is /tmp/tmp.ebWEcCt4SX)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.Rw17S9jfOy (.ll version is /tmp/tmp.cJSxYY1T0l)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.sDwqoVcfRx -o /tmp/tmp.Rw17S9jfOy
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.sDwqoVcfRx -o /tmp/tmp.Rw17S9jfOy
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.sDwqoVcfRx -o /tmp/tmp.Rw17S9jfOy
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.sDwqoVcfRx -o /tmp/tmp.Rw17S9jfOy
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.sDwqoVcfRx -o /tmp/tmp.Rw17S9jfOy
Inliner: Start
Inliner:   Number of program instructions = 5802
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: main (126 instructions. The inlining will add 195 instructions),   %40 = tail call fastcc i32 @process(i8* %39)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (2.028346e+01%)
Noelle:  Function "main"
Noelle:     Loop "  %4 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0" (1.306582e-07%)
Noelle:     Loop "  %35 = icmp eq i32 %.01, 0" (3.161537e+01%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (1.833878e+01%)
Noelle:     Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32" (7.800323e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (1.540150e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (4.278529e-02%)
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40" (3.325432e-02%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40" (2.575515e-02%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121" (1.088755e+00%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40" (2.794140e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (2.409428e-03%)
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (6.656346e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (6.419790e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Function "Autocorrelation"
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 160" (3.323121e-02%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 160" (1.034979e-04%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 160" (3.833255e-06%)
Noelle:     Loop "  %indvars.iv.next50 = add nsw i64 %indvars.iv49, -1" (8.931650e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (1.197374e-01%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.133120e-03%)
Noelle:     Loop "  %246 = icmp eq i32 %.7, 0" (9.913832e-05%)
Noelle:  Function "Weighting_filter"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (1.362410e-01%)
Noelle:  Function "Gsm_Preprocess"
Noelle:     Loop "  %12 = add nsw i32 %.0, -1" (1.274537e-01%)
Noelle:  Function "Long_term_analysis_filtering"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 40" (1.357762e-03%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 40" (1.222399e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (3.564303e-03%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 40" (4.246261e-02%)
Noelle:  Function "Reflection_coefficients"
Noelle:     Loop "  %exitcond52 = icmp eq i64 %indvars.iv50, 9" (1.476044e-03%)
Noelle:     Loop "  %exitcond49 = icmp eq i64 %indvars.iv47, 8" (8.776480e-04%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 9" (1.117007e-03%)
Noelle:     Loop "  %45 = load i16, i16* %42, align 2, !tbaa !37" (4.388990e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv, %indvars.iv42" (1.517267e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.4, 9" (0.000000e+00%)
Noelle:     Loop "  %11 = icmp eq i32 %.02, 0" (2.252474e-06%)
Noelle:  Function "APCM_quantization"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 13" (1.095292e-02%)
Noelle:     Loop "  %exitcond18 = icmp eq i32 %.14, 6" (6.452118e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (1.402402e-02%)
Noelle:  Function "APCM_inverse_quantization"
Noelle:     Loop "  %22 = add nsw i32 %.01, -1" (2.943446e-02%)
Noelle:  Function "gsm_div"
Noelle:     Loop "  %14 = icmp eq i32 %.01, 0" (2.286610e-02%)
Noelle:  Function "RPE_grid_selection"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (7.785200e-03%)
Noelle:  Function "RPE_grid_positioning"
Noelle:     Loop "  %19 = add i16 %.0, 1" (9.142985e-04%)
Noelle:  Function "LARp_to_rp"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 9" (9.846000e-03%)
Noelle:  Function "gsm_asr"
Noelle:  Function "Coefficients_0_12"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (3.812615e-03%)
Noelle:  Function "Coefficients_27_39"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (3.812615e-03%)
Noelle:  Function "Quantization_and_coding"
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (2.806042e-03%)
Noelle:  Function "gsm_norm"
Noelle:  Function "Coefficients_13_26"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (2.532856e-03%)
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:     Loop "  %10 = icmp slt i16 %.0, 8" (3.734765e-04%)
Noelle:  Function "gsm_mult"
Noelle:  Function "Coefficients_40_159"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (1.239766e-03%)
Noelle:  Function "gsm_sub"
Noelle:  Function "gsm_asl"
Noelle:  Function "gsm_add"
Noelle:  Function "process"
Noelle:  Function "audio_init_input"
Noelle:  Function "get_u32"
Noelle:  Function "open_input"
Noelle:  Function "parse_argv0"
Noelle:  Function "okay_as_input"
Noelle:  Function "gsm_option"
Noelle:  Function "prepare_io"
Noelle:  Function "endname"
Noelle:  Function "open_output"
Noelle:  Function "gsm_create"
Noelle:  Function "set_format"
Noelle:  Function "gsm_destroy"
Noelle:  Function "catch_signals"
Noelle:  Function "emalloc"
Noelle:  Function "ulaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "alaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (0.000000e+00%)
Noelle:  Function "linear_input"
Noelle:  Function "alaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "linear_output"
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 40" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 120" (0.000000e+00%)
Noelle:  Function "gsm_L_asr"
Noelle:  Function "gsm_L_asl"
Noelle:  Function "gsm_L_sub"
Noelle:  Function "gsm_L_add"
Noelle:  Function "gsm_L_mult"
Noelle:  Function "gsm_abs"
Noelle:  Function "Postprocessing"
Noelle:     Loop "  %6 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "Gsm_Decoder"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (0.000000e+00%)
Noelle:  Function "gsm_decode"
Noelle:  Function "put_u32"
Noelle:  Function "audio_init_output"
Noelle:  Function "length_okay"
Noelle:  Function "onintr"
Noelle:  Function "help"
Noelle:  Function "version"
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Function "ok_to_replace"
Noelle:     Loop "  br label %NodeBlock" (0.000000e+00%)
Noelle:  Function "codename"
Noelle:  Function "plainname"
Noelle:  Function "gsm_mult_r"
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:     Loop "  %8 = add nsw i32 %.0, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Function "getchar"
Noelle:  Function "generic_init"
Noelle:  Function "grok_format"
Noelle:     Loop "  %7 = load %struct.fmtdesc*, %struct.fmtdesc** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "suffix"
Noelle:  Function "normalname"
Noelle:  Function "fstat"
Noelle:  Function "update_own"
Noelle:  Function "update_mode"
Noelle:  Function "update_times"
Noelle:  Function "process_decode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (0.000000e+00%)
Noelle:     Loop "  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @in, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %4 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0" (4.066453e-08%)
Noelle:     Loop "  %35 = icmp eq i32 %.01, 0" (1.210872e+09%)
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (6.312784e+00%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (5.707546e+00%)
Noelle:     Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32" (2.427681e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (4.793382e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (1.331599e-02%)
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40" (1.034968e-02%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40" (8.015729e-03%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121" (3.388512e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40" (8.696153e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (7.498821e-04%)
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (2.071643e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.998020e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Function "Autocorrelation"
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 160" (1.034249e-02%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 160" (3.221147e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 160" (1.193017e-06%)
Noelle:     Loop "  %indvars.iv.next50 = add nsw i64 %indvars.iv49, -1" (2.779782e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (3.726567e-02%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (3.526589e-04%)
Noelle:     Loop "  %246 = icmp eq i32 %.7, 0" (3.085464e-05%)
Noelle:  Function "Weighting_filter"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (4.240204e-02%)
Noelle:  Function "Gsm_Preprocess"
Noelle:     Loop "  %12 = add nsw i32 %.0, -1" (3.966720e-02%)
Noelle:  Function "Long_term_analysis_filtering"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 40" (4.225738e-04%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 40" (3.804451e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (1.109312e-03%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 40" (1.321556e-02%)
Noelle:  Function "Reflection_coefficients"
Noelle:     Loop "  %exitcond52 = icmp eq i64 %indvars.iv50, 9" (4.593867e-04%)
Noelle:     Loop "  %exitcond49 = icmp eq i64 %indvars.iv47, 8" (2.731488e-04%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 9" (3.476440e-04%)
Noelle:     Loop "  %45 = load i16, i16* %42, align 2, !tbaa !37" (1.365978e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv, %indvars.iv42" (4.722164e-03%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.4, 9" (0.000000e+00%)
Noelle:     Loop "  %11 = icmp eq i32 %.02, 0" (7.010337e-07%)
Noelle:  Function "APCM_quantization"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 13" (3.408859e-03%)
Noelle:     Loop "  %exitcond18 = icmp eq i32 %.14, 6" (2.008081e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (4.364672e-03%)
Noelle:  Function "APCM_inverse_quantization"
Noelle:     Loop "  %22 = add nsw i32 %.01, -1" (9.160833e-03%)
Noelle:  Function "gsm_div"
Noelle:     Loop "  %14 = icmp eq i32 %.01, 0" (7.116577e-03%)
Noelle:  Function "RPE_grid_selection"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (2.422974e-03%)
Noelle:  Function "RPE_grid_positioning"
Noelle:     Loop "  %19 = add i16 %.0, 1" (2.845555e-04%)
Noelle:  Function "LARp_to_rp"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 9" (3.064353e-03%)
Noelle:  Function "gsm_asr"
Noelle:  Function "Coefficients_0_12"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (1.186593e-03%)
Noelle:  Function "Coefficients_27_39"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (1.186593e-03%)
Noelle:  Function "Quantization_and_coding"
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (8.733195e-04%)
Noelle:  Function "gsm_norm"
Noelle:  Function "Coefficients_13_26"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (7.882963e-04%)
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:     Loop "  %10 = icmp slt i16 %.0, 8" (1.162364e-04%)
Noelle:  Function "gsm_mult"
Noelle:  Function "Coefficients_40_159"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (3.858503e-04%)
Noelle:  Function "gsm_sub"
Noelle:  Function "gsm_asl"
Noelle:  Function "gsm_add"
Noelle:  Function "process"
Noelle:  Function "audio_init_input"
Noelle:  Function "get_u32"
Noelle:  Function "open_input"
Noelle:  Function "parse_argv0"
Noelle:  Function "okay_as_input"
Noelle:  Function "gsm_option"
Noelle:  Function "prepare_io"
Noelle:  Function "endname"
Noelle:  Function "open_output"
Noelle:  Function "gsm_create"
Noelle:  Function "set_format"
Noelle:  Function "gsm_destroy"
Noelle:  Function "catch_signals"
Noelle:  Function "emalloc"
Noelle:  Function "ulaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "alaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (0.000000e+00%)
Noelle:  Function "linear_input"
Noelle:  Function "alaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "linear_output"
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 40" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 120" (0.000000e+00%)
Noelle:  Function "gsm_L_asr"
Noelle:  Function "gsm_L_asl"
Noelle:  Function "gsm_L_sub"
Noelle:  Function "gsm_L_add"
Noelle:  Function "gsm_L_mult"
Noelle:  Function "gsm_abs"
Noelle:  Function "Postprocessing"
Noelle:     Loop "  %6 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "Gsm_Decoder"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (0.000000e+00%)
Noelle:  Function "gsm_decode"
Noelle:  Function "put_u32"
Noelle:  Function "audio_init_output"
Noelle:  Function "length_okay"
Noelle:  Function "onintr"
Noelle:  Function "help"
Noelle:  Function "version"
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Function "ok_to_replace"
Noelle:     Loop "  br label %NodeBlock" (0.000000e+00%)
Noelle:  Function "codename"
Noelle:  Function "plainname"
Noelle:  Function "gsm_mult_r"
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:     Loop "  %8 = add nsw i32 %.0, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Function "getchar"
Noelle:  Function "generic_init"
Noelle:  Function "grok_format"
Noelle:     Loop "  %7 = load %struct.fmtdesc*, %struct.fmtdesc** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "suffix"
Noelle:  Function "normalname"
Noelle:  Function "fstat"
Noelle:  Function "update_own"
Noelle:  Function "update_mode"
Noelle:  Function "update_times"
Noelle:  Function "process_decode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (0.000000e+00%)
Noelle:     Loop "  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @in, align 8, !tbaa !30" (0.000000e+00%)
NOELLE: FixedPoint:       There are 158 different instructions and 158 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.Rw17S9jfOy -o /tmp/tmp.Rw17S9jfOy
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.Rw17S9jfOy -o /tmp/tmp.Rw17S9jfOy
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.sDwqoVcfRx -o /tmp/tmp.Rw17S9jfOy
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.sDwqoVcfRx -o /tmp/tmp.Rw17S9jfOy
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.sDwqoVcfRx -o /tmp/tmp.Rw17S9jfOy
Inliner: Start
Inliner:   Number of program instructions = 5995
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: main (319 instructions. The inlining will add 66 instructions),   %40 = tail call fastcc i32 @open_input(i8* %39, %struct.stat* nonnull @instat) #20
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %4 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0" (4.066453e-08%)
Noelle:     Loop "  %35 = icmp eq i32 %.01, 0" (1.210872e+09%)
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (6.312784e+00%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (5.707546e+00%)
Noelle:     Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32" (2.427681e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (4.793382e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (1.331599e-02%)
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40" (1.034968e-02%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40" (8.015729e-03%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121" (3.388512e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40" (8.696153e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (7.498821e-04%)
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (2.071643e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.998020e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Function "Autocorrelation"
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 160" (1.034249e-02%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 160" (3.221147e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 160" (1.193017e-06%)
Noelle:     Loop "  %indvars.iv.next50 = add nsw i64 %indvars.iv49, -1" (2.779782e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (3.726567e-02%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (3.526589e-04%)
Noelle:     Loop "  %246 = icmp eq i32 %.7, 0" (3.085464e-05%)
Noelle:  Function "Weighting_filter"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (4.240204e-02%)
Noelle:  Function "Gsm_Preprocess"
Noelle:     Loop "  %12 = add nsw i32 %.0, -1" (3.966720e-02%)
Noelle:  Function "Long_term_analysis_filtering"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 40" (4.225738e-04%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 40" (3.804451e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (1.109312e-03%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 40" (1.321556e-02%)
Noelle:  Function "Reflection_coefficients"
Noelle:     Loop "  %exitcond52 = icmp eq i64 %indvars.iv50, 9" (4.593867e-04%)
Noelle:     Loop "  %exitcond49 = icmp eq i64 %indvars.iv47, 8" (2.731488e-04%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 9" (3.476440e-04%)
Noelle:     Loop "  %45 = load i16, i16* %42, align 2, !tbaa !37" (1.365978e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv, %indvars.iv42" (4.722164e-03%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.4, 9" (0.000000e+00%)
Noelle:     Loop "  %11 = icmp eq i32 %.02, 0" (7.010337e-07%)
Noelle:  Function "APCM_quantization"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 13" (3.408859e-03%)
Noelle:     Loop "  %exitcond18 = icmp eq i32 %.14, 6" (2.008081e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (4.364672e-03%)
Noelle:  Function "APCM_inverse_quantization"
Noelle:     Loop "  %22 = add nsw i32 %.01, -1" (9.160833e-03%)
Noelle:  Function "gsm_div"
Noelle:     Loop "  %14 = icmp eq i32 %.01, 0" (7.116577e-03%)
Noelle:  Function "RPE_grid_selection"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (2.422974e-03%)
Noelle:  Function "RPE_grid_positioning"
Noelle:     Loop "  %19 = add i16 %.0, 1" (2.845555e-04%)
Noelle:  Function "LARp_to_rp"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 9" (3.064353e-03%)
Noelle:  Function "gsm_asr"
Noelle:  Function "Coefficients_0_12"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (1.186593e-03%)
Noelle:  Function "Coefficients_27_39"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (1.186593e-03%)
Noelle:  Function "Quantization_and_coding"
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (8.733195e-04%)
Noelle:  Function "gsm_norm"
Noelle:  Function "Coefficients_13_26"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (7.882963e-04%)
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:     Loop "  %10 = icmp slt i16 %.0, 8" (1.162364e-04%)
Noelle:  Function "gsm_mult"
Noelle:  Function "Coefficients_40_159"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (3.858503e-04%)
Noelle:  Function "gsm_sub"
Noelle:  Function "gsm_asl"
Noelle:  Function "gsm_add"
Noelle:  Function "process"
Noelle:  Function "audio_init_input"
Noelle:  Function "get_u32"
Noelle:  Function "open_input"
Noelle:  Function "parse_argv0"
Noelle:  Function "okay_as_input"
Noelle:  Function "gsm_option"
Noelle:  Function "prepare_io"
Noelle:  Function "endname"
Noelle:  Function "open_output"
Noelle:  Function "gsm_create"
Noelle:  Function "set_format"
Noelle:  Function "gsm_destroy"
Noelle:  Function "catch_signals"
Noelle:  Function "emalloc"
Noelle:  Function "ulaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "alaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (0.000000e+00%)
Noelle:  Function "linear_input"
Noelle:  Function "alaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "linear_output"
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 40" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 120" (0.000000e+00%)
Noelle:  Function "gsm_L_asr"
Noelle:  Function "gsm_L_asl"
Noelle:  Function "gsm_L_sub"
Noelle:  Function "gsm_L_add"
Noelle:  Function "gsm_L_mult"
Noelle:  Function "gsm_abs"
Noelle:  Function "Postprocessing"
Noelle:     Loop "  %6 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "Gsm_Decoder"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (0.000000e+00%)
Noelle:  Function "gsm_decode"
Noelle:  Function "put_u32"
Noelle:  Function "audio_init_output"
Noelle:  Function "length_okay"
Noelle:  Function "onintr"
Noelle:  Function "help"
Noelle:  Function "version"
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Function "ok_to_replace"
Noelle:     Loop "  br label %NodeBlock" (0.000000e+00%)
Noelle:  Function "codename"
Noelle:  Function "plainname"
Noelle:  Function "gsm_mult_r"
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:     Loop "  %8 = add nsw i32 %.0, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Function "getchar"
Noelle:  Function "generic_init"
Noelle:  Function "grok_format"
Noelle:     Loop "  %7 = load %struct.fmtdesc*, %struct.fmtdesc** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "suffix"
Noelle:  Function "normalname"
Noelle:  Function "fstat"
Noelle:  Function "update_own"
Noelle:  Function "update_mode"
Noelle:  Function "update_times"
Noelle:  Function "process_decode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (0.000000e+00%)
Noelle:     Loop "  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @in, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %4 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0" (2.818481e-08%)
Noelle:     Loop "  %35 = icmp eq i32 %.01, 0" (8.392619e+08%)
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (4.375425e+00%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (3.955932e+00%)
Noelle:     Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32" (1.682639e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (3.322319e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (9.229385e-03%)
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40" (7.173423e-03%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40" (5.555745e-03%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121" (2.348597e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40" (6.027351e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (5.197474e-04%)
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (1.435867e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.384839e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Function "Autocorrelation"
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 160" (7.168437e-03%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 160" (2.232594e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 160" (8.268868e-07%)
Noelle:     Loop "  %indvars.iv.next50 = add nsw i64 %indvars.iv49, -1" (1.926682e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (2.582904e-02%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (2.444298e-04%)
Noelle:     Loop "  %246 = icmp eq i32 %.7, 0" (2.138552e-05%)
Noelle:  Function "Weighting_filter"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (2.938909e-02%)
Noelle:  Function "Gsm_Preprocess"
Noelle:     Loop "  %12 = add nsw i32 %.0, -1" (2.749356e-02%)
Noelle:  Function "Long_term_analysis_filtering"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 40" (2.928882e-04%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 40" (2.636886e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (7.688701e-04%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 40" (9.159778e-03%)
Noelle:  Function "Reflection_coefficients"
Noelle:     Loop "  %exitcond52 = icmp eq i64 %indvars.iv50, 9" (3.184034e-04%)
Noelle:     Loop "  %exitcond49 = icmp eq i64 %indvars.iv47, 8" (1.893209e-04%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 9" (2.409539e-04%)
Noelle:     Loop "  %45 = load i16, i16* %42, align 2, !tbaa !37" (9.467666e-03%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv, %indvars.iv42" (3.272958e-03%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.4, 9" (0.000000e+00%)
Noelle:     Loop "  %11 = icmp eq i32 %.02, 0" (4.858903e-07%)
Noelle:  Function "APCM_quantization"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 13" (2.362699e-03%)
Noelle:     Loop "  %exitcond18 = icmp eq i32 %.14, 6" (1.391812e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (3.025178e-03%)
Noelle:  Function "APCM_inverse_quantization"
Noelle:     Loop "  %22 = add nsw i32 %.01, -1" (6.349424e-03%)
Noelle:  Function "gsm_div"
Noelle:     Loop "  %14 = icmp eq i32 %.01, 0" (4.932538e-03%)
Noelle:  Function "RPE_grid_selection"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (1.679376e-03%)
Noelle:  Function "RPE_grid_positioning"
Noelle:     Loop "  %19 = add i16 %.0, 1" (1.972270e-04%)
Noelle:  Function "LARp_to_rp"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 9" (2.123920e-03%)
Noelle:  Function "gsm_asr"
Noelle:  Function "Coefficients_0_12"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.224344e-04%)
Noelle:  Function "Coefficients_27_39"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.224344e-04%)
Noelle:  Function "Quantization_and_coding"
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (6.053026e-04%)
Noelle:  Function "gsm_norm"
Noelle:  Function "Coefficients_13_26"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (5.463725e-04%)
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:     Loop "  %10 = icmp slt i16 %.0, 8" (8.056410e-05%)
Noelle:  Function "gsm_mult"
Noelle:  Function "Coefficients_40_159"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (2.674350e-04%)
Noelle:  Function "gsm_sub"
Noelle:  Function "gsm_asl"
Noelle:  Function "gsm_add"
Noelle:  Function "process"
Noelle:  Function "audio_init_input"
Noelle:  Function "get_u32"
Noelle:  Function "open_input"
Noelle:  Function "parse_argv0"
Noelle:  Function "okay_as_input"
Noelle:  Function "gsm_option"
Noelle:  Function "prepare_io"
Noelle:  Function "endname"
Noelle:  Function "open_output"
Noelle:  Function "gsm_create"
Noelle:  Function "set_format"
Noelle:  Function "gsm_destroy"
Noelle:  Function "catch_signals"
Noelle:  Function "emalloc"
Noelle:  Function "ulaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "alaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (0.000000e+00%)
Noelle:  Function "linear_input"
Noelle:  Function "alaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "linear_output"
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 40" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 120" (0.000000e+00%)
Noelle:  Function "gsm_L_asr"
Noelle:  Function "gsm_L_asl"
Noelle:  Function "gsm_L_sub"
Noelle:  Function "gsm_L_add"
Noelle:  Function "gsm_L_mult"
Noelle:  Function "gsm_abs"
Noelle:  Function "Postprocessing"
Noelle:     Loop "  %6 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "Gsm_Decoder"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (0.000000e+00%)
Noelle:  Function "gsm_decode"
Noelle:  Function "put_u32"
Noelle:  Function "audio_init_output"
Noelle:  Function "length_okay"
Noelle:  Function "onintr"
Noelle:  Function "help"
Noelle:  Function "version"
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Function "ok_to_replace"
Noelle:     Loop "  br label %NodeBlock" (0.000000e+00%)
Noelle:  Function "codename"
Noelle:  Function "plainname"
Noelle:  Function "gsm_mult_r"
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:     Loop "  %8 = add nsw i32 %.0, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Function "getchar"
Noelle:  Function "generic_init"
Noelle:  Function "grok_format"
Noelle:     Loop "  %7 = load %struct.fmtdesc*, %struct.fmtdesc** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "suffix"
Noelle:  Function "normalname"
Noelle:  Function "fstat"
Noelle:  Function "update_own"
Noelle:  Function "update_mode"
Noelle:  Function "update_times"
Noelle:  Function "process_decode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (0.000000e+00%)
Noelle:     Loop "  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @in, align 8, !tbaa !30" (0.000000e+00%)
NOELLE: FixedPoint:       There are 50 different instructions and 50 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.Rw17S9jfOy -o /tmp/tmp.Rw17S9jfOy
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.Rw17S9jfOy -o /tmp/tmp.Rw17S9jfOy
NOELLE: FixedPoint:     Invocation 2
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.sDwqoVcfRx -o /tmp/tmp.Rw17S9jfOy
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.sDwqoVcfRx -o /tmp/tmp.Rw17S9jfOy
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.sDwqoVcfRx -o /tmp/tmp.Rw17S9jfOy
Inliner: Start
Inliner:   Number of program instructions = 6059
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   The loop   %35 = icmp eq i32 %.01, 0 has too many function calls involved in loop-carried data dependences (there are 10)
Inliner:   No remaining calls need to be inlined due to loop-carried data dependences
Inliner:   The code has not been modified
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %4 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0" (2.818481e-08%)
Noelle:     Loop "  %35 = icmp eq i32 %.01, 0" (8.392619e+08%)
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (4.375425e+00%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (3.955932e+00%)
Noelle:     Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32" (1.682639e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (3.322319e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (9.229385e-03%)
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40" (7.173423e-03%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40" (5.555745e-03%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121" (2.348597e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40" (6.027351e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (5.197474e-04%)
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (1.435867e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.384839e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Function "Autocorrelation"
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 160" (7.168437e-03%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 160" (2.232594e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 160" (8.268868e-07%)
Noelle:     Loop "  %indvars.iv.next50 = add nsw i64 %indvars.iv49, -1" (1.926682e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (2.582904e-02%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (2.444298e-04%)
Noelle:     Loop "  %246 = icmp eq i32 %.7, 0" (2.138552e-05%)
Noelle:  Function "Weighting_filter"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (2.938909e-02%)
Noelle:  Function "Gsm_Preprocess"
Noelle:     Loop "  %12 = add nsw i32 %.0, -1" (2.749356e-02%)
Noelle:  Function "Long_term_analysis_filtering"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 40" (2.928882e-04%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 40" (2.636886e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (7.688701e-04%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 40" (9.159778e-03%)
Noelle:  Function "Reflection_coefficients"
Noelle:     Loop "  %exitcond52 = icmp eq i64 %indvars.iv50, 9" (3.184034e-04%)
Noelle:     Loop "  %exitcond49 = icmp eq i64 %indvars.iv47, 8" (1.893209e-04%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 9" (2.409539e-04%)
Noelle:     Loop "  %45 = load i16, i16* %42, align 2, !tbaa !37" (9.467666e-03%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv, %indvars.iv42" (3.272958e-03%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.4, 9" (0.000000e+00%)
Noelle:     Loop "  %11 = icmp eq i32 %.02, 0" (4.858903e-07%)
Noelle:  Function "APCM_quantization"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 13" (2.362699e-03%)
Noelle:     Loop "  %exitcond18 = icmp eq i32 %.14, 6" (1.391812e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (3.025178e-03%)
Noelle:  Function "APCM_inverse_quantization"
Noelle:     Loop "  %22 = add nsw i32 %.01, -1" (6.349424e-03%)
Noelle:  Function "gsm_div"
Noelle:     Loop "  %14 = icmp eq i32 %.01, 0" (4.932538e-03%)
Noelle:  Function "RPE_grid_selection"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (1.679376e-03%)
Noelle:  Function "RPE_grid_positioning"
Noelle:     Loop "  %19 = add i16 %.0, 1" (1.972270e-04%)
Noelle:  Function "LARp_to_rp"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 9" (2.123920e-03%)
Noelle:  Function "gsm_asr"
Noelle:  Function "Coefficients_0_12"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.224344e-04%)
Noelle:  Function "Coefficients_27_39"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.224344e-04%)
Noelle:  Function "Quantization_and_coding"
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (6.053026e-04%)
Noelle:  Function "gsm_norm"
Noelle:  Function "Coefficients_13_26"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (5.463725e-04%)
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:     Loop "  %10 = icmp slt i16 %.0, 8" (8.056410e-05%)
Noelle:  Function "gsm_mult"
Noelle:  Function "Coefficients_40_159"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (2.674350e-04%)
Noelle:  Function "gsm_sub"
Noelle:  Function "gsm_asl"
Noelle:  Function "gsm_add"
Noelle:  Function "process"
Noelle:  Function "audio_init_input"
Noelle:  Function "get_u32"
Noelle:  Function "open_input"
Noelle:  Function "parse_argv0"
Noelle:  Function "okay_as_input"
Noelle:  Function "gsm_option"
Noelle:  Function "prepare_io"
Noelle:  Function "endname"
Noelle:  Function "open_output"
Noelle:  Function "gsm_create"
Noelle:  Function "set_format"
Noelle:  Function "gsm_destroy"
Noelle:  Function "catch_signals"
Noelle:  Function "emalloc"
Noelle:  Function "ulaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "alaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (0.000000e+00%)
Noelle:  Function "linear_input"
Noelle:  Function "alaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "linear_output"
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 40" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 120" (0.000000e+00%)
Noelle:  Function "gsm_L_asr"
Noelle:  Function "gsm_L_asl"
Noelle:  Function "gsm_L_sub"
Noelle:  Function "gsm_L_add"
Noelle:  Function "gsm_L_mult"
Noelle:  Function "gsm_abs"
Noelle:  Function "Postprocessing"
Noelle:     Loop "  %6 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "Gsm_Decoder"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (0.000000e+00%)
Noelle:  Function "gsm_decode"
Noelle:  Function "put_u32"
Noelle:  Function "audio_init_output"
Noelle:  Function "length_okay"
Noelle:  Function "onintr"
Noelle:  Function "help"
Noelle:  Function "version"
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Function "ok_to_replace"
Noelle:     Loop "  br label %NodeBlock" (0.000000e+00%)
Noelle:  Function "codename"
Noelle:  Function "plainname"
Noelle:  Function "gsm_mult_r"
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:     Loop "  %8 = add nsw i32 %.0, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Function "getchar"
Noelle:  Function "generic_init"
Noelle:  Function "grok_format"
Noelle:     Loop "  %7 = load %struct.fmtdesc*, %struct.fmtdesc** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "suffix"
Noelle:  Function "normalname"
Noelle:  Function "fstat"
Noelle:  Function "update_own"
Noelle:  Function "update_mode"
Noelle:  Function "update_times"
Noelle:  Function "process_decode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (0.000000e+00%)
Noelle:     Loop "  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @in, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %4 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0" (2.818481e-08%)
Noelle:     Loop "  %35 = icmp eq i32 %.01, 0" (8.392619e+08%)
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (4.375425e+00%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (3.955932e+00%)
Noelle:     Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32" (1.682639e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (3.322319e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (9.229385e-03%)
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40" (7.173423e-03%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40" (5.555745e-03%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121" (2.348597e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40" (6.027351e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (5.197474e-04%)
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (1.435867e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.384839e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Function "Autocorrelation"
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 160" (7.168437e-03%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 160" (2.232594e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 160" (8.268868e-07%)
Noelle:     Loop "  %indvars.iv.next50 = add nsw i64 %indvars.iv49, -1" (1.926682e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (2.582904e-02%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (2.444298e-04%)
Noelle:     Loop "  %246 = icmp eq i32 %.7, 0" (2.138552e-05%)
Noelle:  Function "Weighting_filter"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (2.938909e-02%)
Noelle:  Function "Gsm_Preprocess"
Noelle:     Loop "  %12 = add nsw i32 %.0, -1" (2.749356e-02%)
Noelle:  Function "Long_term_analysis_filtering"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 40" (2.928882e-04%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 40" (2.636886e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (7.688701e-04%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 40" (9.159778e-03%)
Noelle:  Function "Reflection_coefficients"
Noelle:     Loop "  %exitcond52 = icmp eq i64 %indvars.iv50, 9" (3.184034e-04%)
Noelle:     Loop "  %exitcond49 = icmp eq i64 %indvars.iv47, 8" (1.893209e-04%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 9" (2.409539e-04%)
Noelle:     Loop "  %45 = load i16, i16* %42, align 2, !tbaa !37" (9.467666e-03%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv, %indvars.iv42" (3.272958e-03%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.4, 9" (0.000000e+00%)
Noelle:     Loop "  %11 = icmp eq i32 %.02, 0" (4.858903e-07%)
Noelle:  Function "APCM_quantization"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 13" (2.362699e-03%)
Noelle:     Loop "  %exitcond18 = icmp eq i32 %.14, 6" (1.391812e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (3.025178e-03%)
Noelle:  Function "APCM_inverse_quantization"
Noelle:     Loop "  %22 = add nsw i32 %.01, -1" (6.349424e-03%)
Noelle:  Function "gsm_div"
Noelle:     Loop "  %14 = icmp eq i32 %.01, 0" (4.932538e-03%)
Noelle:  Function "RPE_grid_selection"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (1.679376e-03%)
Noelle:  Function "RPE_grid_positioning"
Noelle:     Loop "  %19 = add i16 %.0, 1" (1.972270e-04%)
Noelle:  Function "LARp_to_rp"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 9" (2.123920e-03%)
Noelle:  Function "gsm_asr"
Noelle:  Function "Coefficients_0_12"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.224344e-04%)
Noelle:  Function "Coefficients_27_39"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.224344e-04%)
Noelle:  Function "Quantization_and_coding"
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (6.053026e-04%)
Noelle:  Function "gsm_norm"
Noelle:  Function "Coefficients_13_26"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (5.463725e-04%)
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:     Loop "  %10 = icmp slt i16 %.0, 8" (8.056410e-05%)
Noelle:  Function "gsm_mult"
Noelle:  Function "Coefficients_40_159"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (2.674350e-04%)
Noelle:  Function "gsm_sub"
Noelle:  Function "gsm_asl"
Noelle:  Function "gsm_add"
Noelle:  Function "process"
Noelle:  Function "audio_init_input"
Noelle:  Function "get_u32"
Noelle:  Function "open_input"
Noelle:  Function "parse_argv0"
Noelle:  Function "okay_as_input"
Noelle:  Function "gsm_option"
Noelle:  Function "prepare_io"
Noelle:  Function "endname"
Noelle:  Function "open_output"
Noelle:  Function "gsm_create"
Noelle:  Function "set_format"
Noelle:  Function "gsm_destroy"
Noelle:  Function "catch_signals"
Noelle:  Function "emalloc"
Noelle:  Function "ulaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "alaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (0.000000e+00%)
Noelle:  Function "linear_input"
Noelle:  Function "alaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "linear_output"
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 40" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 120" (0.000000e+00%)
Noelle:  Function "gsm_L_asr"
Noelle:  Function "gsm_L_asl"
Noelle:  Function "gsm_L_sub"
Noelle:  Function "gsm_L_add"
Noelle:  Function "gsm_L_mult"
Noelle:  Function "gsm_abs"
Noelle:  Function "Postprocessing"
Noelle:     Loop "  %6 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "Gsm_Decoder"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (0.000000e+00%)
Noelle:  Function "gsm_decode"
Noelle:  Function "put_u32"
Noelle:  Function "audio_init_output"
Noelle:  Function "length_okay"
Noelle:  Function "onintr"
Noelle:  Function "help"
Noelle:  Function "version"
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Function "ok_to_replace"
Noelle:     Loop "  br label %NodeBlock" (0.000000e+00%)
Noelle:  Function "codename"
Noelle:  Function "plainname"
Noelle:  Function "gsm_mult_r"
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:     Loop "  %8 = add nsw i32 %.0, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Function "getchar"
Noelle:  Function "generic_init"
Noelle:  Function "grok_format"
Noelle:     Loop "  %7 = load %struct.fmtdesc*, %struct.fmtdesc** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "suffix"
Noelle:  Function "normalname"
Noelle:  Function "fstat"
Noelle:  Function "update_own"
Noelle:  Function "update_mode"
Noelle:  Function "update_times"
Noelle:  Function "process_decode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (0.000000e+00%)
Noelle:     Loop "  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @in, align 8, !tbaa !30" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: Inliner: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.K4ESeGAcVr (.ll version is /tmp/tmp.eQMpAbL2PD)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.zMbv9XSxJB (.ll version is /tmp/tmp.daoeaL41jk)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.K4ESeGAcVr -o /tmp/tmp.zMbv9XSxJB
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.K4ESeGAcVr -o /tmp/tmp.zMbv9XSxJB
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.K4ESeGAcVr -o /tmp/tmp.zMbv9XSxJB
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.K4ESeGAcVr -o /tmp/tmp.zMbv9XSxJB
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       main
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       parse_argv0
DeadFunctionEliminator:       getopt
DeadFunctionEliminator:       getchar
DeadFunctionEliminator:       getc
DeadFunctionEliminator:       endname
DeadFunctionEliminator:       strlen
DeadFunctionEliminator:       Transformation_to_Log_Area_Ratios
DeadFunctionEliminator:       Quantization_and_coding
DeadFunctionEliminator:       Gsm_Preprocess
DeadFunctionEliminator:       Gsm_RPE_Encoding
DeadFunctionEliminator:       Weighting_filter
DeadFunctionEliminator:       RPE_grid_selection
DeadFunctionEliminator:       APCM_quantization
DeadFunctionEliminator:       APCM_inverse_quantization
DeadFunctionEliminator:       strrchr
DeadFunctionEliminator:       Coefficients_13_26
DeadFunctionEliminator:       Coefficients_27_39
DeadFunctionEliminator:       Coefficients_40_159
DeadFunctionEliminator:       Gsm_Short_Term_Synthesis_Filter
DeadFunctionEliminator:       Short_term_synthesis_filtering
DeadFunctionEliminator:       gsm_add
DeadFunctionEliminator:       gsm_sub
DeadFunctionEliminator:       gsm_mult
DeadFunctionEliminator:       plainname
DeadFunctionEliminator:       length_okay
DeadFunctionEliminator:       open
DeadFunctionEliminator:       fdopen
DeadFunctionEliminator:       ok_to_replace
DeadFunctionEliminator:       fopen
DeadFunctionEliminator:       close
DeadFunctionEliminator:       isatty
DeadFunctionEliminator:       RPE_grid_positioning
DeadFunctionEliminator:       APCM_quantization_xmaxc_to_exp_mant
DeadFunctionEliminator:       Gsm_RPE_Decoding
DeadFunctionEliminator:       Gsm_Short_Term_Analysis_Filter
DeadFunctionEliminator:       Decoding_of_the_coded_Log_Area_Ratios
DeadFunctionEliminator:       Coefficients_0_12
DeadFunctionEliminator:       LARp_to_rp
DeadFunctionEliminator:       Short_term_analysis_filtering
DeadFunctionEliminator:       set_format
DeadFunctionEliminator:       version
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       help
DeadFunctionEliminator:       fprintf
DeadFunctionEliminator:       onintr
DeadFunctionEliminator:       catch_signals
DeadFunctionEliminator:       process
DeadFunctionEliminator:       codename
DeadFunctionEliminator:       open_input
DeadFunctionEliminator:       open_output
DeadFunctionEliminator:       process_decode
DeadFunctionEliminator:       process_encode
DeadFunctionEliminator:       fflush
DeadFunctionEliminator:       ferror
DeadFunctionEliminator:       perror
DeadFunctionEliminator:       update_times
DeadFunctionEliminator:       update_mode
DeadFunctionEliminator:       update_own
DeadFunctionEliminator:       fclose
DeadFunctionEliminator:       free
DeadFunctionEliminator:       unlink
DeadFunctionEliminator:       __errno_location
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       fileno
DeadFunctionEliminator:       fchown
DeadFunctionEliminator:       fchmod
DeadFunctionEliminator:       utime
DeadFunctionEliminator:       llvm.memset.p0i8.i64
DeadFunctionEliminator:       fwrite
DeadFunctionEliminator:       fread
DeadFunctionEliminator:       normalname
DeadFunctionEliminator:       emalloc
DeadFunctionEliminator:       strcpy
DeadFunctionEliminator:       suffix
DeadFunctionEliminator:       strcat
DeadFunctionEliminator:       malloc
DeadFunctionEliminator:       okay_as_input
DeadFunctionEliminator:       grok_format
DeadFunctionEliminator:       prepare_io
DeadFunctionEliminator:       fstat
DeadFunctionEliminator:       __fxstat
DeadFunctionEliminator:       signal
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       strncmp
DeadFunctionEliminator:       strcmp
DeadFunctionEliminator:       linear_input
DeadFunctionEliminator:       linear_output
DeadFunctionEliminator:       ulaw_input
DeadFunctionEliminator:       fgetc
DeadFunctionEliminator:       alaw_input
DeadFunctionEliminator:       audio_init_input
DeadFunctionEliminator:       get_u32
DeadFunctionEliminator:       fseek
DeadFunctionEliminator:       gsm_destroy
DeadFunctionEliminator:       gsm_decode
DeadFunctionEliminator:       gsm_encode
DeadFunctionEliminator:       gsm_create
DeadFunctionEliminator:       gsm_option
DeadFunctionEliminator:       Gsm_Coder
DeadFunctionEliminator:       llvm.memcpy.p0i8.p0i8.i64
DeadFunctionEliminator:       Gsm_Decoder
DeadFunctionEliminator:       Postprocessing
DeadFunctionEliminator:       Gsm_Long_Term_Predictor
DeadFunctionEliminator:       __assert_fail
DeadFunctionEliminator:       Calculation_of_the_LTP_parameters
DeadFunctionEliminator:       Long_term_analysis_filtering
DeadFunctionEliminator:       Gsm_Long_Term_Synthesis_Filtering
DeadFunctionEliminator:       Gsm_LPC_Analysis
DeadFunctionEliminator:       Autocorrelation
DeadFunctionEliminator:       Reflection_coefficients
DeadFunctionEliminator:       gsm_L_mult
DeadFunctionEliminator:       gsm_norm
DeadFunctionEliminator:       gsm_asl
DeadFunctionEliminator:       gsm_asr
DeadFunctionEliminator:       gsm_div
DeadFunctionEliminator:       putchar
DeadFunctionEliminator:       puts
DeadFunctionEliminator:       bcmp
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:     Loop "  %4 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0" (2.827073e-08%)
Noelle:     Loop "  %35 = icmp eq i32 %.01, 0" (8.491472e+08%)
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (4.451459e+00%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (4.021619e+00%)
Noelle:     Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32" (1.708822e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (3.348496e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (9.389769e-03%)
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40" (7.298079e-03%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40" (5.652291e-03%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121" (2.389409e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40" (6.132092e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (5.287793e-04%)
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (1.460819e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.408904e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Function "Autocorrelation"
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 160" (7.293006e-03%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 160" (2.271391e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 160" (8.412560e-07%)
Noelle:     Loop "  %indvars.iv.next50 = add nsw i64 %indvars.iv49, -1" (1.960163e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (2.627789e-02%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (2.486774e-04%)
Noelle:     Loop "  %246 = icmp eq i32 %.7, 0" (2.175715e-05%)
Noelle:  Function "Weighting_filter"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (2.989980e-02%)
Noelle:  Function "Gsm_Preprocess"
Noelle:     Loop "  %12 = add nsw i32 %.0, -1" (2.797133e-02%)
Noelle:  Function "Reflection_coefficients"
Noelle:     Loop "  %exitcond52 = icmp eq i64 %indvars.iv50, 9" (3.239365e-04%)
Noelle:     Loop "  %exitcond49 = icmp eq i64 %indvars.iv47, 8" (1.926109e-04%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 9" (2.451411e-04%)
Noelle:     Loop "  %45 = load i16, i16* %42, align 2, !tbaa !37" (9.632191e-03%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv, %indvars.iv42" (3.329834e-03%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.4, 9" (0.000000e+00%)
Noelle:     Loop "  %11 = icmp eq i32 %.02, 0" (4.943338e-07%)
Noelle:  Function "Long_term_analysis_filtering"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 40" (7.433182e-04%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 40" (1.488955e-03%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 40" (6.354187e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (1.326531e-03%)
Noelle:  Function "APCM_quantization"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 13" (2.403756e-03%)
Noelle:     Loop "  %exitcond18 = icmp eq i32 %.14, 6" (1.415998e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (3.077748e-03%)
Noelle:  Function "APCM_inverse_quantization"
Noelle:     Loop "  %22 = add nsw i32 %.01, -1" (6.459761e-03%)
Noelle:  Function "gsm_div"
Noelle:     Loop "  %14 = icmp eq i32 %.01, 0" (5.018254e-03%)
Noelle:  Function "RPE_grid_selection"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (1.708560e-03%)
Noelle:  Function "RPE_grid_positioning"
Noelle:     Loop "  %18 = add i16 %.0, 1" (2.006543e-04%)
Noelle:  Function "LARp_to_rp"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 9" (2.160829e-03%)
Noelle:  Function "gsm_asr"
Noelle:  Function "Coefficients_0_12"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.367263e-04%)
Noelle:  Function "Coefficients_27_39"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.367263e-04%)
Noelle:  Function "Quantization_and_coding"
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (6.158212e-04%)
Noelle:  Function "gsm_norm"
Noelle:  Function "Coefficients_13_26"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (5.558671e-04%)
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:     Loop "  %10 = icmp slt i16 %.0, 8" (8.196410e-05%)
Noelle:  Function "gsm_mult"
Noelle:  Function "Coefficients_40_159"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (2.720823e-04%)
Noelle:  Function "gsm_sub"
Noelle:  Function "gsm_asl"
Noelle:  Function "gsm_add"
Noelle:  Function "audio_init_input"
Noelle:  Function "process"
Noelle:  Function "get_u32"
Noelle:  Function "parse_argv0"
Noelle:  Function "open_input"
Noelle:  Function "okay_as_input"
Noelle:  Function "gsm_option"
Noelle:  Function "prepare_io"
Noelle:  Function "endname"
Noelle:  Function "open_output"
Noelle:  Function "gsm_create"
Noelle:  Function "set_format"
Noelle:  Function "gsm_destroy"
Noelle:  Function "catch_signals"
Noelle:  Function "emalloc"
Noelle:  Function "ulaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "alaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (0.000000e+00%)
Noelle:  Function "linear_input"
Noelle:  Function "alaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "linear_output"
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 40" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 120" (0.000000e+00%)
Noelle:  Function "gsm_L_asr"
Noelle:  Function "gsm_L_asl"
Noelle:  Function "gsm_L_sub"
Noelle:  Function "gsm_L_add"
Noelle:  Function "gsm_L_mult"
Noelle:  Function "gsm_abs"
Noelle:  Function "Postprocessing"
Noelle:     Loop "  %6 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "Gsm_Decoder"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (0.000000e+00%)
Noelle:  Function "gsm_decode"
Noelle:  Function "put_u32"
Noelle:  Function "audio_init_output"
Noelle:  Function "length_okay"
Noelle:  Function "onintr"
Noelle:  Function "help"
Noelle:  Function "version"
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Function "ok_to_replace"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 10" (0.000000e+00%)
Noelle:  Function "codename"
Noelle:  Function "plainname"
Noelle:  Function "gsm_mult_r"
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:     Loop "  %8 = add nsw i32 %.0, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Function "getchar"
Noelle:  Function "generic_init"
Noelle:  Function "grok_format"
Noelle:     Loop "  %7 = load %struct.fmtdesc*, %struct.fmtdesc** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "suffix"
Noelle:  Function "normalname"
Noelle:  Function "fstat"
Noelle:  Function "update_own"
Noelle:  Function "update_mode"
Noelle:  Function "update_times"
Noelle:  Function "process_decode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (0.000000e+00%)
Noelle:     Loop "  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @in, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %4 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0" (2.827073e-08%)
Noelle:     Loop "  %35 = icmp eq i32 %.01, 0" (8.491472e+08%)
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (4.451459e+00%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (4.021619e+00%)
Noelle:     Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32" (1.708822e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (3.348496e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (9.389769e-03%)
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40" (7.298079e-03%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40" (5.652291e-03%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121" (2.389409e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40" (6.132092e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (5.287793e-04%)
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (1.460819e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.408904e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Function "Autocorrelation"
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 160" (7.293006e-03%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 160" (2.271391e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 160" (8.412560e-07%)
Noelle:     Loop "  %indvars.iv.next50 = add nsw i64 %indvars.iv49, -1" (1.960163e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (2.627789e-02%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (2.486774e-04%)
Noelle:     Loop "  %246 = icmp eq i32 %.7, 0" (2.175715e-05%)
Noelle:  Function "Weighting_filter"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (2.989980e-02%)
Noelle:  Function "Gsm_Preprocess"
Noelle:     Loop "  %12 = add nsw i32 %.0, -1" (2.797133e-02%)
Noelle:  Function "Reflection_coefficients"
Noelle:     Loop "  %exitcond52 = icmp eq i64 %indvars.iv50, 9" (3.239365e-04%)
Noelle:     Loop "  %exitcond49 = icmp eq i64 %indvars.iv47, 8" (1.926109e-04%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 9" (2.451411e-04%)
Noelle:     Loop "  %45 = load i16, i16* %42, align 2, !tbaa !37" (9.632191e-03%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv, %indvars.iv42" (3.329834e-03%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.4, 9" (0.000000e+00%)
Noelle:     Loop "  %11 = icmp eq i32 %.02, 0" (4.943338e-07%)
Noelle:  Function "Long_term_analysis_filtering"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 40" (7.433182e-04%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 40" (1.488955e-03%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 40" (6.354187e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (1.326531e-03%)
Noelle:  Function "APCM_quantization"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 13" (2.403756e-03%)
Noelle:     Loop "  %exitcond18 = icmp eq i32 %.14, 6" (1.415998e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (3.077748e-03%)
Noelle:  Function "APCM_inverse_quantization"
Noelle:     Loop "  %22 = add nsw i32 %.01, -1" (6.459761e-03%)
Noelle:  Function "gsm_div"
Noelle:     Loop "  %14 = icmp eq i32 %.01, 0" (5.018254e-03%)
Noelle:  Function "RPE_grid_selection"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (1.708560e-03%)
Noelle:  Function "RPE_grid_positioning"
Noelle:     Loop "  %18 = add i16 %.0, 1" (2.006543e-04%)
Noelle:  Function "LARp_to_rp"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 9" (2.160829e-03%)
Noelle:  Function "gsm_asr"
Noelle:  Function "Coefficients_0_12"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.367263e-04%)
Noelle:  Function "Coefficients_27_39"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.367263e-04%)
Noelle:  Function "Quantization_and_coding"
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (6.158212e-04%)
Noelle:  Function "gsm_norm"
Noelle:  Function "Coefficients_13_26"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (5.558671e-04%)
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:     Loop "  %10 = icmp slt i16 %.0, 8" (8.196410e-05%)
Noelle:  Function "gsm_mult"
Noelle:  Function "Coefficients_40_159"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (2.720823e-04%)
Noelle:  Function "gsm_sub"
Noelle:  Function "gsm_asl"
Noelle:  Function "gsm_add"
Noelle:  Function "audio_init_input"
Noelle:  Function "process"
Noelle:  Function "get_u32"
Noelle:  Function "parse_argv0"
Noelle:  Function "open_input"
Noelle:  Function "okay_as_input"
Noelle:  Function "gsm_option"
Noelle:  Function "prepare_io"
Noelle:  Function "endname"
Noelle:  Function "open_output"
Noelle:  Function "gsm_create"
Noelle:  Function "set_format"
Noelle:  Function "gsm_destroy"
Noelle:  Function "catch_signals"
Noelle:  Function "emalloc"
Noelle:  Function "ulaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "alaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (0.000000e+00%)
Noelle:  Function "linear_input"
Noelle:  Function "alaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "linear_output"
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 40" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 120" (0.000000e+00%)
Noelle:  Function "gsm_L_asr"
Noelle:  Function "gsm_L_asl"
Noelle:  Function "gsm_L_sub"
Noelle:  Function "gsm_L_add"
Noelle:  Function "gsm_L_mult"
Noelle:  Function "gsm_abs"
Noelle:  Function "Postprocessing"
Noelle:     Loop "  %6 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "Gsm_Decoder"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (0.000000e+00%)
Noelle:  Function "gsm_decode"
Noelle:  Function "put_u32"
Noelle:  Function "audio_init_output"
Noelle:  Function "length_okay"
Noelle:  Function "onintr"
Noelle:  Function "help"
Noelle:  Function "version"
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Function "ok_to_replace"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 10" (0.000000e+00%)
Noelle:  Function "codename"
Noelle:  Function "plainname"
Noelle:  Function "gsm_mult_r"
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:     Loop "  %8 = add nsw i32 %.0, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Function "getchar"
Noelle:  Function "generic_init"
Noelle:  Function "grok_format"
Noelle:     Loop "  %7 = load %struct.fmtdesc*, %struct.fmtdesc** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "suffix"
Noelle:  Function "normalname"
Noelle:  Function "fstat"
Noelle:  Function "update_own"
Noelle:  Function "update_mode"
Noelle:  Function "update_times"
Noelle:  Function "process_decode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (0.000000e+00%)
Noelle:     Loop "  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @in, align 8, !tbaa !30" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-enable baseline_pre.bc baseline_pre.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: Enablers: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.D9AuPukc2I (.ll version is /tmp/tmp.uNq61w7Gl5)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.3g0pMkkmRK (.ll version is /tmp/tmp.Ul0EiTfLsv)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.D9AuPukc2I -o /tmp/tmp.3g0pMkkmRK
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.D9AuPukc2I -o /tmp/tmp.3g0pMkkmRK
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.D9AuPukc2I -o /tmp/tmp.3g0pMkkmRK
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.D9AuPukc2I -o /tmp/tmp.3g0pMkkmRK
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.D9AuPukc2I -o /tmp/tmp.3g0pMkkmRK
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %4 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0" (2.861154e-08%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %35 = icmp eq i32 %.01, 0" (8.705556e+08%)
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (4.570415e+00%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (4.128253e+00%)
Noelle:     Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32" (1.753652e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (3.429360e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (9.640691e-03%)
Noelle:  Disable loop "6" as cold code
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40" (7.493105e-03%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40" (5.803336e-03%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121" (2.453261e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40" (6.295959e-03%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (5.429098e-04%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (1.499856e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.446554e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Disable "Gsm_RPE_Encoding" as cold function
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Disable "Gsm_LPC_Analysis" as cold function
Noelle:  Function "Autocorrelation"
Noelle:  Disable "Autocorrelation" as cold function
Noelle:  Function "Weighting_filter"
Noelle:  Disable "Weighting_filter" as cold function
Noelle:  Function "Gsm_Preprocess"
Noelle:  Disable "Gsm_Preprocess" as cold function
Noelle:  Function "Reflection_coefficients"
Noelle:  Disable "Reflection_coefficients" as cold function
Noelle:  Function "Long_term_analysis_filtering"
Noelle:  Disable "Long_term_analysis_filtering" as cold function
Noelle:  Function "APCM_quantization"
Noelle:  Disable "APCM_quantization" as cold function
Noelle:  Function "APCM_inverse_quantization"
Noelle:  Disable "APCM_inverse_quantization" as cold function
Noelle:  Function "gsm_div"
Noelle:  Disable "gsm_div" as cold function
Noelle:  Function "RPE_grid_selection"
Noelle:  Disable "RPE_grid_selection" as cold function
Noelle:  Function "RPE_grid_positioning"
Noelle:  Disable "RPE_grid_positioning" as cold function
Noelle:  Function "LARp_to_rp"
Noelle:  Disable "LARp_to_rp" as cold function
Noelle:  Function "gsm_asr"
Noelle:  Disable "gsm_asr" as cold function
Noelle:  Function "Coefficients_27_39"
Noelle:  Disable "Coefficients_27_39" as cold function
Noelle:  Function "Coefficients_0_12"
Noelle:  Disable "Coefficients_0_12" as cold function
Noelle:  Function "Quantization_and_coding"
Noelle:  Disable "Quantization_and_coding" as cold function
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Disable "Decoding_of_the_coded_Log_Area_Ratios" as cold function
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:  Disable "Transformation_to_Log_Area_Ratios" as cold function
Noelle:  Function "gsm_norm"
Noelle:  Disable "gsm_norm" as cold function
Noelle:  Function "Coefficients_13_26"
Noelle:  Disable "Coefficients_13_26" as cold function
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:  Disable "APCM_quantization_xmaxc_to_exp_mant" as cold function
Noelle:  Function "gsm_mult"
Noelle:  Disable "gsm_mult" as cold function
Noelle:  Function "Coefficients_40_159"
Noelle:  Disable "Coefficients_40_159" as cold function
Noelle:  Function "gsm_sub"
Noelle:  Disable "gsm_sub" as cold function
Noelle:  Function "gsm_asl"
Noelle:  Disable "gsm_asl" as cold function
Noelle:  Function "gsm_add"
Noelle:  Disable "gsm_add" as cold function
Noelle:  Function "process"
Noelle:  Disable "process" as cold function
Noelle:  Function "parse_argv0"
Noelle:  Disable "parse_argv0" as cold function
Noelle:  Function "open_input"
Noelle:  Disable "open_input" as cold function
Noelle:  Function "okay_as_input"
Noelle:  Disable "okay_as_input" as cold function
Noelle:  Function "gsm_option"
Noelle:  Disable "gsm_option" as cold function
Noelle:  Function "prepare_io"
Noelle:  Disable "prepare_io" as cold function
Noelle:  Function "endname"
Noelle:  Disable "endname" as cold function
Noelle:  Function "open_output"
Noelle:  Disable "open_output" as cold function
Noelle:  Function "gsm_create"
Noelle:  Disable "gsm_create" as cold function
Noelle:  Function "set_format"
Noelle:  Disable "set_format" as cold function
Noelle:  Function "catch_signals"
Noelle:  Disable "catch_signals" as cold function
Noelle:  Function "gsm_destroy"
Noelle:  Disable "gsm_destroy" as cold function
Noelle:  Function "emalloc"
Noelle:  Disable "emalloc" as cold function
Noelle:  Function "plainname"
Noelle:  Disable "plainname" as cold function
Noelle:  Function "length_okay"
Noelle:  Disable "length_okay" as cold function
Noelle:  Function "ok_to_replace"
Noelle:  Disable "ok_to_replace" as cold function
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:  Disable "Short_term_synthesis_filtering" as cold function
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:  Disable "Gsm_Long_Term_Synthesis_Filtering" as cold function
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Disable "Gsm_Short_Term_Synthesis_Filter" as cold function
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Disable "Gsm_RPE_Decoding" as cold function
Noelle:  Function "version"
Noelle:  Disable "version" as cold function
Noelle:  Function "Postprocessing"
Noelle:  Disable "Postprocessing" as cold function
Noelle:  Function "Gsm_Decoder"
Noelle:  Disable "Gsm_Decoder" as cold function
Noelle:  Function "getchar"
Noelle:  Disable "getchar" as cold function
Noelle:  Function "help"
Noelle:  Disable "help" as cold function
Noelle:  Function "onintr"
Noelle:  Disable "onintr" as cold function
Noelle:  Function "gsm_decode"
Noelle:  Disable "gsm_decode" as cold function
Noelle:  Function "alaw_input"
Noelle:  Disable "alaw_input" as cold function
Noelle:  Function "linear_input"
Noelle:  Disable "linear_input" as cold function
Noelle:  Function "fstat"
Noelle:  Disable "fstat" as cold function
Noelle:  Function "grok_format"
Noelle:  Disable "grok_format" as cold function
Noelle:  Function "suffix"
Noelle:  Disable "suffix" as cold function
Noelle:  Function "normalname"
Noelle:  Disable "normalname" as cold function
Noelle:  Function "update_own"
Noelle:  Disable "update_own" as cold function
Noelle:  Function "update_mode"
Noelle:  Disable "update_mode" as cold function
Noelle:  Function "update_times"
Noelle:  Disable "update_times" as cold function
Noelle:  Function "codename"
Noelle:  Disable "codename" as cold function
Noelle:  Function "process_decode"
Noelle:  Disable "process_decode" as cold function
EnablersManager:   Try to improve all 8 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %35 = icmp eq i32 %.01, 0
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %35 = icmp eq i32 %.01, 0"
LICM:     Invariant = "  %202 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %195 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !30
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %198 = getelementptr [27 x i8], [27 x i8]* @.str.40, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %185 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %133 = getelementptr [7 x i8], [7 x i8]* @.str.36, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %134 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !30
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %138 = getelementptr [7 x i8], [7 x i8]* @.str.36, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %140 = getelementptr [24 x i8], [24 x i8]* @.str.38, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %175 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !30
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %178 = getelementptr [30 x i8], [30 x i8]* @.str.39, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %161 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !30
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %68 = getelementptr [3 x i8], [3 x i8]* @.str.43, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !30
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %60 = getelementptr [46 x i8], [46 x i8]* @.str.42, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %61 = getelementptr [5 x i8], [5 x i8]* @.str.41, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %54 = getelementptr [5 x i8], [5 x i8]* @.str.41, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %41 = getelementptr %struct.stat, %struct.stat* @instat, i64 0, i32 2
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %73 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !30
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %76 = getelementptr [34 x i8], [34 x i8]* @.str.44, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !30
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %102 = getelementptr [18 x i8], [18 x i8]* @.str.34, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %103 = getelementptr [20 x i8], [20 x i8]* @.str.35, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %112 = getelementptr [6 x i8], [6 x i8]* @.str.37, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %108 = getelementptr [7 x i8], [7 x i8]* @.str.36, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %115 = getelementptr [17 x i8], [17 x i8]* @.str.33, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %144 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !30
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %152 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !30
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %155 = getelementptr [24 x i8], [24 x i8]* @.str.38, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "ulaw_input"
EnablersManager:     Entry instruction =   %3 = icmp ult i64 %indvars.iv, 160
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %3 = icmp ult i64 %indvars.iv, 160"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %3, label %4, label %.._crit_edge_crit_edge, !prof !30
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "process_encode"
EnablersManager:     Entry instruction =   %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [33 x i8], align 16
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca [160 x i16], align 16
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %16, label %17, label %40, !prof !38
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "process_encode"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i32 %.01, 1000000000
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [33 x i8], align 16
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca [160 x i16], align 16
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i32 %.01, 1000000000"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %.loopexit.loopexit, label %.preheader.preheader, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Gsm_Coder"
EnablersManager:     Entry instruction =   %exitcond11 = icmp eq i64 %indvars.iv9, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [160 x i16], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca [160 x i16], align 16 can be cloned
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4"
LICM:     Invariant = "  %17 = getelementptr [50 x i16], [50 x i16]* @Gsm_Coder.e, i64 0, i64 5
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %18 = getelementptr [50 x i16], [50 x i16]* @Gsm_Coder.e, i64 0, i64 5
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "Calculation_of_the_LTP_parameters"
EnablersManager:     Entry instruction =   %exitcond30 = icmp eq i64 %indvars.iv28, 121
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [40 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond30, label %411, label %168, !prof !43
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Short_term_analysis_filtering"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 8
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %40, label %._crit_edge, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Short_term_analysis_filtering"
EnablersManager:     Entry instruction =   %6 = add nsw i32 %.01, -1
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %6 = add nsw i32 %.01, -1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %7, label %42, label %8, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %4 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0" (2.861154e-08%)
Noelle:     Loop "  %35 = icmp eq i32 %.01, 0" (8.705556e+08%)
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (4.570415e+00%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (4.128253e+00%)
Noelle:     Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32" (1.753652e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (3.429360e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (9.640691e-03%)
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40" (7.493105e-03%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40" (5.803336e-03%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121" (2.453261e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40" (6.295959e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (5.429098e-04%)
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (1.499856e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.446554e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Function "Autocorrelation"
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 160" (7.487897e-03%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 160" (2.332089e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 160" (8.637368e-07%)
Noelle:     Loop "  %indvars.iv.next50 = add nsw i64 %indvars.iv49, -1" (2.012544e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (2.698011e-02%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (2.553228e-04%)
Noelle:     Loop "  %246 = icmp eq i32 %.7, 0" (2.233856e-05%)
Noelle:  Function "Weighting_filter"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (3.069881e-02%)
Noelle:  Function "Gsm_Preprocess"
Noelle:     Loop "  %12 = add nsw i32 %.0, -1" (2.871880e-02%)
Noelle:  Function "Reflection_coefficients"
Noelle:     Loop "  %exitcond52 = icmp eq i64 %indvars.iv50, 9" (3.325930e-04%)
Noelle:     Loop "  %exitcond49 = icmp eq i64 %indvars.iv47, 8" (1.977580e-04%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 9" (2.516920e-04%)
Noelle:     Loop "  %45 = load i16, i16* %42, align 2, !tbaa !37" (9.889591e-03%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv, %indvars.iv42" (3.418816e-03%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.4, 9" (0.000000e+00%)
Noelle:     Loop "  %11 = icmp eq i32 %.02, 0" (5.075439e-07%)
Noelle:  Function "Long_term_analysis_filtering"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 40" (7.631818e-04%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 40" (1.528744e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (1.817447e-03%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 40" (5.217913e-03%)
Noelle:  Function "APCM_quantization"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 13" (2.467992e-03%)
Noelle:     Loop "  %exitcond18 = icmp eq i32 %.14, 6" (1.453838e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (3.159995e-03%)
Noelle:  Function "APCM_inverse_quantization"
Noelle:     Loop "  %22 = add nsw i32 %.01, -1" (6.632385e-03%)
Noelle:  Function "gsm_div"
Noelle:     Loop "  %14 = icmp eq i32 %.01, 0" (5.152356e-03%)
Noelle:  Function "RPE_grid_selection"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (1.754218e-03%)
Noelle:  Function "RPE_grid_positioning"
Noelle:     Loop "  %18 = add i16 %.0, 1" (2.060164e-04%)
Noelle:  Function "LARp_to_rp"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 9" (2.218572e-03%)
Noelle:  Function "gsm_asr"
Noelle:  Function "Coefficients_0_12"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.590860e-04%)
Noelle:  Function "Coefficients_27_39"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.590860e-04%)
Noelle:  Function "Quantization_and_coding"
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (6.322777e-04%)
Noelle:  Function "gsm_norm"
Noelle:  Function "Coefficients_13_26"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (5.707215e-04%)
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:     Loop "  %10 = icmp slt i16 %.0, 8" (8.415442e-05%)
Noelle:  Function "gsm_mult"
Noelle:  Function "Coefficients_40_159"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (2.793531e-04%)
Noelle:  Function "gsm_sub"
Noelle:  Function "gsm_asl"
Noelle:  Function "gsm_add"
Noelle:  Function "audio_init_input"
Noelle:  Function "process"
Noelle:  Function "get_u32"
Noelle:  Function "parse_argv0"
Noelle:  Function "open_input"
Noelle:  Function "okay_as_input"
Noelle:  Function "gsm_option"
Noelle:  Function "prepare_io"
Noelle:  Function "endname"
Noelle:  Function "open_output"
Noelle:  Function "gsm_create"
Noelle:  Function "set_format"
Noelle:  Function "gsm_destroy"
Noelle:  Function "catch_signals"
Noelle:  Function "emalloc"
Noelle:  Function "ulaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "alaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (0.000000e+00%)
Noelle:  Function "linear_input"
Noelle:  Function "alaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "linear_output"
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 40" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 120" (0.000000e+00%)
Noelle:  Function "gsm_L_asr"
Noelle:  Function "gsm_L_asl"
Noelle:  Function "gsm_L_sub"
Noelle:  Function "gsm_L_add"
Noelle:  Function "gsm_L_mult"
Noelle:  Function "gsm_abs"
Noelle:  Function "Postprocessing"
Noelle:     Loop "  %6 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "Gsm_Decoder"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (0.000000e+00%)
Noelle:  Function "gsm_decode"
Noelle:  Function "put_u32"
Noelle:  Function "audio_init_output"
Noelle:  Function "length_okay"
Noelle:  Function "onintr"
Noelle:  Function "help"
Noelle:  Function "version"
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Function "ok_to_replace"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 10" (0.000000e+00%)
Noelle:  Function "codename"
Noelle:  Function "plainname"
Noelle:  Function "gsm_mult_r"
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:     Loop "  %8 = add nsw i32 %.0, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Function "getchar"
Noelle:  Function "generic_init"
Noelle:  Function "grok_format"
Noelle:     Loop "  %7 = load %struct.fmtdesc*, %struct.fmtdesc** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "suffix"
Noelle:  Function "normalname"
Noelle:  Function "fstat"
Noelle:  Function "update_own"
Noelle:  Function "update_mode"
Noelle:  Function "update_times"
Noelle:  Function "process_decode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (0.000000e+00%)
Noelle:     Loop "  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @in, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %4 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0" (2.966830e-08%)
Noelle:     Loop "  %63 = icmp eq i32 %.01, 0" (9.026818e+08%)
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (4.739222e+00%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (4.280711e+00%)
Noelle:     Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32" (1.818404e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (3.555782e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (9.996768e-03%)
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40" (7.769861e-03%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40" (6.017681e-03%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121" (2.543872e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40" (6.528499e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (5.629621e-04%)
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (1.555253e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.499982e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Function "Autocorrelation"
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 160" (7.764460e-03%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 160" (2.418225e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 160" (8.956388e-07%)
Noelle:     Loop "  %indvars.iv.next50 = add nsw i64 %indvars.iv49, -1" (2.086877e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (2.797661e-02%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (2.647531e-04%)
Noelle:     Loop "  %246 = icmp eq i32 %.7, 0" (2.316363e-05%)
Noelle:  Function "Weighting_filter"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (3.183266e-02%)
Noelle:  Function "Gsm_Preprocess"
Noelle:     Loop "  %12 = add nsw i32 %.0, -1" (2.977952e-02%)
Noelle:  Function "Reflection_coefficients"
Noelle:     Loop "  %exitcond52 = icmp eq i64 %indvars.iv50, 9" (3.448772e-04%)
Noelle:     Loop "  %exitcond49 = icmp eq i64 %indvars.iv47, 8" (2.050621e-04%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 9" (2.609882e-04%)
Noelle:     Loop "  %45 = load i16, i16* %42, align 2, !tbaa !37" (1.025486e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv, %indvars.iv42" (3.545090e-03%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.4, 9" (0.000000e+00%)
Noelle:     Loop "  %11 = icmp eq i32 %.02, 0" (5.262899e-07%)
Noelle:  Function "Long_term_analysis_filtering"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 40" (7.913697e-04%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 40" (1.585207e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (1.884574e-03%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 40" (5.410635e-03%)
Noelle:  Function "APCM_quantization"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 13" (2.559146e-03%)
Noelle:     Loop "  %exitcond18 = icmp eq i32 %.14, 6" (1.507535e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (3.276708e-03%)
Noelle:  Function "APCM_inverse_quantization"
Noelle:     Loop "  %22 = add nsw i32 %.01, -1" (6.877350e-03%)
Noelle:  Function "gsm_div"
Noelle:     Loop "  %14 = icmp eq i32 %.01, 0" (5.342657e-03%)
Noelle:  Function "RPE_grid_selection"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (1.819009e-03%)
Noelle:  Function "RPE_grid_positioning"
Noelle:     Loop "  %18 = add i16 %.0, 1" (2.136255e-04%)
Noelle:  Function "LARp_to_rp"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 9" (2.300515e-03%)
Noelle:  Function "gsm_asr"
Noelle:  Function "Coefficients_0_12"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.908161e-04%)
Noelle:  Function "Coefficients_27_39"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.908161e-04%)
Noelle:  Function "Quantization_and_coding"
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (6.556308e-04%)
Noelle:  Function "gsm_norm"
Noelle:  Function "Coefficients_13_26"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (5.918009e-04%)
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:     Loop "  %10 = icmp slt i16 %.0, 8" (8.726265e-05%)
Noelle:  Function "gsm_mult"
Noelle:  Function "Coefficients_40_159"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (2.896710e-04%)
Noelle:  Function "gsm_sub"
Noelle:  Function "gsm_asl"
Noelle:  Function "gsm_add"
Noelle:  Function "audio_init_input"
Noelle:  Function "process"
Noelle:  Function "get_u32"
Noelle:  Function "parse_argv0"
Noelle:  Function "open_input"
Noelle:  Function "okay_as_input"
Noelle:  Function "gsm_option"
Noelle:  Function "prepare_io"
Noelle:  Function "endname"
Noelle:  Function "open_output"
Noelle:  Function "gsm_create"
Noelle:  Function "set_format"
Noelle:  Function "gsm_destroy"
Noelle:  Function "catch_signals"
Noelle:  Function "emalloc"
Noelle:  Function "ulaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "alaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (0.000000e+00%)
Noelle:  Function "linear_input"
Noelle:  Function "alaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "linear_output"
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 40" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 120" (0.000000e+00%)
Noelle:  Function "gsm_L_asr"
Noelle:  Function "gsm_L_asl"
Noelle:  Function "gsm_L_sub"
Noelle:  Function "gsm_L_add"
Noelle:  Function "gsm_L_mult"
Noelle:  Function "gsm_abs"
Noelle:  Function "Postprocessing"
Noelle:     Loop "  %6 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "Gsm_Decoder"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (0.000000e+00%)
Noelle:  Function "gsm_decode"
Noelle:  Function "put_u32"
Noelle:  Function "audio_init_output"
Noelle:  Function "length_okay"
Noelle:  Function "onintr"
Noelle:  Function "help"
Noelle:  Function "version"
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Function "ok_to_replace"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 10" (0.000000e+00%)
Noelle:  Function "codename"
Noelle:  Function "plainname"
Noelle:  Function "gsm_mult_r"
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:     Loop "  %8 = add nsw i32 %.0, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Function "getchar"
Noelle:  Function "generic_init"
Noelle:  Function "grok_format"
Noelle:     Loop "  %7 = load %struct.fmtdesc*, %struct.fmtdesc** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "suffix"
Noelle:  Function "normalname"
Noelle:  Function "fstat"
Noelle:  Function "update_own"
Noelle:  Function "update_mode"
Noelle:  Function "update_times"
Noelle:  Function "process_decode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (0.000000e+00%)
Noelle:     Loop "  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @in, align 8, !tbaa !30" (0.000000e+00%)
NOELLE: FixedPoint:       There are 0 different instructions and -30 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.3g0pMkkmRK -o /tmp/tmp.3g0pMkkmRK
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.3g0pMkkmRK -o /tmp/tmp.3g0pMkkmRK
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.D9AuPukc2I -o /tmp/tmp.3g0pMkkmRK
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.D9AuPukc2I -o /tmp/tmp.3g0pMkkmRK
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.D9AuPukc2I -o /tmp/tmp.3g0pMkkmRK
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %4 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0" (2.966830e-08%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %63 = icmp eq i32 %.01, 0" (9.026818e+08%)
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (4.739222e+00%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (4.280711e+00%)
Noelle:     Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32" (1.818404e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (3.555782e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (9.996768e-03%)
Noelle:  Disable loop "6" as cold code
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40" (7.769861e-03%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40" (6.017681e-03%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121" (2.543872e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40" (6.528499e-03%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (5.629621e-04%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (1.555253e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.499982e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Disable "Gsm_RPE_Encoding" as cold function
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Disable "Gsm_LPC_Analysis" as cold function
Noelle:  Function "Autocorrelation"
Noelle:  Disable "Autocorrelation" as cold function
Noelle:  Function "Weighting_filter"
Noelle:  Disable "Weighting_filter" as cold function
Noelle:  Function "Gsm_Preprocess"
Noelle:  Disable "Gsm_Preprocess" as cold function
Noelle:  Function "Reflection_coefficients"
Noelle:  Disable "Reflection_coefficients" as cold function
Noelle:  Function "Long_term_analysis_filtering"
Noelle:  Disable "Long_term_analysis_filtering" as cold function
Noelle:  Function "APCM_quantization"
Noelle:  Disable "APCM_quantization" as cold function
Noelle:  Function "APCM_inverse_quantization"
Noelle:  Disable "APCM_inverse_quantization" as cold function
Noelle:  Function "gsm_div"
Noelle:  Disable "gsm_div" as cold function
Noelle:  Function "RPE_grid_selection"
Noelle:  Disable "RPE_grid_selection" as cold function
Noelle:  Function "RPE_grid_positioning"
Noelle:  Disable "RPE_grid_positioning" as cold function
Noelle:  Function "LARp_to_rp"
Noelle:  Disable "LARp_to_rp" as cold function
Noelle:  Function "gsm_asr"
Noelle:  Disable "gsm_asr" as cold function
Noelle:  Function "Coefficients_27_39"
Noelle:  Disable "Coefficients_27_39" as cold function
Noelle:  Function "Coefficients_0_12"
Noelle:  Disable "Coefficients_0_12" as cold function
Noelle:  Function "Quantization_and_coding"
Noelle:  Disable "Quantization_and_coding" as cold function
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Disable "Decoding_of_the_coded_Log_Area_Ratios" as cold function
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:  Disable "Transformation_to_Log_Area_Ratios" as cold function
Noelle:  Function "gsm_norm"
Noelle:  Disable "gsm_norm" as cold function
Noelle:  Function "Coefficients_13_26"
Noelle:  Disable "Coefficients_13_26" as cold function
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:  Disable "APCM_quantization_xmaxc_to_exp_mant" as cold function
Noelle:  Function "gsm_mult"
Noelle:  Disable "gsm_mult" as cold function
Noelle:  Function "Coefficients_40_159"
Noelle:  Disable "Coefficients_40_159" as cold function
Noelle:  Function "gsm_sub"
Noelle:  Disable "gsm_sub" as cold function
Noelle:  Function "gsm_asl"
Noelle:  Disable "gsm_asl" as cold function
Noelle:  Function "gsm_add"
Noelle:  Disable "gsm_add" as cold function
Noelle:  Function "process"
Noelle:  Disable "process" as cold function
Noelle:  Function "parse_argv0"
Noelle:  Disable "parse_argv0" as cold function
Noelle:  Function "open_input"
Noelle:  Disable "open_input" as cold function
Noelle:  Function "okay_as_input"
Noelle:  Disable "okay_as_input" as cold function
Noelle:  Function "gsm_option"
Noelle:  Disable "gsm_option" as cold function
Noelle:  Function "prepare_io"
Noelle:  Disable "prepare_io" as cold function
Noelle:  Function "endname"
Noelle:  Disable "endname" as cold function
Noelle:  Function "open_output"
Noelle:  Disable "open_output" as cold function
Noelle:  Function "gsm_create"
Noelle:  Disable "gsm_create" as cold function
Noelle:  Function "set_format"
Noelle:  Disable "set_format" as cold function
Noelle:  Function "catch_signals"
Noelle:  Disable "catch_signals" as cold function
Noelle:  Function "gsm_destroy"
Noelle:  Disable "gsm_destroy" as cold function
Noelle:  Function "emalloc"
Noelle:  Disable "emalloc" as cold function
Noelle:  Function "plainname"
Noelle:  Disable "plainname" as cold function
Noelle:  Function "length_okay"
Noelle:  Disable "length_okay" as cold function
Noelle:  Function "ok_to_replace"
Noelle:  Disable "ok_to_replace" as cold function
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:  Disable "Short_term_synthesis_filtering" as cold function
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:  Disable "Gsm_Long_Term_Synthesis_Filtering" as cold function
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Disable "Gsm_Short_Term_Synthesis_Filter" as cold function
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Disable "Gsm_RPE_Decoding" as cold function
Noelle:  Function "version"
Noelle:  Disable "version" as cold function
Noelle:  Function "Postprocessing"
Noelle:  Disable "Postprocessing" as cold function
Noelle:  Function "Gsm_Decoder"
Noelle:  Disable "Gsm_Decoder" as cold function
Noelle:  Function "getchar"
Noelle:  Disable "getchar" as cold function
Noelle:  Function "help"
Noelle:  Disable "help" as cold function
Noelle:  Function "onintr"
Noelle:  Disable "onintr" as cold function
Noelle:  Function "gsm_decode"
Noelle:  Disable "gsm_decode" as cold function
Noelle:  Function "alaw_input"
Noelle:  Disable "alaw_input" as cold function
Noelle:  Function "linear_input"
Noelle:  Disable "linear_input" as cold function
Noelle:  Function "fstat"
Noelle:  Disable "fstat" as cold function
Noelle:  Function "grok_format"
Noelle:  Disable "grok_format" as cold function
Noelle:  Function "suffix"
Noelle:  Disable "suffix" as cold function
Noelle:  Function "normalname"
Noelle:  Disable "normalname" as cold function
Noelle:  Function "update_own"
Noelle:  Disable "update_own" as cold function
Noelle:  Function "update_mode"
Noelle:  Disable "update_mode" as cold function
Noelle:  Function "update_times"
Noelle:  Disable "update_times" as cold function
Noelle:  Function "codename"
Noelle:  Disable "codename" as cold function
Noelle:  Function "process_decode"
Noelle:  Disable "process_decode" as cold function
EnablersManager:   Try to improve all 8 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %63 = icmp eq i32 %.01, 0
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %63 = icmp eq i32 %.01, 0"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %63, label %.loopexit.loopexit, label %64, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "ulaw_input"
EnablersManager:     Entry instruction =   %3 = icmp ult i64 %indvars.iv, 160
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %3 = icmp ult i64 %indvars.iv, 160"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %3, label %4, label %.._crit_edge_crit_edge, !prof !30
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "process_encode"
EnablersManager:     Entry instruction =   %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [33 x i8], align 16
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca [160 x i16], align 16
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %16, label %17, label %40, !prof !38
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "process_encode"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i32 %.01, 1000000000
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [33 x i8], align 16
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca [160 x i16], align 16
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i32 %.01, 1000000000"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %.loopexit.loopexit, label %.preheader.preheader, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Gsm_Coder"
EnablersManager:     Entry instruction =   %exitcond11 = icmp eq i64 %indvars.iv9, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [160 x i16], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca [160 x i16], align 16 can be cloned
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond11, label %41, label %16, !prof !30
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Calculation_of_the_LTP_parameters"
EnablersManager:     Entry instruction =   %exitcond30 = icmp eq i64 %indvars.iv28, 121
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [40 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond30, label %411, label %168, !prof !43
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Short_term_analysis_filtering"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 8
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %40, label %._crit_edge, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Short_term_analysis_filtering"
EnablersManager:     Entry instruction =   %6 = add nsw i32 %.01, -1
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %6 = add nsw i32 %.01, -1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %7, label %42, label %8, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %4 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0" (2.966830e-08%)
Noelle:     Loop "  %63 = icmp eq i32 %.01, 0" (9.026818e+08%)
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (4.739222e+00%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (4.280711e+00%)
Noelle:     Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32" (1.818404e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (3.555782e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (9.996768e-03%)
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40" (7.769861e-03%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40" (6.017681e-03%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121" (2.543872e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40" (6.528499e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (5.629621e-04%)
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (1.555253e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.499982e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Function "Autocorrelation"
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 160" (7.764460e-03%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 160" (2.418225e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 160" (8.956388e-07%)
Noelle:     Loop "  %indvars.iv.next50 = add nsw i64 %indvars.iv49, -1" (2.086877e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (2.797661e-02%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (2.647531e-04%)
Noelle:     Loop "  %246 = icmp eq i32 %.7, 0" (2.316363e-05%)
Noelle:  Function "Weighting_filter"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (3.183266e-02%)
Noelle:  Function "Gsm_Preprocess"
Noelle:     Loop "  %12 = add nsw i32 %.0, -1" (2.977952e-02%)
Noelle:  Function "Reflection_coefficients"
Noelle:     Loop "  %exitcond52 = icmp eq i64 %indvars.iv50, 9" (3.448772e-04%)
Noelle:     Loop "  %exitcond49 = icmp eq i64 %indvars.iv47, 8" (2.050621e-04%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 9" (2.609882e-04%)
Noelle:     Loop "  %45 = load i16, i16* %42, align 2, !tbaa !37" (1.025486e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv, %indvars.iv42" (3.545090e-03%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.4, 9" (0.000000e+00%)
Noelle:     Loop "  %11 = icmp eq i32 %.02, 0" (5.262899e-07%)
Noelle:  Function "Long_term_analysis_filtering"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 40" (7.913697e-04%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 40" (1.585207e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (1.884574e-03%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 40" (5.410635e-03%)
Noelle:  Function "APCM_quantization"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 13" (2.559146e-03%)
Noelle:     Loop "  %exitcond18 = icmp eq i32 %.14, 6" (1.507535e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (3.276708e-03%)
Noelle:  Function "APCM_inverse_quantization"
Noelle:     Loop "  %22 = add nsw i32 %.01, -1" (6.877350e-03%)
Noelle:  Function "gsm_div"
Noelle:     Loop "  %14 = icmp eq i32 %.01, 0" (5.342657e-03%)
Noelle:  Function "RPE_grid_selection"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (1.819009e-03%)
Noelle:  Function "RPE_grid_positioning"
Noelle:     Loop "  %18 = add i16 %.0, 1" (2.136255e-04%)
Noelle:  Function "LARp_to_rp"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 9" (2.300515e-03%)
Noelle:  Function "gsm_asr"
Noelle:  Function "Coefficients_0_12"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.908161e-04%)
Noelle:  Function "Coefficients_27_39"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.908161e-04%)
Noelle:  Function "Quantization_and_coding"
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (6.556308e-04%)
Noelle:  Function "gsm_norm"
Noelle:  Function "Coefficients_13_26"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (5.918009e-04%)
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:     Loop "  %10 = icmp slt i16 %.0, 8" (8.726265e-05%)
Noelle:  Function "gsm_mult"
Noelle:  Function "Coefficients_40_159"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (2.896710e-04%)
Noelle:  Function "gsm_sub"
Noelle:  Function "gsm_asl"
Noelle:  Function "gsm_add"
Noelle:  Function "audio_init_input"
Noelle:  Function "process"
Noelle:  Function "get_u32"
Noelle:  Function "parse_argv0"
Noelle:  Function "open_input"
Noelle:  Function "okay_as_input"
Noelle:  Function "gsm_option"
Noelle:  Function "prepare_io"
Noelle:  Function "endname"
Noelle:  Function "open_output"
Noelle:  Function "gsm_create"
Noelle:  Function "set_format"
Noelle:  Function "gsm_destroy"
Noelle:  Function "catch_signals"
Noelle:  Function "emalloc"
Noelle:  Function "ulaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "alaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (0.000000e+00%)
Noelle:  Function "linear_input"
Noelle:  Function "alaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "linear_output"
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 40" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 120" (0.000000e+00%)
Noelle:  Function "gsm_L_asr"
Noelle:  Function "gsm_L_asl"
Noelle:  Function "gsm_L_sub"
Noelle:  Function "gsm_L_add"
Noelle:  Function "gsm_L_mult"
Noelle:  Function "gsm_abs"
Noelle:  Function "Postprocessing"
Noelle:     Loop "  %6 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "Gsm_Decoder"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (0.000000e+00%)
Noelle:  Function "gsm_decode"
Noelle:  Function "put_u32"
Noelle:  Function "audio_init_output"
Noelle:  Function "length_okay"
Noelle:  Function "onintr"
Noelle:  Function "help"
Noelle:  Function "version"
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Function "ok_to_replace"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 10" (0.000000e+00%)
Noelle:  Function "codename"
Noelle:  Function "plainname"
Noelle:  Function "gsm_mult_r"
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:     Loop "  %8 = add nsw i32 %.0, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Function "getchar"
Noelle:  Function "generic_init"
Noelle:  Function "grok_format"
Noelle:     Loop "  %7 = load %struct.fmtdesc*, %struct.fmtdesc** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "suffix"
Noelle:  Function "normalname"
Noelle:  Function "fstat"
Noelle:  Function "update_own"
Noelle:  Function "update_mode"
Noelle:  Function "update_times"
Noelle:  Function "process_decode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (0.000000e+00%)
Noelle:     Loop "  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @in, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %4 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0" (2.966830e-08%)
Noelle:     Loop "  %63 = icmp eq i32 %.01, 0" (9.026818e+08%)
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (4.739222e+00%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (4.280711e+00%)
Noelle:     Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !32" (1.818404e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (3.555782e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (9.996768e-03%)
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40" (7.769861e-03%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40" (6.017681e-03%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121" (2.543872e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40" (6.528499e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (5.629621e-04%)
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1" (1.555253e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.499982e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Function "Autocorrelation"
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 160" (7.764460e-03%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 160" (0.000000e+00%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 160" (2.418225e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 160" (8.956388e-07%)
Noelle:     Loop "  %indvars.iv.next50 = add nsw i64 %indvars.iv49, -1" (2.086877e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (2.797661e-02%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (2.647531e-04%)
Noelle:     Loop "  %246 = icmp eq i32 %.7, 0" (2.316363e-05%)
Noelle:  Function "Weighting_filter"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (3.183266e-02%)
Noelle:  Function "Gsm_Preprocess"
Noelle:     Loop "  %12 = add nsw i32 %.0, -1" (2.977952e-02%)
Noelle:  Function "Reflection_coefficients"
Noelle:     Loop "  %exitcond52 = icmp eq i64 %indvars.iv50, 9" (3.448772e-04%)
Noelle:     Loop "  %exitcond49 = icmp eq i64 %indvars.iv47, 8" (2.050621e-04%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 9" (2.609882e-04%)
Noelle:     Loop "  %45 = load i16, i16* %42, align 2, !tbaa !37" (1.025486e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv, %indvars.iv42" (3.545090e-03%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.4, 9" (0.000000e+00%)
Noelle:     Loop "  %11 = icmp eq i32 %.02, 0" (5.262899e-07%)
Noelle:  Function "Long_term_analysis_filtering"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 40" (7.913697e-04%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 40" (1.585207e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (1.884574e-03%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 40" (5.410635e-03%)
Noelle:  Function "APCM_quantization"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 13" (2.559146e-03%)
Noelle:     Loop "  %exitcond18 = icmp eq i32 %.14, 6" (1.507535e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (3.276708e-03%)
Noelle:  Function "APCM_inverse_quantization"
Noelle:     Loop "  %22 = add nsw i32 %.01, -1" (6.877350e-03%)
Noelle:  Function "gsm_div"
Noelle:     Loop "  %14 = icmp eq i32 %.01, 0" (5.342657e-03%)
Noelle:  Function "RPE_grid_selection"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 13" (1.819009e-03%)
Noelle:  Function "RPE_grid_positioning"
Noelle:     Loop "  %18 = add i16 %.0, 1" (2.136255e-04%)
Noelle:  Function "LARp_to_rp"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 9" (2.300515e-03%)
Noelle:  Function "gsm_asr"
Noelle:  Function "Coefficients_0_12"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.908161e-04%)
Noelle:  Function "Coefficients_27_39"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (8.908161e-04%)
Noelle:  Function "Quantization_and_coding"
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (6.556308e-04%)
Noelle:  Function "gsm_norm"
Noelle:  Function "Coefficients_13_26"
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 9" (5.918009e-04%)
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:     Loop "  %10 = icmp slt i16 %.0, 8" (8.726265e-05%)
Noelle:  Function "gsm_mult"
Noelle:  Function "Coefficients_40_159"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 9" (2.896710e-04%)
Noelle:  Function "gsm_sub"
Noelle:  Function "gsm_asl"
Noelle:  Function "gsm_add"
Noelle:  Function "audio_init_input"
Noelle:  Function "process"
Noelle:  Function "get_u32"
Noelle:  Function "parse_argv0"
Noelle:  Function "open_input"
Noelle:  Function "okay_as_input"
Noelle:  Function "gsm_option"
Noelle:  Function "prepare_io"
Noelle:  Function "endname"
Noelle:  Function "open_output"
Noelle:  Function "gsm_create"
Noelle:  Function "set_format"
Noelle:  Function "gsm_destroy"
Noelle:  Function "catch_signals"
Noelle:  Function "emalloc"
Noelle:  Function "ulaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "alaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160" (0.000000e+00%)
Noelle:  Function "linear_input"
Noelle:  Function "alaw_output"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 160" (0.000000e+00%)
Noelle:  Function "linear_output"
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 40" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 120" (0.000000e+00%)
Noelle:  Function "gsm_L_asr"
Noelle:  Function "gsm_L_asl"
Noelle:  Function "gsm_L_sub"
Noelle:  Function "gsm_L_add"
Noelle:  Function "gsm_L_mult"
Noelle:  Function "gsm_abs"
Noelle:  Function "Postprocessing"
Noelle:     Loop "  %6 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "Gsm_Decoder"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40" (0.000000e+00%)
Noelle:  Function "gsm_decode"
Noelle:  Function "put_u32"
Noelle:  Function "audio_init_output"
Noelle:  Function "length_okay"
Noelle:  Function "onintr"
Noelle:  Function "help"
Noelle:  Function "version"
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Function "ok_to_replace"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 10" (0.000000e+00%)
Noelle:  Function "codename"
Noelle:  Function "plainname"
Noelle:  Function "gsm_mult_r"
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:     Loop "  %8 = add nsw i32 %.0, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Function "getchar"
Noelle:  Function "generic_init"
Noelle:  Function "grok_format"
Noelle:     Loop "  %7 = load %struct.fmtdesc*, %struct.fmtdesc** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "suffix"
Noelle:  Function "normalname"
Noelle:  Function "fstat"
Noelle:  Function "update_own"
Noelle:  Function "update_mode"
Noelle:  Function "update_times"
Noelle:  Function "process_decode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000" (0.000000e+00%)
Noelle:     Loop "  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @in, align 8, !tbaa !30" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: Enablers: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true baseline_pre.bc -o baseline_pre.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata baseline_pre.bc -o baseline_pre.bc
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/toast /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/toast
WARNING: ./runme_toast.sh not found. Going up one dir.
Running: ./baseline_pre_prof -fps -c data/large.au > output_large.encode.gsm in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/MiBench/telecomm/gsm
--------------------------------------------------------------------------------------
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/toast
DONE
opt -pgo-test-profile-file=/tmp/tmp.iBGJ5ZmUiA -block-freq -pgo-instr-use baseline_pre.bc -o baseline_with_metadata.bc
noelle-load -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
PDGAnalysis: Construct PDG from Analysis
Embed PDG as metadata
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %4 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0, !noelle.pdg.inst.id !10722" (3.039560e-08%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %38 = icmp eq i32 %.01, 0, !noelle.pdg.inst.id !10822" (8.925403e+08%)
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160, !noelle.pdg.inst.id !66" (4.653093e+00%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000, !noelle.pdg.inst.id !396" (4.206990e+00%)
Noelle:     Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !387, !noelle.pdg.inst.id !49" (1.789432e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4, !noelle.pdg.inst.id !139" (3.533278e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40, !noelle.pdg.inst.id !149" (9.815089e-03%)
Noelle:  Disable loop "6" as cold code
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40, !noelle.pdg.inst.id !549" (7.628654e-03%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40, !noelle.pdg.inst.id !605" (5.908317e-03%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121, !noelle.pdg.inst.id !700" (2.497640e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40, !noelle.pdg.inst.id !935" (6.409852e-03%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3, !noelle.pdg.inst.id !965" (5.527309e-04%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1, !noelle.pdg.inst.id !54" (1.526988e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8, !noelle.pdg.inst.id !67" (1.472721e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Disable "Gsm_RPE_Encoding" as cold function
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Disable "Gsm_LPC_Analysis" as cold function
Noelle:  Function "Autocorrelation"
Noelle:  Disable "Autocorrelation" as cold function
Noelle:  Function "Weighting_filter"
Noelle:  Disable "Weighting_filter" as cold function
Noelle:  Function "Gsm_Preprocess"
Noelle:  Disable "Gsm_Preprocess" as cold function
Noelle:  Function "Long_term_analysis_filtering"
Noelle:  Disable "Long_term_analysis_filtering" as cold function
Noelle:  Function "Reflection_coefficients"
Noelle:  Disable "Reflection_coefficients" as cold function
Noelle:  Function "APCM_quantization"
Noelle:  Disable "APCM_quantization" as cold function
Noelle:  Function "APCM_inverse_quantization"
Noelle:  Disable "APCM_inverse_quantization" as cold function
Noelle:  Function "gsm_div"
Noelle:  Disable "gsm_div" as cold function
Noelle:  Function "RPE_grid_selection"
Noelle:  Disable "RPE_grid_selection" as cold function
Noelle:  Function "RPE_grid_positioning"
Noelle:  Disable "RPE_grid_positioning" as cold function
Noelle:  Function "LARp_to_rp"
Noelle:  Disable "LARp_to_rp" as cold function
Noelle:  Function "gsm_asr"
Noelle:  Disable "gsm_asr" as cold function
Noelle:  Function "Coefficients_0_12"
Noelle:  Disable "Coefficients_0_12" as cold function
Noelle:  Function "Coefficients_27_39"
Noelle:  Disable "Coefficients_27_39" as cold function
Noelle:  Function "Quantization_and_coding"
Noelle:  Disable "Quantization_and_coding" as cold function
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Disable "Decoding_of_the_coded_Log_Area_Ratios" as cold function
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:  Disable "Transformation_to_Log_Area_Ratios" as cold function
Noelle:  Function "gsm_norm"
Noelle:  Disable "gsm_norm" as cold function
Noelle:  Function "Coefficients_13_26"
Noelle:  Disable "Coefficients_13_26" as cold function
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:  Disable "APCM_quantization_xmaxc_to_exp_mant" as cold function
Noelle:  Function "gsm_mult"
Noelle:  Disable "gsm_mult" as cold function
Noelle:  Function "Coefficients_40_159"
Noelle:  Disable "Coefficients_40_159" as cold function
Noelle:  Function "gsm_sub"
Noelle:  Disable "gsm_sub" as cold function
Noelle:  Function "gsm_asl"
Noelle:  Disable "gsm_asl" as cold function
Noelle:  Function "gsm_add"
Noelle:  Disable "gsm_add" as cold function
Noelle:  Function "audio_init_input"
Noelle:  Disable "audio_init_input" as cold function
Noelle:  Function "get_u32"
Noelle:  Disable "get_u32" as cold function
Noelle:  Function "parse_argv0"
Noelle:  Disable "parse_argv0" as cold function
Noelle:  Function "okay_as_input"
Noelle:  Disable "okay_as_input" as cold function
Noelle:  Function "gsm_option"
Noelle:  Disable "gsm_option" as cold function
Noelle:  Function "prepare_io"
Noelle:  Disable "prepare_io" as cold function
Noelle:  Function "endname"
Noelle:  Disable "endname" as cold function
Noelle:  Function "open_output"
Noelle:  Disable "open_output" as cold function
Noelle:  Function "gsm_create"
Noelle:  Disable "gsm_create" as cold function
Noelle:  Function "set_format"
Noelle:  Disable "set_format" as cold function
Noelle:  Function "gsm_destroy"
Noelle:  Disable "gsm_destroy" as cold function
Noelle:  Function "catch_signals"
Noelle:  Disable "catch_signals" as cold function
Noelle:  Function "emalloc"
Noelle:  Disable "emalloc" as cold function
Noelle:  Function "fstat"
Noelle:  Disable "fstat" as cold function
Noelle:  Function "alaw_input"
Noelle:  Disable "alaw_input" as cold function
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:  Disable "Gsm_Long_Term_Synthesis_Filtering" as cold function
Noelle:  Function "ulaw_output"
Noelle:  Disable "ulaw_output" as cold function
Noelle:  Function "linear_output"
Noelle:  Disable "linear_output" as cold function
Noelle:  Function "linear_input"
Noelle:  Disable "linear_input" as cold function
Noelle:  Function "gsm_L_asl"
Noelle:  Disable "gsm_L_asl" as cold function
Noelle:  Function "gsm_abs"
Noelle:  Disable "gsm_abs" as cold function
Noelle:  Function "Postprocessing"
Noelle:  Disable "Postprocessing" as cold function
Noelle:  Function "Gsm_Decoder"
Noelle:  Disable "Gsm_Decoder" as cold function
Noelle:  Function "gsm_L_mult"
Noelle:  Disable "gsm_L_mult" as cold function
Noelle:  Function "gsm_L_add"
Noelle:  Disable "gsm_L_add" as cold function
Noelle:  Function "gsm_L_sub"
Noelle:  Disable "gsm_L_sub" as cold function
Noelle:  Function "alaw_output"
Noelle:  Disable "alaw_output" as cold function
Noelle:  Function "gsm_decode"
Noelle:  Disable "gsm_decode" as cold function
Noelle:  Function "put_u32"
Noelle:  Disable "put_u32" as cold function
Noelle:  Function "audio_init_output"
Noelle:  Disable "audio_init_output" as cold function
Noelle:  Function "gsm_L_asr"
Noelle:  Disable "gsm_L_asr" as cold function
Noelle:  Function "process"
Noelle:  Disable "process" as cold function
Noelle:  Function "onintr"
Noelle:  Disable "onintr" as cold function
Noelle:  Function "help"
Noelle:  Disable "help" as cold function
Noelle:  Function "version"
Noelle:  Disable "version" as cold function
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Disable "Gsm_RPE_Decoding" as cold function
Noelle:  Function "ok_to_replace"
Noelle:  Disable "ok_to_replace" as cold function
Noelle:  Function "codename"
Noelle:  Disable "codename" as cold function
Noelle:  Function "length_okay"
Noelle:  Disable "length_okay" as cold function
Noelle:  Function "plainname"
Noelle:  Disable "plainname" as cold function
Noelle:  Function "gsm_mult_r"
Noelle:  Disable "gsm_mult_r" as cold function
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:  Disable "Short_term_synthesis_filtering" as cold function
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Disable "Gsm_Short_Term_Synthesis_Filter" as cold function
Noelle:  Function "getchar"
Noelle:  Disable "getchar" as cold function
Noelle:  Function "generic_init"
Noelle:  Disable "generic_init" as cold function
Noelle:  Function "suffix"
Noelle:  Disable "suffix" as cold function
Noelle:  Function "normalname"
Noelle:  Disable "normalname" as cold function
Noelle:  Function "grok_format"
Noelle:  Disable "grok_format" as cold function
Noelle:  Function "update_own"
Noelle:  Disable "update_own" as cold function
Noelle:  Function "update_mode"
Noelle:  Disable "update_mode" as cold function
Noelle:  Function "update_times"
Noelle:  Disable "update_times" as cold function
Noelle:  Function "process_decode"
Noelle:  Disable "process_decode" as cold function
Noelle:  Function "open_input"
Noelle:  Disable "open_input" as cold function
Planner:    There are 8 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:    Loop 57 has 3.019279e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 12 has 4.874931e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 5 has 5.921454e+00 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 8 has 1.102200e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:  There are 4 loop nesting trees in the program
Planner:    ID: 19 (1)
Planner:      Function: "Calculation_of_the_LTP_parameters"
Planner:      Loop: "  %exitcond30 = icmp eq i64 %indvars.iv28, 121, !noelle.pdg.inst.id !700"
Planner:      Loop nesting level: 1
Planner:      Hotness = 2.497640e-01 %
Planner:      Average instructions per invocation = 2.041800e+04 %
Planner:      Average iterations per invocation = 8.199997e+01 %
Planner:    
Planner:    ID: 56 (1)
Planner:      Function: "Short_term_analysis_filtering"
Planner:      Loop: "  %6 = add nsw i32 %.01, -1, !noelle.pdg.inst.id !54"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.526988e-01 %
Planner:      Average instructions per invocation = 1.248300e+04 %
Planner:      Average iterations per invocation = 4.087497e+01 %
Planner:    
Planner:    ID: 4 (1)
Planner:      Function: "process_encode"
Planner:      Loop: "  %exitcond = icmp eq i32 %.01, 1000000000, !noelle.pdg.inst.id !396"
Planner:      Loop nesting level: 1
Planner:      Hotness = 4.206990e+00 %
Planner:      Average instructions per invocation = 9.965365e+09 %
Planner:      Average iterations per invocation = 7.158279e+08 %
Planner:    
Planner:    ID: 1 (1)
Planner:      Function: "main"
Planner:      Loop: "  %38 = icmp eq i32 %.01, 0, !noelle.pdg.inst.id !10822"
Planner:      Loop nesting level: 1
Planner:      Hotness = 8.925403e+08 %
Planner:      Average instructions per invocation = 2.114217e+18 %
Planner:      Average iterations per invocation = 2.147484e+09 %
Planner:    
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [40 x i16], align 16, !noelle.pdg.inst.id !543
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [40 x i16], align 16, !noelle.pdg.inst.id !543
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 19 saves only 2.467793e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 56 saves only 4.211970e-02 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [33 x i8], align 16, !noelle.pdg.inst.id !379
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca [160 x i16], align 16, !noelle.pdg.inst.id !378
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [33 x i8], align 16, !noelle.pdg.inst.id !379
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca [160 x i16], align 16, !noelle.pdg.inst.id !378
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 4 saves only 1.208783e+00 when parallelized. Skip it
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 1
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %38 = icmp eq i32 %.01, 0, !noelle.pdg.inst.id !10822"
Planner: LoopSelector:      Coverage: 8.925403e+08%
Planner: LoopSelector:      Whole-program savings = 1.269218e+01%
Planner: LoopSelector:      Loop savings = 1.422029e-06%
Planner: LoopSelector: End
Planner:   Maximum time saved = 1.269218e+01% (30064770890)
Planner:   Maximum time saved with DOALL only = 0.000000e+00% (0)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %4 = getelementptr [13 x i8], [13 x i8]* @.str.12, i64 0, i64 0, !noelle.pdg.inst.id !10724" (3.039560e-08%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %38 = icmp eq i32 %.01, 0, !noelle.pdg.inst.id !10824" (8.472795e+01%)
Noelle:  Function "ulaw_input"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 160, !noelle.pdg.inst.id !68" (4.653093e+00%)
Noelle:  Function "process_encode"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 1000000000, !noelle.pdg.inst.id !398" (4.206990e+00%)
Noelle:     Loop "  %14 = load i32 (i16*)*, i32 (i16*)** @input, align 8, !tbaa !389, !noelle.pdg.inst.id !51" (1.789432e+00%)
Noelle:  Function "gsm_encode"
Noelle:  Function "Gsm_Coder"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4, !noelle.pdg.inst.id !141" (3.533278e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 40, !noelle.pdg.inst.id !151" (9.815089e-03%)
Noelle:  Disable loop "6" as cold code
Noelle:  Function "Gsm_Long_Term_Predictor"
Noelle:  Function "Calculation_of_the_LTP_parameters"
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 40, !noelle.pdg.inst.id !551" (7.628654e-03%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 40, !noelle.pdg.inst.id !607" (5.908317e-03%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 121, !noelle.pdg.inst.id !702" (2.497640e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 40, !noelle.pdg.inst.id !937" (6.409852e-03%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3, !noelle.pdg.inst.id !967" (5.527309e-04%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "Gsm_Short_Term_Analysis_Filter"
Noelle:  Function "Short_term_analysis_filtering"
Noelle:     Loop "  %6 = add nsw i32 %.01, -1, !noelle.pdg.inst.id !56" (1.526988e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8, !noelle.pdg.inst.id !69" (1.472721e-01%)
Noelle:  Function "Gsm_RPE_Encoding"
Noelle:  Disable "Gsm_RPE_Encoding" as cold function
Noelle:  Function "Gsm_LPC_Analysis"
Noelle:  Disable "Gsm_LPC_Analysis" as cold function
Noelle:  Function "Autocorrelation"
Noelle:  Disable "Autocorrelation" as cold function
Noelle:  Function "Weighting_filter"
Noelle:  Disable "Weighting_filter" as cold function
Noelle:  Function "Gsm_Preprocess"
Noelle:  Disable "Gsm_Preprocess" as cold function
Noelle:  Function "Long_term_analysis_filtering"
Noelle:  Disable "Long_term_analysis_filtering" as cold function
Noelle:  Function "Reflection_coefficients"
Noelle:  Disable "Reflection_coefficients" as cold function
Noelle:  Function "APCM_quantization"
Noelle:  Disable "APCM_quantization" as cold function
Noelle:  Function "APCM_inverse_quantization"
Noelle:  Disable "APCM_inverse_quantization" as cold function
Noelle:  Function "gsm_div"
Noelle:  Disable "gsm_div" as cold function
Noelle:  Function "RPE_grid_selection"
Noelle:  Disable "RPE_grid_selection" as cold function
Noelle:  Function "RPE_grid_positioning"
Noelle:  Disable "RPE_grid_positioning" as cold function
Noelle:  Function "LARp_to_rp"
Noelle:  Disable "LARp_to_rp" as cold function
Noelle:  Function "gsm_asr"
Noelle:  Disable "gsm_asr" as cold function
Noelle:  Function "Coefficients_27_39"
Noelle:  Disable "Coefficients_27_39" as cold function
Noelle:  Function "Coefficients_0_12"
Noelle:  Disable "Coefficients_0_12" as cold function
Noelle:  Function "Quantization_and_coding"
Noelle:  Disable "Quantization_and_coding" as cold function
Noelle:  Function "Decoding_of_the_coded_Log_Area_Ratios"
Noelle:  Disable "Decoding_of_the_coded_Log_Area_Ratios" as cold function
Noelle:  Function "Transformation_to_Log_Area_Ratios"
Noelle:  Disable "Transformation_to_Log_Area_Ratios" as cold function
Noelle:  Function "gsm_norm"
Noelle:  Disable "gsm_norm" as cold function
Noelle:  Function "Coefficients_13_26"
Noelle:  Disable "Coefficients_13_26" as cold function
Noelle:  Function "APCM_quantization_xmaxc_to_exp_mant"
Noelle:  Disable "APCM_quantization_xmaxc_to_exp_mant" as cold function
Noelle:  Function "gsm_mult"
Noelle:  Disable "gsm_mult" as cold function
Noelle:  Function "Coefficients_40_159"
Noelle:  Disable "Coefficients_40_159" as cold function
Noelle:  Function "gsm_sub"
Noelle:  Disable "gsm_sub" as cold function
Noelle:  Function "gsm_asl"
Noelle:  Disable "gsm_asl" as cold function
Noelle:  Function "gsm_add"
Noelle:  Disable "gsm_add" as cold function
Noelle:  Function "audio_init_input"
Noelle:  Disable "audio_init_input" as cold function
Noelle:  Function "get_u32"
Noelle:  Disable "get_u32" as cold function
Noelle:  Function "parse_argv0"
Noelle:  Disable "parse_argv0" as cold function
Noelle:  Function "okay_as_input"
Noelle:  Disable "okay_as_input" as cold function
Noelle:  Function "gsm_option"
Noelle:  Disable "gsm_option" as cold function
Noelle:  Function "prepare_io"
Noelle:  Disable "prepare_io" as cold function
Noelle:  Function "endname"
Noelle:  Disable "endname" as cold function
Noelle:  Function "open_output"
Noelle:  Disable "open_output" as cold function
Noelle:  Function "gsm_create"
Noelle:  Disable "gsm_create" as cold function
Noelle:  Function "set_format"
Noelle:  Disable "set_format" as cold function
Noelle:  Function "catch_signals"
Noelle:  Disable "catch_signals" as cold function
Noelle:  Function "gsm_destroy"
Noelle:  Disable "gsm_destroy" as cold function
Noelle:  Function "emalloc"
Noelle:  Disable "emalloc" as cold function
Noelle:  Function "gsm_decode"
Noelle:  Disable "gsm_decode" as cold function
Noelle:  Function "Short_term_synthesis_filtering"
Noelle:  Disable "Short_term_synthesis_filtering" as cold function
Noelle:  Function "Postprocessing"
Noelle:  Disable "Postprocessing" as cold function
Noelle:  Function "Gsm_Short_Term_Synthesis_Filter"
Noelle:  Disable "Gsm_Short_Term_Synthesis_Filter" as cold function
Noelle:  Function "Gsm_Long_Term_Synthesis_Filtering"
Noelle:  Disable "Gsm_Long_Term_Synthesis_Filtering" as cold function
Noelle:  Function "Gsm_RPE_Decoding"
Noelle:  Disable "Gsm_RPE_Decoding" as cold function
Noelle:  Function "Gsm_Decoder"
Noelle:  Disable "Gsm_Decoder" as cold function
Noelle:  Function "open_input"
Noelle:  Disable "open_input" as cold function
Noelle:  Function "gsm_L_asr"
Noelle:  Disable "gsm_L_asr" as cold function
Noelle:  Function "gsm_L_asl"
Noelle:  Disable "gsm_L_asl" as cold function
Noelle:  Function "gsm_L_sub"
Noelle:  Disable "gsm_L_sub" as cold function
Noelle:  Function "gsm_L_add"
Noelle:  Disable "gsm_L_add" as cold function
Noelle:  Function "gsm_L_mult"
Noelle:  Disable "gsm_L_mult" as cold function
Noelle:  Function "gsm_abs"
Noelle:  Disable "gsm_abs" as cold function
Noelle:  Function "gsm_mult_r"
Noelle:  Disable "gsm_mult_r" as cold function
Noelle:  Function "fstat"
Noelle:  Disable "fstat" as cold function
Noelle:  Function "suffix"
Noelle:  Disable "suffix" as cold function
Noelle:  Function "normalname"
Noelle:  Disable "normalname" as cold function
Noelle:  Function "getchar"
Noelle:  Disable "getchar" as cold function
Noelle:  Function "ok_to_replace"
Noelle:  Disable "ok_to_replace" as cold function
Noelle:  Function "length_okay"
Noelle:  Disable "length_okay" as cold function
Noelle:  Function "plainname"
Noelle:  Disable "plainname" as cold function
Noelle:  Function "audio_init_output"
Noelle:  Disable "audio_init_output" as cold function
Noelle:  Function "ulaw_output"
Noelle:  Disable "ulaw_output" as cold function
Noelle:  Function "linear_output"
Noelle:  Disable "linear_output" as cold function
Noelle:  Function "alaw_output"
Noelle:  Disable "alaw_output" as cold function
Noelle:  Function "generic_init"
Noelle:  Disable "generic_init" as cold function
Noelle:  Function "onintr"
Noelle:  Disable "onintr" as cold function
Noelle:  Function "help"
Noelle:  Disable "help" as cold function
Noelle:  Function "version"
Noelle:  Disable "version" as cold function
Noelle:  Function "update_own"
Noelle:  Disable "update_own" as cold function
Noelle:  Function "update_mode"
Noelle:  Disable "update_mode" as cold function
Noelle:  Function "update_times"
Noelle:  Disable "update_times" as cold function
Noelle:  Function "process_decode"
Noelle:  Disable "process_decode" as cold function
Noelle:  Function "grok_format"
Noelle:  Disable "grok_format" as cold function
Noelle:  Function "codename"
Noelle:  Disable "codename" as cold function
Noelle:  Function "process"
Noelle:  Disable "process" as cold function
Noelle:  Function "linear_input"
Noelle:  Disable "linear_input" as cold function
Noelle:  Function "alaw_input"
Noelle:  Disable "alaw_input" as cold function
Noelle:  Function "put_u32"
Noelle:  Disable "put_u32" as cold function
Parallelizer:    There are 8 loops in the program we are going to consider
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 1 = "  %38 = icmp eq i32 %.01, 0, !noelle.pdg.inst.id !10824"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %28 = sub nsw i32 %0, %27, !noelle.pdg.inst.id !10815
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %31 = getelementptr inbounds i8*, i8** %1, i64 %30, !noelle.pdg.inst.id !10819
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !noelle.pdg.inst.id !727
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !10719, !noelle.pdg.inst.id !729
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %34 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !noelle.pdg.inst.id !731
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc toast.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/toast'
