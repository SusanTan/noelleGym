make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_s'
./runEnablers.sh susan_s susan_s.bc large "-lm -lstdc++ -lpthread -ltermcap" -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_s /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_s
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_s

opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs susan_s.bc -o baseline.bc
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_s /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_s
Running: ./baseline_prof input_large.pgm output_large.smoothing.pgm -s in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/MiBench/automotive/susan
--------------------------------------------------------------------------------------
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_s
DONE
opt -pgo-test-profile-file=/tmp/tmp.G0p8RWMxcI -block-freq -pgo-instr-use baseline.bc -o baseline_pre.bc
opt --strip-debug --strip-debug-declare baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.ZiQ58GjzJs (.ll version is /tmp/tmp.xTPgeDHSCI)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.QNXxOxIcGz (.ll version is /tmp/tmp.49oJ4VyGmc)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.ZiQ58GjzJs -o /tmp/tmp.QNXxOxIcGz
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.ZiQ58GjzJs -o /tmp/tmp.QNXxOxIcGz
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.ZiQ58GjzJs -o /tmp/tmp.QNXxOxIcGz
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.ZiQ58GjzJs -o /tmp/tmp.QNXxOxIcGz
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       usage
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       getint
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       susan_corners
DeadFunctionEliminator:       susan_corners_quick
DeadFunctionEliminator:       main
DeadFunctionEliminator:       atof
DeadFunctionEliminator:       atoi
DeadFunctionEliminator:       strtol
DeadFunctionEliminator:       getc
DeadFunctionEliminator:       fgets
DeadFunctionEliminator:       fprintf
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       get_image
DeadFunctionEliminator:       fopen
DeadFunctionEliminator:       fgetc
DeadFunctionEliminator:       malloc
DeadFunctionEliminator:       fread
DeadFunctionEliminator:       fclose
DeadFunctionEliminator:       put_image
DeadFunctionEliminator:       fwrite
DeadFunctionEliminator:       int_to_uchar
DeadFunctionEliminator:       setup_brightness_lut
DeadFunctionEliminator:       exp
DeadFunctionEliminator:       susan_principle
DeadFunctionEliminator:       llvm.memset.p0i8.i64
DeadFunctionEliminator:       susan_principle_small
DeadFunctionEliminator:       median
DeadFunctionEliminator:       free
DeadFunctionEliminator:       enlarge
DeadFunctionEliminator:       llvm.memcpy.p0i8.p0i8.i64
DeadFunctionEliminator:       susan_smoothing
DeadFunctionEliminator:       edge_draw
DeadFunctionEliminator:       susan_thin
DeadFunctionEliminator:       susan_edges
DeadFunctionEliminator:       susan_edges_small
DeadFunctionEliminator:       corner_draw
DeadFunctionEliminator:       strtod
DeadFunctionEliminator:       puts
DeadFunctionEliminator:       sqrtf
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:     Loop "  %20 = icmp slt i32 %.013, %0" (8.140767e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (1.000000e+02%)
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %139 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %145 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (6.299701e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (6.082092e-04%)
Noelle:     Loop "  %74 = load i32, i32* %9, align 4, !tbaa !34" (9.998646e+01%)
Noelle:     Loop "  %80 = load i32, i32* %8, align 4, !tbaa !34" (9.998596e+01%)
Noelle:     Loop "  %100 = icmp sgt i32 %.017, %.09" (9.932773e+01%)
Noelle:     Loop "  %102 = icmp sgt i32 %.016, %.09" (9.531099e+01%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (8.121980e-04%)
Noelle:     Loop "  %27 = icmp slt i32 %.1, %4" (3.663345e-05%)
Noelle:     Loop "  %58 = icmp slt i32 %.2, %4" (1.060351e-02%)
Noelle:     Loop "  %61 = load i32, i32* %3, align 4, !tbaa !30" (1.059536e-02%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (1.446082e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (1.380799e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (1.192935e-07%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  br label %NodeBlock" (9.236639e-09%)
Noelle:     Loop "  %18 = mul nsw i32 %.02, 10" (1.643809e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv4, %19" (0.000000e+00%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %8" (0.000000e+00%)
Noelle:     Loop "  %38 = icmp slt i32 %.12, %.pre-phi" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %23 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv29, %20" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %19" (0.000000e+00%)
Noelle:     Loop "  %340 = icmp slt i64 %indvars.iv25, %337" (0.000000e+00%)
Noelle:     Loop "  %347 = icmp slt i64 %indvars.iv, %336" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv23, %109" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i64 %indvars.iv, %108" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %33 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %10 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv45, %24" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv43, %23" (0.000000e+00%)
Noelle:     Loop "  %613 = icmp slt i64 %indvars.iv41, %604" (0.000000e+00%)
Noelle:     Loop "  %628 = icmp slt i64 %indvars.iv, %603" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %381 = icmp slt i64 %indvars.iv34, %372" (0.000000e+00%)
Noelle:     Loop "  %396 = icmp slt i64 %indvars.iv, %371" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %20 = icmp slt i32 %.013, %0" (8.140767e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (1.000000e+02%)
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %139 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %145 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (6.299701e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (6.082092e-04%)
Noelle:     Loop "  %74 = load i32, i32* %9, align 4, !tbaa !34" (9.998646e+01%)
Noelle:     Loop "  %80 = load i32, i32* %8, align 4, !tbaa !34" (9.998596e+01%)
Noelle:     Loop "  %100 = icmp sgt i32 %.017, %.09" (9.932773e+01%)
Noelle:     Loop "  %102 = icmp sgt i32 %.016, %.09" (9.531099e+01%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (8.121980e-04%)
Noelle:     Loop "  %27 = icmp slt i32 %.1, %4" (3.663345e-05%)
Noelle:     Loop "  %58 = icmp slt i32 %.2, %4" (1.060351e-02%)
Noelle:     Loop "  %61 = load i32, i32* %3, align 4, !tbaa !30" (1.059536e-02%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (1.446082e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (1.380799e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (1.192935e-07%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  br label %NodeBlock" (9.236639e-09%)
Noelle:     Loop "  %18 = mul nsw i32 %.02, 10" (1.643809e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv4, %19" (0.000000e+00%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %8" (0.000000e+00%)
Noelle:     Loop "  %38 = icmp slt i32 %.12, %.pre-phi" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %23 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv29, %20" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %19" (0.000000e+00%)
Noelle:     Loop "  %340 = icmp slt i64 %indvars.iv25, %337" (0.000000e+00%)
Noelle:     Loop "  %347 = icmp slt i64 %indvars.iv, %336" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv23, %109" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i64 %indvars.iv, %108" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %33 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %10 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv45, %24" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv43, %23" (0.000000e+00%)
Noelle:     Loop "  %613 = icmp slt i64 %indvars.iv41, %604" (0.000000e+00%)
Noelle:     Loop "  %628 = icmp slt i64 %indvars.iv, %603" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %381 = icmp slt i64 %indvars.iv34, %372" (0.000000e+00%)
Noelle:     Loop "  %396 = icmp slt i64 %indvars.iv, %371" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-inline baseline_pre.bc "-noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier"
NOELLE: Inliner: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.Kn4VphixYQ (.ll version is /tmp/tmp.9lsroUU69X)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.1aYMcXDdIG (.ll version is /tmp/tmp.PuFZprZmLL)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
Inliner: Start
Inliner:   Number of program instructions = 5839
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 33
DOALL:     	  %95 = load i8, i8* %94, align 1, !tbaa !40
DOALL:     	  %96 = zext i8 %95 to i64
DOALL:     	  %97 = getelementptr inbounds i8, i8* %5, i64 %96
DOALL:     	  %.018 = phi i32 [ 0, %83 ], [ %.119.lcssa, %118 ]
DOALL:     	  %.0 = phi i32 [ 0, %83 ], [ %.1.lcssa, %118 ]
DOALL:     	  %.119 = phi i32 [ %114, %101 ], [ %.018, %.preheader.preheader ]
DOALL:     	  %.1 = phi i32 [ %116, %101 ], [ %.0, %.preheader.preheader ]
DOALL:     	  %103 = load i8, i8* %.18, align 1, !tbaa !40
DOALL:     	  %104 = zext i8 %103 to i32
DOALL:     	  %108 = zext i8 %103 to i64
DOALL:     	  %109 = sub nsw i64 0, %108
DOALL:     	  %110 = getelementptr inbounds i8, i8* %97, i64 %109
DOALL:     	  %111 = load i8, i8* %110, align 1, !tbaa !40
DOALL:     	  %112 = zext i8 %111 to i32
DOALL:     	  %113 = mul nuw nsw i32 %107, %112
DOALL:     	  %114 = add nsw i32 %.119, %113
DOALL:     	  %115 = mul nuw nsw i32 %113, %104
DOALL:     	  %116 = add nsw i32 %.1, %115
DOALL:     	  %.119.lcssa = phi i32 [ %.119, %.preheader ]
DOALL:     	  %.1.lcssa = phi i32 [ %.1, %.preheader ]
DOALL:     	  %.018.lcssa = phi i32 [ %.018, %98 ]
DOALL:     	  %.0.lcssa = phi i32 [ %.0, %98 ]
DOALL:     	  %122 = add nsw i32 %.018.lcssa, -10000
DOALL:     	  %123 = icmp eq i32 %122, 0
DOALL:     	  br i1 %123, label %124, label %126, !prof !45
DOALL:     	  %125 = tail call zeroext i8 @median(i8* %84, i32 %.111, i32 %91, i32 %79)
DOALL:     	  %127 = zext i8 %95 to i32
DOALL:     	  %128 = mul nsw i32 %127, -10000
DOALL:     	  %129 = add i32 %.0.lcssa, %128
DOALL:     	  %130 = sdiv i32 %129, %122
DOALL:     	  %131 = trunc i32 %130 to i8
DOALL:     	  %storemerge20 = phi i8 [ %131, %126 ], [ %125, %124 ]
DOALL:     	  store i8 %storemerge20, i8* %.12, align 1, !tbaa !40
DOALL:     External nodes: 13
DOALL:     	  %.111 = phi i32 [ %.09, %67 ], [ %134, %133 ]
DOALL:     	  %.12 = phi i8* [ %.2, %132 ], [ %.01, %76 ]
DOALL:     	  %79 = load i32, i32* %8, align 4, !tbaa !34
DOALL:     	  br i1 %82, label %83, label %133, !prof !42
DOALL:     	  %84 = load i8*, i8** %7, align 8, !tbaa !30
DOALL:     	  %91 = trunc i64 %indvars.iv to i32
DOALL:     	  %94 = getelementptr inbounds i8, i8* %84, i64 %93
DOALL:     	  br i1 %99, label %121, label %.preheader.preheader, !prof !43
DOALL:     	  %.18 = phi i8* [ %102, %101 ], [ %.07, %.preheader.preheader ]
DOALL:     	  br i1 %100, label %118, label %101, !prof !44
DOALL:     	  %107 = zext i8 %106 to i32
DOALL:     	  br label %132
DOALL:     	  br label %132
DOALL:     Edges: 93
DOALL:     Loop-carried data dependences
DOALL:         %95 = load i8, i8* %94, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %125 = tail call zeroext i8 @median(i8* %84, i32 %.111, i32 %91, i32 %79) --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %125 = tail call zeroext i8 @median(i8* %84, i32 %.111, i32 %91, i32 %79) via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %95 = load i8, i8* %94, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %103 = load i8, i8* %.18, align 1, !tbaa !40 via memory
DOALL:         %103 = load i8, i8* %.18, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 4
DOALL:     	  %.01 = phi i8* [ %1, %67 ], [ %.12.lcssa, %133 ]
DOALL:     	  %.12 = phi i8* [ %.2, %132 ], [ %.01, %76 ]
DOALL:     	  %.2 = getelementptr inbounds i8, i8* %.12, i64 1
DOALL:     	  %.12.lcssa = phi i8* [ %.12, %78 ]
DOALL:     External nodes: 3
DOALL:     	  br i1 %75, label %76, label %.loopexit.loopexit, !prof !41
DOALL:     	  br i1 %82, label %83, label %133, !prof !42
DOALL:     	  store i8 %storemerge20, i8* %.12, align 1, !tbaa !40
DOALL:     Edges: 11
DOALL:     Loop-carried data dependences
DOALL:         %.12.lcssa = phi i8* [ %.12, %78 ] --->   %.01 = phi i8* [ %1, %67 ], [ %.12.lcssa, %133 ] via variable
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 12
Inliner:   Inlining in: susan_smoothing (324 instructions. The inlining will add 96 instructions),   %125 = tail call zeroext i8 @median(i8* %84, i32 %.111, i32 %91, i32 %79)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0" (7.827660e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (1.000000e+02%)
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %135 = load i32, i32* %9, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %141 = load i32, i32* %8, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp sgt i32 %.010, %.09" (6.299701e-04%)
Noelle:     Loop "  %52 = icmp sgt i32 %.013, %.09" (6.082092e-04%)
Noelle:     Loop "  %73 = load i32, i32* %9, align 4, !tbaa !34" (9.998646e+01%)
Noelle:     Loop "  %79 = load i32, i32* %8, align 4, !tbaa !34" (9.998596e+01%)
Noelle:     Loop "  %99 = icmp sgt i32 %.017, %.09" (9.932773e+01%)
Noelle:     Loop "  %100 = icmp sgt i32 %.016, %.09" (9.531099e+01%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (8.121981e-04%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (3.663345e-05%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (1.060351e-02%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (1.059536e-02%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (1.446082e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (1.380799e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (1.192935e-07%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (7.827660e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (1.643809e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0" (7.827660e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (1.000000e+02%)
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %206 = load i32, i32* %10, align 4, !tbaa !34" (1.609367e-07%)
Noelle:     Loop "  %212 = load i32, i32* %9, align 4, !tbaa !34" (1.609367e-07%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (6.299701e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (6.082092e-04%)
Noelle:     Loop "  %74 = load i32, i32* %10, align 4, !tbaa !34" (9.998646e+01%)
Noelle:     Loop "  %80 = load i32, i32* %9, align 4, !tbaa !34" (9.998596e+01%)
Noelle:     Loop "  %100 = icmp sgt i32 %.017, %.09" (9.932773e+01%)
Noelle:     Loop "  %101 = icmp sgt i32 %.016, %.09" (9.531099e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (1.380799e-07%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (1.192935e-07%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (8.121980e-04%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (3.663345e-05%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (1.060351e-02%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (1.059536e-02%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (1.446082e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (1.380799e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (1.192935e-07%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (7.827660e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (1.643809e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
NOELLE: FixedPoint:       There are 85 different instructions and 194 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.1aYMcXDdIG -o /tmp/tmp.1aYMcXDdIG
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.1aYMcXDdIG -o /tmp/tmp.1aYMcXDdIG
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
Inliner: Start
Inliner:   Number of program instructions = 5933
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 117
DOALL:     	  %96 = load i8, i8* %95, align 1, !tbaa !40
DOALL:     	  %97 = zext i8 %96 to i64
DOALL:     	  %98 = getelementptr inbounds i8, i8* %5, i64 %97
DOALL:     	  %.018 = phi i32 [ 0, %84 ], [ %.119.lcssa, %119 ]
DOALL:     	  %.0 = phi i32 [ 0, %84 ], [ %.1.lcssa, %119 ]
DOALL:     	  %.119 = phi i32 [ %115, %102 ], [ %.018, %.preheader.preheader ]
DOALL:     	  %.1 = phi i32 [ %117, %102 ], [ %.0, %.preheader.preheader ]
DOALL:     	  %104 = load i8, i8* %.18, align 1, !tbaa !40
DOALL:     	  %105 = zext i8 %104 to i32
DOALL:     	  %109 = zext i8 %104 to i64
DOALL:     	  %110 = sub nsw i64 0, %109
DOALL:     	  %111 = getelementptr inbounds i8, i8* %98, i64 %110
DOALL:     	  %112 = load i8, i8* %111, align 1, !tbaa !40
DOALL:     	  %113 = zext i8 %112 to i32
DOALL:     	  %114 = mul nuw nsw i32 %108, %113
DOALL:     	  %115 = add nsw i32 %.119, %114
DOALL:     	  %116 = mul nuw nsw i32 %114, %105
DOALL:     	  %117 = add nsw i32 %.1, %116
DOALL:     	  %.119.lcssa = phi i32 [ %.119, %.preheader ]
DOALL:     	  %.1.lcssa = phi i32 [ %.1, %.preheader ]
DOALL:     	  %.018.lcssa = phi i32 [ %.018, %99 ]
DOALL:     	  %.0.lcssa = phi i32 [ %.0, %99 ]
DOALL:     	  %123 = add nsw i32 %.018.lcssa, -10000
DOALL:     	  %124 = icmp eq i32 %123, 0
DOALL:     	  br i1 %124, label %125, label %197, !prof !45
DOALL:     	  %127 = add nsw i32 %.111, -1
DOALL:     	  %128 = mul nsw i32 %127, %80
DOALL:     	  %129 = add nsw i32 %128, %92
DOALL:     	  %130 = add nsw i32 %129, -1
DOALL:     	  %131 = sext i32 %130 to i64
DOALL:     	  %132 = getelementptr inbounds i8, i8* %85, i64 %131
DOALL:     	  %133 = load i8, i8* %132, align 1, !tbaa !40
DOALL:     	  %134 = zext i8 %133 to i32
DOALL:     	  %135 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 0
DOALL:     	  store i32 %134, i32* %135, align 16, !tbaa !34
DOALL:     	  %136 = sext i32 %129 to i64
DOALL:     	  %137 = getelementptr inbounds i8, i8* %85, i64 %136
DOALL:     	  %138 = load i8, i8* %137, align 1, !tbaa !40
DOALL:     	  %139 = zext i8 %138 to i32
DOALL:     	  %140 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 1
DOALL:     	  store i32 %139, i32* %140, align 4, !tbaa !34
DOALL:     	  %141 = add nsw i32 %129, 1
DOALL:     	  %142 = sext i32 %141 to i64
DOALL:     	  %143 = getelementptr inbounds i8, i8* %85, i64 %142
DOALL:     	  %144 = load i8, i8* %143, align 1, !tbaa !40
DOALL:     	  %145 = zext i8 %144 to i32
DOALL:     	  %146 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 2
DOALL:     	  store i32 %145, i32* %146, align 8, !tbaa !34
DOALL:     	  %147 = mul nsw i32 %.111, %80
DOALL:     	  %148 = add nsw i32 %147, %92
DOALL:     	  %149 = add nsw i32 %148, -1
DOALL:     	  %150 = sext i32 %149 to i64
DOALL:     	  %151 = getelementptr inbounds i8, i8* %85, i64 %150
DOALL:     	  %152 = load i8, i8* %151, align 1, !tbaa !40
DOALL:     	  %153 = zext i8 %152 to i32
DOALL:     	  %154 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 3
DOALL:     	  store i32 %153, i32* %154, align 4, !tbaa !34
DOALL:     	  %155 = add nsw i32 %148, 1
DOALL:     	  %156 = sext i32 %155 to i64
DOALL:     	  %157 = getelementptr inbounds i8, i8* %85, i64 %156
DOALL:     	  %158 = load i8, i8* %157, align 1, !tbaa !40
DOALL:     	  %159 = zext i8 %158 to i32
DOALL:     	  %160 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 4
DOALL:     	  store i32 %159, i32* %160, align 16, !tbaa !34
DOALL:     	  %161 = add nsw i32 %.111, 1
DOALL:     	  %162 = mul nsw i32 %161, %80
DOALL:     	  %163 = add nsw i32 %162, %92
DOALL:     	  %164 = add nsw i32 %163, -1
DOALL:     	  %165 = sext i32 %164 to i64
DOALL:     	  %166 = getelementptr inbounds i8, i8* %85, i64 %165
DOALL:     	  %167 = load i8, i8* %166, align 1, !tbaa !40
DOALL:     	  %168 = zext i8 %167 to i32
DOALL:     	  %169 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 5
DOALL:     	  store i32 %168, i32* %169, align 4, !tbaa !34
DOALL:     	  %170 = sext i32 %163 to i64
DOALL:     	  %171 = getelementptr inbounds i8, i8* %85, i64 %170
DOALL:     	  %172 = load i8, i8* %171, align 1, !tbaa !40
DOALL:     	  %173 = zext i8 %172 to i32
DOALL:     	  %174 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 6
DOALL:     	  store i32 %173, i32* %174, align 8, !tbaa !34
DOALL:     	  %175 = add nsw i32 %163, 1
DOALL:     	  %176 = sext i32 %175 to i64
DOALL:     	  %177 = getelementptr inbounds i8, i8* %85, i64 %176
DOALL:     	  %178 = load i8, i8* %177, align 1, !tbaa !40
DOALL:     	  %179 = zext i8 %178 to i32
DOALL:     	  %180 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 7
DOALL:     	  store i32 %179, i32* %180, align 4, !tbaa !34
DOALL:     	  %indvars.iv6.i = phi i64 [ %indvars.iv.next7.i, %190 ], [ 7, %125 ]
DOALL:     	  %.01.i = phi i32 [ %191, %190 ], [ 0, %125 ]
DOALL:     	  %exitcond8.i = icmp eq i32 %.01.i, 7
DOALL:     	  br i1 %exitcond8.i, label %median.exit, label %.preheader.i, !prof !46
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %._crit_edge.i ], [ 0, %.preheader.i ]
DOALL:     	  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i
DOALL:     	  br i1 %exitcond.i, label %190, label %183, !prof !47
DOALL:     	  %184 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 %indvars.iv.i
DOALL:     	  %185 = load i32, i32* %184, align 4, !tbaa !34
DOALL:     	  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
DOALL:     	  %186 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 %indvars.iv.next.i
DOALL:     	  %187 = load i32, i32* %186, align 4, !tbaa !34
DOALL:     	  %188 = icmp sgt i32 %185, %187
DOALL:     	  br i1 %188, label %189, label %.._crit_edge_crit_edge.i, !prof !48
DOALL:     	  store i32 %187, i32* %184, align 4, !tbaa !34
DOALL:     	  store i32 %185, i32* %186, align 4, !tbaa !34
DOALL:     	  %191 = add nuw nsw i32 %.01.i, 1
DOALL:     	  %indvars.iv.next7.i = add nsw i64 %indvars.iv6.i, -1
DOALL:     	  %192 = load i32, i32* %154, align 4, !tbaa !34
DOALL:     	  %193 = load i32, i32* %160, align 16, !tbaa !34
DOALL:     	  %194 = add nsw i32 %192, %193
DOALL:     	  %195 = sdiv i32 %194, 2
DOALL:     	  %196 = trunc i32 %195 to i8
DOALL:     	  %198 = zext i8 %96 to i32
DOALL:     	  %199 = mul nsw i32 %198, -10000
DOALL:     	  %200 = add i32 %.0.lcssa, %199
DOALL:     	  %201 = sdiv i32 %200, %123
DOALL:     	  %202 = trunc i32 %201 to i8
DOALL:     	  %storemerge20 = phi i8 [ %202, %197 ], [ %196, %median.exit ]
DOALL:     	  store i8 %storemerge20, i8* %.12, align 1, !tbaa !40
DOALL:     External nodes: 22
DOALL:     	  %.111 = phi i32 [ %.09, %68 ], [ %205, %204 ]
DOALL:     	  %.12 = phi i8* [ %.2, %203 ], [ %.01, %77 ]
DOALL:     	  %80 = load i32, i32* %9, align 4, !tbaa !34
DOALL:     	  br i1 %83, label %84, label %204, !prof !42
DOALL:     	  %85 = load i8*, i8** %8, align 8, !tbaa !30
DOALL:     	  %92 = trunc i64 %indvars.iv to i32
DOALL:     	  %95 = getelementptr inbounds i8, i8* %85, i64 %94
DOALL:     	  br i1 %100, label %122, label %.preheader.preheader, !prof !43
DOALL:     	  %.18 = phi i8* [ %103, %102 ], [ %.07, %.preheader.preheader ]
DOALL:     	  br i1 %101, label %119, label %102, !prof !44
DOALL:     	  %108 = zext i8 %107 to i32
DOALL:     	  %126 = bitcast [8 x i32]* %7 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %126) #11
DOALL:     	  br label %181
DOALL:     	  br label %182
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %182
DOALL:     	  br label %181
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %126) #11
DOALL:     	  br label %203
DOALL:     	  br label %203
DOALL:     Edges: 393
DOALL:     Loop-carried data dependences
DOALL:         %96 = load i8, i8* %95, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %104 = load i8, i8* %.18, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %133 = load i8, i8* %132, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %138 = load i8, i8* %137, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %144 = load i8, i8* %143, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %152 = load i8, i8* %151, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %158 = load i8, i8* %157, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %167 = load i8, i8* %166, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %172 = load i8, i8* %171, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %178 = load i8, i8* %177, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %158 = load i8, i8* %157, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %152 = load i8, i8* %151, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %144 = load i8, i8* %143, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %133 = load i8, i8* %132, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %167 = load i8, i8* %166, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %178 = load i8, i8* %177, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %172 = load i8, i8* %171, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %138 = load i8, i8* %137, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %96 = load i8, i8* %95, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %104 = load i8, i8* %.18, align 1, !tbaa !40 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 4
DOALL:     	  %.01 = phi i8* [ %1, %68 ], [ %.12.lcssa, %204 ]
DOALL:     	  %.12 = phi i8* [ %.2, %203 ], [ %.01, %77 ]
DOALL:     	  %.2 = getelementptr inbounds i8, i8* %.12, i64 1
DOALL:     	  %.12.lcssa = phi i8* [ %.12, %79 ]
DOALL:     External nodes: 3
DOALL:     	  br i1 %76, label %77, label %.loopexit.loopexit, !prof !41
DOALL:     	  br i1 %83, label %84, label %204, !prof !42
DOALL:     	  store i8 %storemerge20, i8* %.12, align 1, !tbaa !40
DOALL:     Edges: 11
DOALL:     Loop-carried data dependences
DOALL:         %.12.lcssa = phi i8* [ %.12, %79 ] --->   %.01 = phi i8* [ %1, %68 ], [ %.12.lcssa, %204 ] via variable
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 13
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 5
DOALL:     	  %.07 = phi i8* [ %90, %84 ], [ %120, %119 ]
DOALL:     	  %.18 = phi i8* [ %103, %102 ], [ %.07, %.preheader.preheader ]
DOALL:     	  %103 = getelementptr inbounds i8, i8* %.18, i64 1
DOALL:     	  %.18.lcssa = phi i8* [ %.18, %.preheader ]
DOALL:     	  %120 = getelementptr inbounds i8, i8* %.18.lcssa, i64 %72
DOALL:     External nodes: 3
DOALL:     	  br i1 %100, label %122, label %.preheader.preheader, !prof !43
DOALL:     	  br i1 %101, label %119, label %102, !prof !44
DOALL:     	  %104 = load i8, i8* %.18, align 1, !tbaa !40
DOALL:     Edges: 13
DOALL:     Loop-carried data dependences
DOALL:         %120 = getelementptr inbounds i8, i8* %.18.lcssa, i64 %72 --->   %.07 = phi i8* [ %90, %84 ], [ %120, %119 ] via variable
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 4
DOALL:     	  %.25 = phi i8* [ %44, %84 ], [ %.36.lcssa, %119 ]
DOALL:     	  %.36 = phi i8* [ %106, %102 ], [ %.25, %.preheader.preheader ]
DOALL:     	  %106 = getelementptr inbounds i8, i8* %.36, i64 1
DOALL:     	  %.36.lcssa = phi i8* [ %.36, %.preheader ]
DOALL:     External nodes: 3
DOALL:     	  br i1 %100, label %122, label %.preheader.preheader, !prof !43
DOALL:     	  br i1 %101, label %119, label %102, !prof !44
DOALL:     	  %107 = load i8, i8* %.36, align 1, !tbaa !40
DOALL:     Edges: 11
DOALL:     Loop-carried data dependences
DOALL:         %.36.lcssa = phi i8* [ %.36, %.preheader ] --->   %.25 = phi i8* [ %44, %84 ], [ %.36.lcssa, %119 ] via variable
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: main (305 instructions. The inlining will add 49 instructions),   call void @setup_brightness_lut(i8** nonnull %4, i32 %.016.lcssa, i32 2)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0" (7.827660e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (1.000000e+02%)
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %206 = load i32, i32* %10, align 4, !tbaa !34" (1.609367e-07%)
Noelle:     Loop "  %212 = load i32, i32* %9, align 4, !tbaa !34" (1.609367e-07%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (6.299701e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (6.082092e-04%)
Noelle:     Loop "  %74 = load i32, i32* %10, align 4, !tbaa !34" (9.998646e+01%)
Noelle:     Loop "  %80 = load i32, i32* %9, align 4, !tbaa !34" (9.998596e+01%)
Noelle:     Loop "  %100 = icmp sgt i32 %.017, %.09" (9.932773e+01%)
Noelle:     Loop "  %101 = icmp sgt i32 %.016, %.09" (9.531099e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (1.380799e-07%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (1.192935e-07%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (8.121980e-04%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (3.663345e-05%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (1.060351e-02%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (1.059536e-02%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (1.446082e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (1.380799e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (1.192935e-07%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (7.827660e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (1.643809e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0" (7.827547e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (1.447470e-03%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (9.999855e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (1.446061e-03%)
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %206 = load i32, i32* %10, align 4, !tbaa !34" (1.609344e-07%)
Noelle:     Loop "  %212 = load i32, i32* %9, align 4, !tbaa !34" (1.609344e-07%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (6.299610e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (6.082004e-04%)
Noelle:     Loop "  %74 = load i32, i32* %10, align 4, !tbaa !34" (9.998501e+01%)
Noelle:     Loop "  %80 = load i32, i32* %9, align 4, !tbaa !34" (9.998452e+01%)
Noelle:     Loop "  %100 = icmp sgt i32 %.017, %.09" (9.932630e+01%)
Noelle:     Loop "  %101 = icmp sgt i32 %.016, %.09" (9.530961e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (1.380779e-07%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (1.192918e-07%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (8.121863e-04%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (3.663292e-05%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (1.060335e-02%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (1.059521e-02%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (1.446061e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (1.380779e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (1.192918e-07%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (7.827547e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (1.643785e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
NOELLE: FixedPoint:       There are 19 different instructions and 35 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.1aYMcXDdIG -o /tmp/tmp.1aYMcXDdIG
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.1aYMcXDdIG -o /tmp/tmp.1aYMcXDdIG
NOELLE: FixedPoint:     Invocation 2
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
Inliner: Start
Inliner:   Number of program instructions = 5955
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 117
DOALL:     	  %96 = load i8, i8* %95, align 1, !tbaa !40
DOALL:     	  %97 = zext i8 %96 to i64
DOALL:     	  %98 = getelementptr inbounds i8, i8* %5, i64 %97
DOALL:     	  %.018 = phi i32 [ 0, %84 ], [ %.119.lcssa, %119 ]
DOALL:     	  %.0 = phi i32 [ 0, %84 ], [ %.1.lcssa, %119 ]
DOALL:     	  %.119 = phi i32 [ %115, %102 ], [ %.018, %.preheader.preheader ]
DOALL:     	  %.1 = phi i32 [ %117, %102 ], [ %.0, %.preheader.preheader ]
DOALL:     	  %104 = load i8, i8* %.18, align 1, !tbaa !40
DOALL:     	  %105 = zext i8 %104 to i32
DOALL:     	  %109 = zext i8 %104 to i64
DOALL:     	  %110 = sub nsw i64 0, %109
DOALL:     	  %111 = getelementptr inbounds i8, i8* %98, i64 %110
DOALL:     	  %112 = load i8, i8* %111, align 1, !tbaa !40
DOALL:     	  %113 = zext i8 %112 to i32
DOALL:     	  %114 = mul nuw nsw i32 %108, %113
DOALL:     	  %115 = add nsw i32 %.119, %114
DOALL:     	  %116 = mul nuw nsw i32 %114, %105
DOALL:     	  %117 = add nsw i32 %.1, %116
DOALL:     	  %.119.lcssa = phi i32 [ %.119, %.preheader ]
DOALL:     	  %.1.lcssa = phi i32 [ %.1, %.preheader ]
DOALL:     	  %.018.lcssa = phi i32 [ %.018, %99 ]
DOALL:     	  %.0.lcssa = phi i32 [ %.0, %99 ]
DOALL:     	  %123 = add nsw i32 %.018.lcssa, -10000
DOALL:     	  %124 = icmp eq i32 %123, 0
DOALL:     	  br i1 %124, label %125, label %197, !prof !45
DOALL:     	  %127 = add nsw i32 %.111, -1
DOALL:     	  %128 = mul nsw i32 %127, %80
DOALL:     	  %129 = add nsw i32 %128, %92
DOALL:     	  %130 = add nsw i32 %129, -1
DOALL:     	  %131 = sext i32 %130 to i64
DOALL:     	  %132 = getelementptr inbounds i8, i8* %85, i64 %131
DOALL:     	  %133 = load i8, i8* %132, align 1, !tbaa !40
DOALL:     	  %134 = zext i8 %133 to i32
DOALL:     	  %135 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 0
DOALL:     	  store i32 %134, i32* %135, align 16, !tbaa !34
DOALL:     	  %136 = sext i32 %129 to i64
DOALL:     	  %137 = getelementptr inbounds i8, i8* %85, i64 %136
DOALL:     	  %138 = load i8, i8* %137, align 1, !tbaa !40
DOALL:     	  %139 = zext i8 %138 to i32
DOALL:     	  %140 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 1
DOALL:     	  store i32 %139, i32* %140, align 4, !tbaa !34
DOALL:     	  %141 = add nsw i32 %129, 1
DOALL:     	  %142 = sext i32 %141 to i64
DOALL:     	  %143 = getelementptr inbounds i8, i8* %85, i64 %142
DOALL:     	  %144 = load i8, i8* %143, align 1, !tbaa !40
DOALL:     	  %145 = zext i8 %144 to i32
DOALL:     	  %146 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 2
DOALL:     	  store i32 %145, i32* %146, align 8, !tbaa !34
DOALL:     	  %147 = mul nsw i32 %.111, %80
DOALL:     	  %148 = add nsw i32 %147, %92
DOALL:     	  %149 = add nsw i32 %148, -1
DOALL:     	  %150 = sext i32 %149 to i64
DOALL:     	  %151 = getelementptr inbounds i8, i8* %85, i64 %150
DOALL:     	  %152 = load i8, i8* %151, align 1, !tbaa !40
DOALL:     	  %153 = zext i8 %152 to i32
DOALL:     	  %154 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 3
DOALL:     	  store i32 %153, i32* %154, align 4, !tbaa !34
DOALL:     	  %155 = add nsw i32 %148, 1
DOALL:     	  %156 = sext i32 %155 to i64
DOALL:     	  %157 = getelementptr inbounds i8, i8* %85, i64 %156
DOALL:     	  %158 = load i8, i8* %157, align 1, !tbaa !40
DOALL:     	  %159 = zext i8 %158 to i32
DOALL:     	  %160 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 4
DOALL:     	  store i32 %159, i32* %160, align 16, !tbaa !34
DOALL:     	  %161 = add nsw i32 %.111, 1
DOALL:     	  %162 = mul nsw i32 %161, %80
DOALL:     	  %163 = add nsw i32 %162, %92
DOALL:     	  %164 = add nsw i32 %163, -1
DOALL:     	  %165 = sext i32 %164 to i64
DOALL:     	  %166 = getelementptr inbounds i8, i8* %85, i64 %165
DOALL:     	  %167 = load i8, i8* %166, align 1, !tbaa !40
DOALL:     	  %168 = zext i8 %167 to i32
DOALL:     	  %169 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 5
DOALL:     	  store i32 %168, i32* %169, align 4, !tbaa !34
DOALL:     	  %170 = sext i32 %163 to i64
DOALL:     	  %171 = getelementptr inbounds i8, i8* %85, i64 %170
DOALL:     	  %172 = load i8, i8* %171, align 1, !tbaa !40
DOALL:     	  %173 = zext i8 %172 to i32
DOALL:     	  %174 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 6
DOALL:     	  store i32 %173, i32* %174, align 8, !tbaa !34
DOALL:     	  %175 = add nsw i32 %163, 1
DOALL:     	  %176 = sext i32 %175 to i64
DOALL:     	  %177 = getelementptr inbounds i8, i8* %85, i64 %176
DOALL:     	  %178 = load i8, i8* %177, align 1, !tbaa !40
DOALL:     	  %179 = zext i8 %178 to i32
DOALL:     	  %180 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 7
DOALL:     	  store i32 %179, i32* %180, align 4, !tbaa !34
DOALL:     	  %indvars.iv6.i = phi i64 [ %indvars.iv.next7.i, %190 ], [ 7, %125 ]
DOALL:     	  %.01.i = phi i32 [ %191, %190 ], [ 0, %125 ]
DOALL:     	  %exitcond8.i = icmp eq i32 %.01.i, 7
DOALL:     	  br i1 %exitcond8.i, label %median.exit, label %.preheader.i, !prof !46
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %._crit_edge.i ], [ 0, %.preheader.i ]
DOALL:     	  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i
DOALL:     	  br i1 %exitcond.i, label %190, label %183, !prof !47
DOALL:     	  %184 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 %indvars.iv.i
DOALL:     	  %185 = load i32, i32* %184, align 4, !tbaa !34
DOALL:     	  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
DOALL:     	  %186 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 %indvars.iv.next.i
DOALL:     	  %187 = load i32, i32* %186, align 4, !tbaa !34
DOALL:     	  %188 = icmp sgt i32 %185, %187
DOALL:     	  br i1 %188, label %189, label %.._crit_edge_crit_edge.i, !prof !48
DOALL:     	  store i32 %187, i32* %184, align 4, !tbaa !34
DOALL:     	  store i32 %185, i32* %186, align 4, !tbaa !34
DOALL:     	  %191 = add nuw nsw i32 %.01.i, 1
DOALL:     	  %indvars.iv.next7.i = add nsw i64 %indvars.iv6.i, -1
DOALL:     	  %192 = load i32, i32* %154, align 4, !tbaa !34
DOALL:     	  %193 = load i32, i32* %160, align 16, !tbaa !34
DOALL:     	  %194 = add nsw i32 %192, %193
DOALL:     	  %195 = sdiv i32 %194, 2
DOALL:     	  %196 = trunc i32 %195 to i8
DOALL:     	  %198 = zext i8 %96 to i32
DOALL:     	  %199 = mul nsw i32 %198, -10000
DOALL:     	  %200 = add i32 %.0.lcssa, %199
DOALL:     	  %201 = sdiv i32 %200, %123
DOALL:     	  %202 = trunc i32 %201 to i8
DOALL:     	  %storemerge20 = phi i8 [ %202, %197 ], [ %196, %median.exit ]
DOALL:     	  store i8 %storemerge20, i8* %.12, align 1, !tbaa !40
DOALL:     External nodes: 22
DOALL:     	  %.111 = phi i32 [ %.09, %68 ], [ %205, %204 ]
DOALL:     	  %.12 = phi i8* [ %.2, %203 ], [ %.01, %77 ]
DOALL:     	  %80 = load i32, i32* %9, align 4, !tbaa !34
DOALL:     	  br i1 %83, label %84, label %204, !prof !42
DOALL:     	  %85 = load i8*, i8** %8, align 8, !tbaa !30
DOALL:     	  %92 = trunc i64 %indvars.iv to i32
DOALL:     	  %95 = getelementptr inbounds i8, i8* %85, i64 %94
DOALL:     	  br i1 %100, label %122, label %.preheader.preheader, !prof !43
DOALL:     	  %.18 = phi i8* [ %103, %102 ], [ %.07, %.preheader.preheader ]
DOALL:     	  br i1 %101, label %119, label %102, !prof !44
DOALL:     	  %108 = zext i8 %107 to i32
DOALL:     	  %126 = bitcast [8 x i32]* %7 to i8*
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %126) #11
DOALL:     	  br label %181
DOALL:     	  br label %182
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %._crit_edge.i
DOALL:     	  br label %182
DOALL:     	  br label %181
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %126) #11
DOALL:     	  br label %203
DOALL:     	  br label %203
DOALL:     Edges: 393
DOALL:     Loop-carried data dependences
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %178 = load i8, i8* %177, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %167 = load i8, i8* %166, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %172 = load i8, i8* %171, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %104 = load i8, i8* %.18, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %96 = load i8, i8* %95, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %133 = load i8, i8* %132, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %138 = load i8, i8* %137, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %158 = load i8, i8* %157, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %144 = load i8, i8* %143, align 1, !tbaa !40 via memory
DOALL:         store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 --->   %152 = load i8, i8* %151, align 1, !tbaa !40 via memory
DOALL:         %96 = load i8, i8* %95, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %104 = load i8, i8* %.18, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %133 = load i8, i8* %132, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %138 = load i8, i8* %137, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %144 = load i8, i8* %143, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %152 = load i8, i8* %151, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %158 = load i8, i8* %157, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %167 = load i8, i8* %166, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %172 = load i8, i8* %171, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:         %178 = load i8, i8* %177, align 1, !tbaa !40 --->   store i8 %storemerge20, i8* %.12, align 1, !tbaa !40 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 4
DOALL:     	  %.01 = phi i8* [ %1, %68 ], [ %.12.lcssa, %204 ]
DOALL:     	  %.12 = phi i8* [ %.2, %203 ], [ %.01, %77 ]
DOALL:     	  %.2 = getelementptr inbounds i8, i8* %.12, i64 1
DOALL:     	  %.12.lcssa = phi i8* [ %.12, %79 ]
DOALL:     External nodes: 3
DOALL:     	  br i1 %76, label %77, label %.loopexit.loopexit, !prof !41
DOALL:     	  br i1 %83, label %84, label %204, !prof !42
DOALL:     	  store i8 %storemerge20, i8* %.12, align 1, !tbaa !40
DOALL:     Edges: 11
DOALL:     Loop-carried data dependences
DOALL:         %.12.lcssa = phi i8* [ %.12, %79 ] --->   %.01 = phi i8* [ %1, %68 ], [ %.12.lcssa, %204 ] via variable
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 13
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 4
DOALL:     	  %.25 = phi i8* [ %44, %84 ], [ %.36.lcssa, %119 ]
DOALL:     	  %.36 = phi i8* [ %106, %102 ], [ %.25, %.preheader.preheader ]
DOALL:     	  %106 = getelementptr inbounds i8, i8* %.36, i64 1
DOALL:     	  %.36.lcssa = phi i8* [ %.36, %.preheader ]
DOALL:     External nodes: 3
DOALL:     	  br i1 %100, label %122, label %.preheader.preheader, !prof !43
DOALL:     	  br i1 %101, label %119, label %102, !prof !44
DOALL:     	  %107 = load i8, i8* %.36, align 1, !tbaa !40
DOALL:     Edges: 11
DOALL:     Loop-carried data dependences
DOALL:         %.36.lcssa = phi i8* [ %.36, %.preheader ] --->   %.25 = phi i8* [ %44, %84 ], [ %.36.lcssa, %119 ] via variable
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 5
DOALL:     	  %.07 = phi i8* [ %90, %84 ], [ %120, %119 ]
DOALL:     	  %.18 = phi i8* [ %103, %102 ], [ %.07, %.preheader.preheader ]
DOALL:     	  %103 = getelementptr inbounds i8, i8* %.18, i64 1
DOALL:     	  %.18.lcssa = phi i8* [ %.18, %.preheader ]
DOALL:     	  %120 = getelementptr inbounds i8, i8* %.18.lcssa, i64 %72
DOALL:     External nodes: 3
DOALL:     	  br i1 %100, label %122, label %.preheader.preheader, !prof !43
DOALL:     	  br i1 %101, label %119, label %102, !prof !44
DOALL:     	  %104 = load i8, i8* %.18, align 1, !tbaa !40
DOALL:     Edges: 13
DOALL:     Loop-carried data dependences
DOALL:         %120 = getelementptr inbounds i8, i8* %.18.lcssa, i64 %72 --->   %.07 = phi i8* [ %90, %84 ], [ %120, %119 ] via variable
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: main (327 instructions. The inlining will add 418 instructions),   tail call void @susan_smoothing(i32 %.025.lcssa, i8* %58, double %57, i32 %59, i32 %60, i8* %79)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %19 = icmp slt i32 %.013, %0" (7.827547e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (1.447470e-03%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (9.999855e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (1.446061e-03%)
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %206 = load i32, i32* %10, align 4, !tbaa !34" (1.609344e-07%)
Noelle:     Loop "  %212 = load i32, i32* %9, align 4, !tbaa !34" (1.609344e-07%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (6.299610e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (6.082004e-04%)
Noelle:     Loop "  %74 = load i32, i32* %10, align 4, !tbaa !34" (9.998501e+01%)
Noelle:     Loop "  %80 = load i32, i32* %9, align 4, !tbaa !34" (9.998452e+01%)
Noelle:     Loop "  %100 = icmp sgt i32 %.017, %.09" (9.932630e+01%)
Noelle:     Loop "  %101 = icmp sgt i32 %.016, %.09" (9.530961e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (1.380779e-07%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (1.192918e-07%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (8.121863e-04%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (3.663292e-05%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (1.060335e-02%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (1.059521e-02%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (1.446061e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (1.380779e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (1.192918e-07%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (7.827547e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (1.643785e-08%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %206 = load i32, i32* %10, align 4, !tbaa !34" (8.090728e-08%)
Noelle:     Loop "  %212 = load i32, i32* %9, align 4, !tbaa !34" (8.090728e-08%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (3.167032e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (3.057634e-04%)
Noelle:     Loop "  %74 = load i32, i32* %10, align 4, !tbaa !34" (5.026593e+01%)
Noelle:     Loop "  %80 = load i32, i32* %9, align 4, !tbaa !34" (5.026568e+01%)
Noelle:     Loop "  %100 = icmp sgt i32 %.017, %.09" (4.993477e+01%)
Noelle:     Loop "  %101 = icmp sgt i32 %.016, %.09" (4.791544e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (6.941656e-08%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (5.997213e-08%)
Noelle:  Function "main"
Noelle:     Loop "  %23 = icmp slt i32 %.013, %0" (3.935179e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.276933e-04%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.973302e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (7.269850e-04%)
Noelle:     Loop "  %281 = load i32, i32* %6, align 4, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %287 = load i32, i32* %5, align 4, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %124 = icmp sgt i32 %.010.i, %.09.i" (3.155227e-04%)
Noelle:     Loop "  %128 = icmp sgt i32 %.013.i, %.09.i" (3.057634e-04%)
Noelle:     Loop "  %149 = load i32, i32* %6, align 4, !tbaa !40" (4.972622e+01%)
Noelle:     Loop "  %155 = load i32, i32* %5, align 4, !tbaa !40" (4.972599e+01%)
Noelle:     Loop "  %175 = icmp sgt i32 %.017.i, %.09.i" (4.941249e+01%)
Noelle:     Loop "  %176 = icmp sgt i32 %.016.i, %.09.i" (4.791540e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.941656e-08%)
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.997213e-08%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (4.083142e-04%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (1.841664e-05%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (5.330672e-03%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (5.326580e-03%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (7.269850e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (6.941656e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (5.997213e-08%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (3.935179e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (8.263876e-09%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
NOELLE: FixedPoint:       There are 357 different instructions and 984 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.1aYMcXDdIG -o /tmp/tmp.1aYMcXDdIG
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.1aYMcXDdIG -o /tmp/tmp.1aYMcXDdIG
NOELLE: FixedPoint:     Invocation 3
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
Inliner: Start
Inliner:   Number of program instructions = 6384
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca i8*, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 11
Inliner:   Inlining in: main (756 instructions. The inlining will add 104 instructions),   %114 = call i32 @enlarge(i8** nonnull %4, i8* %113, i32* nonnull %5, i32* nonnull %6, i32 %.09.i) #11
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %23 = icmp slt i32 %.013, %0" (3.914056e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.237872e-04%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (5.000284e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (7.230827e-04%)
Noelle:     Loop "  %281 = load i32, i32* %6, align 4, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %287 = load i32, i32* %5, align 4, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %124 = icmp sgt i32 %.010.i, %.09.i" (3.150032e-04%)
Noelle:     Loop "  %128 = icmp sgt i32 %.013.i, %.09.i" (3.041221e-04%)
Noelle:     Loop "  %149 = load i32, i32* %6, align 4, !tbaa !40" (4.999607e+01%)
Noelle:     Loop "  %155 = load i32, i32* %5, align 4, !tbaa !40" (4.999583e+01%)
Noelle:     Loop "  %175 = icmp sgt i32 %.017.i, %.09.i" (4.966669e+01%)
Noelle:     Loop "  %176 = icmp sgt i32 %.016.i, %.09.i" (4.765821e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.904395e-08%)
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.965021e-08%)
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %206 = load i32, i32* %10, align 4, !tbaa !34" (8.047299e-08%)
Noelle:     Loop "  %212 = load i32, i32* %9, align 4, !tbaa !34" (8.047299e-08%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (3.150032e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (3.041221e-04%)
Noelle:     Loop "  %74 = load i32, i32* %10, align 4, !tbaa !34" (4.999611e+01%)
Noelle:     Loop "  %80 = load i32, i32* %9, align 4, !tbaa !34" (4.999586e+01%)
Noelle:     Loop "  %100 = icmp sgt i32 %.017, %.09" (4.966673e+01%)
Noelle:     Loop "  %101 = icmp sgt i32 %.016, %.09" (4.765825e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (6.904395e-08%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (5.965021e-08%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (4.061224e-04%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (1.831778e-05%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (5.302059e-03%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (5.297988e-03%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (7.230827e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (6.904395e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (5.965021e-08%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (3.914056e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (8.219518e-09%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %23 = icmp slt i32 %.013, %0" (3.913832e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.237458e-04%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.999998e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (7.230413e-04%)
Noelle:     Loop "  %118 = load i32, i32* %6, align 4, !tbaa !40" (4.060992e-04%)
Noelle:     Loop "  %134 = icmp slt i32 %.1.i2, %.09.i" (1.831673e-05%)
Noelle:     Loop "  %164 = icmp slt i32 %.2.i3, %.09.i" (5.302063e-03%)
Noelle:     Loop "  %167 = load i32, i32* %6, align 4, !tbaa !40" (5.297993e-03%)
Noelle:     Loop "  %367 = load i32, i32* %6, align 4, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %373 = load i32, i32* %5, align 4, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %210 = icmp sgt i32 %.010.i, %.09.i" (3.149852e-04%)
Noelle:     Loop "  %214 = icmp sgt i32 %.013.i, %.09.i" (3.041047e-04%)
Noelle:     Loop "  %235 = load i32, i32* %6, align 4, !tbaa !40" (4.999321e+01%)
Noelle:     Loop "  %241 = load i32, i32* %5, align 4, !tbaa !40" (4.999296e+01%)
Noelle:     Loop "  %261 = icmp sgt i32 %.017.i, %.09.i" (4.966385e+01%)
Noelle:     Loop "  %262 = icmp sgt i32 %.016.i, %.09.i" (4.765548e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.903999e-08%)
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.964680e-08%)
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %206 = load i32, i32* %10, align 4, !tbaa !34" (8.046838e-08%)
Noelle:     Loop "  %212 = load i32, i32* %9, align 4, !tbaa !34" (8.046838e-08%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (3.149852e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (3.041047e-04%)
Noelle:     Loop "  %74 = load i32, i32* %10, align 4, !tbaa !34" (4.999325e+01%)
Noelle:     Loop "  %80 = load i32, i32* %9, align 4, !tbaa !34" (4.999300e+01%)
Noelle:     Loop "  %100 = icmp sgt i32 %.017, %.09" (4.966389e+01%)
Noelle:     Loop "  %101 = icmp sgt i32 %.016, %.09" (4.765552e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (6.903999e-08%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (5.964680e-08%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (4.060992e-04%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (1.831673e-05%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (5.301755e-03%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (5.297684e-03%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (7.230413e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (6.903999e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (5.964680e-08%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (3.913832e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (8.219047e-09%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
NOELLE: FixedPoint:       There are 90 different instructions and 201 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.1aYMcXDdIG -o /tmp/tmp.1aYMcXDdIG
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.1aYMcXDdIG -o /tmp/tmp.1aYMcXDdIG
NOELLE: FixedPoint:     Invocation 4
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
Inliner: Start
Inliner:   Number of program instructions = 6474
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 12
Inliner:   Inlining in: main (846 instructions. The inlining will add 96 instructions),   %465 = tail call zeroext i8 @median(i8* %111, i32 %464, i32 %381, i32 %191) #11
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %206 = load i32, i32* %10, align 4, !tbaa !34" (8.048214e-08%)
Noelle:     Loop "  %212 = load i32, i32* %9, align 4, !tbaa !34" (8.048214e-08%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (3.150390e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (3.041567e-04%)
Noelle:     Loop "  %74 = load i32, i32* %10, align 4, !tbaa !34" (5.000180e+01%)
Noelle:     Loop "  %80 = load i32, i32* %9, align 4, !tbaa !34" (5.000155e+01%)
Noelle:     Loop "  %100 = icmp sgt i32 %.017, %.09" (4.967238e+01%)
Noelle:     Loop "  %101 = icmp sgt i32 %.016, %.09" (4.766367e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (6.905180e-08%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (5.965700e-08%)
Noelle:  Function "main"
Noelle:     Loop "  %20 = icmp slt i32 %.013, %0" (3.914501e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.238695e-04%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.999143e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (7.231649e-04%)
Noelle:     Loop "  %117 = icmp slt i64 %indvars.iv, %62" (3.159002e-04%)
Noelle:     Loop "  %129 = icmp slt i64 %indvars.iv1, %118" (1.667577e-05%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv5, %132" (5.633980e-03%)
Noelle:     Loop "  %161 = add nsw i32 %61, %112" (5.629908e-03%)
Noelle:     Loop "  %366 = add nsw i32 %192, -1" (0.000000e+00%)
Noelle:     Loop "  %372 = add nsw i32 %191, -1" (0.000000e+00%)
Noelle:     Loop "  %203 = icmp sgt i32 %.010.i, %.09.i" (3.150390e-04%)
Noelle:     Loop "  %207 = icmp sgt i32 %.013.i, %.09.i" (3.041567e-04%)
Noelle:     Loop "  %234 = sub nsw i32 %192, %.09.i" (4.998442e+01%)
Noelle:     Loop "  %240 = sub nsw i32 %191, %.09.i" (4.998417e+01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.017.i, %.09.i" (4.967234e+01%)
Noelle:     Loop "  %259 = icmp sgt i32 %.016.i, %.09.i" (4.766363e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.905180e-08%)
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.965700e-08%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (4.061686e-04%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (1.831987e-05%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (5.302661e-03%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (5.298590e-03%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (7.231649e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (6.905180e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (5.965700e-08%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (3.914501e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (8.220452e-09%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %206 = load i32, i32* %10, align 4, !tbaa !34" (8.048214e-08%)
Noelle:     Loop "  %212 = load i32, i32* %9, align 4, !tbaa !34" (8.048214e-08%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (3.150390e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (3.041567e-04%)
Noelle:     Loop "  %74 = load i32, i32* %10, align 4, !tbaa !34" (5.000180e+01%)
Noelle:     Loop "  %80 = load i32, i32* %9, align 4, !tbaa !34" (5.000155e+01%)
Noelle:     Loop "  %100 = icmp sgt i32 %.017, %.09" (4.967238e+01%)
Noelle:     Loop "  %101 = icmp sgt i32 %.016, %.09" (4.766367e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (6.905180e-08%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (5.965700e-08%)
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0" (3.914501e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.238695e-04%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.999143e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (7.231649e-04%)
Noelle:     Loop "  %118 = icmp slt i64 %indvars.iv, %63" (3.159002e-04%)
Noelle:     Loop "  %130 = icmp slt i64 %indvars.iv1, %119" (1.667577e-05%)
Noelle:     Loop "  %159 = icmp slt i64 %indvars.iv5, %133" (5.633980e-03%)
Noelle:     Loop "  %162 = add nsw i32 %62, %113" (5.629908e-03%)
Noelle:     Loop "  %367 = add nsw i32 %193, -1" (0.000000e+00%)
Noelle:     Loop "  %373 = add nsw i32 %192, -1" (0.000000e+00%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i" (0.000000e+00%)
Noelle:     Loop "  %204 = icmp sgt i32 %.010.i, %.09.i" (3.150390e-04%)
Noelle:     Loop "  %208 = icmp sgt i32 %.013.i, %.09.i" (3.041567e-04%)
Noelle:     Loop "  %235 = sub nsw i32 %193, %.09.i" (4.998442e+01%)
Noelle:     Loop "  %241 = sub nsw i32 %192, %.09.i" (4.998417e+01%)
Noelle:     Loop "  %259 = icmp sgt i32 %.017.i, %.09.i" (4.967234e+01%)
Noelle:     Loop "  %260 = icmp sgt i32 %.016.i, %.09.i" (4.766363e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.905180e-08%)
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.965700e-08%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (4.061686e-04%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (1.831987e-05%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (5.302661e-03%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (5.298590e-03%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (7.231649e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (6.905180e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (5.965700e-08%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (3.914501e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (8.220452e-09%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
NOELLE: FixedPoint:       There are 85 different instructions and 278 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.1aYMcXDdIG -o /tmp/tmp.1aYMcXDdIG
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.1aYMcXDdIG -o /tmp/tmp.1aYMcXDdIG
NOELLE: FixedPoint:     Invocation 5
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Kn4VphixYQ -o /tmp/tmp.1aYMcXDdIG
Inliner: Start
Inliner:   Number of program instructions = 6568
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 13
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 4
DOALL:     	  %.01.i = phi i8* [ %60, %223 ], [ %.12.i.lcssa, %366 ]
DOALL:     	  %.12.i = phi i8* [ %.2.i, %365 ], [ %.01.i, %238 ]
DOALL:     	  %.2.i = getelementptr inbounds i8, i8* %.12.i, i64 1
DOALL:     	  %.12.i.lcssa = phi i8* [ %.12.i, %240 ]
DOALL:     External nodes: 3
DOALL:     	  br i1 %237, label %238, label %.loopexit.loopexit.i, !prof !42
DOALL:     	  br i1 %243, label %244, label %366, !prof !48
DOALL:     	  store i8 %storemerge20.i, i8* %.12.i, align 1, !tbaa !36
DOALL:     Edges: 11
DOALL:     Loop-carried data dependences
DOALL:         %.12.i.lcssa = phi i8* [ %.12.i, %240 ] --->   %.01.i = phi i8* [ %60, %223 ], [ %.12.i.lcssa, %366 ] via variable
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  store i8 %storemerge20.i, i8* %.12.i, align 1, !tbaa !36
DOALL:     External nodes: 3
DOALL:     	  %.12.i = phi i8* [ %.2.i, %365 ], [ %.01.i, %238 ]
DOALL:     	  br i1 %243, label %244, label %366, !prof !48
DOALL:     	  %storemerge20.i = phi i8 [ %364, %359 ], [ %358, %median.exit.i ]
DOALL:     Edges: 4
DOALL:     Loop-carried data dependences
DOALL:         store i8 %storemerge20.i, i8* %.12.i, align 1, !tbaa !36 --->   store i8 %storemerge20.i, i8* %.12.i, align 1, !tbaa !36 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 18
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 4
DOALL:     	  %.25.i = phi i8* [ %199, %244 ], [ %.36.i.lcssa, %278 ]
DOALL:     	  %.36.i = phi i8* [ %265, %261 ], [ %.25.i, %.preheader.preheader.i ]
DOALL:     	  %265 = getelementptr inbounds i8, i8* %.36.i, i64 1
DOALL:     	  %.36.i.lcssa = phi i8* [ %.36.i, %.preheader.i ]
DOALL:     External nodes: 3
DOALL:     	  br i1 %259, label %281, label %.preheader.preheader.i, !prof !49
DOALL:     	  br i1 %260, label %278, label %261, !prof !50
DOALL:     	  %266 = load i8, i8* %.36.i, align 1, !tbaa !36
DOALL:     Edges: 11
DOALL:     Loop-carried data dependences
DOALL:         %.36.i.lcssa = phi i8* [ %.36.i, %.preheader.i ] --->   %.25.i = phi i8* [ %199, %244 ], [ %.36.i.lcssa, %278 ] via variable
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 5
DOALL:     	  %.07.i = phi i8* [ %248, %244 ], [ %279, %278 ]
DOALL:     	  %.18.i = phi i8* [ %262, %261 ], [ %.07.i, %.preheader.preheader.i ]
DOALL:     	  %262 = getelementptr inbounds i8, i8* %.18.i, i64 1
DOALL:     	  %.18.i.lcssa = phi i8* [ %.18.i, %.preheader.i ]
DOALL:     	  %279 = getelementptr inbounds i8, i8* %.18.i.lcssa, i64 %227
DOALL:     External nodes: 3
DOALL:     	  br i1 %259, label %281, label %.preheader.preheader.i, !prof !49
DOALL:     	  br i1 %260, label %278, label %261, !prof !50
DOALL:     	  %263 = load i8, i8* %.18.i, align 1, !tbaa !36
DOALL:     Edges: 13
DOALL:     Loop-carried data dependences
DOALL:         %279 = getelementptr inbounds i8, i8* %.18.i.lcssa, i64 %227 --->   %.07.i = phi i8* [ %248, %244 ], [ %279, %278 ] via variable
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   No remaining calls need to be inlined due to loop-carried data dependences
Inliner:   The code has not been modified
Inliner: Exit
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %206 = load i32, i32* %10, align 4, !tbaa !34" (8.048214e-08%)
Noelle:     Loop "  %212 = load i32, i32* %9, align 4, !tbaa !34" (8.048214e-08%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (3.150390e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (3.041567e-04%)
Noelle:     Loop "  %74 = load i32, i32* %10, align 4, !tbaa !34" (5.000180e+01%)
Noelle:     Loop "  %80 = load i32, i32* %9, align 4, !tbaa !34" (5.000155e+01%)
Noelle:     Loop "  %100 = icmp sgt i32 %.017, %.09" (4.967238e+01%)
Noelle:     Loop "  %101 = icmp sgt i32 %.016, %.09" (4.766367e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (6.905180e-08%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (5.965700e-08%)
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0" (3.914501e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.238695e-04%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.999143e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (7.231649e-04%)
Noelle:     Loop "  %118 = icmp slt i64 %indvars.iv, %63" (3.159002e-04%)
Noelle:     Loop "  %130 = icmp slt i64 %indvars.iv1, %119" (1.667577e-05%)
Noelle:     Loop "  %159 = icmp slt i64 %indvars.iv5, %133" (5.633980e-03%)
Noelle:     Loop "  %162 = add nsw i32 %62, %113" (5.629908e-03%)
Noelle:     Loop "  %367 = add nsw i32 %193, -1" (0.000000e+00%)
Noelle:     Loop "  %373 = add nsw i32 %192, -1" (0.000000e+00%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i" (0.000000e+00%)
Noelle:     Loop "  %204 = icmp sgt i32 %.010.i, %.09.i" (3.150390e-04%)
Noelle:     Loop "  %208 = icmp sgt i32 %.013.i, %.09.i" (3.041567e-04%)
Noelle:     Loop "  %235 = sub nsw i32 %193, %.09.i" (4.998442e+01%)
Noelle:     Loop "  %241 = sub nsw i32 %192, %.09.i" (4.998417e+01%)
Noelle:     Loop "  %259 = icmp sgt i32 %.017.i, %.09.i" (4.967234e+01%)
Noelle:     Loop "  %260 = icmp sgt i32 %.016.i, %.09.i" (4.766363e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.905180e-08%)
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.965700e-08%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (4.061686e-04%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (1.831987e-05%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (5.302661e-03%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (5.298590e-03%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (7.231649e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (6.905180e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (5.965700e-08%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (3.914501e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (8.220452e-09%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %206 = load i32, i32* %10, align 4, !tbaa !34" (8.048214e-08%)
Noelle:     Loop "  %212 = load i32, i32* %9, align 4, !tbaa !34" (8.048214e-08%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (3.150390e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (3.041567e-04%)
Noelle:     Loop "  %74 = load i32, i32* %10, align 4, !tbaa !34" (5.000180e+01%)
Noelle:     Loop "  %80 = load i32, i32* %9, align 4, !tbaa !34" (5.000155e+01%)
Noelle:     Loop "  %100 = icmp sgt i32 %.017, %.09" (4.967238e+01%)
Noelle:     Loop "  %101 = icmp sgt i32 %.016, %.09" (4.766367e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (6.905180e-08%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (5.965700e-08%)
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0" (3.914501e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.238695e-04%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.999143e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (7.231649e-04%)
Noelle:     Loop "  %118 = icmp slt i64 %indvars.iv, %63" (3.159002e-04%)
Noelle:     Loop "  %130 = icmp slt i64 %indvars.iv1, %119" (1.667577e-05%)
Noelle:     Loop "  %159 = icmp slt i64 %indvars.iv5, %133" (5.633980e-03%)
Noelle:     Loop "  %162 = add nsw i32 %62, %113" (5.629908e-03%)
Noelle:     Loop "  %367 = add nsw i32 %193, -1" (0.000000e+00%)
Noelle:     Loop "  %373 = add nsw i32 %192, -1" (0.000000e+00%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i" (0.000000e+00%)
Noelle:     Loop "  %204 = icmp sgt i32 %.010.i, %.09.i" (3.150390e-04%)
Noelle:     Loop "  %208 = icmp sgt i32 %.013.i, %.09.i" (3.041567e-04%)
Noelle:     Loop "  %235 = sub nsw i32 %193, %.09.i" (4.998442e+01%)
Noelle:     Loop "  %241 = sub nsw i32 %192, %.09.i" (4.998417e+01%)
Noelle:     Loop "  %259 = icmp sgt i32 %.017.i, %.09.i" (4.967234e+01%)
Noelle:     Loop "  %260 = icmp sgt i32 %.016.i, %.09.i" (4.766363e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.905180e-08%)
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.965700e-08%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (4.061686e-04%)
Noelle:     Loop "  %26 = icmp slt i32 %.1, %4" (1.831987e-05%)
Noelle:     Loop "  %56 = icmp slt i32 %.2, %4" (5.302661e-03%)
Noelle:     Loop "  %59 = load i32, i32* %3, align 4, !tbaa !30" (5.298590e-03%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (7.231649e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (6.905180e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (5.965700e-08%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (3.914501e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (8.220452e-09%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %591 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %607 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %385 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: Inliner: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.C37lKWPTbb (.ll version is /tmp/tmp.lCTGjKlk1D)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.wvSWummRVa (.ll version is /tmp/tmp.Zx4jbfTDX5)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.C37lKWPTbb -o /tmp/tmp.wvSWummRVa
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.C37lKWPTbb -o /tmp/tmp.wvSWummRVa
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.C37lKWPTbb -o /tmp/tmp.wvSWummRVa
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.C37lKWPTbb -o /tmp/tmp.wvSWummRVa
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       usage
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       getint
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       susan_corners
DeadFunctionEliminator:       susan_corners_quick
DeadFunctionEliminator:       main
DeadFunctionEliminator:       atof
DeadFunctionEliminator:       atoi
DeadFunctionEliminator:       strtol
DeadFunctionEliminator:       getc
DeadFunctionEliminator:       fgets
DeadFunctionEliminator:       fprintf
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       get_image
DeadFunctionEliminator:       fopen
DeadFunctionEliminator:       fgetc
DeadFunctionEliminator:       malloc
DeadFunctionEliminator:       fread
DeadFunctionEliminator:       fclose
DeadFunctionEliminator:       put_image
DeadFunctionEliminator:       fwrite
DeadFunctionEliminator:       int_to_uchar
DeadFunctionEliminator:       setup_brightness_lut
DeadFunctionEliminator:       exp
DeadFunctionEliminator:       susan_principle
DeadFunctionEliminator:       llvm.memset.p0i8.i64
DeadFunctionEliminator:       susan_principle_small
DeadFunctionEliminator:       median
DeadFunctionEliminator:       free
DeadFunctionEliminator:       enlarge
DeadFunctionEliminator:       llvm.memcpy.p0i8.p0i8.i64
DeadFunctionEliminator:       susan_smoothing
DeadFunctionEliminator:       edge_draw
DeadFunctionEliminator:       susan_thin
DeadFunctionEliminator:       susan_edges
DeadFunctionEliminator:       susan_edges_small
DeadFunctionEliminator:       corner_draw
DeadFunctionEliminator:       strtod
DeadFunctionEliminator:       puts
DeadFunctionEliminator:       sqrtf
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %200 = load i32, i32* %10, align 4, !tbaa !34" (8.053215e-08%)
Noelle:     Loop "  %206 = load i32, i32* %9, align 4, !tbaa !34" (8.053215e-08%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (3.152348e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (3.043457e-04%)
Noelle:     Loop "  %83 = load i32, i32* %10, align 4, !tbaa !34" (5.003289e+01%)
Noelle:     Loop "  %91 = load i32, i32* %9, align 4, !tbaa !34" (5.003262e+01%)
Noelle:     Loop "  %111 = icmp sgt i32 %.017, %.09" (4.970324e+01%)
Noelle:     Loop "  %112 = icmp sgt i32 %.016, %.09" (4.769328e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (6.909471e-08%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (5.969407e-08%)
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0" (3.916934e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.243193e-04%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.996033e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (6.834266e-04%)
Noelle:     Loop "  %148 = icmp slt i64 %indvars.iv, %61" (2.484119e-04%)
Noelle:     Loop "  %156 = icmp slt i64 %indvars.iv1, %98" (1.229917e-05%)
Noelle:     Loop "  %174 = icmp slt i64 %indvars.iv5, %98" (4.146462e-03%)
Noelle:     Loop "  %178 = icmp slt i64 %indvars.iv3, %102" (4.141840e-03%)
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv7, %104" (0.000000e+00%)
Noelle:     Loop "  %347 = icmp slt i64 %indvars.iv31.i, %106" (0.000000e+00%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i" (0.000000e+00%)
Noelle:     Loop "  %203 = icmp sgt i32 %.010.i, %." (3.152348e-04%)
Noelle:     Loop "  %207 = icmp sgt i32 %.013.i, %." (3.043457e-04%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv9, %116" (4.995492e+01%)
Noelle:     Loop "  %237 = icmp slt i64 %indvars.iv.i, %118" (4.995454e+01%)
Noelle:     Loop "  %248 = icmp sgt i32 %.017.i, %." (4.970321e+01%)
Noelle:     Loop "  %249 = icmp sgt i32 %.016.i, %." (4.769324e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.909471e-08%)
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.969407e-08%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (4.064210e-04%)
Noelle:     Loop "  %25 = icmp slt i32 %.1, %4" (1.833125e-05%)
Noelle:     Loop "  %54 = icmp slt i32 %.2, %4" (5.305956e-03%)
Noelle:     Loop "  %57 = load i32, i32* %3, align 4, !tbaa !30" (5.301883e-03%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (7.236143e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (6.909471e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (5.969407e-08%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (3.916934e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (8.225560e-09%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %590 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %606 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %368 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %384 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %200 = load i32, i32* %10, align 4, !tbaa !34" (8.053215e-08%)
Noelle:     Loop "  %206 = load i32, i32* %9, align 4, !tbaa !34" (8.053215e-08%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (3.152348e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (3.043457e-04%)
Noelle:     Loop "  %83 = load i32, i32* %10, align 4, !tbaa !34" (5.003289e+01%)
Noelle:     Loop "  %91 = load i32, i32* %9, align 4, !tbaa !34" (5.003262e+01%)
Noelle:     Loop "  %111 = icmp sgt i32 %.017, %.09" (4.970324e+01%)
Noelle:     Loop "  %112 = icmp sgt i32 %.016, %.09" (4.769328e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (6.909471e-08%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (5.969407e-08%)
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0" (3.916934e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.243193e-04%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.996033e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (6.834266e-04%)
Noelle:     Loop "  %148 = icmp slt i64 %indvars.iv, %61" (2.484119e-04%)
Noelle:     Loop "  %156 = icmp slt i64 %indvars.iv1, %98" (1.229917e-05%)
Noelle:     Loop "  %174 = icmp slt i64 %indvars.iv5, %98" (4.146462e-03%)
Noelle:     Loop "  %178 = icmp slt i64 %indvars.iv3, %102" (4.141840e-03%)
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv7, %104" (0.000000e+00%)
Noelle:     Loop "  %347 = icmp slt i64 %indvars.iv31.i, %106" (0.000000e+00%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i" (0.000000e+00%)
Noelle:     Loop "  %203 = icmp sgt i32 %.010.i, %." (3.152348e-04%)
Noelle:     Loop "  %207 = icmp sgt i32 %.013.i, %." (3.043457e-04%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv9, %116" (4.995492e+01%)
Noelle:     Loop "  %237 = icmp slt i64 %indvars.iv.i, %118" (4.995454e+01%)
Noelle:     Loop "  %248 = icmp sgt i32 %.017.i, %." (4.970321e+01%)
Noelle:     Loop "  %249 = icmp sgt i32 %.016.i, %." (4.769324e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.909471e-08%)
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.969407e-08%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (4.064210e-04%)
Noelle:     Loop "  %25 = icmp slt i32 %.1, %4" (1.833125e-05%)
Noelle:     Loop "  %54 = icmp slt i32 %.2, %4" (5.305956e-03%)
Noelle:     Loop "  %57 = load i32, i32* %3, align 4, !tbaa !30" (5.301883e-03%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (7.236143e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (6.909471e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (5.969407e-08%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (3.916934e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (8.225560e-09%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %590 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %606 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %368 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %384 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-enable baseline_pre.bc baseline_pre.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: Enablers: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.maIelomsFz (.ll version is /tmp/tmp.DgcyUJqnB1)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.fhYTIIPmxR (.ll version is /tmp/tmp.xgJQJaoIRU)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.maIelomsFz -o /tmp/tmp.fhYTIIPmxR
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.maIelomsFz -o /tmp/tmp.fhYTIIPmxR
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.maIelomsFz -o /tmp/tmp.fhYTIIPmxR
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.maIelomsFz -o /tmp/tmp.fhYTIIPmxR
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.maIelomsFz -o /tmp/tmp.fhYTIIPmxR
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0" (3.838595e-09%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.243193e-04%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.996033e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (6.834266e-04%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %148 = icmp slt i64 %indvars.iv, %61" (2.484119e-04%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %155 = icmp slt i64 %indvars.iv1, %98" (1.229917e-05%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %172 = icmp slt i64 %indvars.iv5, %98" (4.146462e-03%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %176 = icmp slt i64 %indvars.iv3, %102" (4.141840e-03%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %333 = icmp slt i64 %indvars.iv7, %104" (0.000000e+00%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %345 = icmp slt i64 %indvars.iv31.i, %106" (0.000000e+00%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7" (0.000000e+00%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i" (0.000000e+00%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %201 = icmp sgt i32 %.010.i, %." (3.152348e-04%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %205 = icmp sgt i32 %.013.i, %." (3.043457e-04%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %223 = icmp slt i64 %indvars.iv9, %116" (4.995492e+01%)
Noelle:     Loop "  %235 = icmp slt i64 %indvars.iv.i, %118" (4.995454e+01%)
Noelle:     Loop "  %246 = icmp sgt i32 %.017.i, %." (4.970321e+01%)
Noelle:     Loop "  %247 = icmp sgt i32 %.016.i, %." (4.769324e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.909471e-08%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.969407e-08%)
Noelle:  Disable loop "27" as cold code
Noelle:  Function "setup_brightness_lut"
Noelle:  Disable "setup_brightness_lut" as cold function
Noelle:  Function "get_image"
Noelle:  Disable "get_image" as cold function
Noelle:  Function "getint"
Noelle:  Disable "getint" as cold function
Noelle:  Function "put_image"
Noelle:  Disable "put_image" as cold function
Noelle:  Function "corner_draw"
Noelle:  Disable "corner_draw" as cold function
Noelle:  Function "usage"
Noelle:  Disable "usage" as cold function
Noelle:  Function "susan_edges_small"
Noelle:  Disable "susan_edges_small" as cold function
Noelle:  Function "susan_edges"
Noelle:  Disable "susan_edges" as cold function
Noelle:  Function "susan_thin"
Noelle:  Disable "susan_thin" as cold function
Noelle:  Function "edge_draw"
Noelle:  Disable "edge_draw" as cold function
Noelle:  Function "susan_principle_small"
Noelle:  Disable "susan_principle_small" as cold function
Noelle:  Function "susan_principle"
Noelle:  Disable "susan_principle" as cold function
Noelle:  Function "int_to_uchar"
Noelle:  Disable "int_to_uchar" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "atof"
Noelle:  Disable "atof" as cold function
Noelle:  Function "susan_corners_quick"
Noelle:  Disable "susan_corners_quick" as cold function
Noelle:  Function "susan_corners"
Noelle:  Disable "susan_corners" as cold function
EnablersManager:   Try to improve all 5 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %247 = icmp sgt i32 %.016.i, %.
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %247 = icmp sgt i32 %.016.i, %."
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %247, label %265, label %248, !prof !50
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %246 = icmp sgt i32 %.017.i, %.
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %246 = icmp sgt i32 %.017.i, %."
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %246, label %268, label %.preheader.i.preheader, !prof !49
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %235 = icmp slt i64 %indvars.iv.i, %118
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %235 = icmp slt i64 %indvars.iv.i, %118"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %235, label %236, label %332, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:       Loop IV related SCEVs have been simplified
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %223 = icmp slt i64 %indvars.iv9, %116
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i32 %.02, 1000
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager: Exit
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %199 = load i32, i32* %10, align 4, !tbaa !34" (8.053215e-08%)
Noelle:     Loop "  %205 = load i32, i32* %9, align 4, !tbaa !34" (8.053215e-08%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (3.152348e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (3.043457e-04%)
Noelle:     Loop "  %83 = load i32, i32* %10, align 4, !tbaa !34" (5.003289e+01%)
Noelle:     Loop "  %91 = load i32, i32* %9, align 4, !tbaa !34" (5.003262e+01%)
Noelle:     Loop "  %111 = icmp sgt i32 %.017, %.09" (4.970324e+01%)
Noelle:     Loop "  %112 = icmp sgt i32 %.016, %.09" (4.769328e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (6.909471e-08%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (5.969407e-08%)
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0" (3.838595e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.243193e-04%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.996033e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (6.834266e-04%)
Noelle:     Loop "  %148 = icmp slt i64 %indvars.iv, %61" (2.484119e-04%)
Noelle:     Loop "  %155 = icmp slt i64 %indvars.iv1, %98" (1.229917e-05%)
Noelle:     Loop "  %172 = icmp slt i64 %indvars.iv5, %98" (4.146462e-03%)
Noelle:     Loop "  %176 = icmp slt i64 %indvars.iv3, %102" (4.141840e-03%)
Noelle:     Loop "  %333 = icmp slt i64 %indvars.iv7, %104" (0.000000e+00%)
Noelle:     Loop "  %345 = icmp slt i64 %indvars.iv31.i, %106" (0.000000e+00%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i" (0.000000e+00%)
Noelle:     Loop "  %201 = icmp sgt i32 %.010.i, %." (3.152348e-04%)
Noelle:     Loop "  %205 = icmp sgt i32 %.013.i, %." (3.043457e-04%)
Noelle:     Loop "  %223 = icmp slt i64 %indvars.iv9, %116" (4.995492e+01%)
Noelle:     Loop "  %235 = icmp slt i64 %indvars.iv.i, %118" (4.995454e+01%)
Noelle:     Loop "  %246 = icmp sgt i32 %.017.i, %." (4.970321e+01%)
Noelle:     Loop "  %247 = icmp sgt i32 %.016.i, %." (4.769324e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.909471e-08%)
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.969407e-08%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (4.064210e-04%)
Noelle:     Loop "  %25 = icmp slt i32 %.1, %4" (1.833125e-05%)
Noelle:     Loop "  %54 = icmp slt i32 %.2, %4" (5.305956e-03%)
Noelle:     Loop "  %57 = load i32, i32* %3, align 4, !tbaa !30" (5.301883e-03%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (7.236143e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (6.909471e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (5.969407e-08%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (3.916934e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (8.225560e-09%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %590 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %606 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %368 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %384 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %199 = load i32, i32* %10, align 4, !tbaa !34" (8.054605e-08%)
Noelle:     Loop "  %205 = load i32, i32* %9, align 4, !tbaa !34" (8.054605e-08%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (3.152892e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (3.043983e-04%)
Noelle:     Loop "  %83 = load i32, i32* %10, align 4, !tbaa !34" (5.004153e+01%)
Noelle:     Loop "  %91 = load i32, i32* %9, align 4, !tbaa !34" (5.004126e+01%)
Noelle:     Loop "  %111 = icmp sgt i32 %.017, %.09" (4.971182e+01%)
Noelle:     Loop "  %112 = icmp sgt i32 %.016, %.09" (4.770152e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (6.910663e-08%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (5.970437e-08%)
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0" (3.839257e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.244444e-04%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.995169e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (6.835445e-04%)
Noelle:     Loop "  %148 = icmp slt i64 %indvars.iv, %61" (2.484548e-04%)
Noelle:     Loop "  %155 = icmp slt i64 %indvars.iv1, %98" (1.230129e-05%)
Noelle:     Loop "  %172 = icmp slt i64 %indvars.iv5, %98" (4.147178e-03%)
Noelle:     Loop "  %176 = icmp slt i64 %indvars.iv3, %102" (4.142555e-03%)
Noelle:     Loop "  %326 = icmp slt i64 %indvars.iv7, %104" (0.000000e+00%)
Noelle:     Loop "  %338 = icmp slt i64 %indvars.iv31.i, %106" (0.000000e+00%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i" (0.000000e+00%)
Noelle:     Loop "  %201 = icmp sgt i32 %.010.i, %." (3.152892e-04%)
Noelle:     Loop "  %205 = icmp sgt i32 %.013.i, %." (3.043983e-04%)
Noelle:     Loop "  %223 = icmp slt i64 %indvars.iv9, %116" (4.994629e+01%)
Noelle:     Loop "  %238 = icmp slt i64 %indvars.iv.i, %118" (4.994583e+01%)
Noelle:     Loop "  %247 = icmp sgt i32 %.017.i, %." (4.971179e+01%)
Noelle:     Loop "  %248 = icmp sgt i32 %.016.i, %." (4.770148e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.910663e-08%)
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.970437e-08%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (4.064912e-04%)
Noelle:     Loop "  %25 = icmp slt i32 %.1, %4" (1.833441e-05%)
Noelle:     Loop "  %54 = icmp slt i32 %.2, %4" (5.306872e-03%)
Noelle:     Loop "  %57 = load i32, i32* %3, align 4, !tbaa !30" (5.302798e-03%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (7.237392e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (6.910663e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (5.970437e-08%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (3.917610e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (8.226980e-09%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %590 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %606 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %368 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %384 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
NOELLE: FixedPoint:       There are -7 different instructions and -24 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.fhYTIIPmxR -o /tmp/tmp.fhYTIIPmxR
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.fhYTIIPmxR -o /tmp/tmp.fhYTIIPmxR
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.maIelomsFz -o /tmp/tmp.fhYTIIPmxR
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.maIelomsFz -o /tmp/tmp.fhYTIIPmxR
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.maIelomsFz -o /tmp/tmp.fhYTIIPmxR
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0" (3.839257e-09%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.244444e-04%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.995169e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (6.835445e-04%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %148 = icmp slt i64 %indvars.iv, %61" (2.484548e-04%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %155 = icmp slt i64 %indvars.iv1, %98" (1.230129e-05%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %172 = icmp slt i64 %indvars.iv5, %98" (4.147178e-03%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %176 = icmp slt i64 %indvars.iv3, %102" (4.142555e-03%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %326 = icmp slt i64 %indvars.iv7, %104" (0.000000e+00%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %338 = icmp slt i64 %indvars.iv31.i, %106" (0.000000e+00%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7" (0.000000e+00%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i" (0.000000e+00%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %201 = icmp sgt i32 %.010.i, %." (3.152892e-04%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %205 = icmp sgt i32 %.013.i, %." (3.043983e-04%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %223 = icmp slt i64 %indvars.iv9, %116" (4.994629e+01%)
Noelle:     Loop "  %238 = icmp slt i64 %indvars.iv.i, %118" (4.994583e+01%)
Noelle:     Loop "  %247 = icmp sgt i32 %.017.i, %." (4.971179e+01%)
Noelle:     Loop "  %248 = icmp sgt i32 %.016.i, %." (4.770148e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.910663e-08%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.970437e-08%)
Noelle:  Disable loop "27" as cold code
Noelle:  Function "setup_brightness_lut"
Noelle:  Disable "setup_brightness_lut" as cold function
Noelle:  Function "get_image"
Noelle:  Disable "get_image" as cold function
Noelle:  Function "getint"
Noelle:  Disable "getint" as cold function
Noelle:  Function "put_image"
Noelle:  Disable "put_image" as cold function
Noelle:  Function "corner_draw"
Noelle:  Disable "corner_draw" as cold function
Noelle:  Function "usage"
Noelle:  Disable "usage" as cold function
Noelle:  Function "susan_edges_small"
Noelle:  Disable "susan_edges_small" as cold function
Noelle:  Function "susan_edges"
Noelle:  Disable "susan_edges" as cold function
Noelle:  Function "susan_thin"
Noelle:  Disable "susan_thin" as cold function
Noelle:  Function "edge_draw"
Noelle:  Disable "edge_draw" as cold function
Noelle:  Function "susan_principle_small"
Noelle:  Disable "susan_principle_small" as cold function
Noelle:  Function "susan_principle"
Noelle:  Disable "susan_principle" as cold function
Noelle:  Function "int_to_uchar"
Noelle:  Disable "int_to_uchar" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "atof"
Noelle:  Disable "atof" as cold function
Noelle:  Function "susan_corners_quick"
Noelle:  Disable "susan_corners_quick" as cold function
Noelle:  Function "susan_corners"
Noelle:  Disable "susan_corners" as cold function
EnablersManager:   Try to improve all 5 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %248 = icmp sgt i32 %.016.i, %.
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %248 = icmp sgt i32 %.016.i, %."
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %248, label %266, label %249, !prof !50
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %247 = icmp sgt i32 %.017.i, %.
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %247 = icmp sgt i32 %.017.i, %."
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %247, label %269, label %.preheader.i.preheader, !prof !49
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %238 = icmp slt i64 %indvars.iv.i, %118
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %238 = icmp slt i64 %indvars.iv.i, %118"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %238, label %239, label %325, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %223 = icmp slt i64 %indvars.iv9, %116
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %223 = icmp slt i64 %indvars.iv9, %116"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %223, label %224, label %susan_smoothing.exit.loopexit, !prof !41
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:       Loop IV related SCEVs have been simplified
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i32 %.02, 1000
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager: Exit
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %199 = load i32, i32* %10, align 4, !tbaa !34" (8.054605e-08%)
Noelle:     Loop "  %205 = load i32, i32* %9, align 4, !tbaa !34" (8.054605e-08%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (3.152892e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (3.043983e-04%)
Noelle:     Loop "  %83 = load i32, i32* %10, align 4, !tbaa !34" (5.004153e+01%)
Noelle:     Loop "  %91 = load i32, i32* %9, align 4, !tbaa !34" (5.004126e+01%)
Noelle:     Loop "  %111 = icmp sgt i32 %.017, %.09" (4.971182e+01%)
Noelle:     Loop "  %112 = icmp sgt i32 %.016, %.09" (4.770152e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (6.910663e-08%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (5.970437e-08%)
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0" (3.839257e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.244444e-04%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.995169e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (6.835445e-04%)
Noelle:     Loop "  %148 = icmp slt i64 %indvars.iv, %61" (2.484548e-04%)
Noelle:     Loop "  %155 = icmp slt i64 %indvars.iv1, %98" (1.230129e-05%)
Noelle:     Loop "  %172 = icmp slt i64 %indvars.iv5, %98" (4.147178e-03%)
Noelle:     Loop "  %176 = icmp slt i64 %indvars.iv3, %102" (4.142555e-03%)
Noelle:     Loop "  %326 = icmp slt i64 %indvars.iv7, %104" (0.000000e+00%)
Noelle:     Loop "  %338 = icmp slt i64 %indvars.iv31.i, %106" (0.000000e+00%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i" (0.000000e+00%)
Noelle:     Loop "  %201 = icmp sgt i32 %.010.i, %." (3.152892e-04%)
Noelle:     Loop "  %205 = icmp sgt i32 %.013.i, %." (3.043983e-04%)
Noelle:     Loop "  %223 = icmp slt i64 %indvars.iv9, %116" (4.994629e+01%)
Noelle:     Loop "  %238 = icmp slt i64 %indvars.iv.i, %118" (4.994583e+01%)
Noelle:     Loop "  %247 = icmp sgt i32 %.017.i, %." (4.971179e+01%)
Noelle:     Loop "  %248 = icmp sgt i32 %.016.i, %." (4.770148e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.910663e-08%)
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.970437e-08%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (4.064912e-04%)
Noelle:     Loop "  %25 = icmp slt i32 %.1, %4" (1.833441e-05%)
Noelle:     Loop "  %54 = icmp slt i32 %.2, %4" (5.306872e-03%)
Noelle:     Loop "  %57 = load i32, i32* %3, align 4, !tbaa !30" (5.302798e-03%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (7.237392e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (6.910663e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (5.970437e-08%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (3.917610e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (8.226980e-09%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %590 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %606 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %368 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %384 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %199 = load i32, i32* %10, align 4, !tbaa !34" (8.054613e-08%)
Noelle:     Loop "  %205 = load i32, i32* %9, align 4, !tbaa !34" (8.054613e-08%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (3.152895e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (3.043985e-04%)
Noelle:     Loop "  %83 = load i32, i32* %10, align 4, !tbaa !34" (5.004157e+01%)
Noelle:     Loop "  %91 = load i32, i32* %9, align 4, !tbaa !34" (5.004130e+01%)
Noelle:     Loop "  %111 = icmp sgt i32 %.017, %.09" (4.971187e+01%)
Noelle:     Loop "  %112 = icmp sgt i32 %.016, %.09" (4.770156e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (6.910670e-08%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (5.970443e-08%)
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0" (3.839261e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.244450e-04%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.995165e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (6.835452e-04%)
Noelle:     Loop "  %149 = icmp slt i64 %indvars.iv, %61" (2.484550e-04%)
Noelle:     Loop "  %156 = icmp slt i64 %indvars.iv1, %99" (1.230131e-05%)
Noelle:     Loop "  %173 = icmp slt i64 %indvars.iv5, %99" (4.147181e-03%)
Noelle:     Loop "  %177 = icmp slt i64 %indvars.iv3, %103" (4.142559e-03%)
Noelle:     Loop "  %323 = icmp slt i64 %indvars.iv7, %105" (0.000000e+00%)
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv31.i, %107" (0.000000e+00%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i" (0.000000e+00%)
Noelle:     Loop "  %202 = icmp sgt i32 %.010.i, %." (3.152895e-04%)
Noelle:     Loop "  %206 = icmp sgt i32 %.013.i, %." (3.043985e-04%)
Noelle:     Loop "  %224 = icmp slt i64 %indvars.iv9, %117" (4.994624e+01%)
Noelle:     Loop "  %235 = icmp slt i64 %indvars.iv.i, %119" (4.994588e+01%)
Noelle:     Loop "  %244 = icmp sgt i32 %.017.i, %." (4.971183e+01%)
Noelle:     Loop "  %245 = icmp sgt i32 %.016.i, %." (4.770152e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.910670e-08%)
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.970443e-08%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (4.064915e-04%)
Noelle:     Loop "  %25 = icmp slt i32 %.1, %4" (1.833443e-05%)
Noelle:     Loop "  %54 = icmp slt i32 %.2, %4" (5.306877e-03%)
Noelle:     Loop "  %57 = load i32, i32* %3, align 4, !tbaa !30" (5.302803e-03%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (7.237399e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (6.910670e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (5.970443e-08%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (3.917613e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (8.226988e-09%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %590 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %606 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %368 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %384 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
NOELLE: FixedPoint:       There are -3 different instructions and -8 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.fhYTIIPmxR -o /tmp/tmp.fhYTIIPmxR
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.fhYTIIPmxR -o /tmp/tmp.fhYTIIPmxR
NOELLE: FixedPoint:     Invocation 2
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.maIelomsFz -o /tmp/tmp.fhYTIIPmxR
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.maIelomsFz -o /tmp/tmp.fhYTIIPmxR
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.maIelomsFz -o /tmp/tmp.fhYTIIPmxR
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0" (3.839261e-09%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.244450e-04%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.995165e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (6.835452e-04%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %149 = icmp slt i64 %indvars.iv, %61" (2.484550e-04%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %156 = icmp slt i64 %indvars.iv1, %99" (1.230131e-05%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %173 = icmp slt i64 %indvars.iv5, %99" (4.147181e-03%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %177 = icmp slt i64 %indvars.iv3, %103" (4.142559e-03%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %323 = icmp slt i64 %indvars.iv7, %105" (0.000000e+00%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv31.i, %107" (0.000000e+00%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7" (0.000000e+00%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i" (0.000000e+00%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %202 = icmp sgt i32 %.010.i, %." (3.152895e-04%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %206 = icmp sgt i32 %.013.i, %." (3.043985e-04%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %224 = icmp slt i64 %indvars.iv9, %117" (4.994624e+01%)
Noelle:     Loop "  %235 = icmp slt i64 %indvars.iv.i, %119" (4.994588e+01%)
Noelle:     Loop "  %244 = icmp sgt i32 %.017.i, %." (4.971183e+01%)
Noelle:     Loop "  %245 = icmp sgt i32 %.016.i, %." (4.770152e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.910670e-08%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.970443e-08%)
Noelle:  Disable loop "27" as cold code
Noelle:  Function "setup_brightness_lut"
Noelle:  Disable "setup_brightness_lut" as cold function
Noelle:  Function "get_image"
Noelle:  Disable "get_image" as cold function
Noelle:  Function "getint"
Noelle:  Disable "getint" as cold function
Noelle:  Function "put_image"
Noelle:  Disable "put_image" as cold function
Noelle:  Function "corner_draw"
Noelle:  Disable "corner_draw" as cold function
Noelle:  Function "usage"
Noelle:  Disable "usage" as cold function
Noelle:  Function "susan_edges_small"
Noelle:  Disable "susan_edges_small" as cold function
Noelle:  Function "susan_edges"
Noelle:  Disable "susan_edges" as cold function
Noelle:  Function "susan_thin"
Noelle:  Disable "susan_thin" as cold function
Noelle:  Function "edge_draw"
Noelle:  Disable "edge_draw" as cold function
Noelle:  Function "susan_principle_small"
Noelle:  Disable "susan_principle_small" as cold function
Noelle:  Function "susan_principle"
Noelle:  Disable "susan_principle" as cold function
Noelle:  Function "int_to_uchar"
Noelle:  Disable "int_to_uchar" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "atof"
Noelle:  Disable "atof" as cold function
Noelle:  Function "susan_corners_quick"
Noelle:  Disable "susan_corners_quick" as cold function
Noelle:  Function "susan_corners"
Noelle:  Disable "susan_corners" as cold function
EnablersManager:   Try to improve all 5 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %245 = icmp sgt i32 %.016.i, %.
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %245 = icmp sgt i32 %.016.i, %."
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %245, label %263, label %246, !prof !50
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %244 = icmp sgt i32 %.017.i, %.
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %244 = icmp sgt i32 %.017.i, %."
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %244, label %266, label %.preheader.i.preheader, !prof !49
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %235 = icmp slt i64 %indvars.iv.i, %119
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %235 = icmp slt i64 %indvars.iv.i, %119"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %235, label %236, label %322, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %224 = icmp slt i64 %indvars.iv9, %117
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %224 = icmp slt i64 %indvars.iv9, %117"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %224, label %225, label %susan_smoothing.exit.loopexit, !prof !41
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i32 %.02, 1000
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i32 %.02, 1000"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %.loopexit.loopexit, label %121, !prof !38
Mem2Reg:   The loop has 1SCCs that each one access the same memory location
Mem2Reg:     Loop invariant memory location:   %6 = alloca i8*, align 8
Mem2Reg:     SCC:
Internal nodes: 1
	  store i8* %123, i8** %6, align 8, !tbaa !31
External nodes: 2
	  br i1 %exitcond, label %.loopexit.loopexit, label %121, !prof !38
	  %123 = getelementptr inbounds i8, i8* %122, i64 258
Edges: 3

Mem2Reg:  Collecting and ordering memory loads/stores by basic block
Mem2Reg: Iterating basic blocks to determine last stored values
Mem2Reg: placeholder PHI required: label %121
Mem2Reg:  checking for last value entering block: label %121
Mem2Reg:  Last value entering block: label %121	  %122 = phi i8* 
Mem2Reg:  checking for last value entering block: label %123
Mem2Reg:  Last value entering block: label %123	  %122 = phi i8* 
Mem2Reg:  Value updated:   %125 = getelementptr inbounds i8, i8* %124, i64 258
Mem2Reg: placeholder PHI required: label %..split_crit_edge.i
Mem2Reg:  checking for last value entering block: label %..split_crit_edge.i
Mem2Reg:  Last value entering block: label %..split_crit_edge.i	  %126 = phi i8* 
Mem2Reg:  checking for last value entering block: label %setup_brightness_lut.exit
Mem2Reg:  Last value entering block: label %setup_brightness_lut.exit	  %126 = phi i8* 
Mem2Reg:  checking for last value entering block: label %127
Mem2Reg:  Last value entering block: label %127	  %126 = phi i8* 
Mem2Reg:  checking for last value entering block: label %144
Mem2Reg:  Last value entering block: label %144	  %126 = phi i8* 
Mem2Reg:  checking for last value entering block: label %148
Mem2Reg:  Last value entering block: label %148	  %126 = phi i8* 
Mem2Reg: placeholder PHI required: label %151
Mem2Reg:  checking for last value entering block: label %151
Mem2Reg:  Last value entering block: label %151	  %152 = phi i8* 
Mem2Reg:  checking for last value entering block: label %154
Mem2Reg:  Last value entering block: label %154	  %152 = phi i8* 
Mem2Reg:  checking for last value entering block: label %.preheader2.i.preheader
Mem2Reg:  Last value entering block: label %.preheader2.i.preheader	  %152 = phi i8* 
Mem2Reg: placeholder PHI required: label %.preheader2.i
Mem2Reg:  checking for last value entering block: label %.preheader2.i
Mem2Reg:  Last value entering block: label %.preheader2.i	  %160 = phi i8* 
Mem2Reg:  checking for last value entering block: label %162
Mem2Reg:  Last value entering block: label %162	  %160 = phi i8* 
Mem2Reg:  checking for last value entering block: label %.preheader1.i.preheader
Mem2Reg:  Last value entering block: label %.preheader1.i.preheader	  %160 = phi i8* 
Mem2Reg: placeholder PHI required: label %.preheader1.i
Mem2Reg:  checking for last value entering block: label %.preheader1.i
Mem2Reg:  Last value entering block: label %.preheader1.i	  %178 = phi i8* 
Mem2Reg:  checking for last value entering block: label %.preheader.i4
Mem2Reg:  Last value entering block: label %.preheader.i4	  %178 = phi i8* 
Mem2Reg:  checking for last value entering block: label %enlarge.exit
Mem2Reg:  Last value entering block: label %enlarge.exit	  %178 = phi i8* 
Mem2Reg: placeholder PHI required: label %182
Mem2Reg:  checking for last value entering block: label %182
Mem2Reg:  Last value entering block: label %182	  %183 = phi i8* 
Mem2Reg:  checking for last value entering block: label %206
Mem2Reg:  Last value entering block: label %206	  %178 = phi i8* 
Mem2Reg:  checking for last value entering block: label %.preheader22.preheader.i
Mem2Reg:  Last value entering block: label %.preheader22.preheader.i	  %178 = phi i8* 
Mem2Reg:  checking for last value entering block: label %185
Mem2Reg:  Last value entering block: label %185	  %183 = phi i8* 
Mem2Reg:  checking for last value entering block: label %204
Mem2Reg:  Last value entering block: label %204	  %183 = phi i8* 
Mem2Reg: placeholder PHI required: label %208
Mem2Reg:  checking for last value entering block: label %208
Mem2Reg:  Last value entering block: label %208	  %209 = phi i8* 
Mem2Reg: placeholder PHI required: label %.preheader22.i
Mem2Reg:  checking for last value entering block: label %.preheader22.i
Mem2Reg:  Last value entering block: label %.preheader22.i	  %331 = phi i8* 
Mem2Reg:  checking for last value entering block: label %229
Mem2Reg:  Last value entering block: label %229	  %209 = phi i8* 
Mem2Reg:  checking for last value entering block: label %211
Mem2Reg:  Last value entering block: label %211	  %209 = phi i8* 
Mem2Reg:  checking for last value entering block: label %333
Mem2Reg:  Last value entering block: label %333	  %331 = phi i8* 
Mem2Reg:  checking for last value entering block: label %susan_smoothing.exit.loopexit17
Mem2Reg:  Last value entering block: label %susan_smoothing.exit.loopexit17	  %331 = phi i8* 
Mem2Reg: placeholder PHI required: label %231
Mem2Reg:  checking for last value entering block: label %231
Mem2Reg:  Last value entering block: label %231	  %232 = phi i8* 
Mem2Reg: placeholder PHI required: label %213
Mem2Reg:  checking for last value entering block: label %213
Mem2Reg:  Last value entering block: label %213	  %214 = phi i8* 
Mem2Reg: placeholder PHI required: label %345
Mem2Reg:  checking for last value entering block: label %345
Mem2Reg:  Last value entering block: label %345	  %346 = phi i8* 
Mem2Reg: placeholder PHI required: label %susan_smoothing.exit
Mem2Reg:  checking for last value entering block: label %susan_smoothing.exit
Mem2Reg:  Last value entering block: label %susan_smoothing.exit	  %517 = phi i8* 
Mem2Reg:  checking for last value entering block: label %235
Mem2Reg:  Last value entering block: label %235	  %233 = phi i8* 
Mem2Reg:  checking for last value entering block: label %susan_smoothing.exit.loopexit
Mem2Reg:  Last value entering block: label %susan_smoothing.exit.loopexit	  %233 = phi i8* 
Mem2Reg:  checking for last value entering block: label %228
Mem2Reg:  Last value entering block: label %228	  %214 = phi i8* 
Mem2Reg:  checking for last value entering block: label %216
Mem2Reg:  Last value entering block: label %216	  %214 = phi i8* 
Mem2Reg:  checking for last value entering block: label %348
Mem2Reg:  Last value entering block: label %348	  %346 = phi i8* 
Mem2Reg:  checking for last value entering block: label %516
Mem2Reg:  Last value entering block: label %516	  %346 = phi i8* 
Mem2Reg: placeholder PHI required: label %244
Mem2Reg:  checking for last value entering block: label %244
Mem2Reg:  Last value entering block: label %244	  %245 = phi i8* 
Mem2Reg:  checking for last value entering block: label %430
Mem2Reg:  Last value entering block: label %430	  %347 = phi i8* 
Mem2Reg:  checking for last value entering block: label %485
Mem2Reg:  Last value entering block: label %485	  %347 = phi i8* 
Mem2Reg:  checking for last value entering block: label %247
Mem2Reg:  Last value entering block: label %247	  %245 = phi i8* 
Mem2Reg:  checking for last value entering block: label %333
Mem2Reg:  Last value entering block: label %333	  %245 = phi i8* 
Mem2Reg: placeholder PHI required: label %471
Mem2Reg:  checking for last value entering block: label %471
Mem2Reg:  Last value entering block: label %471	  %472 = phi i8* 
Mem2Reg: placeholder PHI required: label %517
Mem2Reg:  checking for last value entering block: label %517
Mem2Reg:  Last value entering block: label %517	  %518 = phi i8* 
Mem2Reg: placeholder PHI required: label %254
Mem2Reg:  checking for last value entering block: label %254
Mem2Reg:  Last value entering block: label %254	  %255 = phi i8* 
Mem2Reg:  checking for last value entering block: label %median.exit
Mem2Reg:  Last value entering block: label %median.exit	  %473 = phi i8* 
Mem2Reg:  checking for last value entering block: label %.preheader.i2.preheader
Mem2Reg:  Last value entering block: label %.preheader.i2.preheader	  %473 = phi i8* 
Mem2Reg:  checking for last value entering block: label %278
Mem2Reg:  Last value entering block: label %278	  %255 = phi i8* 
Mem2Reg:  checking for last value entering block: label %.preheader.i.preheader
Mem2Reg:  Last value entering block: label %.preheader.i.preheader	  %255 = phi i8* 
Mem2Reg: placeholder PHI required: label %.preheader.i2
Mem2Reg:  checking for last value entering block: label %.preheader.i2
Mem2Reg:  Last value entering block: label %.preheader.i2	  %474 = phi i8* 
Mem2Reg:  checking for last value entering block: label %281
Mem2Reg:  Last value entering block: label %281	  %255 = phi i8* 
Mem2Reg:  checking for last value entering block: label %328
Mem2Reg:  Last value entering block: label %328	  %255 = phi i8* 
Mem2Reg: placeholder PHI required: label %.preheader.i
Mem2Reg:  checking for last value entering block: label %.preheader.i
Mem2Reg:  Last value entering block: label %.preheader.i	  %257 = phi i8* 
Mem2Reg:  checking for last value entering block: label %483
Mem2Reg:  Last value entering block: label %483	  %475 = phi i8* 
Mem2Reg:  checking for last value entering block: label %476
Mem2Reg:  Last value entering block: label %476	  %475 = phi i8* 
Mem2Reg: placeholder PHI required: label %315
Mem2Reg:  checking for last value entering block: label %315
Mem2Reg:  Last value entering block: label %315	  %316 = phi i8* 
Mem2Reg: placeholder PHI required: label %335
Mem2Reg:  checking for last value entering block: label %335
Mem2Reg:  Last value entering block: label %335	  %336 = phi i8* 
Mem2Reg:  checking for last value entering block: label %276
Mem2Reg:  Last value entering block: label %276	  %257 = phi i8* 
Mem2Reg:  checking for last value entering block: label %259
Mem2Reg:  Last value entering block: label %259	  %257 = phi i8* 
Mem2Reg:  checking for last value entering block: label %484
Mem2Reg:  Last value entering block: label %484	  %477 = phi i8* 
Mem2Reg:  checking for last value entering block: label %.._crit_edge.i6_crit_edge
Mem2Reg:  Last value entering block: label %.._crit_edge.i6_crit_edge	  %477 = phi i8* 
Mem2Reg:  checking for last value entering block: label %median.exit.i
Mem2Reg:  Last value entering block: label %median.exit.i	  %316 = phi i8* 
Mem2Reg:  checking for last value entering block: label %.preheader.i.i.preheader
Mem2Reg:  Last value entering block: label %.preheader.i.i.preheader	  %316 = phi i8* 
Mem2Reg:  checking for last value entering block: label %._crit_edge.i6
Mem2Reg:  Last value entering block: label %._crit_edge.i6	  %485 = phi i8* [ %477, %.._crit_edge.i6_crit_edge ], [ %477, %484 ]
Mem2Reg: placeholder PHI required: label %.preheader.i.i
Mem2Reg:  checking for last value entering block: label %.preheader.i.i
Mem2Reg:  Last value entering block: label %.preheader.i.i	  %317 = phi i8* 
Mem2Reg:  checking for last value entering block: label %325
Mem2Reg:  Last value entering block: label %325	  %317 = phi i8* 
Mem2Reg:  checking for last value entering block: label %318
Mem2Reg:  Last value entering block: label %318	  %317 = phi i8* 
Mem2Reg:  checking for last value entering block: label %324
Mem2Reg:  Last value entering block: label %324	  %317 = phi i8* 
Mem2Reg:  checking for last value entering block: label %.._crit_edge.i.i_crit_edge
Mem2Reg:  Last value entering block: label %.._crit_edge.i.i_crit_edge	  %317 = phi i8* 
Mem2Reg:  checking for last value entering block: label %._crit_edge.i.i
Mem2Reg:  Last value entering block: label %._crit_edge.i.i	  %325 = phi i8* [ %317, %.._crit_edge.i.i_crit_edge ], [ %317, %324 ]
Mem2Reg:  Removing
  store i8* %125, i8** %6, align 8, !tbaa !31
Mem2Reg:       The memory location has been promoted
Mem2Reg: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager: Exit
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %199 = load i32, i32* %10, align 4, !tbaa !34" (8.054613e-08%)
Noelle:     Loop "  %205 = load i32, i32* %9, align 4, !tbaa !34" (8.054613e-08%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (3.152895e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (3.043985e-04%)
Noelle:     Loop "  %83 = load i32, i32* %10, align 4, !tbaa !34" (5.004157e+01%)
Noelle:     Loop "  %91 = load i32, i32* %9, align 4, !tbaa !34" (5.004130e+01%)
Noelle:     Loop "  %111 = icmp sgt i32 %.017, %.09" (4.971187e+01%)
Noelle:     Loop "  %112 = icmp sgt i32 %.016, %.09" (4.770156e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (6.910670e-08%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (5.970443e-08%)
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0" (3.839261e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.244450e-04%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.995165e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (6.835452e-04%)
Noelle:     Loop "  %149 = icmp slt i64 %indvars.iv, %61" (2.484550e-04%)
Noelle:     Loop "  %156 = icmp slt i64 %indvars.iv1, %99" (1.230131e-05%)
Noelle:     Loop "  %173 = icmp slt i64 %indvars.iv5, %99" (4.147181e-03%)
Noelle:     Loop "  %177 = icmp slt i64 %indvars.iv3, %103" (4.142559e-03%)
Noelle:     Loop "  %323 = icmp slt i64 %indvars.iv7, %105" (0.000000e+00%)
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv31.i, %107" (0.000000e+00%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i" (0.000000e+00%)
Noelle:     Loop "  %202 = icmp sgt i32 %.010.i, %." (3.152895e-04%)
Noelle:     Loop "  %206 = icmp sgt i32 %.013.i, %." (3.043985e-04%)
Noelle:     Loop "  %224 = icmp slt i64 %indvars.iv9, %117" (4.994624e+01%)
Noelle:     Loop "  %235 = icmp slt i64 %indvars.iv.i, %119" (4.994588e+01%)
Noelle:     Loop "  %244 = icmp sgt i32 %.017.i, %." (4.971183e+01%)
Noelle:     Loop "  %245 = icmp sgt i32 %.016.i, %." (4.770152e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.910670e-08%)
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.970443e-08%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (4.064915e-04%)
Noelle:     Loop "  %25 = icmp slt i32 %.1, %4" (1.833443e-05%)
Noelle:     Loop "  %54 = icmp slt i32 %.2, %4" (5.306877e-03%)
Noelle:     Loop "  %57 = load i32, i32* %3, align 4, !tbaa !30" (5.302803e-03%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (7.237399e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (6.910670e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (5.970443e-08%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (3.917613e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (8.226988e-09%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %590 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %606 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %368 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %384 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0" (3.685014e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (6.953395e-04%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (5.196241e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (7.333177e-04%)
Noelle:     Loop "  %154 = icmp slt i64 %indvars.iv, %61" (2.818659e-04%)
Noelle:     Loop "  %163 = icmp slt i64 %indvars.iv1, %99" (1.293515e-05%)
Noelle:     Loop "  %182 = icmp slt i64 %indvars.iv5, %99" (4.299655e-03%)
Noelle:     Loop "  %187 = icmp slt i64 %indvars.iv3, %103" (4.294616e-03%)
Noelle:     Loop "  %347 = icmp slt i64 %indvars.iv7, %105" (0.000000e+00%)
Noelle:     Loop "  %360 = icmp slt i64 %indvars.iv31.i, %107" (0.000000e+00%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i" (0.000000e+00%)
Noelle:     Loop "  %214 = icmp sgt i32 %.010.i, %." (3.387956e-04%)
Noelle:     Loop "  %219 = icmp sgt i32 %.013.i, %." (3.271390e-04%)
Noelle:     Loop "  %239 = icmp slt i64 %indvars.iv9, %117" (5.195674e+01%)
Noelle:     Loop "  %251 = icmp slt i64 %indvars.iv.i, %119" (5.195637e+01%)
Noelle:     Loop "  %261 = icmp sgt i32 %.017.i, %." (5.171507e+01%)
Noelle:     Loop "  %263 = icmp sgt i32 %.016.i, %." (4.965245e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (7.700927e-08%)
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (6.678147e-08%)
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %199 = load i32, i32* %10, align 4, !tbaa !34" (7.731008e-08%)
Noelle:     Loop "  %205 = load i32, i32* %9, align 4, !tbaa !34" (7.731008e-08%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (3.026223e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (2.921689e-04%)
Noelle:     Loop "  %83 = load i32, i32* %10, align 4, !tbaa !34" (4.803109e+01%)
Noelle:     Loop "  %91 = load i32, i32* %9, align 4, !tbaa !34" (4.803083e+01%)
Noelle:     Loop "  %111 = icmp sgt i32 %.017, %.09" (4.771463e+01%)
Noelle:     Loop "  %112 = icmp sgt i32 %.016, %.09" (4.578509e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (6.633025e-08%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (5.730572e-08%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (3.901602e-04%)
Noelle:     Loop "  %25 = icmp slt i32 %.1, %4" (1.759782e-05%)
Noelle:     Loop "  %54 = icmp slt i32 %.2, %4" (5.093667e-03%)
Noelle:     Loop "  %57 = load i32, i32* %3, align 4, !tbaa !30" (5.089756e-03%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (6.946627e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (6.633025e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (5.730572e-08%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (3.760218e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (7.896458e-09%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %590 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %606 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %368 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %384 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
NOELLE: FixedPoint:       There are 3 different instructions and -1 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.fhYTIIPmxR -o /tmp/tmp.fhYTIIPmxR
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.fhYTIIPmxR -o /tmp/tmp.fhYTIIPmxR
NOELLE: FixedPoint:     Invocation 3
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.maIelomsFz -o /tmp/tmp.fhYTIIPmxR
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.maIelomsFz -o /tmp/tmp.fhYTIIPmxR
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.maIelomsFz -o /tmp/tmp.fhYTIIPmxR
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0" (3.838593e-09%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.243190e-04%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.996036e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (6.834262e-04%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %151 = icmp slt i64 %indvars.iv, %61" (2.484118e-04%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv1, %99" (1.229917e-05%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv5, %99" (4.146460e-03%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %179 = icmp slt i64 %indvars.iv3, %103" (4.141838e-03%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %332 = icmp slt i64 %indvars.iv7, %105" (0.000000e+00%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %345 = icmp slt i64 %indvars.iv31.i, %107" (0.000000e+00%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7" (0.000000e+00%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i" (0.000000e+00%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %204 = icmp sgt i32 %.010.i, %." (3.152347e-04%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %208 = icmp sgt i32 %.013.i, %." (3.043456e-04%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %227 = icmp slt i64 %indvars.iv9, %117" (4.995495e+01%)
Noelle:     Loop "  %239 = icmp slt i64 %indvars.iv.i, %119" (4.995454e+01%)
Noelle:     Loop "  %248 = icmp sgt i32 %.017.i, %." (4.970318e+01%)
Noelle:     Loop "  %249 = icmp sgt i32 %.016.i, %." (4.769322e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (8.131550e-08%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (6.956471e-08%)
Noelle:  Disable loop "27" as cold code
Noelle:  Function "setup_brightness_lut"
Noelle:  Disable "setup_brightness_lut" as cold function
Noelle:  Function "get_image"
Noelle:  Disable "get_image" as cold function
Noelle:  Function "getint"
Noelle:  Disable "getint" as cold function
Noelle:  Function "put_image"
Noelle:  Disable "put_image" as cold function
Noelle:  Function "corner_draw"
Noelle:  Disable "corner_draw" as cold function
Noelle:  Function "usage"
Noelle:  Disable "usage" as cold function
Noelle:  Function "susan_edges_small"
Noelle:  Disable "susan_edges_small" as cold function
Noelle:  Function "susan_edges"
Noelle:  Disable "susan_edges" as cold function
Noelle:  Function "susan_thin"
Noelle:  Disable "susan_thin" as cold function
Noelle:  Function "edge_draw"
Noelle:  Disable "edge_draw" as cold function
Noelle:  Function "susan_principle_small"
Noelle:  Disable "susan_principle_small" as cold function
Noelle:  Function "susan_principle"
Noelle:  Disable "susan_principle" as cold function
Noelle:  Function "int_to_uchar"
Noelle:  Disable "int_to_uchar" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "atof"
Noelle:  Disable "atof" as cold function
Noelle:  Function "susan_corners_quick"
Noelle:  Disable "susan_corners_quick" as cold function
Noelle:  Function "susan_corners"
Noelle:  Disable "susan_corners" as cold function
EnablersManager:   Try to improve all 5 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %249 = icmp sgt i32 %.016.i, %.
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %249 = icmp sgt i32 %.016.i, %."
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %249, label %267, label %250, !prof !50
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %248 = icmp sgt i32 %.017.i, %.
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %248 = icmp sgt i32 %.017.i, %."
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %248, label %270, label %.preheader.i.preheader, !prof !49
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %239 = icmp slt i64 %indvars.iv.i, %119
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %239 = icmp slt i64 %indvars.iv.i, %119"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %239, label %240, label %330, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
SCEVSimplification: Removing loop entry PHI (part of PHI-only propagation):   %238 = phi i8* [ %329, %328 ], [ %226, %228 ]
SCEVSimplification: 	Removing PHI (part of PHI-only propagation):   %316 = phi i8* [ %308, %.._crit_edge.i.i_crit_edge ], [ %308, %315 ]
SCEVSimplification: 	Removing PHI (part of PHI-only propagation):   %329 = phi i8* [ %238, %323 ], [ %.lcssa15, %median.exit.i ]
SCEVSimplification: 	Removing PHI (part of PHI-only propagation):   %238 = phi i8* [ %329, %328 ], [ %226, %228 ]
SCEVSimplification: 	Removing PHI (part of PHI-only propagation):   %.lcssa15 = phi i8* [ %307, %306 ]
SCEVSimplification: 	Removing PHI (part of PHI-only propagation):   %308 = phi i8* [ %307, %.preheader.i.i.preheader ], [ %316, %._crit_edge.i.i ]
SCEVSimplification: 	Removing PHI (part of PHI-only propagation):   %307 = phi i8* [ %.lcssa14, %317 ], [ %238, %273 ]
SCEVSimplification: 	Removing PHI (part of PHI-only propagation):   %.lcssa14 = phi i8* [ %308, %.preheader.i.i ]
EnablersManager:       Loop constant PHIs have been simplified
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %227 = icmp slt i64 %indvars.iv9, %117
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i32 %.02, 1000
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager: Exit
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %199 = load i32, i32* %10, align 4, !tbaa !34" (8.053212e-08%)
Noelle:     Loop "  %205 = load i32, i32* %9, align 4, !tbaa !34" (8.053212e-08%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (3.152347e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (3.043456e-04%)
Noelle:     Loop "  %83 = load i32, i32* %10, align 4, !tbaa !34" (5.003287e+01%)
Noelle:     Loop "  %91 = load i32, i32* %9, align 4, !tbaa !34" (5.003260e+01%)
Noelle:     Loop "  %111 = icmp sgt i32 %.017, %.09" (4.970322e+01%)
Noelle:     Loop "  %112 = icmp sgt i32 %.016, %.09" (4.769326e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (6.909468e-08%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (5.969404e-08%)
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0" (3.838593e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.243190e-04%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.996036e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (6.834262e-04%)
Noelle:     Loop "  %151 = icmp slt i64 %indvars.iv, %61" (2.484118e-04%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv1, %99" (1.229917e-05%)
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv5, %99" (4.146460e-03%)
Noelle:     Loop "  %179 = icmp slt i64 %indvars.iv3, %103" (4.141838e-03%)
Noelle:     Loop "  %332 = icmp slt i64 %indvars.iv7, %105" (0.000000e+00%)
Noelle:     Loop "  %345 = icmp slt i64 %indvars.iv31.i, %107" (0.000000e+00%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i" (0.000000e+00%)
Noelle:     Loop "  %204 = icmp sgt i32 %.010.i, %." (3.152347e-04%)
Noelle:     Loop "  %208 = icmp sgt i32 %.013.i, %." (3.043456e-04%)
Noelle:     Loop "  %227 = icmp slt i64 %indvars.iv9, %117" (4.995495e+01%)
Noelle:     Loop "  %239 = icmp slt i64 %indvars.iv.i, %119" (4.995454e+01%)
Noelle:     Loop "  %248 = icmp sgt i32 %.017.i, %." (4.970318e+01%)
Noelle:     Loop "  %249 = icmp sgt i32 %.016.i, %." (4.769322e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (8.131550e-08%)
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (6.956471e-08%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (4.064208e-04%)
Noelle:     Loop "  %25 = icmp slt i32 %.1, %4" (1.833124e-05%)
Noelle:     Loop "  %54 = icmp slt i32 %.2, %4" (5.305954e-03%)
Noelle:     Loop "  %57 = load i32, i32* %3, align 4, !tbaa !30" (5.301880e-03%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (7.236140e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (6.909468e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (5.969404e-08%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (3.916932e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (8.225557e-09%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %590 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %606 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %368 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %384 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "susan_smoothing"
Noelle:     Loop "  %199 = load i32, i32* %10, align 4, !tbaa !34" (8.054609e-08%)
Noelle:     Loop "  %205 = load i32, i32* %9, align 4, !tbaa !34" (8.054609e-08%)
Noelle:     Loop "  %49 = icmp sgt i32 %.010, %.09" (3.152894e-04%)
Noelle:     Loop "  %53 = icmp sgt i32 %.013, %.09" (3.043984e-04%)
Noelle:     Loop "  %83 = load i32, i32* %10, align 4, !tbaa !34" (5.004155e+01%)
Noelle:     Loop "  %91 = load i32, i32* %9, align 4, !tbaa !34" (5.004128e+01%)
Noelle:     Loop "  %111 = icmp sgt i32 %.017, %.09" (4.971185e+01%)
Noelle:     Loop "  %112 = icmp sgt i32 %.016, %.09" (4.770154e+01%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i, 7" (6.910667e-08%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, %indvars.iv6.i" (5.970440e-08%)
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0" (3.839259e-09%)
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000" (0.000000e+00%)
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000" (7.244447e-04%)
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000" (4.995167e+01%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257" (6.835448e-04%)
Noelle:     Loop "  %151 = icmp slt i64 %indvars.iv, %61" (2.484549e-04%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv1, %99" (1.230130e-05%)
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv5, %99" (4.147180e-03%)
Noelle:     Loop "  %179 = icmp slt i64 %indvars.iv3, %103" (4.142557e-03%)
Noelle:     Loop "  %327 = icmp slt i64 %indvars.iv7, %105" (0.000000e+00%)
Noelle:     Loop "  %340 = icmp slt i64 %indvars.iv31.i, %107" (0.000000e+00%)
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i" (0.000000e+00%)
Noelle:     Loop "  %204 = icmp sgt i32 %.010.i, %." (3.152894e-04%)
Noelle:     Loop "  %208 = icmp sgt i32 %.013.i, %." (3.043984e-04%)
Noelle:     Loop "  %227 = icmp slt i64 %indvars.iv9, %117" (4.994626e+01%)
Noelle:     Loop "  %238 = icmp slt i64 %indvars.iv.i, %119" (4.994586e+01%)
Noelle:     Loop "  %247 = icmp sgt i32 %.017.i, %." (4.971181e+01%)
Noelle:     Loop "  %248 = icmp sgt i32 %.016.i, %." (4.770150e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7" (6.910667e-08%)
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i" (5.970440e-08%)
Noelle:  Function "enlarge"
Noelle:     Loop "  %10 = load i32, i32* %3, align 4, !tbaa !30" (4.064914e-04%)
Noelle:     Loop "  %25 = icmp slt i32 %.1, %4" (1.833442e-05%)
Noelle:     Loop "  %54 = icmp slt i32 %.2, %4" (5.306875e-03%)
Noelle:     Loop "  %57 = load i32, i32* %3, align 4, !tbaa !30" (5.302800e-03%)
Noelle:  Function "setup_brightness_lut"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 257" (7.237395e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 257" (0.000000e+00%)
Noelle:  Function "median"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 7" (6.910667e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv6" (5.970440e-08%)
Noelle:  Function "get_image"
Noelle:  Function "getint"
Noelle:     Loop "  %Pivot = icmp slt i32 %.01, 35" (3.917611e-09%)
Noelle:     Loop "  %15 = mul nsw i32 %.02, 10" (8.226984e-09%)
Noelle:  Function "put_image"
Noelle:  Function "susan_principle"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv4, %18" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %13" (0.000000e+00%)
Noelle:  Function "susan_principle_small"
Noelle:     Loop "  %20 = icmp slt i64 %indvars.iv3, %16" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "edge_draw"
Noelle:     Loop "  %17 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i32 %.12, %7" (0.000000e+00%)
Noelle:  Function "susan_thin"
Noelle:     Loop "  %21 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %22 = icmp slt i32 %.0, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "susan_edges"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv29, %19" (0.000000e+00%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv27, %14" (0.000000e+00%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv25, %334" (0.000000e+00%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv, %333" (0.000000e+00%)
Noelle:  Function "susan_edges_small"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv27, %17" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv25, %16" (0.000000e+00%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv23, %106" (0.000000e+00%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv, %15" (0.000000e+00%)
Noelle:  Function "corner_draw"
Noelle:     Loop "  %31 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv1, i32 2" (0.000000e+00%)
Noelle:     Loop "  %9 = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 %indvars.iv, i32 2" (0.000000e+00%)
Noelle:  Function "usage"
Noelle:  Function "susan_corners"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv45, %23" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv43, %20" (0.000000e+00%)
Noelle:     Loop "  %590 = icmp slt i64 %indvars.iv41, %23" (0.000000e+00%)
Noelle:     Loop "  %606 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "susan_corners_quick"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv38, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv36, %20" (0.000000e+00%)
Noelle:     Loop "  %368 = icmp slt i64 %indvars.iv34, %21" (0.000000e+00%)
Noelle:     Loop "  %384 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "atof"
Noelle:  Function "atoi"
Noelle:  Function "int_to_uchar"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv6, %5" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: Enablers: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true baseline_pre.bc -o baseline_pre.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata baseline_pre.bc -o baseline_pre.bc
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_s /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_s
Running: ./baseline_pre_prof input_large.pgm output_large.smoothing.pgm -s in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/MiBench/automotive/susan
--------------------------------------------------------------------------------------
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_s
DONE
opt -pgo-test-profile-file=/tmp/tmp.Co4HX3DRPo -block-freq -pgo-instr-use baseline_pre.bc -o baseline_with_metadata.bc
noelle-load -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
PDGAnalysis: Construct PDG from Analysis
Embed PDG as metadata
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0, !noelle.pdg.inst.id !3494" (7.999670e-09%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000, !noelle.pdg.inst.id !4214" (0.000000e+00%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000, !noelle.pdg.inst.id !4208" (0.000000e+00%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000, !noelle.pdg.inst.id !4202" (0.000000e+00%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000, !noelle.pdg.inst.id !4184" (0.000000e+00%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000, !noelle.pdg.inst.id !4147" (0.000000e+00%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000, !noelle.pdg.inst.id !4178" (0.000000e+00%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000, !noelle.pdg.inst.id !4172" (0.000000e+00%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000, !noelle.pdg.inst.id !4166" (0.000000e+00%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000, !noelle.pdg.inst.id !4157" (0.000000e+00%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000, !noelle.pdg.inst.id !3668" (1.000000e+02%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257, !noelle.pdg.inst.id !3675" (1.368414e-03%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %150 = icmp slt i64 %indvars.iv, %61, !noelle.pdg.inst.id !3706" (4.973913e-04%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %157 = icmp slt i64 %indvars.iv1, %99, !noelle.pdg.inst.id !3720" (2.462644e-05%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %174 = icmp slt i64 %indvars.iv5, %99, !noelle.pdg.inst.id !3744" (8.302395e-03%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %178 = icmp slt i64 %indvars.iv3, %102, !noelle.pdg.inst.id !3751" (8.293141e-03%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %323 = icmp slt i64 %indvars.iv7, %104, !noelle.pdg.inst.id !3953" (0.000000e+00%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv31.i, %106, !noelle.pdg.inst.id !3968" (0.000000e+00%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7, !noelle.pdg.inst.id !4069" (0.000000e+00%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i, !noelle.pdg.inst.id !4074" (0.000000e+00%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %203 = icmp sgt i32 %.010.i, %., !noelle.pdg.inst.id !3782" (6.311897e-04%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %207 = icmp sgt i32 %.013.i, %., !noelle.pdg.inst.id !3790" (6.093867e-04%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv9, %116, !noelle.pdg.inst.id !3815" (9.998917e+01%)
Noelle:     Loop "  %236 = icmp slt i64 %indvars.iv.i, %118, !noelle.pdg.inst.id !3829" (9.998849e+01%)
Noelle:     Loop "  %245 = icmp sgt i32 %.017.i, %., !noelle.pdg.inst.id !3844" (9.951994e+01%)
Noelle:     Loop "  %246 = icmp sgt i32 %.016.i, %., !noelle.pdg.inst.id !3854" (9.549543e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7, !noelle.pdg.inst.id !3915" (1.383472e-07%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i, !noelle.pdg.inst.id !3921" (1.195245e-07%)
Noelle:  Disable loop "27" as cold code
Noelle:  Function "get_image"
Noelle:  Disable "get_image" as cold function
Noelle:  Function "getint"
Noelle:  Disable "getint" as cold function
Noelle:  Function "put_image"
Noelle:  Disable "put_image" as cold function
Noelle:  Function "susan_smoothing"
Noelle:  Disable "susan_smoothing" as cold function
Noelle:  Function "setup_brightness_lut"
Noelle:  Disable "setup_brightness_lut" as cold function
Noelle:  Function "susan_principle"
Noelle:  Disable "susan_principle" as cold function
Noelle:  Function "susan_principle_small"
Noelle:  Disable "susan_principle_small" as cold function
Noelle:  Function "median"
Noelle:  Disable "median" as cold function
Noelle:  Function "enlarge"
Noelle:  Disable "enlarge" as cold function
Noelle:  Function "edge_draw"
Noelle:  Disable "edge_draw" as cold function
Noelle:  Function "susan_thin"
Noelle:  Disable "susan_thin" as cold function
Noelle:  Function "susan_edges"
Noelle:  Disable "susan_edges" as cold function
Noelle:  Function "susan_edges_small"
Noelle:  Disable "susan_edges_small" as cold function
Noelle:  Function "corner_draw"
Noelle:  Disable "corner_draw" as cold function
Noelle:  Function "usage"
Noelle:  Disable "usage" as cold function
Noelle:  Function "susan_corners"
Noelle:  Disable "susan_corners" as cold function
Noelle:  Function "susan_corners_quick"
Noelle:  Disable "susan_corners_quick" as cold function
Noelle:  Function "atof"
Noelle:  Disable "atof" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "int_to_uchar"
Noelle:  Disable "int_to_uchar" as cold function
Planner:    There are 5 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:    Loop 75 has 3.670000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:  There are 1 loop nesting trees in the program
Planner:    ID: 60 (1)
Planner:      Function: "main"
Planner:      Loop: "  %exitcond = icmp eq i32 %.02, 1000, !noelle.pdg.inst.id !3668"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.000000e+02 %
Planner:      Average instructions per invocation = 6.375263e+11 %
Planner:      Average iterations per invocation = 1.000000e+03 %
Planner:    
Planner:      ID: 72 (2)
Planner:        Function: "main"
Planner:        Loop: "  %225 = icmp slt i64 %indvars.iv9, %116, !noelle.pdg.inst.id !3815"
Planner:        Loop nesting level: 2
Planner:        Hotness = 9.998917e+01 %
Planner:        Average instructions per invocation = 6.374572e+08 %
Planner:        Average iterations per invocation = 2.889990e+02 %
Planner:      
Planner:        ID: 73 (3)
Planner:          Function: "main"
Planner:          Loop: "  %236 = icmp slt i64 %indvars.iv.i, %118, !noelle.pdg.inst.id !3829"
Planner:          Loop nesting level: 3
Planner:          Hotness = 9.998849e+01 %
Planner:          Average instructions per invocation = 2.213378e+06 %
Planner:          Average iterations per invocation = 3.849997e+02 %
Planner:        
Planner:          ID: 74 (4)
Planner:            Function: "main"
Planner:            Loop: "  %245 = icmp sgt i32 %.017.i, %., !noelle.pdg.inst.id !3844"
Planner:            Loop nesting level: 4
Planner:            Hotness = 9.951994e+01 %
Planner:            Average instructions per invocation = 5.737000e+03 %
Planner:            Average iterations per invocation = 1.600000e+01 %
Planner:          
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3457
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3457 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3456
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3456 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8, !noelle.pdg.inst.id !3458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !3459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !3460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !3461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3457
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3457 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3456
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3456 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8, !noelle.pdg.inst.id !3458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !3459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !3460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !3461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3457
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3457 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8, !noelle.pdg.inst.id !3458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !3459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !3460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !3461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3457
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3457 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8, !noelle.pdg.inst.id !3458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !3459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !3460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !3461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3457
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3457 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8, !noelle.pdg.inst.id !3458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !3459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !3460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !3461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3457
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3457 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8, !noelle.pdg.inst.id !3458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !3459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !3460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !3461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8, !noelle.pdg.inst.id !3458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !3459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !3460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !3461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8, !noelle.pdg.inst.id !3458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !3459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !3460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !3461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 73
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %236 = icmp slt i64 %indvars.iv.i, %118, !noelle.pdg.inst.id !3829"
Planner: LoopSelector:      Coverage: 9.998849e+01%
Planner: LoopSelector:      Whole-program savings = 9.998849e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 72
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %225 = icmp slt i64 %indvars.iv9, %116, !noelle.pdg.inst.id !3815"
Planner: LoopSelector:      Coverage: 9.998917e+01%
Planner: LoopSelector:      Whole-program savings = 9.995434e+01%
Planner: LoopSelector:      Loop savings = 9.996517e+01%
Planner: LoopSelector:    Loop 74
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %245 = icmp sgt i32 %.017.i, %., !noelle.pdg.inst.id !3844"
Planner: LoopSelector:      Coverage: 9.951994e+01%
Planner: LoopSelector:      Whole-program savings = 9.065561e+01%
Planner: LoopSelector:      Loop savings = 9.109291e+01%
Planner: LoopSelector:    Loop 60
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %exitcond = icmp eq i32 %.02, 1000, !noelle.pdg.inst.id !3668"
Planner: LoopSelector:      Coverage: 1.000000e+02%
Planner: LoopSelector:      Whole-program savings = 2.209140e+01%
Planner: LoopSelector:      Loop savings = 2.209140e+01%
Planner: LoopSelector: End
Planner:   Maximum time saved = 9.998849e+01% (637452914964)
Planner:   Maximum time saved with DOALL only = 0.000000e+00% (0)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %21 = icmp slt i32 %.013, %0, !noelle.pdg.inst.id !3496" (7.999670e-09%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond87 = icmp eq i32 %.0, 10000, !noelle.pdg.inst.id !4220" (0.000000e+00%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond86 = icmp eq i32 %.0.us, 10000, !noelle.pdg.inst.id !4214" (0.000000e+00%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %exitcond86.us = icmp eq i32 %.0.us.us, 10000, !noelle.pdg.inst.id !4208" (0.000000e+00%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond85 = icmp eq i32 %.01, 1000, !noelle.pdg.inst.id !4190" (0.000000e+00%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond85.us = icmp eq i32 %.01.us41, 1000, !noelle.pdg.inst.id !4153" (0.000000e+00%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %exitcond84 = icmp eq i32 %.01.us, 1000, !noelle.pdg.inst.id !4184" (0.000000e+00%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond84.us39 = icmp eq i32 %.01.us.us38, 1000, !noelle.pdg.inst.id !4178" (0.000000e+00%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %exitcond84.us = icmp eq i32 %.01.us.us, 1000, !noelle.pdg.inst.id !4172" (0.000000e+00%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %exitcond84.us.us = icmp eq i32 %.01.us.us.us, 1000, !noelle.pdg.inst.id !4163" (0.000000e+00%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 1000, !noelle.pdg.inst.id !3670" (1.000000e+02%)
Noelle:     Loop "  %exitcond4.i = icmp eq i64 %indvars.iv2.i, 257, !noelle.pdg.inst.id !3678" (1.368414e-03%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %150 = icmp slt i64 %indvars.iv, %61, !noelle.pdg.inst.id !3709" (4.973913e-04%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %157 = icmp slt i64 %indvars.iv1, %99, !noelle.pdg.inst.id !3723" (2.462644e-05%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %174 = icmp slt i64 %indvars.iv5, %99, !noelle.pdg.inst.id !3747" (8.302395e-03%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %178 = icmp slt i64 %indvars.iv3, %102, !noelle.pdg.inst.id !3754" (8.293141e-03%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %323 = icmp slt i64 %indvars.iv7, %104, !noelle.pdg.inst.id !3959" (0.000000e+00%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv31.i, %106, !noelle.pdg.inst.id !3974" (0.000000e+00%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond8.i = icmp eq i32 %.01.i1, 7, !noelle.pdg.inst.id !4075" (0.000000e+00%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i3, %indvars.iv6.i, !noelle.pdg.inst.id !4080" (0.000000e+00%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %203 = icmp sgt i32 %.010.i, %., !noelle.pdg.inst.id !3785" (6.311897e-04%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %207 = icmp sgt i32 %.013.i, %., !noelle.pdg.inst.id !3793" (6.093867e-04%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv9, %116, !noelle.pdg.inst.id !3818" (9.998917e+01%)
Noelle:     Loop "  %236 = icmp slt i64 %indvars.iv.i, %118, !noelle.pdg.inst.id !3833" (9.998849e+01%)
Noelle:     Loop "  %245 = icmp sgt i32 %.017.i, %., !noelle.pdg.inst.id !3849" (9.951994e+01%)
Noelle:     Loop "  %246 = icmp sgt i32 %.016.i, %., !noelle.pdg.inst.id !3860" (9.549543e+01%)
Noelle:     Loop "  %exitcond8.i.i = icmp eq i32 %.01.i.i, 7, !noelle.pdg.inst.id !3921" (1.383472e-07%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  %exitcond.i.i = icmp eq i64 %indvars.iv.i.i, %indvars.iv6.i.i, !noelle.pdg.inst.id !3927" (1.195245e-07%)
Noelle:  Disable loop "27" as cold code
Noelle:  Function "get_image"
Noelle:  Disable "get_image" as cold function
Noelle:  Function "getint"
Noelle:  Disable "getint" as cold function
Noelle:  Function "put_image"
Noelle:  Disable "put_image" as cold function
Noelle:  Function "susan_smoothing"
Noelle:  Disable "susan_smoothing" as cold function
Noelle:  Function "susan_principle_small"
Noelle:  Disable "susan_principle_small" as cold function
Noelle:  Function "median"
Noelle:  Disable "median" as cold function
Noelle:  Function "enlarge"
Noelle:  Disable "enlarge" as cold function
Noelle:  Function "edge_draw"
Noelle:  Disable "edge_draw" as cold function
Noelle:  Function "susan_thin"
Noelle:  Disable "susan_thin" as cold function
Noelle:  Function "susan_edges"
Noelle:  Disable "susan_edges" as cold function
Noelle:  Function "susan_edges_small"
Noelle:  Disable "susan_edges_small" as cold function
Noelle:  Function "corner_draw"
Noelle:  Disable "corner_draw" as cold function
Noelle:  Function "susan_corners"
Noelle:  Disable "susan_corners" as cold function
Noelle:  Function "susan_corners_quick"
Noelle:  Disable "susan_corners_quick" as cold function
Noelle:  Function "atof"
Noelle:  Disable "atof" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "int_to_uchar"
Noelle:  Disable "int_to_uchar" as cold function
Noelle:  Function "setup_brightness_lut"
Noelle:  Disable "setup_brightness_lut" as cold function
Noelle:  Function "susan_principle"
Noelle:  Disable "susan_principle" as cold function
Noelle:  Function "usage"
Noelle:  Disable "usage" as cold function
Parallelizer:    There are 5 loops in the program we are going to consider
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3459
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3459 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3458
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3458 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8, !noelle.pdg.inst.id !3460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !3461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !3462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !3463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3459
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3459 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3458
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3458 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8, !noelle.pdg.inst.id !3460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !3461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !3462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !3463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3459
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3459 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8, !noelle.pdg.inst.id !3460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !3461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !3462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !3463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3459
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3459 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8, !noelle.pdg.inst.id !3460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !3461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !3462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !3463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3459
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3459 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8, !noelle.pdg.inst.id !3460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !3461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !3462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !3463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3459
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3459 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8, !noelle.pdg.inst.id !3460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !3461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !3462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !3463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8, !noelle.pdg.inst.id !3460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !3461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !3462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !3463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [15000 x %struct.anon], align 16, !noelle.pdg.inst.id !3464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [8 x i32], align 16, !noelle.pdg.inst.id !3458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i8*, align 8, !noelle.pdg.inst.id !3460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i8*, align 8, !noelle.pdg.inst.id !3461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !3462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !3463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 73 = "  %236 = icmp slt i64 %indvars.iv.i, %118, !noelle.pdg.inst.id !3833"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %81 = bitcast [8 x i32]* %4 to i8*, !noelle.pdg.inst.id !3627
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %82 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 0, !noelle.pdg.inst.id !3628
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %83 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 1, !noelle.pdg.inst.id !3629
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %84 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 2, !noelle.pdg.inst.id !3630
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %85 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 3, !noelle.pdg.inst.id !3631
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %86 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 4, !noelle.pdg.inst.id !3632
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %87 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 5, !noelle.pdg.inst.id !3633
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %88 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 6, !noelle.pdg.inst.id !3634
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %89 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 7, !noelle.pdg.inst.id !3635
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %. = select i1 %64, i32 %68, i32 1, !prof !3504, !noelle.pdg.inst.id !3636
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %99 = sext i32 %. to i64, !noelle.pdg.inst.id !3647
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %111 = sub nsw i32 0, %., !noelle.pdg.inst.id !3659
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %114 = sext i32 %112 to i64, !noelle.pdg.inst.id !3662
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %118 = sext i32 %117 to i64, !noelle.pdg.inst.id !3666
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 =   %124 = getelementptr inbounds i8, i8* %123, i64 258, !noelle.pdg.inst.id !3675
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 =   %147 = tail call noalias i8* @malloc(i64 %98) #11, !noelle.pdg.inst.id !271
Parallelizer: parallelizerLoop:   Environment:   Live-in 16 =   %201 = tail call noalias i8* @malloc(i64 %110) #11, !noelle.pdg.inst.id !290
Parallelizer: parallelizerLoop:   Environment:   Live-in 18 =   %.01.i = phi i8* [ %58, %222 ], [ %.12.i.lcssa, %.loopexit23 ], !noelle.pdg.inst.id !3817
Parallelizer: parallelizerLoop:   Environment:   Live-in 19 =   %229 = getelementptr inbounds i8, i8* %223, i64 %228, !noelle.pdg.inst.id !3824
Parallelizer: parallelizerLoop:   Environment:   Live-in 20 =   %230 = mul i64 %indvars.iv9, %95, !noelle.pdg.inst.id !3825
Parallelizer: parallelizerLoop:   Environment:   Live-in 21 =   %232 = mul i64 %231, %95, !noelle.pdg.inst.id !3827
Parallelizer: parallelizerLoop:   Environment:   Live-in 22 =   %234 = mul i64 %233, %95, !noelle.pdg.inst.id !3829
Parallelizer: parallelizerLoop:   Environment:   Live-out 17 =   %.12.i = phi i8* [ %.2.i, %322 ], [ %.01.i, %226 ], !noelle.pdg.inst.id !3832
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 72 = "  %225 = icmp slt i64 %indvars.iv9, %116, !noelle.pdg.inst.id !3818"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %58 = load i8*, i8** %5, align 8, !noelle.pdg.inst.id !249
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %81 = bitcast [8 x i32]* %4 to i8*, !noelle.pdg.inst.id !3627
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %82 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 0, !noelle.pdg.inst.id !3628
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %83 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 1, !noelle.pdg.inst.id !3629
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %84 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 2, !noelle.pdg.inst.id !3630
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %85 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 3, !noelle.pdg.inst.id !3631
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %86 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 4, !noelle.pdg.inst.id !3632
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %87 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 5, !noelle.pdg.inst.id !3633
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %88 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 6, !noelle.pdg.inst.id !3634
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %89 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 7, !noelle.pdg.inst.id !3635
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %. = select i1 %64, i32 %68, i32 1, !prof !3504, !noelle.pdg.inst.id !3636
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %95 = sext i32 %94 to i64, !noelle.pdg.inst.id !3643
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %99 = sext i32 %. to i64, !noelle.pdg.inst.id !3647
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %111 = sub nsw i32 0, %., !noelle.pdg.inst.id !3659
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 =   %114 = sext i32 %112 to i64, !noelle.pdg.inst.id !3662
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 =   %116 = sext i32 %115 to i64, !noelle.pdg.inst.id !3664
Parallelizer: parallelizerLoop:   Environment:   Live-in 16 =   %118 = sext i32 %117 to i64, !noelle.pdg.inst.id !3666
Parallelizer: parallelizerLoop:   Environment:   Live-in 17 =   %124 = getelementptr inbounds i8, i8* %123, i64 258, !noelle.pdg.inst.id !3675
Parallelizer: parallelizerLoop:   Environment:   Live-in 18 =   %147 = tail call noalias i8* @malloc(i64 %98) #11, !noelle.pdg.inst.id !271
Parallelizer: parallelizerLoop:   Environment:   Live-in 19 =   %201 = tail call noalias i8* @malloc(i64 %110) #11, !noelle.pdg.inst.id !290
Parallelizer: parallelizerLoop:   Environment:   Live-in 20 =   %223 = getelementptr inbounds i8, i8* %147, i64 %113, !noelle.pdg.inst.id !3812
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 74 = "  %245 = icmp sgt i32 %.017.i, %., !noelle.pdg.inst.id !3849"
Parallelizer: parallelizerLoop:   Nesting level = 4
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %. = select i1 %64, i32 %68, i32 1, !prof !3504, !noelle.pdg.inst.id !3636
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %111 = sub nsw i32 0, %., !noelle.pdg.inst.id !3659
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %114 = sext i32 %112 to i64, !noelle.pdg.inst.id !3662
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %201 = tail call noalias i8* @malloc(i64 %110) #11, !noelle.pdg.inst.id !290
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %238 = getelementptr inbounds i8, i8* %229, i64 %indvars.iv.i, !noelle.pdg.inst.id !3838
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %243 = getelementptr inbounds i8, i8* %124, i64 %242, !noelle.pdg.inst.id !3842
Parallelizer: parallelizerLoop:   Environment:   Live-out 6 =   %.018.i = phi i32 [ 0, %237 ], [ %.119.i.lcssa, %264 ], !noelle.pdg.inst.id !3844
Parallelizer: parallelizerLoop:   Environment:   Live-out 7 =   %.0.i = phi i32 [ 0, %237 ], [ %.1.i.lcssa, %264 ], !noelle.pdg.inst.id !3848
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 60 = "  %exitcond = icmp eq i32 %.02, 1000, !noelle.pdg.inst.id !3670"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %58 = load i8*, i8** %5, align 8, !noelle.pdg.inst.id !249
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %59 = load i32, i32* %7, align 4, !noelle.pdg.inst.id !251
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %60 = load i32, i32* %8, align 4, !noelle.pdg.inst.id !253
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %61 = sext i32 %60 to i64, !noelle.pdg.inst.id !3607
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %62 = sext i32 %59 to i64, !noelle.pdg.inst.id !3608
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %63 = sitofp i32 %.016.lcssa to float, !noelle.pdg.inst.id !3609
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %64 = icmp eq i32 %.025.lcssa, 0, !noelle.pdg.inst.id !3610
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %69 = fcmp ogt float %.010.lcssa, 1.500000e+01, !noelle.pdg.inst.id !3615
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %70 = bitcast [8 x i32]* %3 to i8*, !noelle.pdg.inst.id !3616
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %71 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 0, !noelle.pdg.inst.id !3617
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %72 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 1, !noelle.pdg.inst.id !3618
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %73 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 2, !noelle.pdg.inst.id !3619
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %74 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 3, !noelle.pdg.inst.id !3620
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %75 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 4, !noelle.pdg.inst.id !3621
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 =   %76 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 5, !noelle.pdg.inst.id !3622
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 =   %77 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 6, !noelle.pdg.inst.id !3623
Parallelizer: parallelizerLoop:   Environment:   Live-in 16 =   %78 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 7, !noelle.pdg.inst.id !3624
Parallelizer: parallelizerLoop:   Environment:   Live-in 17 =   %80 = fsub float -0.000000e+00, %79, !noelle.pdg.inst.id !3626
Parallelizer: parallelizerLoop:   Environment:   Live-in 18 =   %81 = bitcast [8 x i32]* %4 to i8*, !noelle.pdg.inst.id !3627
Parallelizer: parallelizerLoop:   Environment:   Live-in 19 =   %82 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 0, !noelle.pdg.inst.id !3628
Parallelizer: parallelizerLoop:   Environment:   Live-in 20 =   %83 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 1, !noelle.pdg.inst.id !3629
Parallelizer: parallelizerLoop:   Environment:   Live-in 21 =   %84 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 2, !noelle.pdg.inst.id !3630
Parallelizer: parallelizerLoop:   Environment:   Live-in 22 =   %85 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 3, !noelle.pdg.inst.id !3631
Parallelizer: parallelizerLoop:   Environment:   Live-in 23 =   %86 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 4, !noelle.pdg.inst.id !3632
Parallelizer: parallelizerLoop:   Environment:   Live-in 24 =   %87 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 5, !noelle.pdg.inst.id !3633
Parallelizer: parallelizerLoop:   Environment:   Live-in 25 =   %88 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 6, !noelle.pdg.inst.id !3634
Parallelizer: parallelizerLoop:   Environment:   Live-in 26 =   %89 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 7, !noelle.pdg.inst.id !3635
Parallelizer: parallelizerLoop:   Environment:   Live-in 27 =   %. = select i1 %64, i32 %68, i32 1, !prof !3504, !noelle.pdg.inst.id !3636
Parallelizer: parallelizerLoop:   Environment:   Live-in 28 =   %or.cond.i = or i1 %92, %93, !noelle.pdg.inst.id !3641
Parallelizer: parallelizerLoop:   Environment:   Live-in 29 =   %94 = add nsw i32 %90, %59, !noelle.pdg.inst.id !3642
Parallelizer: parallelizerLoop:   Environment:   Live-in 30 =   %95 = sext i32 %94 to i64, !noelle.pdg.inst.id !3643
Parallelizer: parallelizerLoop:   Environment:   Live-in 31 =   %98 = sext i32 %97 to i64, !noelle.pdg.inst.id !3646
Parallelizer: parallelizerLoop:   Environment:   Live-in 32 =   %99 = sext i32 %. to i64, !noelle.pdg.inst.id !3647
Parallelizer: parallelizerLoop:   Environment:   Live-in 33 =   %101 = sext i32 %100 to i64, !noelle.pdg.inst.id !3649
Parallelizer: parallelizerLoop:   Environment:   Live-in 34 =   %102 = sext i32 %96 to i64, !noelle.pdg.inst.id !3650
Parallelizer: parallelizerLoop:   Environment:   Live-in 35 =   %104 = sext i32 %103 to i64, !noelle.pdg.inst.id !3652
Parallelizer: parallelizerLoop:   Environment:   Live-in 36 =   %106 = sext i32 %105 to i64, !noelle.pdg.inst.id !3654
Parallelizer: parallelizerLoop:   Environment:   Live-in 37 =   %108 = sext i32 %107 to i64, !noelle.pdg.inst.id !3656
Parallelizer: parallelizerLoop:   Environment:   Live-in 38 =   %110 = zext i32 %109 to i64, !noelle.pdg.inst.id !3658
Parallelizer: parallelizerLoop:   Environment:   Live-in 39 =   %111 = sub nsw i32 0, %., !noelle.pdg.inst.id !3659
Parallelizer: parallelizerLoop:   Environment:   Live-in 40 =   %113 = sub nsw i64 0, %99, !noelle.pdg.inst.id !3661
Parallelizer: parallelizerLoop:   Environment:   Live-in 41 =   %114 = sext i32 %112 to i64, !noelle.pdg.inst.id !3662
Parallelizer: parallelizerLoop:   Environment:   Live-in 42 =   %116 = sext i32 %115 to i64, !noelle.pdg.inst.id !3664
Parallelizer: parallelizerLoop:   Environment:   Live-in 43 =   %118 = sext i32 %117 to i64, !noelle.pdg.inst.id !3666
Parallelizer: parallelizerLoop:   Environment:   Live-in 44 =   %119 = load i8*, i8** %6, align 8, !noelle.pdg.inst.id !255
Parallelizer: parallelizerLoop:   Environment:   Live-out 45 =   %121 = phi i8* [ %119, %57 ], [ %124, %susan_smoothing.exit ], !noelle.pdg.inst.id !3669
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc susan_s.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/susan_s'
