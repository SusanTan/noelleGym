make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/search'
./runEnablers.sh search search.bc large "-lm -lstdc++ -lpthread -ltermcap" -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/search /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/search
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/search
The IR has already been transformed for enabling parallelization
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000, !noelle.pdg.inst.id !256" (1.000000e+02%)
Noelle:     Loop "  %3 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv, !noelle.pdg.inst.id !262" (9.999977e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256, !noelle.pdg.inst.id !271" (9.218718e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %7, !noelle.pdg.inst.id !280" (2.628962e+00%)
Noelle:     Loop "  %25 = icmp ult i64 %.02.i, %23, !noelle.pdg.inst.id !297" (3.628241e+00%)
Noelle:     Loop "  %26 = icmp ult i64 %.13.i, %23, !noelle.pdg.inst.id !305" (2.813341e+00%)
Noelle:  Function "tolower"
Noelle:  Disable "tolower" as cold function
Noelle:  Function "strsearch"
Noelle:  Disable "strsearch" as cold function
Noelle:  Function "init_search"
Noelle:  Disable "init_search" as cold function
Noelle:  Function "bmh_search"
Noelle:  Disable "bmh_search" as cold function
Noelle:  Function "bmh_init"
Noelle:  Disable "bmh_init" as cold function
Noelle:  Function "bmhi_search"
Noelle:  Disable "bmhi_search" as cold function
Noelle:  Function "bhmi_cleanup"
Noelle:  Disable "bhmi_cleanup" as cold function
Noelle:  Function "bmhi_init"
Noelle:  Disable "bmhi_init" as cold function
Noelle:  Function "bmha_search"
Noelle:  Disable "bmha_search" as cold function
Noelle:  Function "bmha_init"
Noelle:  Disable "bmha_init" as cold function
Planner:    There are 6 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:    Loop 27 has 7.064640e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 28 has 5.302762e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 25 has 1.795000e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 26 has 5.118919e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:  There are 1 loop nesting trees in the program
Planner:    ID: 23 (1)
Planner:      Function: "main"
Planner:      Loop: "  %exitcond = icmp eq i32 %.0, 50000, !noelle.pdg.inst.id !256"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.000000e+02 %
Planner:      Average instructions per invocation = 1.296780e+11 %
Planner:      Average iterations per invocation = 5.000000e+04 %
Planner:    
Planner:      ID: 24 (2)
Planner:        Function: "main"
Planner:        Loop: "  %3 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv, !noelle.pdg.inst.id !262"
Planner:        Loop nesting level: 2
Planner:        Hotness = 9.999977e+01 %
Planner:        Average instructions per invocation = 2.593554e+06 %
Planner:        Average iterations per invocation = 1.332995e+03 %
Planner:      
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 23
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %exitcond = icmp eq i32 %.0, 50000, !noelle.pdg.inst.id !256"
Planner: LoopSelector:      Coverage: 1.000000e+02%
Planner: LoopSelector:      Whole-program savings = 8.227332e+01%
Planner: LoopSelector:      Loop savings = 8.227332e+01%
Planner: LoopSelector:    Loop 24
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %3 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv, !noelle.pdg.inst.id !262"
Planner: LoopSelector:      Coverage: 9.999977e+01%
Planner: LoopSelector:      Whole-program savings = 8.227309e+01%
Planner: LoopSelector:      Loop savings = 8.227328e+01%
Planner: LoopSelector: End
Planner:   Maximum time saved = 8.227332e+01% (106690414256)
Planner:   Maximum time saved with DOALL only = 0.000000e+00% (0)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000, !noelle.pdg.inst.id !258" (1.000000e+02%)
Noelle:     Loop "  %3 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv, !noelle.pdg.inst.id !265" (9.999977e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256, !noelle.pdg.inst.id !275" (9.218718e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %7, !noelle.pdg.inst.id !284" (2.628962e+00%)
Noelle:     Loop "  %25 = icmp ult i64 %.02.i, %23, !noelle.pdg.inst.id !301" (3.628241e+00%)
Noelle:     Loop "  %26 = icmp ult i64 %.13.i, %23, !noelle.pdg.inst.id !309" (2.813341e+00%)
Noelle:  Function "bmha_init"
Noelle:  Disable "bmha_init" as cold function
Noelle:  Function "bmha_search"
Noelle:  Disable "bmha_search" as cold function
Noelle:  Function "bmhi_init"
Noelle:  Disable "bmhi_init" as cold function
Noelle:  Function "bhmi_cleanup"
Noelle:  Disable "bhmi_cleanup" as cold function
Noelle:  Function "init_search"
Noelle:  Disable "init_search" as cold function
Noelle:  Function "strsearch"
Noelle:  Disable "strsearch" as cold function
Noelle:  Function "tolower"
Noelle:  Disable "tolower" as cold function
Noelle:  Function "bmhi_search"
Noelle:  Disable "bmhi_search" as cold function
Noelle:  Function "bmh_init"
Noelle:  Disable "bmh_init" as cold function
Noelle:  Function "bmh_search"
Noelle:  Disable "bmh_search" as cold function
Parallelizer:    There are 6 loops in the program we are going to consider
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 23 = "  %exitcond = icmp eq i32 %.0, 50000, !noelle.pdg.inst.id !258"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !252, !noelle.pdg.inst.id !76
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63
DOALL:     External nodes: 7
DOALL:     	  %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33
DOALL:     	  br i1 %5, label %57, label %6, !prof !267, !noelle.loop.id !268, !noelle.pdg.inst.id !269, !noelle.parallelizer.looporder !270
DOALL:     	  %21 = load i8*, i8** %20, align 8, !tbaa !252, !noelle.pdg.inst.id !61
DOALL:     	  %25 = icmp ult i64 %.02.i, %23, !noelle.pdg.inst.id !301
DOALL:     	  %26 = icmp ult i64 %.13.i, %23, !noelle.pdg.inst.id !309
DOALL:     	  %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70
DOALL:     	  %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73
DOALL:     Edges: 7
DOALL:     Loop-carried data dependences
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44
DOALL:     External nodes: 12
DOALL:     	  %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33
DOALL:     	  %4 = load i8*, i8** %3, align 8, !tbaa !252, !noelle.pdg.inst.id !42
DOALL:     	  br i1 %5, label %57, label %6, !prof !267, !noelle.loop.id !268, !noelle.pdg.inst.id !269, !noelle.parallelizer.looporder !270
DOALL:     	  store i64 %7, i64* @len, align 8, !tbaa !271, !noelle.pdg.inst.id !47
DOALL:     	  store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50
DOALL:     	  %exitcond.i = icmp eq i64 %.1.i, %7, !noelle.pdg.inst.id !284
DOALL:     	  %14 = add i64 %7, %13, !noelle.pdg.inst.id !289
DOALL:     	  %22 = add i64 %7, -1, !noelle.pdg.inst.id !297
DOALL:     	  %40 = sub i64 %.13.i.lcssa, %7, !noelle.pdg.inst.id !331
DOALL:     	  %43 = tail call i32 @strncmp(i8* nonnull %4, i8* %42, i64 %7) #13, !noelle.pdg.inst.id !334
DOALL:     	  %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70
DOALL:     	  %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73
DOALL:     Edges: 12
DOALL:     Loop-carried data dependences
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 46
DOALL:     	  %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33
DOALL:     	  store i64 %7, i64* @len, align 8, !tbaa !271, !noelle.pdg.inst.id !47
DOALL:     	  store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50
DOALL:     	  %16 = load i8, i8* %15, align 1, !tbaa !291, !noelle.pdg.inst.id !53
DOALL:     	  %17 = zext i8 %16 to i64, !noelle.pdg.inst.id !292
DOALL:     	  %18 = getelementptr inbounds [256 x i64], [256 x i64]* @table, i64 0, i64 %17, !noelle.pdg.inst.id !293
DOALL:     	  store i64 %14, i64* %18, align 8, !tbaa !271, !noelle.pdg.inst.id !55
DOALL:     	  store i8* %4, i8** @findme, align 8, !tbaa !252, !noelle.pdg.inst.id !58
DOALL:     	  %.02.i = phi i64 [ %22, %init_search.exit ], [ %.24.i, %._crit_edge7.i ], !noelle.pdg.inst.id !299
DOALL:     	  %.01.i = phi i64 [ undef, %init_search.exit ], [ %.2.i.lcssa, %._crit_edge7.i ], !noelle.pdg.inst.id !300
DOALL:     	  %25 = icmp ult i64 %.02.i, %23, !noelle.pdg.inst.id !301
DOALL:     	  br i1 %25, label %.preheader.i3.preheader, label %.strsearch.exit_crit_edge, !prof !302, !noelle.loop.id !303, !noelle.pdg.inst.id !304
DOALL:     	  %.13.i = phi i64 [ %36, %35 ], [ %.02.i, %.preheader.i3.preheader ], !noelle.pdg.inst.id !307
DOALL:     	  %.1.i2 = phi i64 [ %.2.i, %35 ], [ %.01.i, %.preheader.i3.preheader ], !noelle.pdg.inst.id !308
DOALL:     	  %26 = icmp ult i64 %.13.i, %23, !noelle.pdg.inst.id !309
DOALL:     	  br i1 %26, label %27, label %.preheader.i3.._crit_edge6.i_crit_edge, !prof !310, !noelle.loop.id !311, !noelle.pdg.inst.id !312
DOALL:     	  %28 = getelementptr inbounds i8, i8* %21, i64 %.13.i, !noelle.pdg.inst.id !314
DOALL:     	  %29 = load i8, i8* %28, align 1, !tbaa !291, !noelle.pdg.inst.id !66
DOALL:     	  %30 = zext i8 %29 to i64, !noelle.pdg.inst.id !315
DOALL:     	  %31 = getelementptr inbounds [256 x i64], [256 x i64]* @table, i64 0, i64 %30, !noelle.pdg.inst.id !316
DOALL:     	  %32 = load i64, i64* %31, align 8, !tbaa !271, !noelle.pdg.inst.id !68
DOALL:     	  %33 = icmp ne i64 %32, 0, !noelle.pdg.inst.id !317
DOALL:     	  %.2.i = phi i64 [ %32, %27 ], [ %.1.i2, %.preheader.i3.._crit_edge6.i_crit_edge ], !noelle.pdg.inst.id !319
DOALL:     	  %34 = phi i1 [ %33, %27 ], [ false, %.preheader.i3.._crit_edge6.i_crit_edge ], !noelle.pdg.inst.id !320
DOALL:     	  br i1 %34, label %35, label %37, !prof !321, !noelle.pdg.inst.id !322
DOALL:     	  %36 = add i64 %.13.i, %.2.i, !noelle.pdg.inst.id !323
DOALL:     	  %.2.i.lcssa = phi i64 [ %.2.i, %._crit_edge6.i ], !noelle.pdg.inst.id !325
DOALL:     	  %.13.i.lcssa = phi i64 [ %.13.i, %._crit_edge6.i ], !noelle.pdg.inst.id !326
DOALL:     	  %38 = icmp eq i64 %.2.i.lcssa, 0, !noelle.pdg.inst.id !327
DOALL:     	  br i1 %38, label %39, label %.._crit_edge7.i_crit_edge, !prof !328, !noelle.pdg.inst.id !329
DOALL:     	  %40 = sub i64 %.13.i.lcssa, %7, !noelle.pdg.inst.id !331
DOALL:     	  %41 = add i64 %40, 1, !noelle.pdg.inst.id !332
DOALL:     	  %42 = getelementptr inbounds i8, i8* %21, i64 %41, !noelle.pdg.inst.id !333
DOALL:     	  %43 = tail call i32 @strncmp(i8* nonnull %4, i8* %42, i64 %7) #13, !noelle.pdg.inst.id !334
DOALL:     	  %44 = icmp eq i32 %43, 0, !noelle.pdg.inst.id !335
DOALL:     	  br i1 %44, label %.strsearch.exit_crit_edge4, label %45, !prof !336, !noelle.pdg.inst.id !337
DOALL:     	  %.lcssa = phi i8* [ %42, %39 ], !noelle.pdg.inst.id !338
DOALL:     	  %46 = add i64 %.13.i.lcssa, 1, !noelle.pdg.inst.id !340
DOALL:     	  %.24.i = phi i64 [ %46, %45 ], [ %.13.i.lcssa, %.._crit_edge7.i_crit_edge ], !noelle.pdg.inst.id !342
DOALL:     	  %.0.i4 = phi i8* [ null, %.strsearch.exit_crit_edge ], [ %.lcssa, %.strsearch.exit_crit_edge4 ], !noelle.pdg.inst.id !344
DOALL:     	  %47 = icmp ne i8* %.0.i4, null, !noelle.pdg.inst.id !345
DOALL:     	  %50 = select i1 %47, i8* %48, i8* %49, !prof !348, !noelle.pdg.inst.id !349
DOALL:     	  br i1 %47, label %53, label %strsearch.exit.._crit_edge_crit_edge, !prof !348, !noelle.pdg.inst.id !351
DOALL:     	  %54 = getelementptr [8 x i8], [8 x i8]* @.str.214, i64 0, i64 0, !noelle.pdg.inst.id !353
DOALL:     	  %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70
DOALL:     	  %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73
DOALL:     External nodes: 25
DOALL:     	  %4 = load i8*, i8** %3, align 8, !tbaa !252, !noelle.pdg.inst.id !42
DOALL:     	  br i1 %5, label %57, label %6, !prof !267, !noelle.loop.id !268, !noelle.pdg.inst.id !269, !noelle.parallelizer.looporder !270
DOALL:     	  %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44
DOALL:     	  br i1 %exitcond2.i, label %.preheader.i.preheader, label %9, !prof !276, !noelle.loop.id !277, !noelle.pdg.inst.id !278
DOALL:     	  %10 = getelementptr inbounds [256 x i64], [256 x i64]* @table, i64 0, i64 %.0.i, !noelle.pdg.inst.id !280
DOALL:     	  br i1 %exitcond.i, label %init_search.exit, label %12, !prof !285, !noelle.loop.id !286, !noelle.pdg.inst.id !287
DOALL:     	  %14 = add i64 %7, %13, !noelle.pdg.inst.id !289
DOALL:     	  %15 = getelementptr inbounds i8, i8* %4, i64 %.1.i, !noelle.pdg.inst.id !290
DOALL:     	  %21 = load i8*, i8** %20, align 8, !tbaa !252, !noelle.pdg.inst.id !61
DOALL:     	  %22 = add i64 %7, -1, !noelle.pdg.inst.id !297
DOALL:     	  %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63
DOALL:     	  br label %strsearch.exit, !noelle.pdg.inst.id !305
DOALL:     	  br label %.preheader.i3, !noelle.pdg.inst.id !306
DOALL:     	  br label %._crit_edge6.i, !noelle.pdg.inst.id !313
DOALL:     	  br label %._crit_edge6.i, !noelle.pdg.inst.id !318
DOALL:     	  br label %.preheader.i3, !noelle.pdg.inst.id !324
DOALL:     	  br label %._crit_edge7.i, !noelle.pdg.inst.id !330
DOALL:     	  br label %strsearch.exit, !noelle.pdg.inst.id !339
DOALL:     	  br label %._crit_edge7.i, !noelle.pdg.inst.id !341
DOALL:     	  br label %24, !noelle.pdg.inst.id !343
DOALL:     	  %48 = getelementptr [1 x i8], [1 x i8]* @.str.212, i64 0, i64 0, !noelle.pdg.inst.id !346
DOALL:     	  %49 = getelementptr [5 x i8], [5 x i8]* @.str.213, i64 0, i64 0, !noelle.pdg.inst.id !347
DOALL:     	  %51 = getelementptr [18 x i8], [18 x i8]* @.str.211, i64 0, i64 0, !noelle.pdg.inst.id !350
DOALL:     	  br label %._crit_edge, !noelle.pdg.inst.id !352
DOALL:     	  br label %._crit_edge, !noelle.pdg.inst.id !354
DOALL:     Edges: 208
DOALL:     Loop-carried data dependences
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %16 = load i8, i8* %15, align 1, !tbaa !291, !noelle.pdg.inst.id !53 via memory
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %29 = load i8, i8* %28, align 1, !tbaa !291, !noelle.pdg.inst.id !66 via memory
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         store i64 %7, i64* @len, align 8, !tbaa !271, !noelle.pdg.inst.id !47 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         store i64 %7, i64* @len, align 8, !tbaa !271, !noelle.pdg.inst.id !47 --->   store i64 %7, i64* @len, align 8, !tbaa !271, !noelle.pdg.inst.id !47 via memory
DOALL:         store i64 %7, i64* @len, align 8, !tbaa !271, !noelle.pdg.inst.id !47 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50 --->   store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50 via memory
DOALL:         store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %16 = load i8, i8* %15, align 1, !tbaa !291, !noelle.pdg.inst.id !53 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %16 = load i8, i8* %15, align 1, !tbaa !291, !noelle.pdg.inst.id !53 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %16 = load i8, i8* %15, align 1, !tbaa !291, !noelle.pdg.inst.id !53 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         store i64 %14, i64* %18, align 8, !tbaa !271, !noelle.pdg.inst.id !55 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         store i64 %14, i64* %18, align 8, !tbaa !271, !noelle.pdg.inst.id !55 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         store i64 %14, i64* %18, align 8, !tbaa !271, !noelle.pdg.inst.id !55 --->   store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50 via memory
DOALL:         store i8* %4, i8** @findme, align 8, !tbaa !252, !noelle.pdg.inst.id !58 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         store i8* %4, i8** @findme, align 8, !tbaa !252, !noelle.pdg.inst.id !58 --->   store i8* %4, i8** @findme, align 8, !tbaa !252, !noelle.pdg.inst.id !58 via memory
DOALL:         store i8* %4, i8** @findme, align 8, !tbaa !252, !noelle.pdg.inst.id !58 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %29 = load i8, i8* %28, align 1, !tbaa !291, !noelle.pdg.inst.id !66 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %29 = load i8, i8* %28, align 1, !tbaa !291, !noelle.pdg.inst.id !66 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %29 = load i8, i8* %28, align 1, !tbaa !291, !noelle.pdg.inst.id !66 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %32 = load i64, i64* %31, align 8, !tbaa !271, !noelle.pdg.inst.id !68 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %32 = load i64, i64* %31, align 8, !tbaa !271, !noelle.pdg.inst.id !68 --->   store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %16 = load i8, i8* %15, align 1, !tbaa !291, !noelle.pdg.inst.id !53 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %29 = load i8, i8* %28, align 1, !tbaa !291, !noelle.pdg.inst.id !66 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   store i64 %7, i64* @len, align 8, !tbaa !271, !noelle.pdg.inst.id !47 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   store i64 %7, i64* @len, align 8, !tbaa !271, !noelle.pdg.inst.id !47 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %16 = load i8, i8* %15, align 1, !tbaa !291, !noelle.pdg.inst.id !53 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   store i8* %4, i8** @findme, align 8, !tbaa !252, !noelle.pdg.inst.id !58 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %29 = load i8, i8* %28, align 1, !tbaa !291, !noelle.pdg.inst.id !66 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   store i8* %4, i8** @findme, align 8, !tbaa !252, !noelle.pdg.inst.id !58 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 24 = "  %3 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv, !noelle.pdg.inst.id !265"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !252, !noelle.pdg.inst.id !76
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44
DOALL:     External nodes: 12
DOALL:     	  %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33
DOALL:     	  %4 = load i8*, i8** %3, align 8, !tbaa !252, !noelle.pdg.inst.id !42
DOALL:     	  br i1 %5, label %57, label %6, !prof !267, !noelle.loop.id !268, !noelle.pdg.inst.id !269, !noelle.parallelizer.looporder !270
DOALL:     	  store i64 %7, i64* @len, align 8, !tbaa !271, !noelle.pdg.inst.id !47
DOALL:     	  store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50
DOALL:     	  %exitcond.i = icmp eq i64 %.1.i, %7, !noelle.pdg.inst.id !284
DOALL:     	  %14 = add i64 %7, %13, !noelle.pdg.inst.id !289
DOALL:     	  %22 = add i64 %7, -1, !noelle.pdg.inst.id !297
DOALL:     	  %40 = sub i64 %.13.i.lcssa, %7, !noelle.pdg.inst.id !331
DOALL:     	  %43 = tail call i32 @strncmp(i8* nonnull %4, i8* %42, i64 %7) #13, !noelle.pdg.inst.id !334
DOALL:     	  %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70
DOALL:     	  %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73
DOALL:     Edges: 12
DOALL:     Loop-carried data dependences
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 6
DOALL:     	  %indvars.iv = phi i64 [ %indvars.iv.next, %._crit_edge ], [ 0, %.preheader.preheader ], !noelle.pdg.inst.id !264
DOALL:     	  %3 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv, !noelle.pdg.inst.id !265
DOALL:     	  %4 = load i8*, i8** %3, align 8, !tbaa !252, !noelle.pdg.inst.id !42
DOALL:     	  %5 = icmp eq i8* %4, null, !noelle.pdg.inst.id !266
DOALL:     	  br i1 %5, label %57, label %6, !prof !267, !noelle.loop.id !268, !noelle.pdg.inst.id !269, !noelle.parallelizer.looporder !270
DOALL:     	  %indvars.iv.next = add nuw i64 %indvars.iv, 1, !noelle.pdg.inst.id !355
DOALL:     External nodes: 32
DOALL:     	  %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33
DOALL:     	  %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44
DOALL:     	  store i64 %7, i64* @len, align 8, !tbaa !271, !noelle.pdg.inst.id !47
DOALL:     	  br label %8, !noelle.pdg.inst.id !273
DOALL:     	  %.0.i = phi i64 [ 0, %6 ], [ %11, %9 ], !noelle.pdg.inst.id !274
DOALL:     	  %exitcond2.i = icmp eq i64 %.0.i, 256, !noelle.pdg.inst.id !275
DOALL:     	  br i1 %exitcond2.i, label %.preheader.i.preheader, label %9, !prof !276, !noelle.loop.id !277, !noelle.pdg.inst.id !278
DOALL:     	  br label %.preheader.i, !noelle.pdg.inst.id !279
DOALL:     	  %.1.i = phi i64 [ %19, %12 ], [ 0, %.preheader.i.preheader ], !noelle.pdg.inst.id !283
DOALL:     	  %exitcond.i = icmp eq i64 %.1.i, %7, !noelle.pdg.inst.id !284
DOALL:     	  br i1 %exitcond.i, label %init_search.exit, label %12, !prof !285, !noelle.loop.id !286, !noelle.pdg.inst.id !287
DOALL:     	  %15 = getelementptr inbounds i8, i8* %4, i64 %.1.i, !noelle.pdg.inst.id !290
DOALL:     	  store i8* %4, i8** @findme, align 8, !tbaa !252, !noelle.pdg.inst.id !58
DOALL:     	  %20 = getelementptr inbounds [1332 x i8*], [1332 x i8*]* @__const.main.search_strings, i64 0, i64 %indvars.iv, !noelle.pdg.inst.id !296
DOALL:     	  %21 = load i8*, i8** %20, align 8, !tbaa !252, !noelle.pdg.inst.id !61
DOALL:     	  %22 = add i64 %7, -1, !noelle.pdg.inst.id !297
DOALL:     	  %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63
DOALL:     	  br label %24, !noelle.pdg.inst.id !298
DOALL:     	  %.02.i = phi i64 [ %22, %init_search.exit ], [ %.24.i, %._crit_edge7.i ], !noelle.pdg.inst.id !299
DOALL:     	  %.01.i = phi i64 [ undef, %init_search.exit ], [ %.2.i.lcssa, %._crit_edge7.i ], !noelle.pdg.inst.id !300
DOALL:     	  %25 = icmp ult i64 %.02.i, %23, !noelle.pdg.inst.id !301
DOALL:     	  br i1 %25, label %.preheader.i3.preheader, label %.strsearch.exit_crit_edge, !prof !302, !noelle.loop.id !303, !noelle.pdg.inst.id !304
DOALL:     	  %43 = tail call i32 @strncmp(i8* nonnull %4, i8* %42, i64 %7) #13, !noelle.pdg.inst.id !334
DOALL:     	  %.0.i4 = phi i8* [ null, %.strsearch.exit_crit_edge ], [ %.lcssa, %.strsearch.exit_crit_edge4 ], !noelle.pdg.inst.id !344
DOALL:     	  %47 = icmp ne i8* %.0.i4, null, !noelle.pdg.inst.id !345
DOALL:     	  %48 = getelementptr [1 x i8], [1 x i8]* @.str.212, i64 0, i64 0, !noelle.pdg.inst.id !346
DOALL:     	  %49 = getelementptr [5 x i8], [5 x i8]* @.str.213, i64 0, i64 0, !noelle.pdg.inst.id !347
DOALL:     	  %50 = select i1 %47, i8* %48, i8* %49, !prof !348, !noelle.pdg.inst.id !349
DOALL:     	  %51 = getelementptr [18 x i8], [18 x i8]* @.str.211, i64 0, i64 0, !noelle.pdg.inst.id !350
DOALL:     	  br i1 %47, label %53, label %strsearch.exit.._crit_edge_crit_edge, !prof !348, !noelle.pdg.inst.id !351
DOALL:     	  %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73
DOALL:     	  br label %.preheader, !noelle.pdg.inst.id !356
DOALL:     Edges: 48
DOALL:     Loop-carried data dependences
DOALL:         %indvars.iv.next = add nuw i64 %indvars.iv, 1, !noelle.pdg.inst.id !355 --->   %indvars.iv = phi i64 [ %indvars.iv.next, %._crit_edge ], [ 0, %.preheader.preheader ], !noelle.pdg.inst.id !264 via variable
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63
DOALL:     External nodes: 7
DOALL:     	  %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33
DOALL:     	  br i1 %5, label %57, label %6, !prof !267, !noelle.loop.id !268, !noelle.pdg.inst.id !269, !noelle.parallelizer.looporder !270
DOALL:     	  %21 = load i8*, i8** %20, align 8, !tbaa !252, !noelle.pdg.inst.id !61
DOALL:     	  %25 = icmp ult i64 %.02.i, %23, !noelle.pdg.inst.id !301
DOALL:     	  %26 = icmp ult i64 %.13.i, %23, !noelle.pdg.inst.id !309
DOALL:     	  %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70
DOALL:     	  %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73
DOALL:     Edges: 7
DOALL:     Loop-carried data dependences
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 46
DOALL:     	  %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33
DOALL:     	  store i64 %7, i64* @len, align 8, !tbaa !271, !noelle.pdg.inst.id !47
DOALL:     	  store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50
DOALL:     	  %16 = load i8, i8* %15, align 1, !tbaa !291, !noelle.pdg.inst.id !53
DOALL:     	  %17 = zext i8 %16 to i64, !noelle.pdg.inst.id !292
DOALL:     	  %18 = getelementptr inbounds [256 x i64], [256 x i64]* @table, i64 0, i64 %17, !noelle.pdg.inst.id !293
DOALL:     	  store i64 %14, i64* %18, align 8, !tbaa !271, !noelle.pdg.inst.id !55
DOALL:     	  store i8* %4, i8** @findme, align 8, !tbaa !252, !noelle.pdg.inst.id !58
DOALL:     	  %.02.i = phi i64 [ %22, %init_search.exit ], [ %.24.i, %._crit_edge7.i ], !noelle.pdg.inst.id !299
DOALL:     	  %.01.i = phi i64 [ undef, %init_search.exit ], [ %.2.i.lcssa, %._crit_edge7.i ], !noelle.pdg.inst.id !300
DOALL:     	  %25 = icmp ult i64 %.02.i, %23, !noelle.pdg.inst.id !301
DOALL:     	  br i1 %25, label %.preheader.i3.preheader, label %.strsearch.exit_crit_edge, !prof !302, !noelle.loop.id !303, !noelle.pdg.inst.id !304
DOALL:     	  %.13.i = phi i64 [ %36, %35 ], [ %.02.i, %.preheader.i3.preheader ], !noelle.pdg.inst.id !307
DOALL:     	  %.1.i2 = phi i64 [ %.2.i, %35 ], [ %.01.i, %.preheader.i3.preheader ], !noelle.pdg.inst.id !308
DOALL:     	  %26 = icmp ult i64 %.13.i, %23, !noelle.pdg.inst.id !309
DOALL:     	  br i1 %26, label %27, label %.preheader.i3.._crit_edge6.i_crit_edge, !prof !310, !noelle.loop.id !311, !noelle.pdg.inst.id !312
DOALL:     	  %28 = getelementptr inbounds i8, i8* %21, i64 %.13.i, !noelle.pdg.inst.id !314
DOALL:     	  %29 = load i8, i8* %28, align 1, !tbaa !291, !noelle.pdg.inst.id !66
DOALL:     	  %30 = zext i8 %29 to i64, !noelle.pdg.inst.id !315
DOALL:     	  %31 = getelementptr inbounds [256 x i64], [256 x i64]* @table, i64 0, i64 %30, !noelle.pdg.inst.id !316
DOALL:     	  %32 = load i64, i64* %31, align 8, !tbaa !271, !noelle.pdg.inst.id !68
DOALL:     	  %33 = icmp ne i64 %32, 0, !noelle.pdg.inst.id !317
DOALL:     	  %.2.i = phi i64 [ %32, %27 ], [ %.1.i2, %.preheader.i3.._crit_edge6.i_crit_edge ], !noelle.pdg.inst.id !319
DOALL:     	  %34 = phi i1 [ %33, %27 ], [ false, %.preheader.i3.._crit_edge6.i_crit_edge ], !noelle.pdg.inst.id !320
DOALL:     	  br i1 %34, label %35, label %37, !prof !321, !noelle.pdg.inst.id !322
DOALL:     	  %36 = add i64 %.13.i, %.2.i, !noelle.pdg.inst.id !323
DOALL:     	  %.2.i.lcssa = phi i64 [ %.2.i, %._crit_edge6.i ], !noelle.pdg.inst.id !325
DOALL:     	  %.13.i.lcssa = phi i64 [ %.13.i, %._crit_edge6.i ], !noelle.pdg.inst.id !326
DOALL:     	  %38 = icmp eq i64 %.2.i.lcssa, 0, !noelle.pdg.inst.id !327
DOALL:     	  br i1 %38, label %39, label %.._crit_edge7.i_crit_edge, !prof !328, !noelle.pdg.inst.id !329
DOALL:     	  %40 = sub i64 %.13.i.lcssa, %7, !noelle.pdg.inst.id !331
DOALL:     	  %41 = add i64 %40, 1, !noelle.pdg.inst.id !332
DOALL:     	  %42 = getelementptr inbounds i8, i8* %21, i64 %41, !noelle.pdg.inst.id !333
DOALL:     	  %43 = tail call i32 @strncmp(i8* nonnull %4, i8* %42, i64 %7) #13, !noelle.pdg.inst.id !334
DOALL:     	  %44 = icmp eq i32 %43, 0, !noelle.pdg.inst.id !335
DOALL:     	  br i1 %44, label %.strsearch.exit_crit_edge4, label %45, !prof !336, !noelle.pdg.inst.id !337
DOALL:     	  %.lcssa = phi i8* [ %42, %39 ], !noelle.pdg.inst.id !338
DOALL:     	  %46 = add i64 %.13.i.lcssa, 1, !noelle.pdg.inst.id !340
DOALL:     	  %.24.i = phi i64 [ %46, %45 ], [ %.13.i.lcssa, %.._crit_edge7.i_crit_edge ], !noelle.pdg.inst.id !342
DOALL:     	  %.0.i4 = phi i8* [ null, %.strsearch.exit_crit_edge ], [ %.lcssa, %.strsearch.exit_crit_edge4 ], !noelle.pdg.inst.id !344
DOALL:     	  %47 = icmp ne i8* %.0.i4, null, !noelle.pdg.inst.id !345
DOALL:     	  %50 = select i1 %47, i8* %48, i8* %49, !prof !348, !noelle.pdg.inst.id !349
DOALL:     	  br i1 %47, label %53, label %strsearch.exit.._crit_edge_crit_edge, !prof !348, !noelle.pdg.inst.id !351
DOALL:     	  %54 = getelementptr [8 x i8], [8 x i8]* @.str.214, i64 0, i64 0, !noelle.pdg.inst.id !353
DOALL:     	  %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70
DOALL:     	  %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73
DOALL:     External nodes: 25
DOALL:     	  %4 = load i8*, i8** %3, align 8, !tbaa !252, !noelle.pdg.inst.id !42
DOALL:     	  br i1 %5, label %57, label %6, !prof !267, !noelle.loop.id !268, !noelle.pdg.inst.id !269, !noelle.parallelizer.looporder !270
DOALL:     	  %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44
DOALL:     	  br i1 %exitcond2.i, label %.preheader.i.preheader, label %9, !prof !276, !noelle.loop.id !277, !noelle.pdg.inst.id !278
DOALL:     	  %10 = getelementptr inbounds [256 x i64], [256 x i64]* @table, i64 0, i64 %.0.i, !noelle.pdg.inst.id !280
DOALL:     	  br i1 %exitcond.i, label %init_search.exit, label %12, !prof !285, !noelle.loop.id !286, !noelle.pdg.inst.id !287
DOALL:     	  %14 = add i64 %7, %13, !noelle.pdg.inst.id !289
DOALL:     	  %15 = getelementptr inbounds i8, i8* %4, i64 %.1.i, !noelle.pdg.inst.id !290
DOALL:     	  %21 = load i8*, i8** %20, align 8, !tbaa !252, !noelle.pdg.inst.id !61
DOALL:     	  %22 = add i64 %7, -1, !noelle.pdg.inst.id !297
DOALL:     	  %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63
DOALL:     	  br label %strsearch.exit, !noelle.pdg.inst.id !305
DOALL:     	  br label %.preheader.i3, !noelle.pdg.inst.id !306
DOALL:     	  br label %._crit_edge6.i, !noelle.pdg.inst.id !313
DOALL:     	  br label %._crit_edge6.i, !noelle.pdg.inst.id !318
DOALL:     	  br label %.preheader.i3, !noelle.pdg.inst.id !324
DOALL:     	  br label %._crit_edge7.i, !noelle.pdg.inst.id !330
DOALL:     	  br label %strsearch.exit, !noelle.pdg.inst.id !339
DOALL:     	  br label %._crit_edge7.i, !noelle.pdg.inst.id !341
DOALL:     	  br label %24, !noelle.pdg.inst.id !343
DOALL:     	  %48 = getelementptr [1 x i8], [1 x i8]* @.str.212, i64 0, i64 0, !noelle.pdg.inst.id !346
DOALL:     	  %49 = getelementptr [5 x i8], [5 x i8]* @.str.213, i64 0, i64 0, !noelle.pdg.inst.id !347
DOALL:     	  %51 = getelementptr [18 x i8], [18 x i8]* @.str.211, i64 0, i64 0, !noelle.pdg.inst.id !350
DOALL:     	  br label %._crit_edge, !noelle.pdg.inst.id !352
DOALL:     	  br label %._crit_edge, !noelle.pdg.inst.id !354
DOALL:     Edges: 204
DOALL:     Loop-carried data dependences
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %16 = load i8, i8* %15, align 1, !tbaa !291, !noelle.pdg.inst.id !53 via memory
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %29 = load i8, i8* %28, align 1, !tbaa !291, !noelle.pdg.inst.id !66 via memory
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         store i64 %7, i64* @len, align 8, !tbaa !271, !noelle.pdg.inst.id !47 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         store i64 %7, i64* @len, align 8, !tbaa !271, !noelle.pdg.inst.id !47 --->   store i64 %7, i64* @len, align 8, !tbaa !271, !noelle.pdg.inst.id !47 via memory
DOALL:         store i64 %7, i64* @len, align 8, !tbaa !271, !noelle.pdg.inst.id !47 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50 --->   store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50 via memory
DOALL:         store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %16 = load i8, i8* %15, align 1, !tbaa !291, !noelle.pdg.inst.id !53 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %16 = load i8, i8* %15, align 1, !tbaa !291, !noelle.pdg.inst.id !53 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %16 = load i8, i8* %15, align 1, !tbaa !291, !noelle.pdg.inst.id !53 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         store i64 %14, i64* %18, align 8, !tbaa !271, !noelle.pdg.inst.id !55 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         store i64 %14, i64* %18, align 8, !tbaa !271, !noelle.pdg.inst.id !55 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         store i64 %14, i64* %18, align 8, !tbaa !271, !noelle.pdg.inst.id !55 --->   store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50 via memory
DOALL:         store i8* %4, i8** @findme, align 8, !tbaa !252, !noelle.pdg.inst.id !58 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         store i8* %4, i8** @findme, align 8, !tbaa !252, !noelle.pdg.inst.id !58 --->   store i8* %4, i8** @findme, align 8, !tbaa !252, !noelle.pdg.inst.id !58 via memory
DOALL:         store i8* %4, i8** @findme, align 8, !tbaa !252, !noelle.pdg.inst.id !58 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %29 = load i8, i8* %28, align 1, !tbaa !291, !noelle.pdg.inst.id !66 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %29 = load i8, i8* %28, align 1, !tbaa !291, !noelle.pdg.inst.id !66 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %29 = load i8, i8* %28, align 1, !tbaa !291, !noelle.pdg.inst.id !66 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %32 = load i64, i64* %31, align 8, !tbaa !271, !noelle.pdg.inst.id !68 --->   store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50 via memory
DOALL:         %32 = load i64, i64* %31, align 8, !tbaa !271, !noelle.pdg.inst.id !68 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %16 = load i8, i8* %15, align 1, !tbaa !291, !noelle.pdg.inst.id !53 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %29 = load i8, i8* %28, align 1, !tbaa !291, !noelle.pdg.inst.id !66 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   store i8* %4, i8** @findme, align 8, !tbaa !252, !noelle.pdg.inst.id !58 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   store i8* %4, i8** @findme, align 8, !tbaa !252, !noelle.pdg.inst.id !58 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   store i64 %7, i64* @len, align 8, !tbaa !271, !noelle.pdg.inst.id !47 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %29 = load i8, i8* %28, align 1, !tbaa !291, !noelle.pdg.inst.id !66 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   store i64 %7, i64* @len, align 8, !tbaa !271, !noelle.pdg.inst.id !47 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   store i64 %7, i64* %10, align 8, !tbaa !271, !noelle.pdg.inst.id !50 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %16 = load i8, i8* %15, align 1, !tbaa !291, !noelle.pdg.inst.id !53 via memory
DOALL:         %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %7 = tail call i64 @strlen(i8* nonnull %4) #13, !noelle.pdg.inst.id !44 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %56 = tail call i32 @putc(i32 10, %struct._IO_FILE* %1) #14, !noelle.pdg.inst.id !73 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %52 = tail call i32 (i8*, ...) @printf(i8* %51, i8* nonnull %4, i8* %50, i8* %21) #14, !noelle.pdg.inst.id !33 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %21) #13, !noelle.pdg.inst.id !63 --->   %55 = tail call i32 (i8*, ...) @printf(i8* %54, i8* nonnull %.0.i4) #14, !noelle.pdg.inst.id !70 via memory
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc search.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/search'
