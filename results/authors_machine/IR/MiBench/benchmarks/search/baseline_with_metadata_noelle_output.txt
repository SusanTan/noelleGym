make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/search'
./runEnablers.sh search search.bc large "-lm -lstdc++ -lpthread -ltermcap" -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/search /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/search
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/search

opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs search.bc -o baseline.bc
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/search /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/search
Running: ./baseline_prof > output_large.txt in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/MiBench/office/stringsearch
--------------------------------------------------------------------------------------
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/search
DONE
opt -pgo-test-profile-file=/tmp/tmp.RbuTqYl20s -block-freq -pgo-instr-use baseline.bc -o baseline_pre.bc
opt --strip-debug --strip-debug-declare baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.yNt1DMSTjR (.ll version is /tmp/tmp.h1NoEpM6no)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.DTonUGHknl (.ll version is /tmp/tmp.quG7D7Ih6M)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.yNt1DMSTjR -o /tmp/tmp.DTonUGHknl
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.yNt1DMSTjR -o /tmp/tmp.DTonUGHknl
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.yNt1DMSTjR -o /tmp/tmp.DTonUGHknl
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.yNt1DMSTjR -o /tmp/tmp.DTonUGHknl
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       strlen
DeadFunctionEliminator:       bmha_init
DeadFunctionEliminator:       bmhi_init
DeadFunctionEliminator:       realloc
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       bhmi_cleanup
DeadFunctionEliminator:       atexit
DeadFunctionEliminator:       __ctype_toupper_loc
DeadFunctionEliminator:       __ctype_tolower_loc
DeadFunctionEliminator:       llvm.is.constant.i32
DeadFunctionEliminator:       tolower
DeadFunctionEliminator:       free
DeadFunctionEliminator:       bmhi_search
DeadFunctionEliminator:       bmh_init
DeadFunctionEliminator:       init_search
DeadFunctionEliminator:       strsearch
DeadFunctionEliminator:       strncmp
DeadFunctionEliminator:       main
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       putchar
DeadFunctionEliminator:       putc
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (9.984632e+01%)
Noelle:     Loop "  %3 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (9.984609e+01%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (9.190780e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (2.612582e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (3.620612e+00%)
Noelle:     Loop "  %9 = icmp ult i64 %.13, %4" (2.807752e+00%)
Noelle:  Function "tolower"
Noelle:  Function "putchar"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %16" (0.000000e+00%)
Noelle:     Loop "  %17 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %25" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %16" (0.000000e+00%)
Noelle:     Loop "  %17 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp slt i64 %indvars.iv, %71" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %16" (0.000000e+00%)
Noelle:     Loop "  %17 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv, %33" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (9.984632e+01%)
Noelle:     Loop "  %3 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (9.984609e+01%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (9.190780e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (2.612582e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (3.620612e+00%)
Noelle:     Loop "  %9 = icmp ult i64 %.13, %4" (2.807752e+00%)
Noelle:  Function "tolower"
Noelle:  Function "putchar"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %16" (0.000000e+00%)
Noelle:     Loop "  %17 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %25" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %16" (0.000000e+00%)
Noelle:     Loop "  %17 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp slt i64 %indvars.iv, %71" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %16" (0.000000e+00%)
Noelle:     Loop "  %17 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv, %33" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-inline baseline_pre.bc "-noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier"
NOELLE: Inliner: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.um17GkRDs4 (.ll version is /tmp/tmp.GCkHeyuiQP)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.mO8qsQwejw (.ll version is /tmp/tmp.2lfZ5ly7X4)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.um17GkRDs4 -o /tmp/tmp.mO8qsQwejw
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.um17GkRDs4 -o /tmp/tmp.mO8qsQwejw
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.um17GkRDs4 -o /tmp/tmp.mO8qsQwejw
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.um17GkRDs4 -o /tmp/tmp.mO8qsQwejw
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.um17GkRDs4 -o /tmp/tmp.mO8qsQwejw
Inliner: Start
Inliner:   Number of program instructions = 568
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   More than 1 loop exit blocks
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 4
DOALL:     	  %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15
DOALL:     	  tail call void @init_search(i8* nonnull %3)
DOALL:     	  %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15
DOALL:     	  %18 = tail call i32 @putchar(i32 10)
DOALL:     External nodes: 8
DOALL:     	  %3 = load i8*, i8** %2, align 8, !tbaa !31
DOALL:     	  br i1 %4, label %19, label %5, !prof !35
DOALL:     	  %7 = load i8*, i8** %6, align 8, !tbaa !31
DOALL:     	  %8 = tail call i8* @strsearch(i8* %7)
DOALL:     	  %12 = select i1 %9, i8* %10, i8* %11, !prof !36
DOALL:     	  %13 = getelementptr [18 x i8], [18 x i8]* @.str.211, i64 0, i64 0
DOALL:     	  br i1 %9, label %15, label %.._crit_edge_crit_edge, !prof !36
DOALL:     	  %16 = getelementptr [8 x i8], [8 x i8]* @.str.214, i64 0, i64 0
DOALL:     Edges: 51
DOALL:     Loop-carried data dependences
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   %18 = tail call i32 @putchar(i32 10) via memory
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   %18 = tail call i32 @putchar(i32 10) via memory
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         tail call void @init_search(i8* nonnull %3) --->   %18 = tail call i32 @putchar(i32 10) via memory
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         tail call void @init_search(i8* nonnull %3) --->   %18 = tail call i32 @putchar(i32 10) via memory
DOALL:         tail call void @init_search(i8* nonnull %3) --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         tail call void @init_search(i8* nonnull %3) --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %18 = tail call i32 @putchar(i32 10) via memory
DOALL:         %18 = tail call i32 @putchar(i32 10) --->   %18 = tail call i32 @putchar(i32 10) via memory
DOALL:         %18 = tail call i32 @putchar(i32 10) --->   %18 = tail call i32 @putchar(i32 10) via memory
DOALL:         %18 = tail call i32 @putchar(i32 10) --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %18 = tail call i32 @putchar(i32 10) --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %18 = tail call i32 @putchar(i32 10) --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %18 = tail call i32 @putchar(i32 10) --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %18 = tail call i32 @putchar(i32 10) --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %18 = tail call i32 @putchar(i32 10) --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         tail call void @init_search(i8* nonnull %3) --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         tail call void @init_search(i8* nonnull %3) --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   %18 = tail call i32 @putchar(i32 10) via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   %18 = tail call i32 @putchar(i32 10) via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %18 = tail call i32 @putchar(i32 10) --->   %18 = tail call i32 @putchar(i32 10) via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %18 = tail call i32 @putchar(i32 10) via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %8 = tail call i8* @strsearch(i8* %7)
DOALL:     External nodes: 7
DOALL:     	  %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15
DOALL:     	  br i1 %4, label %19, label %5, !prof !35
DOALL:     	  tail call void @init_search(i8* nonnull %3)
DOALL:     	  %7 = load i8*, i8** %6, align 8, !tbaa !31
DOALL:     	  %9 = icmp ne i8* %8, null
DOALL:     	  %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15
DOALL:     	  %18 = tail call i32 @putchar(i32 10)
DOALL:     Edges: 8
DOALL:     Loop-carried data dependences
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %18 = tail call i32 @putchar(i32 10) via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %18 = tail call i32 @putchar(i32 10) via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: main (31 instructions. The inlining will add 3 instructions),   %18 = tail call i32 @putchar(i32 10)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (9.984632e+01%)
Noelle:     Loop "  %2 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (9.984609e+01%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (9.190780e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (2.612582e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (3.620612e+00%)
Noelle:     Loop "  %8 = icmp ult i64 %.13, %4" (2.807752e+00%)
Noelle:  Function "tolower"
Noelle:  Function "putchar"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %19" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %32" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (9.989760e+01%)
Noelle:     Loop "  %2 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (9.989737e+01%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (9.186074e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (2.611244e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (3.618758e+00%)
Noelle:     Loop "  %8 = icmp ult i64 %.13, %4" (2.806315e+00%)
Noelle:  Function "tolower"
Noelle:  Function "putchar"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %19" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %32" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
NOELLE: FixedPoint:       There are 1 different instructions and 2 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.mO8qsQwejw -o /tmp/tmp.mO8qsQwejw
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.mO8qsQwejw -o /tmp/tmp.mO8qsQwejw
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.um17GkRDs4 -o /tmp/tmp.mO8qsQwejw
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.um17GkRDs4 -o /tmp/tmp.mO8qsQwejw
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.um17GkRDs4 -o /tmp/tmp.mO8qsQwejw
Inliner: Start
Inliner:   Number of program instructions = 569
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   More than 1 loop exit blocks
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 4
DOALL:     	  %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15
DOALL:     	  tail call void @init_search(i8* nonnull %3)
DOALL:     	  %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15
DOALL:     	  %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15
DOALL:     External nodes: 9
DOALL:     	  %3 = load i8*, i8** %2, align 8, !tbaa !31
DOALL:     	  br i1 %4, label %20, label %5, !prof !35
DOALL:     	  %7 = load i8*, i8** %6, align 8, !tbaa !31
DOALL:     	  %8 = tail call i8* @strsearch(i8* %7)
DOALL:     	  %12 = select i1 %9, i8* %10, i8* %11, !prof !36
DOALL:     	  %13 = getelementptr [18 x i8], [18 x i8]* @.str.211, i64 0, i64 0
DOALL:     	  br i1 %9, label %15, label %.._crit_edge_crit_edge, !prof !36
DOALL:     	  %16 = getelementptr [8 x i8], [8 x i8]* @.str.214, i64 0, i64 0
DOALL:     	  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !31
DOALL:     Edges: 52
DOALL:     Loop-carried data dependences
DOALL:         %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 via memory
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 via memory
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         tail call void @init_search(i8* nonnull %3) --->   %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 via memory
DOALL:         tail call void @init_search(i8* nonnull %3) --->   %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 via memory
DOALL:         %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 --->   %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 via memory
DOALL:         %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 --->   %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 via memory
DOALL:         %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 --->   %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 via memory
DOALL:         %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 via memory
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         tail call void @init_search(i8* nonnull %3) --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         tail call void @init_search(i8* nonnull %3) --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         tail call void @init_search(i8* nonnull %3) --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         tail call void @init_search(i8* nonnull %3) --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %8 = tail call i8* @strsearch(i8* %7)
DOALL:     External nodes: 7
DOALL:     	  %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15
DOALL:     	  br i1 %4, label %20, label %5, !prof !35
DOALL:     	  tail call void @init_search(i8* nonnull %3)
DOALL:     	  %7 = load i8*, i8** %6, align 8, !tbaa !31
DOALL:     	  %9 = icmp ne i8* %8, null
DOALL:     	  %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15
DOALL:     	  %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15
DOALL:     Edges: 8
DOALL:     Loop-carried data dependences
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   tail call void @init_search(i8* nonnull %3) via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %14 = tail call i32 (i8*, ...) @printf(i8* %13, i8* nonnull %3, i8* %12, i8* %7) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %17 = tail call i32 (i8*, ...) @printf(i8* %16, i8* nonnull %8) #15 via memory
DOALL:         %8 = tail call i8* @strsearch(i8* %7) --->   %19 = tail call i32 @putc(i32 10, %struct._IO_FILE* %18) #15 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: main (32 instructions. The inlining will add 25 instructions),   tail call void @init_search(i8* nonnull %3)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (9.989760e+01%)
Noelle:     Loop "  %2 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (9.989737e+01%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (9.186074e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (2.611244e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (3.618758e+00%)
Noelle:     Loop "  %8 = icmp ult i64 %.13, %4" (2.806315e+00%)
Noelle:  Function "tolower"
Noelle:  Function "putchar"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %19" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %32" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (5.130182e+01%)
Noelle:     Loop "  %2 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (5.130171e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256" (4.719599e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %6" (1.345919e+00%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (4.717317e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (1.340950e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (1.858338e+00%)
Noelle:     Loop "  %8 = icmp ult i64 %.13, %4" (1.441125e+00%)
Noelle:  Function "tolower"
Noelle:  Function "putchar"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %19" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %32" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
NOELLE: FixedPoint:       There are 17 different instructions and 49 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.mO8qsQwejw -o /tmp/tmp.mO8qsQwejw
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.mO8qsQwejw -o /tmp/tmp.mO8qsQwejw
NOELLE: FixedPoint:     Invocation 2
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.um17GkRDs4 -o /tmp/tmp.mO8qsQwejw
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.um17GkRDs4 -o /tmp/tmp.mO8qsQwejw
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.um17GkRDs4 -o /tmp/tmp.mO8qsQwejw
Inliner: Start
Inliner:   Number of program instructions = 592
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   More than 1 loop exit blocks
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 15
DOALL:     	  %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16
DOALL:     	  store i64 %6, i64* @len, align 8, !tbaa !36
DOALL:     	  store i64 %6, i64* %9, align 8, !tbaa !36
DOALL:     	  %15 = load i8, i8* %14, align 1, !tbaa !40
DOALL:     	  %16 = zext i8 %15 to i64
DOALL:     	  %17 = getelementptr inbounds [256 x i64], [256 x i64]* @table, i64 0, i64 %16
DOALL:     	  store i64 %13, i64* %17, align 8, !tbaa !36
DOALL:     	  store i8* %3, i8** @findme, align 8, !tbaa !31
DOALL:     	  %21 = tail call i8* @strsearch(i8* %20)
DOALL:     	  %22 = icmp ne i8* %21, null
DOALL:     	  %25 = select i1 %22, i8* %23, i8* %24, !prof !41
DOALL:     	  br i1 %22, label %28, label %.._crit_edge_crit_edge, !prof !41
DOALL:     	  %29 = getelementptr [8 x i8], [8 x i8]* @.str.214, i64 0, i64 0
DOALL:     	  %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16
DOALL:     	  %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16
DOALL:     External nodes: 15
DOALL:     	  %3 = load i8*, i8** %2, align 8, !tbaa !31
DOALL:     	  br i1 %4, label %33, label %5, !prof !35
DOALL:     	  %6 = tail call i64 @strlen(i8* %3) #15
DOALL:     	  br i1 %exitcond2.i, label %.preheader.preheader.i, label %8, !prof !38
DOALL:     	  %9 = getelementptr inbounds [256 x i64], [256 x i64]* @table, i64 0, i64 %.0.i
DOALL:     	  br i1 %exitcond.i, label %init_search.exit, label %11, !prof !39
DOALL:     	  %13 = add i64 %6, %12
DOALL:     	  %14 = getelementptr inbounds i8, i8* %3, i64 %.1.i
DOALL:     	  %20 = load i8*, i8** %19, align 8, !tbaa !31
DOALL:     	  %23 = getelementptr [1 x i8], [1 x i8]* @.str.212, i64 0, i64 0
DOALL:     	  %24 = getelementptr [5 x i8], [5 x i8]* @.str.213, i64 0, i64 0
DOALL:     	  %26 = getelementptr [18 x i8], [18 x i8]* @.str.211, i64 0, i64 0
DOALL:     	  br label %._crit_edge
DOALL:     	  br label %._crit_edge
DOALL:     	  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !31
DOALL:     Edges: 117
DOALL:     Loop-carried data dependences
DOALL:         %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 --->   %15 = load i8, i8* %14, align 1, !tbaa !40 via memory
DOALL:         %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         store i64 %6, i64* @len, align 8, !tbaa !36 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         store i64 %6, i64* @len, align 8, !tbaa !36 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         store i64 %6, i64* @len, align 8, !tbaa !36 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         store i64 %6, i64* @len, align 8, !tbaa !36 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         store i64 %6, i64* @len, align 8, !tbaa !36 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         store i64 %6, i64* %9, align 8, !tbaa !36 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         store i64 %6, i64* %9, align 8, !tbaa !36 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         store i64 %6, i64* %9, align 8, !tbaa !36 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         store i64 %6, i64* %9, align 8, !tbaa !36 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         store i64 %6, i64* %9, align 8, !tbaa !36 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %15 = load i8, i8* %14, align 1, !tbaa !40 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %15 = load i8, i8* %14, align 1, !tbaa !40 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %15 = load i8, i8* %14, align 1, !tbaa !40 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   %15 = load i8, i8* %14, align 1, !tbaa !40 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         store i64 %13, i64* %17, align 8, !tbaa !36 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         store i64 %13, i64* %17, align 8, !tbaa !36 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         store i64 %13, i64* %17, align 8, !tbaa !36 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         store i64 %13, i64* %17, align 8, !tbaa !36 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         store i64 %13, i64* %17, align 8, !tbaa !36 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         store i8* %3, i8** @findme, align 8, !tbaa !31 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         store i8* %3, i8** @findme, align 8, !tbaa !31 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   %15 = load i8, i8* %14, align 1, !tbaa !40 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         store i8* %3, i8** @findme, align 8, !tbaa !31 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         store i8* %3, i8** @findme, align 8, !tbaa !31 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         store i8* %3, i8** @findme, align 8, !tbaa !31 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %21 = tail call i8* @strsearch(i8* %20) --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %21 = tail call i8* @strsearch(i8* %20) --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         %21 = tail call i8* @strsearch(i8* %20) --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %21 = tail call i8* @strsearch(i8* %20) --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %21 = tail call i8* @strsearch(i8* %20) --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         %21 = tail call i8* @strsearch(i8* %20) --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %6 = tail call i64 @strlen(i8* %3) #15
DOALL:     External nodes: 9
DOALL:     	  %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16
DOALL:     	  %3 = load i8*, i8** %2, align 8, !tbaa !31
DOALL:     	  br i1 %4, label %33, label %5, !prof !35
DOALL:     	  store i64 %6, i64* @len, align 8, !tbaa !36
DOALL:     	  store i64 %6, i64* %9, align 8, !tbaa !36
DOALL:     	  %exitcond.i = icmp eq i64 %.1.i, %6
DOALL:     	  %13 = add i64 %6, %12
DOALL:     	  %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16
DOALL:     	  %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16
DOALL:     Edges: 9
DOALL:     Loop-carried data dependences
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 15
DOALL:     	  %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16
DOALL:     	  store i64 %6, i64* @len, align 8, !tbaa !36
DOALL:     	  store i64 %6, i64* %9, align 8, !tbaa !36
DOALL:     	  %15 = load i8, i8* %14, align 1, !tbaa !40
DOALL:     	  %16 = zext i8 %15 to i64
DOALL:     	  %17 = getelementptr inbounds [256 x i64], [256 x i64]* @table, i64 0, i64 %16
DOALL:     	  store i64 %13, i64* %17, align 8, !tbaa !36
DOALL:     	  store i8* %3, i8** @findme, align 8, !tbaa !31
DOALL:     	  %21 = tail call i8* @strsearch(i8* %20)
DOALL:     	  %22 = icmp ne i8* %21, null
DOALL:     	  %25 = select i1 %22, i8* %23, i8* %24, !prof !41
DOALL:     	  br i1 %22, label %28, label %.._crit_edge_crit_edge, !prof !41
DOALL:     	  %29 = getelementptr [8 x i8], [8 x i8]* @.str.214, i64 0, i64 0
DOALL:     	  %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16
DOALL:     	  %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16
DOALL:     External nodes: 15
DOALL:     	  %3 = load i8*, i8** %2, align 8, !tbaa !31
DOALL:     	  br i1 %4, label %33, label %5, !prof !35
DOALL:     	  %6 = tail call i64 @strlen(i8* %3) #15
DOALL:     	  br i1 %exitcond2.i, label %.preheader.preheader.i, label %8, !prof !38
DOALL:     	  %9 = getelementptr inbounds [256 x i64], [256 x i64]* @table, i64 0, i64 %.0.i
DOALL:     	  br i1 %exitcond.i, label %init_search.exit, label %11, !prof !39
DOALL:     	  %13 = add i64 %6, %12
DOALL:     	  %14 = getelementptr inbounds i8, i8* %3, i64 %.1.i
DOALL:     	  %20 = load i8*, i8** %19, align 8, !tbaa !31
DOALL:     	  %23 = getelementptr [1 x i8], [1 x i8]* @.str.212, i64 0, i64 0
DOALL:     	  %24 = getelementptr [5 x i8], [5 x i8]* @.str.213, i64 0, i64 0
DOALL:     	  %26 = getelementptr [18 x i8], [18 x i8]* @.str.211, i64 0, i64 0
DOALL:     	  br label %._crit_edge
DOALL:     	  br label %._crit_edge
DOALL:     	  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !31
DOALL:     Edges: 112
DOALL:     Loop-carried data dependences
DOALL:         %21 = tail call i8* @strsearch(i8* %20) --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %21 = tail call i8* @strsearch(i8* %20) --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %21 = tail call i8* @strsearch(i8* %20) --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         %21 = tail call i8* @strsearch(i8* %20) --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %21 = tail call i8* @strsearch(i8* %20) --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %21 = tail call i8* @strsearch(i8* %20) --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         store i64 %6, i64* %9, align 8, !tbaa !36 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         store i64 %6, i64* %9, align 8, !tbaa !36 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         store i64 %6, i64* %9, align 8, !tbaa !36 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         store i64 %6, i64* %9, align 8, !tbaa !36 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         store i64 %6, i64* %9, align 8, !tbaa !36 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %15 = load i8, i8* %14, align 1, !tbaa !40 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %15 = load i8, i8* %14, align 1, !tbaa !40 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %15 = load i8, i8* %14, align 1, !tbaa !40 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   %15 = load i8, i8* %14, align 1, !tbaa !40 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   %15 = load i8, i8* %14, align 1, !tbaa !40 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         store i8* %3, i8** @findme, align 8, !tbaa !31 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         store i8* %3, i8** @findme, align 8, !tbaa !31 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         store i8* %3, i8** @findme, align 8, !tbaa !31 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         store i8* %3, i8** @findme, align 8, !tbaa !31 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         store i8* %3, i8** @findme, align 8, !tbaa !31 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         store i64 %13, i64* %17, align 8, !tbaa !36 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         store i64 %13, i64* %17, align 8, !tbaa !36 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         store i64 %13, i64* %17, align 8, !tbaa !36 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         store i64 %13, i64* %17, align 8, !tbaa !36 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         store i64 %13, i64* %17, align 8, !tbaa !36 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         store i64 %6, i64* @len, align 8, !tbaa !36 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         store i64 %6, i64* @len, align 8, !tbaa !36 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         store i64 %6, i64* @len, align 8, !tbaa !36 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         store i64 %6, i64* @len, align 8, !tbaa !36 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         store i64 %6, i64* @len, align 8, !tbaa !36 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 --->   %15 = load i8, i8* %14, align 1, !tbaa !40 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %6 = tail call i64 @strlen(i8* %3) #15
DOALL:     External nodes: 9
DOALL:     	  %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16
DOALL:     	  %3 = load i8*, i8** %2, align 8, !tbaa !31
DOALL:     	  br i1 %4, label %33, label %5, !prof !35
DOALL:     	  store i64 %6, i64* @len, align 8, !tbaa !36
DOALL:     	  store i64 %6, i64* %9, align 8, !tbaa !36
DOALL:     	  %exitcond.i = icmp eq i64 %.1.i, %6
DOALL:     	  %13 = add i64 %6, %12
DOALL:     	  %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16
DOALL:     	  %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16
DOALL:     Edges: 9
DOALL:     Loop-carried data dependences
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %30 = tail call i32 (i8*, ...) @printf(i8* %29, i8* nonnull %21) #16 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 6
DOALL:     	  %indvars.iv = phi i64 [ %indvars.iv.next, %._crit_edge ], [ 0, %.preheader.preheader ]
DOALL:     	  %2 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv
DOALL:     	  %3 = load i8*, i8** %2, align 8, !tbaa !31
DOALL:     	  %4 = icmp eq i8* %3, null
DOALL:     	  br i1 %4, label %33, label %5, !prof !35
DOALL:     	  %indvars.iv.next = add nuw i64 %indvars.iv, 1
DOALL:     External nodes: 25
DOALL:     	  %27 = tail call i32 (i8*, ...) @printf(i8* %26, i8* nonnull %3, i8* %25, i8* %20) #16
DOALL:     	  %6 = tail call i64 @strlen(i8* %3) #15
DOALL:     	  store i64 %6, i64* @len, align 8, !tbaa !36
DOALL:     	  br label %7
DOALL:     	  %.0.i = phi i64 [ 0, %5 ], [ %10, %8 ]
DOALL:     	  %exitcond2.i = icmp eq i64 %.0.i, 256
DOALL:     	  br i1 %exitcond2.i, label %.preheader.preheader.i, label %8, !prof !38
DOALL:     	  br label %.preheader.i
DOALL:     	  %.1.i = phi i64 [ %18, %11 ], [ 0, %.preheader.preheader.i ]
DOALL:     	  %exitcond.i = icmp eq i64 %.1.i, %6
DOALL:     	  br i1 %exitcond.i, label %init_search.exit, label %11, !prof !39
DOALL:     	  %14 = getelementptr inbounds i8, i8* %3, i64 %.1.i
DOALL:     	  store i8* %3, i8** @findme, align 8, !tbaa !31
DOALL:     	  %19 = getelementptr inbounds [1332 x i8*], [1332 x i8*]* @__const.main.search_strings, i64 0, i64 %indvars.iv
DOALL:     	  %20 = load i8*, i8** %19, align 8, !tbaa !31
DOALL:     	  %21 = tail call i8* @strsearch(i8* %20)
DOALL:     	  %22 = icmp ne i8* %21, null
DOALL:     	  %23 = getelementptr [1 x i8], [1 x i8]* @.str.212, i64 0, i64 0
DOALL:     	  %24 = getelementptr [5 x i8], [5 x i8]* @.str.213, i64 0, i64 0
DOALL:     	  %25 = select i1 %22, i8* %23, i8* %24, !prof !41
DOALL:     	  %26 = getelementptr [18 x i8], [18 x i8]* @.str.211, i64 0, i64 0
DOALL:     	  br i1 %22, label %28, label %.._crit_edge_crit_edge, !prof !41
DOALL:     	  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !31
DOALL:     	  %32 = tail call i32 @putc(i32 10, %struct._IO_FILE* %31) #16
DOALL:     	  br label %.preheader
DOALL:     Edges: 41
DOALL:     Loop-carried data dependences
DOALL:         %indvars.iv.next = add nuw i64 %indvars.iv, 1 --->   %indvars.iv = phi i64 [ %indvars.iv.next, %._crit_edge ], [ 0, %.preheader.preheader ] via variable
Inliner:   Inlining in: main (55 instructions. The inlining will add 47 instructions),   %21 = tail call i8* @strsearch(i8* %20)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (5.130182e+01%)
Noelle:     Loop "  %2 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (5.130171e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256" (4.719599e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %6" (1.345919e+00%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (4.717317e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (1.340950e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (1.858338e+00%)
Noelle:     Loop "  %8 = icmp ult i64 %.13, %4" (1.441125e+00%)
Noelle:  Function "tolower"
Noelle:  Function "putchar"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %19" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %32" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (5.021568e+01%)
Noelle:     Loop "  %2 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (5.021557e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256" (4.628830e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %6" (1.320034e+00%)
Noelle:     Loop "  %26 = icmp ult i64 %.02.i, %23" (1.768505e+00%)
Noelle:     Loop "  %27 = icmp ult i64 %.13.i, %23" (1.412613e+00%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (4.626593e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (1.315160e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (1.822598e+00%)
Noelle:     Loop "  %8 = icmp ult i64 %.13, %4" (1.413409e+00%)
Noelle:  Function "tolower"
Noelle:  Function "putchar"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %19" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %32" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
NOELLE: FixedPoint:       There are 24 different instructions and 79 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.mO8qsQwejw -o /tmp/tmp.mO8qsQwejw
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.mO8qsQwejw -o /tmp/tmp.mO8qsQwejw
NOELLE: FixedPoint:     Invocation 3
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.um17GkRDs4 -o /tmp/tmp.mO8qsQwejw
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.um17GkRDs4 -o /tmp/tmp.mO8qsQwejw
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.um17GkRDs4 -o /tmp/tmp.mO8qsQwejw
Inliner: Start
Inliner:   Number of program instructions = 637
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 49
DOALL:     	  %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16
DOALL:     	  store i64 %6, i64* @len, align 8, !tbaa !36
DOALL:     	  store i64 %6, i64* %9, align 8, !tbaa !36
DOALL:     	  %15 = load i8, i8* %14, align 1, !tbaa !40
DOALL:     	  %16 = zext i8 %15 to i64
DOALL:     	  %17 = getelementptr inbounds [256 x i64], [256 x i64]* @table, i64 0, i64 %16
DOALL:     	  store i64 %13, i64* %17, align 8, !tbaa !36
DOALL:     	  store i8* %3, i8** @findme, align 8, !tbaa !31
DOALL:     	  %21 = load i64, i64* @len, align 8, !tbaa !36
DOALL:     	  %22 = add i64 %21, -1
DOALL:     	  %24 = load i8*, i8** @findme, align 8
DOALL:     	  %.02.i = phi i64 [ %22, %init_search.exit ], [ %.24.i, %._crit_edge7.i ]
DOALL:     	  %.01.i = phi i64 [ undef, %init_search.exit ], [ %.2.i.lcssa, %._crit_edge7.i ]
DOALL:     	  %26 = icmp ult i64 %.02.i, %23
DOALL:     	  br i1 %26, label %.preheader.preheader.i1, label %.._crit_edge_crit_edge.i, !prof !41
DOALL:     	  %.13.i = phi i64 [ %37, %36 ], [ %.02.i, %.preheader.preheader.i1 ]
DOALL:     	  %.1.i2 = phi i64 [ %.2.i, %36 ], [ %.01.i, %.preheader.preheader.i1 ]
DOALL:     	  %27 = icmp ult i64 %.13.i, %23
DOALL:     	  br i1 %27, label %28, label %.preheader.._crit_edge6_crit_edge.i, !prof !42
DOALL:     	  %29 = getelementptr inbounds i8, i8* %20, i64 %.13.i
DOALL:     	  %30 = load i8, i8* %29, align 1, !tbaa !40
DOALL:     	  %31 = zext i8 %30 to i64
DOALL:     	  %32 = getelementptr inbounds [256 x i64], [256 x i64]* @table, i64 0, i64 %31
DOALL:     	  %33 = load i64, i64* %32, align 8, !tbaa !36
DOALL:     	  %34 = icmp ne i64 %33, 0
DOALL:     	  %.2.i = phi i64 [ %33, %28 ], [ %.1.i2, %.preheader.._crit_edge6_crit_edge.i ]
DOALL:     	  %35 = phi i1 [ %34, %28 ], [ false, %.preheader.._crit_edge6_crit_edge.i ]
DOALL:     	  br i1 %35, label %36, label %38, !prof !43
DOALL:     	  %37 = add i64 %.13.i, %.2.i
DOALL:     	  %.2.i.lcssa = phi i64 [ %.2.i, %._crit_edge6.i ]
DOALL:     	  %.13.i.lcssa = phi i64 [ %.13.i, %._crit_edge6.i ]
DOALL:     	  %39 = icmp eq i64 %.2.i.lcssa, 0
DOALL:     	  br i1 %39, label %40, label %.._crit_edge7_crit_edge.i, !prof !44
DOALL:     	  %41 = sub i64 %.13.i.lcssa, %21
DOALL:     	  %42 = add i64 %41, 1
DOALL:     	  %43 = getelementptr inbounds i8, i8* %20, i64 %42
DOALL:     	  %44 = tail call i32 @strncmp(i8* %24, i8* %43, i64 %21) #15
DOALL:     	  %45 = icmp eq i32 %44, 0
DOALL:     	  br i1 %45, label %.._crit_edge_crit_edge4.i, label %46, !prof !45
DOALL:     	  %.lcssa = phi i8* [ %43, %40 ]
DOALL:     	  %47 = add i64 %.13.i.lcssa, 1
DOALL:     	  %.24.i = phi i64 [ %47, %46 ], [ %.13.i.lcssa, %.._crit_edge7_crit_edge.i ]
DOALL:     	  %.0.i4 = phi i8* [ null, %.._crit_edge_crit_edge.i ], [ %.lcssa, %.._crit_edge_crit_edge4.i ]
DOALL:     	  %48 = icmp ne i8* %.0.i4, null
DOALL:     	  %51 = select i1 %48, i8* %49, i8* %50, !prof !46
DOALL:     	  br i1 %48, label %54, label %.._crit_edge_crit_edge, !prof !46
DOALL:     	  %55 = getelementptr [8 x i8], [8 x i8]* @.str.214, i64 0, i64 0
DOALL:     	  %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16
DOALL:     	  %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16
DOALL:     External nodes: 25
DOALL:     	  %3 = load i8*, i8** %2, align 8, !tbaa !31
DOALL:     	  br i1 %4, label %59, label %5, !prof !35
DOALL:     	  %6 = tail call i64 @strlen(i8* %3) #15
DOALL:     	  br i1 %exitcond2.i, label %.preheader.preheader.i, label %8, !prof !38
DOALL:     	  %9 = getelementptr inbounds [256 x i64], [256 x i64]* @table, i64 0, i64 %.0.i
DOALL:     	  br i1 %exitcond.i, label %init_search.exit, label %11, !prof !39
DOALL:     	  %13 = add i64 %6, %12
DOALL:     	  %14 = getelementptr inbounds i8, i8* %3, i64 %.1.i
DOALL:     	  %20 = load i8*, i8** %19, align 8, !tbaa !31
DOALL:     	  %23 = tail call i64 @strlen(i8* %20) #15
DOALL:     	  br label %strsearch.exit
DOALL:     	  br label %.preheader.i3
DOALL:     	  br label %._crit_edge6.i
DOALL:     	  br label %._crit_edge6.i
DOALL:     	  br label %.preheader.i3
DOALL:     	  br label %._crit_edge7.i
DOALL:     	  br label %strsearch.exit
DOALL:     	  br label %._crit_edge7.i
DOALL:     	  br label %25
DOALL:     	  %49 = getelementptr [1 x i8], [1 x i8]* @.str.212, i64 0, i64 0
DOALL:     	  %50 = getelementptr [5 x i8], [5 x i8]* @.str.213, i64 0, i64 0
DOALL:     	  %52 = getelementptr [18 x i8], [18 x i8]* @.str.211, i64 0, i64 0
DOALL:     	  br label %._crit_edge
DOALL:     	  br label %._crit_edge
DOALL:     	  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !31
DOALL:     Edges: 221
DOALL:     Loop-carried data dependences
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %30 = load i8, i8* %29, align 1, !tbaa !40 via memory
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %15 = load i8, i8* %14, align 1, !tbaa !40 via memory
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         store i64 %6, i64* @len, align 8, !tbaa !36 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         store i64 %6, i64* @len, align 8, !tbaa !36 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         store i64 %6, i64* @len, align 8, !tbaa !36 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         store i64 %6, i64* %9, align 8, !tbaa !36 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         store i64 %6, i64* %9, align 8, !tbaa !36 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         store i64 %6, i64* %9, align 8, !tbaa !36 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %15 = load i8, i8* %14, align 1, !tbaa !40 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %15 = load i8, i8* %14, align 1, !tbaa !40 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %15 = load i8, i8* %14, align 1, !tbaa !40 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         store i64 %13, i64* %17, align 8, !tbaa !36 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         store i64 %13, i64* %17, align 8, !tbaa !36 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         store i64 %13, i64* %17, align 8, !tbaa !36 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         store i8* %3, i8** @findme, align 8, !tbaa !31 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         store i8* %3, i8** @findme, align 8, !tbaa !31 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         store i8* %3, i8** @findme, align 8, !tbaa !31 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         %21 = load i64, i64* @len, align 8, !tbaa !36 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %21 = load i64, i64* @len, align 8, !tbaa !36 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         %24 = load i8*, i8** @findme, align 8 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %24 = load i8*, i8** @findme, align 8 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         %30 = load i8, i8* %29, align 1, !tbaa !40 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %30 = load i8, i8* %29, align 1, !tbaa !40 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %30 = load i8, i8* %29, align 1, !tbaa !40 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %33 = load i64, i64* %32, align 8, !tbaa !36 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %33 = load i64, i64* %32, align 8, !tbaa !36 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %15 = load i8, i8* %14, align 1, !tbaa !40 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %30 = load i8, i8* %29, align 1, !tbaa !40 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %15 = load i8, i8* %14, align 1, !tbaa !40 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %30 = load i8, i8* %29, align 1, !tbaa !40 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %6 = tail call i64 @strlen(i8* %3) #15
DOALL:     External nodes: 9
DOALL:     	  %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16
DOALL:     	  %3 = load i8*, i8** %2, align 8, !tbaa !31
DOALL:     	  br i1 %4, label %59, label %5, !prof !35
DOALL:     	  store i64 %6, i64* @len, align 8, !tbaa !36
DOALL:     	  store i64 %6, i64* %9, align 8, !tbaa !36
DOALL:     	  %exitcond.i = icmp eq i64 %.1.i, %6
DOALL:     	  %13 = add i64 %6, %12
DOALL:     	  %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16
DOALL:     	  %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16
DOALL:     Edges: 9
DOALL:     Loop-carried data dependences
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %23 = tail call i64 @strlen(i8* %20) #15
DOALL:     External nodes: 7
DOALL:     	  %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16
DOALL:     	  br i1 %4, label %59, label %5, !prof !35
DOALL:     	  %20 = load i8*, i8** %19, align 8, !tbaa !31
DOALL:     	  %26 = icmp ult i64 %.02.i, %23
DOALL:     	  %27 = icmp ult i64 %.13.i, %23
DOALL:     	  %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16
DOALL:     	  %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16
DOALL:     Edges: 7
DOALL:     Loop-carried data dependences
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 49
DOALL:     	  %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16
DOALL:     	  store i64 %6, i64* @len, align 8, !tbaa !36
DOALL:     	  store i64 %6, i64* %9, align 8, !tbaa !36
DOALL:     	  %15 = load i8, i8* %14, align 1, !tbaa !40
DOALL:     	  %16 = zext i8 %15 to i64
DOALL:     	  %17 = getelementptr inbounds [256 x i64], [256 x i64]* @table, i64 0, i64 %16
DOALL:     	  store i64 %13, i64* %17, align 8, !tbaa !36
DOALL:     	  store i8* %3, i8** @findme, align 8, !tbaa !31
DOALL:     	  %21 = load i64, i64* @len, align 8, !tbaa !36
DOALL:     	  %22 = add i64 %21, -1
DOALL:     	  %24 = load i8*, i8** @findme, align 8
DOALL:     	  %.02.i = phi i64 [ %22, %init_search.exit ], [ %.24.i, %._crit_edge7.i ]
DOALL:     	  %.01.i = phi i64 [ undef, %init_search.exit ], [ %.2.i.lcssa, %._crit_edge7.i ]
DOALL:     	  %26 = icmp ult i64 %.02.i, %23
DOALL:     	  br i1 %26, label %.preheader.preheader.i1, label %.._crit_edge_crit_edge.i, !prof !41
DOALL:     	  %.13.i = phi i64 [ %37, %36 ], [ %.02.i, %.preheader.preheader.i1 ]
DOALL:     	  %.1.i2 = phi i64 [ %.2.i, %36 ], [ %.01.i, %.preheader.preheader.i1 ]
DOALL:     	  %27 = icmp ult i64 %.13.i, %23
DOALL:     	  br i1 %27, label %28, label %.preheader.._crit_edge6_crit_edge.i, !prof !42
DOALL:     	  %29 = getelementptr inbounds i8, i8* %20, i64 %.13.i
DOALL:     	  %30 = load i8, i8* %29, align 1, !tbaa !40
DOALL:     	  %31 = zext i8 %30 to i64
DOALL:     	  %32 = getelementptr inbounds [256 x i64], [256 x i64]* @table, i64 0, i64 %31
DOALL:     	  %33 = load i64, i64* %32, align 8, !tbaa !36
DOALL:     	  %34 = icmp ne i64 %33, 0
DOALL:     	  %.2.i = phi i64 [ %33, %28 ], [ %.1.i2, %.preheader.._crit_edge6_crit_edge.i ]
DOALL:     	  %35 = phi i1 [ %34, %28 ], [ false, %.preheader.._crit_edge6_crit_edge.i ]
DOALL:     	  br i1 %35, label %36, label %38, !prof !43
DOALL:     	  %37 = add i64 %.13.i, %.2.i
DOALL:     	  %.2.i.lcssa = phi i64 [ %.2.i, %._crit_edge6.i ]
DOALL:     	  %.13.i.lcssa = phi i64 [ %.13.i, %._crit_edge6.i ]
DOALL:     	  %39 = icmp eq i64 %.2.i.lcssa, 0
DOALL:     	  br i1 %39, label %40, label %.._crit_edge7_crit_edge.i, !prof !44
DOALL:     	  %41 = sub i64 %.13.i.lcssa, %21
DOALL:     	  %42 = add i64 %41, 1
DOALL:     	  %43 = getelementptr inbounds i8, i8* %20, i64 %42
DOALL:     	  %44 = tail call i32 @strncmp(i8* %24, i8* %43, i64 %21) #15
DOALL:     	  %45 = icmp eq i32 %44, 0
DOALL:     	  br i1 %45, label %.._crit_edge_crit_edge4.i, label %46, !prof !45
DOALL:     	  %.lcssa = phi i8* [ %43, %40 ]
DOALL:     	  %47 = add i64 %.13.i.lcssa, 1
DOALL:     	  %.24.i = phi i64 [ %47, %46 ], [ %.13.i.lcssa, %.._crit_edge7_crit_edge.i ]
DOALL:     	  %.0.i4 = phi i8* [ null, %.._crit_edge_crit_edge.i ], [ %.lcssa, %.._crit_edge_crit_edge4.i ]
DOALL:     	  %48 = icmp ne i8* %.0.i4, null
DOALL:     	  %51 = select i1 %48, i8* %49, i8* %50, !prof !46
DOALL:     	  br i1 %48, label %54, label %.._crit_edge_crit_edge, !prof !46
DOALL:     	  %55 = getelementptr [8 x i8], [8 x i8]* @.str.214, i64 0, i64 0
DOALL:     	  %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16
DOALL:     	  %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16
DOALL:     External nodes: 25
DOALL:     	  %3 = load i8*, i8** %2, align 8, !tbaa !31
DOALL:     	  br i1 %4, label %59, label %5, !prof !35
DOALL:     	  %6 = tail call i64 @strlen(i8* %3) #15
DOALL:     	  br i1 %exitcond2.i, label %.preheader.preheader.i, label %8, !prof !38
DOALL:     	  %9 = getelementptr inbounds [256 x i64], [256 x i64]* @table, i64 0, i64 %.0.i
DOALL:     	  br i1 %exitcond.i, label %init_search.exit, label %11, !prof !39
DOALL:     	  %13 = add i64 %6, %12
DOALL:     	  %14 = getelementptr inbounds i8, i8* %3, i64 %.1.i
DOALL:     	  %20 = load i8*, i8** %19, align 8, !tbaa !31
DOALL:     	  %23 = tail call i64 @strlen(i8* %20) #15
DOALL:     	  br label %strsearch.exit
DOALL:     	  br label %.preheader.i3
DOALL:     	  br label %._crit_edge6.i
DOALL:     	  br label %._crit_edge6.i
DOALL:     	  br label %.preheader.i3
DOALL:     	  br label %._crit_edge7.i
DOALL:     	  br label %strsearch.exit
DOALL:     	  br label %._crit_edge7.i
DOALL:     	  br label %25
DOALL:     	  %49 = getelementptr [1 x i8], [1 x i8]* @.str.212, i64 0, i64 0
DOALL:     	  %50 = getelementptr [5 x i8], [5 x i8]* @.str.213, i64 0, i64 0
DOALL:     	  %52 = getelementptr [18 x i8], [18 x i8]* @.str.211, i64 0, i64 0
DOALL:     	  br label %._crit_edge
DOALL:     	  br label %._crit_edge
DOALL:     	  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !31
DOALL:     Edges: 215
DOALL:     Loop-carried data dependences
DOALL:         store i64 %6, i64* @len, align 8, !tbaa !36 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         store i64 %6, i64* @len, align 8, !tbaa !36 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         store i64 %6, i64* @len, align 8, !tbaa !36 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         %15 = load i8, i8* %14, align 1, !tbaa !40 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %15 = load i8, i8* %14, align 1, !tbaa !40 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %15 = load i8, i8* %14, align 1, !tbaa !40 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %21 = load i64, i64* @len, align 8, !tbaa !36 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %21 = load i64, i64* @len, align 8, !tbaa !36 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         %33 = load i64, i64* %32, align 8, !tbaa !36 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %33 = load i64, i64* %32, align 8, !tbaa !36 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         store i64 %6, i64* %9, align 8, !tbaa !36 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         store i64 %6, i64* %9, align 8, !tbaa !36 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         store i64 %6, i64* %9, align 8, !tbaa !36 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %30 = load i8, i8* %29, align 1, !tbaa !40 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %15 = load i8, i8* %14, align 1, !tbaa !40 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 --->   store i64 %6, i64* @len, align 8, !tbaa !36 via memory
DOALL:         store i64 %13, i64* %17, align 8, !tbaa !36 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         store i64 %13, i64* %17, align 8, !tbaa !36 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         store i64 %13, i64* %17, align 8, !tbaa !36 --->   store i64 %6, i64* %9, align 8, !tbaa !36 via memory
DOALL:         %24 = load i8*, i8** @findme, align 8 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %24 = load i8*, i8** @findme, align 8 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %15 = load i8, i8* %14, align 1, !tbaa !40 via memory
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %30 = load i8, i8* %29, align 1, !tbaa !40 via memory
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %30 = load i8, i8* %29, align 1, !tbaa !40 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %30 = load i8, i8* %29, align 1, !tbaa !40 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %30 = load i8, i8* %29, align 1, !tbaa !40 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %15 = load i8, i8* %14, align 1, !tbaa !40 via memory
DOALL:         %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 --->   %30 = load i8, i8* %29, align 1, !tbaa !40 via memory
DOALL:         store i8* %3, i8** @findme, align 8, !tbaa !31 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         store i8* %3, i8** @findme, align 8, !tbaa !31 --->   store i8* %3, i8** @findme, align 8, !tbaa !31 via memory
DOALL:         store i8* %3, i8** @findme, align 8, !tbaa !31 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %6 = tail call i64 @strlen(i8* %3) #15
DOALL:     External nodes: 9
DOALL:     	  %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16
DOALL:     	  %3 = load i8*, i8** %2, align 8, !tbaa !31
DOALL:     	  br i1 %4, label %59, label %5, !prof !35
DOALL:     	  store i64 %6, i64* @len, align 8, !tbaa !36
DOALL:     	  store i64 %6, i64* %9, align 8, !tbaa !36
DOALL:     	  %exitcond.i = icmp eq i64 %.1.i, %6
DOALL:     	  %13 = add i64 %6, %12
DOALL:     	  %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16
DOALL:     	  %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16
DOALL:     Edges: 9
DOALL:     Loop-carried data dependences
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %6 = tail call i64 @strlen(i8* %3) #15 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %23 = tail call i64 @strlen(i8* %20) #15
DOALL:     External nodes: 7
DOALL:     	  %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16
DOALL:     	  br i1 %4, label %59, label %5, !prof !35
DOALL:     	  %20 = load i8*, i8** %19, align 8, !tbaa !31
DOALL:     	  %26 = icmp ult i64 %.02.i, %23
DOALL:     	  %27 = icmp ult i64 %.13.i, %23
DOALL:     	  %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16
DOALL:     	  %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16
DOALL:     Edges: 7
DOALL:     Loop-carried data dependences
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %56 = tail call i32 (i8*, ...) @printf(i8* %55, i8* nonnull %.0.i4) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16 via memory
DOALL:         %23 = tail call i64 @strlen(i8* %20) #15 --->   %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 6
DOALL:     	  %indvars.iv = phi i64 [ %indvars.iv.next, %._crit_edge ], [ 0, %.preheader.preheader ]
DOALL:     	  %2 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv
DOALL:     	  %3 = load i8*, i8** %2, align 8, !tbaa !31
DOALL:     	  %4 = icmp eq i8* %3, null
DOALL:     	  br i1 %4, label %59, label %5, !prof !35
DOALL:     	  %indvars.iv.next = add nuw i64 %indvars.iv, 1
DOALL:     External nodes: 34
DOALL:     	  %53 = tail call i32 (i8*, ...) @printf(i8* %52, i8* nonnull %3, i8* %51, i8* %20) #16
DOALL:     	  %6 = tail call i64 @strlen(i8* %3) #15
DOALL:     	  store i64 %6, i64* @len, align 8, !tbaa !36
DOALL:     	  br label %7
DOALL:     	  %.0.i = phi i64 [ 0, %5 ], [ %10, %8 ]
DOALL:     	  %exitcond2.i = icmp eq i64 %.0.i, 256
DOALL:     	  br i1 %exitcond2.i, label %.preheader.preheader.i, label %8, !prof !38
DOALL:     	  br label %.preheader.i
DOALL:     	  %.1.i = phi i64 [ %18, %11 ], [ 0, %.preheader.preheader.i ]
DOALL:     	  %exitcond.i = icmp eq i64 %.1.i, %6
DOALL:     	  br i1 %exitcond.i, label %init_search.exit, label %11, !prof !39
DOALL:     	  %14 = getelementptr inbounds i8, i8* %3, i64 %.1.i
DOALL:     	  store i8* %3, i8** @findme, align 8, !tbaa !31
DOALL:     	  %19 = getelementptr inbounds [1332 x i8*], [1332 x i8*]* @__const.main.search_strings, i64 0, i64 %indvars.iv
DOALL:     	  %20 = load i8*, i8** %19, align 8, !tbaa !31
DOALL:     	  %21 = load i64, i64* @len, align 8, !tbaa !36
DOALL:     	  %22 = add i64 %21, -1
DOALL:     	  %23 = tail call i64 @strlen(i8* %20) #15
DOALL:     	  %24 = load i8*, i8** @findme, align 8
DOALL:     	  br label %25
DOALL:     	  %.02.i = phi i64 [ %22, %init_search.exit ], [ %.24.i, %._crit_edge7.i ]
DOALL:     	  %.01.i = phi i64 [ undef, %init_search.exit ], [ %.2.i.lcssa, %._crit_edge7.i ]
DOALL:     	  %26 = icmp ult i64 %.02.i, %23
DOALL:     	  br i1 %26, label %.preheader.preheader.i1, label %.._crit_edge_crit_edge.i, !prof !41
DOALL:     	  %.0.i4 = phi i8* [ null, %.._crit_edge_crit_edge.i ], [ %.lcssa, %.._crit_edge_crit_edge4.i ]
DOALL:     	  %48 = icmp ne i8* %.0.i4, null
DOALL:     	  %49 = getelementptr [1 x i8], [1 x i8]* @.str.212, i64 0, i64 0
DOALL:     	  %50 = getelementptr [5 x i8], [5 x i8]* @.str.213, i64 0, i64 0
DOALL:     	  %51 = select i1 %48, i8* %49, i8* %50, !prof !46
DOALL:     	  %52 = getelementptr [18 x i8], [18 x i8]* @.str.211, i64 0, i64 0
DOALL:     	  br i1 %48, label %54, label %.._crit_edge_crit_edge, !prof !46
DOALL:     	  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !31
DOALL:     	  %58 = tail call i32 @putc(i32 10, %struct._IO_FILE* %57) #16
DOALL:     	  br label %.preheader
DOALL:     Edges: 50
DOALL:     Loop-carried data dependences
DOALL:         %indvars.iv.next = add nuw i64 %indvars.iv, 1 --->   %indvars.iv = phi i64 [ %indvars.iv.next, %._crit_edge ], [ 0, %.preheader.preheader ] via variable
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   More than 1 loop exit blocks
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   No remaining calls need to be inlined due to loop-carried data dependences
Inliner:   The code has not been modified
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (5.025195e+01%)
Noelle:     Loop "  %2 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (5.025183e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256" (4.625459e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %6" (1.319072e+00%)
Noelle:     Loop "  %26 = icmp ult i64 %.02.i, %23" (1.820457e+00%)
Noelle:     Loop "  %27 = icmp ult i64 %.13.i, %23" (1.411584e+00%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (4.623223e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (1.314203e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (1.821270e+00%)
Noelle:     Loop "  %8 = icmp ult i64 %.13, %4" (1.412379e+00%)
Noelle:  Function "tolower"
Noelle:  Function "putchar"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %19" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %32" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (5.025195e+01%)
Noelle:     Loop "  %2 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (5.025183e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256" (4.625459e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %6" (1.319072e+00%)
Noelle:     Loop "  %26 = icmp ult i64 %.02.i, %23" (1.820457e+00%)
Noelle:     Loop "  %27 = icmp ult i64 %.13.i, %23" (1.411584e+00%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (4.623223e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (1.314203e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (1.821270e+00%)
Noelle:     Loop "  %8 = icmp ult i64 %.13, %4" (1.412379e+00%)
Noelle:  Function "tolower"
Noelle:  Function "putchar"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %19" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %32" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: Inliner: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.3SNtgQCaoP (.ll version is /tmp/tmp.DcK8YV2kOh)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.6CYr7OunFG (.ll version is /tmp/tmp.KQr9GcE0CF)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.3SNtgQCaoP -o /tmp/tmp.6CYr7OunFG
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.3SNtgQCaoP -o /tmp/tmp.6CYr7OunFG
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.3SNtgQCaoP -o /tmp/tmp.6CYr7OunFG
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.3SNtgQCaoP -o /tmp/tmp.6CYr7OunFG
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       strlen
DeadFunctionEliminator:       bmha_init
DeadFunctionEliminator:       bmhi_init
DeadFunctionEliminator:       realloc
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       bhmi_cleanup
DeadFunctionEliminator:       atexit
DeadFunctionEliminator:       __ctype_toupper_loc
DeadFunctionEliminator:       __ctype_tolower_loc
DeadFunctionEliminator:       llvm.is.constant.i32
DeadFunctionEliminator:       tolower
DeadFunctionEliminator:       free
DeadFunctionEliminator:       bmhi_search
DeadFunctionEliminator:       bmh_init
DeadFunctionEliminator:       init_search
DeadFunctionEliminator:       strsearch
DeadFunctionEliminator:       strncmp
DeadFunctionEliminator:       main
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       putc
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (5.022629e+01%)
Noelle:     Loop "  %2 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (5.022618e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256" (4.627844e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %6" (1.319753e+00%)
Noelle:     Loop "  %24 = icmp ult i64 %.02.i, %22" (1.821396e+00%)
Noelle:     Loop "  %25 = icmp ult i64 %.13.i, %22" (1.412312e+00%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (4.625607e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (1.314880e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (1.822210e+00%)
Noelle:     Loop "  %8 = icmp ult i64 %.13, %4" (1.413107e+00%)
Noelle:  Function "tolower"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %19" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %32" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (5.022629e+01%)
Noelle:     Loop "  %2 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (5.022618e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256" (4.627844e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %6" (1.319753e+00%)
Noelle:     Loop "  %24 = icmp ult i64 %.02.i, %22" (1.821396e+00%)
Noelle:     Loop "  %25 = icmp ult i64 %.13.i, %22" (1.412312e+00%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (4.625607e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (1.314880e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (1.822210e+00%)
Noelle:     Loop "  %8 = icmp ult i64 %.13, %4" (1.413107e+00%)
Noelle:  Function "tolower"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %19" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %32" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-enable baseline_pre.bc baseline_pre.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: Enablers: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.LPOyKTrAiS (.ll version is /tmp/tmp.MtrNiQQlNG)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.8JZtqaYSxq (.ll version is /tmp/tmp.iFky4N2iNa)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.LPOyKTrAiS -o /tmp/tmp.8JZtqaYSxq
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.LPOyKTrAiS -o /tmp/tmp.8JZtqaYSxq
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.LPOyKTrAiS -o /tmp/tmp.8JZtqaYSxq
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.LPOyKTrAiS -o /tmp/tmp.8JZtqaYSxq
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.LPOyKTrAiS -o /tmp/tmp.8JZtqaYSxq
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (5.022629e+01%)
Noelle:     Loop "  %2 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (5.022618e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256" (4.627844e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %6" (1.319753e+00%)
Noelle:     Loop "  %24 = icmp ult i64 %.02.i, %22" (1.821396e+00%)
Noelle:     Loop "  %25 = icmp ult i64 %.13.i, %22" (1.412312e+00%)
EnablersManager:   Try to improve all 6 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %25 = icmp ult i64 %.13.i, %22
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %25 = icmp ult i64 %.13.i, %22"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %25, label %26, label %.preheader.i3.._crit_edge6.i_crit_edge, !prof !42
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %24 = icmp ult i64 %.02.i, %22
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %24 = icmp ult i64 %.02.i, %22"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %24, label %.preheader.i3.preheader, label %.strsearch.exit_crit_edge, !prof !41
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond.i = icmp eq i64 %.1.i, %6
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond.i = icmp eq i64 %.1.i, %6"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond.i, label %init_search.exit, label %11, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond2.i = icmp eq i64 %.0.i, 256
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond2.i, label %.preheader.i.preheader, label %8, !prof !38
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %2 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %2 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv"
LICM:     Invariant = "  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !31
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %53 = getelementptr [8 x i8], [8 x i8]* @.str.214, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %47 = getelementptr [1 x i8], [1 x i8]* @.str.212, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %48 = getelementptr [5 x i8], [5 x i8]* @.str.213, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %50 = getelementptr [18 x i8], [18 x i8]* @.str.211, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i32 %.0, 50000
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (5.022629e+01%)
Noelle:     Loop "  %2 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (5.022618e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256" (4.627844e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %6" (1.319753e+00%)
Noelle:     Loop "  %24 = icmp ult i64 %.02.i, %22" (1.821396e+00%)
Noelle:     Loop "  %25 = icmp ult i64 %.13.i, %22" (1.412312e+00%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (4.625607e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (1.314880e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (1.822210e+00%)
Noelle:     Loop "  %8 = icmp ult i64 %.13, %4" (1.413107e+00%)
Noelle:  Function "tolower"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %19" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %32" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (5.016518e+01%)
Noelle:     Loop "  %7 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (5.016496e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256" (4.633526e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %11" (1.321373e+00%)
Noelle:     Loop "  %29 = icmp ult i64 %.02.i, %27" (1.823632e+00%)
Noelle:     Loop "  %30 = icmp ult i64 %.13.i, %27" (1.414046e+00%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (4.631286e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (1.316495e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (1.824447e+00%)
Noelle:     Loop "  %8 = icmp ult i64 %.13, %4" (1.414842e+00%)
Noelle:  Function "tolower"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %19" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %32" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
NOELLE: FixedPoint:       There are 0 different instructions and -5 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.8JZtqaYSxq -o /tmp/tmp.8JZtqaYSxq
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.8JZtqaYSxq -o /tmp/tmp.8JZtqaYSxq
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.LPOyKTrAiS -o /tmp/tmp.8JZtqaYSxq
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.LPOyKTrAiS -o /tmp/tmp.8JZtqaYSxq
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.LPOyKTrAiS -o /tmp/tmp.8JZtqaYSxq
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (5.016518e+01%)
Noelle:     Loop "  %7 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (5.016496e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256" (4.633526e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %11" (1.321373e+00%)
Noelle:     Loop "  %29 = icmp ult i64 %.02.i, %27" (1.823632e+00%)
Noelle:     Loop "  %30 = icmp ult i64 %.13.i, %27" (1.414046e+00%)
EnablersManager:   Try to improve all 6 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %30 = icmp ult i64 %.13.i, %27
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %30 = icmp ult i64 %.13.i, %27"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %30, label %31, label %.preheader.i3.._crit_edge6.i_crit_edge, !prof !42
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %29 = icmp ult i64 %.02.i, %27
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %29 = icmp ult i64 %.02.i, %27"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %29, label %.preheader.i3.preheader, label %.strsearch.exit_crit_edge, !prof !41
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond.i = icmp eq i64 %.1.i, %11
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond.i = icmp eq i64 %.1.i, %11"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond.i, label %init_search.exit, label %16, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond2.i = icmp eq i64 %.0.i, 256
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond2.i, label %.preheader.i.preheader, label %13, !prof !38
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %7 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %7 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %9, label %57, label %10, !prof !35
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i32 %.0, 50000
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i32 %.0, 50000"
LICM:     Invariant = "  %2 = getelementptr [1 x i8], [1 x i8]* @.str.212, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %3 = getelementptr [5 x i8], [5 x i8]* @.str.213, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %4 = getelementptr [18 x i8], [18 x i8]* @.str.211, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %5 = getelementptr [8 x i8], [8 x i8]* @.str.214, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !31
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (5.016518e+01%)
Noelle:     Loop "  %7 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (5.016496e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256" (4.633526e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %11" (1.321373e+00%)
Noelle:     Loop "  %29 = icmp ult i64 %.02.i, %27" (1.823632e+00%)
Noelle:     Loop "  %30 = icmp ult i64 %.13.i, %27" (1.414046e+00%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (4.631286e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (1.316495e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (1.824447e+00%)
Noelle:     Loop "  %8 = icmp ult i64 %.13, %4" (1.414842e+00%)
Noelle:  Function "tolower"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %19" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %32" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (5.016513e+01%)
Noelle:     Loop "  %7 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (5.016501e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256" (4.633531e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %11" (1.321374e+00%)
Noelle:     Loop "  %29 = icmp ult i64 %.02.i, %27" (1.823634e+00%)
Noelle:     Loop "  %30 = icmp ult i64 %.13.i, %27" (1.414047e+00%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (4.631291e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (1.316496e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (1.824449e+00%)
Noelle:     Loop "  %8 = icmp ult i64 %.13, %4" (1.414844e+00%)
Noelle:  Function "tolower"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %19" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %32" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
NOELLE: FixedPoint:       There are 0 different instructions and -5 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.8JZtqaYSxq -o /tmp/tmp.8JZtqaYSxq
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.8JZtqaYSxq -o /tmp/tmp.8JZtqaYSxq
NOELLE: FixedPoint:     Invocation 2
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.LPOyKTrAiS -o /tmp/tmp.8JZtqaYSxq
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.LPOyKTrAiS -o /tmp/tmp.8JZtqaYSxq
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.LPOyKTrAiS -o /tmp/tmp.8JZtqaYSxq
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (5.016513e+01%)
Noelle:     Loop "  %7 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (5.016501e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256" (4.633531e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %11" (1.321374e+00%)
Noelle:     Loop "  %29 = icmp ult i64 %.02.i, %27" (1.823634e+00%)
Noelle:     Loop "  %30 = icmp ult i64 %.13.i, %27" (1.414047e+00%)
EnablersManager:   Try to improve all 6 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond2.i = icmp eq i64 %.0.i, 256
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond2.i, label %.preheader.i.preheader, label %13, !prof !38
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %30 = icmp ult i64 %.13.i, %27
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %30 = icmp ult i64 %.13.i, %27"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %30, label %31, label %.preheader.i3.._crit_edge6.i_crit_edge, !prof !42
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %29 = icmp ult i64 %.02.i, %27
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %29 = icmp ult i64 %.02.i, %27"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %29, label %.preheader.i3.preheader, label %.strsearch.exit_crit_edge, !prof !41
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond.i = icmp eq i64 %.1.i, %11
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond.i = icmp eq i64 %.1.i, %11"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond.i, label %init_search.exit, label %16, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %7 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %7 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %9, label %57, label %10, !prof !35
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i32 %.0, 50000
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i32 %.0, 50000"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %59, label %.preheader.preheader, !prof !34
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (5.016513e+01%)
Noelle:     Loop "  %7 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (5.016501e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256" (4.633531e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %11" (1.321374e+00%)
Noelle:     Loop "  %29 = icmp ult i64 %.02.i, %27" (1.823634e+00%)
Noelle:     Loop "  %30 = icmp ult i64 %.13.i, %27" (1.414047e+00%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (4.631291e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (1.316496e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (1.824449e+00%)
Noelle:     Loop "  %8 = icmp ult i64 %.13, %4" (1.414844e+00%)
Noelle:  Function "tolower"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %19" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %32" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000" (5.016513e+01%)
Noelle:     Loop "  %7 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv" (5.016501e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256" (4.633531e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %11" (1.321374e+00%)
Noelle:     Loop "  %29 = icmp ult i64 %.02.i, %27" (1.823634e+00%)
Noelle:     Loop "  %30 = icmp ult i64 %.13.i, %27" (1.414047e+00%)
Noelle:  Function "init_search"
Noelle:     Loop "  %exitcond2 = icmp eq i64 %.0, 256" (4.631291e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %.1, %2" (1.316496e+00%)
Noelle:  Function "strsearch"
Noelle:     Loop "  %7 = icmp ult i64 %.02, %4" (1.824449e+00%)
Noelle:     Loop "  %8 = icmp ult i64 %.13, %4" (1.414844e+00%)
Noelle:  Function "tolower"
Noelle:  Function "bmh_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmh_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 256" (0.000000e+00%)
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv3, %5" (0.000000e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %19" (0.000000e+00%)
Noelle:  Function "bmhi_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bhmi_cleanup"
Noelle:  Function "bmhi_init"
Noelle:     Loop "  %12 = load i32, i32* @patlen.1, align 4, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv7, 256" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv5, %32" (0.000000e+00%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %32" (0.000000e+00%)
Noelle:  Function "bmha_search"
Noelle:     Loop "  br label %._crit_edge10" (0.000000e+00%)
Noelle:     Loop "  %14 = sext i32 %.1 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "bmha_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv8, 256" (0.000000e+00%)
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv6, -1" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: Enablers: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true baseline_pre.bc -o baseline_pre.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata baseline_pre.bc -o baseline_pre.bc
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/search /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/search
Running: ./baseline_pre_prof > output_large.txt in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/MiBench/office/stringsearch
--------------------------------------------------------------------------------------
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/search
DONE
opt -pgo-test-profile-file=/tmp/tmp.vLrqGiLOgX -block-freq -pgo-instr-use baseline_pre.bc -o baseline_with_metadata.bc
noelle-load -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
PDGAnalysis: Construct PDG from Analysis
Embed PDG as metadata
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000, !noelle.pdg.inst.id !256" (1.000000e+02%)
Noelle:     Loop "  %3 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv, !noelle.pdg.inst.id !262" (9.999977e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256, !noelle.pdg.inst.id !271" (9.218718e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %7, !noelle.pdg.inst.id !280" (2.628962e+00%)
Noelle:     Loop "  %25 = icmp ult i64 %.02.i, %23, !noelle.pdg.inst.id !297" (3.628241e+00%)
Noelle:     Loop "  %26 = icmp ult i64 %.13.i, %23, !noelle.pdg.inst.id !305" (2.813341e+00%)
Noelle:  Function "tolower"
Noelle:  Disable "tolower" as cold function
Noelle:  Function "strsearch"
Noelle:  Disable "strsearch" as cold function
Noelle:  Function "init_search"
Noelle:  Disable "init_search" as cold function
Noelle:  Function "bmh_search"
Noelle:  Disable "bmh_search" as cold function
Noelle:  Function "bmh_init"
Noelle:  Disable "bmh_init" as cold function
Noelle:  Function "bmhi_search"
Noelle:  Disable "bmhi_search" as cold function
Noelle:  Function "bhmi_cleanup"
Noelle:  Disable "bhmi_cleanup" as cold function
Noelle:  Function "bmhi_init"
Noelle:  Disable "bmhi_init" as cold function
Noelle:  Function "bmha_search"
Noelle:  Disable "bmha_search" as cold function
Noelle:  Function "bmha_init"
Noelle:  Disable "bmha_init" as cold function
Planner:    There are 6 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:    Loop 25 has 1.795000e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 27 has 7.064640e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 28 has 5.302762e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 26 has 5.118919e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:  There are 1 loop nesting trees in the program
Planner:    ID: 23 (1)
Planner:      Function: "main"
Planner:      Loop: "  %exitcond = icmp eq i32 %.0, 50000, !noelle.pdg.inst.id !256"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.000000e+02 %
Planner:      Average instructions per invocation = 1.296780e+11 %
Planner:      Average iterations per invocation = 5.000000e+04 %
Planner:    
Planner:      ID: 24 (2)
Planner:        Function: "main"
Planner:        Loop: "  %3 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv, !noelle.pdg.inst.id !262"
Planner:        Loop nesting level: 2
Planner:        Hotness = 9.999977e+01 %
Planner:        Average instructions per invocation = 2.593554e+06 %
Planner:        Average iterations per invocation = 1.332995e+03 %
Planner:      
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 23
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %exitcond = icmp eq i32 %.0, 50000, !noelle.pdg.inst.id !256"
Planner: LoopSelector:      Coverage: 1.000000e+02%
Planner: LoopSelector:      Whole-program savings = 8.227332e+01%
Planner: LoopSelector:      Loop savings = 8.227332e+01%
Planner: LoopSelector:    Loop 24
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %3 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv, !noelle.pdg.inst.id !262"
Planner: LoopSelector:      Coverage: 9.999977e+01%
Planner: LoopSelector:      Whole-program savings = 8.227309e+01%
Planner: LoopSelector:      Loop savings = 8.227328e+01%
Planner: LoopSelector: End
Planner:   Maximum time saved = 8.227332e+01% (106690414256)
Planner:   Maximum time saved with DOALL only = 0.000000e+00% (0)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 50000, !noelle.pdg.inst.id !258" (1.000000e+02%)
Noelle:     Loop "  %3 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv, !noelle.pdg.inst.id !265" (9.999977e+01%)
Noelle:     Loop "  %exitcond2.i = icmp eq i64 %.0.i, 256, !noelle.pdg.inst.id !275" (9.218718e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %.1.i, %7, !noelle.pdg.inst.id !284" (2.628962e+00%)
Noelle:     Loop "  %25 = icmp ult i64 %.02.i, %23, !noelle.pdg.inst.id !301" (3.628241e+00%)
Noelle:     Loop "  %26 = icmp ult i64 %.13.i, %23, !noelle.pdg.inst.id !309" (2.813341e+00%)
Noelle:  Function "bmha_init"
Noelle:  Disable "bmha_init" as cold function
Noelle:  Function "bmha_search"
Noelle:  Disable "bmha_search" as cold function
Noelle:  Function "bmhi_init"
Noelle:  Disable "bmhi_init" as cold function
Noelle:  Function "bhmi_cleanup"
Noelle:  Disable "bhmi_cleanup" as cold function
Noelle:  Function "init_search"
Noelle:  Disable "init_search" as cold function
Noelle:  Function "strsearch"
Noelle:  Disable "strsearch" as cold function
Noelle:  Function "tolower"
Noelle:  Disable "tolower" as cold function
Noelle:  Function "bmhi_search"
Noelle:  Disable "bmhi_search" as cold function
Noelle:  Function "bmh_init"
Noelle:  Disable "bmh_init" as cold function
Noelle:  Function "bmh_search"
Noelle:  Disable "bmh_search" as cold function
Parallelizer:    There are 6 loops in the program we are going to consider
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 23 = "  %exitcond = icmp eq i32 %.0, 50000, !noelle.pdg.inst.id !258"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !252, !noelle.pdg.inst.id !76
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 24 = "  %3 = getelementptr inbounds [1333 x i8*], [1333 x i8*]* @__const.main.find_strings, i64 0, i64 %indvars.iv, !noelle.pdg.inst.id !265"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !252, !noelle.pdg.inst.id !76
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc search.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/search'
