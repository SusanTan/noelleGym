make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg'
./runEnablers.sh cjpeg cjpeg.bc large "-lm -lstdc++ -lpthread -ltermcap" -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg
The IR has already been transformed for enabling parallelization
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3536, !noelle.pdg.inst.id !166" (7.179032e+01%)
Noelle:  Function "encode_mcu_AC_refine"
Noelle:     Loop "  %40 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %38, !noelle.pdg.inst.id !6489" (5.986135e+00%)
Noelle:     Loop "  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %69, !noelle.pdg.inst.id !6529" (6.434918e+00%)
Noelle:     Loop "  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %6), !noelle.pdg.inst.id !6546" (9.731326e-03%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %129 = lshr i64 %127, 16, !noelle.pdg.inst.id !6599" (3.310658e-04%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %199 = icmp eq i32 %196, 0, !noelle.pdg.inst.id !6676" (3.328221e-03%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %212 = lshr i64 %210, 16, !noelle.pdg.inst.id !6695" (2.726549e-04%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %340 = lshr i64 %338, 16, !noelle.pdg.inst.id !6828" (1.702085e-02%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %416 = lshr i64 %414, 16, !noelle.pdg.inst.id !6907" (5.348385e-03%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %487 = icmp eq i32 %484, 0, !noelle.pdg.inst.id !6977" (2.083875e-01%)
Noelle:     Loop "  %500 = lshr i64 %498, 16, !noelle.pdg.inst.id !6996" (1.714804e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:  Function "encode_mcu_AC_first"
Noelle:     Loop "  %42 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %40, !noelle.pdg.inst.id !2767" (4.792309e+00%)
Noelle:     Loop "  %74 = load i32, i32* %33, align 8, !tbaa !2812, !noelle.pdg.inst.id !278" (8.888417e-04%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %118 = lshr i64 %116, 16, !noelle.pdg.inst.id !2864" (2.747108e-04%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %180 = ashr i32 %179, 1, !noelle.pdg.inst.id !2933" (2.103081e-01%)
Noelle:     Loop "  %233 = lshr i64 %231, 16, !noelle.pdg.inst.id !2986" (9.506832e-02%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %306 = lshr i64 %304, 16, !noelle.pdg.inst.id !3066" (4.571888e-02%)
Noelle:  Disable loop "16" as cold code
Noelle:  Function "rgb_ycc_convert"
Noelle:     Loop "  %26 = load i8**, i8*** %2, align 8, !tbaa !76, !noelle.pdg.inst.id !77" (3.935545e+00%)
Noelle:     Loop "  %39 = load i8, i8* %38, align 1, !tbaa !92, !noelle.pdg.inst.id !93" (3.935433e+00%)
Noelle:  Function "forward_DCT"
Noelle:     Loop "  %28 = zext i32 %27 to i64, !noelle.pdg.inst.id !216" (2.486168e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29, !noelle.pdg.inst.id !221" (6.072169e-01%)
Noelle:     Loop "  %77 = getelementptr inbounds i32, i32* %18, i64 %76, !noelle.pdg.inst.id !265" (1.864010e+00%)
Noelle:  Function "jpeg_fdct_islow"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !34, !noelle.pdg.inst.id !38" (1.079100e+00%)
Noelle:     Loop "  %95 = load i32, i32* %94, align 4, !tbaa !34, !noelle.pdg.inst.id !142" (1.100496e+00%)
Noelle:  Function "compress_output"
Noelle:     Loop "  %16 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %15, !noelle.pdg.inst.id !155" (2.039395e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %54 = icmp ult i32 %52, %51, !noelle.pdg.inst.id !204" (8.181533e-01%)
Noelle:     Loop "  %56 = load i32, i32* %8, align 4, !tbaa !145, !noelle.pdg.inst.id !88" (8.179893e-01%)
Noelle:     Loop "  %62 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %60, !noelle.pdg.inst.id !220" (6.427619e-01%)
Noelle:     Loop "  %131 = add nsw i64 %129, %53, !noelle.pdg.inst.id !320" (8.118708e-08%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  %137 = add i64 %136, %135, !noelle.pdg.inst.id !327" (5.492067e-08%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  %160 = getelementptr inbounds [64 x i16], [64 x i16]* %158, i64 1, !noelle.pdg.inst.id !354" (2.626641e-08%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  %103 = add nsw i64 %101, %53, !noelle.pdg.inst.id !284" (5.492067e-08%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %109 = add i64 %108, %107, !noelle.pdg.inst.id !291" (5.492067e-08%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %85 = sext i32 %84 to i64, !noelle.pdg.inst.id !250" (2.864014e-01%)
Noelle:     Loop "  %93 = getelementptr inbounds [64 x i16], [64 x i16]* %91, i64 1, !noelle.pdg.inst.id !259" (1.326729e-01%)
Noelle:  Function "emit_eobrun"
Noelle:     Loop "  %7 = ashr i32 %5, 1, !noelle.pdg.inst.id !1441" (3.276667e-02%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %68 = lshr i64 %66, 16, !noelle.pdg.inst.id !1518" (1.749602e-02%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %154 = lshr i64 %152, 16, !noelle.pdg.inst.id !1614" (1.792058e-03%)
Noelle:  Disable loop "37" as cold code
Noelle:     Loop "  %231 = icmp eq i32 %228, 0, !noelle.pdg.inst.id !1691" (5.123379e-01%)
Noelle:     Loop "  %246 = lshr i64 %244, 16, !noelle.pdg.inst.id !1710" (4.479996e-02%)
Noelle:  Disable loop "39" as cold code
Noelle:  Function "h2v2_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29, !noelle.pdg.inst.id !343" (0.000000e+00%)
Noelle:  Disable loop "40" as cold code
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59, !noelle.pdg.inst.id !376" (1.402865e-04%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %75 = or i64 %74, 1, !noelle.pdg.inst.id !400" (6.950073e-01%)
Noelle:     Loop "  %86 = load i8, i8* %84, align 1, !tbaa !347, !noelle.pdg.inst.id !114" (6.949175e-01%)
Noelle:  Function "encode_mcu_DC_first"
Noelle:     Loop "  %34 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %33, !noelle.pdg.inst.id !1566" (2.132140e-01%)
Noelle:     Loop "  %105 = lshr i64 %103, 16, !noelle.pdg.inst.id !1648" (9.250578e-03%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %183 = lshr i64 %181, 16, !noelle.pdg.inst.id !1734" (9.316102e-03%)
Noelle:  Disable loop "46" as cold code
Noelle:  Function "encode_mcu_DC_refine"
Noelle:  Disable "encode_mcu_DC_refine" as cold function
Noelle:  Function "compress_first_pass"
Noelle:  Disable "compress_first_pass" as cold function
Noelle:  Function "finish_pass_gather_phuff"
Noelle:  Disable "finish_pass_gather_phuff" as cold function
Noelle:  Function "jpeg_gen_optimal_table"
Noelle:  Disable "jpeg_gen_optimal_table" as cold function
Noelle:  Function "access_virt_barray"
Noelle:  Disable "access_virt_barray" as cold function
Noelle:  Function "pre_process_data"
Noelle:  Disable "pre_process_data" as cold function
Noelle:  Function "fullsize_downsample"
Noelle:  Disable "fullsize_downsample" as cold function
Noelle:  Function "sep_downsample"
Noelle:  Disable "sep_downsample" as cold function
Noelle:  Function "process_data_simple_main"
Noelle:  Disable "process_data_simple_main" as cold function
Noelle:  Function "jpeg_finish_compress"
Noelle:  Disable "jpeg_finish_compress" as cold function
Noelle:  Function "jcopy_sample_rows"
Noelle:  Disable "jcopy_sample_rows" as cold function
Noelle:  Function "get_raw_row"
Noelle:  Disable "get_raw_row" as cold function
Noelle:  Function "empty_output_buffer"
Noelle:  Disable "empty_output_buffer" as cold function
Noelle:  Function "start_pass_phuff"
Noelle:  Disable "start_pass_phuff" as cold function
Noelle:  Function "jpeg_make_c_derived_tbl"
Noelle:  Disable "jpeg_make_c_derived_tbl" as cold function
Noelle:  Function "write_scan_header"
Noelle:  Disable "write_scan_header" as cold function
Noelle:  Function "realize_virt_arrays"
Noelle:  Disable "realize_virt_arrays" as cold function
Noelle:  Function "emit_dht"
Noelle:  Disable "emit_dht" as cold function
Noelle:  Function "rgb_ycc_start"
Noelle:  Disable "rgb_ycc_start" as cold function
Noelle:  Function "jpeg_start_compress"
Noelle:  Disable "jpeg_start_compress" as cold function
Noelle:  Function "jinit_compress_master"
Noelle:  Disable "jinit_compress_master" as cold function
Noelle:  Function "jinit_c_master_control"
Noelle:  Disable "jinit_c_master_control" as cold function
Noelle:  Function "parse_switches"
Noelle:  Disable "parse_switches" as cold function
Noelle:  Function "write_frame_header"
Noelle:  Disable "write_frame_header" as cold function
Noelle:  Function "jpeg_set_linear_quality"
Noelle:  Disable "jpeg_set_linear_quality" as cold function
Noelle:  Function "emit_dqt"
Noelle:  Disable "emit_dqt" as cold function
Noelle:  Function "keymatch"
Noelle:  Disable "keymatch" as cold function
Noelle:  Function "jpeg_set_defaults"
Noelle:  Disable "jpeg_set_defaults" as cold function
Noelle:  Function "prepare_for_pass"
Noelle:  Disable "prepare_for_pass" as cold function
Noelle:  Function "jpeg_set_quality"
Noelle:  Disable "jpeg_set_quality" as cold function
Noelle:  Function "alloc_small"
Noelle:  Disable "alloc_small" as cold function
Noelle:  Function "finish_pass_phuff"
Noelle:  Disable "finish_pass_phuff" as cold function
Noelle:  Function "alloc_sarray"
Noelle:  Disable "alloc_sarray" as cold function
Noelle:  Function "per_scan_setup"
Noelle:  Disable "per_scan_setup" as cold function
Noelle:  Function "start_pass_coef"
Noelle:  Disable "start_pass_coef" as cold function
Noelle:  Function "select_scan_parameters"
Noelle:  Disable "select_scan_parameters" as cold function
Noelle:  Function "finish_pass_master"
Noelle:  Disable "finish_pass_master" as cold function
Noelle:  Function "flush_bits"
Noelle:  Disable "flush_bits" as cold function
Noelle:  Function "start_pass_fdctmgr"
Noelle:  Disable "start_pass_fdctmgr" as cold function
Noelle:  Function "free_pool"
Noelle:  Disable "free_pool" as cold function
Noelle:  Function "emit_sof"
Noelle:  Disable "emit_sof" as cold function
Noelle:  Function "start_input_ppm"
Noelle:  Disable "start_input_ppm" as cold function
Noelle:  Function "self_destruct"
Noelle:  Disable "self_destruct" as cold function
Noelle:  Function "write_file_header"
Noelle:  Disable "write_file_header" as cold function
Noelle:  Function "alloc_large"
Noelle:  Disable "alloc_large" as cold function
Noelle:  Function "request_virt_barray"
Noelle:  Disable "request_virt_barray" as cold function
Noelle:  Function "read_pbm_integer"
Noelle:  Disable "read_pbm_integer" as cold function
Noelle:  Function "jinit_c_coef_controller"
Noelle:  Disable "jinit_c_coef_controller" as cold function
Noelle:  Function "jinit_downsampler"
Noelle:  Disable "jinit_downsampler" as cold function
Noelle:  Function "jpeg_simple_progression"
Noelle:  Disable "jpeg_simple_progression" as cold function
Noelle:  Function "jinit_c_prep_controller"
Noelle:  Disable "jinit_c_prep_controller" as cold function
Noelle:  Function "jpeg_default_colorspace"
Noelle:  Disable "jpeg_default_colorspace" as cold function
Noelle:  Function "jpeg_CreateCompress"
Noelle:  Disable "jpeg_CreateCompress" as cold function
Noelle:  Function "jinit_c_main_controller"
Noelle:  Disable "jinit_c_main_controller" as cold function
Noelle:  Function "jpeg_suppress_tables"
Noelle:  Disable "jpeg_suppress_tables" as cold function
Noelle:  Function "jdiv_round_up"
Noelle:  Disable "jdiv_round_up" as cold function
Noelle:  Function "jinit_memory_mgr"
Noelle:  Disable "jinit_memory_mgr" as cold function
Noelle:  Function "jinit_color_converter"
Noelle:  Disable "jinit_color_converter" as cold function
Noelle:  Function "jpeg_alloc_huff_table"
Noelle:  Disable "jpeg_alloc_huff_table" as cold function
Noelle:  Function "jround_up"
Noelle:  Disable "jround_up" as cold function
Noelle:  Function "jinit_forward_dct"
Noelle:  Disable "jinit_forward_dct" as cold function
Noelle:  Function "write_file_trailer"
Noelle:  Disable "write_file_trailer" as cold function
Noelle:  Function "jpeg_std_error"
Noelle:  Disable "jpeg_std_error" as cold function
Noelle:  Function "term_destination"
Noelle:  Disable "term_destination" as cold function
Noelle:  Function "jpeg_stdio_dest"
Noelle:  Disable "jpeg_stdio_dest" as cold function
Noelle:  Function "start_pass_main"
Noelle:  Disable "start_pass_main" as cold function
Noelle:  Function "jinit_marker_writer"
Noelle:  Disable "jinit_marker_writer" as cold function
Noelle:  Function "start_pass_prep"
Noelle:  Disable "start_pass_prep" as cold function
Noelle:  Function "jpeg_alloc_quant_table"
Noelle:  Disable "jpeg_alloc_quant_table" as cold function
Noelle:  Function "jpeg_free_large"
Noelle:  Disable "jpeg_free_large" as cold function
Noelle:  Function "jpeg_get_large"
Noelle:  Disable "jpeg_get_large" as cold function
Noelle:  Function "jinit_phuff_encoder"
Noelle:  Disable "jinit_phuff_encoder" as cold function
Noelle:  Function "jpeg_destroy_compress"
Noelle:  Disable "jpeg_destroy_compress" as cold function
Noelle:  Function "init_destination"
Noelle:  Disable "init_destination" as cold function
Noelle:  Function "jpeg_free_small"
Noelle:  Disable "jpeg_free_small" as cold function
Noelle:  Function "jpeg_get_small"
Noelle:  Disable "jpeg_get_small" as cold function
Noelle:  Function "jpeg_destroy"
Noelle:  Disable "jpeg_destroy" as cold function
Noelle:  Function "jinit_read_ppm"
Noelle:  Disable "jinit_read_ppm" as cold function
Noelle:  Function "jpeg_abort"
Noelle:  Disable "jpeg_abort" as cold function
Noelle:  Function "emit_message"
Noelle:  Disable "emit_message" as cold function
Noelle:  Function "reset_error_mgr"
Noelle:  Disable "reset_error_mgr" as cold function
Noelle:  Function "finish_input_ppm"
Noelle:  Disable "finish_input_ppm" as cold function
Noelle:  Function "jpeg_mem_available"
Noelle:  Disable "jpeg_mem_available" as cold function
Noelle:  Function "start_pass_downsample"
Noelle:  Disable "start_pass_downsample" as cold function
Noelle:  Function "jzero_far"
Noelle:  Disable "jzero_far" as cold function
Noelle:  Function "error_exit"
Noelle:  Disable "error_exit" as cold function
Noelle:  Function "output_message"
Noelle:  Disable "output_message" as cold function
Noelle:  Function "jpeg_quality_scaling"
Noelle:  Disable "jpeg_quality_scaling" as cold function
Noelle:  Function "format_message"
Noelle:  Disable "format_message" as cold function
Noelle:  Function "jpeg_add_quant_table"
Noelle:  Disable "jpeg_add_quant_table" as cold function
Noelle:  Function "jpeg_write_raw_data"
Noelle:  Disable "jpeg_write_raw_data" as cold function
Noelle:  Function "access_virt_sarray"
Noelle:  Disable "access_virt_sarray" as cold function
Noelle:  Function "jpeg_write_scanlines"
Noelle:  Disable "jpeg_write_scanlines" as cold function
Noelle:  Function "forward_DCT_float"
Noelle:  Disable "forward_DCT_float" as cold function
Noelle:  Function "jpeg_mem_term"
Noelle:  Disable "jpeg_mem_term" as cold function
Noelle:  Function "jpeg_mem_init"
Noelle:  Disable "jpeg_mem_init" as cold function
Noelle:  Function "jpeg_open_backing_store"
Noelle:  Disable "jpeg_open_backing_store" as cold function
Noelle:  Function "pre_process_context"
Noelle:  Disable "pre_process_context" as cold function
Noelle:  Function "null_convert"
Noelle:  Disable "null_convert" as cold function
Noelle:  Function "alloc_barray"
Noelle:  Disable "alloc_barray" as cold function
Noelle:  Function "jcopy_block_row"
Noelle:  Disable "jcopy_block_row" as cold function
Noelle:  Function "jpeg_fdct_ifast"
Noelle:  Disable "jpeg_fdct_ifast" as cold function
Noelle:  Function "jpeg_fdct_float"
Noelle:  Disable "jpeg_fdct_float" as cold function
Noelle:  Function "pass_startup"
Noelle:  Disable "pass_startup" as cold function
Noelle:  Function "request_virt_sarray"
Noelle:  Disable "request_virt_sarray" as cold function
Noelle:  Function "jpeg_set_colorspace"
Noelle:  Disable "jpeg_set_colorspace" as cold function
Noelle:  Function "get_text_rgb_row"
Noelle:  Disable "get_text_rgb_row" as cold function
Noelle:  Function "get_word_gray_row"
Noelle:  Disable "get_word_gray_row" as cold function
Noelle:  Function "load_interlaced_image"
Noelle:  Disable "load_interlaced_image" as cold function
Noelle:  Function "get_scaled_gray_row"
Noelle:  Disable "get_scaled_gray_row" as cold function
Noelle:  Function "get_word_rgb_row"
Noelle:  Disable "get_word_rgb_row" as cold function
Noelle:  Function "get_scaled_rgb_row"
Noelle:  Disable "get_scaled_rgb_row" as cold function
Noelle:  Function "get_text_gray_row"
Noelle:  Disable "get_text_gray_row" as cold function
Noelle:  Function "jinit_read_gif"
Noelle:  Disable "jinit_read_gif" as cold function
Noelle:  Function "cmyk_ycck_convert"
Noelle:  Disable "cmyk_ycck_convert" as cold function
Noelle:  Function "fullsize_smooth_downsample"
Noelle:  Disable "fullsize_smooth_downsample" as cold function
Noelle:  Function "h2v1_downsample"
Noelle:  Disable "h2v1_downsample" as cold function
Noelle:  Function "h2v2_smooth_downsample"
Noelle:  Disable "h2v2_smooth_downsample" as cold function
Noelle:  Function "int_downsample"
Noelle:  Disable "int_downsample" as cold function
Noelle:  Function "jinit_huff_encoder"
Noelle:  Disable "jinit_huff_encoder" as cold function
Noelle:  Function "start_pass_huff"
Noelle:  Disable "start_pass_huff" as cold function
Noelle:  Function "jinit_read_targa"
Noelle:  Disable "jinit_read_targa" as cold function
Noelle:  Function "usage"
Noelle:  Disable "usage" as cold function
Noelle:  Function "start_input_gif"
Noelle:  Disable "start_input_gif" as cold function
Noelle:  Function "finish_input_gif"
Noelle:  Disable "finish_input_gif" as cold function
Noelle:  Function "get_pixel_rows"
Noelle:  Disable "get_pixel_rows" as cold function
Noelle:  Function "LZWReadByte"
Noelle:  Disable "LZWReadByte" as cold function
Noelle:  Function "GetCode"
Noelle:  Disable "GetCode" as cold function
Noelle:  Function "get_interlaced_row"
Noelle:  Disable "get_interlaced_row" as cold function
Noelle:  Function "encode_mcu_gather"
Noelle:  Disable "encode_mcu_gather" as cold function
Noelle:  Function "start_input_tga"
Noelle:  Disable "start_input_tga" as cold function
Noelle:  Function "finish_pass_gather"
Noelle:  Disable "finish_pass_gather" as cold function
Noelle:  Function "finish_pass_huff"
Noelle:  Disable "finish_pass_huff" as cold function
Noelle:  Function "emit_restart"
Noelle:  Disable "emit_restart" as cold function
Noelle:  Function "read_stdin"
Noelle:  Disable "read_stdin" as cold function
Noelle:  Function "read_text_integer"
Noelle:  Disable "read_text_integer" as cold function
Noelle:  Function "text_getc"
Noelle:  Disable "text_getc" as cold function
Noelle:  Function "read_scan_script"
Noelle:  Disable "read_scan_script" as cold function
Noelle:  Function "read_scan_integer"
Noelle:  Disable "read_scan_integer" as cold function
Noelle:  Function "set_quant_slots"
Noelle:  Disable "set_quant_slots" as cold function
Noelle:  Function "set_sample_factors"
Noelle:  Disable "set_sample_factors" as cold function
Noelle:  Function "read_quant_tables"
Noelle:  Disable "read_quant_tables" as cold function
Noelle:  Function "compress_data"
Noelle:  Disable "compress_data" as cold function
Noelle:  Function "null_method"
Noelle:  Disable "null_method" as cold function
Noelle:  Function "grayscale_convert"
Noelle:  Disable "grayscale_convert" as cold function
Noelle:  Function "rgb_gray_convert"
Noelle:  Disable "rgb_gray_convert" as cold function
Noelle:  Function "write_stdout"
Noelle:  Disable "write_stdout" as cold function
Noelle:  Function "jpeg_abort_compress"
Noelle:  Disable "jpeg_abort_compress" as cold function
Noelle:  Function "jpeg_write_marker"
Noelle:  Disable "jpeg_write_marker" as cold function
Noelle:  Function "get_memory_row"
Noelle:  Disable "get_memory_row" as cold function
Noelle:  Function "encode_mcu_huff"
Noelle:  Disable "encode_mcu_huff" as cold function
Noelle:  Function "finish_input_tga"
Noelle:  Disable "finish_input_tga" as cold function
Noelle:  Function "read_rle_pixel"
Noelle:  Disable "read_rle_pixel" as cold function
Noelle:  Function "read_non_rle_pixel"
Noelle:  Disable "read_non_rle_pixel" as cold function
Noelle:  Function "get_8bit_row"
Noelle:  Disable "get_8bit_row" as cold function
Noelle:  Function "get_16bit_row"
Noelle:  Disable "get_16bit_row" as cold function
Noelle:  Function "get_24bit_row"
Noelle:  Disable "get_24bit_row" as cold function
Noelle:  Function "get_8bit_gray_row"
Noelle:  Disable "get_8bit_gray_row" as cold function
Noelle:  Function "preload_image"
Noelle:  Disable "preload_image" as cold function
Noelle:  Function "jpeg_write_tables"
Noelle:  Disable "jpeg_write_tables" as cold function
Noelle:  Function "jinit_read_bmp"
Noelle:  Disable "jinit_read_bmp" as cold function
Noelle:  Function "start_input_bmp"
Noelle:  Disable "start_input_bmp" as cold function
Noelle:  Function "finish_input_bmp"
Noelle:  Disable "finish_input_bmp" as cold function
Noelle:  Function "preload_image.9"
Noelle:  Disable "preload_image.9" as cold function
Noelle:  Function "write_any_marker"
Noelle:  Disable "write_any_marker" as cold function
Noelle:  Function "write_tables_only"
Noelle:  Disable "write_tables_only" as cold function
Noelle:  Function "get_8bit_row.10"
Noelle:  Disable "get_8bit_row.10" as cold function
Noelle:  Function "get_24bit_row.11"
Noelle:  Disable "get_24bit_row.11" as cold function
Planner:    There are 22 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:    Loop 281 has 4.708697e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 219 has 9.998582e-01 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 307 has 8.929887e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 168 has 1.421053e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 170 has 6.602327e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 176 has 2.581633e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 177 has 1.126923e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 321 has 7.943750e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 293 has 1.421111e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 300 has 1.484632e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 322 has 8.101250e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 292 has 1.322000e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 315 has 4.470001e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 316 has 1.372183e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 284 has 1.058351e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 287 has 9.408357e+00 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 197 has 9.998581e-01 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:  There are 5 loop nesting trees in the program
Planner:    ID: 198 (1)
Planner:      Function: "rgb_ycc_convert"
Planner:      Loop: "  %39 = load i8, i8* %38, align 1, !tbaa !92, !noelle.pdg.inst.id !93"
Planner:      Loop nesting level: 2
Planner:      Hotness = 3.935433e+00 %
Planner:      Average instructions per invocation = 7.014202e+05 %
Planner:      Average iterations per invocation = 1.031502e+04 %
Planner:    
Planner:    ID: 169 (1)
Planner:      Function: "compress_output"
Planner:      Loop: "  %56 = load i32, i32* %8, align 4, !tbaa !145, !noelle.pdg.inst.id !88"
Planner:      Loop nesting level: 2
Planner:      Hotness = 8.179893e-01 %
Planner:      Average instructions per invocation = 8.630949e+04 %
Planner:      Average iterations per invocation = 1.027221e+03 %
Planner:    
Planner:    ID: 220 (1)
Planner:      Function: "h2v2_downsample"
Planner:      Loop: "  %86 = load i8, i8* %84, align 1, !tbaa !347, !noelle.pdg.inst.id !114"
Planner:      Loop nesting level: 2
Planner:      Hotness = 6.949175e-01 %
Planner:      Average instructions per invocation = 1.238390e+05 %
Planner:      Average iterations per invocation = 2.580000e+03 %
Planner:    
Planner:    ID: 314 (1)
Planner:      Function: "forward_DCT"
Planner:      Loop: "  %28 = zext i32 %27 to i64, !noelle.pdg.inst.id !216"
Planner:      Loop nesting level: 1
Planner:      Hotness = 2.486168e+00 %
Planner:      Average instructions per invocation = 1.770701e+06 %
Planner:      Average iterations per invocation = 9.674994e+02 %
Planner:    
Planner:    ID: 0 (1)
Planner:      Function: "main"
Planner:      Loop: "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3536, !noelle.pdg.inst.id !166"
Planner:      Loop nesting level: 1
Planner:      Hotness = 7.179032e+01 %
Planner:      Average instructions per invocation = 9.019431e+10 %
Planner:      Average iterations per invocation = 2.147484e+09 %
Planner:    
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 198
Planner: LoopSelector:      Function: "rgb_ycc_convert"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %39 = load i8, i8* %38, align 1, !tbaa !92, !noelle.pdg.inst.id !93"
Planner: LoopSelector:      Coverage: 3.935433e+00%
Planner: LoopSelector:      Whole-program savings = 3.935433e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [4 x [64 x i16]**], align 16, !noelle.pdg.inst.id !131
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [4 x [64 x i16]**], align 16, !noelle.pdg.inst.id !131
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 169 saves only 6.655339e-02 when parallelized. Skip it
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 220 saves only 6.949175e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16, !noelle.pdg.inst.id !182
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16, !noelle.pdg.inst.id !182
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 314
Planner: LoopSelector:      Function: "forward_DCT"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %28 = zext i32 %27 to i64, !noelle.pdg.inst.id !216"
Planner: LoopSelector:      Coverage: 2.486168e+00%
Planner: LoopSelector:      Whole-program savings = 2.312289e+00%
Planner: LoopSelector:      Loop savings = 9.300616e+01%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.jpeg_error_mgr, align 8, !noelle.pdg.inst.id !3399
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3397 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.jpeg_compress_struct, align 8, !noelle.pdg.inst.id !3398
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.jpeg_error_mgr, align 8, !noelle.pdg.inst.id !3399
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3397 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.jpeg_compress_struct, align 8, !noelle.pdg.inst.id !3398
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 0
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3536, !noelle.pdg.inst.id !166"
Planner: LoopSelector:      Coverage: 7.179032e+01%
Planner: LoopSelector:      Whole-program savings = 2.051152e+01%
Planner: LoopSelector:      Loop savings = 2.857143e+01%
Planner: LoopSelector: End
Planner:   Maximum time saved = 2.675924e+01% (33619177372)
Planner:   Maximum time saved with DOALL only = 3.935433e+00% (4944311303)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168" (7.179032e+01%)
Noelle:  Function "encode_mcu_AC_refine"
Noelle:     Loop "  %40 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %38, !noelle.pdg.inst.id !6491" (5.986135e+00%)
Noelle:     Loop "  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %69, !noelle.pdg.inst.id !6531" (6.434918e+00%)
Noelle:     Loop "  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %6), !noelle.pdg.inst.id !6548" (9.731326e-03%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %129 = lshr i64 %127, 16, !noelle.pdg.inst.id !6601" (3.310658e-04%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %199 = icmp eq i32 %196, 0, !noelle.pdg.inst.id !6678" (3.328221e-03%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %212 = lshr i64 %210, 16, !noelle.pdg.inst.id !6697" (2.726549e-04%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %340 = lshr i64 %338, 16, !noelle.pdg.inst.id !6830" (1.702085e-02%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %416 = lshr i64 %414, 16, !noelle.pdg.inst.id !6909" (5.348385e-03%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %487 = icmp eq i32 %484, 0, !noelle.pdg.inst.id !6979" (2.083875e-01%)
Noelle:     Loop "  %500 = lshr i64 %498, 16, !noelle.pdg.inst.id !6998" (1.714804e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:  Function "encode_mcu_AC_first"
Noelle:     Loop "  %42 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %40, !noelle.pdg.inst.id !2769" (4.792309e+00%)
Noelle:     Loop "  %74 = load i32, i32* %33, align 8, !tbaa !2814, !noelle.pdg.inst.id !280" (8.888417e-04%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %118 = lshr i64 %116, 16, !noelle.pdg.inst.id !2866" (2.747108e-04%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %180 = ashr i32 %179, 1, !noelle.pdg.inst.id !2935" (2.103081e-01%)
Noelle:     Loop "  %233 = lshr i64 %231, 16, !noelle.pdg.inst.id !2988" (9.506832e-02%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %306 = lshr i64 %304, 16, !noelle.pdg.inst.id !3068" (4.571888e-02%)
Noelle:  Disable loop "16" as cold code
Noelle:  Function "rgb_ycc_convert"
Noelle:     Loop "  %26 = load i8**, i8*** %2, align 8, !tbaa !78, !noelle.pdg.inst.id !79" (3.935545e+00%)
Noelle:     Loop "  %39 = load i8, i8* %38, align 1, !tbaa !94, !noelle.pdg.inst.id !95" (3.935433e+00%)
Noelle:  Function "forward_DCT"
Noelle:     Loop "  %28 = zext i32 %27 to i64, !noelle.pdg.inst.id !218" (2.486168e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29, !noelle.pdg.inst.id !224" (6.072169e-01%)
Noelle:     Loop "  %77 = getelementptr inbounds i32, i32* %18, i64 %76, !noelle.pdg.inst.id !268" (1.864010e+00%)
Noelle:  Function "jpeg_fdct_islow"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !36, !noelle.pdg.inst.id !40" (1.079100e+00%)
Noelle:     Loop "  %95 = load i32, i32* %94, align 4, !tbaa !36, !noelle.pdg.inst.id !144" (1.100496e+00%)
Noelle:  Function "compress_output"
Noelle:     Loop "  %16 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %15, !noelle.pdg.inst.id !157" (2.039395e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %54 = icmp ult i32 %52, %51, !noelle.pdg.inst.id !206" (8.181533e-01%)
Noelle:     Loop "  %56 = load i32, i32* %8, align 4, !tbaa !147, !noelle.pdg.inst.id !90" (8.179893e-01%)
Noelle:     Loop "  %62 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %60, !noelle.pdg.inst.id !222" (6.427619e-01%)
Noelle:     Loop "  %131 = add nsw i64 %129, %53, !noelle.pdg.inst.id !322" (8.118708e-08%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  %137 = add i64 %136, %135, !noelle.pdg.inst.id !329" (5.492067e-08%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  %160 = getelementptr inbounds [64 x i16], [64 x i16]* %158, i64 1, !noelle.pdg.inst.id !356" (2.626641e-08%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  %103 = add nsw i64 %101, %53, !noelle.pdg.inst.id !286" (5.492067e-08%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %109 = add i64 %108, %107, !noelle.pdg.inst.id !293" (5.492067e-08%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %85 = sext i32 %84 to i64, !noelle.pdg.inst.id !252" (2.864014e-01%)
Noelle:     Loop "  %93 = getelementptr inbounds [64 x i16], [64 x i16]* %91, i64 1, !noelle.pdg.inst.id !261" (1.326729e-01%)
Noelle:  Function "emit_eobrun"
Noelle:     Loop "  %7 = ashr i32 %5, 1, !noelle.pdg.inst.id !1443" (3.276667e-02%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %68 = lshr i64 %66, 16, !noelle.pdg.inst.id !1520" (1.749602e-02%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %154 = lshr i64 %152, 16, !noelle.pdg.inst.id !1616" (1.792058e-03%)
Noelle:  Disable loop "37" as cold code
Noelle:     Loop "  %231 = icmp eq i32 %228, 0, !noelle.pdg.inst.id !1693" (5.123379e-01%)
Noelle:     Loop "  %246 = lshr i64 %244, 16, !noelle.pdg.inst.id !1712" (4.479996e-02%)
Noelle:  Disable loop "39" as cold code
Noelle:  Function "h2v2_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29, !noelle.pdg.inst.id !345" (0.000000e+00%)
Noelle:  Disable loop "40" as cold code
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59, !noelle.pdg.inst.id !378" (1.402865e-04%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %75 = or i64 %74, 1, !noelle.pdg.inst.id !402" (6.950073e-01%)
Noelle:     Loop "  %86 = load i8, i8* %84, align 1, !tbaa !349, !noelle.pdg.inst.id !116" (6.949175e-01%)
Noelle:  Function "encode_mcu_DC_first"
Noelle:     Loop "  %34 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %33, !noelle.pdg.inst.id !1568" (2.132140e-01%)
Noelle:     Loop "  %105 = lshr i64 %103, 16, !noelle.pdg.inst.id !1650" (9.250578e-03%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %183 = lshr i64 %181, 16, !noelle.pdg.inst.id !1736" (9.316102e-03%)
Noelle:  Disable loop "46" as cold code
Noelle:  Function "encode_mcu_DC_refine"
Noelle:  Disable "encode_mcu_DC_refine" as cold function
Noelle:  Function "compress_first_pass"
Noelle:  Disable "compress_first_pass" as cold function
Noelle:  Function "finish_pass_gather_phuff"
Noelle:  Disable "finish_pass_gather_phuff" as cold function
Noelle:  Function "jpeg_gen_optimal_table"
Noelle:  Disable "jpeg_gen_optimal_table" as cold function
Noelle:  Function "access_virt_barray"
Noelle:  Disable "access_virt_barray" as cold function
Noelle:  Function "pre_process_data"
Noelle:  Disable "pre_process_data" as cold function
Noelle:  Function "fullsize_downsample"
Noelle:  Disable "fullsize_downsample" as cold function
Noelle:  Function "sep_downsample"
Noelle:  Disable "sep_downsample" as cold function
Noelle:  Function "process_data_simple_main"
Noelle:  Disable "process_data_simple_main" as cold function
Noelle:  Function "jpeg_finish_compress"
Noelle:  Disable "jpeg_finish_compress" as cold function
Noelle:  Function "jcopy_sample_rows"
Noelle:  Disable "jcopy_sample_rows" as cold function
Noelle:  Function "get_raw_row"
Noelle:  Disable "get_raw_row" as cold function
Noelle:  Function "empty_output_buffer"
Noelle:  Disable "empty_output_buffer" as cold function
Noelle:  Function "start_pass_phuff"
Noelle:  Disable "start_pass_phuff" as cold function
Noelle:  Function "jpeg_make_c_derived_tbl"
Noelle:  Disable "jpeg_make_c_derived_tbl" as cold function
Noelle:  Function "write_scan_header"
Noelle:  Disable "write_scan_header" as cold function
Noelle:  Function "realize_virt_arrays"
Noelle:  Disable "realize_virt_arrays" as cold function
Noelle:  Function "emit_dht"
Noelle:  Disable "emit_dht" as cold function
Noelle:  Function "rgb_ycc_start"
Noelle:  Disable "rgb_ycc_start" as cold function
Noelle:  Function "jpeg_start_compress"
Noelle:  Disable "jpeg_start_compress" as cold function
Noelle:  Function "jinit_compress_master"
Noelle:  Disable "jinit_compress_master" as cold function
Noelle:  Function "jinit_c_master_control"
Noelle:  Disable "jinit_c_master_control" as cold function
Noelle:  Function "parse_switches"
Noelle:  Disable "parse_switches" as cold function
Noelle:  Function "write_frame_header"
Noelle:  Disable "write_frame_header" as cold function
Noelle:  Function "jpeg_set_linear_quality"
Noelle:  Disable "jpeg_set_linear_quality" as cold function
Noelle:  Function "emit_dqt"
Noelle:  Disable "emit_dqt" as cold function
Noelle:  Function "keymatch"
Noelle:  Disable "keymatch" as cold function
Noelle:  Function "jpeg_set_defaults"
Noelle:  Disable "jpeg_set_defaults" as cold function
Noelle:  Function "prepare_for_pass"
Noelle:  Disable "prepare_for_pass" as cold function
Noelle:  Function "jpeg_set_quality"
Noelle:  Disable "jpeg_set_quality" as cold function
Noelle:  Function "alloc_small"
Noelle:  Disable "alloc_small" as cold function
Noelle:  Function "finish_pass_phuff"
Noelle:  Disable "finish_pass_phuff" as cold function
Noelle:  Function "alloc_sarray"
Noelle:  Disable "alloc_sarray" as cold function
Noelle:  Function "per_scan_setup"
Noelle:  Disable "per_scan_setup" as cold function
Noelle:  Function "start_pass_coef"
Noelle:  Disable "start_pass_coef" as cold function
Noelle:  Function "select_scan_parameters"
Noelle:  Disable "select_scan_parameters" as cold function
Noelle:  Function "finish_pass_master"
Noelle:  Disable "finish_pass_master" as cold function
Noelle:  Function "flush_bits"
Noelle:  Disable "flush_bits" as cold function
Noelle:  Function "start_pass_fdctmgr"
Noelle:  Disable "start_pass_fdctmgr" as cold function
Noelle:  Function "free_pool"
Noelle:  Disable "free_pool" as cold function
Noelle:  Function "emit_sof"
Noelle:  Disable "emit_sof" as cold function
Noelle:  Function "start_input_ppm"
Noelle:  Disable "start_input_ppm" as cold function
Noelle:  Function "self_destruct"
Noelle:  Disable "self_destruct" as cold function
Noelle:  Function "write_file_header"
Noelle:  Disable "write_file_header" as cold function
Noelle:  Function "alloc_large"
Noelle:  Disable "alloc_large" as cold function
Noelle:  Function "request_virt_barray"
Noelle:  Disable "request_virt_barray" as cold function
Noelle:  Function "read_pbm_integer"
Noelle:  Disable "read_pbm_integer" as cold function
Noelle:  Function "jinit_c_coef_controller"
Noelle:  Disable "jinit_c_coef_controller" as cold function
Noelle:  Function "jinit_downsampler"
Noelle:  Disable "jinit_downsampler" as cold function
Noelle:  Function "jpeg_simple_progression"
Noelle:  Disable "jpeg_simple_progression" as cold function
Noelle:  Function "jinit_c_prep_controller"
Noelle:  Disable "jinit_c_prep_controller" as cold function
Noelle:  Function "jpeg_default_colorspace"
Noelle:  Disable "jpeg_default_colorspace" as cold function
Noelle:  Function "jpeg_CreateCompress"
Noelle:  Disable "jpeg_CreateCompress" as cold function
Noelle:  Function "jinit_c_main_controller"
Noelle:  Disable "jinit_c_main_controller" as cold function
Noelle:  Function "jpeg_suppress_tables"
Noelle:  Disable "jpeg_suppress_tables" as cold function
Noelle:  Function "jdiv_round_up"
Noelle:  Disable "jdiv_round_up" as cold function
Noelle:  Function "jinit_memory_mgr"
Noelle:  Disable "jinit_memory_mgr" as cold function
Noelle:  Function "jinit_color_converter"
Noelle:  Disable "jinit_color_converter" as cold function
Noelle:  Function "jpeg_alloc_huff_table"
Noelle:  Disable "jpeg_alloc_huff_table" as cold function
Noelle:  Function "jround_up"
Noelle:  Disable "jround_up" as cold function
Noelle:  Function "jinit_forward_dct"
Noelle:  Disable "jinit_forward_dct" as cold function
Noelle:  Function "write_file_trailer"
Noelle:  Disable "write_file_trailer" as cold function
Noelle:  Function "jpeg_stdio_dest"
Noelle:  Disable "jpeg_stdio_dest" as cold function
Noelle:  Function "jpeg_std_error"
Noelle:  Disable "jpeg_std_error" as cold function
Noelle:  Function "term_destination"
Noelle:  Disable "term_destination" as cold function
Noelle:  Function "start_pass_main"
Noelle:  Disable "start_pass_main" as cold function
Noelle:  Function "jinit_marker_writer"
Noelle:  Disable "jinit_marker_writer" as cold function
Noelle:  Function "jpeg_alloc_quant_table"
Noelle:  Disable "jpeg_alloc_quant_table" as cold function
Noelle:  Function "start_pass_prep"
Noelle:  Disable "start_pass_prep" as cold function
Noelle:  Function "jpeg_get_large"
Noelle:  Disable "jpeg_get_large" as cold function
Noelle:  Function "jpeg_free_large"
Noelle:  Disable "jpeg_free_large" as cold function
Noelle:  Function "jinit_phuff_encoder"
Noelle:  Disable "jinit_phuff_encoder" as cold function
Noelle:  Function "jpeg_destroy_compress"
Noelle:  Disable "jpeg_destroy_compress" as cold function
Noelle:  Function "init_destination"
Noelle:  Disable "init_destination" as cold function
Noelle:  Function "jpeg_get_small"
Noelle:  Disable "jpeg_get_small" as cold function
Noelle:  Function "jpeg_free_small"
Noelle:  Disable "jpeg_free_small" as cold function
Noelle:  Function "jpeg_destroy"
Noelle:  Disable "jpeg_destroy" as cold function
Noelle:  Function "jinit_read_ppm"
Noelle:  Disable "jinit_read_ppm" as cold function
Noelle:  Function "jpeg_abort"
Noelle:  Disable "jpeg_abort" as cold function
Noelle:  Function "emit_message"
Noelle:  Disable "emit_message" as cold function
Noelle:  Function "reset_error_mgr"
Noelle:  Disable "reset_error_mgr" as cold function
Noelle:  Function "start_pass_downsample"
Noelle:  Disable "start_pass_downsample" as cold function
Noelle:  Function "finish_input_ppm"
Noelle:  Disable "finish_input_ppm" as cold function
Noelle:  Function "jpeg_mem_available"
Noelle:  Disable "jpeg_mem_available" as cold function
Noelle:  Function "get_text_gray_row"
Noelle:  Disable "get_text_gray_row" as cold function
Noelle:  Function "get_scaled_rgb_row"
Noelle:  Disable "get_scaled_rgb_row" as cold function
Noelle:  Function "get_word_rgb_row"
Noelle:  Disable "get_word_rgb_row" as cold function
Noelle:  Function "get_scaled_gray_row"
Noelle:  Disable "get_scaled_gray_row" as cold function
Noelle:  Function "get_word_gray_row"
Noelle:  Disable "get_word_gray_row" as cold function
Noelle:  Function "jinit_read_gif"
Noelle:  Disable "jinit_read_gif" as cold function
Noelle:  Function "emit_restart"
Noelle:  Disable "emit_restart" as cold function
Noelle:  Function "jinit_read_bmp"
Noelle:  Disable "jinit_read_bmp" as cold function
Noelle:  Function "finish_pass_huff"
Noelle:  Disable "finish_pass_huff" as cold function
Noelle:  Function "LZWReadByte"
Noelle:  Disable "LZWReadByte" as cold function
Noelle:  Function "start_pass_huff"
Noelle:  Disable "start_pass_huff" as cold function
Noelle:  Function "encode_mcu_gather"
Noelle:  Disable "encode_mcu_gather" as cold function
Noelle:  Function "encode_mcu_huff"
Noelle:  Disable "encode_mcu_huff" as cold function
Noelle:  Function "finish_pass_gather"
Noelle:  Disable "finish_pass_gather" as cold function
Noelle:  Function "get_text_rgb_row"
Noelle:  Disable "get_text_rgb_row" as cold function
Noelle:  Function "get_pixel_rows"
Noelle:  Disable "get_pixel_rows" as cold function
Noelle:  Function "load_interlaced_image"
Noelle:  Disable "load_interlaced_image" as cold function
Noelle:  Function "finish_input_gif"
Noelle:  Disable "finish_input_gif" as cold function
Noelle:  Function "output_message"
Noelle:  Disable "output_message" as cold function
Noelle:  Function "start_input_gif"
Noelle:  Disable "start_input_gif" as cold function
Noelle:  Function "h2v1_downsample"
Noelle:  Disable "h2v1_downsample" as cold function
Noelle:  Function "pass_startup"
Noelle:  Disable "pass_startup" as cold function
Noelle:  Function "cmyk_ycck_convert"
Noelle:  Disable "cmyk_ycck_convert" as cold function
Noelle:  Function "null_convert"
Noelle:  Disable "null_convert" as cold function
Noelle:  Function "rgb_gray_convert"
Noelle:  Disable "rgb_gray_convert" as cold function
Noelle:  Function "read_stdin"
Noelle:  Disable "read_stdin" as cold function
Noelle:  Function "grayscale_convert"
Noelle:  Disable "grayscale_convert" as cold function
Noelle:  Function "null_method"
Noelle:  Disable "null_method" as cold function
Noelle:  Function "int_downsample"
Noelle:  Disable "int_downsample" as cold function
Noelle:  Function "write_stdout"
Noelle:  Disable "write_stdout" as cold function
Noelle:  Function "h2v2_smooth_downsample"
Noelle:  Disable "h2v2_smooth_downsample" as cold function
Noelle:  Function "jinit_read_targa"
Noelle:  Disable "jinit_read_targa" as cold function
Noelle:  Function "fullsize_smooth_downsample"
Noelle:  Disable "fullsize_smooth_downsample" as cold function
Noelle:  Function "jpeg_mem_term"
Noelle:  Disable "jpeg_mem_term" as cold function
Noelle:  Function "jpeg_mem_init"
Noelle:  Disable "jpeg_mem_init" as cold function
Noelle:  Function "jcopy_block_row"
Noelle:  Disable "jcopy_block_row" as cold function
Noelle:  Function "jpeg_write_raw_data"
Noelle:  Disable "jpeg_write_raw_data" as cold function
Noelle:  Function "jpeg_write_scanlines"
Noelle:  Disable "jpeg_write_scanlines" as cold function
Noelle:  Function "jpeg_write_tables"
Noelle:  Disable "jpeg_write_tables" as cold function
Noelle:  Function "jpeg_write_marker"
Noelle:  Disable "jpeg_write_marker" as cold function
Noelle:  Function "jpeg_abort_compress"
Noelle:  Disable "jpeg_abort_compress" as cold function
Noelle:  Function "format_message"
Noelle:  Disable "format_message" as cold function
Noelle:  Function "start_input_bmp"
Noelle:  Disable "start_input_bmp" as cold function
Noelle:  Function "error_exit"
Noelle:  Disable "error_exit" as cold function
Noelle:  Function "jpeg_open_backing_store"
Noelle:  Disable "jpeg_open_backing_store" as cold function
Noelle:  Function "jpeg_fdct_float"
Noelle:  Disable "jpeg_fdct_float" as cold function
Noelle:  Function "forward_DCT_float"
Noelle:  Disable "forward_DCT_float" as cold function
Noelle:  Function "jpeg_fdct_ifast"
Noelle:  Disable "jpeg_fdct_ifast" as cold function
Noelle:  Function "get_16bit_row"
Noelle:  Disable "get_16bit_row" as cold function
Noelle:  Function "get_24bit_row"
Noelle:  Disable "get_24bit_row" as cold function
Noelle:  Function "get_8bit_gray_row"
Noelle:  Disable "get_8bit_gray_row" as cold function
Noelle:  Function "preload_image"
Noelle:  Disable "preload_image" as cold function
Noelle:  Function "get_memory_row"
Noelle:  Disable "get_memory_row" as cold function
Noelle:  Function "jpeg_set_colorspace"
Noelle:  Disable "jpeg_set_colorspace" as cold function
Noelle:  Function "jpeg_quality_scaling"
Noelle:  Disable "jpeg_quality_scaling" as cold function
Noelle:  Function "read_quant_tables"
Noelle:  Disable "read_quant_tables" as cold function
Noelle:  Function "pre_process_context"
Noelle:  Disable "pre_process_context" as cold function
Noelle:  Function "set_quant_slots"
Noelle:  Disable "set_quant_slots" as cold function
Noelle:  Function "set_sample_factors"
Noelle:  Disable "set_sample_factors" as cold function
Noelle:  Function "read_scan_script"
Noelle:  Disable "read_scan_script" as cold function
Noelle:  Function "read_scan_integer"
Noelle:  Disable "read_scan_integer" as cold function
Noelle:  Function "access_virt_sarray"
Noelle:  Disable "access_virt_sarray" as cold function
Noelle:  Function "read_text_integer"
Noelle:  Disable "read_text_integer" as cold function
Noelle:  Function "request_virt_sarray"
Noelle:  Disable "request_virt_sarray" as cold function
Noelle:  Function "alloc_barray"
Noelle:  Disable "alloc_barray" as cold function
Noelle:  Function "text_getc"
Noelle:  Disable "text_getc" as cold function
Noelle:  Function "jpeg_add_quant_table"
Noelle:  Disable "jpeg_add_quant_table" as cold function
Noelle:  Function "GetCode"
Noelle:  Disable "GetCode" as cold function
Noelle:  Function "get_interlaced_row"
Noelle:  Disable "get_interlaced_row" as cold function
Noelle:  Function "finish_input_bmp"
Noelle:  Disable "finish_input_bmp" as cold function
Noelle:  Function "jzero_far"
Noelle:  Disable "jzero_far" as cold function
Noelle:  Function "preload_image.9"
Noelle:  Disable "preload_image.9" as cold function
Noelle:  Function "get_8bit_row.10"
Noelle:  Disable "get_8bit_row.10" as cold function
Noelle:  Function "compress_data"
Noelle:  Disable "compress_data" as cold function
Noelle:  Function "get_24bit_row.11"
Noelle:  Disable "get_24bit_row.11" as cold function
Noelle:  Function "start_input_tga"
Noelle:  Disable "start_input_tga" as cold function
Noelle:  Function "finish_input_tga"
Noelle:  Disable "finish_input_tga" as cold function
Noelle:  Function "read_rle_pixel"
Noelle:  Disable "read_rle_pixel" as cold function
Noelle:  Function "read_non_rle_pixel"
Noelle:  Disable "read_non_rle_pixel" as cold function
Noelle:  Function "get_8bit_row"
Noelle:  Disable "get_8bit_row" as cold function
Noelle:  Function "write_tables_only"
Noelle:  Disable "write_tables_only" as cold function
Noelle:  Function "write_any_marker"
Noelle:  Disable "write_any_marker" as cold function
Noelle:  Function "jinit_huff_encoder"
Noelle:  Disable "jinit_huff_encoder" as cold function
Noelle:  Function "usage"
Noelle:  Disable "usage" as cold function
Parallelizer:    There are 22 loops in the program we are going to consider
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.jpeg_error_mgr, align 8, !noelle.pdg.inst.id !3401
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3399
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3399 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.jpeg_compress_struct, align 8, !noelle.pdg.inst.id !3400
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.jpeg_error_mgr, align 8, !noelle.pdg.inst.id !3401
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3399
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3399 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.jpeg_compress_struct, align 8, !noelle.pdg.inst.id !3400
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16, !noelle.pdg.inst.id !184
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16, !noelle.pdg.inst.id !184
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "rgb_ycc_convert"
Parallelizer: parallelizerLoop:   Loop 198 = "  %39 = load i8, i8* %38, align 1, !tbaa !94, !noelle.pdg.inst.id !95"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %10 = load i64*, i64** %9, align 8, !tbaa !50, !noelle.pdg.inst.id !53
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %18 = zext i32 %12 to i64, !noelle.pdg.inst.id !64
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %29 = load i8*, i8** %28, align 8, !tbaa !78, !noelle.pdg.inst.id !82
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %32 = load i8*, i8** %31, align 8, !tbaa !78, !noelle.pdg.inst.id !85
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %35 = load i8*, i8** %34, align 8, !tbaa !78, !noelle.pdg.inst.id !88
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %36 = load i8*, i8** %24, align 8, !tbaa !78, !noelle.pdg.inst.id !89
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: Start the parallelization
DOALL:   Number of threads to extract = 8
DOALL:   Chunk size = 8
DOALL:   Reduced variables:
DOALL:  Cloned loop
DOALL:  Adjusted data flow
DOALL:  Rewired induction variables and reducible variables
DOALL:  Stored live outs
DOALL:  Final parallelized loop:

define void @noelle_task_0(i8*, i64, i64, i64) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [48 x i64]*
  %5 = getelementptr inbounds [48 x i64], [48 x i64]* %noelle.environment_variable.pointer, i64 0, i64 0
  %6 = bitcast i64* %5 to i64**
  %noelle_environment_variable_0 = load i64*, i64** %6
  %7 = getelementptr inbounds [48 x i64], [48 x i64]* %noelle.environment_variable.pointer, i64 0, i64 8
  %8 = getelementptr inbounds [48 x i64], [48 x i64]* %noelle.environment_variable.pointer, i64 0, i64 16
  %9 = bitcast i64* %8 to i8**
  %noelle_environment_variable_2 = load i8*, i8** %9
  %10 = getelementptr inbounds [48 x i64], [48 x i64]* %noelle.environment_variable.pointer, i64 0, i64 24
  %11 = bitcast i64* %10 to i8**
  %noelle_environment_variable_3 = load i8*, i8** %11
  %12 = getelementptr inbounds [48 x i64], [48 x i64]* %noelle.environment_variable.pointer, i64 0, i64 32
  %13 = bitcast i64* %12 to i8**
  %noelle_environment_variable_4 = load i8*, i8** %13
  %14 = getelementptr inbounds [48 x i64], [48 x i64]* %noelle.environment_variable.pointer, i64 0, i64 40
  %15 = bitcast i64* %14 to i8**
  %noelle_environment_variable_5 = load i8*, i8** %15
  %coreIdx_X_chunkSize = mul i64 %1, %3
  %16 = mul i64 3, %coreIdx_X_chunkSize
  %17 = ptrtoint i8* %noelle_environment_variable_5 to i64
  %18 = add i64 %17, %16
  %19 = inttoptr i64 %18 to i8*
  %coreIdx_X_chunkSize1 = mul i64 %1, %3
  %20 = mul i64 1, %coreIdx_X_chunkSize1
  %21 = add i64 0, %20
  %numCoresMinus1 = sub i64 %2, 1
  %numCoresMinus1_X_chunkSize = mul i64 %numCoresMinus1, %3
  %22 = mul i64 3, %numCoresMinus1_X_chunkSize
  %numCoresMinus12 = sub i64 %2, 1
  %numCoresMinus1_X_chunkSize3 = mul i64 %numCoresMinus12, %3
  %23 = mul i64 1, %numCoresMinus1_X_chunkSize3
  %24 = load i64, i64* %7
  %25 = icmp sge i64 %21, %24, !noelle.pdg.inst.id !30
  %26 = icmp ne i64 %21, 0
  %27 = and i1 %26, %25
  br i1 %27, label %28, label %38

28:                                               ; preds = %4, %29
  ret void

29:                                               ; preds = %30, %38
  br label %28

30:                                               ; preds = %38
  %31 = add i64 %41, 1
  %32 = icmp eq i64 %31, %3
  %chunkWrap = select i1 %32, i64 0, i64 %31
  %33 = ptrtoint i8* %50 to i64
  %34 = add i64 %33, %22
  %35 = inttoptr i64 %34 to i8*
  %nextStepOrNextChunk = select i1 %32, i8* %35, i8* %50
  %36 = add i64 %101, %23
  %nextStepOrNextChunk4 = select i1 %32, i64 %36, i64 %101
  %37 = icmp sge i64 %nextStepOrNextChunk4, %24, !noelle.pdg.inst.id !30
  br i1 %37, label %29, label %38

38:                                               ; preds = %4, %30
  %39 = phi i64 [ %21, %4 ], [ %nextStepOrNextChunk4, %30 ], !noelle.pdg.inst.id !31
  %40 = phi i8* [ %19, %4 ], [ %nextStepOrNextChunk, %30 ], !noelle.pdg.inst.id !32
  %41 = phi i64 [ 0, %4 ], [ %chunkWrap, %30 ]
  %42 = load i8, i8* %40, align 1, !tbaa !33, !noelle.pdg.inst.id !36
  %43 = zext i8 %42 to i32, !noelle.pdg.inst.id !37
  %44 = getelementptr inbounds i8, i8* %40, i64 1, !noelle.pdg.inst.id !38
  %45 = load i8, i8* %44, align 1, !tbaa !33, !noelle.pdg.inst.id !39
  %46 = zext i8 %45 to i32, !noelle.pdg.inst.id !40
  %47 = getelementptr inbounds i8, i8* %40, i64 2, !noelle.pdg.inst.id !41
  %48 = load i8, i8* %47, align 1, !tbaa !33, !noelle.pdg.inst.id !42
  %49 = zext i8 %48 to i32, !noelle.pdg.inst.id !43
  %50 = getelementptr inbounds i8, i8* %40, i64 3, !noelle.pdg.inst.id !44
  %51 = zext i8 %42 to i64, !noelle.pdg.inst.id !45
  %52 = getelementptr inbounds i64, i64* %noelle_environment_variable_0, i64 %51, !noelle.pdg.inst.id !46
  %53 = load i64, i64* %52, align 8, !tbaa !47, !noelle.pdg.inst.id !49
  %54 = or i32 %46, 256, !noelle.pdg.inst.id !50
  %55 = zext i32 %54 to i64, !noelle.pdg.inst.id !51
  %56 = getelementptr inbounds i64, i64* %noelle_environment_variable_0, i64 %55, !noelle.pdg.inst.id !52
  %57 = load i64, i64* %56, align 8, !tbaa !47, !noelle.pdg.inst.id !53
  %58 = add nsw i64 %57, %53, !noelle.pdg.inst.id !54
  %59 = or i32 %49, 512, !noelle.pdg.inst.id !55
  %60 = zext i32 %59 to i64, !noelle.pdg.inst.id !56
  %61 = getelementptr inbounds i64, i64* %noelle_environment_variable_0, i64 %60, !noelle.pdg.inst.id !57
  %62 = load i64, i64* %61, align 8, !tbaa !47, !noelle.pdg.inst.id !58
  %63 = add nsw i64 %58, %62, !noelle.pdg.inst.id !59
  %64 = lshr i64 %63, 16, !noelle.pdg.inst.id !60
  %65 = trunc i64 %64 to i8, !noelle.pdg.inst.id !61
  %66 = getelementptr inbounds i8, i8* %noelle_environment_variable_2, i64 %39, !noelle.pdg.inst.id !62
  store i8 %65, i8* %66, align 1, !tbaa !33, !noelle.pdg.inst.id !63
  %67 = or i32 %43, 768, !noelle.pdg.inst.id !64
  %68 = zext i32 %67 to i64, !noelle.pdg.inst.id !65
  %69 = getelementptr inbounds i64, i64* %noelle_environment_variable_0, i64 %68, !noelle.pdg.inst.id !66
  %70 = load i64, i64* %69, align 8, !tbaa !47, !noelle.pdg.inst.id !67
  %71 = or i32 %46, 1024, !noelle.pdg.inst.id !68
  %72 = zext i32 %71 to i64, !noelle.pdg.inst.id !69
  %73 = getelementptr inbounds i64, i64* %noelle_environment_variable_0, i64 %72, !noelle.pdg.inst.id !70
  %74 = load i64, i64* %73, align 8, !tbaa !47, !noelle.pdg.inst.id !71
  %75 = add nsw i64 %74, %70, !noelle.pdg.inst.id !72
  %76 = or i32 %49, 1280, !noelle.pdg.inst.id !73
  %77 = zext i32 %76 to i64, !noelle.pdg.inst.id !74
  %78 = getelementptr inbounds i64, i64* %noelle_environment_variable_0, i64 %77, !noelle.pdg.inst.id !75
  %79 = load i64, i64* %78, align 8, !tbaa !47, !noelle.pdg.inst.id !76
  %80 = add nsw i64 %75, %79, !noelle.pdg.inst.id !77
  %81 = lshr i64 %80, 16, !noelle.pdg.inst.id !78
  %82 = trunc i64 %81 to i8, !noelle.pdg.inst.id !79
  %83 = getelementptr inbounds i8, i8* %noelle_environment_variable_3, i64 %39, !noelle.pdg.inst.id !80
  store i8 %82, i8* %83, align 1, !tbaa !33, !noelle.pdg.inst.id !81
  %84 = or i32 %43, 1280, !noelle.pdg.inst.id !82
  %85 = zext i32 %84 to i64, !noelle.pdg.inst.id !83
  %86 = getelementptr inbounds i64, i64* %noelle_environment_variable_0, i64 %85, !noelle.pdg.inst.id !84
  %87 = load i64, i64* %86, align 8, !tbaa !47, !noelle.pdg.inst.id !85
  %88 = or i32 %46, 1536, !noelle.pdg.inst.id !86
  %89 = zext i32 %88 to i64, !noelle.pdg.inst.id !87
  %90 = getelementptr inbounds i64, i64* %noelle_environment_variable_0, i64 %89, !noelle.pdg.inst.id !88
  %91 = load i64, i64* %90, align 8, !tbaa !47, !noelle.pdg.inst.id !89
  %92 = add nsw i64 %91, %87, !noelle.pdg.inst.id !90
  %93 = or i32 %49, 1792, !noelle.pdg.inst.id !91
  %94 = zext i32 %93 to i64, !noelle.pdg.inst.id !92
  %95 = getelementptr inbounds i64, i64* %noelle_environment_variable_0, i64 %94, !noelle.pdg.inst.id !93
  %96 = load i64, i64* %95, align 8, !tbaa !47, !noelle.pdg.inst.id !94
  %97 = add nsw i64 %92, %96, !noelle.pdg.inst.id !95
  %98 = lshr i64 %97, 16, !noelle.pdg.inst.id !96
  %99 = trunc i64 %98 to i8, !noelle.pdg.inst.id !97
  %100 = getelementptr inbounds i8, i8* %noelle_environment_variable_4, i64 %39, !noelle.pdg.inst.id !98
  store i8 %99, i8* %100, align 1, !tbaa !33, !noelle.pdg.inst.id !99
  %101 = add nuw nsw i64 %39, 1, !noelle.pdg.inst.id !100
  %102 = icmp sge i64 %101, %24, !noelle.pdg.inst.id !30
  br i1 %102, label %29, label %30, !prof !101, !noelle.loop.id !102, !noelle.pdg.inst.id !103, !noelle.parallelizer.looporder !104
}

DOALL: Exit
Parallelizer: parallelizerLoop:   Link the parallelize loop
Parallelizer: parallelizerLoop:   The loop has been parallelized with DOALL
Parallelizer: parallelizerLoop: Exit
Parallelizer:    Keep track of basic blocks being modified by the parallelization
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "forward_DCT"
Parallelizer: parallelizerLoop:   Loop 314 = "  %28 = zext i32 %27 to i64, !noelle.pdg.inst.id !218"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 = [64 x i16]* %3
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 = i32 %5
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %8 = alloca [64 x i32], align 16, !noelle.pdg.inst.id !184
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %13 = load void (i32*)*, void (i32*)** %12, align 8, !tbaa !196, !noelle.pdg.inst.id !48
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %18 = load i32*, i32** %17, align 8, !tbaa !204, !noelle.pdg.inst.id !52
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %21 = getelementptr inbounds i8*, i8** %2, i64 %20, !noelle.pdg.inst.id !208
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %24 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 0, !noelle.pdg.inst.id !213
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %25 = zext i32 %6 to i64, !noelle.pdg.inst.id !214
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %32 = load i8*, i8** %31, align 8, !tbaa !204, !noelle.pdg.inst.id !54
DOALL:     External nodes: 5
DOALL:     	  %31 = getelementptr inbounds i8*, i8** %21, i64 %29, !noelle.pdg.inst.id !224
DOALL:     	  %33 = getelementptr inbounds i8, i8* %32, i64 %28, !noelle.pdg.inst.id !225
DOALL:     	  br i1 %74, label %75, label %._crit_edge.._crit_edge_crit_edge, !prof !261, !noelle.loop.id !262, !noelle.pdg.inst.id !263
DOALL:     	  call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43
DOALL:     	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %32 = load i8*, i8** %31, align 8, !tbaa !204, !noelle.pdg.inst.id !54 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %32 = load i8*, i8** %31, align 8, !tbaa !204, !noelle.pdg.inst.id !54 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43
DOALL:     External nodes: 21
DOALL:     	  %32 = load i8*, i8** %31, align 8, !tbaa !204, !noelle.pdg.inst.id !54
DOALL:     	  %35 = load i8, i8* %33, align 1, !tbaa !227, !noelle.pdg.inst.id !56
DOALL:     	  store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58
DOALL:     	  %40 = load i8, i8* %34, align 1, !tbaa !227, !noelle.pdg.inst.id !80
DOALL:     	  store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61
DOALL:     	  %45 = load i8, i8* %39, align 1, !tbaa !227, !noelle.pdg.inst.id !93
DOALL:     	  store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63
DOALL:     	  %50 = load i8, i8* %44, align 1, !tbaa !227, !noelle.pdg.inst.id !106
DOALL:     	  store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65
DOALL:     	  %55 = load i8, i8* %49, align 1, !tbaa !227, !noelle.pdg.inst.id !119
DOALL:     	  store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67
DOALL:     	  %60 = load i8, i8* %54, align 1, !tbaa !227, !noelle.pdg.inst.id !132
DOALL:     	  store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69
DOALL:     	  %65 = load i8, i8* %59, align 1, !tbaa !227, !noelle.pdg.inst.id !145
DOALL:     	  store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71
DOALL:     	  %69 = load i8, i8* %64, align 1, !tbaa !227, !noelle.pdg.inst.id !158
DOALL:     	  store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73
DOALL:     	  %78 = load i32, i32* %77, align 4, !tbaa !231, !noelle.pdg.inst.id !171
DOALL:     	  %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78
DOALL:     	  store i16 %96, i16* %97, align 2, !tbaa !295, !noelle.pdg.inst.id !182
DOALL:     	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DOALL:     Edges: 30
DOALL:     Loop-carried data dependences
DOALL:         %32 = load i8*, i8** %31, align 8, !tbaa !204, !noelle.pdg.inst.id !54 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %35 = load i8, i8* %33, align 1, !tbaa !227, !noelle.pdg.inst.id !56 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i16 %96, i16* %97, align 2, !tbaa !295, !noelle.pdg.inst.id !182 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i16 %96, i16* %97, align 2, !tbaa !295, !noelle.pdg.inst.id !182 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %40 = load i8, i8* %34, align 1, !tbaa !227, !noelle.pdg.inst.id !80 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %60 = load i8, i8* %54, align 1, !tbaa !227, !noelle.pdg.inst.id !132 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %65 = load i8, i8* %59, align 1, !tbaa !227, !noelle.pdg.inst.id !145 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %55 = load i8, i8* %49, align 1, !tbaa !227, !noelle.pdg.inst.id !119 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %50 = load i8, i8* %44, align 1, !tbaa !227, !noelle.pdg.inst.id !106 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %69 = load i8, i8* %64, align 1, !tbaa !227, !noelle.pdg.inst.id !158 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %32 = load i8*, i8** %31, align 8, !tbaa !204, !noelle.pdg.inst.id !54 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %45 = load i8, i8* %39, align 1, !tbaa !227, !noelle.pdg.inst.id !93 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %78 = load i32, i32* %77, align 4, !tbaa !231, !noelle.pdg.inst.id !171 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i16 %96, i16* %97, align 2, !tbaa !295, !noelle.pdg.inst.id !182 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i16 %96, i16* %97, align 2, !tbaa !295, !noelle.pdg.inst.id !182 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %50 = load i8, i8* %44, align 1, !tbaa !227, !noelle.pdg.inst.id !106 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %78 = load i32, i32* %77, align 4, !tbaa !231, !noelle.pdg.inst.id !171 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %35 = load i8, i8* %33, align 1, !tbaa !227, !noelle.pdg.inst.id !56 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %40 = load i8, i8* %34, align 1, !tbaa !227, !noelle.pdg.inst.id !80 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %45 = load i8, i8* %39, align 1, !tbaa !227, !noelle.pdg.inst.id !93 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %55 = load i8, i8* %49, align 1, !tbaa !227, !noelle.pdg.inst.id !119 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %60 = load i8, i8* %54, align 1, !tbaa !227, !noelle.pdg.inst.id !132 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %65 = load i8, i8* %59, align 1, !tbaa !227, !noelle.pdg.inst.id !145 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %69 = load i8, i8* %64, align 1, !tbaa !227, !noelle.pdg.inst.id !158 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  store i16 %96, i16* %97, align 2, !tbaa !295, !noelle.pdg.inst.id !182
DOALL:     External nodes: 5
DOALL:     	  call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43
DOALL:     	  %96 = trunc i32 %95 to i16, !noelle.pdg.inst.id !293
DOALL:     	  %97 = getelementptr inbounds [64 x i16], [64 x i16]* %3, i64 %26, i64 %76, !noelle.pdg.inst.id !294
DOALL:     	  br i1 %99, label %100, label %._crit_edge9.._crit_edge10_crit_edge, !prof !298, !noelle.pdg.inst.id !299
DOALL:     	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DOALL:     Edges: 6
DOALL:     Loop-carried data dependences
DOALL:         store i16 %96, i16* %97, align 2, !tbaa !295, !noelle.pdg.inst.id !182 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i16 %96, i16* %97, align 2, !tbaa !295, !noelle.pdg.inst.id !182 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i16 %96, i16* %97, align 2, !tbaa !295, !noelle.pdg.inst.id !182 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i16 %96, i16* %97, align 2, !tbaa !295, !noelle.pdg.inst.id !182 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58
DOALL:     	  store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61
DOALL:     	  store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63
DOALL:     	  store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65
DOALL:     	  store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67
DOALL:     	  store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69
DOALL:     	  store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71
DOALL:     	  store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73
DOALL:     	  %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78
DOALL:     External nodes: 24
DOALL:     	  %30 = phi i32* [ %24, %._crit_edge11 ], [ %72, %._crit_edge.._crit_edge_crit_edge ], !noelle.pdg.inst.id !223
DOALL:     	  %37 = add nsw i32 %36, -128, !noelle.pdg.inst.id !229
DOALL:     	  %38 = getelementptr inbounds i32, i32* %30, i64 1, !noelle.pdg.inst.id !230
DOALL:     	  %42 = add nsw i32 %41, -128, !noelle.pdg.inst.id !234
DOALL:     	  %43 = getelementptr inbounds i32, i32* %30, i64 2, !noelle.pdg.inst.id !235
DOALL:     	  %47 = add nsw i32 %46, -128, !noelle.pdg.inst.id !238
DOALL:     	  %48 = getelementptr inbounds i32, i32* %30, i64 3, !noelle.pdg.inst.id !239
DOALL:     	  %52 = add nsw i32 %51, -128, !noelle.pdg.inst.id !242
DOALL:     	  %53 = getelementptr inbounds i32, i32* %30, i64 4, !noelle.pdg.inst.id !243
DOALL:     	  %57 = add nsw i32 %56, -128, !noelle.pdg.inst.id !246
DOALL:     	  %58 = getelementptr inbounds i32, i32* %30, i64 5, !noelle.pdg.inst.id !247
DOALL:     	  %62 = add nsw i32 %61, -128, !noelle.pdg.inst.id !250
DOALL:     	  %63 = getelementptr inbounds i32, i32* %30, i64 6, !noelle.pdg.inst.id !251
DOALL:     	  %67 = add nsw i32 %66, -128, !noelle.pdg.inst.id !254
DOALL:     	  %68 = getelementptr inbounds i32, i32* %30, i64 7, !noelle.pdg.inst.id !255
DOALL:     	  %71 = add nsw i32 %70, -128, !noelle.pdg.inst.id !257
DOALL:     	  br i1 %74, label %75, label %._crit_edge.._crit_edge_crit_edge, !prof !261, !noelle.loop.id !262, !noelle.pdg.inst.id !263
DOALL:     	  call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43
DOALL:     	  %79 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %76, !noelle.pdg.inst.id !269
DOALL:     	  %81 = icmp slt i32 %80, 0, !noelle.pdg.inst.id !270
DOALL:     	  %84 = sub i32 %82, %80, !noelle.pdg.inst.id !275
DOALL:     	  %91 = add nsw i32 %80, %82, !noelle.pdg.inst.id !285
DOALL:     	  br i1 %99, label %100, label %._crit_edge9.._crit_edge10_crit_edge, !prof !298, !noelle.pdg.inst.id !299
DOALL:     	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DOALL:     Edges: 93
DOALL:     Loop-carried data dependences
DOALL:         store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65 --->   store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 via memory
DOALL:         store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65 --->   store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65 via memory
DOALL:         store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65 --->   %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 via memory
DOALL:         store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67 --->   %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 via memory
DOALL:         store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67 --->   store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 via memory
DOALL:         store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67 --->   store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67 via memory
DOALL:         store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 --->   %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 via memory
DOALL:         store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 --->   store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73 via memory
DOALL:         store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 --->   store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61 via memory
DOALL:         store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 --->   store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71 via memory
DOALL:         store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 --->   store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63 via memory
DOALL:         store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 --->   store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 via memory
DOALL:         store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 --->   store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65 via memory
DOALL:         store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 --->   store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67 via memory
DOALL:         store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 --->   store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69 via memory
DOALL:         store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61 --->   store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 via memory
DOALL:         store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61 --->   %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 via memory
DOALL:         store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61 --->   store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61 via memory
DOALL:         store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63 --->   store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 via memory
DOALL:         store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63 --->   %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 via memory
DOALL:         store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63 --->   store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63 via memory
DOALL:         store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69 --->   %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 via memory
DOALL:         store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69 --->   store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 via memory
DOALL:         store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69 --->   store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69 via memory
DOALL:         store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71 --->   %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 via memory
DOALL:         store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71 --->   store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 via memory
DOALL:         store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71 --->   store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71 via memory
DOALL:         store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73 --->   %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 via memory
DOALL:         store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73 --->   store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 via memory
DOALL:         store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73 --->   store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73 via memory
DOALL:         %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 --->   store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61 via memory
DOALL:         %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 --->   store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 via memory
DOALL:         %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 --->   store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73 via memory
DOALL:         %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 --->   store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67 via memory
DOALL:         %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 --->   store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69 via memory
DOALL:         %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 --->   store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71 via memory
DOALL:         %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 --->   store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63 via memory
DOALL:         %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 --->   store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65 via memory
DOALL:         store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %50 = load i8, i8* %44, align 1, !tbaa !227, !noelle.pdg.inst.id !106
DOALL:     External nodes: 5
DOALL:     	  %44 = getelementptr inbounds i8, i8* %39, i64 1, !noelle.pdg.inst.id !236
DOALL:     	  %51 = zext i8 %50 to i32, !noelle.pdg.inst.id !241
DOALL:     	  br i1 %74, label %75, label %._crit_edge.._crit_edge_crit_edge, !prof !261, !noelle.loop.id !262, !noelle.pdg.inst.id !263
DOALL:     	  call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43
DOALL:     	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %50 = load i8, i8* %44, align 1, !tbaa !227, !noelle.pdg.inst.id !106 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %50 = load i8, i8* %44, align 1, !tbaa !227, !noelle.pdg.inst.id !106 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %78 = load i32, i32* %77, align 4, !tbaa !231, !noelle.pdg.inst.id !171
DOALL:     External nodes: 9
DOALL:     	  call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43
DOALL:     	  %77 = getelementptr inbounds i32, i32* %18, i64 %76, !noelle.pdg.inst.id !268
DOALL:     	  %82 = ashr i32 %78, 1, !noelle.pdg.inst.id !271
DOALL:     	  %85 = icmp slt i32 %84, %78, !noelle.pdg.inst.id !276
DOALL:     	  %87 = sdiv i32 %84, %78, !noelle.pdg.inst.id !280
DOALL:     	  %92 = icmp slt i32 %91, %78, !noelle.pdg.inst.id !286
DOALL:     	  %94 = sdiv i32 %91, %78, !noelle.pdg.inst.id !290
DOALL:     	  br i1 %99, label %100, label %._crit_edge9.._crit_edge10_crit_edge, !prof !298, !noelle.pdg.inst.id !299
DOALL:     	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DOALL:     Edges: 9
DOALL:     Loop-carried data dependences
DOALL:         %78 = load i32, i32* %77, align 4, !tbaa !231, !noelle.pdg.inst.id !171 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %78 = load i32, i32* %77, align 4, !tbaa !231, !noelle.pdg.inst.id !171 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %35 = load i8, i8* %33, align 1, !tbaa !227, !noelle.pdg.inst.id !56
DOALL:     External nodes: 5
DOALL:     	  %33 = getelementptr inbounds i8, i8* %32, i64 %28, !noelle.pdg.inst.id !225
DOALL:     	  %36 = zext i8 %35 to i32, !noelle.pdg.inst.id !228
DOALL:     	  br i1 %74, label %75, label %._crit_edge.._crit_edge_crit_edge, !prof !261, !noelle.loop.id !262, !noelle.pdg.inst.id !263
DOALL:     	  call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43
DOALL:     	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %35 = load i8, i8* %33, align 1, !tbaa !227, !noelle.pdg.inst.id !56 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %35 = load i8, i8* %33, align 1, !tbaa !227, !noelle.pdg.inst.id !56 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %40 = load i8, i8* %34, align 1, !tbaa !227, !noelle.pdg.inst.id !80
DOALL:     External nodes: 5
DOALL:     	  %34 = getelementptr inbounds i8, i8* %33, i64 1, !noelle.pdg.inst.id !226
DOALL:     	  %41 = zext i8 %40 to i32, !noelle.pdg.inst.id !233
DOALL:     	  br i1 %74, label %75, label %._crit_edge.._crit_edge_crit_edge, !prof !261, !noelle.loop.id !262, !noelle.pdg.inst.id !263
DOALL:     	  call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43
DOALL:     	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %40 = load i8, i8* %34, align 1, !tbaa !227, !noelle.pdg.inst.id !80 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %40 = load i8, i8* %34, align 1, !tbaa !227, !noelle.pdg.inst.id !80 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 4
DOALL:     	  %26 = phi i64 [ 0, %23 ], [ %101, %.._crit_edge11_crit_edge ], !noelle.pdg.inst.id !216
DOALL:     	  %101 = add nuw nsw i64 %26, 1, !noelle.pdg.inst.id !301
DOALL:     	  %103 = icmp eq i64 %101, %25, !noelle.pdg.inst.id !303
DOALL:     	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DOALL:     External nodes: 77
DOALL:     	  %27 = phi i32 [ %5, %23 ], [ %102, %.._crit_edge11_crit_edge ], !noelle.pdg.inst.id !217
DOALL:     	  %28 = zext i32 %27 to i64, !noelle.pdg.inst.id !218
DOALL:     	  br label %._crit_edge, !noelle.loop.id !219, !noelle.pdg.inst.id !220, !noelle.parallelizer.looporder !221
DOALL:     	  %29 = phi i64 [ 0, %._crit_edge11 ], [ %73, %._crit_edge.._crit_edge_crit_edge ], !noelle.pdg.inst.id !222
DOALL:     	  %30 = phi i32* [ %24, %._crit_edge11 ], [ %72, %._crit_edge.._crit_edge_crit_edge ], !noelle.pdg.inst.id !223
DOALL:     	  %31 = getelementptr inbounds i8*, i8** %21, i64 %29, !noelle.pdg.inst.id !224
DOALL:     	  %32 = load i8*, i8** %31, align 8, !tbaa !204, !noelle.pdg.inst.id !54
DOALL:     	  %33 = getelementptr inbounds i8, i8* %32, i64 %28, !noelle.pdg.inst.id !225
DOALL:     	  %34 = getelementptr inbounds i8, i8* %33, i64 1, !noelle.pdg.inst.id !226
DOALL:     	  %35 = load i8, i8* %33, align 1, !tbaa !227, !noelle.pdg.inst.id !56
DOALL:     	  %36 = zext i8 %35 to i32, !noelle.pdg.inst.id !228
DOALL:     	  %37 = add nsw i32 %36, -128, !noelle.pdg.inst.id !229
DOALL:     	  %38 = getelementptr inbounds i32, i32* %30, i64 1, !noelle.pdg.inst.id !230
DOALL:     	  store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58
DOALL:     	  %39 = getelementptr inbounds i8, i8* %34, i64 1, !noelle.pdg.inst.id !232
DOALL:     	  %40 = load i8, i8* %34, align 1, !tbaa !227, !noelle.pdg.inst.id !80
DOALL:     	  %41 = zext i8 %40 to i32, !noelle.pdg.inst.id !233
DOALL:     	  %42 = add nsw i32 %41, -128, !noelle.pdg.inst.id !234
DOALL:     	  %43 = getelementptr inbounds i32, i32* %30, i64 2, !noelle.pdg.inst.id !235
DOALL:     	  store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61
DOALL:     	  %44 = getelementptr inbounds i8, i8* %39, i64 1, !noelle.pdg.inst.id !236
DOALL:     	  %45 = load i8, i8* %39, align 1, !tbaa !227, !noelle.pdg.inst.id !93
DOALL:     	  %46 = zext i8 %45 to i32, !noelle.pdg.inst.id !237
DOALL:     	  %47 = add nsw i32 %46, -128, !noelle.pdg.inst.id !238
DOALL:     	  %48 = getelementptr inbounds i32, i32* %30, i64 3, !noelle.pdg.inst.id !239
DOALL:     	  store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63
DOALL:     	  %49 = getelementptr inbounds i8, i8* %44, i64 1, !noelle.pdg.inst.id !240
DOALL:     	  %50 = load i8, i8* %44, align 1, !tbaa !227, !noelle.pdg.inst.id !106
DOALL:     	  %51 = zext i8 %50 to i32, !noelle.pdg.inst.id !241
DOALL:     	  %52 = add nsw i32 %51, -128, !noelle.pdg.inst.id !242
DOALL:     	  %53 = getelementptr inbounds i32, i32* %30, i64 4, !noelle.pdg.inst.id !243
DOALL:     	  store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65
DOALL:     	  %54 = getelementptr inbounds i8, i8* %49, i64 1, !noelle.pdg.inst.id !244
DOALL:     	  %55 = load i8, i8* %49, align 1, !tbaa !227, !noelle.pdg.inst.id !119
DOALL:     	  %56 = zext i8 %55 to i32, !noelle.pdg.inst.id !245
DOALL:     	  %57 = add nsw i32 %56, -128, !noelle.pdg.inst.id !246
DOALL:     	  %58 = getelementptr inbounds i32, i32* %30, i64 5, !noelle.pdg.inst.id !247
DOALL:     	  store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67
DOALL:     	  %59 = getelementptr inbounds i8, i8* %54, i64 1, !noelle.pdg.inst.id !248
DOALL:     	  %60 = load i8, i8* %54, align 1, !tbaa !227, !noelle.pdg.inst.id !132
DOALL:     	  %61 = zext i8 %60 to i32, !noelle.pdg.inst.id !249
DOALL:     	  %62 = add nsw i32 %61, -128, !noelle.pdg.inst.id !250
DOALL:     	  %63 = getelementptr inbounds i32, i32* %30, i64 6, !noelle.pdg.inst.id !251
DOALL:     	  store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69
DOALL:     	  %64 = getelementptr inbounds i8, i8* %59, i64 1, !noelle.pdg.inst.id !252
DOALL:     	  %65 = load i8, i8* %59, align 1, !tbaa !227, !noelle.pdg.inst.id !145
DOALL:     	  %66 = zext i8 %65 to i32, !noelle.pdg.inst.id !253
DOALL:     	  %67 = add nsw i32 %66, -128, !noelle.pdg.inst.id !254
DOALL:     	  %68 = getelementptr inbounds i32, i32* %30, i64 7, !noelle.pdg.inst.id !255
DOALL:     	  store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71
DOALL:     	  %69 = load i8, i8* %64, align 1, !tbaa !227, !noelle.pdg.inst.id !158
DOALL:     	  %70 = zext i8 %69 to i32, !noelle.pdg.inst.id !256
DOALL:     	  %71 = add nsw i32 %70, -128, !noelle.pdg.inst.id !257
DOALL:     	  %72 = getelementptr inbounds i32, i32* %30, i64 8, !noelle.pdg.inst.id !258
DOALL:     	  store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73
DOALL:     	  %73 = add nuw nsw i64 %29, 1, !noelle.pdg.inst.id !259
DOALL:     	  %74 = icmp eq i64 %73, 8, !noelle.pdg.inst.id !260
DOALL:     	  br i1 %74, label %75, label %._crit_edge.._crit_edge_crit_edge, !prof !261, !noelle.loop.id !262, !noelle.pdg.inst.id !263
DOALL:     	  call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43
DOALL:     	  br label %._crit_edge10, !noelle.pdg.inst.id !266
DOALL:     	  %76 = phi i64 [ 0, %75 ], [ %98, %._crit_edge9.._crit_edge10_crit_edge ], !noelle.pdg.inst.id !267
DOALL:     	  %77 = getelementptr inbounds i32, i32* %18, i64 %76, !noelle.pdg.inst.id !268
DOALL:     	  %78 = load i32, i32* %77, align 4, !tbaa !231, !noelle.pdg.inst.id !171
DOALL:     	  %79 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %76, !noelle.pdg.inst.id !269
DOALL:     	  %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78
DOALL:     	  %81 = icmp slt i32 %80, 0, !noelle.pdg.inst.id !270
DOALL:     	  %82 = ashr i32 %78, 1, !noelle.pdg.inst.id !271
DOALL:     	  br i1 %81, label %83, label %90, !prof !272, !noelle.loop.id !273, !noelle.pdg.inst.id !274
DOALL:     	  %95 = phi i32 [ %89, %._crit_edge8 ], [ %94, %93 ], [ 0, %.._crit_edge9_crit_edge ], !noelle.pdg.inst.id !292
DOALL:     	  %96 = trunc i32 %95 to i16, !noelle.pdg.inst.id !293
DOALL:     	  %97 = getelementptr inbounds [64 x i16], [64 x i16]* %3, i64 %26, i64 %76, !noelle.pdg.inst.id !294
DOALL:     	  store i16 %96, i16* %97, align 2, !tbaa !295, !noelle.pdg.inst.id !182
DOALL:     	  %98 = add nuw nsw i64 %76, 1, !noelle.pdg.inst.id !296
DOALL:     	  %99 = icmp eq i64 %98, 64, !noelle.pdg.inst.id !297
DOALL:     	  br i1 %99, label %100, label %._crit_edge9.._crit_edge10_crit_edge, !prof !298, !noelle.pdg.inst.id !299
DOALL:     	  %102 = add i32 %27, 8, !noelle.pdg.inst.id !302
DOALL:     	  br label %._crit_edge11, !noelle.pdg.inst.id !306
DOALL:     Edges: 86
DOALL:     Loop-carried data dependences
DOALL:         %101 = add nuw nsw i64 %26, 1, !noelle.pdg.inst.id !301 --->   %26 = phi i64 [ 0, %23 ], [ %101, %.._crit_edge11_crit_edge ], !noelle.pdg.inst.id !216 via variable
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %45 = load i8, i8* %39, align 1, !tbaa !227, !noelle.pdg.inst.id !93
DOALL:     External nodes: 5
DOALL:     	  %39 = getelementptr inbounds i8, i8* %34, i64 1, !noelle.pdg.inst.id !232
DOALL:     	  %46 = zext i8 %45 to i32, !noelle.pdg.inst.id !237
DOALL:     	  br i1 %74, label %75, label %._crit_edge.._crit_edge_crit_edge, !prof !261, !noelle.loop.id !262, !noelle.pdg.inst.id !263
DOALL:     	  call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43
DOALL:     	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %45 = load i8, i8* %39, align 1, !tbaa !227, !noelle.pdg.inst.id !93 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %45 = load i8, i8* %39, align 1, !tbaa !227, !noelle.pdg.inst.id !93 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %55 = load i8, i8* %49, align 1, !tbaa !227, !noelle.pdg.inst.id !119
DOALL:     External nodes: 5
DOALL:     	  %49 = getelementptr inbounds i8, i8* %44, i64 1, !noelle.pdg.inst.id !240
DOALL:     	  %56 = zext i8 %55 to i32, !noelle.pdg.inst.id !245
DOALL:     	  br i1 %74, label %75, label %._crit_edge.._crit_edge_crit_edge, !prof !261, !noelle.loop.id !262, !noelle.pdg.inst.id !263
DOALL:     	  call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43
DOALL:     	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %55 = load i8, i8* %49, align 1, !tbaa !227, !noelle.pdg.inst.id !119 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %55 = load i8, i8* %49, align 1, !tbaa !227, !noelle.pdg.inst.id !119 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %60 = load i8, i8* %54, align 1, !tbaa !227, !noelle.pdg.inst.id !132
DOALL:     External nodes: 5
DOALL:     	  %54 = getelementptr inbounds i8, i8* %49, i64 1, !noelle.pdg.inst.id !244
DOALL:     	  %61 = zext i8 %60 to i32, !noelle.pdg.inst.id !249
DOALL:     	  br i1 %74, label %75, label %._crit_edge.._crit_edge_crit_edge, !prof !261, !noelle.loop.id !262, !noelle.pdg.inst.id !263
DOALL:     	  call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43
DOALL:     	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %60 = load i8, i8* %54, align 1, !tbaa !227, !noelle.pdg.inst.id !132 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %60 = load i8, i8* %54, align 1, !tbaa !227, !noelle.pdg.inst.id !132 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %65 = load i8, i8* %59, align 1, !tbaa !227, !noelle.pdg.inst.id !145
DOALL:     External nodes: 5
DOALL:     	  %59 = getelementptr inbounds i8, i8* %54, i64 1, !noelle.pdg.inst.id !248
DOALL:     	  %66 = zext i8 %65 to i32, !noelle.pdg.inst.id !253
DOALL:     	  br i1 %74, label %75, label %._crit_edge.._crit_edge_crit_edge, !prof !261, !noelle.loop.id !262, !noelle.pdg.inst.id !263
DOALL:     	  call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43
DOALL:     	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %65 = load i8, i8* %59, align 1, !tbaa !227, !noelle.pdg.inst.id !145 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %65 = load i8, i8* %59, align 1, !tbaa !227, !noelle.pdg.inst.id !145 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %69 = load i8, i8* %64, align 1, !tbaa !227, !noelle.pdg.inst.id !158
DOALL:     External nodes: 5
DOALL:     	  %64 = getelementptr inbounds i8, i8* %59, i64 1, !noelle.pdg.inst.id !252
DOALL:     	  %70 = zext i8 %69 to i32, !noelle.pdg.inst.id !256
DOALL:     	  br i1 %74, label %75, label %._crit_edge.._crit_edge_crit_edge, !prof !261, !noelle.loop.id !262, !noelle.pdg.inst.id !263
DOALL:     	  call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43
DOALL:     	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %69 = load i8, i8* %64, align 1, !tbaa !227, !noelle.pdg.inst.id !158 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DOALL:         %69 = load i8, i8* %64, align 1, !tbaa !227, !noelle.pdg.inst.id !158 --->   call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43 via memory
DSWP: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences:  Initial number of partitions: 27
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Exit
DSWP:  Before partitioning the SCCDAG
Heuristic:   PCA: No candidates
DSWP:  Final number of partitions: 6
DSWP:  After partitioning the SCCDAG
DSWP:  There are 6 partitions in the SCCDAG
DSWP:  Pipeline stages
DSWP:    Stage: 0
DSWP:    SCC
DSWP:      %26 = phi i64 [ 0, %23 ], [ %101, %.._crit_edge11_crit_edge ], !noelle.pdg.inst.id !216
DSWP:      %101 = add nuw nsw i64 %26, 1, !noelle.pdg.inst.id !301
DSWP:      %103 = icmp eq i64 %101, %25, !noelle.pdg.inst.id !303
DSWP:      br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DSWP:    
DSWP:    Stage: 1
DSWP:    SCC
DSWP:      %29 = phi i64 [ 0, %._crit_edge11 ], [ %73, %._crit_edge.._crit_edge_crit_edge ], !noelle.pdg.inst.id !222
DSWP:      %73 = add nuw nsw i64 %29, 1, !noelle.pdg.inst.id !259
DSWP:      %74 = icmp eq i64 %73, 8, !noelle.pdg.inst.id !260
DSWP:      br i1 %74, label %75, label %._crit_edge.._crit_edge_crit_edge, !prof !261, !noelle.loop.id !262, !noelle.pdg.inst.id !263
DSWP:    
DSWP:    Stage: 2
DSWP:    SCC
DSWP:      %30 = phi i32* [ %24, %._crit_edge11 ], [ %72, %._crit_edge.._crit_edge_crit_edge ], !noelle.pdg.inst.id !223
DSWP:      %72 = getelementptr inbounds i32, i32* %30, i64 8, !noelle.pdg.inst.id !258
DSWP:    
DSWP:    Stage: 3
DSWP:    SCC
DSWP:      %76 = phi i64 [ 0, %75 ], [ %98, %._crit_edge9.._crit_edge10_crit_edge ], !noelle.pdg.inst.id !267
DSWP:      %98 = add nuw nsw i64 %76, 1, !noelle.pdg.inst.id !296
DSWP:      %99 = icmp eq i64 %98, 64, !noelle.pdg.inst.id !297
DSWP:      br i1 %99, label %100, label %._crit_edge9.._crit_edge10_crit_edge, !prof !298, !noelle.pdg.inst.id !299
DSWP:    
DSWP:    Stage: 4
DSWP:    SCC
DSWP:      %27 = phi i32 [ %5, %23 ], [ %102, %.._crit_edge11_crit_edge ], !noelle.pdg.inst.id !217
DSWP:      %102 = add i32 %27, 8, !noelle.pdg.inst.id !302
DSWP:    
DSWP:    Stage: 5
DSWP:    SCC
DSWP:      %32 = load i8*, i8** %31, align 8, !tbaa !204, !noelle.pdg.inst.id !54
DSWP:    
DSWP:    SCC
DSWP:      call void %13(i32* nonnull %24) #21, !prof !265, !noelle.pdg.inst.id !43
DSWP:    
DSWP:    SCC
DSWP:      store i16 %96, i16* %97, align 2, !tbaa !295, !noelle.pdg.inst.id !182
DSWP:    
DSWP:    SCC
DSWP:      store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58
DSWP:      store i32 %42, i32* %38, align 4, !tbaa !231, !noelle.pdg.inst.id !61
DSWP:      store i32 %47, i32* %43, align 4, !tbaa !231, !noelle.pdg.inst.id !63
DSWP:      store i32 %52, i32* %48, align 4, !tbaa !231, !noelle.pdg.inst.id !65
DSWP:      store i32 %57, i32* %53, align 4, !tbaa !231, !noelle.pdg.inst.id !67
DSWP:      store i32 %62, i32* %58, align 4, !tbaa !231, !noelle.pdg.inst.id !69
DSWP:      store i32 %67, i32* %63, align 4, !tbaa !231, !noelle.pdg.inst.id !71
DSWP:      store i32 %71, i32* %68, align 4, !tbaa !231, !noelle.pdg.inst.id !73
DSWP:      %80 = load i32, i32* %79, align 4, !tbaa !231, !noelle.pdg.inst.id !78
DSWP:    
DSWP:    SCC
DSWP:      %52 = add nsw i32 %51, -128, !noelle.pdg.inst.id !242
DSWP:    
DSWP:    SCC
DSWP:      %50 = load i8, i8* %44, align 1, !tbaa !227, !noelle.pdg.inst.id !106
DSWP:    
DSWP:    SCC
DSWP:      %82 = ashr i32 %78, 1, !noelle.pdg.inst.id !271
DSWP:    
DSWP:    SCC
DSWP:      %78 = load i32, i32* %77, align 4, !tbaa !231, !noelle.pdg.inst.id !171
DSWP:    
DSWP:    SCC
DSWP:      %37 = add nsw i32 %36, -128, !noelle.pdg.inst.id !229
DSWP:    
DSWP:    SCC
DSWP:      %35 = load i8, i8* %33, align 1, !tbaa !227, !noelle.pdg.inst.id !56
DSWP:    
DSWP:    SCC
DSWP:      %42 = add nsw i32 %41, -128, !noelle.pdg.inst.id !234
DSWP:    
DSWP:    SCC
DSWP:      %40 = load i8, i8* %34, align 1, !tbaa !227, !noelle.pdg.inst.id !80
DSWP:    
DSWP:    SCC
DSWP:      %47 = add nsw i32 %46, -128, !noelle.pdg.inst.id !238
DSWP:    
DSWP:    SCC
DSWP:      %45 = load i8, i8* %39, align 1, !tbaa !227, !noelle.pdg.inst.id !93
DSWP:    
DSWP:    SCC
DSWP:      %57 = add nsw i32 %56, -128, !noelle.pdg.inst.id !246
DSWP:    
DSWP:    SCC
DSWP:      %55 = load i8, i8* %49, align 1, !tbaa !227, !noelle.pdg.inst.id !119
DSWP:    
DSWP:    SCC
DSWP:      %62 = add nsw i32 %61, -128, !noelle.pdg.inst.id !250
DSWP:    
DSWP:    SCC
DSWP:      %60 = load i8, i8* %54, align 1, !tbaa !227, !noelle.pdg.inst.id !132
DSWP:    
DSWP:    SCC
DSWP:      %67 = add nsw i32 %66, -128, !noelle.pdg.inst.id !254
DSWP:    
DSWP:    SCC
DSWP:      %65 = load i8, i8* %59, align 1, !tbaa !227, !noelle.pdg.inst.id !145
DSWP:    
DSWP:    SCC
DSWP:      %71 = add nsw i32 %70, -128, !noelle.pdg.inst.id !257
DSWP:    
DSWP:    SCC
DSWP:      %69 = load i8, i8* %64, align 1, !tbaa !227, !noelle.pdg.inst.id !158
DSWP:    
DSWP:  Queues that connect the pipeline stages
DSWP:    Stage: 0
DSWP:      Push value queues: 4 7 8 9 10 11 
DSWP:      Pop value queues: 
DSWP:    Stage: 1
DSWP:      Push value queues: 0 5 6 
DSWP:      Pop value queues: 11 
DSWP:    Stage: 2
DSWP:      Push value queues: 1 
DSWP:      Pop value queues: 6 9 
DSWP:    Stage: 3
DSWP:      Push value queues: 3 12 
DSWP:      Pop value queues: 10 
DSWP:    Stage: 4
DSWP:      Push value queues: 2 
DSWP:      Pop value queues: 8 
DSWP:    Stage: 5
DSWP:      Push value queues: 
DSWP:      Pop value queues: 0 1 2 3 4 5 7 12 
DSWP:    Queue: 0
DSWP:     Producer:	  %29 = phi i64 [ 0, %._crit_edge11 ], [ %73, %._crit_edge.._crit_edge_crit_edge ], !noelle.pdg.inst.id !222
DSWP:     Consumer:	  %31 = getelementptr inbounds i8*, i8** %21, i64 %29, !noelle.pdg.inst.id !224
DSWP:    Queue: 1
DSWP:     Producer:	  %30 = phi i32* [ %24, %._crit_edge11 ], [ %72, %._crit_edge.._crit_edge_crit_edge ], !noelle.pdg.inst.id !223
DSWP:     Consumer:	  %38 = getelementptr inbounds i32, i32* %30, i64 1, !noelle.pdg.inst.id !230
DSWP:     Consumer:	  store i32 %37, i32* %30, align 4, !tbaa !231, !noelle.pdg.inst.id !58
DSWP:     Consumer:	  %43 = getelementptr inbounds i32, i32* %30, i64 2, !noelle.pdg.inst.id !235
DSWP:     Consumer:	  %48 = getelementptr inbounds i32, i32* %30, i64 3, !noelle.pdg.inst.id !239
DSWP:     Consumer:	  %53 = getelementptr inbounds i32, i32* %30, i64 4, !noelle.pdg.inst.id !243
DSWP:     Consumer:	  %58 = getelementptr inbounds i32, i32* %30, i64 5, !noelle.pdg.inst.id !247
DSWP:     Consumer:	  %63 = getelementptr inbounds i32, i32* %30, i64 6, !noelle.pdg.inst.id !251
DSWP:     Consumer:	  %68 = getelementptr inbounds i32, i32* %30, i64 7, !noelle.pdg.inst.id !255
DSWP:    Queue: 2
DSWP:     Producer:	  %27 = phi i32 [ %5, %23 ], [ %102, %.._crit_edge11_crit_edge ], !noelle.pdg.inst.id !217
DSWP:     Consumer:	  %28 = zext i32 %27 to i64, !noelle.pdg.inst.id !218
DSWP:    Queue: 3
DSWP:     Producer:	  %76 = phi i64 [ 0, %75 ], [ %98, %._crit_edge9.._crit_edge10_crit_edge ], !noelle.pdg.inst.id !267
DSWP:     Consumer:	  %77 = getelementptr inbounds i32, i32* %18, i64 %76, !noelle.pdg.inst.id !268
DSWP:     Consumer:	  %79 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %76, !noelle.pdg.inst.id !269
DSWP:     Consumer:	  %97 = getelementptr inbounds [64 x i16], [64 x i16]* %3, i64 %26, i64 %76, !noelle.pdg.inst.id !294
DSWP:    Queue: 4
DSWP:     Producer:	  %26 = phi i64 [ 0, %23 ], [ %101, %.._crit_edge11_crit_edge ], !noelle.pdg.inst.id !216
DSWP:     Consumer:	  %97 = getelementptr inbounds [64 x i16], [64 x i16]* %3, i64 %26, i64 %76, !noelle.pdg.inst.id !294
DSWP:    Queue: 5
DSWP:     Producer:	  %74 = icmp eq i64 %73, 8, !noelle.pdg.inst.id !260
DSWP:     Consumer:	  br i1 %74, label %75, label %._crit_edge.._crit_edge_crit_edge, !prof !261, !noelle.loop.id !262, !noelle.pdg.inst.id !263
DSWP:    Queue: 6
DSWP:     Producer:	  %74 = icmp eq i64 %73, 8, !noelle.pdg.inst.id !260
DSWP:     Consumer:	  br i1 %74, label %75, label %._crit_edge.._crit_edge_crit_edge, !prof !261, !noelle.loop.id !262, !noelle.pdg.inst.id !263
DSWP:    Queue: 7
DSWP:     Producer:	  %103 = icmp eq i64 %101, %25, !noelle.pdg.inst.id !303
DSWP:     Consumer:	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DSWP:    Queue: 8
DSWP:     Producer:	  %103 = icmp eq i64 %101, %25, !noelle.pdg.inst.id !303
DSWP:     Consumer:	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DSWP:    Queue: 9
DSWP:     Producer:	  %103 = icmp eq i64 %101, %25, !noelle.pdg.inst.id !303
DSWP:     Consumer:	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DSWP:    Queue: 10
DSWP:     Producer:	  %103 = icmp eq i64 %101, %25, !noelle.pdg.inst.id !303
DSWP:     Consumer:	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DSWP:    Queue: 11
DSWP:     Producer:	  %103 = icmp eq i64 %101, %25, !noelle.pdg.inst.id !303
DSWP:     Consumer:	  br i1 %103, label %.loopexit.loopexit, label %.._crit_edge11_crit_edge, !prof !304, !noelle.pdg.inst.id !305
DSWP:    Queue: 12
DSWP:     Producer:	  %99 = icmp eq i64 %98, 64, !noelle.pdg.inst.id !297
DSWP:     Consumer:	  br i1 %99, label %100, label %._crit_edge9.._crit_edge10_crit_edge, !prof !298, !noelle.pdg.inst.id !299
DSWP:  Environment
DSWP:    Pre loop env 1, producer:	[64 x i16]* %3
DSWP:    Pre loop env 2, producer:	i32 %5
DSWP:    Pre loop env 3, producer:	  %8 = alloca [64 x i32], align 16, !noelle.pdg.inst.id !184
DSWP:    Pre loop env 4, producer:	  %13 = load void (i32*)*, void (i32*)** %12, align 8, !tbaa !196, !noelle.pdg.inst.id !48
DSWP:    Pre loop env 5, producer:	  %18 = load i32*, i32** %17, align 8, !tbaa !204, !noelle.pdg.inst.id !52
DSWP:    Pre loop env 6, producer:	  %21 = getelementptr inbounds i8*, i8** %2, i64 %20, !noelle.pdg.inst.id !208
DSWP:    Pre loop env 7, producer:	  %24 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 0, !noelle.pdg.inst.id !213
DSWP:    Pre loop env 8, producer:	  %25 = zext i32 %6 to i64, !noelle.pdg.inst.id !214
DSWP:  Create 6 pipeline stages
DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 0:

define void @noelle_task_1(i8*, i8*) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [64 x i64]*
  %3 = bitcast i8* %1 to [13 x i8*]*
  %4 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 4
  %5 = load i8*, i8** %4
  %6 = alloca i64
  %7 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 7
  %8 = load i8*, i8** %7
  %9 = alloca i1
  %10 = bitcast i1* %9 to i8*
  %11 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 8
  %12 = load i8*, i8** %11
  %13 = alloca i1
  %14 = bitcast i1* %13 to i8*
  %15 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 9
  %16 = load i8*, i8** %15
  %17 = alloca i1
  %18 = bitcast i1* %17 to i8*
  %19 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 10
  %20 = load i8*, i8** %19
  %21 = alloca i1
  %22 = bitcast i1* %21 to i8*
  %23 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 11
  %24 = load i8*, i8** %23
  %25 = alloca i1
  %26 = bitcast i1* %25 to i8*
  %27 = getelementptr inbounds [64 x i64], [64 x i64]* %noelle.environment_variable.pointer, i64 0, i64 56
  %noelle_environment_variable_7 = load i64, i64* %27
  br label %30

28:                                               ; preds = %29
  ret void

29:                                               ; preds = %32
  br label %28

30:                                               ; preds = %2, %35
  %31 = phi i64 [ 0, %2 ], [ %33, %35 ], !noelle.pdg.inst.id !30
  store i64 %31, i64* %6
  call void @queuePush64(i8* %5, i64* %6)
  br label %37

32:                                               ; preds = %36
  %33 = add nuw nsw i64 %31, 1, !noelle.pdg.inst.id !31
  %34 = icmp eq i64 %33, %noelle_environment_variable_7, !noelle.pdg.inst.id !32
  store i1 %34, i1* %25
  call void @queuePush8(i8* %24, i8* %26)
  store i1 %34, i1* %21
  call void @queuePush8(i8* %20, i8* %22)
  store i1 %34, i1* %17
  call void @queuePush8(i8* %16, i8* %18)
  store i1 %34, i1* %13
  call void @queuePush8(i8* %12, i8* %14)
  store i1 %34, i1* %9
  call void @queuePush8(i8* %8, i8* %10)
  br i1 %34, label %29, label %35, !prof !33, !noelle.pdg.inst.id !34

35:                                               ; preds = %32
  br label %30

36:                                               ; preds = %39
  br label %32

37:                                               ; preds = %30
  br label %38

38:                                               ; preds = %37
  br label %39

39:                                               ; preds = %38
  br label %36
}

DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 1:

define void @noelle_task_2(i8*, i8*) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [64 x i64]*
  %3 = bitcast i8* %1 to [13 x i8*]*
  %4 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 0
  %5 = load i8*, i8** %4
  %6 = alloca i64
  %7 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 5
  %8 = load i8*, i8** %7
  %9 = alloca i1
  %10 = bitcast i1* %9 to i8*
  %11 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 6
  %12 = load i8*, i8** %11
  %13 = alloca i1
  %14 = bitcast i1* %13 to i8*
  %15 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 11
  %16 = load i8*, i8** %15
  %17 = alloca i1
  %18 = bitcast i1* %17 to i8*
  br label %29

19:                                               ; preds = %20
  ret void

20:                                               ; preds = %25
  br label %19

21:                                               ; preds = %30, %29
  %22 = phi i64 [ 0, %29 ], [ %23, %30 ], !noelle.pdg.inst.id !30
  store i64 %22, i64* %6
  call void @queuePush64(i8* %5, i64* %6)
  %23 = add nuw nsw i64 %22, 1, !noelle.pdg.inst.id !31
  %24 = icmp eq i64 %23, 8, !noelle.pdg.inst.id !32
  store i1 %24, i1* %13
  call void @queuePush8(i8* %12, i8* %14)
  store i1 %24, i1* %9
  call void @queuePush8(i8* %8, i8* %10)
  br i1 %24, label %31, label %30, !prof !33, !noelle.loop.id !34, !noelle.pdg.inst.id !35

25:                                               ; preds = %28
  call void @queuePop8(i8* %16, i8* %18)
  %26 = load i1, i1* %17
  br i1 %26, label %20, label %27, !prof !36, !noelle.pdg.inst.id !37

27:                                               ; preds = %25
  br label %29

28:                                               ; preds = %32
  br label %25

29:                                               ; preds = %2, %27
  br label %21

30:                                               ; preds = %21
  br label %21

31:                                               ; preds = %21
  br label %32

32:                                               ; preds = %31
  br label %28
}

DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 2:

define void @noelle_task_3(i8*, i8*) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [64 x i64]*
  %3 = bitcast i8* %1 to [13 x i8*]*
  %4 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 1
  %5 = load i8*, i8** %4
  %6 = alloca i32*
  %7 = bitcast i32** %6 to i64*
  %8 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 6
  %9 = load i8*, i8** %8
  %10 = alloca i1
  %11 = bitcast i1* %10 to i8*
  %12 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 9
  %13 = load i8*, i8** %12
  %14 = alloca i1
  %15 = bitcast i1* %14 to i8*
  %16 = getelementptr inbounds [64 x i64], [64 x i64]* %noelle.environment_variable.pointer, i64 0, i64 48
  %17 = bitcast i64* %16 to i32**
  %noelle_environment_variable_6 = load i32*, i32** %17
  br label %28

18:                                               ; preds = %19
  ret void

19:                                               ; preds = %24
  br label %18

20:                                               ; preds = %29, %28
  %21 = phi i32* [ %noelle_environment_variable_6, %28 ], [ %23, %29 ], !noelle.pdg.inst.id !30
  store i32* %21, i32** %6
  call void @queuePush64(i8* %5, i64* %7)
  call void @queuePop8(i8* %9, i8* %11)
  %22 = load i1, i1* %10
  %23 = getelementptr inbounds i32, i32* %21, i64 8, !noelle.pdg.inst.id !31
  br i1 %22, label %30, label %29, !prof !32, !noelle.loop.id !33, !noelle.pdg.inst.id !34

24:                                               ; preds = %27
  call void @queuePop8(i8* %13, i8* %15)
  %25 = load i1, i1* %14
  br i1 %25, label %19, label %26, !prof !35, !noelle.pdg.inst.id !36

26:                                               ; preds = %24
  br label %28

27:                                               ; preds = %31
  br label %24

28:                                               ; preds = %2, %26
  br label %20

29:                                               ; preds = %20
  br label %20

30:                                               ; preds = %20
  br label %31

31:                                               ; preds = %30
  br label %27
}

DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 3:

define void @noelle_task_4(i8*, i8*) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [64 x i64]*
  %3 = bitcast i8* %1 to [13 x i8*]*
  %4 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 3
  %5 = load i8*, i8** %4
  %6 = alloca i64
  %7 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 12
  %8 = load i8*, i8** %7
  %9 = alloca i1
  %10 = bitcast i1* %9 to i8*
  %11 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 10
  %12 = load i8*, i8** %11
  %13 = alloca i1
  %14 = bitcast i1* %13 to i8*
  br label %27

15:                                               ; preds = %16
  ret void

16:                                               ; preds = %22
  br label %15

17:                                               ; preds = %25, %28
  %18 = phi i64 [ 0, %28 ], [ %20, %25 ], !noelle.pdg.inst.id !30
  store i64 %18, i64* %6
  call void @queuePush64(i8* %5, i64* %6)
  br label %19

19:                                               ; preds = %17
  %20 = add nuw nsw i64 %18, 1, !noelle.pdg.inst.id !31
  %21 = icmp eq i64 %20, 64, !noelle.pdg.inst.id !32
  store i1 %21, i1* %9
  call void @queuePush8(i8* %8, i8* %10)
  br i1 %21, label %22, label %25, !prof !33, !noelle.pdg.inst.id !34

22:                                               ; preds = %19
  call void @queuePop8(i8* %12, i8* %14)
  %23 = load i1, i1* %13
  br i1 %23, label %16, label %24, !prof !35, !noelle.pdg.inst.id !36

24:                                               ; preds = %22
  br label %27

25:                                               ; preds = %19
  br label %17

26:                                               ; preds = %27
  br label %28

27:                                               ; preds = %2, %24
  br label %26

28:                                               ; preds = %26
  br label %17
}

DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 4:

define void @noelle_task_5(i8*, i8*) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [64 x i64]*
  %3 = bitcast i8* %1 to [13 x i8*]*
  %4 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 2
  %5 = load i8*, i8** %4
  %6 = alloca i32
  %7 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 8
  %8 = load i8*, i8** %7
  %9 = alloca i1
  %10 = bitcast i1* %9 to i8*
  %11 = getelementptr inbounds [64 x i64], [64 x i64]* %noelle.environment_variable.pointer, i64 0, i64 8
  %12 = bitcast i64* %11 to i32*
  %noelle_environment_variable_1 = load i32, i32* %12
  br label %15

13:                                               ; preds = %14
  ret void

14:                                               ; preds = %17
  br label %13

15:                                               ; preds = %2, %20
  %16 = phi i32 [ %noelle_environment_variable_1, %2 ], [ %19, %20 ], !noelle.pdg.inst.id !30
  store i32 %16, i32* %6
  call void @queuePush32(i8* %5, i32* %6)
  br label %22

17:                                               ; preds = %21
  call void @queuePop8(i8* %8, i8* %10)
  %18 = load i1, i1* %9
  %19 = add i32 %16, 8, !noelle.pdg.inst.id !31
  br i1 %18, label %14, label %20, !prof !32, !noelle.pdg.inst.id !33

20:                                               ; preds = %17
  br label %15

21:                                               ; preds = %24
  br label %17

22:                                               ; preds = %15
  br label %23

23:                                               ; preds = %22
  br label %24

24:                                               ; preds = %23
  br label %21
}

DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 5:

define void @noelle_task_6(i8*, i8*) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [64 x i64]*
  %3 = bitcast i8* %1 to [13 x i8*]*
  %4 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 0
  %5 = load i8*, i8** %4
  %6 = alloca i64
  %7 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 1
  %8 = load i8*, i8** %7
  %9 = alloca i32*
  %10 = bitcast i32** %9 to i64*
  %11 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 2
  %12 = load i8*, i8** %11
  %13 = alloca i32
  %14 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 3
  %15 = load i8*, i8** %14
  %16 = alloca i64
  %17 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 4
  %18 = load i8*, i8** %17
  %19 = alloca i64
  %20 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 5
  %21 = load i8*, i8** %20
  %22 = alloca i1
  %23 = bitcast i1* %22 to i8*
  %24 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 7
  %25 = load i8*, i8** %24
  %26 = alloca i1
  %27 = bitcast i1* %26 to i8*
  %28 = getelementptr inbounds [13 x i8*], [13 x i8*]* %3, i64 0, i64 12
  %29 = load i8*, i8** %28
  %30 = alloca i1
  %31 = bitcast i1* %30 to i8*
  %32 = getelementptr inbounds [64 x i64], [64 x i64]* %noelle.environment_variable.pointer, i64 0, i64 0
  %33 = bitcast i64* %32 to [64 x i16]**
  %noelle_environment_variable_0 = load [64 x i16]*, [64 x i16]** %33
  %34 = getelementptr inbounds [64 x i64], [64 x i64]* %noelle.environment_variable.pointer, i64 0, i64 16
  %35 = bitcast i64* %34 to [64 x i32]**
  %noelle_environment_variable_2 = load [64 x i32]*, [64 x i32]** %35
  %36 = getelementptr inbounds [64 x i64], [64 x i64]* %noelle.environment_variable.pointer, i64 0, i64 24
  %37 = bitcast i64* %36 to void (i32*)**
  %noelle_environment_variable_3 = load void (i32*)*, void (i32*)** %37
  %38 = getelementptr inbounds [64 x i64], [64 x i64]* %noelle.environment_variable.pointer, i64 0, i64 32
  %39 = bitcast i64* %38 to i32**
  %noelle_environment_variable_4 = load i32*, i32** %39
  %40 = getelementptr inbounds [64 x i64], [64 x i64]* %noelle.environment_variable.pointer, i64 0, i64 40
  %41 = bitcast i64* %40 to i8***
  %noelle_environment_variable_5 = load i8**, i8*** %41
  %42 = getelementptr inbounds [64 x i64], [64 x i64]* %noelle.environment_variable.pointer, i64 0, i64 48
  %43 = bitcast i64* %42 to i32**
  %noelle_environment_variable_6 = load i32*, i32** %43
  br label %46

44:                                               ; preds = %45
  ret void

45:                                               ; preds = %122
  br label %44

46:                                               ; preds = %2, %124
  call void @queuePop64(i8* %18, i64* %19)
  %47 = load i64, i64* %19
  call void @queuePop32(i8* %12, i32* %13)
  %48 = load i32, i32* %13
  %49 = zext i32 %48 to i64, !noelle.pdg.inst.id !30
  br label %50

50:                                               ; preds = %128, %46
  call void @queuePop8(i8* %21, i8* %23)
  %51 = load i1, i1* %22
  call void @queuePop64(i8* %8, i64* %10)
  %52 = load i32*, i32** %9
  call void @queuePop64(i8* %5, i64* %6)
  %53 = load i64, i64* %6
  %54 = getelementptr inbounds i8*, i8** %noelle_environment_variable_5, i64 %53, !noelle.pdg.inst.id !31
  %55 = load i8*, i8** %54, align 8, !tbaa !32, !noelle.pdg.inst.id !36
  %56 = getelementptr inbounds i8, i8* %55, i64 %49, !noelle.pdg.inst.id !37
  %57 = getelementptr inbounds i8, i8* %56, i64 1, !noelle.pdg.inst.id !38
  %58 = load i8, i8* %56, align 1, !tbaa !39, !noelle.pdg.inst.id !40
  %59 = zext i8 %58 to i32, !noelle.pdg.inst.id !41
  %60 = add nsw i32 %59, -128, !noelle.pdg.inst.id !42
  %61 = getelementptr inbounds i32, i32* %52, i64 1, !noelle.pdg.inst.id !43
  store i32 %60, i32* %52, align 4, !tbaa !44, !noelle.pdg.inst.id !46
  %62 = getelementptr inbounds i8, i8* %57, i64 1, !noelle.pdg.inst.id !47
  %63 = load i8, i8* %57, align 1, !tbaa !39, !noelle.pdg.inst.id !48
  %64 = zext i8 %63 to i32, !noelle.pdg.inst.id !49
  %65 = add nsw i32 %64, -128, !noelle.pdg.inst.id !50
  %66 = getelementptr inbounds i32, i32* %52, i64 2, !noelle.pdg.inst.id !51
  store i32 %65, i32* %61, align 4, !tbaa !44, !noelle.pdg.inst.id !52
  %67 = getelementptr inbounds i8, i8* %62, i64 1, !noelle.pdg.inst.id !53
  %68 = load i8, i8* %62, align 1, !tbaa !39, !noelle.pdg.inst.id !54
  %69 = zext i8 %68 to i32, !noelle.pdg.inst.id !55
  %70 = add nsw i32 %69, -128, !noelle.pdg.inst.id !56
  %71 = getelementptr inbounds i32, i32* %52, i64 3, !noelle.pdg.inst.id !57
  store i32 %70, i32* %66, align 4, !tbaa !44, !noelle.pdg.inst.id !58
  %72 = getelementptr inbounds i8, i8* %67, i64 1, !noelle.pdg.inst.id !59
  %73 = load i8, i8* %67, align 1, !tbaa !39, !noelle.pdg.inst.id !60
  %74 = zext i8 %73 to i32, !noelle.pdg.inst.id !61
  %75 = add nsw i32 %74, -128, !noelle.pdg.inst.id !62
  %76 = getelementptr inbounds i32, i32* %52, i64 4, !noelle.pdg.inst.id !63
  store i32 %75, i32* %71, align 4, !tbaa !44, !noelle.pdg.inst.id !64
  %77 = getelementptr inbounds i8, i8* %72, i64 1, !noelle.pdg.inst.id !65
  %78 = load i8, i8* %72, align 1, !tbaa !39, !noelle.pdg.inst.id !66
  %79 = zext i8 %78 to i32, !noelle.pdg.inst.id !67
  %80 = add nsw i32 %79, -128, !noelle.pdg.inst.id !68
  %81 = getelementptr inbounds i32, i32* %52, i64 5, !noelle.pdg.inst.id !69
  store i32 %80, i32* %76, align 4, !tbaa !44, !noelle.pdg.inst.id !70
  %82 = getelementptr inbounds i8, i8* %77, i64 1, !noelle.pdg.inst.id !71
  %83 = load i8, i8* %77, align 1, !tbaa !39, !noelle.pdg.inst.id !72
  %84 = zext i8 %83 to i32, !noelle.pdg.inst.id !73
  %85 = add nsw i32 %84, -128, !noelle.pdg.inst.id !74
  %86 = getelementptr inbounds i32, i32* %52, i64 6, !noelle.pdg.inst.id !75
  store i32 %85, i32* %81, align 4, !tbaa !44, !noelle.pdg.inst.id !76
  %87 = getelementptr inbounds i8, i8* %82, i64 1, !noelle.pdg.inst.id !77
  %88 = load i8, i8* %82, align 1, !tbaa !39, !noelle.pdg.inst.id !78
  %89 = zext i8 %88 to i32, !noelle.pdg.inst.id !79
  %90 = add nsw i32 %89, -128, !noelle.pdg.inst.id !80
  %91 = getelementptr inbounds i32, i32* %52, i64 7, !noelle.pdg.inst.id !81
  store i32 %90, i32* %86, align 4, !tbaa !44, !noelle.pdg.inst.id !82
  %92 = load i8, i8* %87, align 1, !tbaa !39, !noelle.pdg.inst.id !83
  %93 = zext i8 %92 to i32, !noelle.pdg.inst.id !84
  %94 = add nsw i32 %93, -128, !noelle.pdg.inst.id !85
  store i32 %94, i32* %91, align 4, !tbaa !44, !noelle.pdg.inst.id !86
  br i1 %51, label %95, label %128, !prof !87, !noelle.loop.id !88, !noelle.pdg.inst.id !89

95:                                               ; preds = %50
  call void %noelle_environment_variable_3(i32* nonnull %noelle_environment_variable_6) #21, !prof !90, !noelle.pdg.inst.id !91
  br label %96

96:                                               ; preds = %125, %95
  call void @queuePop64(i8* %15, i64* %16)
  %97 = load i64, i64* %16
  %98 = getelementptr inbounds i32, i32* %noelle_environment_variable_4, i64 %97, !noelle.pdg.inst.id !92
  %99 = load i32, i32* %98, align 4, !tbaa !44, !noelle.pdg.inst.id !93
  %100 = getelementptr inbounds [64 x i32], [64 x i32]* %noelle_environment_variable_2, i64 0, i64 %97, !noelle.pdg.inst.id !94
  %101 = load i32, i32* %100, align 4, !tbaa !44, !noelle.pdg.inst.id !95
  %102 = icmp slt i32 %101, 0, !noelle.pdg.inst.id !96
  %103 = ashr i32 %99, 1, !noelle.pdg.inst.id !97
  br i1 %102, label %104, label %112, !prof !98, !noelle.loop.id !99, !noelle.pdg.inst.id !100

104:                                              ; preds = %96
  %105 = sub i32 %103, %101, !noelle.pdg.inst.id !101
  %106 = icmp slt i32 %105, %99, !noelle.pdg.inst.id !102
  br i1 %106, label %126, label %107, !prof !103, !noelle.pdg.inst.id !104

107:                                              ; preds = %104
  %108 = sdiv i32 %105, %99, !noelle.pdg.inst.id !105
  br label %109

109:                                              ; preds = %107, %126
  %110 = phi i32 [ %108, %107 ], [ 0, %126 ], !noelle.pdg.inst.id !106
  %111 = sub nsw i32 0, %110, !noelle.pdg.inst.id !107
  br label %117

112:                                              ; preds = %96
  %113 = add nsw i32 %101, %103, !noelle.pdg.inst.id !108
  %114 = icmp slt i32 %113, %99, !noelle.pdg.inst.id !109
  br i1 %114, label %127, label %115, !prof !110, !noelle.pdg.inst.id !111

115:                                              ; preds = %112
  %116 = sdiv i32 %113, %99, !noelle.pdg.inst.id !112
  br label %117

117:                                              ; preds = %109, %115, %127
  %118 = phi i32 [ %111, %109 ], [ %116, %115 ], [ 0, %127 ], !noelle.pdg.inst.id !113
  call void @queuePop8(i8* %29, i8* %31)
  %119 = load i1, i1* %30
  %120 = trunc i32 %118 to i16, !noelle.pdg.inst.id !114
  %121 = getelementptr inbounds [64 x i16], [64 x i16]* %noelle_environment_variable_0, i64 %47, i64 %97, !noelle.pdg.inst.id !115
  store i16 %120, i16* %121, align 2, !tbaa !116, !noelle.pdg.inst.id !118
  br i1 %119, label %122, label %125, !prof !119, !noelle.pdg.inst.id !120

122:                                              ; preds = %117
  call void @queuePop8(i8* %25, i8* %27)
  %123 = load i1, i1* %26
  br i1 %123, label %45, label %124, !prof !121, !noelle.pdg.inst.id !122

124:                                              ; preds = %122
  br label %46

125:                                              ; preds = %117
  br label %96

126:                                              ; preds = %104
  br label %109

127:                                              ; preds = %112
  br label %117

128:                                              ; preds = %50
  br label %50
}

DSWP:  Link pipeline stages
DSWP: Exit
Parallelizer: parallelizerLoop:   Link the parallelize loop
Parallelizer: parallelizerLoop:   The loop has been parallelized with DSWP
Parallelizer: parallelizerLoop: Exit
Parallelizer:    Keep track of basic blocks being modified by the parallelization
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 0 = "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %4 = alloca %struct.jpeg_compress_struct, align 8, !noelle.pdg.inst.id !3400
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 0, !noelle.pdg.inst.id !3421
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %96 = phi %struct.cjpeg_source_struct* [ %64, %63 ], [ null, %NewDefault ], [ %89, %88 ], [ %87, %86 ], [ %85, %84 ], [ %83, %82 ], !noelle.pdg.inst.id !3512
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %101 = bitcast %struct.jpeg_compress_struct* %4 to %struct.jpeg_compress_struct.183*, !noelle.pdg.inst.id !3519
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %102 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 36, !noelle.pdg.inst.id !3520
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %104 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 7, !noelle.pdg.inst.id !3522
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %108 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %96, i64 0, i32 1, !noelle.pdg.inst.id !3527
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %109 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %96, i64 0, i32 4, !noelle.pdg.inst.id !3528
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %110 = bitcast i32* %3 to i8*, !noelle.pdg.inst.id !3529
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %111 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 4, !noelle.pdg.inst.id !3530
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %112 = bitcast %struct.jpeg_compress_struct* %4 to %struct.jpeg_common_struct*, !noelle.pdg.inst.id !3531
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %113 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 2, !noelle.pdg.inst.id !3532
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %115 = bitcast %struct.jpeg_comp_master** %114 to %struct.jpeg_comp_master.174**, !noelle.pdg.inst.id !3534
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %117 = bitcast %struct.jpeg_c_main_controller** %116 to %struct.jpeg_c_main_controller.175**, !noelle.pdg.inst.id !3536
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241
DOALL:     External nodes: 32
DOALL:     	  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168
DOALL:     	  %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173
DOALL:     	  %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175
DOALL:     	  %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177
DOALL:     	  store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179
DOALL:     	  store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182
DOALL:     	  %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185
DOALL:     	  call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187
DOALL:     	  %129 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !190
DOALL:     	  %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192
DOALL:     	  %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194
DOALL:     	  store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196
DOALL:     	  %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199
DOALL:     	  call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201
DOALL:     	  %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204
DOALL:     	  %141 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !206
DOALL:     	  store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208
DOALL:     	  %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211
DOALL:     	  store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213
DOALL:     	  %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216
DOALL:     	  %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221
DOALL:     	  %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223
DOALL:     	  %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225
DOALL:     	  %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230
DOALL:     	  %156 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !232
DOALL:     	  %159 = select i1 %158, i32 %157, i32 %119, !prof !3586, !noelle.pdg.inst.id !3587
DOALL:     	  store i32 0, i32* %3, align 4, !tbaa !3588, !noelle.pdg.inst.id !234
DOALL:     	  %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237
DOALL:     	  %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239
DOALL:     	  store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248
DOALL:     	  %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251
DOALL:     	  br i1 %167, label %jpeg_write_scanlines.exit.._crit_edge23_crit_edge, label %.loopexit.loopexit, !prof !3597, !noelle.pdg.inst.id !3598
DOALL:     Edges: 43
DOALL:     Loop-carried data dependences
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170
DOALL:     External nodes: 29
DOALL:     	  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168
DOALL:     	  %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173
DOALL:     	  %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175
DOALL:     	  %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177
DOALL:     	  store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179
DOALL:     	  store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182
DOALL:     	  %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185
DOALL:     	  call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187
DOALL:     	  %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192
DOALL:     	  %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194
DOALL:     	  store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196
DOALL:     	  %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199
DOALL:     	  call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201
DOALL:     	  %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204
DOALL:     	  store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208
DOALL:     	  %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211
DOALL:     	  store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213
DOALL:     	  %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216
DOALL:     	  %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221
DOALL:     	  %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223
DOALL:     	  %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225
DOALL:     	  %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230
DOALL:     	  %158 = icmp ult i32 %157, %119, !noelle.pdg.inst.id !3585
DOALL:     	  %159 = select i1 %158, i32 %157, i32 %119, !prof !3586, !noelle.pdg.inst.id !3587
DOALL:     	  %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237
DOALL:     	  %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239
DOALL:     	  store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248
DOALL:     	  %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251
DOALL:     	  br i1 %167, label %jpeg_write_scanlines.exit.._crit_edge23_crit_edge, label %.loopexit.loopexit, !prof !3597, !noelle.pdg.inst.id !3598
DOALL:     Edges: 38
DOALL:     Loop-carried data dependences
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218
DOALL:     External nodes: 29
DOALL:     	  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168
DOALL:     	  %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173
DOALL:     	  %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175
DOALL:     	  %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177
DOALL:     	  store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179
DOALL:     	  store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182
DOALL:     	  %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185
DOALL:     	  call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187
DOALL:     	  %129 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !190
DOALL:     	  %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192
DOALL:     	  %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194
DOALL:     	  store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196
DOALL:     	  %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199
DOALL:     	  call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201
DOALL:     	  %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204
DOALL:     	  br i1 %138, label %._crit_edge2.i.._crit_edge3.i_crit_edge, label %139, !prof !3544, !noelle.pdg.inst.id !3562
DOALL:     	  %141 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !206
DOALL:     	  store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208
DOALL:     	  %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211
DOALL:     	  store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213
DOALL:     	  %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216
DOALL:     	  %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221
DOALL:     	  %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223
DOALL:     	  %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225
DOALL:     	  %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230
DOALL:     	  %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237
DOALL:     	  %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239
DOALL:     	  store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248
DOALL:     	  %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251
DOALL:     Edges: 38
DOALL:     Loop-carried data dependences
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227
DOALL:     External nodes: 29
DOALL:     	  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168
DOALL:     	  %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173
DOALL:     	  %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175
DOALL:     	  %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177
DOALL:     	  store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179
DOALL:     	  store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182
DOALL:     	  %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185
DOALL:     	  call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187
DOALL:     	  %129 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !190
DOALL:     	  %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192
DOALL:     	  %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194
DOALL:     	  store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196
DOALL:     	  %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199
DOALL:     	  call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201
DOALL:     	  %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204
DOALL:     	  %141 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !206
DOALL:     	  store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208
DOALL:     	  %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211
DOALL:     	  store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213
DOALL:     	  %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216
DOALL:     	  %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221
DOALL:     	  %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223
DOALL:     	  br i1 %151, label %._crit_edge3.i.jpeg_write_scanlines.exit_crit_edge, label %152, !prof !3544, !noelle.pdg.inst.id !3579
DOALL:     	  %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225
DOALL:     	  %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230
DOALL:     	  %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237
DOALL:     	  %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239
DOALL:     	  store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248
DOALL:     	  %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251
DOALL:     Edges: 38
DOALL:     Loop-carried data dependences
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 56
DOALL:     	  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168
DOALL:     	  %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173
DOALL:     	  %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175
DOALL:     	  %122 = icmp eq i32 %121, 101, !noelle.pdg.inst.id !3543
DOALL:     	  br i1 %122, label %._crit_edge23.._crit_edge.i_crit_edge, label %123, !prof !3544, !noelle.loop.id !3545, !noelle.pdg.inst.id !3546, !noelle.parallelizer.looporder !3547
DOALL:     	  %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177
DOALL:     	  %125 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %124, i64 0, i32 5, !noelle.pdg.inst.id !3549
DOALL:     	  store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179
DOALL:     	  %126 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %124, i64 0, i32 6, i32 0, i64 0, !noelle.pdg.inst.id !3550
DOALL:     	  store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182
DOALL:     	  %127 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %124, i64 0, i32 0, !noelle.pdg.inst.id !3551
DOALL:     	  %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185
DOALL:     	  call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187
DOALL:     	  %129 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !190
DOALL:     	  %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192
DOALL:     	  %131 = icmp ult i32 %129, %130, !noelle.pdg.inst.id !3553
DOALL:     	  br i1 %131, label %._crit_edge.i.._crit_edge2.i_crit_edge, label %132, !prof !3544, !noelle.pdg.inst.id !3554
DOALL:     	  %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194
DOALL:     	  %134 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %133, i64 0, i32 5, !noelle.pdg.inst.id !3556
DOALL:     	  store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196
DOALL:     	  %135 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %133, i64 0, i32 1, !noelle.pdg.inst.id !3557
DOALL:     	  %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199
DOALL:     	  call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201
DOALL:     	  %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204
DOALL:     	  %138 = icmp eq %struct.jpeg_progress_mgr* %137, null, !noelle.pdg.inst.id !3561
DOALL:     	  br i1 %138, label %._crit_edge2.i.._crit_edge3.i_crit_edge, label %139, !prof !3544, !noelle.pdg.inst.id !3562
DOALL:     	  %140 = bitcast %struct.jpeg_progress_mgr* %137 to void (%struct.jpeg_common_struct*)**, !noelle.pdg.inst.id !3564
DOALL:     	  %141 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !206
DOALL:     	  %142 = zext i32 %141 to i64, !noelle.pdg.inst.id !3565
DOALL:     	  %143 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %137, i64 0, i32 1, !noelle.pdg.inst.id !3566
DOALL:     	  store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208
DOALL:     	  %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211
DOALL:     	  %145 = zext i32 %144 to i64, !noelle.pdg.inst.id !3569
DOALL:     	  %146 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %137, i64 0, i32 2, !noelle.pdg.inst.id !3570
DOALL:     	  store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213
DOALL:     	  %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216
DOALL:     	  %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221
DOALL:     	  %149 = getelementptr inbounds %struct.jpeg_comp_master.174, %struct.jpeg_comp_master.174* %148, i64 0, i32 3, !noelle.pdg.inst.id !3575
DOALL:     	  %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223
DOALL:     	  %151 = icmp eq i32 %150, 0, !noelle.pdg.inst.id !3578
DOALL:     	  br i1 %151, label %._crit_edge3.i.jpeg_write_scanlines.exit_crit_edge, label %152, !prof !3544, !noelle.pdg.inst.id !3579
DOALL:     	  %153 = getelementptr inbounds %struct.jpeg_comp_master.174, %struct.jpeg_comp_master.174* %148, i64 0, i32 1, !noelle.pdg.inst.id !3581
DOALL:     	  %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225
DOALL:     	  %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230
DOALL:     	  %156 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !232
DOALL:     	  store i32 0, i32* %3, align 4, !tbaa !3588, !noelle.pdg.inst.id !234
DOALL:     	  %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237
DOALL:     	  %161 = getelementptr inbounds %struct.jpeg_c_main_controller.175, %struct.jpeg_c_main_controller.175* %160, i64 0, i32 1, !noelle.pdg.inst.id !3590
DOALL:     	  %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239
DOALL:     	  %163 = load i32, i32* %3, align 4, !tbaa !3588, !noelle.pdg.inst.id !244
DOALL:     	  %164 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !246
DOALL:     	  %165 = add i32 %164, %163, !noelle.pdg.inst.id !3594
DOALL:     	  store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248
DOALL:     	  %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251
DOALL:     	  %167 = icmp ult i32 %165, %166, !noelle.pdg.inst.id !3596
DOALL:     	  br i1 %167, label %jpeg_write_scanlines.exit.._crit_edge23_crit_edge, label %.loopexit.loopexit, !prof !3597, !noelle.pdg.inst.id !3598
DOALL:     External nodes: 18
DOALL:     	  %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %110) #21, !noelle.pdg.inst.id !3541
DOALL:     	  br label %._crit_edge.i, !noelle.pdg.inst.id !3548
DOALL:     	  br label %._crit_edge.i, !noelle.pdg.inst.id !3552
DOALL:     	  br label %._crit_edge2.i, !noelle.pdg.inst.id !3555
DOALL:     	  br label %._crit_edge2.i, !noelle.pdg.inst.id !3559
DOALL:     	  br label %._crit_edge3.i, !noelle.pdg.inst.id !3563
DOALL:     	  call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218
DOALL:     	  br label %._crit_edge3.i, !noelle.pdg.inst.id !3573
DOALL:     	  br label %jpeg_write_scanlines.exit, !noelle.pdg.inst.id !3580
DOALL:     	  call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227
DOALL:     	  br label %jpeg_write_scanlines.exit, !noelle.pdg.inst.id !3583
DOALL:     	  %157 = sub i32 %155, %156, !noelle.pdg.inst.id !3584
DOALL:     	  %158 = icmp ult i32 %157, %119, !noelle.pdg.inst.id !3585
DOALL:     	  %159 = select i1 %158, i32 %157, i32 %119, !prof !3586, !noelle.pdg.inst.id !3587
DOALL:     	  call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %110) #21, !noelle.pdg.inst.id !3595
DOALL:     	  br label %._crit_edge23, !noelle.pdg.inst.id !3599
DOALL:     Edges: 430
DOALL:     Loop-carried data dependences
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   %129 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !190 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   %164 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !246 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   %141 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !206 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   %156 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !232 via memory
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %164 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !246 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %156 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !232 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %141 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !206 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %129 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !190 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %129 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !190 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %141 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !206 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %156 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !232 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %164 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !246 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DOALL:         %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170 via memory
DOALL:         %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223 --->   call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241 via memory
DSWP: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences:  Initial number of partitions: 9
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Exit
DSWP:  Before partitioning the SCCDAG
Heuristic:   PCA: No candidates
DSWP:  Final number of partitions: 3
DSWP:  After partitioning the SCCDAG
DSWP:  There are 3 partitions in the SCCDAG
DSWP:  Pipeline stages
DSWP:    Stage: 0
DSWP:    SCC
DSWP:      call void %162(%struct.jpeg_compress_struct.183* nonnull %101, i8** %120, i32* nonnull %3, i32 %159) #21, !prof !3593, !noelle.pdg.inst.id !241
DSWP:    
DSWP:    SCC
DSWP:      %159 = select i1 %158, i32 %157, i32 %119, !prof !3586, !noelle.pdg.inst.id !3587
DSWP:    
DSWP:    SCC
DSWP:      %119 = call i32 %118(%struct.jpeg_compress_struct* nonnull %4, %struct.cjpeg_source_struct* %96) #21, !prof !3539, !noelle.pdg.inst.id !170
DSWP:    
DSWP:    SCC
DSWP:      call void %147(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !218
DSWP:    
DSWP:    SCC
DSWP:      call void %154(%struct.jpeg_compress_struct.183* nonnull %101) #21, !noelle.pdg.inst.id !227
DSWP:    
DSWP:    SCC
DSWP:      %157 = sub i32 %155, %156, !noelle.pdg.inst.id !3584
DSWP:    
DSWP:    SCC
DSWP:      %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168
DSWP:      %120 = load i8**, i8*** %109, align 8, !tbaa !3540, !noelle.pdg.inst.id !173
DSWP:      %121 = load i32, i32* %111, align 4, !tbaa !3542, !noelle.pdg.inst.id !175
DSWP:      %122 = icmp eq i32 %121, 101, !noelle.pdg.inst.id !3543
DSWP:      br i1 %122, label %._crit_edge23.._crit_edge.i_crit_edge, label %123, !prof !3544, !noelle.loop.id !3545, !noelle.pdg.inst.id !3546, !noelle.parallelizer.looporder !3547
DSWP:      %124 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !177
DSWP:      %125 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %124, i64 0, i32 5, !noelle.pdg.inst.id !3549
DSWP:      store i32 18, i32* %125, align 8, !tbaa !3474, !noelle.pdg.inst.id !179
DSWP:      %126 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %124, i64 0, i32 6, i32 0, i64 0, !noelle.pdg.inst.id !3550
DSWP:      store i32 %121, i32* %126, align 4, !tbaa !3414, !noelle.pdg.inst.id !182
DSWP:      %127 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %124, i64 0, i32 0, !noelle.pdg.inst.id !3551
DSWP:      %128 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %127, align 8, !tbaa !3476, !noelle.pdg.inst.id !185
DSWP:      call void %128(%struct.jpeg_common_struct* nonnull %112) #21, !noelle.pdg.inst.id !187
DSWP:      %129 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !190
DSWP:      %130 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !192
DSWP:      %131 = icmp ult i32 %129, %130, !noelle.pdg.inst.id !3553
DSWP:      br i1 %131, label %._crit_edge.i.._crit_edge2.i_crit_edge, label %132, !prof !3544, !noelle.pdg.inst.id !3554
DSWP:      %133 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8, !tbaa !3422, !noelle.pdg.inst.id !194
DSWP:      %134 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %133, i64 0, i32 5, !noelle.pdg.inst.id !3556
DSWP:      store i32 119, i32* %134, align 8, !tbaa !3474, !noelle.pdg.inst.id !196
DSWP:      %135 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %133, i64 0, i32 1, !noelle.pdg.inst.id !3557
DSWP:      %136 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %135, align 8, !tbaa !3558, !noelle.pdg.inst.id !199
DSWP:      call void %136(%struct.jpeg_common_struct* nonnull %112, i32 -1) #21, !noelle.pdg.inst.id !201
DSWP:      %137 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %113, align 8, !tbaa !3560, !noelle.pdg.inst.id !204
DSWP:      %138 = icmp eq %struct.jpeg_progress_mgr* %137, null, !noelle.pdg.inst.id !3561
DSWP:      br i1 %138, label %._crit_edge2.i.._crit_edge3.i_crit_edge, label %139, !prof !3544, !noelle.pdg.inst.id !3562
DSWP:      %140 = bitcast %struct.jpeg_progress_mgr* %137 to void (%struct.jpeg_common_struct*)**, !noelle.pdg.inst.id !3564
DSWP:      %141 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !206
DSWP:      %142 = zext i32 %141 to i64, !noelle.pdg.inst.id !3565
DSWP:      %143 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %137, i64 0, i32 1, !noelle.pdg.inst.id !3566
DSWP:      store i64 %142, i64* %143, align 8, !tbaa !3567, !noelle.pdg.inst.id !208
DSWP:      %144 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !211
DSWP:      %145 = zext i32 %144 to i64, !noelle.pdg.inst.id !3569
DSWP:      %146 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %137, i64 0, i32 2, !noelle.pdg.inst.id !3570
DSWP:      store i64 %145, i64* %146, align 8, !tbaa !3571, !noelle.pdg.inst.id !213
DSWP:      %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %140, align 8, !tbaa !3572, !noelle.pdg.inst.id !216
DSWP:      %148 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %115, align 8, !tbaa !3574, !noelle.pdg.inst.id !221
DSWP:      %149 = getelementptr inbounds %struct.jpeg_comp_master.174, %struct.jpeg_comp_master.174* %148, i64 0, i32 3, !noelle.pdg.inst.id !3575
DSWP:      %150 = load i32, i32* %149, align 8, !tbaa !3576, !noelle.pdg.inst.id !223
DSWP:      %151 = icmp eq i32 %150, 0, !noelle.pdg.inst.id !3578
DSWP:      br i1 %151, label %._crit_edge3.i.jpeg_write_scanlines.exit_crit_edge, label %152, !prof !3544, !noelle.pdg.inst.id !3579
DSWP:      %153 = getelementptr inbounds %struct.jpeg_comp_master.174, %struct.jpeg_comp_master.174* %148, i64 0, i32 1, !noelle.pdg.inst.id !3581
DSWP:      %154 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %153, align 8, !tbaa !3582, !noelle.pdg.inst.id !225
DSWP:      %155 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !230
DSWP:      %156 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !232
DSWP:      store i32 0, i32* %3, align 4, !tbaa !3588, !noelle.pdg.inst.id !234
DSWP:      %160 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %117, align 8, !tbaa !3589, !noelle.pdg.inst.id !237
DSWP:      %161 = getelementptr inbounds %struct.jpeg_c_main_controller.175, %struct.jpeg_c_main_controller.175* %160, i64 0, i32 1, !noelle.pdg.inst.id !3590
DSWP:      %162 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %161, align 8, !tbaa !3591, !noelle.pdg.inst.id !239
DSWP:      %163 = load i32, i32* %3, align 4, !tbaa !3588, !noelle.pdg.inst.id !244
DSWP:      %164 = load i32, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !246
DSWP:      %165 = add i32 %164, %163, !noelle.pdg.inst.id !3594
DSWP:      store i32 %165, i32* %102, align 8, !tbaa !3521, !noelle.pdg.inst.id !248
DSWP:      %166 = load i32, i32* %104, align 4, !tbaa !3523, !noelle.pdg.inst.id !251
DSWP:      %167 = icmp ult i32 %165, %166, !noelle.pdg.inst.id !3596
DSWP:      br i1 %167, label %jpeg_write_scanlines.exit.._crit_edge23_crit_edge, label %.loopexit.loopexit, !prof !3597, !noelle.pdg.inst.id !3598
DSWP:    
DSWP:    Stage: 1
DSWP:    SCC
DSWP:      call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %110) #21, !noelle.pdg.inst.id !3541
DSWP:    
DSWP:    Stage: 2
DSWP:    SCC
DSWP:      call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %110) #21, !noelle.pdg.inst.id !3595
DSWP:    
DSWP:  Queues that connect the pipeline stages
DSWP:    Stage: 0
DSWP:      Push value queues: 0 1 2 3 4 5 6 7 8 9 
DSWP:      Pop value queues: 
DSWP:    Stage: 1
DSWP:      Push value queues: 
DSWP:      Pop value queues: 0 2 4 6 8 
DSWP:    Stage: 2
DSWP:      Push value queues: 
DSWP:      Pop value queues: 1 3 5 7 9 
DSWP:    Queue: 0
DSWP:     Producer:	  %122 = icmp eq i32 %121, 101, !noelle.pdg.inst.id !3543
DSWP:     Consumer:	  br i1 %122, label %._crit_edge23.._crit_edge.i_crit_edge, label %123, !prof !3544, !noelle.loop.id !3545, !noelle.pdg.inst.id !3546, !noelle.parallelizer.looporder !3547
DSWP:    Queue: 1
DSWP:     Producer:	  %122 = icmp eq i32 %121, 101, !noelle.pdg.inst.id !3543
DSWP:     Consumer:	  br i1 %122, label %._crit_edge23.._crit_edge.i_crit_edge, label %123, !prof !3544, !noelle.loop.id !3545, !noelle.pdg.inst.id !3546, !noelle.parallelizer.looporder !3547
DSWP:    Queue: 2
DSWP:     Producer:	  %167 = icmp ult i32 %165, %166, !noelle.pdg.inst.id !3596
DSWP:     Consumer:	  br i1 %167, label %jpeg_write_scanlines.exit.._crit_edge23_crit_edge, label %.loopexit.loopexit, !prof !3597, !noelle.pdg.inst.id !3598
DSWP:    Queue: 3
DSWP:     Producer:	  %167 = icmp ult i32 %165, %166, !noelle.pdg.inst.id !3596
DSWP:     Consumer:	  br i1 %167, label %jpeg_write_scanlines.exit.._crit_edge23_crit_edge, label %.loopexit.loopexit, !prof !3597, !noelle.pdg.inst.id !3598
DSWP:    Queue: 4
DSWP:     Producer:	  %131 = icmp ult i32 %129, %130, !noelle.pdg.inst.id !3553
DSWP:     Consumer:	  br i1 %131, label %._crit_edge.i.._crit_edge2.i_crit_edge, label %132, !prof !3544, !noelle.pdg.inst.id !3554
DSWP:    Queue: 5
DSWP:     Producer:	  %131 = icmp ult i32 %129, %130, !noelle.pdg.inst.id !3553
DSWP:     Consumer:	  br i1 %131, label %._crit_edge.i.._crit_edge2.i_crit_edge, label %132, !prof !3544, !noelle.pdg.inst.id !3554
DSWP:    Queue: 6
DSWP:     Producer:	  %138 = icmp eq %struct.jpeg_progress_mgr* %137, null, !noelle.pdg.inst.id !3561
DSWP:     Consumer:	  br i1 %138, label %._crit_edge2.i.._crit_edge3.i_crit_edge, label %139, !prof !3544, !noelle.pdg.inst.id !3562
DSWP:    Queue: 7
DSWP:     Producer:	  %138 = icmp eq %struct.jpeg_progress_mgr* %137, null, !noelle.pdg.inst.id !3561
DSWP:     Consumer:	  br i1 %138, label %._crit_edge2.i.._crit_edge3.i_crit_edge, label %139, !prof !3544, !noelle.pdg.inst.id !3562
DSWP:    Queue: 8
DSWP:     Producer:	  %151 = icmp eq i32 %150, 0, !noelle.pdg.inst.id !3578
DSWP:     Consumer:	  br i1 %151, label %._crit_edge3.i.jpeg_write_scanlines.exit_crit_edge, label %152, !prof !3544, !noelle.pdg.inst.id !3579
DSWP:    Queue: 9
DSWP:     Producer:	  %151 = icmp eq i32 %150, 0, !noelle.pdg.inst.id !3578
DSWP:     Consumer:	  br i1 %151, label %._crit_edge3.i.jpeg_write_scanlines.exit_crit_edge, label %152, !prof !3544, !noelle.pdg.inst.id !3579
DSWP:  Environment
DSWP:    Pre loop env 1, producer:	  %4 = alloca %struct.jpeg_compress_struct, align 8, !noelle.pdg.inst.id !3400
DSWP:    Pre loop env 2, producer:	  %15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 0, !noelle.pdg.inst.id !3421
DSWP:    Pre loop env 3, producer:	  %96 = phi %struct.cjpeg_source_struct* [ %64, %63 ], [ null, %NewDefault ], [ %89, %88 ], [ %87, %86 ], [ %85, %84 ], [ %83, %82 ], !noelle.pdg.inst.id !3512
DSWP:    Pre loop env 4, producer:	  %101 = bitcast %struct.jpeg_compress_struct* %4 to %struct.jpeg_compress_struct.183*, !noelle.pdg.inst.id !3519
DSWP:    Pre loop env 5, producer:	  %102 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 36, !noelle.pdg.inst.id !3520
DSWP:    Pre loop env 6, producer:	  %104 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 7, !noelle.pdg.inst.id !3522
DSWP:    Pre loop env 7, producer:	  %108 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %96, i64 0, i32 1, !noelle.pdg.inst.id !3527
DSWP:    Pre loop env 8, producer:	  %109 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %96, i64 0, i32 4, !noelle.pdg.inst.id !3528
DSWP:    Pre loop env 9, producer:	  %110 = bitcast i32* %3 to i8*, !noelle.pdg.inst.id !3529
DSWP:    Pre loop env 10, producer:	  %111 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 4, !noelle.pdg.inst.id !3530
DSWP:    Pre loop env 11, producer:	  %112 = bitcast %struct.jpeg_compress_struct* %4 to %struct.jpeg_common_struct*, !noelle.pdg.inst.id !3531
DSWP:    Pre loop env 12, producer:	  %113 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 2, !noelle.pdg.inst.id !3532
DSWP:    Pre loop env 13, producer:	  %115 = bitcast %struct.jpeg_comp_master** %114 to %struct.jpeg_comp_master.174**, !noelle.pdg.inst.id !3534
DSWP:    Pre loop env 14, producer:	  %117 = bitcast %struct.jpeg_c_main_controller** %116 to %struct.jpeg_c_main_controller.175**, !noelle.pdg.inst.id !3536
DSWP:  Create 3 pipeline stages
DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 0:

define void @noelle_task_7(i8*, i8*) {
  %3 = alloca i32, align 4, !noelle.pdg.inst.id !30
  %noelle.environment_variable.pointer = bitcast i8* %0 to [112 x i64]*
  %4 = bitcast i8* %1 to [10 x i8*]*
  %5 = getelementptr inbounds [10 x i8*], [10 x i8*]* %4, i64 0, i64 0
  %6 = load i8*, i8** %5
  %7 = alloca i1
  %8 = bitcast i1* %7 to i8*
  %9 = getelementptr inbounds [10 x i8*], [10 x i8*]* %4, i64 0, i64 1
  %10 = load i8*, i8** %9
  %11 = alloca i1
  %12 = bitcast i1* %11 to i8*
  %13 = getelementptr inbounds [10 x i8*], [10 x i8*]* %4, i64 0, i64 2
  %14 = load i8*, i8** %13
  %15 = alloca i1
  %16 = bitcast i1* %15 to i8*
  %17 = getelementptr inbounds [10 x i8*], [10 x i8*]* %4, i64 0, i64 3
  %18 = load i8*, i8** %17
  %19 = alloca i1
  %20 = bitcast i1* %19 to i8*
  %21 = getelementptr inbounds [10 x i8*], [10 x i8*]* %4, i64 0, i64 4
  %22 = load i8*, i8** %21
  %23 = alloca i1
  %24 = bitcast i1* %23 to i8*
  %25 = getelementptr inbounds [10 x i8*], [10 x i8*]* %4, i64 0, i64 5
  %26 = load i8*, i8** %25
  %27 = alloca i1
  %28 = bitcast i1* %27 to i8*
  %29 = getelementptr inbounds [10 x i8*], [10 x i8*]* %4, i64 0, i64 6
  %30 = load i8*, i8** %29
  %31 = alloca i1
  %32 = bitcast i1* %31 to i8*
  %33 = getelementptr inbounds [10 x i8*], [10 x i8*]* %4, i64 0, i64 7
  %34 = load i8*, i8** %33
  %35 = alloca i1
  %36 = bitcast i1* %35 to i8*
  %37 = getelementptr inbounds [10 x i8*], [10 x i8*]* %4, i64 0, i64 8
  %38 = load i8*, i8** %37
  %39 = alloca i1
  %40 = bitcast i1* %39 to i8*
  %41 = getelementptr inbounds [10 x i8*], [10 x i8*]* %4, i64 0, i64 9
  %42 = load i8*, i8** %41
  %43 = alloca i1
  %44 = bitcast i1* %43 to i8*
  %45 = getelementptr inbounds [112 x i64], [112 x i64]* %noelle.environment_variable.pointer, i64 0, i64 0
  %46 = bitcast i64* %45 to %struct.jpeg_compress_struct**
  %noelle_environment_variable_0 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %46
  %47 = getelementptr inbounds [112 x i64], [112 x i64]* %noelle.environment_variable.pointer, i64 0, i64 8
  %48 = bitcast i64* %47 to %struct.jpeg_error_mgr***
  %noelle_environment_variable_1 = load %struct.jpeg_error_mgr**, %struct.jpeg_error_mgr*** %48
  %49 = getelementptr inbounds [112 x i64], [112 x i64]* %noelle.environment_variable.pointer, i64 0, i64 16
  %50 = bitcast i64* %49 to %struct.cjpeg_source_struct**
  %noelle_environment_variable_2 = load %struct.cjpeg_source_struct*, %struct.cjpeg_source_struct** %50
  %51 = getelementptr inbounds [112 x i64], [112 x i64]* %noelle.environment_variable.pointer, i64 0, i64 24
  %52 = bitcast i64* %51 to %struct.jpeg_compress_struct.183**
  %noelle_environment_variable_3 = load %struct.jpeg_compress_struct.183*, %struct.jpeg_compress_struct.183** %52
  %53 = getelementptr inbounds [112 x i64], [112 x i64]* %noelle.environment_variable.pointer, i64 0, i64 32
  %54 = bitcast i64* %53 to i32**
  %noelle_environment_variable_4 = load i32*, i32** %54
  %55 = getelementptr inbounds [112 x i64], [112 x i64]* %noelle.environment_variable.pointer, i64 0, i64 40
  %56 = bitcast i64* %55 to i32**
  %noelle_environment_variable_5 = load i32*, i32** %56
  %57 = getelementptr inbounds [112 x i64], [112 x i64]* %noelle.environment_variable.pointer, i64 0, i64 48
  %58 = bitcast i64* %57 to i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)***
  %noelle_environment_variable_6 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)**, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*** %58
  %59 = getelementptr inbounds [112 x i64], [112 x i64]* %noelle.environment_variable.pointer, i64 0, i64 56
  %60 = bitcast i64* %59 to i8****
  %noelle_environment_variable_7 = load i8***, i8**** %60
  %61 = getelementptr inbounds [112 x i64], [112 x i64]* %noelle.environment_variable.pointer, i64 0, i64 72
  %62 = bitcast i64* %61 to i32**
  %noelle_environment_variable_9 = load i32*, i32** %62
  %63 = getelementptr inbounds [112 x i64], [112 x i64]* %noelle.environment_variable.pointer, i64 0, i64 80
  %64 = bitcast i64* %63 to %struct.jpeg_common_struct**
  %noelle_environment_variable_10 = load %struct.jpeg_common_struct*, %struct.jpeg_common_struct** %64
  %65 = getelementptr inbounds [112 x i64], [112 x i64]* %noelle.environment_variable.pointer, i64 0, i64 88
  %66 = bitcast i64* %65 to %struct.jpeg_progress_mgr***
  %noelle_environment_variable_11 = load %struct.jpeg_progress_mgr**, %struct.jpeg_progress_mgr*** %66
  %67 = getelementptr inbounds [112 x i64], [112 x i64]* %noelle.environment_variable.pointer, i64 0, i64 96
  %68 = bitcast i64* %67 to %struct.jpeg_comp_master.174***
  %noelle_environment_variable_12 = load %struct.jpeg_comp_master.174**, %struct.jpeg_comp_master.174*** %68
  %69 = getelementptr inbounds [112 x i64], [112 x i64]* %noelle.environment_variable.pointer, i64 0, i64 104
  %70 = bitcast i64* %69 to %struct.jpeg_c_main_controller.175***
  %noelle_environment_variable_13 = load %struct.jpeg_c_main_controller.175**, %struct.jpeg_c_main_controller.175*** %70
  br label %73

71:                                               ; preds = %72
  ret void

72:                                               ; preds = %114
  br label %71

73:                                               ; preds = %2, %128
  %74 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %noelle_environment_variable_6, align 8, !tbaa !31, !noelle.pdg.inst.id !37
  %75 = call i32 %74(%struct.jpeg_compress_struct* nonnull %noelle_environment_variable_0, %struct.cjpeg_source_struct* %noelle_environment_variable_2) #21, !prof !38, !noelle.pdg.inst.id !39
  %76 = load i8**, i8*** %noelle_environment_variable_7, align 8, !tbaa !40, !noelle.pdg.inst.id !41
  %77 = load i32, i32* %noelle_environment_variable_9, align 4, !tbaa !42, !noelle.pdg.inst.id !46
  %78 = icmp eq i32 %77, 101, !noelle.pdg.inst.id !47
  store i1 %78, i1* %11
  call void @queuePush8(i8* %10, i8* %12)
  store i1 %78, i1* %7
  call void @queuePush8(i8* %6, i8* %8)
  br i1 %78, label %131, label %79, !prof !48, !noelle.loop.id !49, !noelle.pdg.inst.id !50, !noelle.parallelizer.looporder !51

79:                                               ; preds = %73
  %80 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %noelle_environment_variable_1, align 8, !tbaa !52, !noelle.pdg.inst.id !53
  %81 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %80, i64 0, i32 5, !noelle.pdg.inst.id !54
  store i32 18, i32* %81, align 8, !tbaa !55, !noelle.pdg.inst.id !58
  %82 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %80, i64 0, i32 6, i32 0, i64 0, !noelle.pdg.inst.id !59
  store i32 %77, i32* %82, align 4, !tbaa !60, !noelle.pdg.inst.id !61
  %83 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %80, i64 0, i32 0, !noelle.pdg.inst.id !62
  %84 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %83, align 8, !tbaa !63, !noelle.pdg.inst.id !64
  call void %84(%struct.jpeg_common_struct* nonnull %noelle_environment_variable_10) #21, !noelle.pdg.inst.id !65
  br label %85

85:                                               ; preds = %79, %131
  %86 = load i32, i32* %noelle_environment_variable_4, align 8, !tbaa !66, !noelle.pdg.inst.id !67
  %87 = load i32, i32* %noelle_environment_variable_5, align 4, !tbaa !68, !noelle.pdg.inst.id !69
  %88 = icmp ult i32 %86, %87, !noelle.pdg.inst.id !70
  store i1 %88, i1* %27
  call void @queuePush8(i8* %26, i8* %28)
  store i1 %88, i1* %23
  call void @queuePush8(i8* %22, i8* %24)
  br i1 %88, label %132, label %89, !prof !48, !noelle.pdg.inst.id !71

89:                                               ; preds = %85
  %90 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %noelle_environment_variable_1, align 8, !tbaa !52, !noelle.pdg.inst.id !72
  %91 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %90, i64 0, i32 5, !noelle.pdg.inst.id !73
  store i32 119, i32* %91, align 8, !tbaa !55, !noelle.pdg.inst.id !74
  %92 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %90, i64 0, i32 1, !noelle.pdg.inst.id !75
  %93 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %92, align 8, !tbaa !76, !noelle.pdg.inst.id !77
  call void %93(%struct.jpeg_common_struct* nonnull %noelle_environment_variable_10, i32 -1) #21, !noelle.pdg.inst.id !78
  br label %94

94:                                               ; preds = %89, %132
  %95 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %noelle_environment_variable_11, align 8, !tbaa !79, !noelle.pdg.inst.id !80
  %96 = icmp eq %struct.jpeg_progress_mgr* %95, null, !noelle.pdg.inst.id !81
  store i1 %96, i1* %35
  call void @queuePush8(i8* %34, i8* %36)
  store i1 %96, i1* %31
  call void @queuePush8(i8* %30, i8* %32)
  br i1 %96, label %130, label %97, !prof !48, !noelle.pdg.inst.id !82

97:                                               ; preds = %94
  %98 = bitcast %struct.jpeg_progress_mgr* %95 to void (%struct.jpeg_common_struct*)**, !noelle.pdg.inst.id !83
  %99 = load i32, i32* %noelle_environment_variable_4, align 8, !tbaa !66, !noelle.pdg.inst.id !84
  %100 = zext i32 %99 to i64, !noelle.pdg.inst.id !85
  %101 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %95, i64 0, i32 1, !noelle.pdg.inst.id !86
  store i64 %100, i64* %101, align 8, !tbaa !87, !noelle.pdg.inst.id !89
  %102 = load i32, i32* %noelle_environment_variable_5, align 4, !tbaa !68, !noelle.pdg.inst.id !90
  %103 = zext i32 %102 to i64, !noelle.pdg.inst.id !91
  %104 = getelementptr inbounds %struct.jpeg_progress_mgr, %struct.jpeg_progress_mgr* %95, i64 0, i32 2, !noelle.pdg.inst.id !92
  store i64 %103, i64* %104, align 8, !tbaa !93, !noelle.pdg.inst.id !94
  %105 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %98, align 8, !tbaa !95, !noelle.pdg.inst.id !96
  call void %105(%struct.jpeg_common_struct* nonnull %noelle_environment_variable_10) #21, !noelle.pdg.inst.id !97
  br label %106

106:                                              ; preds = %97, %130
  %107 = load %struct.jpeg_comp_master.174*, %struct.jpeg_comp_master.174** %noelle_environment_variable_12, align 8, !tbaa !98, !noelle.pdg.inst.id !99
  %108 = getelementptr inbounds %struct.jpeg_comp_master.174, %struct.jpeg_comp_master.174* %107, i64 0, i32 3, !noelle.pdg.inst.id !100
  %109 = load i32, i32* %108, align 8, !tbaa !101, !noelle.pdg.inst.id !103
  %110 = icmp eq i32 %109, 0, !noelle.pdg.inst.id !104
  store i1 %110, i1* %43
  call void @queuePush8(i8* %42, i8* %44)
  store i1 %110, i1* %39
  call void @queuePush8(i8* %38, i8* %40)
  br i1 %110, label %129, label %111, !prof !48, !noelle.pdg.inst.id !105

111:                                              ; preds = %106
  %112 = getelementptr inbounds %struct.jpeg_comp_master.174, %struct.jpeg_comp_master.174* %107, i64 0, i32 1, !noelle.pdg.inst.id !106
  %113 = load void (%struct.jpeg_compress_struct.183*)*, void (%struct.jpeg_compress_struct.183*)** %112, align 8, !tbaa !107, !noelle.pdg.inst.id !108
  call void %113(%struct.jpeg_compress_struct.183* nonnull %noelle_environment_variable_3) #21, !noelle.pdg.inst.id !109
  br label %114

114:                                              ; preds = %111, %129
  %115 = load i32, i32* %noelle_environment_variable_5, align 4, !tbaa !68, !noelle.pdg.inst.id !110
  %116 = load i32, i32* %noelle_environment_variable_4, align 8, !tbaa !66, !noelle.pdg.inst.id !111
  %117 = sub i32 %115, %116, !noelle.pdg.inst.id !112
  %118 = icmp ult i32 %117, %75, !noelle.pdg.inst.id !113
  %119 = select i1 %118, i32 %117, i32 %75, !prof !114, !noelle.pdg.inst.id !115
  store i32 0, i32* %3, align 4, !tbaa !116, !noelle.pdg.inst.id !117
  %120 = load %struct.jpeg_c_main_controller.175*, %struct.jpeg_c_main_controller.175** %noelle_environment_variable_13, align 8, !tbaa !118, !noelle.pdg.inst.id !119
  %121 = getelementptr inbounds %struct.jpeg_c_main_controller.175, %struct.jpeg_c_main_controller.175* %120, i64 0, i32 1, !noelle.pdg.inst.id !120
  %122 = load void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)*, void (%struct.jpeg_compress_struct.183*, i8**, i32*, i32)** %121, align 8, !tbaa !121, !noelle.pdg.inst.id !123
  call void %122(%struct.jpeg_compress_struct.183* nonnull %noelle_environment_variable_3, i8** %76, i32* nonnull %3, i32 %119) #21, !prof !124, !noelle.pdg.inst.id !125
  %123 = load i32, i32* %3, align 4, !tbaa !116, !noelle.pdg.inst.id !126
  %124 = load i32, i32* %noelle_environment_variable_4, align 8, !tbaa !66, !noelle.pdg.inst.id !127
  %125 = add i32 %124, %123, !noelle.pdg.inst.id !128
  store i32 %125, i32* %noelle_environment_variable_4, align 8, !tbaa !66, !noelle.pdg.inst.id !129
  %126 = load i32, i32* %noelle_environment_variable_5, align 4, !tbaa !68, !noelle.pdg.inst.id !130
  %127 = icmp ult i32 %125, %126, !noelle.pdg.inst.id !131
  store i1 %127, i1* %19
  call void @queuePush8(i8* %18, i8* %20)
  store i1 %127, i1* %15
  call void @queuePush8(i8* %14, i8* %16)
  br i1 %127, label %128, label %72, !prof !132, !noelle.pdg.inst.id !133

128:                                              ; preds = %114
  br label %73

129:                                              ; preds = %106
  br label %114

130:                                              ; preds = %94
  br label %106

131:                                              ; preds = %73
  br label %85

132:                                              ; preds = %85
  br label %94
}

DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 1:

define void @noelle_task_8(i8*, i8*) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [112 x i64]*
  %3 = bitcast i8* %1 to [10 x i8*]*
  %4 = getelementptr inbounds [10 x i8*], [10 x i8*]* %3, i64 0, i64 0
  %5 = load i8*, i8** %4
  %6 = alloca i1
  %7 = bitcast i1* %6 to i8*
  %8 = getelementptr inbounds [10 x i8*], [10 x i8*]* %3, i64 0, i64 2
  %9 = load i8*, i8** %8
  %10 = alloca i1
  %11 = bitcast i1* %10 to i8*
  %12 = getelementptr inbounds [10 x i8*], [10 x i8*]* %3, i64 0, i64 4
  %13 = load i8*, i8** %12
  %14 = alloca i1
  %15 = bitcast i1* %14 to i8*
  %16 = getelementptr inbounds [10 x i8*], [10 x i8*]* %3, i64 0, i64 6
  %17 = load i8*, i8** %16
  %18 = alloca i1
  %19 = bitcast i1* %18 to i8*
  %20 = getelementptr inbounds [10 x i8*], [10 x i8*]* %3, i64 0, i64 8
  %21 = load i8*, i8** %20
  %22 = alloca i1
  %23 = bitcast i1* %22 to i8*
  %24 = getelementptr inbounds [112 x i64], [112 x i64]* %noelle.environment_variable.pointer, i64 0, i64 64
  %25 = bitcast i64* %24 to i8**
  %noelle_environment_variable_8 = load i8*, i8** %25
  br label %28

26:                                               ; preds = %27
  ret void

27:                                               ; preds = %36
  br label %26

28:                                               ; preds = %2, %38
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %noelle_environment_variable_8) #21, !noelle.pdg.inst.id !30
  call void @queuePop8(i8* %5, i8* %7)
  %29 = load i1, i1* %6
  br i1 %29, label %44, label %43, !prof !31, !noelle.loop.id !32, !noelle.pdg.inst.id !33, !noelle.parallelizer.looporder !34

30:                                               ; preds = %43, %44
  call void @queuePop8(i8* %13, i8* %15)
  %31 = load i1, i1* %14
  br i1 %31, label %46, label %45, !prof !31, !noelle.pdg.inst.id !35

32:                                               ; preds = %45, %46
  call void @queuePop8(i8* %17, i8* %19)
  %33 = load i1, i1* %18
  br i1 %33, label %41, label %42, !prof !31, !noelle.pdg.inst.id !36

34:                                               ; preds = %42, %41
  call void @queuePop8(i8* %21, i8* %23)
  %35 = load i1, i1* %22
  br i1 %35, label %39, label %40, !prof !31, !noelle.pdg.inst.id !37

36:                                               ; preds = %40, %39
  call void @queuePop8(i8* %9, i8* %11)
  %37 = load i1, i1* %10
  br i1 %37, label %38, label %27, !prof !38, !noelle.pdg.inst.id !39

38:                                               ; preds = %36
  br label %28

39:                                               ; preds = %34
  br label %36

40:                                               ; preds = %34
  br label %36

41:                                               ; preds = %32
  br label %34

42:                                               ; preds = %32
  br label %34

43:                                               ; preds = %28
  br label %30

44:                                               ; preds = %28
  br label %30

45:                                               ; preds = %30
  br label %32

46:                                               ; preds = %30
  br label %32
}

DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 2:

define void @noelle_task_9(i8*, i8*) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [112 x i64]*
  %3 = bitcast i8* %1 to [10 x i8*]*
  %4 = getelementptr inbounds [10 x i8*], [10 x i8*]* %3, i64 0, i64 1
  %5 = load i8*, i8** %4
  %6 = alloca i1
  %7 = bitcast i1* %6 to i8*
  %8 = getelementptr inbounds [10 x i8*], [10 x i8*]* %3, i64 0, i64 3
  %9 = load i8*, i8** %8
  %10 = alloca i1
  %11 = bitcast i1* %10 to i8*
  %12 = getelementptr inbounds [10 x i8*], [10 x i8*]* %3, i64 0, i64 5
  %13 = load i8*, i8** %12
  %14 = alloca i1
  %15 = bitcast i1* %14 to i8*
  %16 = getelementptr inbounds [10 x i8*], [10 x i8*]* %3, i64 0, i64 7
  %17 = load i8*, i8** %16
  %18 = alloca i1
  %19 = bitcast i1* %18 to i8*
  %20 = getelementptr inbounds [10 x i8*], [10 x i8*]* %3, i64 0, i64 9
  %21 = load i8*, i8** %20
  %22 = alloca i1
  %23 = bitcast i1* %22 to i8*
  %24 = getelementptr inbounds [112 x i64], [112 x i64]* %noelle.environment_variable.pointer, i64 0, i64 64
  %25 = bitcast i64* %24 to i8**
  %noelle_environment_variable_8 = load i8*, i8** %25
  br label %28

26:                                               ; preds = %27
  ret void

27:                                               ; preds = %36
  br label %26

28:                                               ; preds = %2, %38
  call void @queuePop8(i8* %5, i8* %7)
  %29 = load i1, i1* %6
  br i1 %29, label %44, label %43, !prof !30, !noelle.loop.id !31, !noelle.pdg.inst.id !32, !noelle.parallelizer.looporder !33

30:                                               ; preds = %43, %44
  call void @queuePop8(i8* %13, i8* %15)
  %31 = load i1, i1* %14
  br i1 %31, label %46, label %45, !prof !30, !noelle.pdg.inst.id !34

32:                                               ; preds = %45, %46
  call void @queuePop8(i8* %17, i8* %19)
  %33 = load i1, i1* %18
  br i1 %33, label %41, label %42, !prof !30, !noelle.pdg.inst.id !35

34:                                               ; preds = %42, %41
  call void @queuePop8(i8* %21, i8* %23)
  %35 = load i1, i1* %22
  br i1 %35, label %39, label %40, !prof !30, !noelle.pdg.inst.id !36

36:                                               ; preds = %40, %39
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %noelle_environment_variable_8) #21, !noelle.pdg.inst.id !37
  call void @queuePop8(i8* %9, i8* %11)
  %37 = load i1, i1* %10
  br i1 %37, label %38, label %27, !prof !38, !noelle.pdg.inst.id !39

38:                                               ; preds = %36
  br label %28

39:                                               ; preds = %34
  br label %36

40:                                               ; preds = %34
  br label %36

41:                                               ; preds = %32
  br label %34

42:                                               ; preds = %32
  br label %34

43:                                               ; preds = %28
  br label %30

44:                                               ; preds = %28
  br label %30

45:                                               ; preds = %30
  br label %32

46:                                               ; preds = %30
  br label %32
}

DSWP:  Link pipeline stages
DSWP: Exit
Parallelizer: parallelizerLoop:   Link the parallelize loop
Parallelizer: parallelizerLoop:   The loop has been parallelized with DSWP
Parallelizer: parallelizerLoop: Exit
Parallelizer:    Keep track of basic blocks being modified by the parallelization
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc cjpeg.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg'
