make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg'
./runEnablers.sh cjpeg cjpeg.bc large "-lm -lstdc++ -lpthread -ltermcap" -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg

opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs cjpeg.bc -o baseline.bc
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg
WARNING: ./runme_cjpeg.sh not found. Going up one dir.
--2023-01-20 18:19:31--  http://users.cs.northwestern.edu/~simonec/files/Software/MiBench/input_very_large.ppm.xz
Resolving users.cs.northwestern.edu (users.cs.northwestern.edu)... 165.124.180.20
Connecting to users.cs.northwestern.edu (users.cs.northwestern.edu)|165.124.180.20|:80... connected.
HTTP request sent, awaiting response... 302 Found
Location: https://users.cs.northwestern.edu/~simonec/files/Software/MiBench/input_very_large.ppm.xz [following]
--2023-01-20 18:19:31--  https://users.cs.northwestern.edu/~simonec/files/Software/MiBench/input_very_large.ppm.xz
Connecting to users.cs.northwestern.edu (users.cs.northwestern.edu)|165.124.180.20|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 147240528 (140M) [application/x-xz]
Saving to: ‘input_very_large.ppm.xz’

     0K .......... .......... .......... .......... ..........  0%  184M 1s
    50K .......... .......... .......... .......... ..........  0%  114M 1s
   100K .......... .......... .......... .......... ..........  0% 97.2M 1s
   150K .......... .......... .......... .......... ..........  0%  122M 1s
   200K .......... .......... .......... .......... ..........  0% 95.0M 1s
   250K .......... .......... .......... .......... ..........  0%  119M 1s
   300K .......... .......... .......... .......... ..........  0%  125M 1s
   350K .......... .......... .......... .......... ..........  0% 98.7M 1s
   400K .......... .......... .......... .......... ..........  0%  113M 1s
   450K .......... .......... .......... .......... ..........  0%  112M 1s
   500K .......... .......... .......... .......... ..........  0%  116M 1s
   550K .......... .......... .......... .......... ..........  0%  118M 1s
   600K .......... .......... .......... .......... ..........  0%  105M 1s
   650K .......... .......... .......... .......... ..........  0%  114M 1s
   700K .......... .......... .......... .......... ..........  0% 9.48M 2s
   750K .......... .......... .......... .......... ..........  0% 91.5M 2s
   800K .......... .......... .......... .......... ..........  0%  141M 2s
   850K .......... .......... .......... .......... ..........  0%  108M 2s
   900K .......... .......... .......... .......... ..........  0%  119M 2s
   950K .......... .......... .......... .......... ..........  0%  106M 2s
  1000K .......... .......... .......... .......... ..........  0%  113M 2s
  1050K .......... .......... .......... .......... ..........  0%  117M 2s
  1100K .......... .......... .......... .......... ..........  0%  110M 2s
  1150K .......... .......... .......... .......... ..........  0%  115M 2s
  1200K .......... .......... .......... .......... ..........  0%  102M 2s
  1250K .......... .......... .......... .......... ..........  0%  120M 2s
  1300K .......... .......... .......... .......... ..........  0%  123M 2s
  1350K .......... .......... .......... .......... ..........  0% 98.6M 2s
  1400K .......... .......... .......... .......... ..........  1%  115M 2s
  1450K .......... .......... .......... .......... ..........  1% 99.2M 2s
  1500K .......... .......... .......... .......... ..........  1%  114M 2s
  1550K .......... .......... .......... .......... ..........  1%  135M 2s
  1600K .......... .......... .......... .......... ..........  1%  105M 2s
  1650K .......... .......... .......... .......... ..........  1%  116M 2s
  1700K .......... .......... .......... .......... ..........  1%  106M 2s
  1750K .......... .......... .......... .......... ..........  1%  119M 2s
  1800K .......... .......... .......... .......... ..........  1%  115M 2s
  1850K .......... .......... .......... .......... ..........  1%  104M 2s
  1900K .......... .......... .......... .......... ..........  1%  121M 2s
  1950K .......... .......... .......... .......... ..........  1%  100M 2s
  2000K .......... .......... .......... .......... ..........  1%  120M 2s
  2050K .......... .......... .......... .......... ..........  1%  120M 2s
  2100K .......... .......... .......... .......... ..........  1%  104M 2s
  2150K .......... .......... .......... .......... ..........  1%  114M 2s
  2200K .......... .......... .......... .......... ..........  1%  101M 2s
  2250K .......... .......... .......... .......... ..........  1%  123M 2s
  2300K .......... .......... .......... .......... ..........  1%  116M 2s
  2350K .......... .......... .......... .......... ..........  1%  104M 2s
  2400K .......... .......... .......... .......... ..........  1%  120M 1s
  2450K .......... .......... .......... .......... ..........  1% 98.1M 1s
  2500K .......... .......... .......... .......... ..........  1%  126M 1s
  2550K .......... .......... .......... .......... ..........  1%  123M 1s
  2600K .......... .......... .......... .......... ..........  1% 99.5M 1s
  2650K .......... .......... .......... .......... ..........  1%  118M 1s
  2700K .......... .......... .......... .......... ..........  1%  104M 1s
  2750K .......... .......... .......... .......... ..........  1%  123M 1s
  2800K .......... .......... .......... .......... ..........  1%  103M 1s
  2850K .......... .......... .......... .......... ..........  2%  116M 1s
  2900K .......... .......... .......... .......... ..........  2%  119M 1s
  2950K .......... .......... .......... .......... ..........  2%  102M 1s
  3000K .......... .......... .......... .......... ..........  2%  120M 1s
  3050K .......... .......... .......... .......... ..........  2%  105M 1s
  3100K .......... .......... .......... .......... ..........  2%  116M 1s
  3150K .......... .......... .......... .......... ..........  2%  109M 1s
  3200K .......... .......... .......... .......... ..........  2%  111M 1s
  3250K .......... .......... .......... .......... ..........  2%  116M 1s
  3300K .......... .......... .......... .......... ..........  2%  115M 1s
  3350K .......... .......... .......... .......... ..........  2%  105M 1s
  3400K .......... .......... .......... .......... ..........  2%  119M 1s
  3450K .......... .......... .......... .......... ..........  2%  104M 1s
  3500K .......... .......... .......... .......... ..........  2%  116M 1s
  3550K .......... .......... .......... .......... ..........  2%  123M 1s
  3600K .......... .......... .......... .......... ..........  2%  101M 1s
  3650K .......... .......... .......... .......... ..........  2%  121M 1s
  3700K .......... .......... .......... .......... ..........  2% 99.1M 1s
  3750K .......... .......... .......... .......... ..........  2%  121M 1s
  3800K .......... .......... .......... .......... ..........  2%  122M 1s
  3850K .......... .......... .......... .......... ..........  2% 89.3M 1s
  3900K .......... .......... .......... .......... ..........  2%  123M 1s
  3950K .......... .......... .......... .......... ..........  2% 99.5M 1s
  4000K .......... .......... .......... .......... ..........  2%  106M 1s
  4050K .......... .......... .......... .......... ..........  2%  139M 1s
  4100K .......... .......... .......... .......... ..........  2%  112M 1s
  4150K .......... .......... .......... .......... ..........  2%  126M 1s
  4200K .......... .......... .......... .......... ..........  2% 95.2M 1s
  4250K .......... .......... .......... .......... ..........  2%  130M 1s
  4300K .......... .......... .......... .......... ..........  3%  113M 1s
  4350K .......... .......... .......... .......... ..........  3%  105M 1s
  4400K .......... .......... .......... .......... ..........  3%  123M 1s
  4450K .......... .......... .......... .......... ..........  3%  101M 1s
  4500K .......... .......... .......... .......... ..........  3%  116M 1s
  4550K .......... .......... .......... .......... ..........  3%  109M 1s
  4600K .......... .......... .......... .......... ..........  3%  100M 1s
  4650K .......... .......... .......... .......... ..........  3%  126M 1s
  4700K .......... .......... .......... .......... ..........  3% 99.3M 1s
  4750K .......... .......... .......... .......... ..........  3%  132M 1s
  4800K .......... .......... .......... .......... ..........  3%  125M 1s
  4850K .......... .......... .......... .......... ..........  3% 97.8M 1s
  4900K .......... .......... .......... .......... ..........  3%  124M 1s
  4950K .......... .......... .......... .......... ..........  3% 98.9M 1s
  5000K .......... .......... .......... .......... ..........  3%  113M 1s
  5050K .......... .......... .......... .......... ..........  3%  109M 1s
  5100K .......... .......... .......... .......... ..........  3%  118M 1s
  5150K .......... .......... .......... .......... ..........  3%  122M 1s
  5200K .......... .......... .......... .......... ..........  3% 98.7M 1s
  5250K .......... .......... .......... .......... ..........  3%  124M 1s
  5300K .......... .......... .......... .......... ..........  3%  113M 1s
  5350K .......... .......... .......... .......... ..........  3%  106M 1s
  5400K .......... .......... .......... .......... ..........  3%  125M 1s
  5450K .......... .......... .......... .......... ..........  3%  101M 1s
  5500K .......... .......... .......... .......... ..........  3%  118M 1s
  5550K .......... .......... .......... .......... ..........  3%  113M 1s
  5600K .......... .......... .......... .......... ..........  3%  101M 1s
  5650K .......... .......... .......... .......... ..........  3%  125M 1s
  5700K .......... .......... .......... .......... ..........  3%  107M 1s
  5750K .......... .......... .......... .......... ..........  4%  118M 1s
  5800K .......... .......... .......... .......... ..........  4%  114M 1s
  5850K .......... .......... .......... .......... ..........  4%  101M 1s
  5900K .......... .......... .......... .......... ..........  4%  118M 1s
  5950K .......... .......... .......... .......... ..........  4%  109M 1s
  6000K .......... .......... .......... .......... ..........  4%  116M 1s
  6050K .......... .......... .......... .......... ..........  4%  125M 1s
  6100K .......... .......... .......... .......... ..........  4% 91.4M 1s
  6150K .......... .......... .......... .......... ..........  4%  136M 1s
  6200K .......... .......... .......... .......... ..........  4%  101M 1s
  6250K .......... .......... .......... .......... ..........  4%  118M 1s
  6300K .......... .......... .......... .......... ..........  4%  120M 1s
  6350K .......... .......... .......... .......... ..........  4%  105M 1s
  6400K .......... .......... .......... .......... ..........  4%  115M 1s
  6450K .......... .......... .......... .......... ..........  4%  101M 1s
  6500K .......... .......... .......... .......... ..........  4%  128M 1s
  6550K .......... .......... .......... .......... ..........  4%  118M 1s
  6600K .......... .......... .......... .......... ..........  4% 98.1M 1s
  6650K .......... .......... .......... .......... ..........  4%  122M 1s
  6700K .......... .......... .......... .......... ..........  4%  102M 1s
  6750K .......... .......... .......... .......... ..........  4%  120M 1s
  6800K .......... .......... .......... .......... ..........  4%  122M 1s
  6850K .......... .......... .......... .......... ..........  4%  102M 1s
  6900K .......... .......... .......... .......... ..........  4%  113M 1s
  6950K .......... .......... .......... .......... ..........  4%  101M 1s
  7000K .......... .......... .......... .......... ..........  4%  127M 1s
  7050K .......... .......... .......... .......... ..........  4%  101M 1s
  7100K .......... .......... .......... .......... ..........  4%  125M 1s
  7150K .......... .......... .......... .......... ..........  5%  118M 1s
  7200K .......... .......... .......... .......... ..........  5%  103M 1s
  7250K .......... .......... .......... .......... ..........  5%  119M 1s
  7300K .......... .......... .......... .......... ..........  5%  109M 1s
  7350K .......... .......... .......... .......... ..........  5%  112M 1s
  7400K .......... .......... .......... .......... ..........  5%  116M 1s
  7450K .......... .......... .......... .......... ..........  5%  103M 1s
  7500K .......... .......... .......... .......... ..........  5%  119M 1s
  7550K .......... .......... .......... .......... ..........  5%  120M 1s
  7600K .......... .......... .......... .......... ..........  5% 99.7M 1s
  7650K .......... .......... .......... .......... ..........  5%  122M 1s
  7700K .......... .......... .......... .......... ..........  5%  100M 1s
  7750K .......... .......... .......... .......... ..........  5%  125M 1s
  7800K .......... .......... .......... .......... ..........  5%  112M 1s
  7850K .......... .......... .......... .......... ..........  5%  104M 1s
  7900K .......... .......... .......... .......... ..........  5%  113M 1s
  7950K .......... .......... .......... .......... ..........  5%  106M 1s
  8000K .......... .......... .......... .......... ..........  5%  122M 1s
  8050K .......... .......... .......... .......... ..........  5%  121M 1s
  8100K .......... .......... .......... .......... ..........  5% 93.7M 1s
  8150K .......... .......... .......... .......... ..........  5%  130M 1s
  8200K .......... .......... .......... .......... ..........  5%  104M 1s
  8250K .......... .......... .......... .......... ..........  5%  119M 1s
  8300K .......... .......... .......... .......... ..........  5%  114M 1s
  8350K .......... .......... .......... .......... ..........  5%  101M 1s
  8400K .......... .......... .......... .......... ..........  5%  124M 1s
  8450K .......... .......... .......... .......... ..........  5% 94.3M 1s
  8500K .......... .......... .......... .......... ..........  5%  139M 1s
  8550K .......... .......... .......... .......... ..........  5%  117M 1s
  8600K .......... .......... .......... .......... ..........  6% 96.7M 1s
  8650K .......... .......... .......... .......... ..........  6%  129M 1s
  8700K .......... .......... .......... .......... ..........  6% 83.4M 1s
  8750K .......... .......... .......... .......... ..........  6%  127M 1s
  8800K .......... .......... .......... .......... ..........  6%  113M 1s
  8850K .......... .......... .......... .......... ..........  6%  126M 1s
  8900K .......... .......... .......... .......... ..........  6%  125M 1s
  8950K .......... .......... .......... .......... ..........  6%  100M 1s
  9000K .......... .......... .......... .......... ..........  6%  118M 1s
  9050K .......... .......... .......... .......... ..........  6%  119M 1s
  9100K .......... .......... .......... .......... ..........  6%  104M 1s
  9150K .......... .......... .......... .......... ..........  6%  119M 1s
  9200K .......... .......... .......... .......... ..........  6%  103M 1s
  9250K .......... .......... .......... .......... ..........  6%  115M 1s
  9300K .......... .......... .......... .......... ..........  6%  113M 1s
  9350K .......... .......... .......... .......... ..........  6%  112M 1s
  9400K .......... .......... .......... .......... ..........  6%  117M 1s
  9450K .......... .......... .......... .......... ..........  6%  103M 1s
  9500K .......... .......... .......... .......... ..........  6%  121M 1s
  9550K .......... .......... .......... .......... ..........  6%  116M 1s
  9600K .......... .......... .......... .......... ..........  6%  102M 1s
  9650K .......... .......... .......... .......... ..........  6%  114M 1s
  9700K .......... .......... .......... .......... ..........  6%  109M 1s
  9750K .......... .......... .......... .......... ..........  6%  119M 1s
  9800K .......... .......... .......... .......... ..........  6%  122M 1s
  9850K .......... .......... .......... .......... ..........  6% 95.2M 1s
  9900K .......... .......... .......... .......... ..........  6%  115M 1s
  9950K .......... .......... .......... .......... ..........  6%  104M 1s
 10000K .......... .......... .......... .......... ..........  6%  124M 1s
 10050K .......... .......... .......... .......... ..........  7%  126M 1s
 10100K .......... .......... .......... .......... ..........  7%  100M 1s
 10150K .......... .......... .......... .......... ..........  7%  118M 1s
 10200K .......... .......... .......... .......... ..........  7%  106M 1s
 10250K .......... .......... .......... .......... ..........  7%  111M 1s
 10300K .......... .......... .......... .......... ..........  7%  122M 1s
 10350K .......... .......... .......... .......... ..........  7%  106M 1s
 10400K .......... .......... .......... .......... ..........  7%  120M 1s
 10450K .......... .......... .......... .......... ..........  7% 99.8M 1s
 10500K .......... .......... .......... .......... ..........  7%  118M 1s
 10550K .......... .......... .......... .......... ..........  7%  125M 1s
 10600K .......... .......... .......... .......... ..........  7%  101M 1s
 10650K .......... .......... .......... .......... ..........  7%  118M 1s
 10700K .......... .......... .......... .......... ..........  7%  103M 1s
 10750K .......... .......... .......... .......... ..........  7%  120M 1s
 10800K .......... .......... .......... .......... ..........  7%  116M 1s
 10850K .......... .......... .......... .......... ..........  7%  104M 1s
 10900K .......... .......... .......... .......... ..........  7%  118M 1s
 10950K .......... .......... .......... .......... ..........  7%  102M 1s
 11000K .......... .......... .......... .......... ..........  7%  123M 1s
 11050K .......... .......... .......... .......... ..........  7%  120M 1s
 11100K .......... .......... .......... .......... ..........  7%  100M 1s
 11150K .......... .......... .......... .......... ..........  7%  122M 1s
 11200K .......... .......... .......... .......... ..........  7%  102M 1s
 11250K .......... .......... .......... .......... ..........  7%  120M 1s
 11300K .......... .......... .......... .......... ..........  7%  115M 1s
 11350K .......... .......... .......... .......... ..........  7%  101M 1s
 11400K .......... .......... .......... .......... ..........  7%  127M 1s
 11450K .......... .......... .......... .......... ..........  7%  101M 1s
 11500K .......... .......... .......... .......... ..........  8%  117M 1s
 11550K .......... .......... .......... .......... ..........  8%  119M 1s
 11600K .......... .......... .......... .......... ..........  8%  104M 1s
 11650K .......... .......... .......... .......... ..........  8%  120M 1s
 11700K .......... .......... .......... .......... ..........  8%  102M 1s
 11750K .......... .......... .......... .......... ..........  8%  116M 1s
 11800K .......... .......... .......... .......... ..........  8%  117M 1s
 11850K .......... .......... .......... .......... ..........  8%  104M 1s
 11900K .......... .......... .......... .......... ..........  8%  121M 1s
 11950K .......... .......... .......... .......... ..........  8%  104M 1s
 12000K .......... .......... .......... .......... ..........  8%  115M 1s
 12050K .......... .......... .......... .......... ..........  8%  122M 1s
 12100K .......... .......... .......... .......... ..........  8% 98.5M 1s
 12150K .......... .......... .......... .......... ..........  8%  115M 1s
 12200K .......... .......... .......... .......... ..........  8%  102M 1s
 12250K .......... .......... .......... .......... ..........  8%  114M 1s
 12300K .......... .......... .......... .......... ..........  8%  137M 1s
 12350K .......... .......... .......... .......... ..........  8%  101M 1s
 12400K .......... .......... .......... .......... ..........  8%  119M 1s
 12450K .......... .......... .......... .......... ..........  8%  102M 1s
 12500K .......... .......... .......... .......... ..........  8%  116M 1s
 12550K .......... .......... .......... .......... ..........  8%  113M 1s
 12600K .......... .......... .......... .......... ..........  8%  107M 1s
 12650K .......... .......... .......... .......... ..........  8%  123M 1s
 12700K .......... .......... .......... .......... ..........  8%  101M 1s
 12750K .......... .......... .......... .......... ..........  8%  114M 1s
 12800K .......... .......... .......... .......... ..........  8%  115M 1s
 12850K .......... .......... .......... .......... ..........  8%  111M 1s
 12900K .......... .......... .......... .......... ..........  9%  120M 1s
 12950K .......... .......... .......... .......... ..........  9% 99.4M 1s
 13000K .......... .......... .......... .......... ..........  9%  119M 1s
 13050K .......... .......... .......... .......... ..........  9%  108M 1s
 13100K .......... .......... .......... .......... ..........  9%  114M 1s
 13150K .......... .......... .......... .......... ..........  9%  114M 1s
 13200K .......... .......... .......... .......... ..........  9%  103M 1s
 13250K .......... .......... .......... .......... ..........  9%  123M 1s
 13300K .......... .......... .......... .......... ..........  9%  122M 1s
 13350K .......... .......... .......... .......... ..........  9%  101M 1s
 13400K .......... .......... .......... .......... ..........  9%  116M 1s
 13450K .......... .......... .......... .......... ..........  9%  103M 1s
 13500K .......... .......... .......... .......... ..........  9%  121M 1s
 13550K .......... .......... .......... .......... ..........  9%  119M 1s
 13600K .......... .......... .......... .......... ..........  9%  106M 1s
 13650K .......... .......... .......... .......... ..........  9%  116M 1s
 13700K .......... .......... .......... .......... ..........  9%  105M 1s
 13750K .......... .......... .......... .......... ..........  9%  114M 1s
 13800K .......... .......... .......... .......... ..........  9%  123M 1s
 13850K .......... .......... .......... .......... ..........  9% 97.7M 1s
 13900K .......... .......... .......... .......... ..........  9%  126M 1s
 13950K .......... .......... .......... .......... ..........  9%  102M 1s
 14000K .......... .......... .......... .......... ..........  9%  117M 1s
 14050K .......... .......... .......... .......... ..........  9%  120M 1s
 14100K .......... .......... .......... .......... ..........  9%  102M 1s
 14150K .......... .......... .......... .......... ..........  9%  120M 1s
 14200K .......... .......... .......... .......... ..........  9%  105M 1s
 14250K .......... .......... .......... .......... ..........  9%  109M 1s
 14300K .......... .......... .......... .......... ..........  9%  126M 1s
 14350K .......... .......... .......... .......... .......... 10% 99.0M 1s
 14400K .......... .......... .......... .......... .......... 10%  124M 1s
 14450K .......... .......... .......... .......... .......... 10%  101M 1s
 14500K .......... .......... .......... .......... .......... 10%  123M 1s
 14550K .......... .......... .......... .......... .......... 10%  119M 1s
 14600K .......... .......... .......... .......... .......... 10% 96.5M 1s
 14650K .......... .......... .......... .......... .......... 10%  120M 1s
 14700K .......... .......... .......... .......... .......... 10% 99.6M 1s
 14750K .......... .......... .......... .......... .......... 10%  134M 1s
 14800K .......... .......... .......... .......... .......... 10%  115M 1s
 14850K .......... .......... .......... .......... .......... 10%  103M 1s
 14900K .......... .......... .......... .......... .......... 10%  110M 1s
 14950K .......... .......... .......... .......... .......... 10% 90.0M 1s
 15000K .......... .......... .......... .......... .......... 10%  126M 1s
 15050K .......... .......... .......... .......... .......... 10%  138M 1s
 15100K .......... .......... .......... .......... .......... 10%  108M 1s
 15150K .......... .......... .......... .......... .......... 10%  120M 1s
 15200K .......... .......... .......... .......... .......... 10%  102M 1s
 15250K .......... .......... .......... .......... .......... 10% 99.4M 1s
 15300K .......... .......... .......... .......... .......... 10%  127M 1s
 15350K .......... .......... .......... .......... .......... 10% 94.8M 1s
 15400K .......... .......... .......... .......... .......... 10%  125M 1s
 15450K .......... .......... .......... .......... .......... 10% 95.2M 1s
 15500K .......... .......... .......... .......... .......... 10%  124M 1s
 15550K .......... .......... .......... .......... .......... 10%  125M 1s
 15600K .......... .......... .......... .......... .......... 10% 88.8M 1s
 15650K .......... .......... .......... .......... .......... 10%  168M 1s
 15700K .......... .......... .......... .......... .......... 10%  108M 1s
 15750K .......... .......... .......... .......... .......... 10%  118M 1s
 15800K .......... .......... .......... .......... .......... 11%  122M 1s
 15850K .......... .......... .......... .......... .......... 11%  103M 1s
 15900K .......... .......... .......... .......... .......... 11%  116M 1s
 15950K .......... .......... .......... .......... .......... 11%  103M 1s
 16000K .......... .......... .......... .......... .......... 11%  117M 1s
 16050K .......... .......... .......... .......... .......... 11%  118M 1s
 16100K .......... .......... .......... .......... .......... 11%  104M 1s
 16150K .......... .......... .......... .......... .......... 11%  117M 1s
 16200K .......... .......... .......... .......... .......... 11% 98.9M 1s
 16250K .......... .......... .......... .......... .......... 11%  117M 1s
 16300K .......... .......... .......... .......... .......... 11%  126M 1s
 16350K .......... .......... .......... .......... .......... 11%  104M 1s
 16400K .......... .......... .......... .......... .......... 11%  121M 1s
 16450K .......... .......... .......... .......... .......... 11%  103M 1s
 16500K .......... .......... .......... .......... .......... 11%  121M 1s
 16550K .......... .......... .......... .......... .......... 11%  115M 1s
 16600K .......... .......... .......... .......... .......... 11%  102M 1s
 16650K .......... .......... .......... .......... .......... 11%  116M 1s
 16700K .......... .......... .......... .......... .......... 11%  105M 1s
 16750K .......... .......... .......... .......... .......... 11%  123M 1s
 16800K .......... .......... .......... .......... .......... 11%  118M 1s
 16850K .......... .......... .......... .......... .......... 11%  102M 1s
 16900K .......... .......... .......... .......... .......... 11%  114M 1s
 16950K .......... .......... .......... .......... .......... 11%  105M 1s
 17000K .......... .......... .......... .......... .......... 11%  121M 1s
 17050K .......... .......... .......... .......... .......... 11%  116M 1s
 17100K .......... .......... .......... .......... .......... 11%  102M 1s
 17150K .......... .......... .......... .......... .......... 11%  119M 1s
 17200K .......... .......... .......... .......... .......... 11%  108M 1s
 17250K .......... .......... .......... .......... .......... 12%  112M 1s
 17300K .......... .......... .......... .......... .......... 12%  125M 1s
 17350K .......... .......... .......... .......... .......... 12% 98.9M 1s
 17400K .......... .......... .......... .......... .......... 12%  120M 1s
 17450K .......... .......... .......... .......... .......... 12%  103M 1s
 17500K .......... .......... .......... .......... .......... 12%  123M 1s
 17550K .......... .......... .......... .......... .......... 12%  112M 1s
 17600K .......... .......... .......... .......... .......... 12%  101M 1s
 17650K .......... .......... .......... .......... .......... 12%  118M 1s
 17700K .......... .......... .......... .......... .......... 12%  107M 1s
 17750K .......... .......... .......... .......... .......... 12%  121M 1s
 17800K .......... .......... .......... .......... .......... 12%  117M 1s
 17850K .......... .......... .......... .......... .......... 12% 86.2M 1s
 17900K .......... .......... .......... .......... .......... 12%  113M 1s
 17950K .......... .......... .......... .......... .......... 12% 95.2M 1s
 18000K .......... .......... .......... .......... .......... 12%  135M 1s
 18050K .......... .......... .......... .......... .......... 12%  125M 1s
 18100K .......... .......... .......... .......... .......... 12%  106M 1s
 18150K .......... .......... .......... .......... .......... 12%  111M 1s
 18200K .......... .......... .......... .......... .......... 12%  114M 1s
 18250K .......... .......... .......... .......... .......... 12%  102M 1s
 18300K .......... .......... .......... .......... .......... 12%  161M 1s
 18350K .......... .......... .......... .......... .......... 12% 98.6M 1s
 18400K .......... .......... .......... .......... .......... 12%  118M 1s
 18450K .......... .......... .......... .......... .......... 12%  108M 1s
 18500K .......... .......... .......... .......... .......... 12%  125M 1s
 18550K .......... .......... .......... .......... .......... 12%  117M 1s
 18600K .......... .......... .......... .......... .......... 12%  100M 1s
 18650K .......... .......... .......... .......... .......... 13%  111M 1s
 18700K .......... .......... .......... .......... .......... 13%  104M 1s
 18750K .......... .......... .......... .......... .......... 13%  122M 1s
 18800K .......... .......... .......... .......... .......... 13%  125M 1s
 18850K .......... .......... .......... .......... .......... 13%  102M 1s
 18900K .......... .......... .......... .......... .......... 13%  122M 1s
 18950K .......... .......... .......... .......... .......... 13% 98.4M 1s
 19000K .......... .......... .......... .......... .......... 13%  125M 1s
 19050K .......... .......... .......... .......... .......... 13%  119M 1s
 19100K .......... .......... .......... .......... .......... 13%  102M 1s
 19150K .......... .......... .......... .......... .......... 13%  117M 1s
 19200K .......... .......... .......... .......... .......... 13%  102M 1s
 19250K .......... .......... .......... .......... .......... 13%  120M 1s
 19300K .......... .......... .......... .......... .......... 13%  116M 1s
 19350K .......... .......... .......... .......... .......... 13%  106M 1s
 19400K .......... .......... .......... .......... .......... 13%  119M 1s
 19450K .......... .......... .......... .......... .......... 13%  103M 1s
 19500K .......... .......... .......... .......... .......... 13%  108M 1s
 19550K .......... .......... .......... .......... .......... 13%  112M 1s
 19600K .......... .......... .......... .......... .......... 13%  106M 1s
 19650K .......... .......... .......... .......... .......... 13%  121M 1s
 19700K .......... .......... .......... .......... .......... 13%  103M 1s
 19750K .......... .......... .......... .......... .......... 13%  120M 1s
 19800K .......... .......... .......... .......... .......... 13%  115M 1s
 19850K .......... .......... .......... .......... .......... 13%  114M 1s
 19900K .......... .......... .......... .......... .......... 13%  123M 1s
 19950K .......... .......... .......... .......... .......... 13%  102M 1s
 20000K .......... .......... .......... .......... .......... 13%  113M 1s
 20050K .......... .......... .......... .......... .......... 13%  122M 1s
 20100K .......... .......... .......... .......... .......... 14%  104M 1s
 20150K .......... .......... .......... .......... .......... 14%  112M 1s
 20200K .......... .......... .......... .......... .......... 14% 93.5M 1s
 20250K .......... .......... .......... .......... .......... 14%  138M 1s
 20300K .......... .......... .......... .......... .......... 14%  118M 1s
 20350K .......... .......... .......... .......... .......... 14%  104M 1s
 20400K .......... .......... .......... .......... .......... 14%  123M 1s
 20450K .......... .......... .......... .......... .......... 14% 99.7M 1s
 20500K .......... .......... .......... .......... .......... 14%  123M 1s
 20550K .......... .......... .......... .......... .......... 14%  110M 1s
 20600K .......... .......... .......... .......... .......... 14%  105M 1s
 20650K .......... .......... .......... .......... .......... 14%  122M 1s
 20700K .......... .......... .......... .......... .......... 14%  104M 1s
 20750K .......... .......... .......... .......... .......... 14%  112M 1s
 20800K .......... .......... .......... .......... .......... 14%  123M 1s
 20850K .......... .......... .......... .......... .......... 14% 96.2M 1s
 20900K .......... .......... .......... .......... .......... 14%  121M 1s
 20950K .......... .......... .......... .......... .......... 14%  112M 1s
 21000K .......... .......... .......... .......... .......... 14%  118M 1s
 21050K .......... .......... .......... .......... .......... 14%  119M 1s
 21100K .......... .......... .......... .......... .......... 14%  100M 1s
 21150K .......... .......... .......... .......... .......... 14%  121M 1s
 21200K .......... .......... .......... .......... .......... 14%  102M 1s
 21250K .......... .......... .......... .......... .......... 14%  121M 1s
 21300K .......... .......... .......... .......... .......... 14%  117M 1s
 21350K .......... .......... .......... .......... .......... 14% 99.9M 1s
 21400K .......... .......... .......... .......... .......... 14%  123M 1s
 21450K .......... .......... .......... .......... .......... 14%  101M 1s
 21500K .......... .......... .......... .......... .......... 14%  124M 1s
 21550K .......... .......... .......... .......... .......... 15%  117M 1s
 21600K .......... .......... .......... .......... .......... 15%  103M 1s
 21650K .......... .......... .......... .......... .......... 15%  118M 1s
 21700K .......... .......... .......... .......... .......... 15% 99.7M 1s
 21750K .......... .......... .......... .......... .......... 15%  121M 1s
 21800K .......... .......... .......... .......... .......... 15%  120M 1s
 21850K .......... .......... .......... .......... .......... 15%  100M 1s
 21900K .......... .......... .......... .......... .......... 15%  127M 1s
 21950K .......... .......... .......... .......... .......... 15%  101M 1s
 22000K .......... .......... .......... .......... .......... 15%  120M 1s
 22050K .......... .......... .......... .......... .......... 15%  107M 1s
 22100K .......... .......... .......... .......... .......... 15%  113M 1s
 22150K .......... .......... .......... .......... .......... 15%  112M 1s
 22200K .......... .......... .......... .......... .......... 15%  109M 1s
 22250K .......... .......... .......... .......... .......... 15%  117M 1s
 22300K .......... .......... .......... .......... .......... 15%  121M 1s
 22350K .......... .......... .......... .......... .......... 15% 94.1M 1s
 22400K .......... .......... .......... .......... .......... 15%  128M 1s
 22450K .......... .......... .......... .......... .......... 15% 84.5M 1s
 22500K .......... .......... .......... .......... .......... 15%  125M 1s
 22550K .......... .......... .......... .......... .......... 15%  127M 1s
 22600K .......... .......... .......... .......... .......... 15% 82.1M 1s
 22650K .......... .......... .......... .......... .......... 15%  122M 1s
 22700K .......... .......... .......... .......... .......... 15%  121M 1s
 22750K .......... .......... .......... .......... .......... 15%  128M 1s
 22800K .......... .......... .......... .......... .......... 15%  109M 1s
 22850K .......... .......... .......... .......... .......... 15%  138M 1s
 22900K .......... .......... .......... .......... .......... 15%  114M 1s
 22950K .......... .......... .......... .......... .......... 15%  103M 1s
 23000K .......... .......... .......... .......... .......... 16%  112M 1s
 23050K .......... .......... .......... .......... .......... 16%  113M 1s
 23100K .......... .......... .......... .......... .......... 16%  105M 1s
 23150K .......... .......... .......... .......... .......... 16%  123M 1s
 23200K .......... .......... .......... .......... .......... 16%  103M 1s
 23250K .......... .......... .......... .......... .......... 16%  116M 1s
 23300K .......... .......... .......... .......... .......... 16%  116M 1s
 23350K .......... .......... .......... .......... .......... 16% 98.6M 1s
 23400K .......... .......... .......... .......... .......... 16%  130M 1s
 23450K .......... .......... .......... .......... .......... 16%  104M 1s
 23500K .......... .......... .......... .......... .......... 16%  116M 1s
 23550K .......... .......... .......... .......... .......... 16%  122M 1s
 23600K .......... .......... .......... .......... .......... 16% 98.5M 1s
 23650K .......... .......... .......... .......... .......... 16%  115M 1s
 23700K .......... .......... .......... .......... .......... 16% 98.2M 1s
 23750K .......... .......... .......... .......... .......... 16%  126M 1s
 23800K .......... .......... .......... .......... .......... 16%  126M 1s
 23850K .......... .......... .......... .......... .......... 16% 97.7M 1s
 23900K .......... .......... .......... .......... .......... 16%  118M 1s
 23950K .......... .......... .......... .......... .......... 16%  102M 1s
 24000K .......... .......... .......... .......... .......... 16%  114M 1s
 24050K .......... .......... .......... .......... .......... 16%  127M 1s
 24100K .......... .......... .......... .......... .......... 16% 97.8M 1s
 24150K .......... .......... .......... .......... .......... 16%  120M 1s
 24200K .......... .......... .......... .......... .......... 16% 94.8M 1s
 24250K .......... .......... .......... .......... .......... 16%  132M 1s
 24300K .......... .......... .......... .......... .......... 16%  127M 1s
 24350K .......... .......... .......... .......... .......... 16%  102M 1s
 24400K .......... .......... .......... .......... .......... 17%  122M 1s
 24450K .......... .......... .......... .......... .......... 17% 96.8M 1s
 24500K .......... .......... .......... .......... .......... 17%  130M 1s
 24550K .......... .......... .......... .......... .......... 17%  113M 1s
 24600K .......... .......... .......... .......... .......... 17%  103M 1s
 24650K .......... .......... .......... .......... .......... 17%  120M 1s
 24700K .......... .......... .......... .......... .......... 17% 97.4M 1s
 24750K .......... .......... .......... .......... .......... 17%  106M 1s
 24800K .......... .......... .......... .......... .......... 17%  138M 1s
 24850K .......... .......... .......... .......... .......... 17%  109M 1s
 24900K .......... .......... .......... .......... .......... 17%  118M 1s
 24950K .......... .......... .......... .......... .......... 17%  102M 1s
 25000K .......... .......... .......... .......... .......... 17%  114M 1s
 25050K .......... .......... .......... .......... .......... 17%  123M 1s
 25100K .......... .......... .......... .......... .......... 17%  102M 1s
 25150K .......... .......... .......... .......... .......... 17%  122M 1s
 25200K .......... .......... .......... .......... .......... 17%  101M 1s
 25250K .......... .......... .......... .......... .......... 17%  118M 1s
 25300K .......... .......... .......... .......... .......... 17%  124M 1s
 25350K .......... .......... .......... .......... .......... 17% 96.8M 1s
 25400K .......... .......... .......... .......... .......... 17%  126M 1s
 25450K .......... .......... .......... .......... .......... 17%  100M 1s
 25500K .......... .......... .......... .......... .......... 17%  114M 1s
 25550K .......... .......... .......... .......... .......... 17%  128M 1s
 25600K .......... .......... .......... .......... .......... 17%  102M 1s
 25650K .......... .......... .......... .......... .......... 17%  119M 1s
 25700K .......... .......... .......... .......... .......... 17%  104M 1s
 25750K .......... .......... .......... .......... .......... 17%  115M 1s
 25800K .......... .......... .......... .......... .......... 17%  120M 1s
 25850K .......... .......... .......... .......... .......... 18%  102M 1s
 25900K .......... .......... .......... .......... .......... 18%  118M 1s
 25950K .......... .......... .......... .......... .......... 18%  104M 1s
 26000K .......... .......... .......... .......... .......... 18%  115M 1s
 26050K .......... .......... .......... .......... .......... 18%  130M 1s
 26100K .......... .......... .......... .......... .......... 18% 88.6M 1s
 26150K .......... .......... .......... .......... .......... 18%  147M 1s
 26200K .......... .......... .......... .......... .......... 18% 99.2M 1s
 26250K .......... .......... .......... .......... .......... 18%  120M 1s
 26300K .......... .......... .......... .......... .......... 18%  114M 1s
 26350K .......... .......... .......... .......... .......... 18% 98.4M 1s
 26400K .......... .......... .......... .......... .......... 18%  119M 1s
 26450K .......... .......... .......... .......... .......... 18%  105M 1s
 26500K .......... .......... .......... .......... .......... 18%  126M 1s
 26550K .......... .......... .......... .......... .......... 18%  121M 1s
 26600K .......... .......... .......... .......... .......... 18%  102M 1s
 26650K .......... .......... .......... .......... .......... 18%  116M 1s
 26700K .......... .......... .......... .......... .......... 18%  103M 1s
 26750K .......... .......... .......... .......... .......... 18%  107M 1s
 26800K .......... .......... .......... .......... .......... 18%  136M 1s
 26850K .......... .......... .......... .......... .......... 18%  104M 1s
 26900K .......... .......... .......... .......... .......... 18%  119M 1s
 26950K .......... .......... .......... .......... .......... 18%  101M 1s
 27000K .......... .......... .......... .......... .......... 18%  111M 1s
 27050K .......... .......... .......... .......... .......... 18%  128M 1s
 27100K .......... .......... .......... .......... .......... 18% 98.1M 1s
 27150K .......... .......... .......... .......... .......... 18%  120M 1s
 27200K .......... .......... .......... .......... .......... 18%  106M 1s
 27250K .......... .......... .......... .......... .......... 18%  122M 1s
 27300K .......... .......... .......... .......... .......... 19%  121M 1s
 27350K .......... .......... .......... .......... .......... 19%  100M 1s
 27400K .......... .......... .......... .......... .......... 19%  102M 1s
 27450K .......... .......... .......... .......... .......... 19%  107M 1s
 27500K .......... .......... .......... .......... .......... 19%  122M 1s
 27550K .......... .......... .......... .......... .......... 19%  130M 1s
 27600K .......... .......... .......... .......... .......... 19%  101M 1s
 27650K .......... .......... .......... .......... .......... 19%  125M 1s
 27700K .......... .......... .......... .......... .......... 19%  101M 1s
 27750K .......... .......... .......... .......... .......... 19%  121M 1s
 27800K .......... .......... .......... .......... .......... 19%  121M 1s
 27850K .......... .......... .......... .......... .......... 19% 97.5M 1s
 27900K .......... .......... .......... .......... .......... 19%  114M 1s
 27950K .......... .......... .......... .......... .......... 19%  111M 1s
 28000K .......... .......... .......... .......... .......... 19%  115M 1s
 28050K .......... .......... .......... .......... .......... 19%  110M 1s
 28100K .......... .......... .......... .......... .......... 19%  110M 1s
 28150K .......... .......... .......... .......... .......... 19%  113M 1s
 28200K .......... .......... .......... .......... .......... 19%  108M 1s
 28250K .......... .......... .......... .......... .......... 19%  119M 1s
 28300K .......... .......... .......... .......... .......... 19%  110M 1s
 28350K .......... .......... .......... .......... .......... 19%  107M 1s
 28400K .......... .......... .......... .......... .......... 19%  122M 1s
 28450K .......... .......... .......... .......... .......... 19%  102M 1s
 28500K .......... .......... .......... .......... .......... 19%  118M 1s
 28550K .......... .......... .......... .......... .......... 19%  123M 1s
 28600K .......... .......... .......... .......... .......... 19%  107M 1s
 28650K .......... .......... .......... .......... .......... 19%  116M 1s
 28700K .......... .......... .......... .......... .......... 19% 88.1M 1s
 28750K .......... .......... .......... .......... .......... 20%  113M 1s
 28800K .......... .......... .......... .......... .......... 20%  126M 1s
 28850K .......... .......... .......... .......... .......... 20%  106M 1s
 28900K .......... .......... .......... .......... .......... 20%  118M 1s
 28950K .......... .......... .......... .......... .......... 20%  101M 1s
 29000K .......... .......... .......... .......... .......... 20%  147M 1s
 29050K .......... .......... .......... .......... .......... 20%  115M 1s
 29100K .......... .......... .......... .......... .......... 20%  103M 1s
 29150K .......... .......... .......... .......... .......... 20%  116M 1s
 29200K .......... .......... .......... .......... .......... 20% 98.8M 1s
 29250K .......... .......... .......... .......... .......... 20%  101M 1s
 29300K .......... .......... .......... .......... .......... 20%  125M 1s
 29350K .......... .......... .......... .......... .......... 20% 95.9M 1s
 29400K .......... .......... .......... .......... .......... 20%  171M 1s
 29450K .......... .......... .......... .......... .......... 20% 98.2M 1s
 29500K .......... .......... .......... .......... .......... 20%  121M 1s
 29550K .......... .......... .......... .......... .......... 20%  118M 1s
 29600K .......... .......... .......... .......... .......... 20%  100M 1s
 29650K .......... .......... .......... .......... .......... 20%  121M 1s
 29700K .......... .......... .......... .......... .......... 20% 92.5M 1s
 29750K .......... .......... .......... .......... .......... 20%  132M 1s
 29800K .......... .......... .......... .......... .......... 20%  123M 1s
 29850K .......... .......... .......... .......... .......... 20%  103M 1s
 29900K .......... .......... .......... .......... .......... 20%  119M 1s
 29950K .......... .......... .......... .......... .......... 20%  101M 1s
 30000K .......... .......... .......... .......... .......... 20%  117M 1s
 30050K .......... .......... .......... .......... .......... 20%  123M 1s
 30100K .......... .......... .......... .......... .......... 20%  101M 1s
 30150K .......... .......... .......... .......... .......... 21%  123M 1s
 30200K .......... .......... .......... .......... .......... 21% 99.0M 1s
 30250K .......... .......... .......... .......... .......... 21%  117M 1s
 30300K .......... .......... .......... .......... .......... 21%  124M 1s
 30350K .......... .......... .......... .......... .......... 21% 99.3M 1s
 30400K .......... .......... .......... .......... .......... 21%  123M 1s
 30450K .......... .......... .......... .......... .......... 21% 97.1M 1s
 30500K .......... .......... .......... .......... .......... 21%  115M 1s
 30550K .......... .......... .......... .......... .......... 21%  126M 1s
 30600K .......... .......... .......... .......... .......... 21%  102M 1s
 30650K .......... .......... .......... .......... .......... 21%  116M 1s
 30700K .......... .......... .......... .......... .......... 21% 94.7M 1s
 30750K .......... .......... .......... .......... .......... 21%  138M 1s
 30800K .......... .......... .......... .......... .......... 21%  124M 1s
 30850K .......... .......... .......... .......... .......... 21%  103M 1s
 30900K .......... .......... .......... .......... .......... 21%  115M 1s
 30950K .......... .......... .......... .......... .......... 21% 99.7M 1s
 31000K .......... .......... .......... .......... .......... 21%  126M 1s
 31050K .......... .......... .......... .......... .......... 21%  118M 1s
 31100K .......... .......... .......... .......... .......... 21% 98.1M 1s
 31150K .......... .......... .......... .......... .......... 21%  129M 1s
 31200K .......... .......... .......... .......... .......... 21% 99.0M 1s
 31250K .......... .......... .......... .......... .......... 21%  126M 1s
 31300K .......... .......... .......... .......... .......... 21%  122M 1s
 31350K .......... .......... .......... .......... .......... 21% 99.1M 1s
 31400K .......... .......... .......... .......... .......... 21%  117M 1s
 31450K .......... .......... .......... .......... .......... 21% 99.9M 1s
 31500K .......... .......... .......... .......... .......... 21%  122M 1s
 31550K .......... .......... .......... .......... .......... 21%  121M 1s
 31600K .......... .......... .......... .......... .......... 22% 96.2M 1s
 31650K .......... .......... .......... .......... .......... 22%  125M 1s
 31700K .......... .......... .......... .......... .......... 22%  106M 1s
 31750K .......... .......... .......... .......... .......... 22%  120M 1s
 31800K .......... .......... .......... .......... .......... 22%  120M 1s
 31850K .......... .......... .......... .......... .......... 22%  101M 1s
 31900K .......... .......... .......... .......... .......... 22% 98.7M 1s
 31950K .......... .......... .......... .......... .......... 22%  105M 1s
 32000K .......... .......... .......... .......... .......... 22%  110M 1s
 32050K .......... .......... .......... .......... .......... 22%  154M 1s
 32100K .......... .......... .......... .......... .......... 22%  104M 1s
 32150K .......... .......... .......... .......... .......... 22%  118M 1s
 32200K .......... .......... .......... .......... .......... 22%  102M 1s
 32250K .......... .......... .......... .......... .......... 22%  119M 1s
 32300K .......... .......... .......... .......... .......... 22%  124M 1s
 32350K .......... .......... .......... .......... .......... 22% 99.2M 1s
 32400K .......... .......... .......... .......... .......... 22%  127M 1s
 32450K .......... .......... .......... .......... .......... 22% 99.8M 1s
 32500K .......... .......... .......... .......... .......... 22%  120M 1s
 32550K .......... .......... .......... .......... .......... 22%  115M 1s
 32600K .......... .......... .......... .......... .......... 22%  106M 1s
 32650K .......... .......... .......... .......... .......... 22%  113M 1s
 32700K .......... .......... .......... .......... .......... 22%  103M 1s
 32750K .......... .......... .......... .......... .......... 22%  122M 1s
 32800K .......... .......... .......... .......... .......... 22%  116M 1s
 32850K .......... .......... .......... .......... .......... 22% 98.6M 1s
 32900K .......... .......... .......... .......... .......... 22%  126M 1s
 32950K .......... .......... .......... .......... .......... 22%  102M 1s
 33000K .......... .......... .......... .......... .......... 22%  123M 1s
 33050K .......... .......... .......... .......... .......... 23%  115M 1s
 33100K .......... .......... .......... .......... .......... 23% 93.4M 1s
 33150K .......... .......... .......... .......... .......... 23%  133M 1s
 33200K .......... .......... .......... .......... .......... 23% 99.3M 1s
 33250K .......... .......... .......... .......... .......... 23%  121M 1s
 33300K .......... .......... .......... .......... .......... 23%  124M 1s
 33350K .......... .......... .......... .......... .......... 23% 95.7M 1s
 33400K .......... .......... .......... .......... .......... 23%  129M 1s
 33450K .......... .......... .......... .......... .......... 23%  101M 1s
 33500K .......... .......... .......... .......... .......... 23%  111M 1s
 33550K .......... .......... .......... .......... .......... 23%  133M 1s
 33600K .......... .......... .......... .......... .......... 23%  101M 1s
 33650K .......... .......... .......... .......... .......... 23%  118M 1s
 33700K .......... .......... .......... .......... .......... 23%  105M 1s
 33750K .......... .......... .......... .......... .......... 23%  113M 1s
 33800K .......... .......... .......... .......... .......... 23%  120M 1s
 33850K .......... .......... .......... .......... .......... 23% 99.8M 1s
 33900K .......... .......... .......... .......... .......... 23%  125M 1s
 33950K .......... .......... .......... .......... .......... 23% 95.2M 1s
 34000K .......... .......... .......... .......... .......... 23%  130M 1s
 34050K .......... .......... .......... .......... .......... 23%  124M 1s
 34100K .......... .......... .......... .......... .......... 23% 99.1M 1s
 34150K .......... .......... .......... .......... .......... 23%  124M 1s
 34200K .......... .......... .......... .......... .......... 23% 99.7M 1s
 34250K .......... .......... .......... .......... .......... 23%  123M 1s
 34300K .......... .......... .......... .......... .......... 23%  118M 1s
 34350K .......... .......... .......... .......... .......... 23%  100M 1s
 34400K .......... .......... .......... .......... .......... 23%  122M 1s
 34450K .......... .......... .......... .......... .......... 23% 96.8M 1s
 34500K .......... .......... .......... .......... .......... 24%  121M 1s
 34550K .......... .......... .......... .......... .......... 24%  125M 1s
 34600K .......... .......... .......... .......... .......... 24%  103M 1s
 34650K .......... .......... .......... .......... .......... 24%  121M 1s
 34700K .......... .......... .......... .......... .......... 24% 99.4M 1s
 34750K .......... .......... .......... .......... .......... 24%  119M 1s
 34800K .......... .......... .......... .......... .......... 24%  116M 1s
 34850K .......... .......... .......... .......... .......... 24%  104M 1s
 34900K .......... .......... .......... .......... .......... 24%  121M 1s
 34950K .......... .......... .......... .......... .......... 24%  104M 1s
 35000K .......... .......... .......... .......... .......... 24%  116M 1s
 35050K .......... .......... .......... .......... .......... 24%  123M 1s
 35100K .......... .......... .......... .......... .......... 24%  100M 1s
 35150K .......... .......... .......... .......... .......... 24%  121M 1s
 35200K .......... .......... .......... .......... .......... 24% 95.0M 1s
 35250K .......... .......... .......... .......... .......... 24%  127M 1s
 35300K .......... .......... .......... .......... .......... 24%  117M 1s
 35350K .......... .......... .......... .......... .......... 24%  104M 1s
 35400K .......... .......... .......... .......... .......... 24%  119M 1s
 35450K .......... .......... .......... .......... .......... 24% 96.5M 1s
 35500K .......... .......... .......... .......... .......... 24%  118M 1s
 35550K .......... .......... .......... .......... .......... 24%  130M 1s
 35600K .......... .......... .......... .......... .......... 24%  103M 1s
 35650K .......... .......... .......... .......... .......... 24%  120M 1s
 35700K .......... .......... .......... .......... .......... 24%  102M 1s
 35750K .......... .......... .......... .......... .......... 24%  118M 1s
 35800K .......... .......... .......... .......... .......... 24%  119M 1s
 35850K .......... .......... .......... .......... .......... 24%  106M 1s
 35900K .......... .......... .......... .......... .......... 25%  117M 1s
 35950K .......... .......... .......... .......... .......... 25% 99.6M 1s
 36000K .......... .......... .......... .......... .......... 25%  122M 1s
 36050K .......... .......... .......... .......... .......... 25%  118M 1s
 36100K .......... .......... .......... .......... .......... 25% 96.4M 1s
 36150K .......... .......... .......... .......... .......... 25%  119M 1s
 36200K .......... .......... .......... .......... .......... 25%  101M 1s
 36250K .......... .......... .......... .......... .......... 25%  124M 1s
 36300K .......... .......... .......... .......... .......... 25%  124M 1s
 36350K .......... .......... .......... .......... .......... 25%  103M 1s
 36400K .......... .......... .......... .......... .......... 25%  121M 1s
 36450K .......... .......... .......... .......... .......... 25% 96.6M 1s
 36500K .......... .......... .......... .......... .......... 25%  128M 1s
 36550K .......... .......... .......... .......... .......... 25%  112M 1s
 36600K .......... .......... .......... .......... .......... 25% 94.5M 1s
 36650K .......... .......... .......... .......... .......... 25%  138M 1s
 36700K .......... .......... .......... .......... .......... 25%  101M 1s
 36750K .......... .......... .......... .......... .......... 25%  117M 1s
 36800K .......... .......... .......... .......... .......... 25%  124M 1s
 36850K .......... .......... .......... .......... .......... 25% 96.4M 1s
 36900K .......... .......... .......... .......... .......... 25%  127M 1s
 36950K .......... .......... .......... .......... .......... 25%  101M 1s
 37000K .......... .......... .......... .......... .......... 25%  119M 1s
 37050K .......... .......... .......... .......... .......... 25%  117M 1s
 37100K .......... .......... .......... .......... .......... 25%  104M 1s
 37150K .......... .......... .......... .......... .......... 25%  105M 1s
 37200K .......... .......... .......... .......... .......... 25%  109M 1s
 37250K .......... .......... .......... .......... .......... 25%  126M 1s
 37300K .......... .......... .......... .......... .......... 25%  120M 1s
 37350K .......... .......... .......... .......... .......... 26%  102M 1s
 37400K .......... .......... .......... .......... .......... 26%  109M 1s
 37450K .......... .......... .......... .......... .......... 26%  110M 1s
 37500K .......... .......... .......... .......... .......... 26%  122M 1s
 37550K .......... .......... .......... .......... .......... 26%  119M 1s
 37600K .......... .......... .......... .......... .......... 26%  101M 1s
 37650K .......... .......... .......... .......... .......... 26%  122M 1s
 37700K .......... .......... .......... .......... .......... 26% 94.5M 1s
 37750K .......... .......... .......... .......... .......... 26%  128M 1s
 37800K .......... .......... .......... .......... .......... 26%  124M 1s
 37850K .......... .......... .......... .......... .......... 26% 99.7M 1s
 37900K .......... .......... .......... .......... .......... 26%  121M 1s
 37950K .......... .......... .......... .......... .......... 26%  102M 1s
 38000K .......... .......... .......... .......... .......... 26%  116M 1s
 38050K .......... .......... .......... .......... .......... 26%  121M 1s
 38100K .......... .......... .......... .......... .......... 26%  105M 1s
 38150K .......... .......... .......... .......... .......... 26%  117M 1s
 38200K .......... .......... .......... .......... .......... 26% 98.1M 1s
 38250K .......... .......... .......... .......... .......... 26%  127M 1s
 38300K .......... .......... .......... .......... .......... 26%  116M 1s
 38350K .......... .......... .......... .......... .......... 26%  102M 1s
 38400K .......... .......... .......... .......... .......... 26%  123M 1s
 38450K .......... .......... .......... .......... .......... 26% 93.6M 1s
 38500K .......... .......... .......... .......... .......... 26%  122M 1s
 38550K .......... .......... .......... .......... .......... 26%  129M 1s
 38600K .......... .......... .......... .......... .......... 26%  101M 1s
 38650K .......... .......... .......... .......... .......... 26%  116M 1s
 38700K .......... .......... .......... .......... .......... 26%  102M 1s
 38750K .......... .......... .......... .......... .......... 26%  111M 1s
 38800K .......... .......... .......... .......... .......... 27%  131M 1s
 38850K .......... .......... .......... .......... .......... 27%  102M 1s
 38900K .......... .......... .......... .......... .......... 27%  120M 1s
 38950K .......... .......... .......... .......... .......... 27%  105M 1s
 39000K .......... .......... .......... .......... .......... 27%  113M 1s
 39050K .......... .......... .......... .......... .......... 27%  120M 1s
 39100K .......... .......... .......... .......... .......... 27%  104M 1s
 39150K .......... .......... .......... .......... .......... 27%  119M 1s
 39200K .......... .......... .......... .......... .......... 27%  102M 1s
 39250K .......... .......... .......... .......... .......... 27%  121M 1s
 39300K .......... .......... .......... .......... .......... 27%  117M 1s
 39350K .......... .......... .......... .......... .......... 27% 97.1M 1s
 39400K .......... .......... .......... .......... .......... 27%  115M 1s
 39450K .......... .......... .......... .......... .......... 27%  116M 1s
 39500K .......... .......... .......... .......... .......... 27%  116M 1s
 39550K .......... .......... .......... .......... .......... 27%  120M 1s
 39600K .......... .......... .......... .......... .......... 27% 98.6M 1s
 39650K .......... .......... .......... .......... .......... 27%  123M 1s
 39700K .......... .......... .......... .......... .......... 27%  102M 1s
 39750K .......... .......... .......... .......... .......... 27%  120M 1s
 39800K .......... .......... .......... .......... .......... 27%  124M 1s
 39850K .......... .......... .......... .......... .......... 27% 99.8M 1s
 39900K .......... .......... .......... .......... .......... 27%  120M 1s
 39950K .......... .......... .......... .......... .......... 27%  102M 1s
 40000K .......... .......... .......... .......... .......... 27%  121M 1s
 40050K .......... .......... .......... .......... .......... 27%  115M 1s
 40100K .......... .......... .......... .......... .......... 27%  101M 1s
 40150K .......... .......... .......... .......... .......... 27%  123M 1s
 40200K .......... .......... .......... .......... .......... 27%  101M 1s
 40250K .......... .......... .......... .......... .......... 28%  116M 1s
 40300K .......... .......... .......... .......... .......... 28%  120M 1s
 40350K .......... .......... .......... .......... .......... 28% 96.9M 1s
 40400K .......... .......... .......... .......... .......... 28%  135M 1s
 40450K .......... .......... .......... .......... .......... 28% 99.9M 1s
 40500K .......... .......... .......... .......... .......... 28%  121M 1s
 40550K .......... .......... .......... .......... .......... 28%  118M 1s
 40600K .......... .......... .......... .......... .......... 28%  104M 1s
 40650K .......... .......... .......... .......... .......... 28%  113M 1s
 40700K .......... .......... .......... .......... .......... 28% 97.2M 1s
 40750K .......... .......... .......... .......... .......... 28%  134M 1s
 40800K .......... .......... .......... .......... .......... 28%  121M 1s
 40850K .......... .......... .......... .......... .......... 28% 98.2M 1s
 40900K .......... .......... .......... .......... .......... 28%  117M 1s
 40950K .......... .......... .......... .......... .......... 28%  104M 1s
 41000K .......... .......... .......... .......... .......... 28%  119M 1s
 41050K .......... .......... .......... .......... .......... 28%  122M 1s
 41100K .......... .......... .......... .......... .......... 28%  104M 1s
 41150K .......... .......... .......... .......... .......... 28%  116M 1s
 41200K .......... .......... .......... .......... .......... 28%  104M 1s
 41250K .......... .......... .......... .......... .......... 28%  114M 1s
 41300K .......... .......... .......... .......... .......... 28%  112M 1s
 41350K .......... .......... .......... .......... .......... 28%  105M 1s
 41400K .......... .......... .......... .......... .......... 28%  125M 1s
 41450K .......... .......... .......... .......... .......... 28%  104M 1s
 41500K .......... .......... .......... .......... .......... 28%  123M 1s
 41550K .......... .......... .......... .......... .......... 28%  112M 1s
 41600K .......... .......... .......... .......... .......... 28%  108M 1s
 41650K .......... .......... .......... .......... .......... 29%  109M 1s
 41700K .......... .......... .......... .......... .......... 29%  109M 1s
 41750K .......... .......... .......... .......... .......... 29%  117M 1s
 41800K .......... .......... .......... .......... .......... 29%  123M 1s
 41850K .......... .......... .......... .......... .......... 29%  102M 1s
 41900K .......... .......... .......... .......... .......... 29%  114M 1s
 41950K .......... .......... .......... .......... .......... 29%  107M 1s
 42000K .......... .......... .......... .......... .......... 29%  116M 1s
 42050K .......... .......... .......... .......... .......... 29%  123M 1s
 42100K .......... .......... .......... .......... .......... 29% 99.6M 1s
 42150K .......... .......... .......... .......... .......... 29%  119M 1s
 42200K .......... .......... .......... .......... .......... 29% 94.4M 1s
 42250K .......... .......... .......... .......... .......... 29%  126M 1s
 42300K .......... .......... .......... .......... .......... 29%  125M 1s
 42350K .......... .......... .......... .......... .......... 29%  103M 1s
 42400K .......... .......... .......... .......... .......... 29%  117M 1s
 42450K .......... .......... .......... .......... .......... 29%  103M 1s
 42500K .......... .......... .......... .......... .......... 29%  117M 1s
 42550K .......... .......... .......... .......... .......... 29%  128M 1s
 42600K .......... .......... .......... .......... .......... 29% 98.9M 1s
 42650K .......... .......... .......... .......... .......... 29%  121M 1s
 42700K .......... .......... .......... .......... .......... 29% 95.4M 1s
 42750K .......... .......... .......... .......... .......... 29%  123M 1s
 42800K .......... .......... .......... .......... .......... 29%  127M 1s
 42850K .......... .......... .......... .......... .......... 29%  101M 1s
 42900K .......... .......... .......... .......... .......... 29%  120M 1s
 42950K .......... .......... .......... .......... .......... 29%  102M 1s
 43000K .......... .......... .......... .......... .......... 29%  120M 1s
 43050K .......... .......... .......... .......... .......... 29%  114M 1s
 43100K .......... .......... .......... .......... .......... 30%  106M 1s
 43150K .......... .......... .......... .......... .......... 30%  120M 1s
 43200K .......... .......... .......... .......... .......... 30% 97.2M 1s
 43250K .......... .......... .......... .......... .......... 30%  124M 1s
 43300K .......... .......... .......... .......... .......... 30%  117M 1s
 43350K .......... .......... .......... .......... .......... 30%  102M 1s
 43400K .......... .......... .......... .......... .......... 30%  111M 1s
 43450K .......... .......... .......... .......... .......... 30%  113M 1s
 43500K .......... .......... .......... .......... .......... 30%  108M 1s
 43550K .......... .......... .......... .......... .......... 30%  133M 1s
 43600K .......... .......... .......... .......... .......... 30%  104M 1s
 43650K .......... .......... .......... .......... .......... 30%  120M 1s
 43700K .......... .......... .......... .......... .......... 30%  102M 1s
 43750K .......... .......... .......... .......... .......... 30%  120M 1s
 43800K .......... .......... .......... .......... .......... 30%  119M 1s
 43850K .......... .......... .......... .......... .......... 30%  101M 1s
 43900K .......... .......... .......... .......... .......... 30%  117M 1s
 43950K .......... .......... .......... .......... .......... 30%  103M 1s
 44000K .......... .......... .......... .......... .......... 30%  124M 1s
 44050K .......... .......... .......... .......... .......... 30%  115M 1s
 44100K .......... .......... .......... .......... .......... 30%  102M 1s
 44150K .......... .......... .......... .......... .......... 30%  120M 1s
 44200K .......... .......... .......... .......... .......... 30% 98.2M 1s
 44250K .......... .......... .......... .......... .......... 30%  126M 1s
 44300K .......... .......... .......... .......... .......... 30%  117M 1s
 44350K .......... .......... .......... .......... .......... 30%  105M 1s
 44400K .......... .......... .......... .......... .......... 30%  120M 1s
 44450K .......... .......... .......... .......... .......... 30%  102M 1s
 44500K .......... .......... .......... .......... .......... 30%  117M 1s
 44550K .......... .......... .......... .......... .......... 31%  117M 1s
 44600K .......... .......... .......... .......... .......... 31%  106M 1s
 44650K .......... .......... .......... .......... .......... 31%  116M 1s
 44700K .......... .......... .......... .......... .......... 31%  101M 1s
 44750K .......... .......... .......... .......... .......... 31%  116M 1s
 44800K .......... .......... .......... .......... .......... 31%  123M 1s
 44850K .......... .......... .......... .......... .......... 31%  101M 1s
 44900K .......... .......... .......... .......... .......... 31%  124M 1s
 44950K .......... .......... .......... .......... .......... 31%  102M 1s
 45000K .......... .......... .......... .......... .......... 31%  116M 1s
 45050K .......... .......... .......... .......... .......... 31%  118M 1s
 45100K .......... .......... .......... .......... .......... 31%  109M 1s
 45150K .......... .......... .......... .......... .......... 31%  116M 1s
 45200K .......... .......... .......... .......... .......... 31%  102M 1s
 45250K .......... .......... .......... .......... .......... 31%  120M 1s
 45300K .......... .......... .......... .......... .......... 31%  121M 1s
 45350K .......... .......... .......... .......... .......... 31%  100M 1s
 45400K .......... .......... .......... .......... .......... 31%  114M 1s
 45450K .......... .......... .......... .......... .......... 31%  107M 1s
 45500K .......... .......... .......... .......... .......... 31%  120M 1s
 45550K .......... .......... .......... .......... .......... 31%  120M 1s
 45600K .......... .......... .......... .......... .......... 31%  100M 1s
 45650K .......... .......... .......... .......... .......... 31%  123M 1s
 45700K .......... .......... .......... .......... .......... 31% 96.6M 1s
 45750K .......... .......... .......... .......... .......... 31%  126M 1s
 45800K .......... .......... .......... .......... .......... 31%  121M 1s
 45850K .......... .......... .......... .......... .......... 31% 99.8M 1s
 45900K .......... .......... .......... .......... .......... 31%  123M 1s
 45950K .......... .......... .......... .......... .......... 31%  101M 1s
 46000K .......... .......... .......... .......... .......... 32%  111M 1s
 46050K .......... .......... .......... .......... .......... 32%  121M 1s
 46100K .......... .......... .......... .......... .......... 32%  106M 1s
 46150K .......... .......... .......... .......... .......... 32%  124M 1s
 46200K .......... .......... .......... .......... .......... 32%  102M 1s
 46250K .......... .......... .......... .......... .......... 32%  121M 1s
 46300K .......... .......... .......... .......... .......... 32%  111M 1s
 46350K .......... .......... .......... .......... .......... 32% 97.9M 1s
 46400K .......... .......... .......... .......... .......... 32%  133M 1s
 46450K .......... .......... .......... .......... .......... 32%  102M 1s
 46500K .......... .......... .......... .......... .......... 32%  122M 1s
 46550K .......... .......... .......... .......... .......... 32%  116M 1s
 46600K .......... .......... .......... .......... .......... 32% 97.2M 1s
 46650K .......... .......... .......... .......... .......... 32%  126M 1s
 46700K .......... .......... .......... .......... .......... 32%  107M 1s
 46750K .......... .......... .......... .......... .......... 32%  120M 1s
 46800K .......... .......... .......... .......... .......... 32%  113M 1s
 46850K .......... .......... .......... .......... .......... 32%  106M 1s
 46900K .......... .......... .......... .......... .......... 32%  116M 1s
 46950K .......... .......... .......... .......... .......... 32%  106M 1s
 47000K .......... .......... .......... .......... .......... 32%  108M 1s
 47050K .......... .......... .......... .......... .......... 32%  120M 1s
 47100K .......... .......... .......... .......... .......... 32%  102M 1s
 47150K .......... .......... .......... .......... .......... 32%  123M 1s
 47200K .......... .......... .......... .......... .......... 32% 98.1M 1s
 47250K .......... .......... .......... .......... .......... 32%  127M 1s
 47300K .......... .......... .......... .......... .......... 32%  126M 1s
 47350K .......... .......... .......... .......... .......... 32%  102M 1s
 47400K .......... .......... .......... .......... .......... 32%  121M 1s
 47450K .......... .......... .......... .......... .......... 33% 98.0M 1s
 47500K .......... .......... .......... .......... .......... 33%  109M 1s
 47550K .......... .......... .......... .......... .......... 33%  138M 1s
 47600K .......... .......... .......... .......... .......... 33% 99.4M 1s
 47650K .......... .......... .......... .......... .......... 33%  122M 1s
 47700K .......... .......... .......... .......... .......... 33%  103M 1s
 47750K .......... .......... .......... .......... .......... 33%  117M 1s
 47800K .......... .......... .......... .......... .......... 33%  118M 1s
 47850K .......... .......... .......... .......... .......... 33%  104M 1s
 47900K .......... .......... .......... .......... .......... 33%  118M 1s
 47950K .......... .......... .......... .......... .......... 33%  102M 1s
 48000K .......... .......... .......... .......... .......... 33%  119M 1s
 48050K .......... .......... .......... .......... .......... 33% 83.4M 1s
 48100K .......... .......... .......... .......... .......... 33%  152M 1s
 48150K .......... .......... .......... .......... .......... 33%  125M 1s
 48200K .......... .......... .......... .......... .......... 33%  103M 1s
 48250K .......... .......... .......... .......... .......... 33%  119M 1s
 48300K .......... .......... .......... .......... .......... 33%  123M 1s
 48350K .......... .......... .......... .......... .......... 33%  102M 1s
 48400K .......... .......... .......... .......... .......... 33%  115M 1s
 48450K .......... .......... .......... .......... .......... 33%  105M 1s
 48500K .......... .......... .......... .......... .......... 33%  121M 1s
 48550K .......... .......... .......... .......... .......... 33%  116M 1s
 48600K .......... .......... .......... .......... .......... 33%  100M 1s
 48650K .......... .......... .......... .......... .......... 33%  118M 1s
 48700K .......... .......... .......... .......... .......... 33%  107M 1s
 48750K .......... .......... .......... .......... .......... 33%  119M 1s
 48800K .......... .......... .......... .......... .......... 33%  120M 1s
 48850K .......... .......... .......... .......... .......... 34% 99.9M 1s
 48900K .......... .......... .......... .......... .......... 34%  107M 1s
 48950K .......... .......... .......... .......... .......... 34%  111M 1s
 49000K .......... .......... .......... .......... .......... 34%  113M 1s
 49050K .......... .......... .......... .......... .......... 34%  134M 1s
 49100K .......... .......... .......... .......... .......... 34%  101M 1s
 49150K .......... .......... .......... .......... .......... 34%  115M 1s
 49200K .......... .......... .......... .......... .......... 34%  104M 1s
 49250K .......... .......... .......... .......... .......... 34%  122M 1s
 49300K .......... .......... .......... .......... .......... 34%  116M 1s
 49350K .......... .......... .......... .......... .......... 34%  100M 1s
 49400K .......... .......... .......... .......... .......... 34%  126M 1s
 49450K .......... .......... .......... .......... .......... 34%  103M 1s
 49500K .......... .......... .......... .......... .......... 34%  111M 1s
 49550K .......... .......... .......... .......... .......... 34%  122M 1s
 49600K .......... .......... .......... .......... .......... 34%  106M 1s
 49650K .......... .......... .......... .......... .......... 34%  116M 1s
 49700K .......... .......... .......... .......... .......... 34%  101M 1s
 49750K .......... .......... .......... .......... .......... 34%  125M 1s
 49800K .......... .......... .......... .......... .......... 34%  119M 1s
 49850K .......... .......... .......... .......... .......... 34% 94.8M 1s
 49900K .......... .......... .......... .......... .......... 34%  130M 1s
 49950K .......... .......... .......... .......... .......... 34%  103M 1s
 50000K .......... .......... .......... .......... .......... 34%  118M 1s
 50050K .......... .......... .......... .......... .......... 34%  118M 1s
 50100K .......... .......... .......... .......... .......... 34%  100M 1s
 50150K .......... .......... .......... .......... .......... 34%  110M 1s
 50200K .......... .......... .......... .......... .......... 34%  115M 1s
 50250K .......... .......... .......... .......... .......... 34%  118M 1s
 50300K .......... .......... .......... .......... .......... 35%  120M 1s
 50350K .......... .......... .......... .......... .......... 35%  105M 1s
 50400K .......... .......... .......... .......... .......... 35%  109M 1s
 50450K .......... .......... .......... .......... .......... 35% 96.3M 1s
 50500K .......... .......... .......... .......... .......... 35%  136M 1s
 50550K .......... .......... .......... .......... .......... 35%  106M 1s
 50600K .......... .......... .......... .......... .......... 35%  114M 1s
 50650K .......... .......... .......... .......... .......... 35%  123M 1s
 50700K .......... .......... .......... .......... .......... 35%  103M 1s
 50750K .......... .......... .......... .......... .......... 35%  122M 1s
 50800K .......... .......... .......... .......... .......... 35%  117M 1s
 50850K .......... .......... .......... .......... .......... 35%  102M 1s
 50900K .......... .......... .......... .......... .......... 35%  114M 1s
 50950K .......... .......... .......... .......... .......... 35%  102M 1s
 51000K .......... .......... .......... .......... .......... 35%  124M 1s
 51050K .......... .......... .......... .......... .......... 35%  122M 1s
 51100K .......... .......... .......... .......... .......... 35%  102M 1s
 51150K .......... .......... .......... .......... .......... 35%  112M 1s
 51200K .......... .......... .......... .......... .......... 35%  106M 1s
 51250K .......... .......... .......... .......... .......... 35%  124M 1s
 51300K .......... .......... .......... .......... .......... 35%  119M 1s
 51350K .......... .......... .......... .......... .......... 35%  101M 1s
 51400K .......... .......... .......... .......... .......... 35%  118M 1s
 51450K .......... .......... .......... .......... .......... 35% 85.5M 1s
 51500K .......... .......... .......... .......... .......... 35%  127M 1s
 51550K .......... .......... .......... .......... .......... 35%  104M 1s
 51600K .......... .......... .......... .......... .......... 35% 91.0M 1s
 51650K .......... .......... .......... .......... .......... 35%  169M 1s
 51700K .......... .......... .......... .......... .......... 35%  120M 1s
 51750K .......... .......... .......... .......... .......... 36%  121M 1s
 51800K .......... .......... .......... .......... .......... 36% 91.8M 1s
 51850K .......... .......... .......... .......... .......... 36%  122M 1s
 51900K .......... .......... .......... .......... .......... 36%  134M 1s
 51950K .......... .......... .......... .......... .......... 36% 99.6M 1s
 52000K .......... .......... .......... .......... .......... 36%  123M 1s
 52050K .......... .......... .......... .......... .......... 36%  117M 1s
 52100K .......... .......... .......... .......... .......... 36% 98.8M 1s
 52150K .......... .......... .......... .......... .......... 36%  123M 1s
 52200K .......... .......... .......... .......... .......... 36%  104M 1s
 52250K .......... .......... .......... .......... .......... 36%  119M 1s
 52300K .......... .......... .......... .......... .......... 36%  119M 1s
 52350K .......... .......... .......... .......... .......... 36%  103M 1s
 52400K .......... .......... .......... .......... .......... 36%  115M 1s
 52450K .......... .......... .......... .......... .......... 36%  107M 1s
 52500K .......... .......... .......... .......... .......... 36%  119M 1s
 52550K .......... .......... .......... .......... .......... 36%  115M 1s
 52600K .......... .......... .......... .......... .......... 36%  104M 1s
 52650K .......... .......... .......... .......... .......... 36%  118M 1s
 52700K .......... .......... .......... .......... .......... 36%  102M 1s
 52750K .......... .......... .......... .......... .......... 36%  122M 1s
 52800K .......... .......... .......... .......... .......... 36%  121M 1s
 52850K .......... .......... .......... .......... .......... 36% 97.9M 1s
 52900K .......... .......... .......... .......... .......... 36%  122M 1s
 52950K .......... .......... .......... .......... .......... 36%  102M 1s
 53000K .......... .......... .......... .......... .......... 36%  121M 1s
 53050K .......... .......... .......... .......... .......... 36% 97.7M 1s
 53100K .......... .......... .......... .......... .......... 36%  118M 1s
 53150K .......... .......... .......... .......... .......... 36%  127M 1s
 53200K .......... .......... .......... .......... .......... 37%  101M 1s
 53250K .......... .......... .......... .......... .......... 37%  122M 1s
 53300K .......... .......... .......... .......... .......... 37%  119M 1s
 53350K .......... .......... .......... .......... .......... 37% 95.8M 1s
 53400K .......... .......... .......... .......... .......... 37%  127M 1s
 53450K .......... .......... .......... .......... .......... 37%  101M 1s
 53500K .......... .......... .......... .......... .......... 37%  118M 1s
 53550K .......... .......... .......... .......... .......... 37%  127M 1s
 53600K .......... .......... .......... .......... .......... 37%  101M 1s
 53650K .......... .......... .......... .......... .......... 37%  114M 1s
 53700K .......... .......... .......... .......... .......... 37%  109M 1s
 53750K .......... .......... .......... .......... .......... 37%  118M 1s
 53800K .......... .......... .......... .......... .......... 37%  117M 1s
 53850K .......... .......... .......... .......... .......... 37%  101M 1s
 53900K .......... .......... .......... .......... .......... 37%  112M 1s
 53950K .......... .......... .......... .......... .......... 37%  109M 1s
 54000K .......... .......... .......... .......... .......... 37%  119M 1s
 54050K .......... .......... .......... .......... .......... 37%  119M 1s
 54100K .......... .......... .......... .......... .......... 37%  104M 1s
 54150K .......... .......... .......... .......... .......... 37%  120M 1s
 54200K .......... .......... .......... .......... .......... 37% 92.8M 1s
 54250K .......... .......... .......... .......... .......... 37%  124M 1s
 54300K .......... .......... .......... .......... .......... 37%  112M 1s
 54350K .......... .......... .......... .......... .......... 37%  101M 1s
 54400K .......... .......... .......... .......... .......... 37%  115M 1s
 54450K .......... .......... .......... .......... .......... 37%  112M 1s
 54500K .......... .......... .......... .......... .......... 37%  113M 1s
 54550K .......... .......... .......... .......... .......... 37%  119M 1s
 54600K .......... .......... .......... .......... .......... 38%  113M 1s
 54650K .......... .......... .......... .......... .......... 38% 93.0M 1s
 54700K .......... .......... .......... .......... .......... 38%  119M 1s
 54750K .......... .......... .......... .......... .......... 38%  117M 1s
 54800K .......... .......... .......... .......... .......... 38%  108M 1s
 54850K .......... .......... .......... .......... .......... 38%  122M 1s
 54900K .......... .......... .......... .......... .......... 38%  103M 1s
 54950K .......... .......... .......... .......... .......... 38%  114M 1s
 55000K .......... .......... .......... .......... .......... 38%  128M 1s
 55050K .......... .......... .......... .......... .......... 38%  126M 1s
 55100K .......... .......... .......... .......... .......... 38%  102M 1s
 55150K .......... .......... .......... .......... .......... 38%  113M 1s
 55200K .......... .......... .......... .......... .......... 38% 94.9M 1s
 55250K .......... .......... .......... .......... .......... 38%  113M 1s
 55300K .......... .......... .......... .......... .......... 38%  124M 1s
 55350K .......... .......... .......... .......... .......... 38% 93.3M 1s
 55400K .......... .......... .......... .......... .......... 38%  136M 1s
 55450K .......... .......... .......... .......... .......... 38% 96.0M 1s
 55500K .......... .......... .......... .......... .......... 38%  118M 1s
 55550K .......... .......... .......... .......... .......... 38%  147M 1s
 55600K .......... .......... .......... .......... .......... 38%  107M 1s
 55650K .......... .......... .......... .......... .......... 38%  114M 1s
 55700K .......... .......... .......... .......... .......... 38%  104M 1s
 55750K .......... .......... .......... .......... .......... 38%  122M 1s
 55800K .......... .......... .......... .......... .......... 38%  115M 1s
 55850K .......... .......... .......... .......... .......... 38%  109M 1s
 55900K .......... .......... .......... .......... .......... 38%  121M 1s
 55950K .......... .......... .......... .......... .......... 38% 98.3M 1s
 56000K .......... .......... .......... .......... .......... 38%  123M 1s
 56050K .......... .......... .......... .......... .......... 39%  110M 1s
 56100K .......... .......... .......... .......... .......... 39%  101M 1s
 56150K .......... .......... .......... .......... .......... 39%  121M 1s
 56200K .......... .......... .......... .......... .......... 39%  109M 1s
 56250K .......... .......... .......... .......... .......... 39%  118M 1s
 56300K .......... .......... .......... .......... .......... 39%  119M 1s
 56350K .......... .......... .......... .......... .......... 39%  105M 1s
 56400K .......... .......... .......... .......... .......... 39%  117M 1s
 56450K .......... .......... .......... .......... .......... 39%  104M 1s
 56500K .......... .......... .......... .......... .......... 39%  119M 1s
 56550K .......... .......... .......... .......... .......... 39%  117M 1s
 56600K .......... .......... .......... .......... .......... 39% 99.9M 1s
 56650K .......... .......... .......... .......... .......... 39%  117M 1s
 56700K .......... .......... .......... .......... .......... 39%  101M 1s
 56750K .......... .......... .......... .......... .......... 39%  124M 1s
 56800K .......... .......... .......... .......... .......... 39%  120M 1s
 56850K .......... .......... .......... .......... .......... 39% 97.0M 1s
 56900K .......... .......... .......... .......... .......... 39%  120M 1s
 56950K .......... .......... .......... .......... .......... 39%  104M 1s
 57000K .......... .......... .......... .......... .......... 39%  126M 1s
 57050K .......... .......... .......... .......... .......... 39%  108M 1s
 57100K .......... .......... .......... .......... .......... 39%  103M 1s
 57150K .......... .......... .......... .......... .......... 39%  122M 1s
 57200K .......... .......... .......... .......... .......... 39%  109M 1s
 57250K .......... .......... .......... .......... .......... 39% 87.4M 1s
 57300K .......... .......... .......... .......... .......... 39%  182M 1s
 57350K .......... .......... .......... .......... .......... 39%  104M 1s
 57400K .......... .......... .......... .......... .......... 39%  117M 1s
 57450K .......... .......... .......... .......... .......... 39%  103M 1s
 57500K .......... .......... .......... .......... .......... 40%  120M 1s
 57550K .......... .......... .......... .......... .......... 40%  121M 1s
 57600K .......... .......... .......... .......... .......... 40%  103M 1s
 57650K .......... .......... .......... .......... .......... 40%  113M 1s
 57700K .......... .......... .......... .......... .......... 40%  102M 1s
 57750K .......... .......... .......... .......... .......... 40%  109M 1s
 57800K .......... .......... .......... .......... .......... 40%  137M 1s
 57850K .......... .......... .......... .......... .......... 40%  103M 1s
 57900K .......... .......... .......... .......... .......... 40%  114M 1s
 57950K .......... .......... .......... .......... .......... 40%  103M 1s
 58000K .......... .......... .......... .......... .......... 40%  127M 1s
 58050K .......... .......... .......... .......... .......... 40%  106M 1s
 58100K .......... .......... .......... .......... .......... 40%  102M 1s
 58150K .......... .......... .......... .......... .......... 40%  136M 1s
 58200K .......... .......... .......... .......... .......... 40%  101M 1s
 58250K .......... .......... .......... .......... .......... 40%  122M 1s
 58300K .......... .......... .......... .......... .......... 40%  115M 1s
 58350K .......... .......... .......... .......... .......... 40% 95.0M 1s
 58400K .......... .......... .......... .......... .......... 40%  134M 1s
 58450K .......... .......... .......... .......... .......... 40% 95.1M 1s
 58500K .......... .......... .......... .......... .......... 40%  128M 1s
 58550K .......... .......... .......... .......... .......... 40%  126M 1s
 58600K .......... .......... .......... .......... .......... 40% 99.2M 1s
 58650K .......... .......... .......... .......... .......... 40%  122M 1s
 58700K .......... .......... .......... .......... .......... 40% 93.1M 1s
 58750K .......... .......... .......... .......... .......... 40%  130M 1s
 58800K .......... .......... .......... .......... .......... 40%  126M 1s
 58850K .......... .......... .......... .......... .......... 40%  100M 1s
 58900K .......... .......... .......... .......... .......... 40%  114M 1s
 58950K .......... .......... .......... .......... .......... 41%  103M 1s
 59000K .......... .......... .......... .......... .......... 41%  121M 1s
 59050K .......... .......... .......... .......... .......... 41%  122M 1s
 59100K .......... .......... .......... .......... .......... 41%  102M 1s
 59150K .......... .......... .......... .......... .......... 41%  121M 1s
 59200K .......... .......... .......... .......... .......... 41% 91.6M 1s
 59250K .......... .......... .......... .......... .......... 41%  128M 1s
 59300K .......... .......... .......... .......... .......... 41%  111M 1s
 59350K .......... .......... .......... .......... .......... 41%  108M 1s
 59400K .......... .......... .......... .......... .......... 41%  132M 1s
 59450K .......... .......... .......... .......... .......... 41%  101M 1s
 59500K .......... .......... .......... .......... .......... 41%  110M 1s
 59550K .......... .......... .......... .......... .......... 41%  126M 1s
 59600K .......... .......... .......... .......... .......... 41% 96.9M 1s
 59650K .......... .......... .......... .......... .......... 41%  129M 1s
 59700K .......... .......... .......... .......... .......... 41% 98.3M 1s
 59750K .......... .......... .......... .......... .......... 41%  112M 1s
 59800K .......... .......... .......... .......... .......... 41%  135M 1s
 59850K .......... .......... .......... .......... .......... 41% 98.5M 1s
 59900K .......... .......... .......... .......... .......... 41%  124M 1s
 59950K .......... .......... .......... .......... .......... 41% 98.5M 1s
 60000K .......... .......... .......... .......... .......... 41%  124M 1s
 60050K .......... .......... .......... .......... .......... 41%  115M 1s
 60100K .......... .......... .......... .......... .......... 41%  106M 1s
 60150K .......... .......... .......... .......... .......... 41%  116M 1s
 60200K .......... .......... .......... .......... .......... 41%  101M 1s
 60250K .......... .......... .......... .......... .......... 41%  125M 1s
 60300K .......... .......... .......... .......... .......... 41%  112M 1s
 60350K .......... .......... .......... .......... .......... 42%  110M 1s
 60400K .......... .......... .......... .......... .......... 42%  121M 1s
 60450K .......... .......... .......... .......... .......... 42%  101M 1s
 60500K .......... .......... .......... .......... .......... 42%  113M 1s
 60550K .......... .......... .......... .......... .......... 42%  115M 1s
 60600K .......... .......... .......... .......... .......... 42%  109M 1s
 60650K .......... .......... .......... .......... .......... 42%  105M 1s
 60700K .......... .......... .......... .......... .......... 42%  117M 1s
 60750K .......... .......... .......... .......... .......... 42%  114M 1s
 60800K .......... .......... .......... .......... .......... 42%  124M 1s
 60850K .......... .......... .......... .......... .......... 42% 97.7M 1s
 60900K .......... .......... .......... .......... .......... 42%  123M 1s
 60950K .......... .......... .......... .......... .......... 42% 97.0M 1s
 61000K .......... .......... .......... .......... .......... 42%  131M 1s
 61050K .......... .......... .......... .......... .......... 42%  121M 1s
 61100K .......... .......... .......... .......... .......... 42% 99.3M 1s
 61150K .......... .......... .......... .......... .......... 42%  121M 1s
 61200K .......... .......... .......... .......... .......... 42% 90.6M 1s
 61250K .......... .......... .......... .......... .......... 42%  127M 1s
 61300K .......... .......... .......... .......... .......... 42%  121M 1s
 61350K .......... .......... .......... .......... .......... 42% 68.4M 1s
 61400K .......... .......... .......... .......... .......... 42%  189M 1s
 61450K .......... .......... .......... .......... .......... 42%  136M 1s
 61500K .......... .......... .......... .......... .......... 42%  120M 1s
 61550K .......... .......... .......... .......... .......... 42%  119M 1s
 61600K .......... .......... .......... .......... .......... 42% 93.9M 1s
 61650K .......... .......... .......... .......... .......... 42%  115M 1s
 61700K .......... .......... .......... .......... .......... 42%  100M 1s
 61750K .......... .......... .......... .......... .......... 42%  112M 1s
 61800K .......... .......... .......... .......... .......... 43%  149M 1s
 61850K .......... .......... .......... .......... .......... 43%  104M 1s
 61900K .......... .......... .......... .......... .......... 43%  117M 1s
 61950K .......... .......... .......... .......... .......... 43% 96.1M 1s
 62000K .......... .......... .......... .......... .......... 43%  101M 1s
 62050K .......... .......... .......... .......... .......... 43%  125M 1s
 62100K .......... .......... .......... .......... .......... 43%  111M 1s
 62150K .......... .......... .......... .......... .......... 43%  106M 1s
 62200K .......... .......... .......... .......... .......... 43%  133M 1s
 62250K .......... .......... .......... .......... .......... 43%  115M 1s
 62300K .......... .......... .......... .......... .......... 43%  124M 1s
 62350K .......... .......... .......... .......... .......... 43%  103M 1s
 62400K .......... .......... .......... .......... .......... 43%  115M 1s
 62450K .......... .......... .......... .......... .......... 43%  105M 1s
 62500K .......... .......... .......... .......... .......... 43%  121M 1s
 62550K .......... .......... .......... .......... .......... 43%  118M 1s
 62600K .......... .......... .......... .......... .......... 43%  100M 1s
 62650K .......... .......... .......... .......... .......... 43%  122M 1s
 62700K .......... .......... .......... .......... .......... 43%  101M 1s
 62750K .......... .......... .......... .......... .......... 43%  118M 1s
 62800K .......... .......... .......... .......... .......... 43%  117M 1s
 62850K .......... .......... .......... .......... .......... 43%  105M 1s
 62900K .......... .......... .......... .......... .......... 43%  117M 1s
 62950K .......... .......... .......... .......... .......... 43%  104M 1s
 63000K .......... .......... .......... .......... .......... 43%  122M 1s
 63050K .......... .......... .......... .......... .......... 43%  119M 1s
 63100K .......... .......... .......... .......... .......... 43% 94.6M 1s
 63150K .......... .......... .......... .......... .......... 43%  129M 1s
 63200K .......... .......... .......... .......... .......... 43%  101M 1s
 63250K .......... .......... .......... .......... .......... 44%  118M 1s
 63300K .......... .......... .......... .......... .......... 44%  121M 1s
 63350K .......... .......... .......... .......... .......... 44%  107M 1s
 63400K .......... .......... .......... .......... .......... 44% 96.2M 1s
 63450K .......... .......... .......... .......... .......... 44%  103M 1s
 63500K .......... .......... .......... .......... .......... 44%  111M 1s
 63550K .......... .......... .......... .......... .......... 44%  136M 1s
 63600K .......... .......... .......... .......... .......... 44%  103M 1s
 63650K .......... .......... .......... .......... .......... 44%  118M 1s
 63700K .......... .......... .......... .......... .......... 44%  103M 1s
 63750K .......... .......... .......... .......... .......... 44%  134M 1s
 63800K .......... .......... .......... .......... .......... 44%  125M 1s
 63850K .......... .......... .......... .......... .......... 44% 99.8M 1s
 63900K .......... .......... .......... .......... .......... 44%  116M 1s
 63950K .......... .......... .......... .......... .......... 44%  106M 1s
 64000K .......... .......... .......... .......... .......... 44%  113M 1s
 64050K .......... .......... .......... .......... .......... 44%  126M 1s
 64100K .......... .......... .......... .......... .......... 44%  103M 1s
 64150K .......... .......... .......... .......... .......... 44%  118M 1s
 64200K .......... .......... .......... .......... .......... 44% 99.0M 1s
 64250K .......... .......... .......... .......... .......... 44%  116M 1s
 64300K .......... .......... .......... .......... .......... 44%  130M 1s
 64350K .......... .......... .......... .......... .......... 44%  101M 1s
 64400K .......... .......... .......... .......... .......... 44%  121M 1s
 64450K .......... .......... .......... .......... .......... 44%  103M 1s
 64500K .......... .......... .......... .......... .......... 44%  121M 1s
 64550K .......... .......... .......... .......... .......... 44%  116M 1s
 64600K .......... .......... .......... .......... .......... 44%  104M 1s
 64650K .......... .......... .......... .......... .......... 44%  117M 1s
 64700K .......... .......... .......... .......... .......... 45%  103M 1s
 64750K .......... .......... .......... .......... .......... 45%  118M 1s
 64800K .......... .......... .......... .......... .......... 45%  106M 1s
 64850K .......... .......... .......... .......... .......... 45%  114M 1s
 64900K .......... .......... .......... .......... .......... 45%  117M 1s
 64950K .......... .......... .......... .......... .......... 45%  104M 1s
 65000K .......... .......... .......... .......... .......... 45%  123M 1s
 65050K .......... .......... .......... .......... .......... 45%  120M 1s
 65100K .......... .......... .......... .......... .......... 45% 93.1M 1s
 65150K .......... .......... .......... .......... .......... 45%  135M 1s
 65200K .......... .......... .......... .......... .......... 45%  102M 1s
 65250K .......... .......... .......... .......... .......... 45% 78.7M 1s
 65300K .......... .......... .......... .......... .......... 45%  197M 1s
 65350K .......... .......... .......... .......... .......... 45%  112M 1s
 65400K .......... .......... .......... .......... .......... 45%  116M 1s
 65450K .......... .......... .......... .......... .......... 45%  102M 1s
 65500K .......... .......... .......... .......... .......... 45%  121M 1s
 65550K .......... .......... .......... .......... .......... 45%  122M 1s
 65600K .......... .......... .......... .......... .......... 45%  100M 1s
 65650K .......... .......... .......... .......... .......... 45%  117M 1s
 65700K .......... .......... .......... .......... .......... 45%  104M 1s
 65750K .......... .......... .......... .......... .......... 45%  123M 1s
 65800K .......... .......... .......... .......... .......... 45%  118M 1s
 65850K .......... .......... .......... .......... .......... 45% 98.2M 1s
 65900K .......... .......... .......... .......... .......... 45%  116M 1s
 65950K .......... .......... .......... .......... .......... 45%  108M 1s
 66000K .......... .......... .......... .......... .......... 45%  118M 1s
 66050K .......... .......... .......... .......... .......... 45%  123M 1s
 66100K .......... .......... .......... .......... .......... 46% 97.3M 1s
 66150K .......... .......... .......... .......... .......... 46%  116M 1s
 66200K .......... .......... .......... .......... .......... 46%  104M 1s
 66250K .......... .......... .......... .......... .......... 46%  102M 1s
 66300K .......... .......... .......... .......... .......... 46%  127M 1s
 66350K .......... .......... .......... .......... .......... 46%  117M 1s
 66400K .......... .......... .......... .......... .......... 46%  122M 1s
 66450K .......... .......... .......... .......... .......... 46%  102M 1s
 66500K .......... .......... .......... .......... .......... 46%  119M 1s
 66550K .......... .......... .......... .......... .......... 46%  114M 1s
 66600K .......... .......... .......... .......... .......... 46%  101M 1s
 66650K .......... .......... .......... .......... .......... 46%  123M 1s
 66700K .......... .......... .......... .......... .......... 46% 99.5M 1s
 66750K .......... .......... .......... .......... .......... 46%  120M 1s
 66800K .......... .......... .......... .......... .......... 46%  127M 1s
 66850K .......... .......... .......... .......... .......... 46%  103M 1s
 66900K .......... .......... .......... .......... .......... 46%  116M 1s
 66950K .......... .......... .......... .......... .......... 46%  103M 1s
 67000K .......... .......... .......... .......... .......... 46%  117M 1s
 67050K .......... .......... .......... .......... .......... 46%  122M 1s
 67100K .......... .......... .......... .......... .......... 46% 98.7M 1s
 67150K .......... .......... .......... .......... .......... 46%  121M 1s
 67200K .......... .......... .......... .......... .......... 46% 96.7M 1s
 67250K .......... .......... .......... .......... .......... 46%  112M 1s
 67300K .......... .......... .......... .......... .......... 46%  131M 1s
 67350K .......... .......... .......... .......... .......... 46%  112M 1s
 67400K .......... .......... .......... .......... .......... 46%  114M 1s
 67450K .......... .......... .......... .......... .......... 46%  105M 1s
 67500K .......... .......... .......... .......... .......... 46%  119M 1s
 67550K .......... .......... .......... .......... .......... 47%  112M 1s
 67600K .......... .......... .......... .......... .......... 47% 98.9M 1s
 67650K .......... .......... .......... .......... .......... 47%  130M 1s
 67700K .......... .......... .......... .......... .......... 47%  102M 1s
 67750K .......... .......... .......... .......... .......... 47%  119M 1s
 67800K .......... .......... .......... .......... .......... 47%  120M 1s
 67850K .......... .......... .......... .......... .......... 47% 97.4M 1s
 67900K .......... .......... .......... .......... .......... 47%  130M 1s
 67950K .......... .......... .......... .......... .......... 47% 98.6M 1s
 68000K .......... .......... .......... .......... .......... 47%  124M 1s
 68050K .......... .......... .......... .......... .......... 47%  116M 1s
 68100K .......... .......... .......... .......... .......... 47% 98.7M 1s
 68150K .......... .......... .......... .......... .......... 47%  122M 1s
 68200K .......... .......... .......... .......... .......... 47% 98.9M 1s
 68250K .......... .......... .......... .......... .......... 47%  125M 1s
 68300K .......... .......... .......... .......... .......... 47%  121M 1s
 68350K .......... .......... .......... .......... .......... 47% 98.2M 1s
 68400K .......... .......... .......... .......... .......... 47%  117M 1s
 68450K .......... .......... .......... .......... .......... 47%  109M 1s
 68500K .......... .......... .......... .......... .......... 47%  120M 1s
 68550K .......... .......... .......... .......... .......... 47%  113M 1s
 68600K .......... .......... .......... .......... .......... 47%  106M 1s
 68650K .......... .......... .......... .......... .......... 47%  121M 1s
 68700K .......... .......... .......... .......... .......... 47% 98.5M 1s
 68750K .......... .......... .......... .......... .......... 47%  120M 1s
 68800K .......... .......... .......... .......... .......... 47%  123M 1s
 68850K .......... .......... .......... .......... .......... 47% 97.0M 1s
 68900K .......... .......... .......... .......... .......... 47%  116M 1s
 68950K .......... .......... .......... .......... .......... 47% 95.0M 1s
 69000K .......... .......... .......... .......... .......... 48%  132M 1s
 69050K .......... .......... .......... .......... .......... 48%  130M 1s
 69100K .......... .......... .......... .......... .......... 48%  102M 1s
 69150K .......... .......... .......... .......... .......... 48%  121M 1s
 69200K .......... .......... .......... .......... .......... 48%  100M 1s
 69250K .......... .......... .......... .......... .......... 48%  112M 1s
 69300K .......... .......... .......... .......... .......... 48%  130M 1s
 69350K .......... .......... .......... .......... .......... 48%  101M 1s
 69400K .......... .......... .......... .......... .......... 48% 99.4M 1s
 69450K .......... .......... .......... .......... .......... 48%  118M 1s
 69500K .......... .......... .......... .......... .......... 48%  127M 1s
 69550K .......... .......... .......... .......... .......... 48%  117M 1s
 69600K .......... .......... .......... .......... .......... 48%  104M 1s
 69650K .......... .......... .......... .......... .......... 48%  120M 1s
 69700K .......... .......... .......... .......... .......... 48% 99.1M 1s
 69750K .......... .......... .......... .......... .......... 48%  125M 1s
 69800K .......... .......... .......... .......... .......... 48%  117M 1s
 69850K .......... .......... .......... .......... .......... 48%  102M 1s
 69900K .......... .......... .......... .......... .......... 48%  120M 1s
 69950K .......... .......... .......... .......... .......... 48%  102M 1s
 70000K .......... .......... .......... .......... .......... 48%  112M 1s
 70050K .......... .......... .......... .......... .......... 48%  112M 1s
 70100K .......... .......... .......... .......... .......... 48% 80.8M 1s
 70150K .......... .......... .......... .......... .......... 48%  116M 1s
 70200K .......... .......... .......... .......... .......... 48%  139M 1s
 70250K .......... .......... .......... .......... .......... 48%  122M 1s
 70300K .......... .......... .......... .......... .......... 48%  103M 1s
 70350K .......... .......... .......... .......... .......... 48%  115M 1s
 70400K .......... .......... .......... .......... .......... 48%  126M 1s
 70450K .......... .......... .......... .......... .......... 49%  104M 1s
 70500K .......... .......... .......... .......... .......... 49%  128M 1s
 70550K .......... .......... .......... .......... .......... 49%  117M 1s
 70600K .......... .......... .......... .......... .......... 49%  103M 1s
 70650K .......... .......... .......... .......... .......... 49%  122M 1s
 70700K .......... .......... .......... .......... .......... 49%  103M 1s
 70750K .......... .......... .......... .......... .......... 49%  113M 1s
 70800K .......... .......... .......... .......... .......... 49%  126M 1s
 70850K .......... .......... .......... .......... .......... 49%  103M 1s
 70900K .......... .......... .......... .......... .......... 49%  116M 1s
 70950K .......... .......... .......... .......... .......... 49%  101M 1s
 71000K .......... .......... .......... .......... .......... 49%  122M 1s
 71050K .......... .......... .......... .......... .......... 49%  120M 1s
 71100K .......... .......... .......... .......... .......... 49%  102M 1s
 71150K .......... .......... .......... .......... .......... 49%  112M 1s
 71200K .......... .......... .......... .......... .......... 49%  109M 1s
 71250K .......... .......... .......... .......... .......... 49%  121M 1s
 71300K .......... .......... .......... .......... .......... 49%  119M 1s
 71350K .......... .......... .......... .......... .......... 49% 99.6M 1s
 71400K .......... .......... .......... .......... .......... 49%  121M 1s
 71450K .......... .......... .......... .......... .......... 49%  104M 1s
 71500K .......... .......... .......... .......... .......... 49%  121M 1s
 71550K .......... .......... .......... .......... .......... 49%  115M 1s
 71600K .......... .......... .......... .......... .......... 49%  102M 1s
 71650K .......... .......... .......... .......... .......... 49%  123M 1s
 71700K .......... .......... .......... .......... .......... 49% 97.7M 1s
 71750K .......... .......... .......... .......... .......... 49%  121M 1s
 71800K .......... .......... .......... .......... .......... 49%  120M 1s
 71850K .......... .......... .......... .......... .......... 50%  103M 1s
 71900K .......... .......... .......... .......... .......... 50%  122M 1s
 71950K .......... .......... .......... .......... .......... 50% 99.3M 1s
 72000K .......... .......... .......... .......... .......... 50%  112M 1s
 72050K .......... .......... .......... .......... .......... 50%  125M 1s
 72100K .......... .......... .......... .......... .......... 50%  108M 1s
 72150K .......... .......... .......... .......... .......... 50%  116M 1s
 72200K .......... .......... .......... .......... .......... 50% 99.6M 1s
 72250K .......... .......... .......... .......... .......... 50%  117M 1s
 72300K .......... .......... .......... .......... .......... 50%  124M 1s
 72350K .......... .......... .......... .......... .......... 50%  101M 1s
 72400K .......... .......... .......... .......... .......... 50%  111M 1s
 72450K .......... .......... .......... .......... .......... 50%  106M 1s
 72500K .......... .......... .......... .......... .......... 50%  124M 1s
 72550K .......... .......... .......... .......... .......... 50%  121M 1s
 72600K .......... .......... .......... .......... .......... 50% 99.3M 1s
 72650K .......... .......... .......... .......... .......... 50%  120M 1s
 72700K .......... .......... .......... .......... .......... 50%  101M 1s
 72750K .......... .......... .......... .......... .......... 50%  118M 1s
 72800K .......... .......... .......... .......... .......... 50%  124M 1s
 72850K .......... .......... .......... .......... .......... 50%  102M 1s
 72900K .......... .......... .......... .......... .......... 50%  120M 1s
 72950K .......... .......... .......... .......... .......... 50%  102M 1s
 73000K .......... .......... .......... .......... .......... 50%  116M 1s
 73050K .......... .......... .......... .......... .......... 50%  122M 1s
 73100K .......... .......... .......... .......... .......... 50% 98.9M 1s
 73150K .......... .......... .......... .......... .......... 50%  122M 1s
 73200K .......... .......... .......... .......... .......... 50%  107M 1s
 73250K .......... .......... .......... .......... .......... 50%  116M 1s
 73300K .......... .......... .......... .......... .......... 51%  118M 1s
 73350K .......... .......... .......... .......... .......... 51% 91.1M 1s
 73400K .......... .......... .......... .......... .......... 51% 53.3M 1s
 73450K .......... .......... .......... .......... .......... 51%  152M 1s
 73500K .......... .......... .......... .......... .......... 51%  179M 1s
 73550K .......... .......... .......... .......... .......... 51%  178M 1s
 73600K .......... .......... .......... .......... .......... 51%  144M 1s
 73650K .......... .......... .......... .......... .......... 51%  123M 1s
 73700K .......... .......... .......... .......... .......... 51%  101M 1s
 73750K .......... .......... .......... .......... .......... 51%  107M 1s
 73800K .......... .......... .......... .......... .......... 51%  122M 1s
 73850K .......... .......... .......... .......... .......... 51%  115M 1s
 73900K .......... .......... .......... .......... .......... 51%  115M 1s
 73950K .......... .......... .......... .......... .......... 51% 99.7M 1s
 74000K .......... .......... .......... .......... .......... 51%  122M 1s
 74050K .......... .......... .......... .......... .......... 51%  115M 1s
 74100K .......... .......... .......... .......... .......... 51%  104M 1s
 74150K .......... .......... .......... .......... .......... 51%  124M 1s
 74200K .......... .......... .......... .......... .......... 51% 99.6M 1s
 74250K .......... .......... .......... .......... .......... 51%  124M 1s
 74300K .......... .......... .......... .......... .......... 51% 97.1M 1s
 74350K .......... .......... .......... .......... .......... 51%  108M 1s
 74400K .......... .......... .......... .......... .......... 51%  113M 1s
 74450K .......... .......... .......... .......... .......... 51%  110M 1s
 74500K .......... .......... .......... .......... .......... 51%  107M 1s
 74550K .......... .......... .......... .......... .......... 51%  122M 1s
 74600K .......... .......... .......... .......... .......... 51% 92.4M 1s
 74650K .......... .......... .......... .......... .......... 51%  138M 1s
 74700K .......... .......... .......... .......... .......... 51%  109M 1s
 74750K .......... .......... .......... .......... .......... 52%  120M 1s
 74800K .......... .......... .......... .......... .......... 52%  135M 1s
 74850K .......... .......... .......... .......... .......... 52%  101M 1s
 74900K .......... .......... .......... .......... .......... 52%  118M 1s
 74950K .......... .......... .......... .......... .......... 52%  106M 1s
 75000K .......... .......... .......... .......... .......... 52%  114M 1s
 75050K .......... .......... .......... .......... .......... 52%  121M 1s
 75100K .......... .......... .......... .......... .......... 52% 99.7M 1s
 75150K .......... .......... .......... .......... .......... 52%  113M 1s
 75200K .......... .......... .......... .......... .......... 52%  110M 1s
 75250K .......... .......... .......... .......... .......... 52%  123M 1s
 75300K .......... .......... .......... .......... .......... 52%  121M 1s
 75350K .......... .......... .......... .......... .......... 52%  101M 1s
 75400K .......... .......... .......... .......... .......... 52%  122M 1s
 75450K .......... .......... .......... .......... .......... 52% 96.6M 1s
 75500K .......... .......... .......... .......... .......... 52%  120M 1s
 75550K .......... .......... .......... .......... .......... 52%  108M 1s
 75600K .......... .......... .......... .......... .......... 52%  116M 1s
 75650K .......... .......... .......... .......... .......... 52%  115M 1s
 75700K .......... .......... .......... .......... .......... 52%  104M 1s
 75750K .......... .......... .......... .......... .......... 52%  118M 1s
 75800K .......... .......... .......... .......... .......... 52%  123M 1s
 75850K .......... .......... .......... .......... .......... 52%  104M 1s
 75900K .......... .......... .......... .......... .......... 52%  124M 1s
 75950K .......... .......... .......... .......... .......... 52%  100M 1s
 76000K .......... .......... .......... .......... .......... 52%  121M 1s
 76050K .......... .......... .......... .......... .......... 52%  110M 1s
 76100K .......... .......... .......... .......... .......... 52% 95.0M 1s
 76150K .......... .......... .......... .......... .......... 52%  124M 1s
 76200K .......... .......... .......... .......... .......... 53%  116M 1s
 76250K .......... .......... .......... .......... .......... 53%  118M 1s
 76300K .......... .......... .......... .......... .......... 53%  120M 1s
 76350K .......... .......... .......... .......... .......... 53% 97.1M 1s
 76400K .......... .......... .......... .......... .......... 53%  116M 1s
 76450K .......... .......... .......... .......... .......... 53%  108M 1s
 76500K .......... .......... .......... .......... .......... 53%  122M 1s
 76550K .......... .......... .......... .......... .......... 53%  121M 1s
 76600K .......... .......... .......... .......... .......... 53%  101M 1s
 76650K .......... .......... .......... .......... .......... 53%  115M 1s
 76700K .......... .......... .......... .......... .......... 53%  107M 1s
 76750K .......... .......... .......... .......... .......... 53%  114M 1s
 76800K .......... .......... .......... .......... .......... 53%  123M 1s
 76850K .......... .......... .......... .......... .......... 53%  101M 1s
 76900K .......... .......... .......... .......... .......... 53%  119M 1s
 76950K .......... .......... .......... .......... .......... 53%  105M 1s
 77000K .......... .......... .......... .......... .......... 53%  117M 1s
 77050K .......... .......... .......... .......... .......... 53%  121M 1s
 77100K .......... .......... .......... .......... .......... 53%  100M 1s
 77150K .......... .......... .......... .......... .......... 53%  122M 1s
 77200K .......... .......... .......... .......... .......... 53%  102M 1s
 77250K .......... .......... .......... .......... .......... 53%  114M 1s
 77300K .......... .......... .......... .......... .......... 53%  121M 1s
 77350K .......... .......... .......... .......... .......... 53%  102M 1s
 77400K .......... .......... .......... .......... .......... 53%  124M 1s
 77450K .......... .......... .......... .......... .......... 53%  100M 1s
 77500K .......... .......... .......... .......... .......... 53% 72.3M 1s
 77550K .......... .......... .......... .......... .......... 53%  178M 1s
 77600K .......... .......... .......... .......... .......... 54%  140M 1s
 77650K .......... .......... .......... .......... .......... 54%  122M 1s
 77700K .......... .......... .......... .......... .......... 54% 98.2M 1s
 77750K .......... .......... .......... .......... .......... 54%  125M 1s
 77800K .......... .......... .......... .......... .......... 54%  113M 1s
 77850K .......... .......... .......... .......... .......... 54%  111M 1s
 77900K .......... .......... .......... .......... .......... 54%  116M 1s
 77950K .......... .......... .......... .......... .......... 54%  101M 1s
 78000K .......... .......... .......... .......... .......... 54%  118M 1s
 78050K .......... .......... .......... .......... .......... 54%  120M 1s
 78100K .......... .......... .......... .......... .......... 54% 97.3M 1s
 78150K .......... .......... .......... .......... .......... 54%  123M 1s
 78200K .......... .......... .......... .......... .......... 54%  107M 1s
 78250K .......... .......... .......... .......... .......... 54%  115M 1s
 78300K .......... .......... .......... .......... .......... 54%  123M 1s
 78350K .......... .......... .......... .......... .......... 54%  101M 1s
 78400K .......... .......... .......... .......... .......... 54%  120M 1s
 78450K .......... .......... .......... .......... .......... 54% 97.6M 1s
 78500K .......... .......... .......... .......... .......... 54%  127M 1s
 78550K .......... .......... .......... .......... .......... 54%  120M 1s
 78600K .......... .......... .......... .......... .......... 54%  103M 1s
 78650K .......... .......... .......... .......... .......... 54%  118M 1s
 78700K .......... .......... .......... .......... .......... 54%  102M 1s
 78750K .......... .......... .......... .......... .......... 54%  120M 1s
 78800K .......... .......... .......... .......... .......... 54%  117M 1s
 78850K .......... .......... .......... .......... .......... 54%  102M 1s
 78900K .......... .......... .......... .......... .......... 54%  120M 1s
 78950K .......... .......... .......... .......... .......... 54%  104M 1s
 79000K .......... .......... .......... .......... .......... 54%  114M 1s
 79050K .......... .......... .......... .......... .......... 55%  124M 1s
 79100K .......... .......... .......... .......... .......... 55%  103M 1s
 79150K .......... .......... .......... .......... .......... 55%  113M 1s
 79200K .......... .......... .......... .......... .......... 55% 96.0M 1s
 79250K .......... .......... .......... .......... .......... 55%  127M 1s
 79300K .......... .......... .......... .......... .......... 55%  120M 1s
 79350K .......... .......... .......... .......... .......... 55%  107M 1s
 79400K .......... .......... .......... .......... .......... 55%  122M 1s
 79450K .......... .......... .......... .......... .......... 55% 97.9M 1s
 79500K .......... .......... .......... .......... .......... 55%  127M 1s
 79550K .......... .......... .......... .......... .......... 55%  110M 1s
 79600K .......... .......... .......... .......... .......... 55% 94.4M 1s
 79650K .......... .......... .......... .......... .......... 55%  142M 1s
 79700K .......... .......... .......... .......... .......... 55% 98.0M 1s
 79750K .......... .......... .......... .......... .......... 55%  123M 1s
 79800K .......... .......... .......... .......... .......... 55%  118M 1s
 79850K .......... .......... .......... .......... .......... 55%  103M 1s
 79900K .......... .......... .......... .......... .......... 55%  114M 1s
 79950K .......... .......... .......... .......... .......... 55%  101M 1s
 80000K .......... .......... .......... .......... .......... 55%  131M 1s
 80050K .......... .......... .......... .......... .......... 55%  116M 1s
 80100K .......... .......... .......... .......... .......... 55% 99.9M 1s
 80150K .......... .......... .......... .......... .......... 55%  121M 1s
 80200K .......... .......... .......... .......... .......... 55%  104M 1s
 80250K .......... .......... .......... .......... .......... 55%  116M 1s
 80300K .......... .......... .......... .......... .......... 55%  114M 1s
 80350K .......... .......... .......... .......... .......... 55% 98.2M 1s
 80400K .......... .......... .......... .......... .......... 55%  123M 1s
 80450K .......... .......... .......... .......... .......... 55%  100M 1s
 80500K .......... .......... .......... .......... .......... 56%  133M 1s
 80550K .......... .......... .......... .......... .......... 56%  118M 1s
 80600K .......... .......... .......... .......... .......... 56%  102M 1s
 80650K .......... .......... .......... .......... .......... 56%  118M 1s
 80700K .......... .......... .......... .......... .......... 56%  102M 1s
 80750K .......... .......... .......... .......... .......... 56%  121M 1s
 80800K .......... .......... .......... .......... .......... 56%  115M 1s
 80850K .......... .......... .......... .......... .......... 56%  103M 1s
 80900K .......... .......... .......... .......... .......... 56%  120M 1s
 80950K .......... .......... .......... .......... .......... 56%  103M 1s
 81000K .......... .......... .......... .......... .......... 56%  112M 1s
 81050K .......... .......... .......... .......... .......... 56%  126M 1s
 81100K .......... .......... .......... .......... .......... 56%  104M 1s
 81150K .......... .......... .......... .......... .......... 56%  118M 1s
 81200K .......... .......... .......... .......... .......... 56%  103M 1s
 81250K .......... .......... .......... .......... .......... 56%  115M 1s
 81300K .......... .......... .......... .......... .......... 56%  121M 1s
 81350K .......... .......... .......... .......... .......... 56%  101M 1s
 81400K .......... .......... .......... .......... .......... 56%  124M 1s
 81450K .......... .......... .......... .......... .......... 56%  102M 1s
 81500K .......... .......... .......... .......... .......... 56%  111M 1s
 81550K .......... .......... .......... .......... .......... 56%  125M 1s
 81600K .......... .......... .......... .......... .......... 56%  105M 1s
 81650K .......... .......... .......... .......... .......... 56% 55.1M 1s
 81700K .......... .......... .......... .......... .......... 56%  177M 1s
 81750K .......... .......... .......... .......... .......... 56%  203M 1s
 81800K .......... .......... .......... .......... .......... 56%  137M 1s
 81850K .......... .......... .......... .......... .......... 56%  101M 1s
 81900K .......... .......... .......... .......... .......... 56%  137M 1s
 81950K .......... .......... .......... .......... .......... 57%  101M 1s
 82000K .......... .......... .......... .......... .......... 57%  116M 1s
 82050K .......... .......... .......... .......... .......... 57%  122M 1s
 82100K .......... .......... .......... .......... .......... 57%  101M 1s
 82150K .......... .......... .......... .......... .......... 57%  126M 1s
 82200K .......... .......... .......... .......... .......... 57% 98.7M 1s
 82250K .......... .......... .......... .......... .......... 57%  120M 1s
 82300K .......... .......... .......... .......... .......... 57%  116M 1s
 82350K .......... .......... .......... .......... .......... 57%  106M 1s
 82400K .......... .......... .......... .......... .......... 57%  117M 1s
 82450K .......... .......... .......... .......... .......... 57%  104M 1s
 82500K .......... .......... .......... .......... .......... 57%  119M 1s
 82550K .......... .......... .......... .......... .......... 57%  117M 1s
 82600K .......... .......... .......... .......... .......... 57%  100M 1s
 82650K .......... .......... .......... .......... .......... 57%  119M 1s
 82700K .......... .......... .......... .......... .......... 57%  105M 1s
 82750K .......... .......... .......... .......... .......... 57%  112M 1s
 82800K .......... .......... .......... .......... .......... 57%  113M 1s
 82850K .......... .......... .......... .......... .......... 57% 97.3M 1s
 82900K .......... .......... .......... .......... .......... 57%  133M 1s
 82950K .......... .......... .......... .......... .......... 57% 90.0M 1s
 83000K .......... .......... .......... .......... .......... 57%  120M 1s
 83050K .......... .......... .......... .......... .......... 57%  121M 1s
 83100K .......... .......... .......... .......... .......... 57%  125M 1s
 83150K .......... .......... .......... .......... .......... 57%  122M 1s
 83200K .......... .......... .......... .......... .......... 57%  101M 1s
 83250K .......... .......... .......... .......... .......... 57%  117M 1s
 83300K .......... .......... .......... .......... .......... 57%  118M 1s
 83350K .......... .......... .......... .......... .......... 58%  103M 1s
 83400K .......... .......... .......... .......... .......... 58%  123M 1s
 83450K .......... .......... .......... .......... .......... 58%  102M 1s
 83500K .......... .......... .......... .......... .......... 58%  118M 1s
 83550K .......... .......... .......... .......... .......... 58%  108M 1s
 83600K .......... .......... .......... .......... .......... 58%  101M 1s
 83650K .......... .......... .......... .......... .......... 58%  133M 1s
 83700K .......... .......... .......... .......... .......... 58%  101M 1s
 83750K .......... .......... .......... .......... .......... 58%  127M 1s
 83800K .......... .......... .......... .......... .......... 58%  117M 1s
 83850K .......... .......... .......... .......... .......... 58%  101M 1s
 83900K .......... .......... .......... .......... .......... 58%  117M 1s
 83950K .......... .......... .......... .......... .......... 58% 89.5M 1s
 84000K .......... .......... .......... .......... .......... 58%  147M 1s
 84050K .......... .......... .......... .......... .......... 58%  123M 1s
 84100K .......... .......... .......... .......... .......... 58%  102M 1s
 84150K .......... .......... .......... .......... .......... 58%  119M 1s
 84200K .......... .......... .......... .......... .......... 58% 97.6M 1s
 84250K .......... .......... .......... .......... .......... 58%  122M 1s
 84300K .......... .......... .......... .......... .......... 58%  115M 1s
 84350K .......... .......... .......... .......... .......... 58%  104M 1s
 84400K .......... .......... .......... .......... .......... 58%  127M 1s
 84450K .......... .......... .......... .......... .......... 58%  102M 1s
 84500K .......... .......... .......... .......... .......... 58%  122M 1s
 84550K .......... .......... .......... .......... .......... 58% 90.6M 1s
 84600K .......... .......... .......... .......... .......... 58%  106M 1s
 84650K .......... .......... .......... .......... .......... 58%  129M 1s
 84700K .......... .......... .......... .......... .......... 58% 94.9M 1s
 84750K .......... .......... .......... .......... .......... 58%  125M 1s
 84800K .......... .......... .......... .......... .......... 59%  126M 1s
 84850K .......... .......... .......... .......... .......... 59% 90.0M 1s
 84900K .......... .......... .......... .......... .......... 59%  176M 1s
 84950K .......... .......... .......... .......... .......... 59%  103M 1s
 85000K .......... .......... .......... .......... .......... 59%  121M 1s
 85050K .......... .......... .......... .......... .......... 59%  120M 1s
 85100K .......... .......... .......... .......... .......... 59% 99.9M 1s
 85150K .......... .......... .......... .......... .......... 59%  122M 1s
 85200K .......... .......... .......... .......... .......... 59%  101M 1s
 85250K .......... .......... .......... .......... .......... 59%  118M 1s
 85300K .......... .......... .......... .......... .......... 59%  119M 1s
 85350K .......... .......... .......... .......... .......... 59%  101M 1s
 85400K .......... .......... .......... .......... .......... 59%  114M 1s
 85450K .......... .......... .......... .......... .......... 59%  103M 1s
 85500K .......... .......... .......... .......... .......... 59%  118M 1s
 85550K .......... .......... .......... .......... .......... 59%  126M 1s
 85600K .......... .......... .......... .......... .......... 59%  103M 1s
 85650K .......... .......... .......... .......... .......... 59%  111M 1s
 85700K .......... .......... .......... .......... .......... 59% 46.5M 1s
 85750K .......... .......... .......... .......... .......... 59%  193M 1s
 85800K .......... .......... .......... .......... .......... 59%  169M 1s
 85850K .......... .......... .......... .......... .......... 59%  150M 1s
 85900K .......... .......... .......... .......... .......... 59%  193M 1s
 85950K .......... .......... .......... .......... .......... 59%  102M 1s
 86000K .......... .......... .......... .......... .......... 59%  118M 1s
 86050K .......... .......... .......... .......... .......... 59%  126M 1s
 86100K .......... .......... .......... .......... .......... 59% 99.8M 1s
 86150K .......... .......... .......... .......... .......... 59%  123M 1s
 86200K .......... .......... .......... .......... .......... 59% 98.9M 1s
 86250K .......... .......... .......... .......... .......... 60%  122M 1s
 86300K .......... .......... .......... .......... .......... 60%  115M 1s
 86350K .......... .......... .......... .......... .......... 60% 99.1M 1s
 86400K .......... .......... .......... .......... .......... 60%  128M 1s
 86450K .......... .......... .......... .......... .......... 60%  104M 1s
 86500K .......... .......... .......... .......... .......... 60%  113M 1s
 86550K .......... .......... .......... .......... .......... 60%  123M 1s
 86600K .......... .......... .......... .......... .......... 60%  103M 1s
 86650K .......... .......... .......... .......... .......... 60%  118M 1s
 86700K .......... .......... .......... .......... .......... 60%  100M 1s
 86750K .......... .......... .......... .......... .......... 60%  123M 1s
 86800K .......... .......... .......... .......... .......... 60%  116M 1s
 86850K .......... .......... .......... .......... .......... 60%  105M 0s
 86900K .......... .......... .......... .......... .......... 60%  117M 0s
 86950K .......... .......... .......... .......... .......... 60%  106M 0s
 87000K .......... .......... .......... .......... .......... 60%  109M 0s
 87050K .......... .......... .......... .......... .......... 60%  124M 0s
 87100K .......... .......... .......... .......... .......... 60% 91.6M 0s
 87150K .......... .......... .......... .......... .......... 60%  140M 0s
 87200K .......... .......... .......... .......... .......... 60%  103M 0s
 87250K .......... .......... .......... .......... .......... 60%  117M 0s
 87300K .......... .......... .......... .......... .......... 60%  123M 0s
 87350K .......... .......... .......... .......... .......... 60%  101M 0s
 87400K .......... .......... .......... .......... .......... 60%  120M 0s
 87450K .......... .......... .......... .......... .......... 60%  102M 0s
 87500K .......... .......... .......... .......... .......... 60%  124M 0s
 87550K .......... .......... .......... .......... .......... 60%  107M 0s
 87600K .......... .......... .......... .......... .......... 60%  110M 0s
 87650K .......... .......... .......... .......... .......... 60%  121M 0s
 87700K .......... .......... .......... .......... .......... 61% 97.2M 0s
 87750K .......... .......... .......... .......... .......... 61%  124M 0s
 87800K .......... .......... .......... .......... .......... 61%  119M 0s
 87850K .......... .......... .......... .......... .......... 61% 98.2M 0s
 87900K .......... .......... .......... .......... .......... 61%  109M 0s
 87950K .......... .......... .......... .......... .......... 61%  116M 0s
 88000K .......... .......... .......... .......... .......... 61%  121M 0s
 88050K .......... .......... .......... .......... .......... 61%  114M 0s
 88100K .......... .......... .......... .......... .......... 61%  102M 0s
 88150K .......... .......... .......... .......... .......... 61%  119M 0s
 88200K .......... .......... .......... .......... .......... 61% 92.9M 0s
 88250K .......... .......... .......... .......... .......... 61%  139M 0s
 88300K .......... .......... .......... .......... .......... 61%  119M 0s
 88350K .......... .......... .......... .......... .......... 61%  105M 0s
 88400K .......... .......... .......... .......... .......... 61%  117M 0s
 88450K .......... .......... .......... .......... .......... 61% 98.4M 0s
 88500K .......... .......... .......... .......... .......... 61%  123M 0s
 88550K .......... .......... .......... .......... .......... 61%  125M 0s
 88600K .......... .......... .......... .......... .......... 61% 99.9M 0s
 88650K .......... .......... .......... .......... .......... 61%  118M 0s
 88700K .......... .......... .......... .......... .......... 61% 96.7M 0s
 88750K .......... .......... .......... .......... .......... 61%  115M 0s
 88800K .......... .......... .......... .......... .......... 61%  126M 0s
 88850K .......... .......... .......... .......... .......... 61%  107M 0s
 88900K .......... .......... .......... .......... .......... 61%  122M 0s
 88950K .......... .......... .......... .......... .......... 61%  100M 0s
 89000K .......... .......... .......... .......... .......... 61%  120M 0s
 89050K .......... .......... .......... .......... .......... 61%  110M 0s
 89100K .......... .......... .......... .......... .......... 62%  104M 0s
 89150K .......... .......... .......... .......... .......... 62%  110M 0s
 89200K .......... .......... .......... .......... .......... 62%  121M 0s
 89250K .......... .......... .......... .......... .......... 62%  119M 0s
 89300K .......... .......... .......... .......... .......... 62%  117M 0s
 89350K .......... .......... .......... .......... .......... 62%  101M 0s
 89400K .......... .......... .......... .......... .......... 62%  123M 0s
 89450K .......... .......... .......... .......... .......... 62% 98.1M 0s
 89500K .......... .......... .......... .......... .......... 62%  119M 0s
 89550K .......... .......... .......... .......... .......... 62%  122M 0s
 89600K .......... .......... .......... .......... .......... 62%  103M 0s
 89650K .......... .......... .......... .......... .......... 62%  119M 0s
 89700K .......... .......... .......... .......... .......... 62%  104M 0s
 89750K .......... .......... .......... .......... .......... 62%  120M 0s
 89800K .......... .......... .......... .......... .......... 62% 48.4M 0s
 89850K .......... .......... .......... .......... .......... 62%  169M 0s
 89900K .......... .......... .......... .......... .......... 62%  185M 0s
 89950K .......... .......... .......... .......... .......... 62%  145M 0s
 90000K .......... .......... .......... .......... .......... 62%  148M 0s
 90050K .......... .......... .......... .......... .......... 62%  127M 0s
 90100K .......... .......... .......... .......... .......... 62% 96.5M 0s
 90150K .......... .......... .......... .......... .......... 62%  132M 0s
 90200K .......... .......... .......... .......... .......... 62%  103M 0s
 90250K .......... .......... .......... .......... .......... 62%  119M 0s
 90300K .......... .......... .......... .......... .......... 62%  121M 0s
 90350K .......... .......... .......... .......... .......... 62%  103M 0s
 90400K .......... .......... .......... .......... .......... 62%  117M 0s
 90450K .......... .......... .......... .......... .......... 62%  103M 0s
 90500K .......... .......... .......... .......... .......... 62%  114M 0s
 90550K .......... .......... .......... .......... .......... 63%  126M 0s
 90600K .......... .......... .......... .......... .......... 63%  101M 0s
 90650K .......... .......... .......... .......... .......... 63%  119M 0s
 90700K .......... .......... .......... .......... .......... 63%  103M 0s
 90750K .......... .......... .......... .......... .......... 63%  121M 0s
 90800K .......... .......... .......... .......... .......... 63%  120M 0s
 90850K .......... .......... .......... .......... .......... 63% 99.9M 0s
 90900K .......... .......... .......... .......... .......... 63%  123M 0s
 90950K .......... .......... .......... .......... .......... 63%  100M 0s
 91000K .......... .......... .......... .......... .......... 63%  114M 0s
 91050K .......... .......... .......... .......... .......... 63%  123M 0s
 91100K .......... .......... .......... .......... .......... 63% 99.8M 0s
 91150K .......... .......... .......... .......... .......... 63%  126M 0s
 91200K .......... .......... .......... .......... .......... 63%  102M 0s
 91250K .......... .......... .......... .......... .......... 63%  119M 0s
 91300K .......... .......... .......... .......... .......... 63%  114M 0s
 91350K .......... .......... .......... .......... .......... 63%  101M 0s
 91400K .......... .......... .......... .......... .......... 63%  116M 0s
 91450K .......... .......... .......... .......... .......... 63%  111M 0s
 91500K .......... .......... .......... .......... .......... 63%  117M 0s
 91550K .......... .......... .......... .......... .......... 63%  118M 0s
 91600K .......... .......... .......... .......... .......... 63%  107M 0s
 91650K .......... .......... .......... .......... .......... 63%  117M 0s
 91700K .......... .......... .......... .......... .......... 63%  101M 0s
 91750K .......... .......... .......... .......... .......... 63%  120M 0s
 91800K .......... .......... .......... .......... .......... 63%  112M 0s
 91850K .......... .......... .......... .......... .......... 63%  100M 0s
 91900K .......... .......... .......... .......... .......... 63%  129M 0s
 91950K .......... .......... .......... .......... .......... 63%  104M 0s
 92000K .......... .......... .......... .......... .......... 64%  119M 0s
 92050K .......... .......... .......... .......... .......... 64%  115M 0s
 92100K .......... .......... .......... .......... .......... 64%  103M 0s
 92150K .......... .......... .......... .......... .......... 64%  120M 0s
 92200K .......... .......... .......... .......... .......... 64%  103M 0s
 92250K .......... .......... .......... .......... .......... 64%  119M 0s
 92300K .......... .......... .......... .......... .......... 64%  119M 0s
 92350K .......... .......... .......... .......... .......... 64%  100M 0s
 92400K .......... .......... .......... .......... .......... 64%  109M 0s
 92450K .......... .......... .......... .......... .......... 64%  114M 0s
 92500K .......... .......... .......... .......... .......... 64%  116M 0s
 92550K .......... .......... .......... .......... .......... 64%  124M 0s
 92600K .......... .......... .......... .......... .......... 64%  101M 0s
 92650K .......... .......... .......... .......... .......... 64%  112M 0s
 92700K .......... .......... .......... .......... .......... 64% 99.0M 0s
 92750K .......... .......... .......... .......... .......... 64%  129M 0s
 92800K .......... .......... .......... .......... .......... 64%  124M 0s
 92850K .......... .......... .......... .......... .......... 64% 98.5M 0s
 92900K .......... .......... .......... .......... .......... 64%  123M 0s
 92950K .......... .......... .......... .......... .......... 64%  103M 0s
 93000K .......... .......... .......... .......... .......... 64%  118M 0s
 93050K .......... .......... .......... .......... .......... 64%  119M 0s
 93100K .......... .......... .......... .......... .......... 64%  101M 0s
 93150K .......... .......... .......... .......... .......... 64%  117M 0s
 93200K .......... .......... .......... .......... .......... 64%  104M 0s
 93250K .......... .......... .......... .......... .......... 64%  115M 0s
 93300K .......... .......... .......... .......... .......... 64%  123M 0s
 93350K .......... .......... .......... .......... .......... 64%  101M 0s
 93400K .......... .......... .......... .......... .......... 64%  120M 0s
 93450K .......... .......... .......... .......... .......... 65%  104M 0s
 93500K .......... .......... .......... .......... .......... 65%  117M 0s
 93550K .......... .......... .......... .......... .......... 65% 98.5M 0s
 93600K .......... .......... .......... .......... .......... 65%  122M 0s
 93650K .......... .......... .......... .......... .......... 65%  127M 0s
 93700K .......... .......... .......... .......... .......... 65% 98.9M 0s
 93750K .......... .......... .......... .......... .......... 65%  121M 0s
 93800K .......... .......... .......... .......... .......... 65%  113M 0s
 93850K .......... .......... .......... .......... .......... 65%  101M 0s
 93900K .......... .......... .......... .......... .......... 65% 50.1M 0s
 93950K .......... .......... .......... .......... .......... 65%  167M 0s
 94000K .......... .......... .......... .......... .......... 65%  211M 0s
 94050K .......... .......... .......... .......... .......... 65%  169M 0s
 94100K .......... .......... .......... .......... .......... 65%  126M 0s
 94150K .......... .......... .......... .......... .......... 65% 98.0M 0s
 94200K .......... .......... .......... .......... .......... 65%  122M 0s
 94250K .......... .......... .......... .......... .......... 65%  105M 0s
 94300K .......... .......... .......... .......... .......... 65%  155M 0s
 94350K .......... .......... .......... .......... .......... 65% 93.4M 0s
 94400K .......... .......... .......... .......... .......... 65%  130M 0s
 94450K .......... .......... .......... .......... .......... 65%  104M 0s
 94500K .......... .......... .......... .......... .......... 65%  117M 0s
 94550K .......... .......... .......... .......... .......... 65%  119M 0s
 94600K .......... .......... .......... .......... .......... 65%  101M 0s
 94650K .......... .......... .......... .......... .......... 65%  118M 0s
 94700K .......... .......... .......... .......... .......... 65%  108M 0s
 94750K .......... .......... .......... .......... .......... 65%  120M 0s
 94800K .......... .......... .......... .......... .......... 65%  116M 0s
 94850K .......... .......... .......... .......... .......... 65% 96.3M 0s
 94900K .......... .......... .......... .......... .......... 66%  135M 0s
 94950K .......... .......... .......... .......... .......... 66% 98.5M 0s
 95000K .......... .......... .......... .......... .......... 66%  120M 0s
 95050K .......... .......... .......... .......... .......... 66%  104M 0s
 95100K .......... .......... .......... .......... .......... 66% 99.6M 0s
 95150K .......... .......... .......... .......... .......... 66%  125M 0s
 95200K .......... .......... .......... .......... .......... 66%  100M 0s
 95250K .......... .......... .......... .......... .......... 66%  135M 0s
 95300K .......... .......... .......... .......... .......... 66%  117M 0s
 95350K .......... .......... .......... .......... .......... 66%  108M 0s
 95400K .......... .......... .......... .......... .......... 66%  122M 0s
 95450K .......... .......... .......... .......... .......... 66% 99.0M 0s
 95500K .......... .......... .......... .......... .......... 66%  124M 0s
 95550K .......... .......... .......... .......... .......... 66%  111M 0s
 95600K .......... .......... .......... .......... .......... 66%  106M 0s
 95650K .......... .......... .......... .......... .......... 66%  112M 0s
 95700K .......... .......... .......... .......... .......... 66%  108M 0s
 95750K .......... .......... .......... .......... .......... 66%  119M 0s
 95800K .......... .......... .......... .......... .......... 66%  118M 0s
 95850K .......... .......... .......... .......... .......... 66%  100M 0s
 95900K .......... .......... .......... .......... .......... 66%  110M 0s
 95950K .......... .......... .......... .......... .......... 66%  117M 0s
 96000K .......... .......... .......... .......... .......... 66%  104M 0s
 96050K .......... .......... .......... .......... .......... 66%  138M 0s
 96100K .......... .......... .......... .......... .......... 66%  102M 0s
 96150K .......... .......... .......... .......... .......... 66%  116M 0s
 96200K .......... .......... .......... .......... .......... 66%  106M 0s
 96250K .......... .......... .......... .......... .......... 66%  116M 0s
 96300K .......... .......... .......... .......... .......... 67%  123M 0s
 96350K .......... .......... .......... .......... .......... 67% 98.7M 0s
 96400K .......... .......... .......... .......... .......... 67%  120M 0s
 96450K .......... .......... .......... .......... .......... 67%  105M 0s
 96500K .......... .......... .......... .......... .......... 67%  120M 0s
 96550K .......... .......... .......... .......... .......... 67%  118M 0s
 96600K .......... .......... .......... .......... .......... 67% 99.1M 0s
 96650K .......... .......... .......... .......... .......... 67%  125M 0s
 96700K .......... .......... .......... .......... .......... 67%  100M 0s
 96750K .......... .......... .......... .......... .......... 67%  113M 0s
 96800K .......... .......... .......... .......... .......... 67%  120M 0s
 96850K .......... .......... .......... .......... .......... 67%  108M 0s
 96900K .......... .......... .......... .......... .......... 67%  117M 0s
 96950K .......... .......... .......... .......... .......... 67%  103M 0s
 97000K .......... .......... .......... .......... .......... 67%  121M 0s
 97050K .......... .......... .......... .......... .......... 67%  109M 0s
 97100K .......... .......... .......... .......... .......... 67%  108M 0s
 97150K .......... .......... .......... .......... .......... 67%  120M 0s
 97200K .......... .......... .......... .......... .......... 67%  102M 0s
 97250K .......... .......... .......... .......... .......... 67%  118M 0s
 97300K .......... .......... .......... .......... .......... 67%  119M 0s
 97350K .......... .......... .......... .......... .......... 67% 99.1M 0s
 97400K .......... .......... .......... .......... .......... 67%  119M 0s
 97450K .......... .......... .......... .......... .......... 67%  108M 0s
 97500K .......... .......... .......... .......... .......... 67%  115M 0s
 97550K .......... .......... .......... .......... .......... 67%  122M 0s
 97600K .......... .......... .......... .......... .......... 67%  103M 0s
 97650K .......... .......... .......... .......... .......... 67%  121M 0s
 97700K .......... .......... .......... .......... .......... 67% 94.1M 0s
 97750K .......... .......... .......... .......... .......... 68%  132M 0s
 97800K .......... .......... .......... .......... .......... 68%  111M 0s
 97850K .......... .......... .......... .......... .......... 68%  109M 0s
 97900K .......... .......... .......... .......... .......... 68%  108M 0s
 97950K .......... .......... .......... .......... .......... 68% 99.2M 0s
 98000K .......... .......... .......... .......... .......... 68%  121M 0s
 98050K .......... .......... .......... .......... .......... 68% 49.3M 0s
 98100K .......... .......... .......... .......... .......... 68%  163M 0s
 98150K .......... .......... .......... .......... .......... 68%  182M 0s
 98200K .......... .......... .......... .......... .......... 68%  164M 0s
 98250K .......... .......... .......... .......... .......... 68%  174M 0s
 98300K .......... .......... .......... .......... .......... 68%  120M 0s
 98350K .......... .......... .......... .......... .......... 68%  101M 0s
 98400K .......... .......... .......... .......... .......... 68%  109M 0s
 98450K .......... .......... .......... .......... .......... 68%  100M 0s
 98500K .......... .......... .......... .......... .......... 68%  134M 0s
 98550K .......... .......... .......... .......... .......... 68%  121M 0s
 98600K .......... .......... .......... .......... .......... 68%  100M 0s
 98650K .......... .......... .......... .......... .......... 68%  117M 0s
 98700K .......... .......... .......... .......... .......... 68% 97.0M 0s
 98750K .......... .......... .......... .......... .......... 68%  131M 0s
 98800K .......... .......... .......... .......... .......... 68%  123M 0s
 98850K .......... .......... .......... .......... .......... 68%  101M 0s
 98900K .......... .......... .......... .......... .......... 68%  117M 0s
 98950K .......... .......... .......... .......... .......... 68% 99.2M 0s
 99000K .......... .......... .......... .......... .......... 68%  108M 0s
 99050K .......... .......... .......... .......... .......... 68%  106M 0s
 99100K .......... .......... .......... .......... .......... 68%  116M 0s
 99150K .......... .......... .......... .......... .......... 68%  102M 0s
 99200K .......... .......... .......... .......... .......... 69%  115M 0s
 99250K .......... .......... .......... .......... .......... 69%  104M 0s
 99300K .......... .......... .......... .......... .......... 69%  127M 0s
 99350K .......... .......... .......... .......... .......... 69%  109M 0s
 99400K .......... .......... .......... .......... .......... 69%  142M 0s
 99450K .......... .......... .......... .......... .......... 69%  103M 0s
 99500K .......... .......... .......... .......... .......... 69%  118M 0s
 99550K .......... .......... .......... .......... .......... 69%  120M 0s
 99600K .......... .......... .......... .......... .......... 69% 99.3M 0s
 99650K .......... .......... .......... .......... .......... 69%  124M 0s
 99700K .......... .......... .......... .......... .......... 69%  101M 0s
 99750K .......... .......... .......... .......... .......... 69%  117M 0s
 99800K .......... .......... .......... .......... .......... 69%  123M 0s
 99850K .......... .......... .......... .......... .......... 69%  103M 0s
 99900K .......... .......... .......... .......... .......... 69%  114M 0s
 99950K .......... .......... .......... .......... .......... 69%  103M 0s
100000K .......... .......... .......... .......... .......... 69%  119M 0s
100050K .......... .......... .......... .......... .......... 69%  122M 0s
100100K .......... .......... .......... .......... .......... 69%  103M 0s
100150K .......... .......... .......... .......... .......... 69%  114M 0s
100200K .......... .......... .......... .......... .......... 69%  106M 0s
100250K .......... .......... .......... .......... .......... 69%  117M 0s
100300K .......... .......... .......... .......... .......... 69%  117M 0s
100350K .......... .......... .......... .......... .......... 69%  103M 0s
100400K .......... .......... .......... .......... .......... 69%  118M 0s
100450K .......... .......... .......... .......... .......... 69%  107M 0s
100500K .......... .......... .......... .......... .......... 69%  121M 0s
100550K .......... .......... .......... .......... .......... 69%  119M 0s
100600K .......... .......... .......... .......... .......... 69%  101M 0s
100650K .......... .......... .......... .......... .......... 70%  123M 0s
100700K .......... .......... .......... .......... .......... 70%  101M 0s
100750K .......... .......... .......... .......... .......... 70%  117M 0s
100800K .......... .......... .......... .......... .......... 70%  120M 0s
100850K .......... .......... .......... .......... .......... 70%  101M 0s
100900K .......... .......... .......... .......... .......... 70%  114M 0s
100950K .......... .......... .......... .......... .......... 70% 99.1M 0s
101000K .......... .......... .......... .......... .......... 70%  124M 0s
101050K .......... .......... .......... .......... .......... 70%  126M 0s
101100K .......... .......... .......... .......... .......... 70%  101M 0s
101150K .......... .......... .......... .......... .......... 70%  121M 0s
101200K .......... .......... .......... .......... .......... 70%  101M 0s
101250K .......... .......... .......... .......... .......... 70%  116M 0s
101300K .......... .......... .......... .......... .......... 70%  123M 0s
101350K .......... .......... .......... .......... .......... 70%  105M 0s
101400K .......... .......... .......... .......... .......... 70%  116M 0s
101450K .......... .......... .......... .......... .......... 70%  100M 0s
101500K .......... .......... .......... .......... .......... 70%  119M 0s
101550K .......... .......... .......... .......... .......... 70%  122M 0s
101600K .......... .......... .......... .......... .......... 70% 98.8M 0s
101650K .......... .......... .......... .......... .......... 70%  125M 0s
101700K .......... .......... .......... .......... .......... 70%  100M 0s
101750K .......... .......... .......... .......... .......... 70%  112M 0s
101800K .......... .......... .......... .......... .......... 70%  117M 0s
101850K .......... .......... .......... .......... .......... 70% 98.9M 0s
101900K .......... .......... .......... .......... .......... 70%  136M 0s
101950K .......... .......... .......... .......... .......... 70%  103M 0s
102000K .......... .......... .......... .......... .......... 70%  119M 0s
102050K .......... .......... .......... .......... .......... 71%  113M 0s
102100K .......... .......... .......... .......... .......... 71% 37.2M 0s
102150K .......... .......... .......... .......... .......... 71%  190M 0s
102200K .......... .......... .......... .......... .......... 71%  190M 0s
102250K .......... .......... .......... .......... .......... 71%  217M 0s
102300K .......... .......... .......... .......... .......... 71%  182M 0s
102350K .......... .......... .......... .......... .......... 71%  141M 0s
102400K .......... .......... .......... .......... .......... 71%  101M 0s
102450K .......... .......... .......... .......... .......... 71%  120M 0s
102500K .......... .......... .......... .......... .......... 71%  110M 0s
102550K .......... .......... .......... .......... .......... 71%  113M 0s
102600K .......... .......... .......... .......... .......... 71% 84.9M 0s
102650K .......... .......... .......... .......... .......... 71%  106M 0s
102700K .......... .......... .......... .......... .......... 71%  167M 0s
102750K .......... .......... .......... .......... .......... 71%  134M 0s
102800K .......... .......... .......... .......... .......... 71%  125M 0s
102850K .......... .......... .......... .......... .......... 71%  104M 0s
102900K .......... .......... .......... .......... .......... 71%  116M 0s
102950K .......... .......... .......... .......... .......... 71%  103M 0s
103000K .......... .......... .......... .......... .......... 71%  112M 0s
103050K .......... .......... .......... .......... .......... 71%  118M 0s
103100K .......... .......... .......... .......... .......... 71%  104M 0s
103150K .......... .......... .......... .......... .......... 71%  129M 0s
103200K .......... .......... .......... .......... .......... 71% 94.5M 0s
103250K .......... .......... .......... .......... .......... 71%  129M 0s
103300K .......... .......... .......... .......... .......... 71%  115M 0s
103350K .......... .......... .......... .......... .......... 71% 94.7M 0s
103400K .......... .......... .......... .......... .......... 71%  141M 0s
103450K .......... .......... .......... .......... .......... 71%  102M 0s
103500K .......... .......... .......... .......... .......... 72%  121M 0s
103550K .......... .......... .......... .......... .......... 72%  103M 0s
103600K .......... .......... .......... .......... .......... 72%  110M 0s
103650K .......... .......... .......... .......... .......... 72%  111M 0s
103700K .......... .......... .......... .......... .......... 72%  115M 0s
103750K .......... .......... .......... .......... .......... 72%  118M 0s
103800K .......... .......... .......... .......... .......... 72%  119M 0s
103850K .......... .......... .......... .......... .......... 72% 99.8M 0s
103900K .......... .......... .......... .......... .......... 72%  125M 0s
103950K .......... .......... .......... .......... .......... 72%  100M 0s
104000K .......... .......... .......... .......... .......... 72%  121M 0s
104050K .......... .......... .......... .......... .......... 72%  119M 0s
104100K .......... .......... .......... .......... .......... 72%  102M 0s
104150K .......... .......... .......... .......... .......... 72%  114M 0s
104200K .......... .......... .......... .......... .......... 72%  107M 0s
104250K .......... .......... .......... .......... .......... 72%  112M 0s
104300K .......... .......... .......... .......... .......... 72%  125M 0s
104350K .......... .......... .......... .......... .......... 72% 98.6M 0s
104400K .......... .......... .......... .......... .......... 72%  126M 0s
104450K .......... .......... .......... .......... .......... 72% 99.3M 0s
104500K .......... .......... .......... .......... .......... 72%  118M 0s
104550K .......... .......... .......... .......... .......... 72%  114M 0s
104600K .......... .......... .......... .......... .......... 72%  112M 0s
104650K .......... .......... .......... .......... .......... 72%  118M 0s
104700K .......... .......... .......... .......... .......... 72%  104M 0s
104750K .......... .......... .......... .......... .......... 72%  113M 0s
104800K .......... .......... .......... .......... .......... 72%  126M 0s
104850K .......... .......... .......... .......... .......... 72%  101M 0s
104900K .......... .......... .......... .......... .......... 72%  107M 0s
104950K .......... .......... .......... .......... .......... 73%  114M 0s
105000K .......... .......... .......... .......... .......... 73%  120M 0s
105050K .......... .......... .......... .......... .......... 73%  121M 0s
105100K .......... .......... .......... .......... .......... 73%  102M 0s
105150K .......... .......... .......... .......... .......... 73%  119M 0s
105200K .......... .......... .......... .......... .......... 73% 98.4M 0s
105250K .......... .......... .......... .......... .......... 73%  123M 0s
105300K .......... .......... .......... .......... .......... 73%  110M 0s
105350K .......... .......... .......... .......... .......... 73%  113M 0s
105400K .......... .......... .......... .......... .......... 73%  116M 0s
105450K .......... .......... .......... .......... .......... 73% 98.4M 0s
105500K .......... .......... .......... .......... .......... 73%  121M 0s
105550K .......... .......... .......... .......... .......... 73%  124M 0s
105600K .......... .......... .......... .......... .......... 73%  101M 0s
105650K .......... .......... .......... .......... .......... 73%  120M 0s
105700K .......... .......... .......... .......... .......... 73%  103M 0s
105750K .......... .......... .......... .......... .......... 73%  119M 0s
105800K .......... .......... .......... .......... .......... 73%  116M 0s
105850K .......... .......... .......... .......... .......... 73%  107M 0s
105900K .......... .......... .......... .......... .......... 73%  116M 0s
105950K .......... .......... .......... .......... .......... 73%  105M 0s
106000K .......... .......... .......... .......... .......... 73%  116M 0s
106050K .......... .......... .......... .......... .......... 73%  113M 0s
106100K .......... .......... .......... .......... .......... 73% 53.3M 0s
106150K .......... .......... .......... .......... .......... 73%  167M 0s
106200K .......... .......... .......... .......... .......... 73%  131M 0s
106250K .......... .......... .......... .......... .......... 73%  188M 0s
106300K .......... .......... .......... .......... .......... 73%  160M 0s
106350K .......... .......... .......... .......... .......... 73% 99.3M 0s
106400K .......... .......... .......... .......... .......... 74%  122M 0s
106450K .......... .......... .......... .......... .......... 74%  100M 0s
106500K .......... .......... .......... .......... .......... 74%  115M 0s
106550K .......... .......... .......... .......... .......... 74%  124M 0s
106600K .......... .......... .......... .......... .......... 74%  102M 0s
106650K .......... .......... .......... .......... .......... 74%  121M 0s
106700K .......... .......... .......... .......... .......... 74% 98.2M 0s
106750K .......... .......... .......... .......... .......... 74%  128M 0s
106800K .......... .......... .......... .......... .......... 74%  111M 0s
106850K .......... .......... .......... .......... .......... 74%  103M 0s
106900K .......... .......... .......... .......... .......... 74%  129M 0s
106950K .......... .......... .......... .......... .......... 74% 99.8M 0s
107000K .......... .......... .......... .......... .......... 74%  124M 0s
107050K .......... .......... .......... .......... .......... 74%  118M 0s
107100K .......... .......... .......... .......... .......... 74% 97.2M 0s
107150K .......... .......... .......... .......... .......... 74%  116M 0s
107200K .......... .......... .......... .......... .......... 74%  106M 0s
107250K .......... .......... .......... .......... .......... 74%  125M 0s
107300K .......... .......... .......... .......... .......... 74%  118M 0s
107350K .......... .......... .......... .......... .......... 74% 99.3M 0s
107400K .......... .......... .......... .......... .......... 74%  115M 0s
107450K .......... .......... .......... .......... .......... 74%  109M 0s
107500K .......... .......... .......... .......... .......... 74%  117M 0s
107550K .......... .......... .......... .......... .......... 74%  120M 0s
107600K .......... .......... .......... .......... .......... 74%  103M 0s
107650K .......... .......... .......... .......... .......... 74%  117M 0s
107700K .......... .......... .......... .......... .......... 74% 98.3M 0s
107750K .......... .......... .......... .......... .......... 74%  126M 0s
107800K .......... .......... .......... .......... .......... 75%  115M 0s
107850K .......... .......... .......... .......... .......... 75%  105M 0s
107900K .......... .......... .......... .......... .......... 75%  124M 0s
107950K .......... .......... .......... .......... .......... 75% 98.9M 0s
108000K .......... .......... .......... .......... .......... 75%  120M 0s
108050K .......... .......... .......... .......... .......... 75%  118M 0s
108100K .......... .......... .......... .......... .......... 75%  107M 0s
108150K .......... .......... .......... .......... .......... 75%  107M 0s
108200K .......... .......... .......... .......... .......... 75%  114M 0s
108250K .......... .......... .......... .......... .......... 75%  113M 0s
108300K .......... .......... .......... .......... .......... 75%  114M 0s
108350K .......... .......... .......... .......... .......... 75%  101M 0s
108400K .......... .......... .......... .......... .......... 75%  132M 0s
108450K .......... .......... .......... .......... .......... 75%  102M 0s
108500K .......... .......... .......... .......... .......... 75%  118M 0s
108550K .......... .......... .......... .......... .......... 75%  117M 0s
108600K .......... .......... .......... .......... .......... 75% 95.3M 0s
108650K .......... .......... .......... .......... .......... 75%  124M 0s
108700K .......... .......... .......... .......... .......... 75% 98.7M 0s
108750K .......... .......... .......... .......... .......... 75%  119M 0s
108800K .......... .......... .......... .......... .......... 75%  137M 0s
108850K .......... .......... .......... .......... .......... 75% 99.7M 0s
108900K .......... .......... .......... .......... .......... 75%  121M 0s
108950K .......... .......... .......... .......... .......... 75%  102M 0s
109000K .......... .......... .......... .......... .......... 75%  119M 0s
109050K .......... .......... .......... .......... .......... 75%  112M 0s
109100K .......... .......... .......... .......... .......... 75%  112M 0s
109150K .......... .......... .......... .......... .......... 75%  119M 0s
109200K .......... .......... .......... .......... .......... 75%  102M 0s
109250K .......... .......... .......... .......... .......... 76%  120M 0s
109300K .......... .......... .......... .......... .......... 76%  114M 0s
109350K .......... .......... .......... .......... .......... 76%  108M 0s
109400K .......... .......... .......... .......... .......... 76%  115M 0s
109450K .......... .......... .......... .......... .......... 76%  102M 0s
109500K .......... .......... .......... .......... .......... 76%  108M 0s
109550K .......... .......... .......... .......... .......... 76%  126M 0s
109600K .......... .......... .......... .......... .......... 76% 97.0M 0s
109650K .......... .......... .......... .......... .......... 76%  135M 0s
109700K .......... .......... .......... .......... .......... 76%  101M 0s
109750K .......... .......... .......... .......... .......... 76%  124M 0s
109800K .......... .......... .......... .......... .......... 76%  116M 0s
109850K .......... .......... .......... .......... .......... 76% 88.7M 0s
109900K .......... .......... .......... .......... .......... 76%  124M 0s
109950K .......... .......... .......... .......... .......... 76%  102M 0s
110000K .......... .......... .......... .......... .......... 76%  114M 0s
110050K .......... .......... .......... .......... .......... 76%  132M 0s
110100K .......... .......... .......... .......... .......... 76% 97.8M 0s
110150K .......... .......... .......... .......... .......... 76%  121M 0s
110200K .......... .......... .......... .......... .......... 76% 96.8M 0s
110250K .......... .......... .......... .......... .......... 76%  148M 0s
110300K .......... .......... .......... .......... .......... 76%  117M 0s
110350K .......... .......... .......... .......... .......... 76% 95.9M 0s
110400K .......... .......... .......... .......... .......... 76%  114M 0s
110450K .......... .......... .......... .......... .......... 76%  119M 0s
110500K .......... .......... .......... .......... .......... 76%  120M 0s
110550K .......... .......... .......... .......... .......... 76%  118M 0s
110600K .......... .......... .......... .......... .......... 76%  101M 0s
110650K .......... .......... .......... .......... .......... 76% 48.4M 0s
110700K .......... .......... .......... .......... .......... 77%  172M 0s
110750K .......... .......... .......... .......... .......... 77%  160M 0s
110800K .......... .......... .......... .......... .......... 77%  171M 0s
110850K .......... .......... .......... .......... .......... 77%  164M 0s
110900K .......... .......... .......... .......... .......... 77%  123M 0s
110950K .......... .......... .......... .......... .......... 77%  102M 0s
111000K .......... .......... .......... .......... .......... 77%  118M 0s
111050K .......... .......... .......... .......... .......... 77%  115M 0s
111100K .......... .......... .......... .......... .......... 77%  104M 0s
111150K .......... .......... .......... .......... .......... 77%  123M 0s
111200K .......... .......... .......... .......... .......... 77% 99.7M 0s
111250K .......... .......... .......... .......... .......... 77%  119M 0s
111300K .......... .......... .......... .......... .......... 77%  125M 0s
111350K .......... .......... .......... .......... .......... 77% 94.0M 0s
111400K .......... .......... .......... .......... .......... 77%  124M 0s
111450K .......... .......... .......... .......... .......... 77%  107M 0s
111500K .......... .......... .......... .......... .......... 77%  118M 0s
111550K .......... .......... .......... .......... .......... 77%  111M 0s
111600K .......... .......... .......... .......... .......... 77%  106M 0s
111650K .......... .......... .......... .......... .......... 77%  112M 0s
111700K .......... .......... .......... .......... .......... 77%  114M 0s
111750K .......... .......... .......... .......... .......... 77%  116M 0s
111800K .......... .......... .......... .......... .......... 77%  121M 0s
111850K .......... .......... .......... .......... .......... 77%  101M 0s
111900K .......... .......... .......... .......... .......... 77%  116M 0s
111950K .......... .......... .......... .......... .......... 77%  104M 0s
112000K .......... .......... .......... .......... .......... 77%  115M 0s
112050K .......... .......... .......... .......... .......... 77%  124M 0s
112100K .......... .......... .......... .......... .......... 77%  102M 0s
112150K .......... .......... .......... .......... .......... 78%  116M 0s
112200K .......... .......... .......... .......... .......... 78%  107M 0s
112250K .......... .......... .......... .......... .......... 78%  109M 0s
112300K .......... .......... .......... .......... .......... 78%  127M 0s
112350K .......... .......... .......... .......... .......... 78%  101M 0s
112400K .......... .......... .......... .......... .......... 78%  123M 0s
112450K .......... .......... .......... .......... .......... 78% 98.4M 0s
112500K .......... .......... .......... .......... .......... 78%  126M 0s
112550K .......... .......... .......... .......... .......... 78%  117M 0s
112600K .......... .......... .......... .......... .......... 78% 93.3M 0s
112650K .......... .......... .......... .......... .......... 78%  136M 0s
112700K .......... .......... .......... .......... .......... 78% 97.7M 0s
112750K .......... .......... .......... .......... .......... 78%  103M 0s
112800K .......... .......... .......... .......... .......... 78%  140M 0s
112850K .......... .......... .......... .......... .......... 78%  105M 0s
112900K .......... .......... .......... .......... .......... 78%  118M 0s
112950K .......... .......... .......... .......... .......... 78%  104M 0s
113000K .......... .......... .......... .......... .......... 78%  119M 0s
113050K .......... .......... .......... .......... .......... 78%  121M 0s
113100K .......... .......... .......... .......... .......... 78% 94.0M 0s
113150K .......... .......... .......... .......... .......... 78%  121M 0s
113200K .......... .......... .......... .......... .......... 78%  108M 0s
113250K .......... .......... .......... .......... .......... 78%  125M 0s
113300K .......... .......... .......... .......... .......... 78%  115M 0s
113350K .......... .......... .......... .......... .......... 78%  103M 0s
113400K .......... .......... .......... .......... .......... 78%  118M 0s
113450K .......... .......... .......... .......... .......... 78%  101M 0s
113500K .......... .......... .......... .......... .......... 78%  119M 0s
113550K .......... .......... .......... .......... .......... 79%  123M 0s
113600K .......... .......... .......... .......... .......... 79% 97.2M 0s
113650K .......... .......... .......... .......... .......... 79%  130M 0s
113700K .......... .......... .......... .......... .......... 79%  100M 0s
113750K .......... .......... .......... .......... .......... 79%  124M 0s
113800K .......... .......... .......... .......... .......... 79%  110M 0s
113850K .......... .......... .......... .......... .......... 79% 99.0M 0s
113900K .......... .......... .......... .......... .......... 79%  125M 0s
113950K .......... .......... .......... .......... .......... 79%  106M 0s
114000K .......... .......... .......... .......... .......... 79%  112M 0s
114050K .......... .......... .......... .......... .......... 79%  127M 0s
114100K .......... .......... .......... .......... .......... 79%  102M 0s
114150K .......... .......... .......... .......... .......... 79%  117M 0s
114200K .......... .......... .......... .......... .......... 79%  103M 0s
114250K .......... .......... .......... .......... .......... 79%  119M 0s
114300K .......... .......... .......... .......... .......... 79%  123M 0s
114350K .......... .......... .......... .......... .......... 79% 97.1M 0s
114400K .......... .......... .......... .......... .......... 79%  118M 0s
114450K .......... .......... .......... .......... .......... 79%  108M 0s
114500K .......... .......... .......... .......... .......... 79%  115M 0s
114550K .......... .......... .......... .......... .......... 79%  124M 0s
114600K .......... .......... .......... .......... .......... 79%  100M 0s
114650K .......... .......... .......... .......... .......... 79%  115M 0s
114700K .......... .......... .......... .......... .......... 79%  105M 0s
114750K .......... .......... .......... .......... .......... 79% 49.6M 0s
114800K .......... .......... .......... .......... .......... 79%  195M 0s
114850K .......... .......... .......... .......... .......... 79%  179M 0s
114900K .......... .......... .......... .......... .......... 79%  189M 0s
114950K .......... .......... .......... .......... .......... 79%  107M 0s
115000K .......... .......... .......... .......... .......... 80%  115M 0s
115050K .......... .......... .......... .......... .......... 80%  118M 0s
115100K .......... .......... .......... .......... .......... 80%  109M 0s
115150K .......... .......... .......... .......... .......... 80%  117M 0s
115200K .......... .......... .......... .......... .......... 80% 96.0M 0s
115250K .......... .......... .......... .......... .......... 80%  143M 0s
115300K .......... .......... .......... .......... .......... 80%  120M 0s
115350K .......... .......... .......... .......... .......... 80%  103M 0s
115400K .......... .......... .......... .......... .......... 80%  123M 0s
115450K .......... .......... .......... .......... .......... 80%  102M 0s
115500K .......... .......... .......... .......... .......... 80%  119M 0s
115550K .......... .......... .......... .......... .......... 80%  118M 0s
115600K .......... .......... .......... .......... .......... 80%  103M 0s
115650K .......... .......... .......... .......... .......... 80%  114M 0s
115700K .......... .......... .......... .......... .......... 80%  102M 0s
115750K .......... .......... .......... .......... .......... 80%  118M 0s
115800K .......... .......... .......... .......... .......... 80%  120M 0s
115850K .......... .......... .......... .......... .......... 80%  106M 0s
115900K .......... .......... .......... .......... .......... 80%  117M 0s
115950K .......... .......... .......... .......... .......... 80%  104M 0s
116000K .......... .......... .......... .......... .......... 80%  105M 0s
116050K .......... .......... .......... .......... .......... 80%  113M 0s
116100K .......... .......... .......... .......... .......... 80% 95.7M 0s
116150K .......... .......... .......... .......... .......... 80%  131M 0s
116200K .......... .......... .......... .......... .......... 80% 93.9M 0s
116250K .......... .......... .......... .......... .......... 80%  122M 0s
116300K .......... .......... .......... .......... .......... 80%  126M 0s
116350K .......... .......... .......... .......... .......... 80%  124M 0s
116400K .......... .......... .......... .......... .......... 80%  120M 0s
116450K .......... .......... .......... .......... .......... 81% 93.0M 0s
116500K .......... .......... .......... .......... .......... 81%  132M 0s
116550K .......... .......... .......... .......... .......... 81%  113M 0s
116600K .......... .......... .......... .......... .......... 81%  106M 0s
116650K .......... .......... .......... .......... .......... 81%  124M 0s
116700K .......... .......... .......... .......... .......... 81%  103M 0s
116750K .......... .......... .......... .......... .......... 81%  120M 0s
116800K .......... .......... .......... .......... .......... 81%  112M 0s
116850K .......... .......... .......... .......... .......... 81%  104M 0s
116900K .......... .......... .......... .......... .......... 81%  125M 0s
116950K .......... .......... .......... .......... .......... 81%  101M 0s
117000K .......... .......... .......... .......... .......... 81%  119M 0s
117050K .......... .......... .......... .......... .......... 81%  122M 0s
117100K .......... .......... .......... .......... .......... 81%  102M 0s
117150K .......... .......... .......... .......... .......... 81%  119M 0s
117200K .......... .......... .......... .......... .......... 81% 98.9M 0s
117250K .......... .......... .......... .......... .......... 81%  124M 0s
117300K .......... .......... .......... .......... .......... 81%  113M 0s
117350K .......... .......... .......... .......... .......... 81% 96.7M 0s
117400K .......... .......... .......... .......... .......... 81%  135M 0s
117450K .......... .......... .......... .......... .......... 81%  101M 0s
117500K .......... .......... .......... .......... .......... 81%  122M 0s
117550K .......... .......... .......... .......... .......... 81%  119M 0s
117600K .......... .......... .......... .......... .......... 81% 99.6M 0s
117650K .......... .......... .......... .......... .......... 81%  119M 0s
117700K .......... .......... .......... .......... .......... 81%  104M 0s
117750K .......... .......... .......... .......... .......... 81%  116M 0s
117800K .......... .......... .......... .......... .......... 81%  124M 0s
117850K .......... .......... .......... .......... .......... 81%  103M 0s
117900K .......... .......... .......... .......... .......... 82%  116M 0s
117950K .......... .......... .......... .......... .......... 82%  102M 0s
118000K .......... .......... .......... .......... .......... 82%  120M 0s
118050K .......... .......... .......... .......... .......... 82%  121M 0s
118100K .......... .......... .......... .......... .......... 82% 98.9M 0s
118150K .......... .......... .......... .......... .......... 82%  124M 0s
118200K .......... .......... .......... .......... .......... 82%  103M 0s
118250K .......... .......... .......... .......... .......... 82%  119M 0s
118300K .......... .......... .......... .......... .......... 82%  123M 0s
118350K .......... .......... .......... .......... .......... 82% 48.1M 0s
118400K .......... .......... .......... .......... .......... 82%  171M 0s
118450K .......... .......... .......... .......... .......... 82%  144M 0s
118500K .......... .......... .......... .......... .......... 82%  193M 0s
118550K .......... .......... .......... .......... .......... 82%  159M 0s
118600K .......... .......... .......... .......... .......... 82%  103M 0s
118650K .......... .......... .......... .......... .......... 82%  119M 0s
118700K .......... .......... .......... .......... .......... 82% 98.6M 0s
118750K .......... .......... .......... .......... .......... 82%  124M 0s
118800K .......... .......... .......... .......... .......... 82%  121M 0s
118850K .......... .......... .......... .......... .......... 82%  102M 0s
118900K .......... .......... .......... .......... .......... 82%  116M 0s
118950K .......... .......... .......... .......... .......... 82%  101M 0s
119000K .......... .......... .......... .......... .......... 82%  119M 0s
119050K .......... .......... .......... .......... .......... 82%  114M 0s
119100K .......... .......... .......... .......... .......... 82%  106M 0s
119150K .......... .......... .......... .......... .......... 82%  121M 0s
119200K .......... .......... .......... .......... .......... 82%  103M 0s
119250K .......... .......... .......... .......... .......... 82%  116M 0s
119300K .......... .......... .......... .......... .......... 83%  108M 0s
119350K .......... .......... .......... .......... .......... 83% 96.8M 0s
119400K .......... .......... .......... .......... .......... 83%  123M 0s
119450K .......... .......... .......... .......... .......... 83%  101M 0s
119500K .......... .......... .......... .......... .......... 83%  118M 0s
119550K .......... .......... .......... .......... .......... 83%  144M 0s
119600K .......... .......... .......... .......... .......... 83%  105M 0s
119650K .......... .......... .......... .......... .......... 83%  116M 0s
119700K .......... .......... .......... .......... .......... 83%  104M 0s
119750K .......... .......... .......... .......... .......... 83%  113M 0s
119800K .......... .......... .......... .......... .......... 83%  124M 0s
119850K .......... .......... .......... .......... .......... 83% 92.3M 0s
119900K .......... .......... .......... .......... .......... 83%  140M 0s
119950K .......... .......... .......... .......... .......... 83%  101M 0s
120000K .......... .......... .......... .......... .......... 83%  124M 0s
120050K .......... .......... .......... .......... .......... 83%  122M 0s
120100K .......... .......... .......... .......... .......... 83%  100M 0s
120150K .......... .......... .......... .......... .......... 83%  113M 0s
120200K .......... .......... .......... .......... .......... 83%  103M 0s
120250K .......... .......... .......... .......... .......... 83%  120M 0s
120300K .......... .......... .......... .......... .......... 83%  106M 0s
120350K .......... .......... .......... .......... .......... 83%  109M 0s
120400K .......... .......... .......... .......... .......... 83%  122M 0s
120450K .......... .......... .......... .......... .......... 83%  103M 0s
120500K .......... .......... .......... .......... .......... 83%  115M 0s
120550K .......... .......... .......... .......... .......... 83%  130M 0s
120600K .......... .......... .......... .......... .......... 83%  104M 0s
120650K .......... .......... .......... .......... .......... 83%  117M 0s
120700K .......... .......... .......... .......... .......... 83%  105M 0s
120750K .......... .......... .......... .......... .......... 84%  120M 0s
120800K .......... .......... .......... .......... .......... 84%  104M 0s
120850K .......... .......... .......... .......... .......... 84%  112M 0s
120900K .......... .......... .......... .......... .......... 84%  107M 0s
120950K .......... .......... .......... .......... .......... 84%  107M 0s
121000K .......... .......... .......... .......... .......... 84%  132M 0s
121050K .......... .......... .......... .......... .......... 84%  119M 0s
121100K .......... .......... .......... .......... .......... 84% 99.3M 0s
121150K .......... .......... .......... .......... .......... 84%  112M 0s
121200K .......... .......... .......... .......... .......... 84%  109M 0s
121250K .......... .......... .......... .......... .......... 84%  117M 0s
121300K .......... .......... .......... .......... .......... 84%  116M 0s
121350K .......... .......... .......... .......... .......... 84%  108M 0s
121400K .......... .......... .......... .......... .......... 84%  121M 0s
121450K .......... .......... .......... .......... .......... 84%  102M 0s
121500K .......... .......... .......... .......... .......... 84%  120M 0s
121550K .......... .......... .......... .......... .......... 84%  116M 0s
121600K .......... .......... .......... .......... .......... 84%  102M 0s
121650K .......... .......... .......... .......... .......... 84%  120M 0s
121700K .......... .......... .......... .......... .......... 84% 96.3M 0s
121750K .......... .......... .......... .......... .......... 84%  130M 0s
121800K .......... .......... .......... .......... .......... 84%  124M 0s
121850K .......... .......... .......... .......... .......... 84%  101M 0s
121900K .......... .......... .......... .......... .......... 84%  118M 0s
121950K .......... .......... .......... .......... .......... 84%  101M 0s
122000K .......... .......... .......... .......... .......... 84%  115M 0s
122050K .......... .......... .......... .......... .......... 84%  117M 0s
122100K .......... .......... .......... .......... .......... 84%  110M 0s
122150K .......... .......... .......... .......... .......... 84%  116M 0s
122200K .......... .......... .......... .......... .......... 85%  101M 0s
122250K .......... .......... .......... .......... .......... 85%  103M 0s
122300K .......... .......... .......... .......... .......... 85%  134M 0s
122350K .......... .......... .......... .......... .......... 85% 98.3M 0s
122400K .......... .......... .......... .......... .......... 85%  109M 0s
122450K .......... .......... .......... .......... .......... 85% 58.5M 0s
122500K .......... .......... .......... .......... .......... 85%  208M 0s
122550K .......... .......... .......... .......... .......... 85%  198M 0s
122600K .......... .......... .......... .......... .......... 85%  109M 0s
122650K .......... .......... .......... .......... .......... 85%  116M 0s
122700K .......... .......... .......... .......... .......... 85%  125M 0s
122750K .......... .......... .......... .......... .......... 85%  122M 0s
122800K .......... .......... .......... .......... .......... 85%  121M 0s
122850K .......... .......... .......... .......... .......... 85%  101M 0s
122900K .......... .......... .......... .......... .......... 85% 91.6M 0s
122950K .......... .......... .......... .......... .......... 85%  139M 0s
123000K .......... .......... .......... .......... .......... 85% 98.7M 0s
123050K .......... .......... .......... .......... .......... 85%  145M 0s
123100K .......... .......... .......... .......... .......... 85%  104M 0s
123150K .......... .......... .......... .......... .......... 85%  118M 0s
123200K .......... .......... .......... .......... .......... 85%  102M 0s
123250K .......... .......... .......... .......... .......... 85%  119M 0s
123300K .......... .......... .......... .......... .......... 85%  125M 0s
123350K .......... .......... .......... .......... .......... 85% 99.5M 0s
123400K .......... .......... .......... .......... .......... 85%  119M 0s
123450K .......... .......... .......... .......... .......... 85%  103M 0s
123500K .......... .......... .......... .......... .......... 85%  114M 0s
123550K .......... .......... .......... .......... .......... 85%  120M 0s
123600K .......... .......... .......... .......... .......... 85%  105M 0s
123650K .......... .......... .......... .......... .......... 86%  115M 0s
123700K .......... .......... .......... .......... .......... 86% 98.4M 0s
123750K .......... .......... .......... .......... .......... 86%  127M 0s
123800K .......... .......... .......... .......... .......... 86%  123M 0s
123850K .......... .......... .......... .......... .......... 86%  103M 0s
123900K .......... .......... .......... .......... .......... 86%  118M 0s
123950K .......... .......... .......... .......... .......... 86% 96.6M 0s
124000K .......... .......... .......... .......... .......... 86%  116M 0s
124050K .......... .......... .......... .......... .......... 86%  119M 0s
124100K .......... .......... .......... .......... .......... 86%  110M 0s
124150K .......... .......... .......... .......... .......... 86%  123M 0s
124200K .......... .......... .......... .......... .......... 86%  101M 0s
124250K .......... .......... .......... .......... .......... 86%  111M 0s
124300K .......... .......... .......... .......... .......... 86%  124M 0s
124350K .......... .......... .......... .......... .......... 86%  103M 0s
124400K .......... .......... .......... .......... .......... 86%  127M 0s
124450K .......... .......... .......... .......... .......... 86%  100M 0s
124500K .......... .......... .......... .......... .......... 86%  121M 0s
124550K .......... .......... .......... .......... .......... 86%  118M 0s
124600K .......... .......... .......... .......... .......... 86%  104M 0s
124650K .......... .......... .......... .......... .......... 86%  119M 0s
124700K .......... .......... .......... .......... .......... 86% 99.3M 0s
124750K .......... .......... .......... .......... .......... 86%  126M 0s
124800K .......... .......... .......... .......... .......... 86%  114M 0s
124850K .......... .......... .......... .......... .......... 86% 95.8M 0s
124900K .......... .......... .......... .......... .......... 86%  129M 0s
124950K .......... .......... .......... .......... .......... 86%  101M 0s
125000K .......... .......... .......... .......... .......... 86%  124M 0s
125050K .......... .......... .......... .......... .......... 87%  118M 0s
125100K .......... .......... .......... .......... .......... 87% 99.0M 0s
125150K .......... .......... .......... .......... .......... 87%  126M 0s
125200K .......... .......... .......... .......... .......... 87%  101M 0s
125250K .......... .......... .......... .......... .......... 87%  123M 0s
125300K .......... .......... .......... .......... .......... 87%  113M 0s
125350K .......... .......... .......... .......... .......... 87%  105M 0s
125400K .......... .......... .......... .......... .......... 87%  120M 0s
125450K .......... .......... .......... .......... .......... 87% 98.7M 0s
125500K .......... .......... .......... .......... .......... 87%  125M 0s
125550K .......... .......... .......... .......... .......... 87%  117M 0s
125600K .......... .......... .......... .......... .......... 87% 99.1M 0s
125650K .......... .......... .......... .......... .......... 87%  126M 0s
125700K .......... .......... .......... .......... .......... 87% 98.9M 0s
125750K .......... .......... .......... .......... .......... 87%  121M 0s
125800K .......... .......... .......... .......... .......... 87%  112M 0s
125850K .......... .......... .......... .......... .......... 87%  109M 0s
125900K .......... .......... .......... .......... .......... 87%  117M 0s
125950K .......... .......... .......... .......... .......... 87%  105M 0s
126000K .......... .......... .......... .......... .......... 87%  113M 0s
126050K .......... .......... .......... .......... .......... 87%  129M 0s
126100K .......... .......... .......... .......... .......... 87% 99.7M 0s
126150K .......... .......... .......... .......... .......... 87%  118M 0s
126200K .......... .......... .......... .......... .......... 87%  103M 0s
126250K .......... .......... .......... .......... .......... 87%  124M 0s
126300K .......... .......... .......... .......... .......... 87%  117M 0s
126350K .......... .......... .......... .......... .......... 87%  102M 0s
126400K .......... .......... .......... .......... .......... 87%  118M 0s
126450K .......... .......... .......... .......... .......... 87%  101M 0s
126500K .......... .......... .......... .......... .......... 88%  112M 0s
126550K .......... .......... .......... .......... .......... 88%  125M 0s
126600K .......... .......... .......... .......... .......... 88%  100M 0s
126650K .......... .......... .......... .......... .......... 88%  122M 0s
126700K .......... .......... .......... .......... .......... 88% 46.8M 0s
126750K .......... .......... .......... .......... .......... 88%  169M 0s
126800K .......... .......... .......... .......... .......... 88%  161M 0s
126850K .......... .......... .......... .......... .......... 88%  160M 0s
126900K .......... .......... .......... .......... .......... 88%  188M 0s
126950K .......... .......... .......... .......... .......... 88%  112M 0s
127000K .......... .......... .......... .......... .......... 88%  115M 0s
127050K .......... .......... .......... .......... .......... 88%  109M 0s
127100K .......... .......... .......... .......... .......... 88%  115M 0s
127150K .......... .......... .......... .......... .......... 88%  116M 0s
127200K .......... .......... .......... .......... .......... 88%  102M 0s
127250K .......... .......... .......... .......... .......... 88%  119M 0s
127300K .......... .......... .......... .......... .......... 88%  122M 0s
127350K .......... .......... .......... .......... .......... 88%  100M 0s
127400K .......... .......... .......... .......... .......... 88%  123M 0s
127450K .......... .......... .......... .......... .......... 88%  102M 0s
127500K .......... .......... .......... .......... .......... 88%  117M 0s
127550K .......... .......... .......... .......... .......... 88%  118M 0s
127600K .......... .......... .......... .......... .......... 88% 93.6M 0s
127650K .......... .......... .......... .......... .......... 88%  116M 0s
127700K .......... .......... .......... .......... .......... 88% 97.1M 0s
127750K .......... .......... .......... .......... .......... 88%  117M 0s
127800K .......... .......... .......... .......... .......... 88%  118M 0s
127850K .......... .......... .......... .......... .......... 88%  103M 0s
127900K .......... .......... .......... .......... .......... 88%  133M 0s
127950K .......... .......... .......... .......... .......... 89%  115M 0s
128000K .......... .......... .......... .......... .......... 89%  120M 0s
128050K .......... .......... .......... .......... .......... 89%  120M 0s
128100K .......... .......... .......... .......... .......... 89%  100M 0s
128150K .......... .......... .......... .......... .......... 89%  112M 0s
128200K .......... .......... .......... .......... .......... 89%  108M 0s
128250K .......... .......... .......... .......... .......... 89%  118M 0s
128300K .......... .......... .......... .......... .......... 89%  117M 0s
128350K .......... .......... .......... .......... .......... 89%  105M 0s
128400K .......... .......... .......... .......... .......... 89%  113M 0s
128450K .......... .......... .......... .......... .......... 89%  106M 0s
128500K .......... .......... .......... .......... .......... 89%  119M 0s
128550K .......... .......... .......... .......... .......... 89%  120M 0s
128600K .......... .......... .......... .......... .......... 89%  102M 0s
128650K .......... .......... .......... .......... .......... 89%  103M 0s
128700K .......... .......... .......... .......... .......... 89%  104M 0s
128750K .......... .......... .......... .......... .......... 89%  114M 0s
128800K .......... .......... .......... .......... .......... 89%  113M 0s
128850K .......... .......... .......... .......... .......... 89%  101M 0s
128900K .......... .......... .......... .......... .......... 89%  129M 0s
128950K .......... .......... .......... .......... .......... 89% 89.5M 0s
129000K .......... .......... .......... .......... .......... 89%  156M 0s
129050K .......... .......... .......... .......... .......... 89%  130M 0s
129100K .......... .......... .......... .......... .......... 89% 97.3M 0s
129150K .......... .......... .......... .......... .......... 89%  135M 0s
129200K .......... .......... .......... .......... .......... 89% 99.9M 0s
129250K .......... .......... .......... .......... .......... 89%  118M 0s
129300K .......... .......... .......... .......... .......... 89%  119M 0s
129350K .......... .......... .......... .......... .......... 89%  105M 0s
129400K .......... .......... .......... .......... .......... 90%  111M 0s
129450K .......... .......... .......... .......... .......... 90%  107M 0s
129500K .......... .......... .......... .......... .......... 90%  116M 0s
129550K .......... .......... .......... .......... .......... 90%  125M 0s
129600K .......... .......... .......... .......... .......... 90% 99.3M 0s
129650K .......... .......... .......... .......... .......... 90%  122M 0s
129700K .......... .......... .......... .......... .......... 90% 96.1M 0s
129750K .......... .......... .......... .......... .......... 90%  131M 0s
129800K .......... .......... .......... .......... .......... 90%  122M 0s
129850K .......... .......... .......... .......... .......... 90%  102M 0s
129900K .......... .......... .......... .......... .......... 90%  109M 0s
129950K .......... .......... .......... .......... .......... 90%  109M 0s
130000K .......... .......... .......... .......... .......... 90%  110M 0s
130050K .......... .......... .......... .......... .......... 90%  132M 0s
130100K .......... .......... .......... .......... .......... 90%  101M 0s
130150K .......... .......... .......... .......... .......... 90%  117M 0s
130200K .......... .......... .......... .......... .......... 90%  102M 0s
130250K .......... .......... .......... .......... .......... 90%  120M 0s
130300K .......... .......... .......... .......... .......... 90%  124M 0s
130350K .......... .......... .......... .......... .......... 90% 95.8M 0s
130400K .......... .......... .......... .......... .......... 90%  101M 0s
130450K .......... .......... .......... .......... .......... 90% 96.5M 0s
130500K .......... .......... .......... .......... .......... 90%  125M 0s
130550K .......... .......... .......... .......... .......... 90%  116M 0s
130600K .......... .......... .......... .......... .......... 90% 99.9M 0s
130650K .......... .......... .......... .......... .......... 90%  117M 0s
130700K .......... .......... .......... .......... .......... 90% 96.6M 0s
130750K .......... .......... .......... .......... .......... 90%  134M 0s
130800K .......... .......... .......... .......... .......... 91%  116M 0s
130850K .......... .......... .......... .......... .......... 91%  106M 0s
130900K .......... .......... .......... .......... .......... 91%  119M 0s
130950K .......... .......... .......... .......... .......... 91% 96.1M 0s
131000K .......... .......... .......... .......... .......... 91% 55.2M 0s
131050K .......... .......... .......... .......... .......... 91%  205M 0s
131100K .......... .......... .......... .......... .......... 91%  184M 0s
131150K .......... .......... .......... .......... .......... 91%  158M 0s
131200K .......... .......... .......... .......... .......... 91%  104M 0s
131250K .......... .......... .......... .......... .......... 91%  117M 0s
131300K .......... .......... .......... .......... .......... 91%  123M 0s
131350K .......... .......... .......... .......... .......... 91%  104M 0s
131400K .......... .......... .......... .......... .......... 91%  119M 0s
131450K .......... .......... .......... .......... .......... 91% 90.7M 0s
131500K .......... .......... .......... .......... .......... 91% 92.7M 0s
131550K .......... .......... .......... .......... .......... 91% 91.8M 0s
131600K .......... .......... .......... .......... .......... 91% 99.2M 0s
131650K .......... .......... .......... .......... .......... 91%  120M 0s
131700K .......... .......... .......... .......... .......... 91%  106M 0s
131750K .......... .......... .......... .......... .......... 91%  121M 0s
131800K .......... .......... .......... .......... .......... 91%  115M 0s
131850K .......... .......... .......... .......... .......... 91%  106M 0s
131900K .......... .......... .......... .......... .......... 91%  112M 0s
131950K .......... .......... .......... .......... .......... 91%  103M 0s
132000K .......... .......... .......... .......... .......... 91%  126M 0s
132050K .......... .......... .......... .......... .......... 91%  120M 0s
132100K .......... .......... .......... .......... .......... 91%  105M 0s
132150K .......... .......... .......... .......... .......... 91%  117M 0s
132200K .......... .......... .......... .......... .......... 91%  103M 0s
132250K .......... .......... .......... .......... .......... 92%  114M 0s
132300K .......... .......... .......... .......... .......... 92%  122M 0s
132350K .......... .......... .......... .......... .......... 92%  101M 0s
132400K .......... .......... .......... .......... .......... 92%  122M 0s
132450K .......... .......... .......... .......... .......... 92% 96.6M 0s
132500K .......... .......... .......... .......... .......... 92%  119M 0s
132550K .......... .......... .......... .......... .......... 92%  126M 0s
132600K .......... .......... .......... .......... .......... 92%  104M 0s
132650K .......... .......... .......... .......... .......... 92%  118M 0s
132700K .......... .......... .......... .......... .......... 92% 99.7M 0s
132750K .......... .......... .......... .......... .......... 92%  127M 0s
132800K .......... .......... .......... .......... .......... 92%  113M 0s
132850K .......... .......... .......... .......... .......... 92%  103M 0s
132900K .......... .......... .......... .......... .......... 92%  120M 0s
132950K .......... .......... .......... .......... .......... 92% 98.8M 0s
133000K .......... .......... .......... .......... .......... 92%  126M 0s
133050K .......... .......... .......... .......... .......... 92%  117M 0s
133100K .......... .......... .......... .......... .......... 92%  105M 0s
133150K .......... .......... .......... .......... .......... 92%  113M 0s
133200K .......... .......... .......... .......... .......... 92%  107M 0s
133250K .......... .......... .......... .......... .......... 92%  113M 0s
133300K .......... .......... .......... .......... .......... 92%  114M 0s
133350K .......... .......... .......... .......... .......... 92%  112M 0s
133400K .......... .......... .......... .......... .......... 92%  115M 0s
133450K .......... .......... .......... .......... .......... 92%  106M 0s
133500K .......... .......... .......... .......... .......... 92%  117M 0s
133550K .......... .......... .......... .......... .......... 92%  114M 0s
133600K .......... .......... .......... .......... .......... 92%  104M 0s
133650K .......... .......... .......... .......... .......... 92%  107M 0s
133700K .......... .......... .......... .......... .......... 93%  116M 0s
133750K .......... .......... .......... .......... .......... 93%  118M 0s
133800K .......... .......... .......... .......... .......... 93%  123M 0s
133850K .......... .......... .......... .......... .......... 93%  103M 0s
133900K .......... .......... .......... .......... .......... 93%  114M 0s
133950K .......... .......... .......... .......... .......... 93%  105M 0s
134000K .......... .......... .......... .......... .......... 93%  113M 0s
134050K .......... .......... .......... .......... .......... 93%  124M 0s
134100K .......... .......... .......... .......... .......... 93%  101M 0s
134150K .......... .......... .......... .......... .......... 93%  122M 0s
134200K .......... .......... .......... .......... .......... 93%  100M 0s
134250K .......... .......... .......... .......... .......... 93%  117M 0s
134300K .......... .......... .......... .......... .......... 93%  113M 0s
134350K .......... .......... .......... .......... .......... 93%  111M 0s
134400K .......... .......... .......... .......... .......... 93%  113M 0s
134450K .......... .......... .......... .......... .......... 93%  101M 0s
134500K .......... .......... .......... .......... .......... 93%  127M 0s
134550K .......... .......... .......... .......... .......... 93%  113M 0s
134600K .......... .......... .......... .......... .......... 93%  103M 0s
134650K .......... .......... .......... .......... .......... 93%  120M 0s
134700K .......... .......... .......... .......... .......... 93%  104M 0s
134750K .......... .......... .......... .......... .......... 93%  121M 0s
134800K .......... .......... .......... .......... .......... 93%  123M 0s
134850K .......... .......... .......... .......... .......... 93%  101M 0s
134900K .......... .......... .......... .......... .......... 93%  117M 0s
134950K .......... .......... .......... .......... .......... 93%  103M 0s
135000K .......... .......... .......... .......... .......... 93%  118M 0s
135050K .......... .......... .......... .......... .......... 93% 48.7M 0s
135100K .......... .......... .......... .......... .......... 93%  164M 0s
135150K .......... .......... .......... .......... .......... 94%  208M 0s
135200K .......... .......... .......... .......... .......... 94%  182M 0s
135250K .......... .......... .......... .......... .......... 94%  128M 0s
135300K .......... .......... .......... .......... .......... 94%  110M 0s
135350K .......... .......... .......... .......... .......... 94% 96.7M 0s
135400K .......... .......... .......... .......... .......... 94%  125M 0s
135450K .......... .......... .......... .......... .......... 94%  107M 0s
135500K .......... .......... .......... .......... .......... 94%  102M 0s
135550K .......... .......... .......... .......... .......... 94%  129M 0s
135600K .......... .......... .......... .......... .......... 94% 93.0M 0s
135650K .......... .......... .......... .......... .......... 94%  129M 0s
135700K .......... .......... .......... .......... .......... 94%  112M 0s
135750K .......... .......... .......... .......... .......... 94%  105M 0s
135800K .......... .......... .......... .......... .......... 94%  141M 0s
135850K .......... .......... .......... .......... .......... 94%  112M 0s
135900K .......... .......... .......... .......... .......... 94%  120M 0s
135950K .......... .......... .......... .......... .......... 94%  102M 0s
136000K .......... .......... .......... .......... .......... 94%  121M 0s
136050K .......... .......... .......... .......... .......... 94%  115M 0s
136100K .......... .......... .......... .......... .......... 94%  107M 0s
136150K .......... .......... .......... .......... .......... 94%  108M 0s
136200K .......... .......... .......... .......... .......... 94%  110M 0s
136250K .......... .......... .......... .......... .......... 94%  113M 0s
136300K .......... .......... .......... .......... .......... 94%  124M 0s
136350K .......... .......... .......... .......... .......... 94% 99.9M 0s
136400K .......... .......... .......... .......... .......... 94%  124M 0s
136450K .......... .......... .......... .......... .......... 94% 96.8M 0s
136500K .......... .......... .......... .......... .......... 94%  128M 0s
136550K .......... .......... .......... .......... .......... 94%  121M 0s
136600K .......... .......... .......... .......... .......... 95%  101M 0s
136650K .......... .......... .......... .......... .......... 95%  119M 0s
136700K .......... .......... .......... .......... .......... 95%  102M 0s
136750K .......... .......... .......... .......... .......... 95%  118M 0s
136800K .......... .......... .......... .......... .......... 95%  120M 0s
136850K .......... .......... .......... .......... .......... 95%  102M 0s
136900K .......... .......... .......... .......... .......... 95%  115M 0s
136950K .......... .......... .......... .......... .......... 95%  108M 0s
137000K .......... .......... .......... .......... .......... 95%  114M 0s
137050K .......... .......... .......... .......... .......... 95%  125M 0s
137100K .......... .......... .......... .......... .......... 95%  101M 0s
137150K .......... .......... .......... .......... .......... 95%  119M 0s
137200K .......... .......... .......... .......... .......... 95%  100M 0s
137250K .......... .......... .......... .......... .......... 95%  112M 0s
137300K .......... .......... .......... .......... .......... 95%  125M 0s
137350K .......... .......... .......... .......... .......... 95%  109M 0s
137400K .......... .......... .......... .......... .......... 95%  114M 0s
137450K .......... .......... .......... .......... .......... 95%  107M 0s
137500K .......... .......... .......... .......... .......... 95%  108M 0s
137550K .......... .......... .......... .......... .......... 95%  128M 0s
137600K .......... .......... .......... .......... .......... 95%  102M 0s
137650K .......... .......... .......... .......... .......... 95%  121M 0s
137700K .......... .......... .......... .......... .......... 95%  103M 0s
137750K .......... .......... .......... .......... .......... 95%  114M 0s
137800K .......... .......... .......... .......... .......... 95%  118M 0s
137850K .......... .......... .......... .......... .......... 95%  104M 0s
137900K .......... .......... .......... .......... .......... 95%  124M 0s
137950K .......... .......... .......... .......... .......... 95%  102M 0s
138000K .......... .......... .......... .......... .......... 96%  113M 0s
138050K .......... .......... .......... .......... .......... 96%  117M 0s
138100K .......... .......... .......... .......... .......... 96%  104M 0s
138150K .......... .......... .......... .......... .......... 96%  124M 0s
138200K .......... .......... .......... .......... .......... 96%  101M 0s
138250K .......... .......... .......... .......... .......... 96%  117M 0s
138300K .......... .......... .......... .......... .......... 96%  123M 0s
138350K .......... .......... .......... .......... .......... 96%  101M 0s
138400K .......... .......... .......... .......... .......... 96%  119M 0s
138450K .......... .......... .......... .......... .......... 96%  102M 0s
138500K .......... .......... .......... .......... .......... 96%  122M 0s
138550K .......... .......... .......... .......... .......... 96%  118M 0s
138600K .......... .......... .......... .......... .......... 96%  104M 0s
138650K .......... .......... .......... .......... .......... 96%  114M 0s
138700K .......... .......... .......... .......... .......... 96%  104M 0s
138750K .......... .......... .......... .......... .......... 96%  119M 0s
138800K .......... .......... .......... .......... .......... 96%  121M 0s
138850K .......... .......... .......... .......... .......... 96% 99.0M 0s
138900K .......... .......... .......... .......... .......... 96% 45.4M 0s
138950K .......... .......... .......... .......... .......... 96%  166M 0s
139000K .......... .......... .......... .......... .......... 96%  199M 0s
139050K .......... .......... .......... .......... .......... 96%  207M 0s
139100K .......... .......... .......... .......... .......... 96%  123M 0s
139150K .......... .......... .......... .......... .......... 96%  133M 0s
139200K .......... .......... .......... .......... .......... 96% 96.6M 0s
139250K .......... .......... .......... .......... .......... 96%  109M 0s
139300K .......... .......... .......... .......... .......... 96%  137M 0s
139350K .......... .......... .......... .......... .......... 96%  108M 0s
139400K .......... .......... .......... .......... .......... 96%  111M 0s
139450K .......... .......... .......... .......... .......... 97%  108M 0s
139500K .......... .......... .......... .......... .......... 97%  129M 0s
139550K .......... .......... .......... .......... .......... 97%  124M 0s
139600K .......... .......... .......... .......... .......... 97%  100M 0s
139650K .......... .......... .......... .......... .......... 97%  116M 0s
139700K .......... .......... .......... .......... .......... 97% 96.8M 0s
139750K .......... .......... .......... .......... .......... 97%  113M 0s
139800K .......... .......... .......... .......... .......... 97%  133M 0s
139850K .......... .......... .......... .......... .......... 97% 96.4M 0s
139900K .......... .......... .......... .......... .......... 97%  129M 0s
139950K .......... .......... .......... .......... .......... 97%  102M 0s
140000K .......... .......... .......... .......... .......... 97%  124M 0s
140050K .......... .......... .......... .......... .......... 97%  119M 0s
140100K .......... .......... .......... .......... .......... 97%  101M 0s
140150K .......... .......... .......... .......... .......... 97%  112M 0s
140200K .......... .......... .......... .......... .......... 97%  109M 0s
140250K .......... .......... .......... .......... .......... 97%  116M 0s
140300K .......... .......... .......... .......... .......... 97%  119M 0s
140350K .......... .......... .......... .......... .......... 97%  102M 0s
140400K .......... .......... .......... .......... .......... 97%  115M 0s
140450K .......... .......... .......... .......... .......... 97%  107M 0s
140500K .......... .......... .......... .......... .......... 97%  121M 0s
140550K .......... .......... .......... .......... .......... 97%  116M 0s
140600K .......... .......... .......... .......... .......... 97%  105M 0s
140650K .......... .......... .......... .......... .......... 97%  119M 0s
140700K .......... .......... .......... .......... .......... 97%  102M 0s
140750K .......... .......... .......... .......... .......... 97%  119M 0s
140800K .......... .......... .......... .......... .......... 97%  111M 0s
140850K .......... .......... .......... .......... .......... 97%  105M 0s
140900K .......... .......... .......... .......... .......... 98%  115M 0s
140950K .......... .......... .......... .......... .......... 98%  106M 0s
141000K .......... .......... .......... .......... .......... 98%  122M 0s
141050K .......... .......... .......... .......... .......... 98%  101M 0s
141100K .......... .......... .......... .......... .......... 98%  120M 0s
141150K .......... .......... .......... .......... .......... 98%  110M 0s
141200K .......... .......... .......... .......... .......... 98%  106M 0s
141250K .......... .......... .......... .......... .......... 98%  122M 0s
141300K .......... .......... .......... .......... .......... 98%  116M 0s
141350K .......... .......... .......... .......... .......... 98% 97.2M 0s
141400K .......... .......... .......... .......... .......... 98%  114M 0s
141450K .......... .......... .......... .......... .......... 98%  108M 0s
141500K .......... .......... .......... .......... .......... 98%  118M 0s
141550K .......... .......... .......... .......... .......... 98%  102M 0s
141600K .......... .......... .......... .......... .......... 98% 88.3M 0s
141650K .......... .......... .......... .......... .......... 98%  171M 0s
141700K .......... .......... .......... .......... .......... 98% 93.8M 0s
141750K .......... .......... .......... .......... .......... 98%  126M 0s
141800K .......... .......... .......... .......... .......... 98%  132M 0s
141850K .......... .......... .......... .......... .......... 98% 91.9M 0s
141900K .......... .......... .......... .......... .......... 98%  125M 0s
141950K .......... .......... .......... .......... .......... 98% 92.6M 0s
142000K .......... .......... .......... .......... .......... 98%  133M 0s
142050K .......... .......... .......... .......... .......... 98%  128M 0s
142100K .......... .......... .......... .......... .......... 98% 91.3M 0s
142150K .......... .......... .......... .......... .......... 98%  133M 0s
142200K .......... .......... .......... .......... .......... 98%  113M 0s
142250K .......... .......... .......... .......... .......... 98%  123M 0s
142300K .......... .......... .......... .......... .......... 98%  126M 0s
142350K .......... .......... .......... .......... .......... 99% 84.9M 0s
142400K .......... .......... .......... .......... .......... 99%  127M 0s
142450K .......... .......... .......... .......... .......... 99% 86.9M 0s
142500K .......... .......... .......... .......... .......... 99%  145M 0s
142550K .......... .......... .......... .......... .......... 99%  126M 0s
142600K .......... .......... .......... .......... .......... 99% 93.5M 0s
142650K .......... .......... .......... .......... .......... 99%  125M 0s
142700K .......... .......... .......... .......... .......... 99% 97.3M 0s
142750K .......... .......... .......... .......... .......... 99%  123M 0s
142800K .......... .......... .......... .......... .......... 99%  130M 0s
142850K .......... .......... .......... .......... .......... 99%  122M 0s
142900K .......... .......... .......... .......... .......... 99%  114M 0s
142950K .......... .......... .......... .......... .......... 99%  104M 0s
143000K .......... .......... .......... .......... .......... 99%  121M 0s
143050K .......... .......... .......... .......... .......... 99%  114M 0s
143100K .......... .......... .......... .......... .......... 99%  104M 0s
143150K .......... .......... .......... .......... .......... 99%  117M 0s
143200K .......... .......... .......... .......... .......... 99%  109M 0s
143250K .......... .......... .......... .......... .......... 99%  115M 0s
143300K .......... .......... .......... .......... .......... 99% 48.1M 0s
143350K .......... .......... .......... .......... .......... 99%  153M 0s
143400K .......... .......... .......... .......... .......... 99%  185M 0s
143450K .......... .......... .......... .......... .......... 99%  161M 0s
143500K .......... .......... .......... .......... .......... 99%  181M 0s
143550K .......... .......... .......... .......... .......... 99%  113M 0s
143600K .......... .......... .......... .......... .......... 99% 97.3M 0s
143650K .......... .......... .......... .......... .......... 99%  125M 0s
143700K .......... .......... .......... .......... .......... 99% 91.6M 0s
143750K .......... .......... .......... .........            100%  170M=1.3s

2023-01-20 18:19:33 (111 MB/s) - ‘input_very_large.ppm.xz’ saved [147240528/147240528]

Running: ./baseline_prof -dct int -progressive -opt -outfile output_very_large_encode.jpeg input_very_large.ppm ; in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/MiBench/consumer/jpeg
--------------------------------------------------------------------------------------
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg
DONE
opt -pgo-test-profile-file=/tmp/tmp.vYgqACIZ9j -block-freq -pgo-instr-use baseline.bc -o baseline_pre.bc
opt --strip-debug --strip-debug-declare baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.nuhry4IbZ7 (.ll version is /tmp/tmp.2b0Vjnc2Xl)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.3dL2ogg1DZ (.ll version is /tmp/tmp.tfN1qkcDar)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.nuhry4IbZ7 -o /tmp/tmp.3dL2ogg1DZ
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.nuhry4IbZ7 -o /tmp/tmp.3dL2ogg1DZ
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.nuhry4IbZ7 -o /tmp/tmp.3dL2ogg1DZ
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.nuhry4IbZ7 -o /tmp/tmp.3dL2ogg1DZ
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       main
DeadFunctionEliminator:       parse_switches
DeadFunctionEliminator:       fprintf
DeadFunctionEliminator:       usage
DeadFunctionEliminator:       fopen
DeadFunctionEliminator:       start_input_gif
DeadFunctionEliminator:       finish_input_gif
DeadFunctionEliminator:       get_pixel_rows
DeadFunctionEliminator:       LZWReadByte
DeadFunctionEliminator:       GetCode
DeadFunctionEliminator:       get_interlaced_row
DeadFunctionEliminator:       jinit_read_targa
DeadFunctionEliminator:       start_input_tga
DeadFunctionEliminator:       finish_pass_gather
DeadFunctionEliminator:       finish_pass_huff
DeadFunctionEliminator:       llvm.ctlz.i32
DeadFunctionEliminator:       jinit_phuff_encoder
DeadFunctionEliminator:       start_pass_phuff
DeadFunctionEliminator:       encode_mcu_DC_first
DeadFunctionEliminator:       encode_mcu_AC_first
DeadFunctionEliminator:       encode_mcu_DC_refine
DeadFunctionEliminator:       encode_mcu_AC_refine
DeadFunctionEliminator:       finish_pass_gather_phuff
DeadFunctionEliminator:       finish_pass_phuff
DeadFunctionEliminator:       emit_eobrun
DeadFunctionEliminator:       flush_bits
DeadFunctionEliminator:       emit_restart
DeadFunctionEliminator:       jinit_forward_dct
DeadFunctionEliminator:       start_pass_fdctmgr
DeadFunctionEliminator:       forward_DCT
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       getc
DeadFunctionEliminator:       ungetc
DeadFunctionEliminator:       fclose
DeadFunctionEliminator:       fwrite
DeadFunctionEliminator:       __isoc99_sscanf
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       jinit_read_ppm
DeadFunctionEliminator:       start_input_ppm
DeadFunctionEliminator:       finish_input_ppm
DeadFunctionEliminator:       read_pbm_integer
DeadFunctionEliminator:       get_word_gray_row
DeadFunctionEliminator:       get_raw_row
DeadFunctionEliminator:       load_interlaced_image
DeadFunctionEliminator:       get_scaled_gray_row
DeadFunctionEliminator:       get_word_rgb_row
DeadFunctionEliminator:       get_scaled_rgb_row
DeadFunctionEliminator:       get_text_gray_row
DeadFunctionEliminator:       get_text_rgb_row
DeadFunctionEliminator:       fread
DeadFunctionEliminator:       jinit_read_gif
DeadFunctionEliminator:       rgb_ycc_convert
DeadFunctionEliminator:       cmyk_ycck_convert
DeadFunctionEliminator:       jinit_downsampler
DeadFunctionEliminator:       start_pass_downsample
DeadFunctionEliminator:       sep_downsample
DeadFunctionEliminator:       fullsize_smooth_downsample
DeadFunctionEliminator:       fullsize_downsample
DeadFunctionEliminator:       h2v1_downsample
DeadFunctionEliminator:       h2v2_smooth_downsample
DeadFunctionEliminator:       h2v2_downsample
DeadFunctionEliminator:       int_downsample
DeadFunctionEliminator:       jpeg_make_c_derived_tbl
DeadFunctionEliminator:       jpeg_gen_optimal_table
DeadFunctionEliminator:       jinit_huff_encoder
DeadFunctionEliminator:       start_pass_huff
DeadFunctionEliminator:       encode_mcu_gather
DeadFunctionEliminator:       encode_mcu_huff
DeadFunctionEliminator:       finish_input_tga
DeadFunctionEliminator:       read_rle_pixel
DeadFunctionEliminator:       read_non_rle_pixel
DeadFunctionEliminator:       get_8bit_row
DeadFunctionEliminator:       get_16bit_row
DeadFunctionEliminator:       get_24bit_row
DeadFunctionEliminator:       get_8bit_gray_row
DeadFunctionEliminator:       preload_image
DeadFunctionEliminator:       get_memory_row
DeadFunctionEliminator:       jinit_read_bmp
DeadFunctionEliminator:       start_input_bmp
DeadFunctionEliminator:       finish_input_bmp
DeadFunctionEliminator:       preload_image.9
DeadFunctionEliminator:       write_any_marker
DeadFunctionEliminator:       write_frame_header
DeadFunctionEliminator:       write_scan_header
DeadFunctionEliminator:       write_tables_only
DeadFunctionEliminator:       emit_dqt
DeadFunctionEliminator:       emit_dht
DeadFunctionEliminator:       emit_sof
DeadFunctionEliminator:       get_8bit_row.10
DeadFunctionEliminator:       get_24bit_row.11
DeadFunctionEliminator:       read_quant_tables
DeadFunctionEliminator:       read_text_integer
DeadFunctionEliminator:       text_getc
DeadFunctionEliminator:       __ctype_b_loc
DeadFunctionEliminator:       read_scan_script
DeadFunctionEliminator:       read_scan_integer
DeadFunctionEliminator:       llvm.memcpy.p0i8.p0i8.i64
DeadFunctionEliminator:       set_quant_slots
DeadFunctionEliminator:       set_sample_factors
DeadFunctionEliminator:       keymatch
DeadFunctionEliminator:       __ctype_tolower_loc
DeadFunctionEliminator:       read_stdin
DeadFunctionEliminator:       start_pass_coef
DeadFunctionEliminator:       compress_data
DeadFunctionEliminator:       compress_first_pass
DeadFunctionEliminator:       compress_output
DeadFunctionEliminator:       jinit_color_converter
DeadFunctionEliminator:       null_method
DeadFunctionEliminator:       grayscale_convert
DeadFunctionEliminator:       rgb_ycc_start
DeadFunctionEliminator:       rgb_gray_convert
DeadFunctionEliminator:       write_stdout
DeadFunctionEliminator:       jpeg_CreateCompress
DeadFunctionEliminator:       llvm.memset.p0i8.i64
DeadFunctionEliminator:       jpeg_destroy_compress
DeadFunctionEliminator:       jpeg_abort_compress
DeadFunctionEliminator:       jpeg_suppress_tables
DeadFunctionEliminator:       jpeg_finish_compress
DeadFunctionEliminator:       jpeg_write_tables
DeadFunctionEliminator:       jpeg_start_compress
DeadFunctionEliminator:       jpeg_write_scanlines
DeadFunctionEliminator:       jpeg_add_quant_table
DeadFunctionEliminator:       jpeg_set_linear_quality
DeadFunctionEliminator:       jpeg_quality_scaling
DeadFunctionEliminator:       jpeg_set_quality
DeadFunctionEliminator:       jpeg_set_defaults
DeadFunctionEliminator:       jpeg_default_colorspace
DeadFunctionEliminator:       jpeg_set_colorspace
DeadFunctionEliminator:       jpeg_simple_progression
DeadFunctionEliminator:       jpeg_stdio_dest
DeadFunctionEliminator:       init_destination
DeadFunctionEliminator:       empty_output_buffer
DeadFunctionEliminator:       term_destination
DeadFunctionEliminator:       fflush
DeadFunctionEliminator:       ferror
DeadFunctionEliminator:       jinit_compress_master
DeadFunctionEliminator:       jinit_c_master_control
DeadFunctionEliminator:       prepare_for_pass
DeadFunctionEliminator:       finish_pass_master
DeadFunctionEliminator:       select_scan_parameters
DeadFunctionEliminator:       per_scan_setup
DeadFunctionEliminator:       jinit_marker_writer
DeadFunctionEliminator:       jpeg_free_small
DeadFunctionEliminator:       free
DeadFunctionEliminator:       jpeg_get_large
DeadFunctionEliminator:       jpeg_free_large
DeadFunctionEliminator:       jpeg_mem_available
DeadFunctionEliminator:       jpeg_open_backing_store
DeadFunctionEliminator:       jinit_c_main_controller
DeadFunctionEliminator:       start_pass_main
DeadFunctionEliminator:       process_data_simple_main
DeadFunctionEliminator:       jinit_c_prep_controller
DeadFunctionEliminator:       start_pass_prep
DeadFunctionEliminator:       pre_process_context
DeadFunctionEliminator:       pre_process_data
DeadFunctionEliminator:       jinit_c_coef_controller
DeadFunctionEliminator:       null_convert
DeadFunctionEliminator:       forward_DCT_float
DeadFunctionEliminator:       jpeg_fdct_ifast
DeadFunctionEliminator:       jpeg_fdct_float
DeadFunctionEliminator:       jpeg_fdct_islow
DeadFunctionEliminator:       jpeg_abort
DeadFunctionEliminator:       jpeg_destroy
DeadFunctionEliminator:       jpeg_alloc_quant_table
DeadFunctionEliminator:       jpeg_alloc_huff_table
DeadFunctionEliminator:       jdiv_round_up
DeadFunctionEliminator:       jround_up
DeadFunctionEliminator:       jcopy_sample_rows
DeadFunctionEliminator:       jcopy_block_row
DeadFunctionEliminator:       jzero_far
DeadFunctionEliminator:       jpeg_std_error
DeadFunctionEliminator:       error_exit
DeadFunctionEliminator:       emit_message
DeadFunctionEliminator:       output_message
DeadFunctionEliminator:       format_message
DeadFunctionEliminator:       reset_error_mgr
DeadFunctionEliminator:       sprintf
DeadFunctionEliminator:       jinit_memory_mgr
DeadFunctionEliminator:       alloc_small
DeadFunctionEliminator:       alloc_large
DeadFunctionEliminator:       alloc_sarray
DeadFunctionEliminator:       alloc_barray
DeadFunctionEliminator:       request_virt_sarray
DeadFunctionEliminator:       request_virt_barray
DeadFunctionEliminator:       realize_virt_arrays
DeadFunctionEliminator:       access_virt_sarray
DeadFunctionEliminator:       access_virt_barray
DeadFunctionEliminator:       free_pool
DeadFunctionEliminator:       self_destruct
DeadFunctionEliminator:       getenv
DeadFunctionEliminator:       jpeg_get_small
DeadFunctionEliminator:       malloc
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:     Loop "  %117 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %114, align 8, !tbaa !56" (3.130122e+01%)
Noelle:  Function "encode_mcu_AC_refine"
Noelle:     Loop "  %42 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %40" (1.370230e+01%)
Noelle:     Loop "  %76 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %72" (1.472957e+01%)
Noelle:     Loop "  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %6)" (2.227506e-02%)
Noelle:     Loop "  %133 = lshr i64 %131, 16" (7.578115e-04%)
Noelle:     Loop "  %209 = icmp eq i32 %206, 0" (7.618318e-03%)
Noelle:     Loop "  %222 = lshr i64 %220, 16" (6.241086e-04%)
Noelle:     Loop "  %357 = lshr i64 %355, 16" (3.896084e-02%)
Noelle:     Loop "  %438 = lshr i64 %436, 16" (1.224248e-02%)
Noelle:     Loop "  %514 = icmp eq i32 %511, 0" (4.770002e-01%)
Noelle:     Loop "  %527 = lshr i64 %525, 16" (3.925195e-02%)
Noelle:  Function "encode_mcu_AC_first"
Noelle:     Loop "  %44 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %42" (1.096962e+01%)
Noelle:     Loop "  %78 = load i32, i32* %34, align 8, !tbaa !61" (2.034564e-03%)
Noelle:     Loop "  %123 = lshr i64 %121, 16" (6.288146e-04%)
Noelle:     Loop "  %192 = ashr i32 %191, 1" (4.813965e-01%)
Noelle:     Loop "  %246 = lshr i64 %244, 16" (2.176119e-01%)
Noelle:     Loop "  %324 = lshr i64 %322, 16" (1.046508e-01%)
Noelle:  Function "rgb_ycc_convert"
Noelle:     Loop "  %27 = load i8**, i8*** %2, align 8, !tbaa !45" (9.008486e+00%)
Noelle:     Loop "  %41 = load i8, i8* %40, align 1, !tbaa !46" (9.008230e+00%)
Noelle:  Function "forward_DCT"
Noelle:     Loop "  %29 = zext i32 %28 to i64" (5.690853e+00%)
Noelle:     Loop "  %33 = getelementptr inbounds i8*, i8** %21, i64 %31" (1.389923e+00%)
Noelle:     Loop "  %80 = getelementptr inbounds i32, i32* %18, i64 %79" (4.266730e+00%)
Noelle:  Function "jpeg_fdct_islow"
Noelle:     Loop "  %5 = load i32, i32* %4, align 4, !tbaa !30" (2.470067e+00%)
Noelle:     Loop "  %96 = load i32, i32* %95, align 4, !tbaa !30" (2.519041e+00%)
Noelle:  Function "compress_output"
Noelle:     Loop "  %17 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %16" (4.668188e-04%)
Noelle:     Loop "  %56 = icmp ult i32 %54, %53" (2.086791e+00%)
Noelle:     Loop "  %58 = load i32, i32* %8, align 4, !tbaa !39" (2.086416e+00%)
Noelle:     Loop "  %65 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %63" (1.685319e+00%)
Noelle:     Loop "  %89 = add nsw i64 %87, %55" (8.442142e-01%)
Noelle:     Loop "  %97 = add i64 %96, %93" (0.000000e+00%)
Noelle:     Loop "  %126 = getelementptr inbounds [64 x i16], [64 x i16]* %124, i64 1" (3.036891e-01%)
Noelle:  Function "emit_eobrun"
Noelle:     Loop "  %7 = ashr i32 %5, 1" (7.500310e-02%)
Noelle:     Loop "  %70 = lshr i64 %68, 16" (4.004850e-02%)
Noelle:     Loop "  %163 = lshr i64 %161, 16" (4.102032e-03%)
Noelle:     Loop "  %246 = icmp eq i32 %243, 0" (1.172745e+00%)
Noelle:     Loop "  %261 = lshr i64 %259, 16" (1.025474e-01%)
Noelle:  Function "h2v2_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %2, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %2, i64 %60" (3.211166e-04%)
Noelle:     Loop "  %78 = or i64 %77, 1" (1.590876e+00%)
Noelle:     Loop "  %90 = load i8, i8* %88, align 1, !tbaa !44" (1.590670e+00%)
Noelle:  Function "encode_mcu_DC_first"
Noelle:     Loop "  %36 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %35" (4.880481e-01%)
Noelle:     Loop "  %109 = lshr i64 %107, 16" (2.117463e-02%)
Noelle:     Loop "  %193 = lshr i64 %191, 16" (2.132461e-02%)
Noelle:  Function "encode_mcu_DC_refine"
Noelle:     Loop "  %38 = load i32, i32* %31, align 8, !tbaa !50" (1.246450e-01%)
Noelle:     Loop "  %59 = lshr i64 %57, 16" (8.559006e-03%)
Noelle:  Function "compress_first_pass"
Noelle:     Loop "  %22 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (1.768191e-04%)
Noelle:     Loop "  %121 = getelementptr inbounds [64 x i16]*, [64 x i16]** %31, i64 %120" (4.258416e-05%)
Noelle:     Loop "  %69 = getelementptr inbounds [64 x i16]*, [64 x i16]** %31, i64 %68" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds [64 x i16], [64 x i16]* %77, i64 %82" (0.000000e+00%)
Noelle:     Loop "  %113 = getelementptr inbounds [64 x i16], [64 x i16]* %77, i64 %111" (0.000000e+00%)
Noelle:     Loop "  %165 = getelementptr inbounds [64 x i16]*, [64 x i16]** %31, i64 %164" (0.000000e+00%)
Noelle:     Loop "  %174 = getelementptr inbounds [64 x i16], [64 x i16]* %171, i64 %146, i64 0" (0.000000e+00%)
Noelle:     Loop "  %178 = getelementptr inbounds [64 x i16], [64 x i16]* %172, i64 %176, i64 0" (0.000000e+00%)
Noelle:     Loop "  %191 = getelementptr inbounds [64 x i16], [64 x i16]* %172, i64 %189, i64 0" (0.000000e+00%)
Noelle:     Loop "  %157 = getelementptr inbounds [64 x i16]*, [64 x i16]** %31, i64 %156" (0.000000e+00%)
Noelle:  Function "finish_pass_gather_phuff"
Noelle:     Loop "  %50 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %49" (5.741293e-03%)
Noelle:     Loop "  %20 = load i32, i32* %14, align 4, !tbaa !43" (1.435376e-03%)
Noelle:  Function "jpeg_gen_optimal_table"
Noelle:     Loop "  %17 = getelementptr inbounds i64, i64* %2, i64 %14" (5.537335e-03%)
Noelle:     Loop "  %34 = getelementptr inbounds i64, i64* %2, i64 %31" (2.315319e-03%)
Noelle:     Loop "  %66 = sext i32 %65 to i64" (3.020774e-05%)
Noelle:     Loop "  %83 = sext i32 %82 to i64" (2.979051e-05%)
Noelle:     Loop "  %92 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %91" (5.195075e-05%)
Noelle:     Loop "  %112 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %110" (1.125776e-05%)
Noelle:     Loop "  br label %120" (7.704977e-06%)
Noelle:     Loop "  %122 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %121" (2.168106e-06%)
Noelle:     Loop "  %143 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %142" (3.516341e-07%)
Noelle:     Loop "  br label %153" (1.574641e-03%)
Noelle:     Loop "  %157 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %154" (1.569995e-03%)
Noelle:  Function "access_virt_barray"
Noelle:     Loop "  %85 = mul nsw i64 %82, %51" (0.000000e+00%)
Noelle:     Loop "  %169 = mul nsw i64 %166, %137" (0.000000e+00%)
Noelle:     Loop "  %236 = load [64 x i16]**, [64 x i16]*** %232, align 8, !tbaa !40" (0.000000e+00%)
Noelle:  Function "pre_process_data"
Noelle:     Loop "  %24 = load i32, i32* %5, align 4, !tbaa !39" (5.846873e-04%)
Noelle:     Loop "  %55 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %54" (3.188392e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %56, i32 %60, i8** %56, i32 %62, i32 1, i32 %57) #20" (2.095229e-07%)
Noelle:     Loop "  %105 = getelementptr inbounds i8**, i8*** %4, i64 %103" (9.911344e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %106, i32 %116, i8** %106, i32 %118, i32 1, i32 %109) #20" (8.490232e-07%)
Noelle:  Function "fullsize_downsample"
Noelle:     Loop "  %33 = getelementptr inbounds i8*, i8** %3, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %63 = getelementptr inbounds i8*, i8** %3, i64 %61" (1.605583e-04%)
Noelle:  Function "jpeg_write_scanlines"
Noelle:  Function "sep_downsample"
Noelle:     Loop "  %19 = getelementptr inbounds i8**, i8*** %1, i64 %17" (4.174516e-04%)
Noelle:  Function "process_data_simple_main"
Noelle:     Loop "  %22 = icmp ult i32 %21, 8" (1.781947e-04%)
Noelle:  Function "jpeg_finish_compress"
Noelle:     Loop "  %47 = getelementptr inbounds %struct.jpeg_comp_master, %struct.jpeg_comp_master* %46, i64 0, i32 0" (2.753768e-04%)
Noelle:     Loop "  %53 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %41, align 8, !tbaa !57" (2.747556e-04%)
Noelle:  Function "jcopy_sample_rows"
Noelle:     Loop "  %30 = getelementptr inbounds i8*, i8** %28, i64 1" (1.027573e-04%)
Noelle:  Function "get_raw_row"
Noelle:  Function "empty_output_buffer"
Noelle:  Function "start_pass_phuff"
Noelle:     Loop "  %95 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %94" (2.763698e-05%)
Noelle:     Loop "  %47 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %46" (1.049254e-05%)
Noelle:  Function "jpeg_make_c_derived_tbl"
Noelle:     Loop "  %25 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %1, i64 0, i32 0, i64 %22" (1.162032e-05%)
Noelle:     Loop "  %52 = add nsw <2 x i64> %49, <i64 8, i64 8>" (0.000000e+00%)
Noelle:     Loop "  %64 = add nsw <2 x i64> %61, <i64 1, i64 1>" (6.085274e-07%)
Noelle:     Loop "  %102 = sext i8 %98 to i32" (1.359348e-05%)
Noelle:     Loop "  %109 = add nsw i64 %107, 1" (7.413467e-06%)
Noelle:     Loop "  %152 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 %150" (1.026298e-05%)
Noelle:  Function "write_scan_header"
Noelle:     Loop "  %15 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %14" (2.171022e-05%)
Noelle:     Loop "  %301 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %300" (1.408358e-06%)
Noelle:  Function "realize_virt_arrays"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %8, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %42 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %39, i64 0, i32 0" (1.621525e-07%)
Noelle:     Loop "  %96 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %95, i64 0, i32 0" (2.556179e-06%)
Noelle:     Loop "  %148 = sub i32 %123, %146" (0.000000e+00%)
Noelle:     Loop "  %198 = add i32 %196, 1" (0.000000e+00%)
Noelle:     Loop "  %213 = add i32 %212, 1" (0.000000e+00%)
Noelle:     Loop "  %243 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %242, i64 0, i32 0" (2.261936e-05%)
Noelle:     Loop "  %298 = sub i32 %271, %296" (2.204545e-05%)
Noelle:     Loop "  %344 = add i32 %342, 1" (8.198722e-08%)
Noelle:     Loop "  %359 = add i32 %358, 1" (2.163916e-05%)
Noelle:  Function "emit_dht"
Noelle:     Loop "  %209 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 0, i64 %208" (5.811983e-06%)
Noelle:     Loop "  %234 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 1, i64 %233" (1.248939e-05%)
Noelle:  Function "rgb_ycc_start"
Noelle:     Loop "  %16 = mul nuw nsw i64 %15, 19595" (1.772199e-05%)
Noelle:  Function "jpeg_start_compress"
Noelle:  Function "jinit_compress_master"
Noelle:  Function "jinit_c_master_control"
Noelle:     Loop "  %114 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %113, i64 0, i32 2" (1.730841e-07%)
Noelle:     Loop "  %165 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %164, i64 0, i32 1" (2.696469e-07%)
Noelle:     Loop "  %236 = bitcast i32* %234 to i8*" (5.283621e-08%)
Noelle:     Loop "  %257 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %255, i64 0, i32 0" (1.176243e-05%)
Noelle:     Loop "  %275 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %255, i64 0, i32 1, i64 %274" (4.263335e-07%)
Noelle:     Loop "  %364 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %255, i64 0, i32 1, i64 %363" (1.033586e-05%)
Noelle:     Loop "  %435 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %366, i64 %434" (0.000000e+00%)
Noelle:     Loop "  %420 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %366, i64 %419" (3.835180e-06%)
Noelle:     Loop "  %397 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %366, i64 %396" (6.026972e-06%)
Noelle:     Loop "  %380 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %366, i64 %379" (0.000000e+00%)
Noelle:     Loop "  %475 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %255, i64 0, i32 1, i64 %474" (0.000000e+00%)
Noelle:     Loop "  %514 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %513, i64 0" (6.923365e-08%)
Noelle:     Loop "  %531 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i64 0, i64 %530" (0.000000e+00%)
Noelle:  Function "parse_switches"
Noelle:     Loop "  %35 = sext i32 %34 to i64" (7.606592e-06%)
Noelle:  Function "write_frame_header"
Noelle:     Loop "  %12 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %9, i64 0, i32 4" (7.930897e-06%)
Noelle:     Loop "  %45 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %42, i64 0, i32 5" (0.000000e+00%)
Noelle:  Function "jpeg_set_linear_quality"
Noelle:     Loop "  %45 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %44" (2.097051e-06%)
Noelle:     Loop "  %29 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %28" (2.097051e-06%)
Noelle:     Loop "  %99 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %98" (2.097051e-06%)
Noelle:     Loop "  %83 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %82" (2.097051e-06%)
Noelle:  Function "emit_dqt"
Noelle:     Loop "  %20 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %5, i64 0, i32 0, i64 %18" (1.918501e-06%)
Noelle:     Loop "  %208 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %207" (5.593350e-06%)
Noelle:     Loop "  %158 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %157" (0.000000e+00%)
Noelle:  Function "keymatch"
Noelle:     Loop "  %10 = getelementptr inbounds i8, i8* %7, i64 1" (5.538692e-06%)
Noelle:  Function "jpeg_set_defaults"
Noelle:  Function "prepare_for_pass"
Noelle:  Function "jpeg_set_quality"
Noelle:  Function "alloc_small"
Noelle:     Loop "  %37 = getelementptr inbounds %union.small_pool_struct, %union.small_pool_struct* %36, i64 0, i32 0, i32 2" (5.301840e-07%)
Noelle:     Loop "  %62 = lshr i64 %61, 1" (0.000000e+00%)
Noelle:  Function "finish_pass_phuff"
Noelle:  Function "alloc_sarray"
Noelle:     Loop "  %30 = sub i32 %3, %28" (1.269891e-06%)
Noelle:     Loop "  %44 = add i32 %42, 1" (1.257137e-07%)
Noelle:     Loop "  %59 = add i32 %58, 1" (3.880728e-07%)
Noelle:  Function "per_scan_setup"
Noelle:     Loop "  %69 = getelementptr inbounds %struct.jpeg_compress_struct.275, %struct.jpeg_compress_struct.275* %0, i64 0, i32 42, i64 %68" (7.870773e-07%)
Noelle:     Loop "  %108 = load i32, i32* %61, align 8, !tbaa !51" (7.287753e-08%)
Noelle:     Loop "  %118 = load i32, i32* %61, align 8, !tbaa !51" (1.020285e-07%)
Noelle:  Function "start_pass_coef"
Noelle:  Function "select_scan_parameters"
Noelle:     Loop "  %33 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %88 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %87" (2.623591e-07%)
Noelle:     Loop "  %144 = add <2 x i64> %142, <i64 2, i64 2>" (0.000000e+00%)
Noelle:     Loop "  %181 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %129, i64 %180" (0.000000e+00%)
Noelle:  Function "finish_pass_master"
Noelle:  Function "flush_bits"
Noelle:     Loop "  %24 = lshr i64 %22, 16" (3.771412e-07%)
Noelle:  Function "start_pass_fdctmgr"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %17, i64 0, i32 4" (8.872839e-07%)
Noelle:     Loop "  %217 = shl i64 %216, 3" (0.000000e+00%)
Noelle:     Loop "  %176 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %36, i64 0, i32 0, i64 %175" (0.000000e+00%)
Noelle:  Function "free_pool"
Noelle:     Loop "  %22 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %21, i64 0, i32 10" (0.000000e+00%)
Noelle:     Loop "  %37 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %36, i64 0, i32 10" (5.830202e-08%)
Noelle:     Loop "  %58 = bitcast %union.large_pool_struct* %57 to i8*" (2.951540e-07%)
Noelle:     Loop "  %78 = bitcast %union.small_pool_struct* %77 to i8*" (1.949474e-07%)
Noelle:  Function "emit_sof"
Noelle:     Loop "  %263 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %261, i64 0, i32 0" (3.261269e-07%)
Noelle:  Function "start_input_ppm"
Noelle:     Loop "  %184 = load i8*, i8** %171, align 8, !tbaa !67" (0.000000e+00%)
Noelle:  Function "self_destruct"
Noelle:  Function "write_file_header"
Noelle:  Function "alloc_large"
Noelle:  Function "request_virt_barray"
Noelle:  Function "read_pbm_integer"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (9.109691e-08%)
Noelle:     Loop "  %6 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:     Loop "  %34 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (2.459617e-07%)
Noelle:     Loop "  %36 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:  Function "jinit_c_coef_controller"
Noelle:     Loop "  %25 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (2.149887e-07%)
Noelle:  Function "jinit_downsampler"
Noelle:     Loop "  %42 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %41, i64 0, i32 2" (1.592289e+00%)
Noelle:  Function "jpeg_simple_progression"
Noelle:     Loop "  %198 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %196, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %228 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %226, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %136 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %39, i64 0, i32 1, i64 %133" (0.000000e+00%)
Noelle:     Loop "  %172 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %39, i64 0, i32 1, i64 %169" (0.000000e+00%)
Noelle:     Loop "  %186 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %39, i64 0, i32 1, i64 %185" (0.000000e+00%)
Noelle:     Loop "  %249 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %247, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %279 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %277, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %294 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %292, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %323 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %321, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %338 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %336, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %367 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %365, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %461 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %459, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %491 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %489, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %400 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %375, i64 0, i32 1, i64 %397" (0.000000e+00%)
Noelle:     Loop "  %436 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %375, i64 0, i32 1, i64 %433" (0.000000e+00%)
Noelle:     Loop "  %450 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %375, i64 0, i32 1, i64 %449" (0.000000e+00%)
Noelle:     Loop "  %510 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %508, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %539 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %537, i64 0, i32 0" (0.000000e+00%)
Noelle:  Function "jinit_c_prep_controller"
Noelle:     Loop "  %84 = mul i64 %62, %81" (0.000000e+00%)
Noelle:     Loop "  %141 = add nsw i64 %139, %60" (0.000000e+00%)
Noelle:     Loop "  %235 = add nsw i64 %234, %60" (0.000000e+00%)
Noelle:     Loop "  %283 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (1.512209e-07%)
Noelle:  Function "jpeg_default_colorspace"
Noelle:     Loop "  %214 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %210, i64 %213, i32 0" (0.000000e+00%)
Noelle:  Function "jpeg_CreateCompress"
Noelle:  Function "jinit_c_main_controller"
Noelle:     Loop "  %35 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (1.129602e-07%)
Noelle:  Function "jpeg_suppress_tables"
Noelle:  Function "jdiv_round_up"
Noelle:  Function "jinit_memory_mgr"
Noelle:  Function "jinit_color_converter"
Noelle:  Function "jpeg_alloc_huff_table"
Noelle:  Function "jround_up"
Noelle:  Function "jinit_forward_dct"
Noelle:  Function "write_file_trailer"
Noelle:  Function "jpeg_std_error"
Noelle:  Function "jpeg_stdio_dest"
Noelle:  Function "term_destination"
Noelle:  Function "jinit_marker_writer"
Noelle:  Function "start_pass_main"
Noelle:  Function "jpeg_alloc_quant_table"
Noelle:  Function "start_pass_prep"
Noelle:  Function "jpeg_free_large"
Noelle:  Function "jpeg_get_large"
Noelle:  Function "jinit_phuff_encoder"
Noelle:  Function "jpeg_destroy_compress"
Noelle:  Function "init_destination"
Noelle:  Function "jpeg_get_small"
Noelle:  Function "jpeg_free_small"
Noelle:  Function "jpeg_destroy"
Noelle:  Function "jinit_read_ppm"
Noelle:  Function "jpeg_abort"
Noelle:  Function "emit_message"
Noelle:  Function "reset_error_mgr"
Noelle:  Function "finish_input_ppm"
Noelle:  Function "start_pass_downsample"
Noelle:  Function "jpeg_mem_available"
Noelle:  Function "jpeg_fdct_float"
Noelle:  Function "jpeg_mem_term"
Noelle:  Function "access_virt_sarray"
Noelle:     Loop "  %84 = mul nsw i64 %81, %50" (0.000000e+00%)
Noelle:     Loop "  %166 = mul nsw i64 %163, %134" (0.000000e+00%)
Noelle:     Loop "  %231 = load i8**, i8*** %227, align 8, !tbaa !38" (0.000000e+00%)
Noelle:  Function "jpeg_mem_init"
Noelle:  Function "jpeg_write_raw_data"
Noelle:  Function "jpeg_open_backing_store"
Noelle:  Function "jpeg_add_quant_table"
Noelle:     Loop "  %32 = getelementptr inbounds i32, i32* %2, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %48 = getelementptr inbounds i32, i32* %2, i64 %47" (0.000000e+00%)
Noelle:  Function "jpeg_quality_scaling"
Noelle:  Function "pass_startup"
Noelle:  Function "format_message"
Noelle:     Loop "  %45 = getelementptr inbounds i8, i8* %44, i64 1" (0.000000e+00%)
Noelle:  Function "jzero_far"
Noelle:  Function "output_message"
Noelle:  Function "request_virt_sarray"
Noelle:  Function "forward_DCT_float"
Noelle:     Loop "  %29 = zext i32 %28 to i64" (0.000000e+00%)
Noelle:     Loop "  %33 = getelementptr inbounds i8*, i8** %21, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %88 = getelementptr inbounds [64 x float], [64 x float]* %8, i64 0, i64 %87" (0.000000e+00%)
Noelle:  Function "null_convert"
Noelle:     Loop "  %26 = add nsw i32 %23, -1" (0.000000e+00%)
Noelle:     Loop "  %48 = getelementptr inbounds i8**, i8*** %2, i64 %47" (0.000000e+00%)
Noelle:     Loop "  %56 = getelementptr inbounds i8, i8* %54, i64 %47" (0.000000e+00%)
Noelle:     Loop "  %81 = getelementptr inbounds i8, i8* %79, i64 %47" (0.000000e+00%)
Noelle:     Loop "  %30 = getelementptr inbounds i8**, i8*** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %37 = getelementptr inbounds i8, i8* %35, i64 %29" (0.000000e+00%)
Noelle:  Function "jpeg_set_colorspace"
Noelle:     Loop "  %133 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %129, i64 %132, i32 0" (0.000000e+00%)
Noelle:  Function "jpeg_fdct_ifast"
Noelle:     Loop "  %5 = load i32, i32* %4, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "error_exit"
Noelle:  Function "pre_process_context"
Noelle:     Loop "  %28 = load i32, i32* %2, align 4, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %94 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %93" (0.000000e+00%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %95, i32 %99, i8** %95, i32 %101, i32 1, i32 %96) #20" (0.000000e+00%)
Noelle:     Loop "  %54 = icmp slt i32 %52, 1" (0.000000e+00%)
Noelle:     Loop "  %59 = load i8**, i8*** %56, align 8, !tbaa !50" (0.000000e+00%)
Noelle:  Function "alloc_barray"
Noelle:     Loop "  %32 = sub i32 %3, %30" (0.000000e+00%)
Noelle:     Loop "  %47 = add i32 %45, 1" (0.000000e+00%)
Noelle:     Loop "  %62 = add i32 %61, 1" (0.000000e+00%)
Noelle:  Function "jcopy_block_row"
Noelle:  Function "get_text_rgb_row"
Noelle:     Loop "  %18 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "get_word_gray_row"
Noelle:     Loop "  %56 = getelementptr inbounds i8, i8* %55, i64 1" (0.000000e+00%)
Noelle:  Function "load_interlaced_image"
Noelle:     Loop "  %49 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %16, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %62 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:     Loop "  store i64 %21, i64* %12, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %38 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "get_scaled_gray_row"
Noelle:     Loop "  %39 = getelementptr inbounds i8, i8* %37, i64 1" (0.000000e+00%)
Noelle:     Loop "  %55 = getelementptr inbounds i8, i8* %54, i64 1" (0.000000e+00%)
Noelle:  Function "get_word_rgb_row"
Noelle:     Loop "  %37 = getelementptr inbounds i8, i8* %36, i64 1" (0.000000e+00%)
Noelle:  Function "get_scaled_rgb_row"
Noelle:     Loop "  %63 = getelementptr inbounds i8, i8* %62, i64 1" (0.000000e+00%)
Noelle:  Function "get_text_gray_row"
Noelle:     Loop "  %18 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "jinit_read_gif"
Noelle:  Function "cmyk_ycck_convert"
Noelle:     Loop "  %28 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %45 = load i8, i8* %44, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "fullsize_smooth_downsample"
Noelle:     Loop "  %33 = getelementptr inbounds i8*, i8** %8, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %8, i64 %60" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds i8*, i8** %3, i64 %83" (0.000000e+00%)
Noelle:     Loop "  %134 = getelementptr inbounds i8, i8* %133, i64 1" (0.000000e+00%)
Noelle:  Function "h2v1_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %2, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %2, i64 %60" (0.000000e+00%)
Noelle:     Loop "  %77 = getelementptr inbounds i8*, i8** %2, i64 %76" (0.000000e+00%)
Noelle:     Loop "  %85 = load i8, i8* %83, align 1, !tbaa !42" (0.000000e+00%)
Noelle:  Function "h2v2_smooth_downsample"
Noelle:     Loop "  %34 = getelementptr inbounds i8*, i8** %8, i64 %32" (0.000000e+00%)
Noelle:     Loop "  %63 = getelementptr inbounds i8*, i8** %8, i64 %61" (0.000000e+00%)
Noelle:     Loop "  %86 = getelementptr inbounds i8*, i8** %3, i64 %84" (0.000000e+00%)
Noelle:     Loop "  %161 = getelementptr inbounds i8, i8* %160, i64 1" (0.000000e+00%)
Noelle:  Function "int_downsample"
Noelle:     Loop "  %42 = getelementptr inbounds i8*, i8** %2, i64 %40" (0.000000e+00%)
Noelle:     Loop "  %72 = getelementptr inbounds i8*, i8** %2, i64 %70" (0.000000e+00%)
Noelle:     Loop "  br i1 %85, label %._crit_edge36, label %110" (0.000000e+00%)
Noelle:     Loop "  br i1 %86, label %117, label %..loopexit2_crit_edge" (0.000000e+00%)
Noelle:     Loop "  %122 = add nsw i64 %120, %109" (0.000000e+00%)
Noelle:     Loop "  %133 = getelementptr i8, i8* %125, i64 %129" (0.000000e+00%)
Noelle:     Loop "  %188 = getelementptr inbounds i8, i8* %186, i64 1" (0.000000e+00%)
Noelle:  Function "jinit_huff_encoder"
Noelle:  Function "start_pass_huff"
Noelle:     Loop "  %81 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %80" (1.821938e-09%)
Noelle:     Loop "  %20 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %19" (0.000000e+00%)
Noelle:  Function "jinit_read_targa"
Noelle:  Function "usage"
Noelle:  Function "start_input_gif"
Noelle:     Loop "  %106 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %158 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %208 = icmp sgt i32 %207, 0" (0.000000e+00%)
Noelle:     Loop "  %277 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:  Function "finish_input_gif"
Noelle:  Function "get_pixel_rows"
Noelle:     Loop "  %19 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "LZWReadByte"
Noelle:     Loop "  %146 = load i8*, i8** %142, align 8, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp sgt i32 %84, 0" (0.000000e+00%)
Noelle:     Loop "  %41 = tail call fastcc i32 @GetCode(%struct.gif_source_struct* nonnull %0)" (0.000000e+00%)
Noelle:  Function "GetCode"
Noelle:     Loop "  %19 = load i32, i32* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "get_interlaced_row"
Noelle:     Loop "  %76 = getelementptr inbounds i8, i8* %73, i64 1" (0.000000e+00%)
Noelle:  Function "encode_mcu_gather"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.huff_entropy_encoder, %struct.huff_entropy_encoder* %5, i64 0, i32 1, i32 2, i64 %17" (0.000000e+00%)
Noelle:     Loop "  %35 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %34" (0.000000e+00%)
Noelle:     Loop "  %75 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %73" (0.000000e+00%)
Noelle:  Function "start_input_tga"
Noelle:     Loop "  %224 = add nsw i32 %223, -1" (0.000000e+00%)
Noelle:     Loop "  %288 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "finish_pass_gather"
Noelle:     Loop "  %16 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %15" (1.457551e-08%)
Noelle:  Function "finish_pass_huff"
Noelle:     Loop "  %31 = lshr i64 %30, 16" (0.000000e+00%)
Noelle:  Function "emit_restart"
Noelle:     Loop "  %79 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 7, i64 %78" (0.000000e+00%)
Noelle:  Function "read_stdin"
Noelle:  Function "read_text_integer"
Noelle:     Loop "  %5 = tail call fastcc i32 @text_getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:     Loop "  %25 = load i16*, i16** %.lcssa17, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "text_getc"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:  Function "read_scan_script"
Noelle:     Loop "  %24 = icmp eq i32 %23, 100" (0.000000e+00%)
Noelle:     Loop "  %37 = icmp eq i64 %36, 4" (0.000000e+00%)
Noelle:  Function "read_scan_integer"
Noelle:     Loop "  %11 = load i16*, i16** %9, align 8, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %20 = tail call i32 @getc(%struct._IO_FILE* %0) #21" (0.000000e+00%)
Noelle:  Function "set_quant_slots"
Noelle:     Loop "  %10 = load i8, i8* %9, align 1, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %30, align 1, !tbaa !34" (0.000000e+00%)
Noelle:  Function "set_sample_factors"
Noelle:     Loop "  %13 = load i8, i8* %12, align 1, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %42 = load i8, i8* %41, align 1, !tbaa !30" (0.000000e+00%)
Noelle:  Function "read_quant_tables"
Noelle:     Loop "  %25 = icmp eq i32 %24, 4" (0.000000e+00%)
Noelle:     Loop "  %36 = call fastcc i32 @read_text_integer(%struct._IO_FILE* nonnull %12, i64* nonnull %6, i32* nonnull %5)" (0.000000e+00%)
Noelle:  Function "compress_data"
Noelle:     Loop "  %29 = icmp ugt i32 %27, %8" (0.000000e+00%)
Noelle:     Loop "  %34 = load i32, i32* %19, align 4, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %42 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %40" (0.000000e+00%)
Noelle:     Loop "  %64 = load i32, i32* %20, align 8, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %152 = load i16, i16* %142, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %182 = load i16, i16* %142, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %111 = add i64 %110, %75" (0.000000e+00%)
Noelle:  Function "null_method"
Noelle:  Function "grayscale_convert"
Noelle:     Loop "  %57 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %65 = load i8, i8* %63, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %47 = load i8, i8* %45, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %23 = add nsw i32 %20, -1" (0.000000e+00%)
Noelle:     Loop "  %33 = load i8, i8* %31, align 1, !tbaa !40" (0.000000e+00%)
Noelle:  Function "rgb_gray_convert"
Noelle:     Loop "  %25 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %33 = load i8, i8* %32, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "write_stdout"
Noelle:  Function "jpeg_abort_compress"
Noelle:  Function "jpeg_write_marker"
Noelle:  Function "get_memory_row"
Noelle:  Function "encode_mcu_huff"
Noelle:     Loop "  %49 = lshr i64 %48, 16" (0.000000e+00%)
Noelle:     Loop "  %144 = getelementptr inbounds %struct.working_state, %struct.working_state* %3, i64 0, i32 2, i32 2, i64 %143" (0.000000e+00%)
Noelle:     Loop "  %161 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %160" (0.000000e+00%)
Noelle:     Loop "  %226 = lshr i64 %225, 16" (0.000000e+00%)
Noelle:     Loop "  %289 = lshr i64 %288, 16" (0.000000e+00%)
Noelle:     Loop "  %350 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %348" (0.000000e+00%)
Noelle:     Loop "  %365 = load i32, i32* %342, align 4, !tbaa !49" (0.000000e+00%)
Noelle:     Loop "  %391 = lshr i64 %390, 16" (0.000000e+00%)
Noelle:     Loop "  %486 = lshr i64 %485, 16" (0.000000e+00%)
Noelle:     Loop "  %548 = lshr i64 %547, 16" (0.000000e+00%)
Noelle:     Loop "  %635 = lshr i64 %634, 16" (0.000000e+00%)
Noelle:  Function "finish_input_tga"
Noelle:  Function "read_rle_pixel"
Noelle:     Loop "  %38 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "read_non_rle_pixel"
Noelle:     Loop "  %8 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "get_8bit_row"
Noelle:     Loop "  %23 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %15, align 8, !tbaa !43" (0.000000e+00%)
Noelle:  Function "get_16bit_row"
Noelle:     Loop "  %20 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_24bit_row"
Noelle:     Loop "  %21 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_8bit_gray_row"
Noelle:     Loop "  %18 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "preload_image"
Noelle:     Loop "  %39 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  store i64 %21, i64* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "jpeg_write_tables"
Noelle:  Function "jinit_read_bmp"
Noelle:  Function "start_input_bmp"
Noelle:     Loop "  %480 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %426 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %576 = add nsw i64 %575, -1" (0.000000e+00%)
Noelle:  Function "finish_input_bmp"
Noelle:  Function "preload_image.9"
Noelle:     Loop "  %59 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %18, align 8, !tbaa !48" (0.000000e+00%)
Noelle:     Loop "  %72 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:     Loop "  store i64 %24, i64* %14, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %41 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "write_any_marker"
Noelle:     Loop "  %104 = add i32 %102, -1" (0.000000e+00%)
Noelle:  Function "write_tables_only"
Noelle:  Function "get_8bit_row.10"
Noelle:     Loop "  %56 = getelementptr inbounds i8, i8* %55, i64 1" (0.000000e+00%)
Noelle:  Function "get_24bit_row.11"
Noelle:     Loop "  %45 = getelementptr inbounds i8, i8* %44, i64 1" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %117 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %114, align 8, !tbaa !56" (3.130122e+01%)
Noelle:  Function "encode_mcu_AC_refine"
Noelle:     Loop "  %42 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %40" (1.370230e+01%)
Noelle:     Loop "  %76 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %72" (1.472957e+01%)
Noelle:     Loop "  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %6)" (2.227506e-02%)
Noelle:     Loop "  %133 = lshr i64 %131, 16" (7.578115e-04%)
Noelle:     Loop "  %209 = icmp eq i32 %206, 0" (7.618318e-03%)
Noelle:     Loop "  %222 = lshr i64 %220, 16" (6.241086e-04%)
Noelle:     Loop "  %357 = lshr i64 %355, 16" (3.896084e-02%)
Noelle:     Loop "  %438 = lshr i64 %436, 16" (1.224248e-02%)
Noelle:     Loop "  %514 = icmp eq i32 %511, 0" (4.770002e-01%)
Noelle:     Loop "  %527 = lshr i64 %525, 16" (3.925195e-02%)
Noelle:  Function "encode_mcu_AC_first"
Noelle:     Loop "  %44 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %42" (1.096962e+01%)
Noelle:     Loop "  %78 = load i32, i32* %34, align 8, !tbaa !61" (2.034564e-03%)
Noelle:     Loop "  %123 = lshr i64 %121, 16" (6.288146e-04%)
Noelle:     Loop "  %192 = ashr i32 %191, 1" (4.813965e-01%)
Noelle:     Loop "  %246 = lshr i64 %244, 16" (2.176119e-01%)
Noelle:     Loop "  %324 = lshr i64 %322, 16" (1.046508e-01%)
Noelle:  Function "rgb_ycc_convert"
Noelle:     Loop "  %27 = load i8**, i8*** %2, align 8, !tbaa !45" (9.008486e+00%)
Noelle:     Loop "  %41 = load i8, i8* %40, align 1, !tbaa !46" (9.008230e+00%)
Noelle:  Function "forward_DCT"
Noelle:     Loop "  %29 = zext i32 %28 to i64" (5.690853e+00%)
Noelle:     Loop "  %33 = getelementptr inbounds i8*, i8** %21, i64 %31" (1.389923e+00%)
Noelle:     Loop "  %80 = getelementptr inbounds i32, i32* %18, i64 %79" (4.266730e+00%)
Noelle:  Function "jpeg_fdct_islow"
Noelle:     Loop "  %5 = load i32, i32* %4, align 4, !tbaa !30" (2.470067e+00%)
Noelle:     Loop "  %96 = load i32, i32* %95, align 4, !tbaa !30" (2.519041e+00%)
Noelle:  Function "compress_output"
Noelle:     Loop "  %17 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %16" (4.668188e-04%)
Noelle:     Loop "  %56 = icmp ult i32 %54, %53" (2.086791e+00%)
Noelle:     Loop "  %58 = load i32, i32* %8, align 4, !tbaa !39" (2.086416e+00%)
Noelle:     Loop "  %65 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %63" (1.685319e+00%)
Noelle:     Loop "  %89 = add nsw i64 %87, %55" (8.442142e-01%)
Noelle:     Loop "  %97 = add i64 %96, %93" (0.000000e+00%)
Noelle:     Loop "  %126 = getelementptr inbounds [64 x i16], [64 x i16]* %124, i64 1" (3.036891e-01%)
Noelle:  Function "emit_eobrun"
Noelle:     Loop "  %7 = ashr i32 %5, 1" (7.500310e-02%)
Noelle:     Loop "  %70 = lshr i64 %68, 16" (4.004850e-02%)
Noelle:     Loop "  %163 = lshr i64 %161, 16" (4.102032e-03%)
Noelle:     Loop "  %246 = icmp eq i32 %243, 0" (1.172745e+00%)
Noelle:     Loop "  %261 = lshr i64 %259, 16" (1.025474e-01%)
Noelle:  Function "h2v2_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %2, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %2, i64 %60" (3.211166e-04%)
Noelle:     Loop "  %78 = or i64 %77, 1" (1.590876e+00%)
Noelle:     Loop "  %90 = load i8, i8* %88, align 1, !tbaa !44" (1.590670e+00%)
Noelle:  Function "encode_mcu_DC_first"
Noelle:     Loop "  %36 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %35" (4.880481e-01%)
Noelle:     Loop "  %109 = lshr i64 %107, 16" (2.117463e-02%)
Noelle:     Loop "  %193 = lshr i64 %191, 16" (2.132461e-02%)
Noelle:  Function "encode_mcu_DC_refine"
Noelle:     Loop "  %38 = load i32, i32* %31, align 8, !tbaa !50" (1.246450e-01%)
Noelle:     Loop "  %59 = lshr i64 %57, 16" (8.559006e-03%)
Noelle:  Function "compress_first_pass"
Noelle:     Loop "  %22 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (1.768191e-04%)
Noelle:     Loop "  %121 = getelementptr inbounds [64 x i16]*, [64 x i16]** %31, i64 %120" (4.258416e-05%)
Noelle:     Loop "  %69 = getelementptr inbounds [64 x i16]*, [64 x i16]** %31, i64 %68" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds [64 x i16], [64 x i16]* %77, i64 %82" (0.000000e+00%)
Noelle:     Loop "  %113 = getelementptr inbounds [64 x i16], [64 x i16]* %77, i64 %111" (0.000000e+00%)
Noelle:     Loop "  %165 = getelementptr inbounds [64 x i16]*, [64 x i16]** %31, i64 %164" (0.000000e+00%)
Noelle:     Loop "  %174 = getelementptr inbounds [64 x i16], [64 x i16]* %171, i64 %146, i64 0" (0.000000e+00%)
Noelle:     Loop "  %178 = getelementptr inbounds [64 x i16], [64 x i16]* %172, i64 %176, i64 0" (0.000000e+00%)
Noelle:     Loop "  %191 = getelementptr inbounds [64 x i16], [64 x i16]* %172, i64 %189, i64 0" (0.000000e+00%)
Noelle:     Loop "  %157 = getelementptr inbounds [64 x i16]*, [64 x i16]** %31, i64 %156" (0.000000e+00%)
Noelle:  Function "finish_pass_gather_phuff"
Noelle:     Loop "  %50 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %49" (5.741293e-03%)
Noelle:     Loop "  %20 = load i32, i32* %14, align 4, !tbaa !43" (1.435376e-03%)
Noelle:  Function "jpeg_gen_optimal_table"
Noelle:     Loop "  %17 = getelementptr inbounds i64, i64* %2, i64 %14" (5.537335e-03%)
Noelle:     Loop "  %34 = getelementptr inbounds i64, i64* %2, i64 %31" (2.315319e-03%)
Noelle:     Loop "  %66 = sext i32 %65 to i64" (3.020774e-05%)
Noelle:     Loop "  %83 = sext i32 %82 to i64" (2.979051e-05%)
Noelle:     Loop "  %92 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %91" (5.195075e-05%)
Noelle:     Loop "  %112 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %110" (1.125776e-05%)
Noelle:     Loop "  br label %120" (7.704977e-06%)
Noelle:     Loop "  %122 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %121" (2.168106e-06%)
Noelle:     Loop "  %143 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %142" (3.516341e-07%)
Noelle:     Loop "  br label %153" (1.574641e-03%)
Noelle:     Loop "  %157 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %154" (1.569995e-03%)
Noelle:  Function "access_virt_barray"
Noelle:     Loop "  %85 = mul nsw i64 %82, %51" (0.000000e+00%)
Noelle:     Loop "  %169 = mul nsw i64 %166, %137" (0.000000e+00%)
Noelle:     Loop "  %236 = load [64 x i16]**, [64 x i16]*** %232, align 8, !tbaa !40" (0.000000e+00%)
Noelle:  Function "pre_process_data"
Noelle:     Loop "  %24 = load i32, i32* %5, align 4, !tbaa !39" (5.846873e-04%)
Noelle:     Loop "  %55 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %54" (3.188392e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %56, i32 %60, i8** %56, i32 %62, i32 1, i32 %57) #20" (2.095229e-07%)
Noelle:     Loop "  %105 = getelementptr inbounds i8**, i8*** %4, i64 %103" (9.911344e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %106, i32 %116, i8** %106, i32 %118, i32 1, i32 %109) #20" (8.490232e-07%)
Noelle:  Function "fullsize_downsample"
Noelle:     Loop "  %33 = getelementptr inbounds i8*, i8** %3, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %63 = getelementptr inbounds i8*, i8** %3, i64 %61" (1.605583e-04%)
Noelle:  Function "jpeg_write_scanlines"
Noelle:  Function "sep_downsample"
Noelle:     Loop "  %19 = getelementptr inbounds i8**, i8*** %1, i64 %17" (4.174516e-04%)
Noelle:  Function "process_data_simple_main"
Noelle:     Loop "  %22 = icmp ult i32 %21, 8" (1.781947e-04%)
Noelle:  Function "jpeg_finish_compress"
Noelle:     Loop "  %47 = getelementptr inbounds %struct.jpeg_comp_master, %struct.jpeg_comp_master* %46, i64 0, i32 0" (2.753768e-04%)
Noelle:     Loop "  %53 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %41, align 8, !tbaa !57" (2.747556e-04%)
Noelle:  Function "jcopy_sample_rows"
Noelle:     Loop "  %30 = getelementptr inbounds i8*, i8** %28, i64 1" (1.027573e-04%)
Noelle:  Function "get_raw_row"
Noelle:  Function "empty_output_buffer"
Noelle:  Function "start_pass_phuff"
Noelle:     Loop "  %95 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %94" (2.763698e-05%)
Noelle:     Loop "  %47 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %46" (1.049254e-05%)
Noelle:  Function "jpeg_make_c_derived_tbl"
Noelle:     Loop "  %25 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %1, i64 0, i32 0, i64 %22" (1.162032e-05%)
Noelle:     Loop "  %52 = add nsw <2 x i64> %49, <i64 8, i64 8>" (0.000000e+00%)
Noelle:     Loop "  %64 = add nsw <2 x i64> %61, <i64 1, i64 1>" (6.085274e-07%)
Noelle:     Loop "  %102 = sext i8 %98 to i32" (1.359348e-05%)
Noelle:     Loop "  %109 = add nsw i64 %107, 1" (7.413467e-06%)
Noelle:     Loop "  %152 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 %150" (1.026298e-05%)
Noelle:  Function "write_scan_header"
Noelle:     Loop "  %15 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %14" (2.171022e-05%)
Noelle:     Loop "  %301 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %300" (1.408358e-06%)
Noelle:  Function "realize_virt_arrays"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %8, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %42 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %39, i64 0, i32 0" (1.621525e-07%)
Noelle:     Loop "  %96 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %95, i64 0, i32 0" (2.556179e-06%)
Noelle:     Loop "  %148 = sub i32 %123, %146" (0.000000e+00%)
Noelle:     Loop "  %198 = add i32 %196, 1" (0.000000e+00%)
Noelle:     Loop "  %213 = add i32 %212, 1" (0.000000e+00%)
Noelle:     Loop "  %243 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %242, i64 0, i32 0" (2.261936e-05%)
Noelle:     Loop "  %298 = sub i32 %271, %296" (2.204545e-05%)
Noelle:     Loop "  %344 = add i32 %342, 1" (8.198722e-08%)
Noelle:     Loop "  %359 = add i32 %358, 1" (2.163916e-05%)
Noelle:  Function "emit_dht"
Noelle:     Loop "  %209 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 0, i64 %208" (5.811983e-06%)
Noelle:     Loop "  %234 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 1, i64 %233" (1.248939e-05%)
Noelle:  Function "rgb_ycc_start"
Noelle:     Loop "  %16 = mul nuw nsw i64 %15, 19595" (1.772199e-05%)
Noelle:  Function "jpeg_start_compress"
Noelle:  Function "jinit_compress_master"
Noelle:  Function "jinit_c_master_control"
Noelle:     Loop "  %114 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %113, i64 0, i32 2" (1.730841e-07%)
Noelle:     Loop "  %165 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %164, i64 0, i32 1" (2.696469e-07%)
Noelle:     Loop "  %236 = bitcast i32* %234 to i8*" (5.283621e-08%)
Noelle:     Loop "  %257 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %255, i64 0, i32 0" (1.176243e-05%)
Noelle:     Loop "  %275 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %255, i64 0, i32 1, i64 %274" (4.263335e-07%)
Noelle:     Loop "  %364 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %255, i64 0, i32 1, i64 %363" (1.033586e-05%)
Noelle:     Loop "  %435 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %366, i64 %434" (0.000000e+00%)
Noelle:     Loop "  %420 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %366, i64 %419" (3.835180e-06%)
Noelle:     Loop "  %397 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %366, i64 %396" (6.026972e-06%)
Noelle:     Loop "  %380 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %366, i64 %379" (0.000000e+00%)
Noelle:     Loop "  %475 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %255, i64 0, i32 1, i64 %474" (0.000000e+00%)
Noelle:     Loop "  %514 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %513, i64 0" (6.923365e-08%)
Noelle:     Loop "  %531 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i64 0, i64 %530" (0.000000e+00%)
Noelle:  Function "parse_switches"
Noelle:     Loop "  %35 = sext i32 %34 to i64" (7.606592e-06%)
Noelle:  Function "write_frame_header"
Noelle:     Loop "  %12 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %9, i64 0, i32 4" (7.930897e-06%)
Noelle:     Loop "  %45 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %42, i64 0, i32 5" (0.000000e+00%)
Noelle:  Function "jpeg_set_linear_quality"
Noelle:     Loop "  %45 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %44" (2.097051e-06%)
Noelle:     Loop "  %29 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %28" (2.097051e-06%)
Noelle:     Loop "  %99 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %98" (2.097051e-06%)
Noelle:     Loop "  %83 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %82" (2.097051e-06%)
Noelle:  Function "emit_dqt"
Noelle:     Loop "  %20 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %5, i64 0, i32 0, i64 %18" (1.918501e-06%)
Noelle:     Loop "  %208 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %207" (5.593350e-06%)
Noelle:     Loop "  %158 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %157" (0.000000e+00%)
Noelle:  Function "keymatch"
Noelle:     Loop "  %10 = getelementptr inbounds i8, i8* %7, i64 1" (5.538692e-06%)
Noelle:  Function "jpeg_set_defaults"
Noelle:  Function "prepare_for_pass"
Noelle:  Function "jpeg_set_quality"
Noelle:  Function "alloc_small"
Noelle:     Loop "  %37 = getelementptr inbounds %union.small_pool_struct, %union.small_pool_struct* %36, i64 0, i32 0, i32 2" (5.301840e-07%)
Noelle:     Loop "  %62 = lshr i64 %61, 1" (0.000000e+00%)
Noelle:  Function "finish_pass_phuff"
Noelle:  Function "alloc_sarray"
Noelle:     Loop "  %30 = sub i32 %3, %28" (1.269891e-06%)
Noelle:     Loop "  %44 = add i32 %42, 1" (1.257137e-07%)
Noelle:     Loop "  %59 = add i32 %58, 1" (3.880728e-07%)
Noelle:  Function "per_scan_setup"
Noelle:     Loop "  %69 = getelementptr inbounds %struct.jpeg_compress_struct.275, %struct.jpeg_compress_struct.275* %0, i64 0, i32 42, i64 %68" (7.870773e-07%)
Noelle:     Loop "  %108 = load i32, i32* %61, align 8, !tbaa !51" (7.287753e-08%)
Noelle:     Loop "  %118 = load i32, i32* %61, align 8, !tbaa !51" (1.020285e-07%)
Noelle:  Function "start_pass_coef"
Noelle:  Function "select_scan_parameters"
Noelle:     Loop "  %33 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %88 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %87" (2.623591e-07%)
Noelle:     Loop "  %144 = add <2 x i64> %142, <i64 2, i64 2>" (0.000000e+00%)
Noelle:     Loop "  %181 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %129, i64 %180" (0.000000e+00%)
Noelle:  Function "finish_pass_master"
Noelle:  Function "flush_bits"
Noelle:     Loop "  %24 = lshr i64 %22, 16" (3.771412e-07%)
Noelle:  Function "start_pass_fdctmgr"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %17, i64 0, i32 4" (8.872839e-07%)
Noelle:     Loop "  %217 = shl i64 %216, 3" (0.000000e+00%)
Noelle:     Loop "  %176 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %36, i64 0, i32 0, i64 %175" (0.000000e+00%)
Noelle:  Function "free_pool"
Noelle:     Loop "  %22 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %21, i64 0, i32 10" (0.000000e+00%)
Noelle:     Loop "  %37 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %36, i64 0, i32 10" (5.830202e-08%)
Noelle:     Loop "  %58 = bitcast %union.large_pool_struct* %57 to i8*" (2.951540e-07%)
Noelle:     Loop "  %78 = bitcast %union.small_pool_struct* %77 to i8*" (1.949474e-07%)
Noelle:  Function "emit_sof"
Noelle:     Loop "  %263 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %261, i64 0, i32 0" (3.261269e-07%)
Noelle:  Function "start_input_ppm"
Noelle:     Loop "  %184 = load i8*, i8** %171, align 8, !tbaa !67" (0.000000e+00%)
Noelle:  Function "self_destruct"
Noelle:  Function "write_file_header"
Noelle:  Function "alloc_large"
Noelle:  Function "request_virt_barray"
Noelle:  Function "read_pbm_integer"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (9.109691e-08%)
Noelle:     Loop "  %6 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:     Loop "  %34 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (2.459617e-07%)
Noelle:     Loop "  %36 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:  Function "jinit_c_coef_controller"
Noelle:     Loop "  %25 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (2.149887e-07%)
Noelle:  Function "jinit_downsampler"
Noelle:     Loop "  %42 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %41, i64 0, i32 2" (1.592289e+00%)
Noelle:  Function "jpeg_simple_progression"
Noelle:     Loop "  %198 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %196, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %228 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %226, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %136 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %39, i64 0, i32 1, i64 %133" (0.000000e+00%)
Noelle:     Loop "  %172 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %39, i64 0, i32 1, i64 %169" (0.000000e+00%)
Noelle:     Loop "  %186 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %39, i64 0, i32 1, i64 %185" (0.000000e+00%)
Noelle:     Loop "  %249 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %247, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %279 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %277, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %294 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %292, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %323 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %321, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %338 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %336, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %367 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %365, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %461 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %459, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %491 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %489, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %400 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %375, i64 0, i32 1, i64 %397" (0.000000e+00%)
Noelle:     Loop "  %436 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %375, i64 0, i32 1, i64 %433" (0.000000e+00%)
Noelle:     Loop "  %450 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %375, i64 0, i32 1, i64 %449" (0.000000e+00%)
Noelle:     Loop "  %510 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %508, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %539 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %537, i64 0, i32 0" (0.000000e+00%)
Noelle:  Function "jinit_c_prep_controller"
Noelle:     Loop "  %84 = mul i64 %62, %81" (0.000000e+00%)
Noelle:     Loop "  %141 = add nsw i64 %139, %60" (0.000000e+00%)
Noelle:     Loop "  %235 = add nsw i64 %234, %60" (0.000000e+00%)
Noelle:     Loop "  %283 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (1.512209e-07%)
Noelle:  Function "jpeg_default_colorspace"
Noelle:     Loop "  %214 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %210, i64 %213, i32 0" (0.000000e+00%)
Noelle:  Function "jpeg_CreateCompress"
Noelle:  Function "jinit_c_main_controller"
Noelle:     Loop "  %35 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (1.129602e-07%)
Noelle:  Function "jpeg_suppress_tables"
Noelle:  Function "jdiv_round_up"
Noelle:  Function "jinit_memory_mgr"
Noelle:  Function "jinit_color_converter"
Noelle:  Function "jpeg_alloc_huff_table"
Noelle:  Function "jround_up"
Noelle:  Function "jinit_forward_dct"
Noelle:  Function "write_file_trailer"
Noelle:  Function "jpeg_std_error"
Noelle:  Function "jpeg_stdio_dest"
Noelle:  Function "term_destination"
Noelle:  Function "jinit_marker_writer"
Noelle:  Function "start_pass_main"
Noelle:  Function "jpeg_alloc_quant_table"
Noelle:  Function "start_pass_prep"
Noelle:  Function "jpeg_free_large"
Noelle:  Function "jpeg_get_large"
Noelle:  Function "jinit_phuff_encoder"
Noelle:  Function "jpeg_destroy_compress"
Noelle:  Function "init_destination"
Noelle:  Function "jpeg_get_small"
Noelle:  Function "jpeg_free_small"
Noelle:  Function "jpeg_destroy"
Noelle:  Function "jinit_read_ppm"
Noelle:  Function "jpeg_abort"
Noelle:  Function "emit_message"
Noelle:  Function "reset_error_mgr"
Noelle:  Function "finish_input_ppm"
Noelle:  Function "start_pass_downsample"
Noelle:  Function "jpeg_mem_available"
Noelle:  Function "jpeg_fdct_float"
Noelle:  Function "jpeg_mem_term"
Noelle:  Function "access_virt_sarray"
Noelle:     Loop "  %84 = mul nsw i64 %81, %50" (0.000000e+00%)
Noelle:     Loop "  %166 = mul nsw i64 %163, %134" (0.000000e+00%)
Noelle:     Loop "  %231 = load i8**, i8*** %227, align 8, !tbaa !38" (0.000000e+00%)
Noelle:  Function "jpeg_mem_init"
Noelle:  Function "jpeg_write_raw_data"
Noelle:  Function "jpeg_open_backing_store"
Noelle:  Function "jpeg_add_quant_table"
Noelle:     Loop "  %32 = getelementptr inbounds i32, i32* %2, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %48 = getelementptr inbounds i32, i32* %2, i64 %47" (0.000000e+00%)
Noelle:  Function "jpeg_quality_scaling"
Noelle:  Function "pass_startup"
Noelle:  Function "format_message"
Noelle:     Loop "  %45 = getelementptr inbounds i8, i8* %44, i64 1" (0.000000e+00%)
Noelle:  Function "jzero_far"
Noelle:  Function "output_message"
Noelle:  Function "request_virt_sarray"
Noelle:  Function "forward_DCT_float"
Noelle:     Loop "  %29 = zext i32 %28 to i64" (0.000000e+00%)
Noelle:     Loop "  %33 = getelementptr inbounds i8*, i8** %21, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %88 = getelementptr inbounds [64 x float], [64 x float]* %8, i64 0, i64 %87" (0.000000e+00%)
Noelle:  Function "null_convert"
Noelle:     Loop "  %26 = add nsw i32 %23, -1" (0.000000e+00%)
Noelle:     Loop "  %48 = getelementptr inbounds i8**, i8*** %2, i64 %47" (0.000000e+00%)
Noelle:     Loop "  %56 = getelementptr inbounds i8, i8* %54, i64 %47" (0.000000e+00%)
Noelle:     Loop "  %81 = getelementptr inbounds i8, i8* %79, i64 %47" (0.000000e+00%)
Noelle:     Loop "  %30 = getelementptr inbounds i8**, i8*** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %37 = getelementptr inbounds i8, i8* %35, i64 %29" (0.000000e+00%)
Noelle:  Function "jpeg_set_colorspace"
Noelle:     Loop "  %133 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %129, i64 %132, i32 0" (0.000000e+00%)
Noelle:  Function "jpeg_fdct_ifast"
Noelle:     Loop "  %5 = load i32, i32* %4, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "error_exit"
Noelle:  Function "pre_process_context"
Noelle:     Loop "  %28 = load i32, i32* %2, align 4, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %94 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %93" (0.000000e+00%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %95, i32 %99, i8** %95, i32 %101, i32 1, i32 %96) #20" (0.000000e+00%)
Noelle:     Loop "  %54 = icmp slt i32 %52, 1" (0.000000e+00%)
Noelle:     Loop "  %59 = load i8**, i8*** %56, align 8, !tbaa !50" (0.000000e+00%)
Noelle:  Function "alloc_barray"
Noelle:     Loop "  %32 = sub i32 %3, %30" (0.000000e+00%)
Noelle:     Loop "  %47 = add i32 %45, 1" (0.000000e+00%)
Noelle:     Loop "  %62 = add i32 %61, 1" (0.000000e+00%)
Noelle:  Function "jcopy_block_row"
Noelle:  Function "get_text_rgb_row"
Noelle:     Loop "  %18 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "get_word_gray_row"
Noelle:     Loop "  %56 = getelementptr inbounds i8, i8* %55, i64 1" (0.000000e+00%)
Noelle:  Function "load_interlaced_image"
Noelle:     Loop "  %49 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %16, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %62 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:     Loop "  store i64 %21, i64* %12, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %38 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "get_scaled_gray_row"
Noelle:     Loop "  %39 = getelementptr inbounds i8, i8* %37, i64 1" (0.000000e+00%)
Noelle:     Loop "  %55 = getelementptr inbounds i8, i8* %54, i64 1" (0.000000e+00%)
Noelle:  Function "get_word_rgb_row"
Noelle:     Loop "  %37 = getelementptr inbounds i8, i8* %36, i64 1" (0.000000e+00%)
Noelle:  Function "get_scaled_rgb_row"
Noelle:     Loop "  %63 = getelementptr inbounds i8, i8* %62, i64 1" (0.000000e+00%)
Noelle:  Function "get_text_gray_row"
Noelle:     Loop "  %18 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "jinit_read_gif"
Noelle:  Function "cmyk_ycck_convert"
Noelle:     Loop "  %28 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %45 = load i8, i8* %44, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "fullsize_smooth_downsample"
Noelle:     Loop "  %33 = getelementptr inbounds i8*, i8** %8, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %8, i64 %60" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds i8*, i8** %3, i64 %83" (0.000000e+00%)
Noelle:     Loop "  %134 = getelementptr inbounds i8, i8* %133, i64 1" (0.000000e+00%)
Noelle:  Function "h2v1_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %2, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %2, i64 %60" (0.000000e+00%)
Noelle:     Loop "  %77 = getelementptr inbounds i8*, i8** %2, i64 %76" (0.000000e+00%)
Noelle:     Loop "  %85 = load i8, i8* %83, align 1, !tbaa !42" (0.000000e+00%)
Noelle:  Function "h2v2_smooth_downsample"
Noelle:     Loop "  %34 = getelementptr inbounds i8*, i8** %8, i64 %32" (0.000000e+00%)
Noelle:     Loop "  %63 = getelementptr inbounds i8*, i8** %8, i64 %61" (0.000000e+00%)
Noelle:     Loop "  %86 = getelementptr inbounds i8*, i8** %3, i64 %84" (0.000000e+00%)
Noelle:     Loop "  %161 = getelementptr inbounds i8, i8* %160, i64 1" (0.000000e+00%)
Noelle:  Function "int_downsample"
Noelle:     Loop "  %42 = getelementptr inbounds i8*, i8** %2, i64 %40" (0.000000e+00%)
Noelle:     Loop "  %72 = getelementptr inbounds i8*, i8** %2, i64 %70" (0.000000e+00%)
Noelle:     Loop "  br i1 %85, label %._crit_edge36, label %110" (0.000000e+00%)
Noelle:     Loop "  br i1 %86, label %117, label %..loopexit2_crit_edge" (0.000000e+00%)
Noelle:     Loop "  %122 = add nsw i64 %120, %109" (0.000000e+00%)
Noelle:     Loop "  %133 = getelementptr i8, i8* %125, i64 %129" (0.000000e+00%)
Noelle:     Loop "  %188 = getelementptr inbounds i8, i8* %186, i64 1" (0.000000e+00%)
Noelle:  Function "jinit_huff_encoder"
Noelle:  Function "start_pass_huff"
Noelle:     Loop "  %81 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %80" (1.821938e-09%)
Noelle:     Loop "  %20 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %19" (0.000000e+00%)
Noelle:  Function "jinit_read_targa"
Noelle:  Function "usage"
Noelle:  Function "start_input_gif"
Noelle:     Loop "  %106 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %158 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %208 = icmp sgt i32 %207, 0" (0.000000e+00%)
Noelle:     Loop "  %277 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:  Function "finish_input_gif"
Noelle:  Function "get_pixel_rows"
Noelle:     Loop "  %19 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "LZWReadByte"
Noelle:     Loop "  %146 = load i8*, i8** %142, align 8, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp sgt i32 %84, 0" (0.000000e+00%)
Noelle:     Loop "  %41 = tail call fastcc i32 @GetCode(%struct.gif_source_struct* nonnull %0)" (0.000000e+00%)
Noelle:  Function "GetCode"
Noelle:     Loop "  %19 = load i32, i32* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "get_interlaced_row"
Noelle:     Loop "  %76 = getelementptr inbounds i8, i8* %73, i64 1" (0.000000e+00%)
Noelle:  Function "encode_mcu_gather"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.huff_entropy_encoder, %struct.huff_entropy_encoder* %5, i64 0, i32 1, i32 2, i64 %17" (0.000000e+00%)
Noelle:     Loop "  %35 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %34" (0.000000e+00%)
Noelle:     Loop "  %75 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %73" (0.000000e+00%)
Noelle:  Function "start_input_tga"
Noelle:     Loop "  %224 = add nsw i32 %223, -1" (0.000000e+00%)
Noelle:     Loop "  %288 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "finish_pass_gather"
Noelle:     Loop "  %16 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %15" (1.457551e-08%)
Noelle:  Function "finish_pass_huff"
Noelle:     Loop "  %31 = lshr i64 %30, 16" (0.000000e+00%)
Noelle:  Function "emit_restart"
Noelle:     Loop "  %79 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 7, i64 %78" (0.000000e+00%)
Noelle:  Function "read_stdin"
Noelle:  Function "read_text_integer"
Noelle:     Loop "  %5 = tail call fastcc i32 @text_getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:     Loop "  %25 = load i16*, i16** %.lcssa17, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "text_getc"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:  Function "read_scan_script"
Noelle:     Loop "  %24 = icmp eq i32 %23, 100" (0.000000e+00%)
Noelle:     Loop "  %37 = icmp eq i64 %36, 4" (0.000000e+00%)
Noelle:  Function "read_scan_integer"
Noelle:     Loop "  %11 = load i16*, i16** %9, align 8, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %20 = tail call i32 @getc(%struct._IO_FILE* %0) #21" (0.000000e+00%)
Noelle:  Function "set_quant_slots"
Noelle:     Loop "  %10 = load i8, i8* %9, align 1, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %30, align 1, !tbaa !34" (0.000000e+00%)
Noelle:  Function "set_sample_factors"
Noelle:     Loop "  %13 = load i8, i8* %12, align 1, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %42 = load i8, i8* %41, align 1, !tbaa !30" (0.000000e+00%)
Noelle:  Function "read_quant_tables"
Noelle:     Loop "  %25 = icmp eq i32 %24, 4" (0.000000e+00%)
Noelle:     Loop "  %36 = call fastcc i32 @read_text_integer(%struct._IO_FILE* nonnull %12, i64* nonnull %6, i32* nonnull %5)" (0.000000e+00%)
Noelle:  Function "compress_data"
Noelle:     Loop "  %29 = icmp ugt i32 %27, %8" (0.000000e+00%)
Noelle:     Loop "  %34 = load i32, i32* %19, align 4, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %42 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %40" (0.000000e+00%)
Noelle:     Loop "  %64 = load i32, i32* %20, align 8, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %152 = load i16, i16* %142, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %182 = load i16, i16* %142, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %111 = add i64 %110, %75" (0.000000e+00%)
Noelle:  Function "null_method"
Noelle:  Function "grayscale_convert"
Noelle:     Loop "  %57 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %65 = load i8, i8* %63, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %47 = load i8, i8* %45, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %23 = add nsw i32 %20, -1" (0.000000e+00%)
Noelle:     Loop "  %33 = load i8, i8* %31, align 1, !tbaa !40" (0.000000e+00%)
Noelle:  Function "rgb_gray_convert"
Noelle:     Loop "  %25 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %33 = load i8, i8* %32, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "write_stdout"
Noelle:  Function "jpeg_abort_compress"
Noelle:  Function "jpeg_write_marker"
Noelle:  Function "get_memory_row"
Noelle:  Function "encode_mcu_huff"
Noelle:     Loop "  %49 = lshr i64 %48, 16" (0.000000e+00%)
Noelle:     Loop "  %144 = getelementptr inbounds %struct.working_state, %struct.working_state* %3, i64 0, i32 2, i32 2, i64 %143" (0.000000e+00%)
Noelle:     Loop "  %161 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %160" (0.000000e+00%)
Noelle:     Loop "  %226 = lshr i64 %225, 16" (0.000000e+00%)
Noelle:     Loop "  %289 = lshr i64 %288, 16" (0.000000e+00%)
Noelle:     Loop "  %350 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %348" (0.000000e+00%)
Noelle:     Loop "  %365 = load i32, i32* %342, align 4, !tbaa !49" (0.000000e+00%)
Noelle:     Loop "  %391 = lshr i64 %390, 16" (0.000000e+00%)
Noelle:     Loop "  %486 = lshr i64 %485, 16" (0.000000e+00%)
Noelle:     Loop "  %548 = lshr i64 %547, 16" (0.000000e+00%)
Noelle:     Loop "  %635 = lshr i64 %634, 16" (0.000000e+00%)
Noelle:  Function "finish_input_tga"
Noelle:  Function "read_rle_pixel"
Noelle:     Loop "  %38 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "read_non_rle_pixel"
Noelle:     Loop "  %8 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "get_8bit_row"
Noelle:     Loop "  %23 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %15, align 8, !tbaa !43" (0.000000e+00%)
Noelle:  Function "get_16bit_row"
Noelle:     Loop "  %20 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_24bit_row"
Noelle:     Loop "  %21 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_8bit_gray_row"
Noelle:     Loop "  %18 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "preload_image"
Noelle:     Loop "  %39 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  store i64 %21, i64* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "jpeg_write_tables"
Noelle:  Function "jinit_read_bmp"
Noelle:  Function "start_input_bmp"
Noelle:     Loop "  %480 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %426 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %576 = add nsw i64 %575, -1" (0.000000e+00%)
Noelle:  Function "finish_input_bmp"
Noelle:  Function "preload_image.9"
Noelle:     Loop "  %59 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %18, align 8, !tbaa !48" (0.000000e+00%)
Noelle:     Loop "  %72 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:     Loop "  store i64 %24, i64* %14, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %41 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "write_any_marker"
Noelle:     Loop "  %104 = add i32 %102, -1" (0.000000e+00%)
Noelle:  Function "write_tables_only"
Noelle:  Function "get_8bit_row.10"
Noelle:     Loop "  %56 = getelementptr inbounds i8, i8* %55, i64 1" (0.000000e+00%)
Noelle:  Function "get_24bit_row.11"
Noelle:     Loop "  %45 = getelementptr inbounds i8, i8* %44, i64 1" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-inline baseline_pre.bc "-noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier"
NOELLE: Inliner: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.G9wA6FIGtg (.ll version is /tmp/tmp.4fHOqQtQ34)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.Ihu8KTh6Li (.ll version is /tmp/tmp.HSZkGKypLm)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.G9wA6FIGtg -o /tmp/tmp.Ihu8KTh6Li
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.G9wA6FIGtg -o /tmp/tmp.Ihu8KTh6Li
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.G9wA6FIGtg -o /tmp/tmp.Ihu8KTh6Li
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.G9wA6FIGtg -o /tmp/tmp.Ihu8KTh6Li
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.G9wA6FIGtg -o /tmp/tmp.Ihu8KTh6Li
Inliner: Start
Inliner:   Number of program instructions = 25644
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.jpeg_error_mgr, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca %struct.jpeg_compress_struct, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: main (198 instructions. The inlining will add 82 instructions),   %112 = call i32 @jpeg_write_scanlines(%struct.jpeg_compress_struct.183* nonnull %100, i8** %111, i32 %110) #20
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %109 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %107, align 8, !tbaa !56" (3.135242e+01%)
Noelle:  Function "encode_mcu_AC_refine"
Noelle:     Loop "  %40 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %38" (1.372471e+01%)
Noelle:     Loop "  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %69" (1.475366e+01%)
Noelle:     Loop "  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %6)" (2.231149e-02%)
Noelle:     Loop "  %129 = lshr i64 %127, 16" (7.590509e-04%)
Noelle:     Loop "  %199 = icmp eq i32 %196, 0" (7.630777e-03%)
Noelle:     Loop "  %212 = lshr i64 %210, 16" (6.251293e-04%)
Noelle:     Loop "  %340 = lshr i64 %338, 16" (3.902455e-02%)
Noelle:     Loop "  %416 = lshr i64 %414, 16" (1.226251e-02%)
Noelle:     Loop "  %487 = icmp eq i32 %484, 0" (4.777803e-01%)
Noelle:     Loop "  %500 = lshr i64 %498, 16" (3.931615e-02%)
Noelle:  Function "encode_mcu_AC_first"
Noelle:     Loop "  %42 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %40" (1.098756e+01%)
Noelle:     Loop "  %74 = load i32, i32* %33, align 8, !tbaa !61" (2.037891e-03%)
Noelle:     Loop "  %118 = lshr i64 %116, 16" (6.298430e-04%)
Noelle:     Loop "  %180 = ashr i32 %179, 1" (4.821838e-01%)
Noelle:     Loop "  %233 = lshr i64 %231, 16" (2.179678e-01%)
Noelle:     Loop "  %306 = lshr i64 %304, 16" (1.048219e-01%)
Noelle:  Function "rgb_ycc_convert"
Noelle:     Loop "  %26 = load i8**, i8*** %2, align 8, !tbaa !45" (9.023219e+00%)
Noelle:     Loop "  %39 = load i8, i8* %38, align 1, !tbaa !46" (9.022962e+00%)
Noelle:  Function "forward_DCT"
Noelle:     Loop "  %28 = zext i32 %27 to i64" (5.700160e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29" (1.392196e+00%)
Noelle:     Loop "  %77 = getelementptr inbounds i32, i32* %18, i64 %76" (4.273707e+00%)
Noelle:  Function "jpeg_fdct_islow"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !30" (2.474107e+00%)
Noelle:     Loop "  %95 = load i32, i32* %94, align 4, !tbaa !30" (2.523161e+00%)
Noelle:  Function "compress_output"
Noelle:     Loop "  %16 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %15" (4.675823e-04%)
Noelle:     Loop "  %54 = icmp ult i32 %52, %51" (1.926691e+00%)
Noelle:     Loop "  %56 = load i32, i32* %8, align 4, !tbaa !39" (1.926315e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %60" (1.524562e+00%)
Noelle:     Loop "  %131 = add nsw i64 %129, %53" (0.000000e+00%)
Noelle:     Loop "  %137 = add i64 %136, %135" (0.000000e+00%)
Noelle:     Loop "  %160 = getelementptr inbounds [64 x i16], [64 x i16]* %158, i64 1" (0.000000e+00%)
Noelle:     Loop "  %103 = add nsw i64 %101, %53" (0.000000e+00%)
Noelle:     Loop "  %109 = add i64 %108, %107" (0.000000e+00%)
Noelle:     Loop "  %85 = sext i32 %84 to i64" (6.566467e-01%)
Noelle:     Loop "  %93 = getelementptr inbounds [64 x i16], [64 x i16]* %91, i64 1" (3.041857e-01%)
Noelle:  Function "emit_eobrun"
Noelle:     Loop "  %7 = ashr i32 %5, 1" (7.512576e-02%)
Noelle:     Loop "  %68 = lshr i64 %66, 16" (4.011400e-02%)
Noelle:     Loop "  %154 = lshr i64 %152, 16" (4.108741e-03%)
Noelle:     Loop "  %231 = icmp eq i32 %228, 0" (1.174663e+00%)
Noelle:     Loop "  %246 = lshr i64 %244, 16" (1.027151e-01%)
Noelle:  Function "h2v2_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59" (3.216418e-04%)
Noelle:     Loop "  %75 = or i64 %74, 1" (1.593478e+00%)
Noelle:     Loop "  %86 = load i8, i8* %84, align 1, !tbaa !44" (1.593272e+00%)
Noelle:  Function "encode_mcu_DC_first"
Noelle:     Loop "  %34 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %33" (4.888463e-01%)
Noelle:     Loop "  %105 = lshr i64 %103, 16" (2.120926e-02%)
Noelle:     Loop "  %183 = lshr i64 %181, 16" (2.135949e-02%)
Noelle:  Function "encode_mcu_DC_refine"
Noelle:     Loop "  %36 = load i32, i32* %30, align 8, !tbaa !50" (1.248489e-01%)
Noelle:     Loop "  %57 = lshr i64 %55, 16" (8.573004e-03%)
Noelle:  Function "compress_first_pass"
Noelle:     Loop "  %21 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (1.722795e-04%)
Noelle:     Loop "  %141 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %140" (4.265381e-05%)
Noelle:     Loop "  %90 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %89" (0.000000e+00%)
Noelle:     Loop "  %105 = getelementptr inbounds [64 x i16], [64 x i16]* %98, i64 %103" (0.000000e+00%)
Noelle:     Loop "  %133 = getelementptr inbounds [64 x i16], [64 x i16]* %98, i64 %131" (0.000000e+00%)
Noelle:     Loop "  %67 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %66" (0.000000e+00%)
Noelle:     Loop "  %82 = getelementptr inbounds [64 x i16], [64 x i16]* %75, i64 %80" (0.000000e+00%)
Noelle:     Loop "  %236 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %235" (0.000000e+00%)
Noelle:     Loop "  %175 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %174" (0.000000e+00%)
Noelle:     Loop "  %184 = getelementptr inbounds [64 x i16], [64 x i16]* %181, i64 %164, i64 0" (0.000000e+00%)
Noelle:     Loop "  %188 = getelementptr inbounds [64 x i16], [64 x i16]* %182, i64 %186, i64 0" (0.000000e+00%)
Noelle:     Loop "  %200 = getelementptr inbounds [64 x i16], [64 x i16]* %182, i64 %198, i64 0" (0.000000e+00%)
Noelle:     Loop "  %215 = getelementptr inbounds [64 x i16], [64 x i16]* %212, i64 %164, i64 0" (0.000000e+00%)
Noelle:     Loop "  %223 = getelementptr inbounds [64 x i16], [64 x i16]* %213, i64 %221, i64 0" (0.000000e+00%)
Noelle:     Loop "  %228 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %227" (0.000000e+00%)
Noelle:  Function "finish_pass_gather_phuff"
Noelle:     Loop "  %46 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %45" (5.750683e-03%)
Noelle:     Loop "  %19 = load i32, i32* %14, align 4, !tbaa !43" (1.437723e-03%)
Noelle:  Function "jpeg_gen_optimal_table"
Noelle:     Loop "  %17 = getelementptr inbounds i64, i64* %2, i64 %14" (5.546391e-03%)
Noelle:     Loop "  %34 = getelementptr inbounds i64, i64* %2, i64 %31" (2.319106e-03%)
Noelle:     Loop "  %66 = sext i32 %65 to i64" (3.025714e-05%)
Noelle:     Loop "  %82 = sext i32 %81 to i64" (2.983923e-05%)
Noelle:     Loop "  %90 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %89" (5.203571e-05%)
Noelle:     Loop "  %108 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %106" (1.127617e-05%)
Noelle:     Loop "  br label %._crit_edge47" (7.717578e-06%)
Noelle:     Loop "  %116 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %115" (2.171652e-06%)
Noelle:     Loop "  %137 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %136" (3.522091e-07%)
Noelle:     Loop "  br label %._crit_edge52" (1.577216e-03%)
Noelle:     Loop "  %149 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %146" (1.572563e-03%)
Noelle:  Function "access_virt_barray"
Noelle:     Loop "  %80 = mul nsw i64 %77, %47" (0.000000e+00%)
Noelle:     Loop "  %162 = mul nsw i64 %159, %131" (0.000000e+00%)
Noelle:     Loop "  %226 = load [64 x i16]**, [64 x i16]*** %223, align 8, !tbaa !40" (0.000000e+00%)
Noelle:  Function "pre_process_data"
Noelle:     Loop "  %23 = load i32, i32* %5, align 4, !tbaa !39" (5.856435e-04%)
Noelle:     Loop "  %54 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %53" (3.193606e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %55, i32 %59, i8** %55, i32 %60, i32 1, i32 %56) #20" (2.098656e-07%)
Noelle:     Loop "  %99 = getelementptr inbounds i8**, i8*** %4, i64 %97" (9.927553e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %100, i32 %110, i8** %100, i32 %111, i32 1, i32 %103) #20" (8.504117e-07%)
Noelle:  Function "fullsize_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %3, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %3, i64 %60" (1.608209e-04%)
Noelle:  Function "jpeg_write_scanlines"
Noelle:  Function "sep_downsample"
Noelle:     Loop "  %18 = getelementptr inbounds i8**, i8*** %1, i64 %16" (4.181343e-04%)
Noelle:  Function "process_data_simple_main"
Noelle:     Loop "  %21 = icmp ult i32 %20, 8" (1.784861e-04%)
Noelle:  Function "jpeg_finish_compress"
Noelle:     Loop "  %42 = getelementptr inbounds %struct.jpeg_comp_master, %struct.jpeg_comp_master* %41, i64 0, i32 0" (2.758272e-04%)
Noelle:     Loop "  %48 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %37, align 8, !tbaa !57" (2.752049e-04%)
Noelle:  Function "jcopy_sample_rows"
Noelle:     Loop "  %29 = getelementptr inbounds i8*, i8** %27, i64 1" (1.029254e-04%)
Noelle:  Function "get_raw_row"
Noelle:  Function "empty_output_buffer"
Noelle:  Function "jpeg_make_c_derived_tbl"
Noelle:     Loop "  %23 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %1, i64 0, i32 0, i64 %20" (1.142764e-05%)
Noelle:     Loop "  %49 = add nsw <2 x i64> %46, <i64 8, i64 8>" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw <2 x i64> %58, <i64 1, i64 1>" (6.095226e-07%)
Noelle:     Loop "  %96 = sext i8 %92 to i32" (1.361571e-05%)
Noelle:     Loop "  %102 = add nsw i64 %100, 1" (7.425591e-06%)
Noelle:     Loop "  %143 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 %141" (1.027976e-05%)
Noelle:  Function "write_scan_header"
Noelle:     Loop "  %14 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %13" (2.174572e-05%)
Noelle:     Loop "  %287 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %286" (1.410662e-06%)
Noelle:  Function "realize_virt_arrays"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %8, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %41 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %38, i64 0, i32 0" (1.624177e-07%)
Noelle:     Loop "  %92 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %91, i64 0, i32 0" (2.560360e-06%)
Noelle:     Loop "  %143 = sub i32 %119, %141" (0.000000e+00%)
Noelle:     Loop "  %191 = add i32 %189, 1" (0.000000e+00%)
Noelle:     Loop "  %206 = add i32 %205, 1" (0.000000e+00%)
Noelle:     Loop "  %234 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %233, i64 0, i32 0" (2.265088e-05%)
Noelle:     Loop "  %288 = sub i32 %262, %286" (2.208151e-05%)
Noelle:     Loop "  %332 = add i32 %330, 1" (8.212130e-08%)
Noelle:     Loop "  %347 = add i32 %346, 1" (2.167455e-05%)
Noelle:  Function "emit_dht"
Noelle:     Loop "  %202 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 0, i64 %201" (5.821488e-06%)
Noelle:     Loop "  %225 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 1, i64 %224" (1.250981e-05%)
Noelle:  Function "rgb_ycc_start"
Noelle:     Loop "  %15 = mul nuw nsw i64 %14, 19595" (1.775098e-05%)
Noelle:  Function "jpeg_start_compress"
Noelle:  Function "jinit_compress_master"
Noelle:  Function "jinit_c_master_control"
Noelle:     Loop "  %106 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %105, i64 0, i32 2" (1.733672e-07%)
Noelle:     Loop "  %155 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %154, i64 0, i32 1" (2.700878e-07%)
Noelle:     Loop "  %222 = bitcast i32* %220 to i8*" (5.292262e-08%)
Noelle:     Loop "  %242 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 0" (1.173057e-05%)
Noelle:     Loop "  %258 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %257" (4.270308e-07%)
Noelle:     Loop "  %340 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %339" (1.030166e-05%)
Noelle:     Loop "  %404 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %403" (0.000000e+00%)
Noelle:     Loop "  %390 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %389" (3.841452e-06%)
Noelle:     Loop "  %368 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %367" (6.036828e-06%)
Noelle:     Loop "  %355 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %354" (0.000000e+00%)
Noelle:     Loop "  %431 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %430" (0.000000e+00%)
Noelle:     Loop "  %467 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %466, i64 0" (6.934688e-08%)
Noelle:     Loop "  %482 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i64 0, i64 %481" (0.000000e+00%)
Noelle:  Function "parse_switches"
Noelle:     Loop "  %34 = sext i32 %33 to i64" (7.619032e-06%)
Noelle:  Function "write_frame_header"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %8, i64 0, i32 4" (7.943867e-06%)
Noelle:     Loop "  %43 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %40, i64 0, i32 5" (0.000000e+00%)
Noelle:  Function "jpeg_set_linear_quality"
Noelle:     Loop "  %41 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %40" (2.100480e-06%)
Noelle:     Loop "  %26 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %25" (2.100480e-06%)
Noelle:     Loop "  %90 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %89" (2.100480e-06%)
Noelle:     Loop "  %75 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %74" (2.100480e-06%)
Noelle:  Function "emit_dqt"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %5, i64 0, i32 0, i64 %16" (1.921639e-06%)
Noelle:     Loop "  %197 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %196" (5.602498e-06%)
Noelle:     Loop "  %150 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %149" (0.000000e+00%)
Noelle:  Function "keymatch"
Noelle:     Loop "  %10 = getelementptr inbounds i8, i8* %7, i64 1" (5.547750e-06%)
Noelle:  Function "jpeg_set_defaults"
Noelle:  Function "prepare_for_pass"
Noelle:  Function "jpeg_set_quality"
Noelle:  Function "alloc_small"
Noelle:     Loop "  %35 = getelementptr inbounds %union.small_pool_struct, %union.small_pool_struct* %34, i64 0, i32 0, i32 2" (5.310511e-07%)
Noelle:     Loop "  %59 = lshr i64 %58, 1" (0.000000e+00%)
Noelle:  Function "finish_pass_phuff"
Noelle:  Function "start_pass_phuff"
Noelle:     Loop "  %136 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %135" (0.000000e+00%)
Noelle:     Loop "  %45 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %44" (7.299671e-07%)
Noelle:     Loop "  %110 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %109" (0.000000e+00%)
Noelle:     Loop "  %76 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %75" (4.306806e-07%)
Noelle:  Function "alloc_sarray"
Noelle:     Loop "  %29 = sub i32 %3, %27" (1.271968e-06%)
Noelle:     Loop "  %43 = add i32 %41, 1" (1.259193e-07%)
Noelle:     Loop "  %58 = add i32 %57, 1" (3.887075e-07%)
Noelle:  Function "per_scan_setup"
Noelle:     Loop "  %68 = getelementptr inbounds %struct.jpeg_compress_struct.275, %struct.jpeg_compress_struct.275* %0, i64 0, i32 42, i64 %67" (7.883645e-07%)
Noelle:     Loop "  %106 = load i32, i32* %60, align 8, !tbaa !51" (7.299671e-08%)
Noelle:     Loop "  %116 = load i32, i32* %60, align 8, !tbaa !51" (1.021954e-07%)
Noelle:  Function "start_pass_coef"
Noelle:  Function "select_scan_parameters"
Noelle:     Loop "  %32 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %83" (2.627882e-07%)
Noelle:     Loop "  %138 = add <2 x i64> %136, <i64 2, i64 2>" (0.000000e+00%)
Noelle:     Loop "  %172 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %124, i64 %171" (0.000000e+00%)
Noelle:  Function "flush_bits"
Noelle:     Loop "  %23 = lshr i64 %21, 16" (3.777580e-07%)
Noelle:  Function "finish_pass_master"
Noelle:  Function "start_pass_fdctmgr"
Noelle:     Loop "  %17 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %16, i64 0, i32 4" (8.832602e-07%)
Noelle:     Loop "  %209 = shl i64 %208, 3" (0.000000e+00%)
Noelle:     Loop "  %170 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %33, i64 0, i32 0, i64 %169" (0.000000e+00%)
Noelle:  Function "free_pool"
Noelle:     Loop "  %22 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %21, i64 0, i32 10" (0.000000e+00%)
Noelle:     Loop "  %36 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %35, i64 0, i32 10" (5.839737e-08%)
Noelle:     Loop "  %54 = bitcast %union.large_pool_struct* %53 to i8*" (2.956367e-07%)
Noelle:     Loop "  %73 = bitcast %union.small_pool_struct* %72 to i8*" (1.952662e-07%)
Noelle:  Function "emit_sof"
Noelle:     Loop "  %250 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %248, i64 0, i32 0" (3.266603e-07%)
Noelle:  Function "start_input_ppm"
Noelle:     Loop "  %179 = load i8*, i8** %167, align 8, !tbaa !67" (0.000000e+00%)
Noelle:  Function "self_destruct"
Noelle:  Function "write_file_header"
Noelle:  Function "alloc_large"
Noelle:  Function "request_virt_barray"
Noelle:  Function "read_pbm_integer"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (8.394622e-08%)
Noelle:     Loop "  %6 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:     Loop "  %31 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (2.463639e-07%)
Noelle:     Loop "  %33 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:  Function "jinit_c_coef_controller"
Noelle:     Loop "  %24 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (2.153403e-07%)
Noelle:  Function "jinit_downsampler"
Noelle:     Loop "  %40 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %39, i64 0, i32 2" (1.594880e+00%)
Noelle:  Function "jpeg_simple_progression"
Noelle:     Loop "  %190 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %188, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %220 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %218, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %131 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %128" (0.000000e+00%)
Noelle:     Loop "  %167 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %164" (0.000000e+00%)
Noelle:     Loop "  %179 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %178" (0.000000e+00%)
Noelle:     Loop "  %240 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %238, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %270 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %268, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %284 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %282, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %313 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %311, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %327 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %325, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %356 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %354, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %446 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %444, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %476 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %474, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %388 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %385" (0.000000e+00%)
Noelle:     Loop "  %424 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %421" (0.000000e+00%)
Noelle:     Loop "  %436 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %435" (0.000000e+00%)
Noelle:     Loop "  %494 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %492, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %523 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %521, i64 0, i32 0" (0.000000e+00%)
Noelle:  Function "jinit_c_prep_controller"
Noelle:     Loop "  %83 = mul i64 %62, %80" (0.000000e+00%)
Noelle:     Loop "  %140 = add nsw i64 %138, %60" (0.000000e+00%)
Noelle:     Loop "  %231 = add nsw i64 %230, %60" (0.000000e+00%)
Noelle:     Loop "  %278 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (1.514682e-07%)
Noelle:  Function "jpeg_default_colorspace"
Noelle:     Loop "  %202 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %199, i64 %201, i32 0" (0.000000e+00%)
Noelle:  Function "jpeg_CreateCompress"
Noelle:  Function "jinit_c_main_controller"
Noelle:     Loop "  %34 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (1.131449e-07%)
Noelle:  Function "jpeg_suppress_tables"
Noelle:  Function "jdiv_round_up"
Noelle:  Function "jinit_memory_mgr"
Noelle:  Function "jinit_color_converter"
Noelle:  Function "jpeg_alloc_huff_table"
Noelle:  Function "jround_up"
Noelle:  Function "jinit_forward_dct"
Noelle:  Function "write_file_trailer"
Noelle:  Function "jpeg_std_error"
Noelle:  Function "term_destination"
Noelle:  Function "jpeg_stdio_dest"
Noelle:  Function "start_pass_main"
Noelle:  Function "jinit_marker_writer"
Noelle:  Function "jpeg_alloc_quant_table"
Noelle:  Function "start_pass_prep"
Noelle:  Function "jpeg_free_large"
Noelle:  Function "jpeg_get_large"
Noelle:  Function "jinit_phuff_encoder"
Noelle:  Function "jpeg_destroy_compress"
Noelle:  Function "init_destination"
Noelle:  Function "jpeg_free_small"
Noelle:  Function "jpeg_get_small"
Noelle:  Function "jpeg_destroy"
Noelle:  Function "jinit_read_ppm"
Noelle:  Function "jpeg_abort"
Noelle:  Function "emit_message"
Noelle:  Function "reset_error_mgr"
Noelle:  Function "jpeg_mem_available"
Noelle:  Function "start_pass_downsample"
Noelle:  Function "finish_input_ppm"
Noelle:  Function "output_message"
Noelle:  Function "request_virt_sarray"
Noelle:  Function "error_exit"
Noelle:  Function "jpeg_quality_scaling"
Noelle:  Function "format_message"
Noelle:     Loop "  %41 = getelementptr inbounds i8, i8* %40, i64 1" (0.000000e+00%)
Noelle:  Function "jpeg_add_quant_table"
Noelle:     Loop "  %29 = getelementptr inbounds i32, i32* %2, i64 %28" (0.000000e+00%)
Noelle:     Loop "  %44 = getelementptr inbounds i32, i32* %2, i64 %43" (0.000000e+00%)
Noelle:  Function "jpeg_write_raw_data"
Noelle:  Function "access_virt_sarray"
Noelle:     Loop "  %79 = mul nsw i64 %76, %46" (0.000000e+00%)
Noelle:     Loop "  %159 = mul nsw i64 %156, %128" (0.000000e+00%)
Noelle:     Loop "  %221 = load i8**, i8*** %218, align 8, !tbaa !38" (0.000000e+00%)
Noelle:  Function "jpeg_fdct_ifast"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "jpeg_mem_term"
Noelle:  Function "jpeg_mem_init"
Noelle:  Function "jpeg_open_backing_store"
Noelle:  Function "pre_process_context"
Noelle:     Loop "  %27 = load i32, i32* %2, align 4, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %90 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %89" (0.000000e+00%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %91, i32 %95, i8** %91, i32 %96, i32 1, i32 %92) #20" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp slt i32 %50, 1" (0.000000e+00%)
Noelle:     Loop "  %56 = load i8**, i8*** %54, align 8, !tbaa !50" (0.000000e+00%)
Noelle:  Function "null_convert"
Noelle:     Loop "  %25 = add nsw i32 %22, -1" (0.000000e+00%)
Noelle:     Loop "  %80 = getelementptr inbounds i8**, i8*** %2, i64 %79" (0.000000e+00%)
Noelle:     Loop "  %88 = getelementptr inbounds i8, i8* %86, i64 %79" (0.000000e+00%)
Noelle:     Loop "  %113 = getelementptr inbounds i8, i8* %111, i64 %79" (0.000000e+00%)
Noelle:     Loop "  %29 = getelementptr inbounds i8**, i8*** %2, i64 %28" (0.000000e+00%)
Noelle:     Loop "  %37 = getelementptr inbounds i8, i8* %35, i64 %28" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8**, i8*** %2, i64 %61" (0.000000e+00%)
Noelle:     Loop "  %70 = getelementptr inbounds i8, i8* %68, i64 %61" (0.000000e+00%)
Noelle:  Function "forward_DCT_float"
Noelle:     Loop "  %28 = zext i32 %27 to i64" (0.000000e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %85 = getelementptr inbounds [64 x float], [64 x float]* %8, i64 0, i64 %84" (0.000000e+00%)
Noelle:  Function "jzero_far"
Noelle:  Function "jpeg_fdct_float"
Noelle:  Function "pass_startup"
Noelle:  Function "alloc_barray"
Noelle:     Loop "  %31 = sub i32 %3, %29" (0.000000e+00%)
Noelle:     Loop "  %46 = add i32 %44, 1" (0.000000e+00%)
Noelle:     Loop "  %61 = add i32 %60, 1" (0.000000e+00%)
Noelle:  Function "jpeg_set_colorspace"
Noelle:     Loop "  %130 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %127, i64 %129, i32 0" (0.000000e+00%)
Noelle:  Function "jcopy_block_row"
Noelle:  Function "get_text_rgb_row"
Noelle:     Loop "  %17 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "get_word_gray_row"
Noelle:     Loop "  %54 = getelementptr inbounds i8, i8* %53, i64 1" (0.000000e+00%)
Noelle:  Function "load_interlaced_image"
Noelle:     Loop "  %46 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %16, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %58 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:     Loop "  store i64 %20, i64* %12, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %36 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "get_scaled_gray_row"
Noelle:     Loop "  %38 = getelementptr inbounds i8, i8* %36, i64 1" (0.000000e+00%)
Noelle:     Loop "  %54 = getelementptr inbounds i8, i8* %53, i64 1" (0.000000e+00%)
Noelle:  Function "get_word_rgb_row"
Noelle:     Loop "  %35 = getelementptr inbounds i8, i8* %34, i64 1" (0.000000e+00%)
Noelle:  Function "get_scaled_rgb_row"
Noelle:     Loop "  %61 = getelementptr inbounds i8, i8* %60, i64 1" (0.000000e+00%)
Noelle:  Function "get_text_gray_row"
Noelle:     Loop "  %17 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "jinit_read_gif"
Noelle:  Function "cmyk_ycck_convert"
Noelle:     Loop "  %27 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %43 = load i8, i8* %42, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "fullsize_smooth_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %8, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %8, i64 %59" (0.000000e+00%)
Noelle:     Loop "  %82 = getelementptr inbounds i8*, i8** %3, i64 %81" (0.000000e+00%)
Noelle:     Loop "  %131 = getelementptr inbounds i8, i8* %130, i64 1" (0.000000e+00%)
Noelle:  Function "h2v1_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59" (0.000000e+00%)
Noelle:     Loop "  %74 = getelementptr inbounds i8*, i8** %2, i64 %73" (0.000000e+00%)
Noelle:     Loop "  %81 = load i8, i8* %79, align 1, !tbaa !42" (0.000000e+00%)
Noelle:  Function "h2v2_smooth_downsample"
Noelle:     Loop "  %33 = getelementptr inbounds i8*, i8** %8, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %8, i64 %60" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds i8*, i8** %3, i64 %82" (0.000000e+00%)
Noelle:     Loop "  %159 = getelementptr inbounds i8, i8* %158, i64 1" (0.000000e+00%)
Noelle:  Function "int_downsample"
Noelle:     Loop "  %41 = getelementptr inbounds i8*, i8** %2, i64 %39" (0.000000e+00%)
Noelle:     Loop "  %71 = getelementptr inbounds i8*, i8** %2, i64 %69" (0.000000e+00%)
Noelle:     Loop "  br i1 %83, label %._crit_edge40.._crit_edge36_crit_edge, label %107" (0.000000e+00%)
Noelle:     Loop "  br i1 %84, label %113, label %.loopexit2._crit_edge..loopexit2_crit_edge" (0.000000e+00%)
Noelle:     Loop "  %169 = add nsw i64 %167, %106" (0.000000e+00%)
Noelle:     Loop "  %178 = getelementptr i8, i8* %172, i64 %174" (0.000000e+00%)
Noelle:     Loop "  %223 = getelementptr inbounds i8, i8* %221, i64 1" (0.000000e+00%)
Noelle:     Loop "  %134 = add nsw i64 %132, %106" (0.000000e+00%)
Noelle:     Loop "  %158 = getelementptr inbounds i8, i8* %156, i64 1" (0.000000e+00%)
Noelle:     Loop "  %117 = add nsw i64 %115, %106" (0.000000e+00%)
Noelle:     Loop "  %124 = getelementptr inbounds i8, i8* %122, i64 1" (0.000000e+00%)
Noelle:  Function "jinit_huff_encoder"
Noelle:  Function "start_pass_huff"
Noelle:     Loop "  %77 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %76" (3.662610e-05%)
Noelle:     Loop "  %19 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %18" (0.000000e+00%)
Noelle:  Function "jinit_read_targa"
Noelle:  Function "usage"
Noelle:  Function "start_input_gif"
Noelle:     Loop "  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %144 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %193 = icmp sgt i32 %192, 0" (0.000000e+00%)
Noelle:     Loop "  %258 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:  Function "finish_input_gif"
Noelle:  Function "get_pixel_rows"
Noelle:     Loop "  %18 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "LZWReadByte"
Noelle:     Loop "  %137 = load i8*, i8** %134, align 8, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %81 = icmp sgt i32 %80, 0" (0.000000e+00%)
Noelle:     Loop "  %39 = tail call fastcc i32 @GetCode(%struct.gif_source_struct* nonnull %0)" (0.000000e+00%)
Noelle:  Function "GetCode"
Noelle:     Loop "  %18 = load i32, i32* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "get_interlaced_row"
Noelle:     Loop "  %72 = getelementptr inbounds i8, i8* %69, i64 1" (0.000000e+00%)
Noelle:  Function "encode_mcu_gather"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.huff_entropy_encoder, %struct.huff_entropy_encoder* %5, i64 0, i32 1, i32 2, i64 %17" (0.000000e+00%)
Noelle:     Loop "  %32 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %70 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %68" (0.000000e+00%)
Noelle:  Function "start_input_tga"
Noelle:     Loop "  %214 = add nsw i32 %213, -1" (0.000000e+00%)
Noelle:     Loop "  %274 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "finish_pass_gather"
Noelle:     Loop "  %15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %14" (1.459934e-08%)
Noelle:  Function "finish_pass_huff"
Noelle:     Loop "  %30 = lshr i64 %29, 16" (0.000000e+00%)
Noelle:  Function "emit_restart"
Noelle:     Loop "  %76 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 7, i64 %75" (0.000000e+00%)
Noelle:  Function "read_stdin"
Noelle:  Function "read_text_integer"
Noelle:     Loop "  %4 = tail call fastcc i32 @text_getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:     Loop "  %24 = load i16*, i16** %.lcssa20, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "text_getc"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:  Function "read_scan_script"
Noelle:     Loop "  %23 = icmp eq i32 %22, 100" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp eq i64 %35, 4" (0.000000e+00%)
Noelle:  Function "read_scan_integer"
Noelle:     Loop "  %11 = load i16*, i16** %9, align 8, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %20 = tail call i32 @getc(%struct._IO_FILE* %0) #21" (0.000000e+00%)
Noelle:  Function "set_quant_slots"
Noelle:     Loop "  %9 = load i8, i8* %8, align 1, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %29 = load i8, i8* %28, align 1, !tbaa !34" (0.000000e+00%)
Noelle:  Function "set_sample_factors"
Noelle:     Loop "  %12 = load i8, i8* %11, align 1, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %38 = load i8, i8* %37, align 1, !tbaa !30" (0.000000e+00%)
Noelle:  Function "read_quant_tables"
Noelle:     Loop "  %24 = icmp eq i32 %23, 4" (0.000000e+00%)
Noelle:     Loop "  %34 = call fastcc i32 @read_text_integer(%struct._IO_FILE* nonnull %12, i64* nonnull %6, i32* nonnull %5)" (0.000000e+00%)
Noelle:  Function "compress_data"
Noelle:     Loop "  %28 = icmp ugt i32 %26, %8" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %19, align 4, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %39 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %37" (0.000000e+00%)
Noelle:     Loop "  %60 = load i32, i32* %20, align 8, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %145 = load i16, i16* %136, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %175 = load i16, i16* %136, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %105 = add i64 %104, %70" (0.000000e+00%)
Noelle:  Function "null_method"
Noelle:  Function "grayscale_convert"
Noelle:     Loop "  %90 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %98 = load i8, i8* %96, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %77 = load i8, i8* %75, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %23 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %29, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %56 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %64 = load i8, i8* %62, align 1, !tbaa !40" (0.000000e+00%)
Noelle:  Function "rgb_gray_convert"
Noelle:     Loop "  %24 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %30, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "write_stdout"
Noelle:  Function "jpeg_abort_compress"
Noelle:  Function "jpeg_write_marker"
Noelle:  Function "get_memory_row"
Noelle:  Function "encode_mcu_huff"
Noelle:     Loop "  %49 = lshr i64 %48, 16" (0.000000e+00%)
Noelle:     Loop "  %140 = getelementptr inbounds %struct.working_state, %struct.working_state* %3, i64 0, i32 2, i32 2, i64 %139" (0.000000e+00%)
Noelle:     Loop "  %156 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %155" (0.000000e+00%)
Noelle:     Loop "  %219 = lshr i64 %218, 16" (0.000000e+00%)
Noelle:     Loop "  %280 = lshr i64 %279, 16" (0.000000e+00%)
Noelle:     Loop "  %337 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %335" (0.000000e+00%)
Noelle:     Loop "  %352 = load i32, i32* %330, align 4, !tbaa !49" (0.000000e+00%)
Noelle:     Loop "  %377 = lshr i64 %376, 16" (0.000000e+00%)
Noelle:     Loop "  %469 = lshr i64 %468, 16" (0.000000e+00%)
Noelle:     Loop "  %529 = lshr i64 %528, 16" (0.000000e+00%)
Noelle:     Loop "  %613 = lshr i64 %612, 16" (0.000000e+00%)
Noelle:  Function "finish_input_tga"
Noelle:  Function "read_rle_pixel"
Noelle:     Loop "  %35 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "read_non_rle_pixel"
Noelle:     Loop "  %8 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "get_8bit_row"
Noelle:     Loop "  %22 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %15, align 8, !tbaa !43" (0.000000e+00%)
Noelle:  Function "get_16bit_row"
Noelle:     Loop "  %19 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_24bit_row"
Noelle:     Loop "  %20 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_8bit_gray_row"
Noelle:     Loop "  %17 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "preload_image"
Noelle:     Loop "  %37 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  store i64 %20, i64* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "jpeg_write_tables"
Noelle:  Function "jinit_read_bmp"
Noelle:  Function "start_input_bmp"
Noelle:     Loop "  %461 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %411 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %550 = add nsw i64 %549, -1" (0.000000e+00%)
Noelle:  Function "finish_input_bmp"
Noelle:  Function "preload_image.9"
Noelle:     Loop "  %55 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %18, align 8, !tbaa !48" (0.000000e+00%)
Noelle:     Loop "  %67 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:     Loop "  store i64 %23, i64* %14, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %39 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "write_any_marker"
Noelle:     Loop "  %99 = add i32 %97, -1" (0.000000e+00%)
Noelle:  Function "write_tables_only"
Noelle:  Function "get_8bit_row.10"
Noelle:     Loop "  %55 = getelementptr inbounds i8, i8* %54, i64 1" (0.000000e+00%)
Noelle:  Function "get_24bit_row.11"
Noelle:     Loop "  %44 = getelementptr inbounds i8, i8* %43, i64 1" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %110 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !56" (7.516894e+01%)
Noelle:  Function "encode_mcu_AC_refine"
Noelle:     Loop "  %40 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %38" (5.264999e+00%)
Noelle:     Loop "  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %69" (5.659719e+00%)
Noelle:     Loop "  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %6)" (8.559017e-03%)
Noelle:     Loop "  %129 = lshr i64 %127, 16" (2.911831e-04%)
Noelle:     Loop "  %199 = icmp eq i32 %196, 0" (2.927278e-03%)
Noelle:     Loop "  %212 = lshr i64 %210, 16" (2.398088e-04%)
Noelle:     Loop "  %340 = lshr i64 %338, 16" (1.497039e-02%)
Noelle:     Loop "  %416 = lshr i64 %414, 16" (4.704078e-03%)
Noelle:     Loop "  %487 = icmp eq i32 %484, 0" (1.832835e-01%)
Noelle:     Loop "  %500 = lshr i64 %498, 16" (1.508225e-02%)
Noelle:  Function "encode_mcu_AC_first"
Noelle:     Loop "  %42 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %40" (4.214991e+00%)
Noelle:     Loop "  %74 = load i32, i32* %33, align 8, !tbaa !61" (7.817650e-04%)
Noelle:     Loop "  %118 = lshr i64 %116, 16" (2.416170e-04%)
Noelle:     Loop "  %180 = ashr i32 %179, 1" (1.849728e-01%)
Noelle:     Loop "  %233 = lshr i64 %231, 16" (8.361566e-02%)
Noelle:     Loop "  %306 = lshr i64 %304, 16" (4.021124e-02%)
Noelle:  Function "rgb_ycc_convert"
Noelle:     Loop "  %26 = load i8**, i8*** %2, align 8, !tbaa !45" (3.461440e+00%)
Noelle:     Loop "  %39 = load i8, i8* %38, align 1, !tbaa !46" (3.461341e+00%)
Noelle:  Function "forward_DCT"
Noelle:     Loop "  %28 = zext i32 %27 to i64" (2.186665e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29" (5.340669e-01%)
Noelle:     Loop "  %77 = getelementptr inbounds i32, i32* %18, i64 %76" (1.639457e+00%)
Noelle:  Function "jpeg_fdct_islow"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !30" (9.491037e-01%)
Noelle:     Loop "  %95 = load i32, i32* %94, align 4, !tbaa !30" (9.679215e-01%)
Noelle:  Function "compress_output"
Noelle:     Loop "  %16 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %15" (1.793714e-04%)
Noelle:     Loop "  %54 = icmp ult i32 %52, %51" (7.391069e-01%)
Noelle:     Loop "  %56 = load i32, i32* %8, align 4, !tbaa !39" (7.389627e-01%)
Noelle:     Loop "  %62 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %60" (5.848445e-01%)
Noelle:     Loop "  %131 = add nsw i64 %129, %53" (0.000000e+00%)
Noelle:     Loop "  %137 = add i64 %136, %135" (0.000000e+00%)
Noelle:     Loop "  %160 = getelementptr inbounds [64 x i16], [64 x i16]* %158, i64 1" (0.000000e+00%)
Noelle:     Loop "  %103 = add nsw i64 %101, %53" (0.000000e+00%)
Noelle:     Loop "  %109 = add i64 %108, %107" (0.000000e+00%)
Noelle:     Loop "  %85 = sext i32 %84 to i64" (2.518993e-01%)
Noelle:     Loop "  %93 = getelementptr inbounds [64 x i16], [64 x i16]* %91, i64 1" (1.166901e-01%)
Noelle:  Function "emit_eobrun"
Noelle:     Loop "  %7 = ashr i32 %5, 1" (2.881934e-02%)
Noelle:     Loop "  %68 = lshr i64 %66, 16" (1.538832e-02%)
Noelle:     Loop "  %154 = lshr i64 %152, 16" (1.576173e-03%)
Noelle:     Loop "  %231 = icmp eq i32 %228, 0" (4.506178e-01%)
Noelle:     Loop "  %246 = lshr i64 %244, 16" (3.940301e-02%)
Noelle:  Function "h2v2_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59" (1.233865e-04%)
Noelle:     Loop "  %75 = or i64 %74, 1" (6.112814e-01%)
Noelle:     Loop "  %86 = load i8, i8* %84, align 1, !tbaa !44" (6.112025e-01%)
Noelle:  Function "encode_mcu_DC_first"
Noelle:     Loop "  %34 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %33" (1.875286e-01%)
Noelle:     Loop "  %105 = lshr i64 %103, 16" (8.136183e-03%)
Noelle:     Loop "  %183 = lshr i64 %181, 16" (8.193814e-03%)
Noelle:  Function "encode_mcu_DC_refine"
Noelle:     Loop "  %36 = load i32, i32* %30, align 8, !tbaa !50" (4.789387e-02%)
Noelle:     Loop "  %57 = lshr i64 %55, 16" (3.288730e-03%)
Noelle:  Function "compress_first_pass"
Noelle:     Loop "  %21 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (6.608897e-05%)
Noelle:     Loop "  %141 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %140" (1.636263e-05%)
Noelle:     Loop "  %90 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %89" (0.000000e+00%)
Noelle:     Loop "  %105 = getelementptr inbounds [64 x i16], [64 x i16]* %98, i64 %103" (0.000000e+00%)
Noelle:     Loop "  %133 = getelementptr inbounds [64 x i16], [64 x i16]* %98, i64 %131" (0.000000e+00%)
Noelle:     Loop "  %67 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %66" (0.000000e+00%)
Noelle:     Loop "  %82 = getelementptr inbounds [64 x i16], [64 x i16]* %75, i64 %80" (0.000000e+00%)
Noelle:     Loop "  %236 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %235" (0.000000e+00%)
Noelle:     Loop "  %175 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %174" (0.000000e+00%)
Noelle:     Loop "  %184 = getelementptr inbounds [64 x i16], [64 x i16]* %181, i64 %164, i64 0" (0.000000e+00%)
Noelle:     Loop "  %188 = getelementptr inbounds [64 x i16], [64 x i16]* %182, i64 %186, i64 0" (0.000000e+00%)
Noelle:     Loop "  %200 = getelementptr inbounds [64 x i16], [64 x i16]* %182, i64 %198, i64 0" (0.000000e+00%)
Noelle:     Loop "  %215 = getelementptr inbounds [64 x i16], [64 x i16]* %212, i64 %164, i64 0" (0.000000e+00%)
Noelle:     Loop "  %223 = getelementptr inbounds [64 x i16], [64 x i16]* %213, i64 %221, i64 0" (0.000000e+00%)
Noelle:     Loop "  %228 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %227" (0.000000e+00%)
Noelle:  Function "finish_pass_gather_phuff"
Noelle:     Loop "  %46 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %45" (2.206046e-03%)
Noelle:     Loop "  %19 = load i32, i32* %14, align 4, !tbaa !43" (5.515318e-04%)
Noelle:  Function "jpeg_gen_optimal_table"
Noelle:     Loop "  %17 = getelementptr inbounds i64, i64* %2, i64 %14" (2.127677e-03%)
Noelle:     Loop "  %34 = getelementptr inbounds i64, i64* %2, i64 %31" (8.896430e-04%)
Noelle:     Loop "  %66 = sext i32 %65 to i64" (1.160708e-05%)
Noelle:     Loop "  %82 = sext i32 %81 to i64" (1.144677e-05%)
Noelle:     Loop "  %90 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %89" (1.996166e-05%)
Noelle:     Loop "  %108 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %106" (4.325704e-06%)
Noelle:     Loop "  br label %._crit_edge47" (2.960576e-06%)
Noelle:     Loop "  %116 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %115" (8.330777e-07%)
Noelle:     Loop "  %137 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %136" (1.351126e-07%)
Noelle:     Loop "  br label %._crit_edge52" (6.050433e-04%)
Noelle:     Loop "  %149 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %146" (6.032582e-04%)
Noelle:  Function "access_virt_barray"
Noelle:     Loop "  %80 = mul nsw i64 %77, %47" (0.000000e+00%)
Noelle:     Loop "  %162 = mul nsw i64 %159, %131" (0.000000e+00%)
Noelle:     Loop "  %226 = load [64 x i16]**, [64 x i16]*** %223, align 8, !tbaa !40" (0.000000e+00%)
Noelle:  Function "pre_process_data"
Noelle:     Loop "  %23 = load i32, i32* %5, align 4, !tbaa !39" (2.246615e-04%)
Noelle:     Loop "  %54 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %53" (1.225114e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %55, i32 %59, i8** %55, i32 %60, i32 1, i32 %56) #20" (8.050751e-08%)
Noelle:     Loop "  %99 = getelementptr inbounds i8**, i8*** %4, i64 %97" (3.808355e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %100, i32 %110, i8** %100, i32 %111, i32 1, i32 %103) #20" (3.262304e-07%)
Noelle:  Function "fullsize_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %3, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %3, i64 %60" (6.169326e-05%)
Noelle:  Function "jpeg_write_scanlines"
Noelle:  Function "sep_downsample"
Noelle:     Loop "  %18 = getelementptr inbounds i8**, i8*** %1, i64 %16" (1.604025e-04%)
Noelle:  Function "process_data_simple_main"
Noelle:     Loop "  %21 = icmp ult i32 %20, 8" (6.846989e-05%)
Noelle:  Function "jpeg_finish_compress"
Noelle:     Loop "  %42 = getelementptr inbounds %struct.jpeg_comp_master, %struct.jpeg_comp_master* %41, i64 0, i32 0" (1.058114e-04%)
Noelle:     Loop "  %48 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %37, align 8, !tbaa !57" (1.055726e-04%)
Noelle:  Function "jcopy_sample_rows"
Noelle:     Loop "  %29 = getelementptr inbounds i8*, i8** %27, i64 1" (3.948368e-05%)
Noelle:  Function "get_raw_row"
Noelle:  Function "empty_output_buffer"
Noelle:  Function "jpeg_make_c_derived_tbl"
Noelle:     Loop "  %23 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %1, i64 0, i32 0, i64 %20" (4.383809e-06%)
Noelle:     Loop "  %49 = add nsw <2 x i64> %46, <i64 8, i64 8>" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw <2 x i64> %58, <i64 1, i64 1>" (2.338218e-07%)
Noelle:     Loop "  %96 = sext i8 %92 to i32" (5.223187e-06%)
Noelle:     Loop "  %102 = add nsw i64 %100, 1" (2.848566e-06%)
Noelle:     Loop "  %143 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 %141" (3.943468e-06%)
Noelle:  Function "write_scan_header"
Noelle:     Loop "  %14 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %13" (8.341978e-06%)
Noelle:     Loop "  %287 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %286" (5.411505e-07%)
Noelle:  Function "realize_virt_arrays"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %8, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %41 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %38, i64 0, i32 0" (6.230581e-08%)
Noelle:     Loop "  %92 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %91, i64 0, i32 0" (9.821916e-07%)
Noelle:     Loop "  %143 = sub i32 %119, %141" (0.000000e+00%)
Noelle:     Loop "  %191 = add i32 %189, 1" (0.000000e+00%)
Noelle:     Loop "  %206 = add i32 %205, 1" (0.000000e+00%)
Noelle:     Loop "  %234 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %233, i64 0, i32 0" (8.689211e-06%)
Noelle:     Loop "  %288 = sub i32 %262, %286" (8.470790e-06%)
Noelle:     Loop "  %332 = add i32 %330, 1" (3.150294e-08%)
Noelle:     Loop "  %347 = add i32 %346, 1" (8.314676e-06%)
Noelle:  Function "emit_dht"
Noelle:     Loop "  %202 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 0, i64 %201" (2.233208e-06%)
Noelle:     Loop "  %225 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 1, i64 %224" (4.798948e-06%)
Noelle:  Function "rgb_ycc_start"
Noelle:     Loop "  %15 = mul nuw nsw i64 %14, 19595" (6.809535e-06%)
Noelle:  Function "jpeg_start_compress"
Noelle:  Function "jinit_compress_master"
Noelle:  Function "jinit_c_master_control"
Noelle:     Loop "  %106 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %105, i64 0, i32 2" (6.650620e-08%)
Noelle:     Loop "  %155 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %154, i64 0, i32 1" (1.036097e-07%)
Noelle:     Loop "  %222 = bitcast i32* %220 to i8*" (2.030189e-08%)
Noelle:     Loop "  %242 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 0" (4.500020e-06%)
Noelle:     Loop "  %258 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %257" (1.638153e-07%)
Noelle:     Loop "  %340 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %339" (3.951869e-06%)
Noelle:     Loop "  %404 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %403" (0.000000e+00%)
Noelle:     Loop "  %390 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %389" (1.473637e-06%)
Noelle:     Loop "  %368 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %367" (2.315816e-06%)
Noelle:     Loop "  %355 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %354" (0.000000e+00%)
Noelle:     Loop "  %431 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %430" (0.000000e+00%)
Noelle:     Loop "  %467 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %466, i64 0" (2.660248e-08%)
Noelle:     Loop "  %482 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i64 0, i64 %481" (0.000000e+00%)
Noelle:  Function "parse_switches"
Noelle:     Loop "  %34 = sext i32 %33 to i64" (2.922773e-06%)
Noelle:  Function "write_frame_header"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %8, i64 0, i32 4" (3.047384e-06%)
Noelle:     Loop "  %43 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %40, i64 0, i32 5" (0.000000e+00%)
Noelle:  Function "jpeg_set_linear_quality"
Noelle:     Loop "  %41 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %40" (8.057752e-07%)
Noelle:     Loop "  %26 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %25" (8.057752e-07%)
Noelle:     Loop "  %90 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %89" (8.057752e-07%)
Noelle:     Loop "  %75 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %74" (8.057752e-07%)
Noelle:  Function "emit_dqt"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %5, i64 0, i32 0, i64 %16" (7.371688e-07%)
Noelle:     Loop "  %197 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %196" (2.149200e-06%)
Noelle:     Loop "  %150 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %149" (0.000000e+00%)
Noelle:  Function "keymatch"
Noelle:     Loop "  %10 = getelementptr inbounds i8, i8* %7, i64 1" (2.128199e-06%)
Noelle:  Function "jpeg_set_defaults"
Noelle:  Function "prepare_for_pass"
Noelle:  Function "jpeg_set_quality"
Noelle:  Function "alloc_small"
Noelle:     Loop "  %35 = getelementptr inbounds %union.small_pool_struct, %union.small_pool_struct* %34, i64 0, i32 0, i32 2" (2.037190e-07%)
Noelle:     Loop "  %59 = lshr i64 %58, 1" (0.000000e+00%)
Noelle:  Function "finish_pass_phuff"
Noelle:  Function "start_pass_phuff"
Noelle:     Loop "  %136 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %135" (0.000000e+00%)
Noelle:     Loop "  %45 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %44" (2.800261e-07%)
Noelle:     Loop "  %110 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %109" (0.000000e+00%)
Noelle:     Loop "  %76 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %75" (1.652154e-07%)
Noelle:  Function "alloc_sarray"
Noelle:     Loop "  %29 = sub i32 %3, %27" (4.879455e-07%)
Noelle:     Loop "  %43 = add i32 %41, 1" (4.830451e-08%)
Noelle:     Loop "  %58 = add i32 %57, 1" (1.491139e-07%)
Noelle:  Function "per_scan_setup"
Noelle:     Loop "  %68 = getelementptr inbounds %struct.jpeg_compress_struct.275, %struct.jpeg_compress_struct.275* %0, i64 0, i32 42, i64 %67" (3.024282e-07%)
Noelle:     Loop "  %106 = load i32, i32* %60, align 8, !tbaa !51" (2.800261e-08%)
Noelle:     Loop "  %116 = load i32, i32* %60, align 8, !tbaa !51" (3.920366e-08%)
Noelle:  Function "start_pass_coef"
Noelle:  Function "select_scan_parameters"
Noelle:     Loop "  %32 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %83" (1.008094e-07%)
Noelle:     Loop "  %138 = add <2 x i64> %136, <i64 2, i64 2>" (0.000000e+00%)
Noelle:     Loop "  %172 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %124, i64 %171" (0.000000e+00%)
Noelle:  Function "flush_bits"
Noelle:     Loop "  %23 = lshr i64 %21, 16" (1.449135e-07%)
Noelle:  Function "finish_pass_master"
Noelle:  Function "start_pass_fdctmgr"
Noelle:     Loop "  %17 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %16, i64 0, i32 4" (3.388316e-07%)
Noelle:     Loop "  %209 = shl i64 %208, 3" (0.000000e+00%)
Noelle:     Loop "  %170 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %33, i64 0, i32 0, i64 %169" (0.000000e+00%)
Noelle:  Function "free_pool"
Noelle:     Loop "  %22 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %21, i64 0, i32 10" (0.000000e+00%)
Noelle:     Loop "  %36 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %35, i64 0, i32 10" (2.240209e-08%)
Noelle:     Loop "  %54 = bitcast %union.large_pool_struct* %53 to i8*" (1.134106e-07%)
Noelle:     Loop "  %73 = bitcast %union.small_pool_struct* %72 to i8*" (7.490699e-08%)
Noelle:  Function "emit_sof"
Noelle:     Loop "  %250 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %248, i64 0, i32 0" (1.253117e-07%)
Noelle:  Function "start_input_ppm"
Noelle:     Loop "  %179 = load i8*, i8** %167, align 8, !tbaa !67" (0.000000e+00%)
Noelle:  Function "self_destruct"
Noelle:  Function "write_file_header"
Noelle:  Function "alloc_large"
Noelle:  Function "request_virt_barray"
Noelle:  Function "read_pbm_integer"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (3.220300e-08%)
Noelle:     Loop "  %6 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:     Loop "  %31 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (9.450882e-08%)
Noelle:     Loop "  %33 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:  Function "jinit_c_coef_controller"
Noelle:     Loop "  %24 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (8.260771e-08%)
Noelle:  Function "jinit_downsampler"
Noelle:     Loop "  %40 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %39, i64 0, i32 2" (6.118194e-01%)
Noelle:  Function "jpeg_simple_progression"
Noelle:     Loop "  %190 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %188, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %220 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %218, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %131 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %128" (0.000000e+00%)
Noelle:     Loop "  %167 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %164" (0.000000e+00%)
Noelle:     Loop "  %179 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %178" (0.000000e+00%)
Noelle:     Loop "  %240 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %238, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %270 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %268, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %284 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %282, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %313 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %311, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %327 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %325, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %356 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %354, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %446 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %444, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %476 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %474, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %388 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %385" (0.000000e+00%)
Noelle:     Loop "  %424 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %421" (0.000000e+00%)
Noelle:     Loop "  %436 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %435" (0.000000e+00%)
Noelle:     Loop "  %494 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %492, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %523 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %521, i64 0, i32 0" (0.000000e+00%)
Noelle:  Function "jinit_c_prep_controller"
Noelle:     Loop "  %83 = mul i64 %62, %80" (0.000000e+00%)
Noelle:     Loop "  %140 = add nsw i64 %138, %60" (0.000000e+00%)
Noelle:     Loop "  %231 = add nsw i64 %230, %60" (0.000000e+00%)
Noelle:     Loop "  %278 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (5.810542e-08%)
Noelle:  Function "jpeg_default_colorspace"
Noelle:     Loop "  %202 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %199, i64 %201, i32 0" (0.000000e+00%)
Noelle:  Function "jpeg_CreateCompress"
Noelle:  Function "jinit_c_main_controller"
Noelle:     Loop "  %34 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (4.340405e-08%)
Noelle:  Function "jpeg_suppress_tables"
Noelle:  Function "jdiv_round_up"
Noelle:  Function "jinit_memory_mgr"
Noelle:  Function "jinit_color_converter"
Noelle:  Function "jpeg_alloc_huff_table"
Noelle:  Function "jround_up"
Noelle:  Function "jinit_forward_dct"
Noelle:  Function "write_file_trailer"
Noelle:  Function "jpeg_std_error"
Noelle:  Function "term_destination"
Noelle:  Function "jpeg_stdio_dest"
Noelle:  Function "start_pass_main"
Noelle:  Function "jinit_marker_writer"
Noelle:  Function "jpeg_alloc_quant_table"
Noelle:  Function "start_pass_prep"
Noelle:  Function "jpeg_free_large"
Noelle:  Function "jpeg_get_large"
Noelle:  Function "jinit_phuff_encoder"
Noelle:  Function "jpeg_destroy_compress"
Noelle:  Function "init_destination"
Noelle:  Function "jpeg_free_small"
Noelle:  Function "jpeg_get_small"
Noelle:  Function "jpeg_destroy"
Noelle:  Function "jinit_read_ppm"
Noelle:  Function "jpeg_abort"
Noelle:  Function "emit_message"
Noelle:  Function "reset_error_mgr"
Noelle:  Function "jpeg_mem_available"
Noelle:  Function "start_pass_downsample"
Noelle:  Function "finish_input_ppm"
Noelle:  Function "output_message"
Noelle:  Function "request_virt_sarray"
Noelle:  Function "error_exit"
Noelle:  Function "jpeg_quality_scaling"
Noelle:  Function "format_message"
Noelle:     Loop "  %41 = getelementptr inbounds i8, i8* %40, i64 1" (0.000000e+00%)
Noelle:  Function "jpeg_add_quant_table"
Noelle:     Loop "  %29 = getelementptr inbounds i32, i32* %2, i64 %28" (0.000000e+00%)
Noelle:     Loop "  %44 = getelementptr inbounds i32, i32* %2, i64 %43" (0.000000e+00%)
Noelle:  Function "jpeg_write_raw_data"
Noelle:  Function "access_virt_sarray"
Noelle:     Loop "  %79 = mul nsw i64 %76, %46" (0.000000e+00%)
Noelle:     Loop "  %159 = mul nsw i64 %156, %128" (0.000000e+00%)
Noelle:     Loop "  %221 = load i8**, i8*** %218, align 8, !tbaa !38" (0.000000e+00%)
Noelle:  Function "jpeg_fdct_ifast"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "jpeg_mem_term"
Noelle:  Function "jpeg_mem_init"
Noelle:  Function "jpeg_open_backing_store"
Noelle:  Function "pre_process_context"
Noelle:     Loop "  %27 = load i32, i32* %2, align 4, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %90 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %89" (0.000000e+00%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %91, i32 %95, i8** %91, i32 %96, i32 1, i32 %92) #20" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp slt i32 %50, 1" (0.000000e+00%)
Noelle:     Loop "  %56 = load i8**, i8*** %54, align 8, !tbaa !50" (0.000000e+00%)
Noelle:  Function "null_convert"
Noelle:     Loop "  %25 = add nsw i32 %22, -1" (0.000000e+00%)
Noelle:     Loop "  %80 = getelementptr inbounds i8**, i8*** %2, i64 %79" (0.000000e+00%)
Noelle:     Loop "  %88 = getelementptr inbounds i8, i8* %86, i64 %79" (0.000000e+00%)
Noelle:     Loop "  %113 = getelementptr inbounds i8, i8* %111, i64 %79" (0.000000e+00%)
Noelle:     Loop "  %29 = getelementptr inbounds i8**, i8*** %2, i64 %28" (0.000000e+00%)
Noelle:     Loop "  %37 = getelementptr inbounds i8, i8* %35, i64 %28" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8**, i8*** %2, i64 %61" (0.000000e+00%)
Noelle:     Loop "  %70 = getelementptr inbounds i8, i8* %68, i64 %61" (0.000000e+00%)
Noelle:  Function "forward_DCT_float"
Noelle:     Loop "  %28 = zext i32 %27 to i64" (0.000000e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %85 = getelementptr inbounds [64 x float], [64 x float]* %8, i64 0, i64 %84" (0.000000e+00%)
Noelle:  Function "jzero_far"
Noelle:  Function "jpeg_fdct_float"
Noelle:  Function "pass_startup"
Noelle:  Function "alloc_barray"
Noelle:     Loop "  %31 = sub i32 %3, %29" (0.000000e+00%)
Noelle:     Loop "  %46 = add i32 %44, 1" (0.000000e+00%)
Noelle:     Loop "  %61 = add i32 %60, 1" (0.000000e+00%)
Noelle:  Function "jpeg_set_colorspace"
Noelle:     Loop "  %130 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %127, i64 %129, i32 0" (0.000000e+00%)
Noelle:  Function "jcopy_block_row"
Noelle:  Function "get_text_rgb_row"
Noelle:     Loop "  %17 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "get_word_gray_row"
Noelle:     Loop "  %54 = getelementptr inbounds i8, i8* %53, i64 1" (0.000000e+00%)
Noelle:  Function "load_interlaced_image"
Noelle:     Loop "  %46 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %16, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %58 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:     Loop "  store i64 %20, i64* %12, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %36 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "get_scaled_gray_row"
Noelle:     Loop "  %38 = getelementptr inbounds i8, i8* %36, i64 1" (0.000000e+00%)
Noelle:     Loop "  %54 = getelementptr inbounds i8, i8* %53, i64 1" (0.000000e+00%)
Noelle:  Function "get_word_rgb_row"
Noelle:     Loop "  %35 = getelementptr inbounds i8, i8* %34, i64 1" (0.000000e+00%)
Noelle:  Function "get_scaled_rgb_row"
Noelle:     Loop "  %61 = getelementptr inbounds i8, i8* %60, i64 1" (0.000000e+00%)
Noelle:  Function "get_text_gray_row"
Noelle:     Loop "  %17 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "jinit_read_gif"
Noelle:  Function "cmyk_ycck_convert"
Noelle:     Loop "  %27 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %43 = load i8, i8* %42, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "fullsize_smooth_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %8, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %8, i64 %59" (0.000000e+00%)
Noelle:     Loop "  %82 = getelementptr inbounds i8*, i8** %3, i64 %81" (0.000000e+00%)
Noelle:     Loop "  %131 = getelementptr inbounds i8, i8* %130, i64 1" (0.000000e+00%)
Noelle:  Function "h2v1_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59" (0.000000e+00%)
Noelle:     Loop "  %74 = getelementptr inbounds i8*, i8** %2, i64 %73" (0.000000e+00%)
Noelle:     Loop "  %81 = load i8, i8* %79, align 1, !tbaa !42" (0.000000e+00%)
Noelle:  Function "h2v2_smooth_downsample"
Noelle:     Loop "  %33 = getelementptr inbounds i8*, i8** %8, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %8, i64 %60" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds i8*, i8** %3, i64 %82" (0.000000e+00%)
Noelle:     Loop "  %159 = getelementptr inbounds i8, i8* %158, i64 1" (0.000000e+00%)
Noelle:  Function "int_downsample"
Noelle:     Loop "  %41 = getelementptr inbounds i8*, i8** %2, i64 %39" (0.000000e+00%)
Noelle:     Loop "  %71 = getelementptr inbounds i8*, i8** %2, i64 %69" (0.000000e+00%)
Noelle:     Loop "  br i1 %83, label %._crit_edge40.._crit_edge36_crit_edge, label %107" (0.000000e+00%)
Noelle:     Loop "  br i1 %84, label %113, label %.loopexit2._crit_edge..loopexit2_crit_edge" (0.000000e+00%)
Noelle:     Loop "  %169 = add nsw i64 %167, %106" (0.000000e+00%)
Noelle:     Loop "  %178 = getelementptr i8, i8* %172, i64 %174" (0.000000e+00%)
Noelle:     Loop "  %223 = getelementptr inbounds i8, i8* %221, i64 1" (0.000000e+00%)
Noelle:     Loop "  %134 = add nsw i64 %132, %106" (0.000000e+00%)
Noelle:     Loop "  %158 = getelementptr inbounds i8, i8* %156, i64 1" (0.000000e+00%)
Noelle:     Loop "  %117 = add nsw i64 %115, %106" (0.000000e+00%)
Noelle:     Loop "  %124 = getelementptr inbounds i8, i8* %122, i64 1" (0.000000e+00%)
Noelle:  Function "jinit_huff_encoder"
Noelle:  Function "start_pass_huff"
Noelle:     Loop "  %77 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %76" (1.405031e-05%)
Noelle:     Loop "  %19 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %18" (0.000000e+00%)
Noelle:  Function "jinit_read_targa"
Noelle:  Function "usage"
Noelle:  Function "start_input_gif"
Noelle:     Loop "  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %144 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %193 = icmp sgt i32 %192, 0" (0.000000e+00%)
Noelle:     Loop "  %258 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:  Function "finish_input_gif"
Noelle:  Function "get_pixel_rows"
Noelle:     Loop "  %18 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "LZWReadByte"
Noelle:     Loop "  %137 = load i8*, i8** %134, align 8, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %81 = icmp sgt i32 %80, 0" (0.000000e+00%)
Noelle:     Loop "  %39 = tail call fastcc i32 @GetCode(%struct.gif_source_struct* nonnull %0)" (0.000000e+00%)
Noelle:  Function "GetCode"
Noelle:     Loop "  %18 = load i32, i32* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "get_interlaced_row"
Noelle:     Loop "  %72 = getelementptr inbounds i8, i8* %69, i64 1" (0.000000e+00%)
Noelle:  Function "encode_mcu_gather"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.huff_entropy_encoder, %struct.huff_entropy_encoder* %5, i64 0, i32 1, i32 2, i64 %17" (0.000000e+00%)
Noelle:     Loop "  %32 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %70 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %68" (0.000000e+00%)
Noelle:  Function "start_input_tga"
Noelle:     Loop "  %214 = add nsw i32 %213, -1" (0.000000e+00%)
Noelle:     Loop "  %274 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "finish_pass_gather"
Noelle:     Loop "  %15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %14" (5.600522e-09%)
Noelle:  Function "finish_pass_huff"
Noelle:     Loop "  %30 = lshr i64 %29, 16" (0.000000e+00%)
Noelle:  Function "emit_restart"
Noelle:     Loop "  %76 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 7, i64 %75" (0.000000e+00%)
Noelle:  Function "read_stdin"
Noelle:  Function "read_text_integer"
Noelle:     Loop "  %4 = tail call fastcc i32 @text_getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:     Loop "  %24 = load i16*, i16** %.lcssa20, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "text_getc"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:  Function "read_scan_script"
Noelle:     Loop "  %23 = icmp eq i32 %22, 100" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp eq i64 %35, 4" (0.000000e+00%)
Noelle:  Function "read_scan_integer"
Noelle:     Loop "  %11 = load i16*, i16** %9, align 8, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %20 = tail call i32 @getc(%struct._IO_FILE* %0) #21" (0.000000e+00%)
Noelle:  Function "set_quant_slots"
Noelle:     Loop "  %9 = load i8, i8* %8, align 1, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %29 = load i8, i8* %28, align 1, !tbaa !34" (0.000000e+00%)
Noelle:  Function "set_sample_factors"
Noelle:     Loop "  %12 = load i8, i8* %11, align 1, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %38 = load i8, i8* %37, align 1, !tbaa !30" (0.000000e+00%)
Noelle:  Function "read_quant_tables"
Noelle:     Loop "  %24 = icmp eq i32 %23, 4" (0.000000e+00%)
Noelle:     Loop "  %34 = call fastcc i32 @read_text_integer(%struct._IO_FILE* nonnull %12, i64* nonnull %6, i32* nonnull %5)" (0.000000e+00%)
Noelle:  Function "compress_data"
Noelle:     Loop "  %28 = icmp ugt i32 %26, %8" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %19, align 4, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %39 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %37" (0.000000e+00%)
Noelle:     Loop "  %60 = load i32, i32* %20, align 8, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %145 = load i16, i16* %136, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %175 = load i16, i16* %136, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %105 = add i64 %104, %70" (0.000000e+00%)
Noelle:  Function "null_method"
Noelle:  Function "grayscale_convert"
Noelle:     Loop "  %90 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %98 = load i8, i8* %96, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %77 = load i8, i8* %75, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %23 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %29, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %56 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %64 = load i8, i8* %62, align 1, !tbaa !40" (0.000000e+00%)
Noelle:  Function "rgb_gray_convert"
Noelle:     Loop "  %24 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %30, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "write_stdout"
Noelle:  Function "jpeg_abort_compress"
Noelle:  Function "jpeg_write_marker"
Noelle:  Function "get_memory_row"
Noelle:  Function "encode_mcu_huff"
Noelle:     Loop "  %49 = lshr i64 %48, 16" (0.000000e+00%)
Noelle:     Loop "  %140 = getelementptr inbounds %struct.working_state, %struct.working_state* %3, i64 0, i32 2, i32 2, i64 %139" (0.000000e+00%)
Noelle:     Loop "  %156 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %155" (0.000000e+00%)
Noelle:     Loop "  %219 = lshr i64 %218, 16" (0.000000e+00%)
Noelle:     Loop "  %280 = lshr i64 %279, 16" (0.000000e+00%)
Noelle:     Loop "  %337 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %335" (0.000000e+00%)
Noelle:     Loop "  %352 = load i32, i32* %330, align 4, !tbaa !49" (0.000000e+00%)
Noelle:     Loop "  %377 = lshr i64 %376, 16" (0.000000e+00%)
Noelle:     Loop "  %469 = lshr i64 %468, 16" (0.000000e+00%)
Noelle:     Loop "  %529 = lshr i64 %528, 16" (0.000000e+00%)
Noelle:     Loop "  %613 = lshr i64 %612, 16" (0.000000e+00%)
Noelle:  Function "finish_input_tga"
Noelle:  Function "read_rle_pixel"
Noelle:     Loop "  %35 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "read_non_rle_pixel"
Noelle:     Loop "  %8 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "get_8bit_row"
Noelle:     Loop "  %22 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %15, align 8, !tbaa !43" (0.000000e+00%)
Noelle:  Function "get_16bit_row"
Noelle:     Loop "  %19 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_24bit_row"
Noelle:     Loop "  %20 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_8bit_gray_row"
Noelle:     Loop "  %17 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "preload_image"
Noelle:     Loop "  %37 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  store i64 %20, i64* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "jpeg_write_tables"
Noelle:  Function "jinit_read_bmp"
Noelle:  Function "start_input_bmp"
Noelle:     Loop "  %461 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %411 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %550 = add nsw i64 %549, -1" (0.000000e+00%)
Noelle:  Function "finish_input_bmp"
Noelle:  Function "preload_image.9"
Noelle:     Loop "  %55 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %18, align 8, !tbaa !48" (0.000000e+00%)
Noelle:     Loop "  %67 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:     Loop "  store i64 %23, i64* %14, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %39 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "write_any_marker"
Noelle:     Loop "  %99 = add i32 %97, -1" (0.000000e+00%)
Noelle:  Function "write_tables_only"
Noelle:  Function "get_8bit_row.10"
Noelle:     Loop "  %55 = getelementptr inbounds i8, i8* %54, i64 1" (0.000000e+00%)
Noelle:  Function "get_24bit_row.11"
Noelle:     Loop "  %44 = getelementptr inbounds i8, i8* %43, i64 1" (0.000000e+00%)
NOELLE: FixedPoint:       There are 72 different instructions and 71 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.Ihu8KTh6Li -o /tmp/tmp.Ihu8KTh6Li
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.Ihu8KTh6Li -o /tmp/tmp.Ihu8KTh6Li
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.G9wA6FIGtg -o /tmp/tmp.Ihu8KTh6Li
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.G9wA6FIGtg -o /tmp/tmp.Ihu8KTh6Li
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.G9wA6FIGtg -o /tmp/tmp.Ihu8KTh6Li
Inliner: Start
Inliner:   Number of program instructions = 25724
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.jpeg_error_mgr, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.jpeg_compress_struct, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   No remaining calls need to be inlined due to loop-carried data dependences
Inliner:   The code has not been modified
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %110 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !56" (7.516894e+01%)
Noelle:  Function "encode_mcu_AC_refine"
Noelle:     Loop "  %40 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %38" (5.264999e+00%)
Noelle:     Loop "  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %69" (5.659719e+00%)
Noelle:     Loop "  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %6)" (8.559017e-03%)
Noelle:     Loop "  %129 = lshr i64 %127, 16" (2.911831e-04%)
Noelle:     Loop "  %199 = icmp eq i32 %196, 0" (2.927278e-03%)
Noelle:     Loop "  %212 = lshr i64 %210, 16" (2.398088e-04%)
Noelle:     Loop "  %340 = lshr i64 %338, 16" (1.497039e-02%)
Noelle:     Loop "  %416 = lshr i64 %414, 16" (4.704078e-03%)
Noelle:     Loop "  %487 = icmp eq i32 %484, 0" (1.832835e-01%)
Noelle:     Loop "  %500 = lshr i64 %498, 16" (1.508225e-02%)
Noelle:  Function "encode_mcu_AC_first"
Noelle:     Loop "  %42 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %40" (4.214991e+00%)
Noelle:     Loop "  %74 = load i32, i32* %33, align 8, !tbaa !61" (7.817650e-04%)
Noelle:     Loop "  %118 = lshr i64 %116, 16" (2.416170e-04%)
Noelle:     Loop "  %180 = ashr i32 %179, 1" (1.849728e-01%)
Noelle:     Loop "  %233 = lshr i64 %231, 16" (8.361566e-02%)
Noelle:     Loop "  %306 = lshr i64 %304, 16" (4.021124e-02%)
Noelle:  Function "rgb_ycc_convert"
Noelle:     Loop "  %26 = load i8**, i8*** %2, align 8, !tbaa !45" (3.461440e+00%)
Noelle:     Loop "  %39 = load i8, i8* %38, align 1, !tbaa !46" (3.461341e+00%)
Noelle:  Function "forward_DCT"
Noelle:     Loop "  %28 = zext i32 %27 to i64" (2.186665e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29" (5.340669e-01%)
Noelle:     Loop "  %77 = getelementptr inbounds i32, i32* %18, i64 %76" (1.639457e+00%)
Noelle:  Function "jpeg_fdct_islow"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !30" (9.491037e-01%)
Noelle:     Loop "  %95 = load i32, i32* %94, align 4, !tbaa !30" (9.679215e-01%)
Noelle:  Function "compress_output"
Noelle:     Loop "  %16 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %15" (1.793714e-04%)
Noelle:     Loop "  %54 = icmp ult i32 %52, %51" (7.391069e-01%)
Noelle:     Loop "  %56 = load i32, i32* %8, align 4, !tbaa !39" (7.389627e-01%)
Noelle:     Loop "  %62 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %60" (5.848445e-01%)
Noelle:     Loop "  %131 = add nsw i64 %129, %53" (0.000000e+00%)
Noelle:     Loop "  %137 = add i64 %136, %135" (0.000000e+00%)
Noelle:     Loop "  %160 = getelementptr inbounds [64 x i16], [64 x i16]* %158, i64 1" (0.000000e+00%)
Noelle:     Loop "  %103 = add nsw i64 %101, %53" (0.000000e+00%)
Noelle:     Loop "  %109 = add i64 %108, %107" (0.000000e+00%)
Noelle:     Loop "  %85 = sext i32 %84 to i64" (2.518993e-01%)
Noelle:     Loop "  %93 = getelementptr inbounds [64 x i16], [64 x i16]* %91, i64 1" (1.166901e-01%)
Noelle:  Function "emit_eobrun"
Noelle:     Loop "  %7 = ashr i32 %5, 1" (2.881934e-02%)
Noelle:     Loop "  %68 = lshr i64 %66, 16" (1.538832e-02%)
Noelle:     Loop "  %154 = lshr i64 %152, 16" (1.576173e-03%)
Noelle:     Loop "  %231 = icmp eq i32 %228, 0" (4.506178e-01%)
Noelle:     Loop "  %246 = lshr i64 %244, 16" (3.940301e-02%)
Noelle:  Function "h2v2_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59" (1.233865e-04%)
Noelle:     Loop "  %75 = or i64 %74, 1" (6.112814e-01%)
Noelle:     Loop "  %86 = load i8, i8* %84, align 1, !tbaa !44" (6.112025e-01%)
Noelle:  Function "encode_mcu_DC_first"
Noelle:     Loop "  %34 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %33" (1.875286e-01%)
Noelle:     Loop "  %105 = lshr i64 %103, 16" (8.136183e-03%)
Noelle:     Loop "  %183 = lshr i64 %181, 16" (8.193814e-03%)
Noelle:  Function "encode_mcu_DC_refine"
Noelle:     Loop "  %36 = load i32, i32* %30, align 8, !tbaa !50" (4.789387e-02%)
Noelle:     Loop "  %57 = lshr i64 %55, 16" (3.288730e-03%)
Noelle:  Function "compress_first_pass"
Noelle:     Loop "  %21 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (6.608897e-05%)
Noelle:     Loop "  %141 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %140" (1.636263e-05%)
Noelle:     Loop "  %90 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %89" (0.000000e+00%)
Noelle:     Loop "  %105 = getelementptr inbounds [64 x i16], [64 x i16]* %98, i64 %103" (0.000000e+00%)
Noelle:     Loop "  %133 = getelementptr inbounds [64 x i16], [64 x i16]* %98, i64 %131" (0.000000e+00%)
Noelle:     Loop "  %67 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %66" (0.000000e+00%)
Noelle:     Loop "  %82 = getelementptr inbounds [64 x i16], [64 x i16]* %75, i64 %80" (0.000000e+00%)
Noelle:     Loop "  %236 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %235" (0.000000e+00%)
Noelle:     Loop "  %175 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %174" (0.000000e+00%)
Noelle:     Loop "  %184 = getelementptr inbounds [64 x i16], [64 x i16]* %181, i64 %164, i64 0" (0.000000e+00%)
Noelle:     Loop "  %188 = getelementptr inbounds [64 x i16], [64 x i16]* %182, i64 %186, i64 0" (0.000000e+00%)
Noelle:     Loop "  %200 = getelementptr inbounds [64 x i16], [64 x i16]* %182, i64 %198, i64 0" (0.000000e+00%)
Noelle:     Loop "  %215 = getelementptr inbounds [64 x i16], [64 x i16]* %212, i64 %164, i64 0" (0.000000e+00%)
Noelle:     Loop "  %223 = getelementptr inbounds [64 x i16], [64 x i16]* %213, i64 %221, i64 0" (0.000000e+00%)
Noelle:     Loop "  %228 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %227" (0.000000e+00%)
Noelle:  Function "finish_pass_gather_phuff"
Noelle:     Loop "  %46 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %45" (2.206046e-03%)
Noelle:     Loop "  %19 = load i32, i32* %14, align 4, !tbaa !43" (5.515318e-04%)
Noelle:  Function "jpeg_gen_optimal_table"
Noelle:     Loop "  %17 = getelementptr inbounds i64, i64* %2, i64 %14" (2.127677e-03%)
Noelle:     Loop "  %34 = getelementptr inbounds i64, i64* %2, i64 %31" (8.896430e-04%)
Noelle:     Loop "  %66 = sext i32 %65 to i64" (1.160708e-05%)
Noelle:     Loop "  %82 = sext i32 %81 to i64" (1.144677e-05%)
Noelle:     Loop "  %90 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %89" (1.996166e-05%)
Noelle:     Loop "  %108 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %106" (4.325704e-06%)
Noelle:     Loop "  br label %._crit_edge47" (2.960576e-06%)
Noelle:     Loop "  %116 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %115" (8.330777e-07%)
Noelle:     Loop "  %137 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %136" (1.351126e-07%)
Noelle:     Loop "  br label %._crit_edge52" (6.050433e-04%)
Noelle:     Loop "  %149 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %146" (6.032582e-04%)
Noelle:  Function "access_virt_barray"
Noelle:     Loop "  %80 = mul nsw i64 %77, %47" (0.000000e+00%)
Noelle:     Loop "  %162 = mul nsw i64 %159, %131" (0.000000e+00%)
Noelle:     Loop "  %226 = load [64 x i16]**, [64 x i16]*** %223, align 8, !tbaa !40" (0.000000e+00%)
Noelle:  Function "pre_process_data"
Noelle:     Loop "  %23 = load i32, i32* %5, align 4, !tbaa !39" (2.246615e-04%)
Noelle:     Loop "  %54 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %53" (1.225114e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %55, i32 %59, i8** %55, i32 %60, i32 1, i32 %56) #20" (8.050751e-08%)
Noelle:     Loop "  %99 = getelementptr inbounds i8**, i8*** %4, i64 %97" (3.808355e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %100, i32 %110, i8** %100, i32 %111, i32 1, i32 %103) #20" (3.262304e-07%)
Noelle:  Function "fullsize_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %3, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %3, i64 %60" (6.169326e-05%)
Noelle:  Function "jpeg_write_scanlines"
Noelle:  Function "sep_downsample"
Noelle:     Loop "  %18 = getelementptr inbounds i8**, i8*** %1, i64 %16" (1.604025e-04%)
Noelle:  Function "process_data_simple_main"
Noelle:     Loop "  %21 = icmp ult i32 %20, 8" (6.846989e-05%)
Noelle:  Function "jpeg_finish_compress"
Noelle:     Loop "  %42 = getelementptr inbounds %struct.jpeg_comp_master, %struct.jpeg_comp_master* %41, i64 0, i32 0" (1.058114e-04%)
Noelle:     Loop "  %48 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %37, align 8, !tbaa !57" (1.055726e-04%)
Noelle:  Function "jcopy_sample_rows"
Noelle:     Loop "  %29 = getelementptr inbounds i8*, i8** %27, i64 1" (3.948368e-05%)
Noelle:  Function "get_raw_row"
Noelle:  Function "empty_output_buffer"
Noelle:  Function "jpeg_make_c_derived_tbl"
Noelle:     Loop "  %23 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %1, i64 0, i32 0, i64 %20" (4.383809e-06%)
Noelle:     Loop "  %49 = add nsw <2 x i64> %46, <i64 8, i64 8>" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw <2 x i64> %58, <i64 1, i64 1>" (2.338218e-07%)
Noelle:     Loop "  %96 = sext i8 %92 to i32" (5.223187e-06%)
Noelle:     Loop "  %102 = add nsw i64 %100, 1" (2.848566e-06%)
Noelle:     Loop "  %143 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 %141" (3.943468e-06%)
Noelle:  Function "write_scan_header"
Noelle:     Loop "  %14 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %13" (8.341978e-06%)
Noelle:     Loop "  %287 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %286" (5.411505e-07%)
Noelle:  Function "realize_virt_arrays"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %8, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %41 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %38, i64 0, i32 0" (6.230581e-08%)
Noelle:     Loop "  %92 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %91, i64 0, i32 0" (9.821916e-07%)
Noelle:     Loop "  %143 = sub i32 %119, %141" (0.000000e+00%)
Noelle:     Loop "  %191 = add i32 %189, 1" (0.000000e+00%)
Noelle:     Loop "  %206 = add i32 %205, 1" (0.000000e+00%)
Noelle:     Loop "  %234 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %233, i64 0, i32 0" (8.689211e-06%)
Noelle:     Loop "  %288 = sub i32 %262, %286" (8.470790e-06%)
Noelle:     Loop "  %332 = add i32 %330, 1" (3.150294e-08%)
Noelle:     Loop "  %347 = add i32 %346, 1" (8.314676e-06%)
Noelle:  Function "emit_dht"
Noelle:     Loop "  %202 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 0, i64 %201" (2.233208e-06%)
Noelle:     Loop "  %225 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 1, i64 %224" (4.798948e-06%)
Noelle:  Function "rgb_ycc_start"
Noelle:     Loop "  %15 = mul nuw nsw i64 %14, 19595" (6.809535e-06%)
Noelle:  Function "jpeg_start_compress"
Noelle:  Function "jinit_compress_master"
Noelle:  Function "jinit_c_master_control"
Noelle:     Loop "  %106 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %105, i64 0, i32 2" (6.650620e-08%)
Noelle:     Loop "  %155 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %154, i64 0, i32 1" (1.036097e-07%)
Noelle:     Loop "  %222 = bitcast i32* %220 to i8*" (2.030189e-08%)
Noelle:     Loop "  %242 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 0" (4.500020e-06%)
Noelle:     Loop "  %258 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %257" (1.638153e-07%)
Noelle:     Loop "  %340 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %339" (3.951869e-06%)
Noelle:     Loop "  %404 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %403" (0.000000e+00%)
Noelle:     Loop "  %390 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %389" (1.473637e-06%)
Noelle:     Loop "  %368 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %367" (2.315816e-06%)
Noelle:     Loop "  %355 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %354" (0.000000e+00%)
Noelle:     Loop "  %431 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %430" (0.000000e+00%)
Noelle:     Loop "  %467 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %466, i64 0" (2.660248e-08%)
Noelle:     Loop "  %482 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i64 0, i64 %481" (0.000000e+00%)
Noelle:  Function "parse_switches"
Noelle:     Loop "  %34 = sext i32 %33 to i64" (2.922773e-06%)
Noelle:  Function "write_frame_header"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %8, i64 0, i32 4" (3.047384e-06%)
Noelle:     Loop "  %43 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %40, i64 0, i32 5" (0.000000e+00%)
Noelle:  Function "jpeg_set_linear_quality"
Noelle:     Loop "  %41 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %40" (8.057752e-07%)
Noelle:     Loop "  %26 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %25" (8.057752e-07%)
Noelle:     Loop "  %90 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %89" (8.057752e-07%)
Noelle:     Loop "  %75 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %74" (8.057752e-07%)
Noelle:  Function "emit_dqt"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %5, i64 0, i32 0, i64 %16" (7.371688e-07%)
Noelle:     Loop "  %197 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %196" (2.149200e-06%)
Noelle:     Loop "  %150 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %149" (0.000000e+00%)
Noelle:  Function "keymatch"
Noelle:     Loop "  %10 = getelementptr inbounds i8, i8* %7, i64 1" (2.128199e-06%)
Noelle:  Function "jpeg_set_defaults"
Noelle:  Function "prepare_for_pass"
Noelle:  Function "jpeg_set_quality"
Noelle:  Function "alloc_small"
Noelle:     Loop "  %35 = getelementptr inbounds %union.small_pool_struct, %union.small_pool_struct* %34, i64 0, i32 0, i32 2" (2.037190e-07%)
Noelle:     Loop "  %59 = lshr i64 %58, 1" (0.000000e+00%)
Noelle:  Function "finish_pass_phuff"
Noelle:  Function "start_pass_phuff"
Noelle:     Loop "  %136 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %135" (0.000000e+00%)
Noelle:     Loop "  %45 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %44" (2.800261e-07%)
Noelle:     Loop "  %110 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %109" (0.000000e+00%)
Noelle:     Loop "  %76 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %75" (1.652154e-07%)
Noelle:  Function "alloc_sarray"
Noelle:     Loop "  %29 = sub i32 %3, %27" (4.879455e-07%)
Noelle:     Loop "  %43 = add i32 %41, 1" (4.830451e-08%)
Noelle:     Loop "  %58 = add i32 %57, 1" (1.491139e-07%)
Noelle:  Function "per_scan_setup"
Noelle:     Loop "  %68 = getelementptr inbounds %struct.jpeg_compress_struct.275, %struct.jpeg_compress_struct.275* %0, i64 0, i32 42, i64 %67" (3.024282e-07%)
Noelle:     Loop "  %106 = load i32, i32* %60, align 8, !tbaa !51" (2.800261e-08%)
Noelle:     Loop "  %116 = load i32, i32* %60, align 8, !tbaa !51" (3.920366e-08%)
Noelle:  Function "start_pass_coef"
Noelle:  Function "select_scan_parameters"
Noelle:     Loop "  %32 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %83" (1.008094e-07%)
Noelle:     Loop "  %138 = add <2 x i64> %136, <i64 2, i64 2>" (0.000000e+00%)
Noelle:     Loop "  %172 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %124, i64 %171" (0.000000e+00%)
Noelle:  Function "flush_bits"
Noelle:     Loop "  %23 = lshr i64 %21, 16" (1.449135e-07%)
Noelle:  Function "finish_pass_master"
Noelle:  Function "start_pass_fdctmgr"
Noelle:     Loop "  %17 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %16, i64 0, i32 4" (3.388316e-07%)
Noelle:     Loop "  %209 = shl i64 %208, 3" (0.000000e+00%)
Noelle:     Loop "  %170 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %33, i64 0, i32 0, i64 %169" (0.000000e+00%)
Noelle:  Function "free_pool"
Noelle:     Loop "  %22 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %21, i64 0, i32 10" (0.000000e+00%)
Noelle:     Loop "  %36 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %35, i64 0, i32 10" (2.240209e-08%)
Noelle:     Loop "  %54 = bitcast %union.large_pool_struct* %53 to i8*" (1.134106e-07%)
Noelle:     Loop "  %73 = bitcast %union.small_pool_struct* %72 to i8*" (7.490699e-08%)
Noelle:  Function "emit_sof"
Noelle:     Loop "  %250 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %248, i64 0, i32 0" (1.253117e-07%)
Noelle:  Function "start_input_ppm"
Noelle:     Loop "  %179 = load i8*, i8** %167, align 8, !tbaa !67" (0.000000e+00%)
Noelle:  Function "self_destruct"
Noelle:  Function "write_file_header"
Noelle:  Function "alloc_large"
Noelle:  Function "request_virt_barray"
Noelle:  Function "read_pbm_integer"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (3.220300e-08%)
Noelle:     Loop "  %6 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:     Loop "  %31 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (9.450882e-08%)
Noelle:     Loop "  %33 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:  Function "jinit_c_coef_controller"
Noelle:     Loop "  %24 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (8.260771e-08%)
Noelle:  Function "jinit_downsampler"
Noelle:     Loop "  %40 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %39, i64 0, i32 2" (6.118194e-01%)
Noelle:  Function "jpeg_simple_progression"
Noelle:     Loop "  %190 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %188, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %220 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %218, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %131 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %128" (0.000000e+00%)
Noelle:     Loop "  %167 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %164" (0.000000e+00%)
Noelle:     Loop "  %179 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %178" (0.000000e+00%)
Noelle:     Loop "  %240 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %238, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %270 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %268, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %284 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %282, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %313 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %311, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %327 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %325, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %356 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %354, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %446 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %444, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %476 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %474, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %388 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %385" (0.000000e+00%)
Noelle:     Loop "  %424 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %421" (0.000000e+00%)
Noelle:     Loop "  %436 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %435" (0.000000e+00%)
Noelle:     Loop "  %494 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %492, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %523 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %521, i64 0, i32 0" (0.000000e+00%)
Noelle:  Function "jinit_c_prep_controller"
Noelle:     Loop "  %83 = mul i64 %62, %80" (0.000000e+00%)
Noelle:     Loop "  %140 = add nsw i64 %138, %60" (0.000000e+00%)
Noelle:     Loop "  %231 = add nsw i64 %230, %60" (0.000000e+00%)
Noelle:     Loop "  %278 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (5.810542e-08%)
Noelle:  Function "jpeg_default_colorspace"
Noelle:     Loop "  %202 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %199, i64 %201, i32 0" (0.000000e+00%)
Noelle:  Function "jpeg_CreateCompress"
Noelle:  Function "jinit_c_main_controller"
Noelle:     Loop "  %34 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (4.340405e-08%)
Noelle:  Function "jpeg_suppress_tables"
Noelle:  Function "jdiv_round_up"
Noelle:  Function "jinit_memory_mgr"
Noelle:  Function "jinit_color_converter"
Noelle:  Function "jpeg_alloc_huff_table"
Noelle:  Function "jround_up"
Noelle:  Function "jinit_forward_dct"
Noelle:  Function "write_file_trailer"
Noelle:  Function "jpeg_std_error"
Noelle:  Function "term_destination"
Noelle:  Function "jpeg_stdio_dest"
Noelle:  Function "start_pass_main"
Noelle:  Function "jinit_marker_writer"
Noelle:  Function "jpeg_alloc_quant_table"
Noelle:  Function "start_pass_prep"
Noelle:  Function "jpeg_free_large"
Noelle:  Function "jpeg_get_large"
Noelle:  Function "jinit_phuff_encoder"
Noelle:  Function "jpeg_destroy_compress"
Noelle:  Function "init_destination"
Noelle:  Function "jpeg_free_small"
Noelle:  Function "jpeg_get_small"
Noelle:  Function "jpeg_destroy"
Noelle:  Function "jinit_read_ppm"
Noelle:  Function "jpeg_abort"
Noelle:  Function "emit_message"
Noelle:  Function "reset_error_mgr"
Noelle:  Function "jpeg_mem_available"
Noelle:  Function "start_pass_downsample"
Noelle:  Function "finish_input_ppm"
Noelle:  Function "output_message"
Noelle:  Function "request_virt_sarray"
Noelle:  Function "error_exit"
Noelle:  Function "jpeg_quality_scaling"
Noelle:  Function "format_message"
Noelle:     Loop "  %41 = getelementptr inbounds i8, i8* %40, i64 1" (0.000000e+00%)
Noelle:  Function "jpeg_add_quant_table"
Noelle:     Loop "  %29 = getelementptr inbounds i32, i32* %2, i64 %28" (0.000000e+00%)
Noelle:     Loop "  %44 = getelementptr inbounds i32, i32* %2, i64 %43" (0.000000e+00%)
Noelle:  Function "jpeg_write_raw_data"
Noelle:  Function "access_virt_sarray"
Noelle:     Loop "  %79 = mul nsw i64 %76, %46" (0.000000e+00%)
Noelle:     Loop "  %159 = mul nsw i64 %156, %128" (0.000000e+00%)
Noelle:     Loop "  %221 = load i8**, i8*** %218, align 8, !tbaa !38" (0.000000e+00%)
Noelle:  Function "jpeg_fdct_ifast"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "jpeg_mem_term"
Noelle:  Function "jpeg_mem_init"
Noelle:  Function "jpeg_open_backing_store"
Noelle:  Function "pre_process_context"
Noelle:     Loop "  %27 = load i32, i32* %2, align 4, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %90 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %89" (0.000000e+00%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %91, i32 %95, i8** %91, i32 %96, i32 1, i32 %92) #20" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp slt i32 %50, 1" (0.000000e+00%)
Noelle:     Loop "  %56 = load i8**, i8*** %54, align 8, !tbaa !50" (0.000000e+00%)
Noelle:  Function "null_convert"
Noelle:     Loop "  %25 = add nsw i32 %22, -1" (0.000000e+00%)
Noelle:     Loop "  %80 = getelementptr inbounds i8**, i8*** %2, i64 %79" (0.000000e+00%)
Noelle:     Loop "  %88 = getelementptr inbounds i8, i8* %86, i64 %79" (0.000000e+00%)
Noelle:     Loop "  %113 = getelementptr inbounds i8, i8* %111, i64 %79" (0.000000e+00%)
Noelle:     Loop "  %29 = getelementptr inbounds i8**, i8*** %2, i64 %28" (0.000000e+00%)
Noelle:     Loop "  %37 = getelementptr inbounds i8, i8* %35, i64 %28" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8**, i8*** %2, i64 %61" (0.000000e+00%)
Noelle:     Loop "  %70 = getelementptr inbounds i8, i8* %68, i64 %61" (0.000000e+00%)
Noelle:  Function "forward_DCT_float"
Noelle:     Loop "  %28 = zext i32 %27 to i64" (0.000000e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %85 = getelementptr inbounds [64 x float], [64 x float]* %8, i64 0, i64 %84" (0.000000e+00%)
Noelle:  Function "jzero_far"
Noelle:  Function "jpeg_fdct_float"
Noelle:  Function "pass_startup"
Noelle:  Function "alloc_barray"
Noelle:     Loop "  %31 = sub i32 %3, %29" (0.000000e+00%)
Noelle:     Loop "  %46 = add i32 %44, 1" (0.000000e+00%)
Noelle:     Loop "  %61 = add i32 %60, 1" (0.000000e+00%)
Noelle:  Function "jpeg_set_colorspace"
Noelle:     Loop "  %130 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %127, i64 %129, i32 0" (0.000000e+00%)
Noelle:  Function "jcopy_block_row"
Noelle:  Function "get_text_rgb_row"
Noelle:     Loop "  %17 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "get_word_gray_row"
Noelle:     Loop "  %54 = getelementptr inbounds i8, i8* %53, i64 1" (0.000000e+00%)
Noelle:  Function "load_interlaced_image"
Noelle:     Loop "  %46 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %16, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %58 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:     Loop "  store i64 %20, i64* %12, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %36 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "get_scaled_gray_row"
Noelle:     Loop "  %38 = getelementptr inbounds i8, i8* %36, i64 1" (0.000000e+00%)
Noelle:     Loop "  %54 = getelementptr inbounds i8, i8* %53, i64 1" (0.000000e+00%)
Noelle:  Function "get_word_rgb_row"
Noelle:     Loop "  %35 = getelementptr inbounds i8, i8* %34, i64 1" (0.000000e+00%)
Noelle:  Function "get_scaled_rgb_row"
Noelle:     Loop "  %61 = getelementptr inbounds i8, i8* %60, i64 1" (0.000000e+00%)
Noelle:  Function "get_text_gray_row"
Noelle:     Loop "  %17 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "jinit_read_gif"
Noelle:  Function "cmyk_ycck_convert"
Noelle:     Loop "  %27 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %43 = load i8, i8* %42, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "fullsize_smooth_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %8, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %8, i64 %59" (0.000000e+00%)
Noelle:     Loop "  %82 = getelementptr inbounds i8*, i8** %3, i64 %81" (0.000000e+00%)
Noelle:     Loop "  %131 = getelementptr inbounds i8, i8* %130, i64 1" (0.000000e+00%)
Noelle:  Function "h2v1_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59" (0.000000e+00%)
Noelle:     Loop "  %74 = getelementptr inbounds i8*, i8** %2, i64 %73" (0.000000e+00%)
Noelle:     Loop "  %81 = load i8, i8* %79, align 1, !tbaa !42" (0.000000e+00%)
Noelle:  Function "h2v2_smooth_downsample"
Noelle:     Loop "  %33 = getelementptr inbounds i8*, i8** %8, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %8, i64 %60" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds i8*, i8** %3, i64 %82" (0.000000e+00%)
Noelle:     Loop "  %159 = getelementptr inbounds i8, i8* %158, i64 1" (0.000000e+00%)
Noelle:  Function "int_downsample"
Noelle:     Loop "  %41 = getelementptr inbounds i8*, i8** %2, i64 %39" (0.000000e+00%)
Noelle:     Loop "  %71 = getelementptr inbounds i8*, i8** %2, i64 %69" (0.000000e+00%)
Noelle:     Loop "  br i1 %83, label %._crit_edge40.._crit_edge36_crit_edge, label %107" (0.000000e+00%)
Noelle:     Loop "  br i1 %84, label %113, label %.loopexit2._crit_edge..loopexit2_crit_edge" (0.000000e+00%)
Noelle:     Loop "  %169 = add nsw i64 %167, %106" (0.000000e+00%)
Noelle:     Loop "  %178 = getelementptr i8, i8* %172, i64 %174" (0.000000e+00%)
Noelle:     Loop "  %223 = getelementptr inbounds i8, i8* %221, i64 1" (0.000000e+00%)
Noelle:     Loop "  %134 = add nsw i64 %132, %106" (0.000000e+00%)
Noelle:     Loop "  %158 = getelementptr inbounds i8, i8* %156, i64 1" (0.000000e+00%)
Noelle:     Loop "  %117 = add nsw i64 %115, %106" (0.000000e+00%)
Noelle:     Loop "  %124 = getelementptr inbounds i8, i8* %122, i64 1" (0.000000e+00%)
Noelle:  Function "jinit_huff_encoder"
Noelle:  Function "start_pass_huff"
Noelle:     Loop "  %77 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %76" (1.405031e-05%)
Noelle:     Loop "  %19 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %18" (0.000000e+00%)
Noelle:  Function "jinit_read_targa"
Noelle:  Function "usage"
Noelle:  Function "start_input_gif"
Noelle:     Loop "  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %144 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %193 = icmp sgt i32 %192, 0" (0.000000e+00%)
Noelle:     Loop "  %258 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:  Function "finish_input_gif"
Noelle:  Function "get_pixel_rows"
Noelle:     Loop "  %18 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "LZWReadByte"
Noelle:     Loop "  %137 = load i8*, i8** %134, align 8, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %81 = icmp sgt i32 %80, 0" (0.000000e+00%)
Noelle:     Loop "  %39 = tail call fastcc i32 @GetCode(%struct.gif_source_struct* nonnull %0)" (0.000000e+00%)
Noelle:  Function "GetCode"
Noelle:     Loop "  %18 = load i32, i32* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "get_interlaced_row"
Noelle:     Loop "  %72 = getelementptr inbounds i8, i8* %69, i64 1" (0.000000e+00%)
Noelle:  Function "encode_mcu_gather"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.huff_entropy_encoder, %struct.huff_entropy_encoder* %5, i64 0, i32 1, i32 2, i64 %17" (0.000000e+00%)
Noelle:     Loop "  %32 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %70 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %68" (0.000000e+00%)
Noelle:  Function "start_input_tga"
Noelle:     Loop "  %214 = add nsw i32 %213, -1" (0.000000e+00%)
Noelle:     Loop "  %274 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "finish_pass_gather"
Noelle:     Loop "  %15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %14" (5.600522e-09%)
Noelle:  Function "finish_pass_huff"
Noelle:     Loop "  %30 = lshr i64 %29, 16" (0.000000e+00%)
Noelle:  Function "emit_restart"
Noelle:     Loop "  %76 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 7, i64 %75" (0.000000e+00%)
Noelle:  Function "read_stdin"
Noelle:  Function "read_text_integer"
Noelle:     Loop "  %4 = tail call fastcc i32 @text_getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:     Loop "  %24 = load i16*, i16** %.lcssa20, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "text_getc"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:  Function "read_scan_script"
Noelle:     Loop "  %23 = icmp eq i32 %22, 100" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp eq i64 %35, 4" (0.000000e+00%)
Noelle:  Function "read_scan_integer"
Noelle:     Loop "  %11 = load i16*, i16** %9, align 8, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %20 = tail call i32 @getc(%struct._IO_FILE* %0) #21" (0.000000e+00%)
Noelle:  Function "set_quant_slots"
Noelle:     Loop "  %9 = load i8, i8* %8, align 1, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %29 = load i8, i8* %28, align 1, !tbaa !34" (0.000000e+00%)
Noelle:  Function "set_sample_factors"
Noelle:     Loop "  %12 = load i8, i8* %11, align 1, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %38 = load i8, i8* %37, align 1, !tbaa !30" (0.000000e+00%)
Noelle:  Function "read_quant_tables"
Noelle:     Loop "  %24 = icmp eq i32 %23, 4" (0.000000e+00%)
Noelle:     Loop "  %34 = call fastcc i32 @read_text_integer(%struct._IO_FILE* nonnull %12, i64* nonnull %6, i32* nonnull %5)" (0.000000e+00%)
Noelle:  Function "compress_data"
Noelle:     Loop "  %28 = icmp ugt i32 %26, %8" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %19, align 4, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %39 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %37" (0.000000e+00%)
Noelle:     Loop "  %60 = load i32, i32* %20, align 8, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %145 = load i16, i16* %136, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %175 = load i16, i16* %136, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %105 = add i64 %104, %70" (0.000000e+00%)
Noelle:  Function "null_method"
Noelle:  Function "grayscale_convert"
Noelle:     Loop "  %90 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %98 = load i8, i8* %96, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %77 = load i8, i8* %75, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %23 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %29, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %56 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %64 = load i8, i8* %62, align 1, !tbaa !40" (0.000000e+00%)
Noelle:  Function "rgb_gray_convert"
Noelle:     Loop "  %24 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %30, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "write_stdout"
Noelle:  Function "jpeg_abort_compress"
Noelle:  Function "jpeg_write_marker"
Noelle:  Function "get_memory_row"
Noelle:  Function "encode_mcu_huff"
Noelle:     Loop "  %49 = lshr i64 %48, 16" (0.000000e+00%)
Noelle:     Loop "  %140 = getelementptr inbounds %struct.working_state, %struct.working_state* %3, i64 0, i32 2, i32 2, i64 %139" (0.000000e+00%)
Noelle:     Loop "  %156 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %155" (0.000000e+00%)
Noelle:     Loop "  %219 = lshr i64 %218, 16" (0.000000e+00%)
Noelle:     Loop "  %280 = lshr i64 %279, 16" (0.000000e+00%)
Noelle:     Loop "  %337 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %335" (0.000000e+00%)
Noelle:     Loop "  %352 = load i32, i32* %330, align 4, !tbaa !49" (0.000000e+00%)
Noelle:     Loop "  %377 = lshr i64 %376, 16" (0.000000e+00%)
Noelle:     Loop "  %469 = lshr i64 %468, 16" (0.000000e+00%)
Noelle:     Loop "  %529 = lshr i64 %528, 16" (0.000000e+00%)
Noelle:     Loop "  %613 = lshr i64 %612, 16" (0.000000e+00%)
Noelle:  Function "finish_input_tga"
Noelle:  Function "read_rle_pixel"
Noelle:     Loop "  %35 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "read_non_rle_pixel"
Noelle:     Loop "  %8 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "get_8bit_row"
Noelle:     Loop "  %22 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %15, align 8, !tbaa !43" (0.000000e+00%)
Noelle:  Function "get_16bit_row"
Noelle:     Loop "  %19 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_24bit_row"
Noelle:     Loop "  %20 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_8bit_gray_row"
Noelle:     Loop "  %17 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "preload_image"
Noelle:     Loop "  %37 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  store i64 %20, i64* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "jpeg_write_tables"
Noelle:  Function "jinit_read_bmp"
Noelle:  Function "start_input_bmp"
Noelle:     Loop "  %461 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %411 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %550 = add nsw i64 %549, -1" (0.000000e+00%)
Noelle:  Function "finish_input_bmp"
Noelle:  Function "preload_image.9"
Noelle:     Loop "  %55 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %18, align 8, !tbaa !48" (0.000000e+00%)
Noelle:     Loop "  %67 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:     Loop "  store i64 %23, i64* %14, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %39 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "write_any_marker"
Noelle:     Loop "  %99 = add i32 %97, -1" (0.000000e+00%)
Noelle:  Function "write_tables_only"
Noelle:  Function "get_8bit_row.10"
Noelle:     Loop "  %55 = getelementptr inbounds i8, i8* %54, i64 1" (0.000000e+00%)
Noelle:  Function "get_24bit_row.11"
Noelle:     Loop "  %44 = getelementptr inbounds i8, i8* %43, i64 1" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %110 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !56" (7.516894e+01%)
Noelle:  Function "encode_mcu_AC_refine"
Noelle:     Loop "  %40 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %38" (5.264999e+00%)
Noelle:     Loop "  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %69" (5.659719e+00%)
Noelle:     Loop "  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %6)" (8.559017e-03%)
Noelle:     Loop "  %129 = lshr i64 %127, 16" (2.911831e-04%)
Noelle:     Loop "  %199 = icmp eq i32 %196, 0" (2.927278e-03%)
Noelle:     Loop "  %212 = lshr i64 %210, 16" (2.398088e-04%)
Noelle:     Loop "  %340 = lshr i64 %338, 16" (1.497039e-02%)
Noelle:     Loop "  %416 = lshr i64 %414, 16" (4.704078e-03%)
Noelle:     Loop "  %487 = icmp eq i32 %484, 0" (1.832835e-01%)
Noelle:     Loop "  %500 = lshr i64 %498, 16" (1.508225e-02%)
Noelle:  Function "encode_mcu_AC_first"
Noelle:     Loop "  %42 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %40" (4.214991e+00%)
Noelle:     Loop "  %74 = load i32, i32* %33, align 8, !tbaa !61" (7.817650e-04%)
Noelle:     Loop "  %118 = lshr i64 %116, 16" (2.416170e-04%)
Noelle:     Loop "  %180 = ashr i32 %179, 1" (1.849728e-01%)
Noelle:     Loop "  %233 = lshr i64 %231, 16" (8.361566e-02%)
Noelle:     Loop "  %306 = lshr i64 %304, 16" (4.021124e-02%)
Noelle:  Function "rgb_ycc_convert"
Noelle:     Loop "  %26 = load i8**, i8*** %2, align 8, !tbaa !45" (3.461440e+00%)
Noelle:     Loop "  %39 = load i8, i8* %38, align 1, !tbaa !46" (3.461341e+00%)
Noelle:  Function "forward_DCT"
Noelle:     Loop "  %28 = zext i32 %27 to i64" (2.186665e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29" (5.340669e-01%)
Noelle:     Loop "  %77 = getelementptr inbounds i32, i32* %18, i64 %76" (1.639457e+00%)
Noelle:  Function "jpeg_fdct_islow"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !30" (9.491037e-01%)
Noelle:     Loop "  %95 = load i32, i32* %94, align 4, !tbaa !30" (9.679215e-01%)
Noelle:  Function "compress_output"
Noelle:     Loop "  %16 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %15" (1.793714e-04%)
Noelle:     Loop "  %54 = icmp ult i32 %52, %51" (7.391069e-01%)
Noelle:     Loop "  %56 = load i32, i32* %8, align 4, !tbaa !39" (7.389627e-01%)
Noelle:     Loop "  %62 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %60" (5.848445e-01%)
Noelle:     Loop "  %131 = add nsw i64 %129, %53" (0.000000e+00%)
Noelle:     Loop "  %137 = add i64 %136, %135" (0.000000e+00%)
Noelle:     Loop "  %160 = getelementptr inbounds [64 x i16], [64 x i16]* %158, i64 1" (0.000000e+00%)
Noelle:     Loop "  %103 = add nsw i64 %101, %53" (0.000000e+00%)
Noelle:     Loop "  %109 = add i64 %108, %107" (0.000000e+00%)
Noelle:     Loop "  %85 = sext i32 %84 to i64" (2.518993e-01%)
Noelle:     Loop "  %93 = getelementptr inbounds [64 x i16], [64 x i16]* %91, i64 1" (1.166901e-01%)
Noelle:  Function "emit_eobrun"
Noelle:     Loop "  %7 = ashr i32 %5, 1" (2.881934e-02%)
Noelle:     Loop "  %68 = lshr i64 %66, 16" (1.538832e-02%)
Noelle:     Loop "  %154 = lshr i64 %152, 16" (1.576173e-03%)
Noelle:     Loop "  %231 = icmp eq i32 %228, 0" (4.506178e-01%)
Noelle:     Loop "  %246 = lshr i64 %244, 16" (3.940301e-02%)
Noelle:  Function "h2v2_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59" (1.233865e-04%)
Noelle:     Loop "  %75 = or i64 %74, 1" (6.112814e-01%)
Noelle:     Loop "  %86 = load i8, i8* %84, align 1, !tbaa !44" (6.112025e-01%)
Noelle:  Function "encode_mcu_DC_first"
Noelle:     Loop "  %34 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %33" (1.875286e-01%)
Noelle:     Loop "  %105 = lshr i64 %103, 16" (8.136183e-03%)
Noelle:     Loop "  %183 = lshr i64 %181, 16" (8.193814e-03%)
Noelle:  Function "encode_mcu_DC_refine"
Noelle:     Loop "  %36 = load i32, i32* %30, align 8, !tbaa !50" (4.789387e-02%)
Noelle:     Loop "  %57 = lshr i64 %55, 16" (3.288730e-03%)
Noelle:  Function "compress_first_pass"
Noelle:     Loop "  %21 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (6.608897e-05%)
Noelle:     Loop "  %141 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %140" (1.636263e-05%)
Noelle:     Loop "  %90 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %89" (0.000000e+00%)
Noelle:     Loop "  %105 = getelementptr inbounds [64 x i16], [64 x i16]* %98, i64 %103" (0.000000e+00%)
Noelle:     Loop "  %133 = getelementptr inbounds [64 x i16], [64 x i16]* %98, i64 %131" (0.000000e+00%)
Noelle:     Loop "  %67 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %66" (0.000000e+00%)
Noelle:     Loop "  %82 = getelementptr inbounds [64 x i16], [64 x i16]* %75, i64 %80" (0.000000e+00%)
Noelle:     Loop "  %236 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %235" (0.000000e+00%)
Noelle:     Loop "  %175 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %174" (0.000000e+00%)
Noelle:     Loop "  %184 = getelementptr inbounds [64 x i16], [64 x i16]* %181, i64 %164, i64 0" (0.000000e+00%)
Noelle:     Loop "  %188 = getelementptr inbounds [64 x i16], [64 x i16]* %182, i64 %186, i64 0" (0.000000e+00%)
Noelle:     Loop "  %200 = getelementptr inbounds [64 x i16], [64 x i16]* %182, i64 %198, i64 0" (0.000000e+00%)
Noelle:     Loop "  %215 = getelementptr inbounds [64 x i16], [64 x i16]* %212, i64 %164, i64 0" (0.000000e+00%)
Noelle:     Loop "  %223 = getelementptr inbounds [64 x i16], [64 x i16]* %213, i64 %221, i64 0" (0.000000e+00%)
Noelle:     Loop "  %228 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %227" (0.000000e+00%)
Noelle:  Function "finish_pass_gather_phuff"
Noelle:     Loop "  %46 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %45" (2.206046e-03%)
Noelle:     Loop "  %19 = load i32, i32* %14, align 4, !tbaa !43" (5.515318e-04%)
Noelle:  Function "jpeg_gen_optimal_table"
Noelle:     Loop "  %17 = getelementptr inbounds i64, i64* %2, i64 %14" (2.127677e-03%)
Noelle:     Loop "  %34 = getelementptr inbounds i64, i64* %2, i64 %31" (8.896430e-04%)
Noelle:     Loop "  %66 = sext i32 %65 to i64" (1.160708e-05%)
Noelle:     Loop "  %82 = sext i32 %81 to i64" (1.144677e-05%)
Noelle:     Loop "  %90 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %89" (1.996166e-05%)
Noelle:     Loop "  %108 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %106" (4.325704e-06%)
Noelle:     Loop "  br label %._crit_edge47" (2.960576e-06%)
Noelle:     Loop "  %116 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %115" (8.330777e-07%)
Noelle:     Loop "  %137 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %136" (1.351126e-07%)
Noelle:     Loop "  br label %._crit_edge52" (6.050433e-04%)
Noelle:     Loop "  %149 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %146" (6.032582e-04%)
Noelle:  Function "access_virt_barray"
Noelle:     Loop "  %80 = mul nsw i64 %77, %47" (0.000000e+00%)
Noelle:     Loop "  %162 = mul nsw i64 %159, %131" (0.000000e+00%)
Noelle:     Loop "  %226 = load [64 x i16]**, [64 x i16]*** %223, align 8, !tbaa !40" (0.000000e+00%)
Noelle:  Function "pre_process_data"
Noelle:     Loop "  %23 = load i32, i32* %5, align 4, !tbaa !39" (2.246615e-04%)
Noelle:     Loop "  %54 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %53" (1.225114e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %55, i32 %59, i8** %55, i32 %60, i32 1, i32 %56) #20" (8.050751e-08%)
Noelle:     Loop "  %99 = getelementptr inbounds i8**, i8*** %4, i64 %97" (3.808355e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %100, i32 %110, i8** %100, i32 %111, i32 1, i32 %103) #20" (3.262304e-07%)
Noelle:  Function "fullsize_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %3, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %3, i64 %60" (6.169326e-05%)
Noelle:  Function "jpeg_write_scanlines"
Noelle:  Function "sep_downsample"
Noelle:     Loop "  %18 = getelementptr inbounds i8**, i8*** %1, i64 %16" (1.604025e-04%)
Noelle:  Function "process_data_simple_main"
Noelle:     Loop "  %21 = icmp ult i32 %20, 8" (6.846989e-05%)
Noelle:  Function "jpeg_finish_compress"
Noelle:     Loop "  %42 = getelementptr inbounds %struct.jpeg_comp_master, %struct.jpeg_comp_master* %41, i64 0, i32 0" (1.058114e-04%)
Noelle:     Loop "  %48 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %37, align 8, !tbaa !57" (1.055726e-04%)
Noelle:  Function "jcopy_sample_rows"
Noelle:     Loop "  %29 = getelementptr inbounds i8*, i8** %27, i64 1" (3.948368e-05%)
Noelle:  Function "get_raw_row"
Noelle:  Function "empty_output_buffer"
Noelle:  Function "jpeg_make_c_derived_tbl"
Noelle:     Loop "  %23 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %1, i64 0, i32 0, i64 %20" (4.383809e-06%)
Noelle:     Loop "  %49 = add nsw <2 x i64> %46, <i64 8, i64 8>" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw <2 x i64> %58, <i64 1, i64 1>" (2.338218e-07%)
Noelle:     Loop "  %96 = sext i8 %92 to i32" (5.223187e-06%)
Noelle:     Loop "  %102 = add nsw i64 %100, 1" (2.848566e-06%)
Noelle:     Loop "  %143 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 %141" (3.943468e-06%)
Noelle:  Function "write_scan_header"
Noelle:     Loop "  %14 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %13" (8.341978e-06%)
Noelle:     Loop "  %287 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %286" (5.411505e-07%)
Noelle:  Function "realize_virt_arrays"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %8, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %41 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %38, i64 0, i32 0" (6.230581e-08%)
Noelle:     Loop "  %92 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %91, i64 0, i32 0" (9.821916e-07%)
Noelle:     Loop "  %143 = sub i32 %119, %141" (0.000000e+00%)
Noelle:     Loop "  %191 = add i32 %189, 1" (0.000000e+00%)
Noelle:     Loop "  %206 = add i32 %205, 1" (0.000000e+00%)
Noelle:     Loop "  %234 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %233, i64 0, i32 0" (8.689211e-06%)
Noelle:     Loop "  %288 = sub i32 %262, %286" (8.470790e-06%)
Noelle:     Loop "  %332 = add i32 %330, 1" (3.150294e-08%)
Noelle:     Loop "  %347 = add i32 %346, 1" (8.314676e-06%)
Noelle:  Function "emit_dht"
Noelle:     Loop "  %202 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 0, i64 %201" (2.233208e-06%)
Noelle:     Loop "  %225 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 1, i64 %224" (4.798948e-06%)
Noelle:  Function "rgb_ycc_start"
Noelle:     Loop "  %15 = mul nuw nsw i64 %14, 19595" (6.809535e-06%)
Noelle:  Function "jpeg_start_compress"
Noelle:  Function "jinit_compress_master"
Noelle:  Function "jinit_c_master_control"
Noelle:     Loop "  %106 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %105, i64 0, i32 2" (6.650620e-08%)
Noelle:     Loop "  %155 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %154, i64 0, i32 1" (1.036097e-07%)
Noelle:     Loop "  %222 = bitcast i32* %220 to i8*" (2.030189e-08%)
Noelle:     Loop "  %242 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 0" (4.500020e-06%)
Noelle:     Loop "  %258 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %257" (1.638153e-07%)
Noelle:     Loop "  %340 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %339" (3.951869e-06%)
Noelle:     Loop "  %404 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %403" (0.000000e+00%)
Noelle:     Loop "  %390 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %389" (1.473637e-06%)
Noelle:     Loop "  %368 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %367" (2.315816e-06%)
Noelle:     Loop "  %355 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %354" (0.000000e+00%)
Noelle:     Loop "  %431 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %430" (0.000000e+00%)
Noelle:     Loop "  %467 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %466, i64 0" (2.660248e-08%)
Noelle:     Loop "  %482 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i64 0, i64 %481" (0.000000e+00%)
Noelle:  Function "parse_switches"
Noelle:     Loop "  %34 = sext i32 %33 to i64" (2.922773e-06%)
Noelle:  Function "write_frame_header"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %8, i64 0, i32 4" (3.047384e-06%)
Noelle:     Loop "  %43 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %40, i64 0, i32 5" (0.000000e+00%)
Noelle:  Function "jpeg_set_linear_quality"
Noelle:     Loop "  %41 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %40" (8.057752e-07%)
Noelle:     Loop "  %26 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %25" (8.057752e-07%)
Noelle:     Loop "  %90 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %89" (8.057752e-07%)
Noelle:     Loop "  %75 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %74" (8.057752e-07%)
Noelle:  Function "emit_dqt"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %5, i64 0, i32 0, i64 %16" (7.371688e-07%)
Noelle:     Loop "  %197 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %196" (2.149200e-06%)
Noelle:     Loop "  %150 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %149" (0.000000e+00%)
Noelle:  Function "keymatch"
Noelle:     Loop "  %10 = getelementptr inbounds i8, i8* %7, i64 1" (2.128199e-06%)
Noelle:  Function "jpeg_set_defaults"
Noelle:  Function "prepare_for_pass"
Noelle:  Function "jpeg_set_quality"
Noelle:  Function "alloc_small"
Noelle:     Loop "  %35 = getelementptr inbounds %union.small_pool_struct, %union.small_pool_struct* %34, i64 0, i32 0, i32 2" (2.037190e-07%)
Noelle:     Loop "  %59 = lshr i64 %58, 1" (0.000000e+00%)
Noelle:  Function "finish_pass_phuff"
Noelle:  Function "start_pass_phuff"
Noelle:     Loop "  %136 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %135" (0.000000e+00%)
Noelle:     Loop "  %45 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %44" (2.800261e-07%)
Noelle:     Loop "  %110 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %109" (0.000000e+00%)
Noelle:     Loop "  %76 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %75" (1.652154e-07%)
Noelle:  Function "alloc_sarray"
Noelle:     Loop "  %29 = sub i32 %3, %27" (4.879455e-07%)
Noelle:     Loop "  %43 = add i32 %41, 1" (4.830451e-08%)
Noelle:     Loop "  %58 = add i32 %57, 1" (1.491139e-07%)
Noelle:  Function "per_scan_setup"
Noelle:     Loop "  %68 = getelementptr inbounds %struct.jpeg_compress_struct.275, %struct.jpeg_compress_struct.275* %0, i64 0, i32 42, i64 %67" (3.024282e-07%)
Noelle:     Loop "  %106 = load i32, i32* %60, align 8, !tbaa !51" (2.800261e-08%)
Noelle:     Loop "  %116 = load i32, i32* %60, align 8, !tbaa !51" (3.920366e-08%)
Noelle:  Function "start_pass_coef"
Noelle:  Function "select_scan_parameters"
Noelle:     Loop "  %32 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %83" (1.008094e-07%)
Noelle:     Loop "  %138 = add <2 x i64> %136, <i64 2, i64 2>" (0.000000e+00%)
Noelle:     Loop "  %172 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %124, i64 %171" (0.000000e+00%)
Noelle:  Function "flush_bits"
Noelle:     Loop "  %23 = lshr i64 %21, 16" (1.449135e-07%)
Noelle:  Function "finish_pass_master"
Noelle:  Function "start_pass_fdctmgr"
Noelle:     Loop "  %17 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %16, i64 0, i32 4" (3.388316e-07%)
Noelle:     Loop "  %209 = shl i64 %208, 3" (0.000000e+00%)
Noelle:     Loop "  %170 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %33, i64 0, i32 0, i64 %169" (0.000000e+00%)
Noelle:  Function "free_pool"
Noelle:     Loop "  %22 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %21, i64 0, i32 10" (0.000000e+00%)
Noelle:     Loop "  %36 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %35, i64 0, i32 10" (2.240209e-08%)
Noelle:     Loop "  %54 = bitcast %union.large_pool_struct* %53 to i8*" (1.134106e-07%)
Noelle:     Loop "  %73 = bitcast %union.small_pool_struct* %72 to i8*" (7.490699e-08%)
Noelle:  Function "emit_sof"
Noelle:     Loop "  %250 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %248, i64 0, i32 0" (1.253117e-07%)
Noelle:  Function "start_input_ppm"
Noelle:     Loop "  %179 = load i8*, i8** %167, align 8, !tbaa !67" (0.000000e+00%)
Noelle:  Function "self_destruct"
Noelle:  Function "write_file_header"
Noelle:  Function "alloc_large"
Noelle:  Function "request_virt_barray"
Noelle:  Function "read_pbm_integer"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (3.220300e-08%)
Noelle:     Loop "  %6 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:     Loop "  %31 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (9.450882e-08%)
Noelle:     Loop "  %33 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:  Function "jinit_c_coef_controller"
Noelle:     Loop "  %24 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (8.260771e-08%)
Noelle:  Function "jinit_downsampler"
Noelle:     Loop "  %40 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %39, i64 0, i32 2" (6.118194e-01%)
Noelle:  Function "jpeg_simple_progression"
Noelle:     Loop "  %190 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %188, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %220 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %218, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %131 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %128" (0.000000e+00%)
Noelle:     Loop "  %167 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %164" (0.000000e+00%)
Noelle:     Loop "  %179 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %178" (0.000000e+00%)
Noelle:     Loop "  %240 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %238, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %270 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %268, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %284 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %282, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %313 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %311, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %327 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %325, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %356 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %354, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %446 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %444, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %476 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %474, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %388 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %385" (0.000000e+00%)
Noelle:     Loop "  %424 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %421" (0.000000e+00%)
Noelle:     Loop "  %436 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %435" (0.000000e+00%)
Noelle:     Loop "  %494 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %492, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %523 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %521, i64 0, i32 0" (0.000000e+00%)
Noelle:  Function "jinit_c_prep_controller"
Noelle:     Loop "  %83 = mul i64 %62, %80" (0.000000e+00%)
Noelle:     Loop "  %140 = add nsw i64 %138, %60" (0.000000e+00%)
Noelle:     Loop "  %231 = add nsw i64 %230, %60" (0.000000e+00%)
Noelle:     Loop "  %278 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (5.810542e-08%)
Noelle:  Function "jpeg_default_colorspace"
Noelle:     Loop "  %202 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %199, i64 %201, i32 0" (0.000000e+00%)
Noelle:  Function "jpeg_CreateCompress"
Noelle:  Function "jinit_c_main_controller"
Noelle:     Loop "  %34 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (4.340405e-08%)
Noelle:  Function "jpeg_suppress_tables"
Noelle:  Function "jdiv_round_up"
Noelle:  Function "jinit_memory_mgr"
Noelle:  Function "jinit_color_converter"
Noelle:  Function "jpeg_alloc_huff_table"
Noelle:  Function "jround_up"
Noelle:  Function "jinit_forward_dct"
Noelle:  Function "write_file_trailer"
Noelle:  Function "jpeg_std_error"
Noelle:  Function "term_destination"
Noelle:  Function "jpeg_stdio_dest"
Noelle:  Function "start_pass_main"
Noelle:  Function "jinit_marker_writer"
Noelle:  Function "jpeg_alloc_quant_table"
Noelle:  Function "start_pass_prep"
Noelle:  Function "jpeg_free_large"
Noelle:  Function "jpeg_get_large"
Noelle:  Function "jinit_phuff_encoder"
Noelle:  Function "jpeg_destroy_compress"
Noelle:  Function "init_destination"
Noelle:  Function "jpeg_free_small"
Noelle:  Function "jpeg_get_small"
Noelle:  Function "jpeg_destroy"
Noelle:  Function "jinit_read_ppm"
Noelle:  Function "jpeg_abort"
Noelle:  Function "emit_message"
Noelle:  Function "reset_error_mgr"
Noelle:  Function "jpeg_mem_available"
Noelle:  Function "start_pass_downsample"
Noelle:  Function "finish_input_ppm"
Noelle:  Function "output_message"
Noelle:  Function "request_virt_sarray"
Noelle:  Function "error_exit"
Noelle:  Function "jpeg_quality_scaling"
Noelle:  Function "format_message"
Noelle:     Loop "  %41 = getelementptr inbounds i8, i8* %40, i64 1" (0.000000e+00%)
Noelle:  Function "jpeg_add_quant_table"
Noelle:     Loop "  %29 = getelementptr inbounds i32, i32* %2, i64 %28" (0.000000e+00%)
Noelle:     Loop "  %44 = getelementptr inbounds i32, i32* %2, i64 %43" (0.000000e+00%)
Noelle:  Function "jpeg_write_raw_data"
Noelle:  Function "access_virt_sarray"
Noelle:     Loop "  %79 = mul nsw i64 %76, %46" (0.000000e+00%)
Noelle:     Loop "  %159 = mul nsw i64 %156, %128" (0.000000e+00%)
Noelle:     Loop "  %221 = load i8**, i8*** %218, align 8, !tbaa !38" (0.000000e+00%)
Noelle:  Function "jpeg_fdct_ifast"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "jpeg_mem_term"
Noelle:  Function "jpeg_mem_init"
Noelle:  Function "jpeg_open_backing_store"
Noelle:  Function "pre_process_context"
Noelle:     Loop "  %27 = load i32, i32* %2, align 4, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %90 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %89" (0.000000e+00%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %91, i32 %95, i8** %91, i32 %96, i32 1, i32 %92) #20" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp slt i32 %50, 1" (0.000000e+00%)
Noelle:     Loop "  %56 = load i8**, i8*** %54, align 8, !tbaa !50" (0.000000e+00%)
Noelle:  Function "null_convert"
Noelle:     Loop "  %25 = add nsw i32 %22, -1" (0.000000e+00%)
Noelle:     Loop "  %80 = getelementptr inbounds i8**, i8*** %2, i64 %79" (0.000000e+00%)
Noelle:     Loop "  %88 = getelementptr inbounds i8, i8* %86, i64 %79" (0.000000e+00%)
Noelle:     Loop "  %113 = getelementptr inbounds i8, i8* %111, i64 %79" (0.000000e+00%)
Noelle:     Loop "  %29 = getelementptr inbounds i8**, i8*** %2, i64 %28" (0.000000e+00%)
Noelle:     Loop "  %37 = getelementptr inbounds i8, i8* %35, i64 %28" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8**, i8*** %2, i64 %61" (0.000000e+00%)
Noelle:     Loop "  %70 = getelementptr inbounds i8, i8* %68, i64 %61" (0.000000e+00%)
Noelle:  Function "forward_DCT_float"
Noelle:     Loop "  %28 = zext i32 %27 to i64" (0.000000e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %85 = getelementptr inbounds [64 x float], [64 x float]* %8, i64 0, i64 %84" (0.000000e+00%)
Noelle:  Function "jzero_far"
Noelle:  Function "jpeg_fdct_float"
Noelle:  Function "pass_startup"
Noelle:  Function "alloc_barray"
Noelle:     Loop "  %31 = sub i32 %3, %29" (0.000000e+00%)
Noelle:     Loop "  %46 = add i32 %44, 1" (0.000000e+00%)
Noelle:     Loop "  %61 = add i32 %60, 1" (0.000000e+00%)
Noelle:  Function "jpeg_set_colorspace"
Noelle:     Loop "  %130 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %127, i64 %129, i32 0" (0.000000e+00%)
Noelle:  Function "jcopy_block_row"
Noelle:  Function "get_text_rgb_row"
Noelle:     Loop "  %17 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "get_word_gray_row"
Noelle:     Loop "  %54 = getelementptr inbounds i8, i8* %53, i64 1" (0.000000e+00%)
Noelle:  Function "load_interlaced_image"
Noelle:     Loop "  %46 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %16, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %58 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:     Loop "  store i64 %20, i64* %12, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %36 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "get_scaled_gray_row"
Noelle:     Loop "  %38 = getelementptr inbounds i8, i8* %36, i64 1" (0.000000e+00%)
Noelle:     Loop "  %54 = getelementptr inbounds i8, i8* %53, i64 1" (0.000000e+00%)
Noelle:  Function "get_word_rgb_row"
Noelle:     Loop "  %35 = getelementptr inbounds i8, i8* %34, i64 1" (0.000000e+00%)
Noelle:  Function "get_scaled_rgb_row"
Noelle:     Loop "  %61 = getelementptr inbounds i8, i8* %60, i64 1" (0.000000e+00%)
Noelle:  Function "get_text_gray_row"
Noelle:     Loop "  %17 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "jinit_read_gif"
Noelle:  Function "cmyk_ycck_convert"
Noelle:     Loop "  %27 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %43 = load i8, i8* %42, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "fullsize_smooth_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %8, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %8, i64 %59" (0.000000e+00%)
Noelle:     Loop "  %82 = getelementptr inbounds i8*, i8** %3, i64 %81" (0.000000e+00%)
Noelle:     Loop "  %131 = getelementptr inbounds i8, i8* %130, i64 1" (0.000000e+00%)
Noelle:  Function "h2v1_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59" (0.000000e+00%)
Noelle:     Loop "  %74 = getelementptr inbounds i8*, i8** %2, i64 %73" (0.000000e+00%)
Noelle:     Loop "  %81 = load i8, i8* %79, align 1, !tbaa !42" (0.000000e+00%)
Noelle:  Function "h2v2_smooth_downsample"
Noelle:     Loop "  %33 = getelementptr inbounds i8*, i8** %8, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %8, i64 %60" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds i8*, i8** %3, i64 %82" (0.000000e+00%)
Noelle:     Loop "  %159 = getelementptr inbounds i8, i8* %158, i64 1" (0.000000e+00%)
Noelle:  Function "int_downsample"
Noelle:     Loop "  %41 = getelementptr inbounds i8*, i8** %2, i64 %39" (0.000000e+00%)
Noelle:     Loop "  %71 = getelementptr inbounds i8*, i8** %2, i64 %69" (0.000000e+00%)
Noelle:     Loop "  br i1 %83, label %._crit_edge40.._crit_edge36_crit_edge, label %107" (0.000000e+00%)
Noelle:     Loop "  br i1 %84, label %113, label %.loopexit2._crit_edge..loopexit2_crit_edge" (0.000000e+00%)
Noelle:     Loop "  %169 = add nsw i64 %167, %106" (0.000000e+00%)
Noelle:     Loop "  %178 = getelementptr i8, i8* %172, i64 %174" (0.000000e+00%)
Noelle:     Loop "  %223 = getelementptr inbounds i8, i8* %221, i64 1" (0.000000e+00%)
Noelle:     Loop "  %134 = add nsw i64 %132, %106" (0.000000e+00%)
Noelle:     Loop "  %158 = getelementptr inbounds i8, i8* %156, i64 1" (0.000000e+00%)
Noelle:     Loop "  %117 = add nsw i64 %115, %106" (0.000000e+00%)
Noelle:     Loop "  %124 = getelementptr inbounds i8, i8* %122, i64 1" (0.000000e+00%)
Noelle:  Function "jinit_huff_encoder"
Noelle:  Function "start_pass_huff"
Noelle:     Loop "  %77 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %76" (1.405031e-05%)
Noelle:     Loop "  %19 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %18" (0.000000e+00%)
Noelle:  Function "jinit_read_targa"
Noelle:  Function "usage"
Noelle:  Function "start_input_gif"
Noelle:     Loop "  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %144 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %193 = icmp sgt i32 %192, 0" (0.000000e+00%)
Noelle:     Loop "  %258 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:  Function "finish_input_gif"
Noelle:  Function "get_pixel_rows"
Noelle:     Loop "  %18 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "LZWReadByte"
Noelle:     Loop "  %137 = load i8*, i8** %134, align 8, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %81 = icmp sgt i32 %80, 0" (0.000000e+00%)
Noelle:     Loop "  %39 = tail call fastcc i32 @GetCode(%struct.gif_source_struct* nonnull %0)" (0.000000e+00%)
Noelle:  Function "GetCode"
Noelle:     Loop "  %18 = load i32, i32* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "get_interlaced_row"
Noelle:     Loop "  %72 = getelementptr inbounds i8, i8* %69, i64 1" (0.000000e+00%)
Noelle:  Function "encode_mcu_gather"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.huff_entropy_encoder, %struct.huff_entropy_encoder* %5, i64 0, i32 1, i32 2, i64 %17" (0.000000e+00%)
Noelle:     Loop "  %32 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %70 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %68" (0.000000e+00%)
Noelle:  Function "start_input_tga"
Noelle:     Loop "  %214 = add nsw i32 %213, -1" (0.000000e+00%)
Noelle:     Loop "  %274 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "finish_pass_gather"
Noelle:     Loop "  %15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %14" (5.600522e-09%)
Noelle:  Function "finish_pass_huff"
Noelle:     Loop "  %30 = lshr i64 %29, 16" (0.000000e+00%)
Noelle:  Function "emit_restart"
Noelle:     Loop "  %76 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 7, i64 %75" (0.000000e+00%)
Noelle:  Function "read_stdin"
Noelle:  Function "read_text_integer"
Noelle:     Loop "  %4 = tail call fastcc i32 @text_getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:     Loop "  %24 = load i16*, i16** %.lcssa20, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "text_getc"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:  Function "read_scan_script"
Noelle:     Loop "  %23 = icmp eq i32 %22, 100" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp eq i64 %35, 4" (0.000000e+00%)
Noelle:  Function "read_scan_integer"
Noelle:     Loop "  %11 = load i16*, i16** %9, align 8, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %20 = tail call i32 @getc(%struct._IO_FILE* %0) #21" (0.000000e+00%)
Noelle:  Function "set_quant_slots"
Noelle:     Loop "  %9 = load i8, i8* %8, align 1, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %29 = load i8, i8* %28, align 1, !tbaa !34" (0.000000e+00%)
Noelle:  Function "set_sample_factors"
Noelle:     Loop "  %12 = load i8, i8* %11, align 1, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %38 = load i8, i8* %37, align 1, !tbaa !30" (0.000000e+00%)
Noelle:  Function "read_quant_tables"
Noelle:     Loop "  %24 = icmp eq i32 %23, 4" (0.000000e+00%)
Noelle:     Loop "  %34 = call fastcc i32 @read_text_integer(%struct._IO_FILE* nonnull %12, i64* nonnull %6, i32* nonnull %5)" (0.000000e+00%)
Noelle:  Function "compress_data"
Noelle:     Loop "  %28 = icmp ugt i32 %26, %8" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %19, align 4, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %39 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %37" (0.000000e+00%)
Noelle:     Loop "  %60 = load i32, i32* %20, align 8, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %145 = load i16, i16* %136, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %175 = load i16, i16* %136, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %105 = add i64 %104, %70" (0.000000e+00%)
Noelle:  Function "null_method"
Noelle:  Function "grayscale_convert"
Noelle:     Loop "  %90 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %98 = load i8, i8* %96, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %77 = load i8, i8* %75, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %23 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %29, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %56 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %64 = load i8, i8* %62, align 1, !tbaa !40" (0.000000e+00%)
Noelle:  Function "rgb_gray_convert"
Noelle:     Loop "  %24 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %30, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "write_stdout"
Noelle:  Function "jpeg_abort_compress"
Noelle:  Function "jpeg_write_marker"
Noelle:  Function "get_memory_row"
Noelle:  Function "encode_mcu_huff"
Noelle:     Loop "  %49 = lshr i64 %48, 16" (0.000000e+00%)
Noelle:     Loop "  %140 = getelementptr inbounds %struct.working_state, %struct.working_state* %3, i64 0, i32 2, i32 2, i64 %139" (0.000000e+00%)
Noelle:     Loop "  %156 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %155" (0.000000e+00%)
Noelle:     Loop "  %219 = lshr i64 %218, 16" (0.000000e+00%)
Noelle:     Loop "  %280 = lshr i64 %279, 16" (0.000000e+00%)
Noelle:     Loop "  %337 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %335" (0.000000e+00%)
Noelle:     Loop "  %352 = load i32, i32* %330, align 4, !tbaa !49" (0.000000e+00%)
Noelle:     Loop "  %377 = lshr i64 %376, 16" (0.000000e+00%)
Noelle:     Loop "  %469 = lshr i64 %468, 16" (0.000000e+00%)
Noelle:     Loop "  %529 = lshr i64 %528, 16" (0.000000e+00%)
Noelle:     Loop "  %613 = lshr i64 %612, 16" (0.000000e+00%)
Noelle:  Function "finish_input_tga"
Noelle:  Function "read_rle_pixel"
Noelle:     Loop "  %35 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "read_non_rle_pixel"
Noelle:     Loop "  %8 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "get_8bit_row"
Noelle:     Loop "  %22 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %15, align 8, !tbaa !43" (0.000000e+00%)
Noelle:  Function "get_16bit_row"
Noelle:     Loop "  %19 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_24bit_row"
Noelle:     Loop "  %20 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_8bit_gray_row"
Noelle:     Loop "  %17 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "preload_image"
Noelle:     Loop "  %37 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  store i64 %20, i64* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "jpeg_write_tables"
Noelle:  Function "jinit_read_bmp"
Noelle:  Function "start_input_bmp"
Noelle:     Loop "  %461 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %411 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %550 = add nsw i64 %549, -1" (0.000000e+00%)
Noelle:  Function "finish_input_bmp"
Noelle:  Function "preload_image.9"
Noelle:     Loop "  %55 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %18, align 8, !tbaa !48" (0.000000e+00%)
Noelle:     Loop "  %67 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:     Loop "  store i64 %23, i64* %14, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %39 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "write_any_marker"
Noelle:     Loop "  %99 = add i32 %97, -1" (0.000000e+00%)
Noelle:  Function "write_tables_only"
Noelle:  Function "get_8bit_row.10"
Noelle:     Loop "  %55 = getelementptr inbounds i8, i8* %54, i64 1" (0.000000e+00%)
Noelle:  Function "get_24bit_row.11"
Noelle:     Loop "  %44 = getelementptr inbounds i8, i8* %43, i64 1" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: Inliner: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.g3obMuAh81 (.ll version is /tmp/tmp.2F8m9428ya)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.VetAYkf9jY (.ll version is /tmp/tmp.c0sSSOqSwK)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.g3obMuAh81 -o /tmp/tmp.VetAYkf9jY
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.g3obMuAh81 -o /tmp/tmp.VetAYkf9jY
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.g3obMuAh81 -o /tmp/tmp.VetAYkf9jY
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.g3obMuAh81 -o /tmp/tmp.VetAYkf9jY
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       main
DeadFunctionEliminator:       parse_switches
DeadFunctionEliminator:       fprintf
DeadFunctionEliminator:       usage
DeadFunctionEliminator:       fopen
DeadFunctionEliminator:       start_input_gif
DeadFunctionEliminator:       finish_input_gif
DeadFunctionEliminator:       get_pixel_rows
DeadFunctionEliminator:       LZWReadByte
DeadFunctionEliminator:       GetCode
DeadFunctionEliminator:       get_interlaced_row
DeadFunctionEliminator:       jinit_read_targa
DeadFunctionEliminator:       start_input_tga
DeadFunctionEliminator:       finish_pass_gather
DeadFunctionEliminator:       finish_pass_huff
DeadFunctionEliminator:       llvm.ctlz.i32
DeadFunctionEliminator:       jinit_phuff_encoder
DeadFunctionEliminator:       start_pass_phuff
DeadFunctionEliminator:       encode_mcu_DC_first
DeadFunctionEliminator:       encode_mcu_AC_first
DeadFunctionEliminator:       encode_mcu_DC_refine
DeadFunctionEliminator:       encode_mcu_AC_refine
DeadFunctionEliminator:       finish_pass_gather_phuff
DeadFunctionEliminator:       finish_pass_phuff
DeadFunctionEliminator:       emit_eobrun
DeadFunctionEliminator:       flush_bits
DeadFunctionEliminator:       emit_restart
DeadFunctionEliminator:       jinit_forward_dct
DeadFunctionEliminator:       start_pass_fdctmgr
DeadFunctionEliminator:       forward_DCT
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       getc
DeadFunctionEliminator:       ungetc
DeadFunctionEliminator:       fclose
DeadFunctionEliminator:       fwrite
DeadFunctionEliminator:       __isoc99_sscanf
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       jinit_read_ppm
DeadFunctionEliminator:       start_input_ppm
DeadFunctionEliminator:       finish_input_ppm
DeadFunctionEliminator:       read_pbm_integer
DeadFunctionEliminator:       get_word_gray_row
DeadFunctionEliminator:       get_raw_row
DeadFunctionEliminator:       load_interlaced_image
DeadFunctionEliminator:       get_scaled_gray_row
DeadFunctionEliminator:       get_word_rgb_row
DeadFunctionEliminator:       get_scaled_rgb_row
DeadFunctionEliminator:       get_text_gray_row
DeadFunctionEliminator:       get_text_rgb_row
DeadFunctionEliminator:       fread
DeadFunctionEliminator:       jinit_read_gif
DeadFunctionEliminator:       rgb_ycc_convert
DeadFunctionEliminator:       cmyk_ycck_convert
DeadFunctionEliminator:       jinit_downsampler
DeadFunctionEliminator:       start_pass_downsample
DeadFunctionEliminator:       sep_downsample
DeadFunctionEliminator:       fullsize_smooth_downsample
DeadFunctionEliminator:       fullsize_downsample
DeadFunctionEliminator:       h2v1_downsample
DeadFunctionEliminator:       h2v2_smooth_downsample
DeadFunctionEliminator:       h2v2_downsample
DeadFunctionEliminator:       int_downsample
DeadFunctionEliminator:       jpeg_make_c_derived_tbl
DeadFunctionEliminator:       jpeg_gen_optimal_table
DeadFunctionEliminator:       jinit_huff_encoder
DeadFunctionEliminator:       start_pass_huff
DeadFunctionEliminator:       encode_mcu_gather
DeadFunctionEliminator:       encode_mcu_huff
DeadFunctionEliminator:       finish_input_tga
DeadFunctionEliminator:       read_rle_pixel
DeadFunctionEliminator:       read_non_rle_pixel
DeadFunctionEliminator:       get_8bit_row
DeadFunctionEliminator:       get_16bit_row
DeadFunctionEliminator:       get_24bit_row
DeadFunctionEliminator:       get_8bit_gray_row
DeadFunctionEliminator:       preload_image
DeadFunctionEliminator:       get_memory_row
DeadFunctionEliminator:       jinit_read_bmp
DeadFunctionEliminator:       start_input_bmp
DeadFunctionEliminator:       finish_input_bmp
DeadFunctionEliminator:       preload_image.9
DeadFunctionEliminator:       write_any_marker
DeadFunctionEliminator:       write_frame_header
DeadFunctionEliminator:       write_scan_header
DeadFunctionEliminator:       write_tables_only
DeadFunctionEliminator:       emit_dqt
DeadFunctionEliminator:       emit_dht
DeadFunctionEliminator:       emit_sof
DeadFunctionEliminator:       get_8bit_row.10
DeadFunctionEliminator:       get_24bit_row.11
DeadFunctionEliminator:       read_quant_tables
DeadFunctionEliminator:       read_text_integer
DeadFunctionEliminator:       text_getc
DeadFunctionEliminator:       __ctype_b_loc
DeadFunctionEliminator:       read_scan_script
DeadFunctionEliminator:       read_scan_integer
DeadFunctionEliminator:       llvm.memcpy.p0i8.p0i8.i64
DeadFunctionEliminator:       set_quant_slots
DeadFunctionEliminator:       set_sample_factors
DeadFunctionEliminator:       keymatch
DeadFunctionEliminator:       __ctype_tolower_loc
DeadFunctionEliminator:       read_stdin
DeadFunctionEliminator:       start_pass_coef
DeadFunctionEliminator:       compress_data
DeadFunctionEliminator:       compress_first_pass
DeadFunctionEliminator:       compress_output
DeadFunctionEliminator:       jinit_color_converter
DeadFunctionEliminator:       null_method
DeadFunctionEliminator:       grayscale_convert
DeadFunctionEliminator:       rgb_ycc_start
DeadFunctionEliminator:       rgb_gray_convert
DeadFunctionEliminator:       write_stdout
DeadFunctionEliminator:       jpeg_CreateCompress
DeadFunctionEliminator:       llvm.memset.p0i8.i64
DeadFunctionEliminator:       jpeg_destroy_compress
DeadFunctionEliminator:       jpeg_abort_compress
DeadFunctionEliminator:       jpeg_suppress_tables
DeadFunctionEliminator:       jpeg_finish_compress
DeadFunctionEliminator:       jpeg_write_tables
DeadFunctionEliminator:       jpeg_start_compress
DeadFunctionEliminator:       jpeg_write_scanlines
DeadFunctionEliminator:       jpeg_add_quant_table
DeadFunctionEliminator:       jpeg_set_linear_quality
DeadFunctionEliminator:       jpeg_quality_scaling
DeadFunctionEliminator:       jpeg_set_quality
DeadFunctionEliminator:       jpeg_set_defaults
DeadFunctionEliminator:       jpeg_default_colorspace
DeadFunctionEliminator:       jpeg_set_colorspace
DeadFunctionEliminator:       jpeg_simple_progression
DeadFunctionEliminator:       jpeg_stdio_dest
DeadFunctionEliminator:       init_destination
DeadFunctionEliminator:       empty_output_buffer
DeadFunctionEliminator:       term_destination
DeadFunctionEliminator:       fflush
DeadFunctionEliminator:       ferror
DeadFunctionEliminator:       jinit_compress_master
DeadFunctionEliminator:       jinit_c_master_control
DeadFunctionEliminator:       prepare_for_pass
DeadFunctionEliminator:       finish_pass_master
DeadFunctionEliminator:       select_scan_parameters
DeadFunctionEliminator:       per_scan_setup
DeadFunctionEliminator:       jinit_marker_writer
DeadFunctionEliminator:       jpeg_free_small
DeadFunctionEliminator:       free
DeadFunctionEliminator:       jpeg_get_large
DeadFunctionEliminator:       jpeg_free_large
DeadFunctionEliminator:       jpeg_mem_available
DeadFunctionEliminator:       jpeg_open_backing_store
DeadFunctionEliminator:       jinit_c_main_controller
DeadFunctionEliminator:       start_pass_main
DeadFunctionEliminator:       process_data_simple_main
DeadFunctionEliminator:       jinit_c_prep_controller
DeadFunctionEliminator:       start_pass_prep
DeadFunctionEliminator:       pre_process_context
DeadFunctionEliminator:       pre_process_data
DeadFunctionEliminator:       jinit_c_coef_controller
DeadFunctionEliminator:       null_convert
DeadFunctionEliminator:       forward_DCT_float
DeadFunctionEliminator:       jpeg_fdct_ifast
DeadFunctionEliminator:       jpeg_fdct_float
DeadFunctionEliminator:       jpeg_fdct_islow
DeadFunctionEliminator:       jpeg_abort
DeadFunctionEliminator:       jpeg_destroy
DeadFunctionEliminator:       jpeg_alloc_quant_table
DeadFunctionEliminator:       jpeg_alloc_huff_table
DeadFunctionEliminator:       jdiv_round_up
DeadFunctionEliminator:       jround_up
DeadFunctionEliminator:       jcopy_sample_rows
DeadFunctionEliminator:       jcopy_block_row
DeadFunctionEliminator:       jzero_far
DeadFunctionEliminator:       jpeg_std_error
DeadFunctionEliminator:       error_exit
DeadFunctionEliminator:       emit_message
DeadFunctionEliminator:       output_message
DeadFunctionEliminator:       format_message
DeadFunctionEliminator:       reset_error_mgr
DeadFunctionEliminator:       sprintf
DeadFunctionEliminator:       jinit_memory_mgr
DeadFunctionEliminator:       alloc_small
DeadFunctionEliminator:       alloc_large
DeadFunctionEliminator:       alloc_sarray
DeadFunctionEliminator:       alloc_barray
DeadFunctionEliminator:       request_virt_sarray
DeadFunctionEliminator:       request_virt_barray
DeadFunctionEliminator:       realize_virt_arrays
DeadFunctionEliminator:       access_virt_sarray
DeadFunctionEliminator:       access_virt_barray
DeadFunctionEliminator:       free_pool
DeadFunctionEliminator:       self_destruct
DeadFunctionEliminator:       getenv
DeadFunctionEliminator:       jpeg_get_small
DeadFunctionEliminator:       malloc
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:     Loop "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !56" (7.179014e+01%)
Noelle:  Function "encode_mcu_AC_refine"
Noelle:     Loop "  %40 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %38" (5.986120e+00%)
Noelle:     Loop "  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %69" (6.434902e+00%)
Noelle:     Loop "  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %6)" (9.731302e-03%)
Noelle:     Loop "  %129 = lshr i64 %127, 16" (3.310650e-04%)
Noelle:     Loop "  %199 = icmp eq i32 %196, 0" (3.328213e-03%)
Noelle:     Loop "  %212 = lshr i64 %210, 16" (2.726542e-04%)
Noelle:     Loop "  %340 = lshr i64 %338, 16" (1.702081e-02%)
Noelle:     Loop "  %416 = lshr i64 %414, 16" (5.348372e-03%)
Noelle:     Loop "  %487 = icmp eq i32 %484, 0" (2.083870e-01%)
Noelle:     Loop "  %500 = lshr i64 %498, 16" (1.714799e-02%)
Noelle:  Function "encode_mcu_AC_first"
Noelle:     Loop "  %42 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %40" (4.792297e+00%)
Noelle:     Loop "  %74 = load i32, i32* %33, align 8, !tbaa !61" (8.888395e-04%)
Noelle:     Loop "  %118 = lshr i64 %116, 16" (2.747101e-04%)
Noelle:     Loop "  %180 = ashr i32 %179, 1" (2.103076e-01%)
Noelle:     Loop "  %233 = lshr i64 %231, 16" (9.506808e-02%)
Noelle:     Loop "  %306 = lshr i64 %304, 16" (4.571877e-02%)
Noelle:  Function "rgb_ycc_convert"
Noelle:     Loop "  %26 = load i8**, i8*** %2, align 8, !tbaa !45" (3.935536e+00%)
Noelle:     Loop "  %39 = load i8, i8* %38, align 1, !tbaa !46" (3.935423e+00%)
Noelle:  Function "forward_DCT"
Noelle:     Loop "  %28 = zext i32 %27 to i64" (2.486162e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29" (6.072154e-01%)
Noelle:     Loop "  %77 = getelementptr inbounds i32, i32* %18, i64 %76" (1.864005e+00%)
Noelle:  Function "jpeg_fdct_islow"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !30" (1.079098e+00%)
Noelle:     Loop "  %95 = load i32, i32* %94, align 4, !tbaa !30" (1.100493e+00%)
Noelle:  Function "compress_output"
Noelle:     Loop "  %16 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %15" (2.039390e-04%)
Noelle:     Loop "  %54 = icmp ult i32 %52, %51" (8.181511e-01%)
Noelle:     Loop "  %56 = load i32, i32* %8, align 4, !tbaa !39" (8.179872e-01%)
Noelle:     Loop "  %62 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %60" (6.427602e-01%)
Noelle:     Loop "  %131 = add nsw i64 %129, %53" (0.000000e+00%)
Noelle:     Loop "  %137 = add i64 %136, %135" (0.000000e+00%)
Noelle:     Loop "  %160 = getelementptr inbounds [64 x i16], [64 x i16]* %158, i64 1" (0.000000e+00%)
Noelle:     Loop "  %103 = add nsw i64 %101, %53" (0.000000e+00%)
Noelle:     Loop "  %109 = add i64 %108, %107" (0.000000e+00%)
Noelle:     Loop "  %85 = sext i32 %84 to i64" (2.864007e-01%)
Noelle:     Loop "  %93 = getelementptr inbounds [64 x i16], [64 x i16]* %91, i64 1" (1.326726e-01%)
Noelle:  Function "emit_eobrun"
Noelle:     Loop "  %7 = ashr i32 %5, 1" (3.276659e-02%)
Noelle:     Loop "  %68 = lshr i64 %66, 16" (1.749598e-02%)
Noelle:     Loop "  %154 = lshr i64 %152, 16" (1.792054e-03%)
Noelle:     Loop "  %231 = icmp eq i32 %228, 0" (5.123367e-01%)
Noelle:     Loop "  %246 = lshr i64 %244, 16" (4.479985e-02%)
Noelle:  Function "h2v2_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59" (1.402861e-04%)
Noelle:     Loop "  %75 = or i64 %74, 1" (6.950056e-01%)
Noelle:     Loop "  %86 = load i8, i8* %84, align 1, !tbaa !44" (6.949158e-01%)
Noelle:  Function "encode_mcu_DC_first"
Noelle:     Loop "  %34 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %33" (2.132135e-01%)
Noelle:     Loop "  %105 = lshr i64 %103, 16" (9.250555e-03%)
Noelle:     Loop "  %183 = lshr i64 %181, 16" (9.316079e-03%)
Noelle:  Function "encode_mcu_DC_refine"
Noelle:     Loop "  %36 = load i32, i32* %30, align 8, !tbaa !50" (5.445365e-02%)
Noelle:     Loop "  %57 = lshr i64 %55, 16" (3.739171e-03%)
Noelle:  Function "compress_first_pass"
Noelle:     Loop "  %21 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (7.514084e-05%)
Noelle:     Loop "  %198 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %197" (1.860373e-05%)
Noelle:     Loop "  %147 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %146" (0.000000e+00%)
Noelle:     Loop "  %162 = getelementptr inbounds [64 x i16], [64 x i16]* %155, i64 %160" (0.000000e+00%)
Noelle:     Loop "  %190 = getelementptr inbounds [64 x i16], [64 x i16]* %155, i64 %188" (0.000000e+00%)
Noelle:     Loop "  %67 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %66" (0.000000e+00%)
Noelle:     Loop "  %82 = getelementptr inbounds [64 x i16], [64 x i16]* %75, i64 %80" (0.000000e+00%)
Noelle:     Loop "  %124 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %123" (0.000000e+00%)
Noelle:     Loop "  %139 = getelementptr inbounds [64 x i16], [64 x i16]* %132, i64 %137" (0.000000e+00%)
Noelle:     Loop "  %111 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %110" (0.000000e+00%)
Noelle:     Loop "  %314 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %313" (0.000000e+00%)
Noelle:     Loop "  %232 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %231" (0.000000e+00%)
Noelle:     Loop "  %262 = getelementptr inbounds [64 x i16], [64 x i16]* %259, i64 %221, i64 0" (0.000000e+00%)
Noelle:     Loop "  %266 = getelementptr inbounds [64 x i16], [64 x i16]* %260, i64 %264, i64 0" (0.000000e+00%)
Noelle:     Loop "  %278 = getelementptr inbounds [64 x i16], [64 x i16]* %260, i64 %276, i64 0" (0.000000e+00%)
Noelle:     Loop "  %241 = getelementptr inbounds [64 x i16], [64 x i16]* %238, i64 %221, i64 0" (0.000000e+00%)
Noelle:     Loop "  %245 = getelementptr inbounds [64 x i16], [64 x i16]* %239, i64 %243, i64 0" (0.000000e+00%)
Noelle:     Loop "  %293 = getelementptr inbounds [64 x i16], [64 x i16]* %290, i64 %221, i64 0" (0.000000e+00%)
Noelle:     Loop "  %301 = getelementptr inbounds [64 x i16], [64 x i16]* %291, i64 %299, i64 0" (0.000000e+00%)
Noelle:     Loop "  %306 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %305" (0.000000e+00%)
Noelle:  Function "finish_pass_gather_phuff"
Noelle:     Loop "  %46 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %45" (2.508198e-03%)
Noelle:     Loop "  %19 = load i32, i32* %14, align 4, !tbaa !43" (6.270723e-04%)
Noelle:  Function "jpeg_gen_optimal_table"
Noelle:     Loop "  %17 = getelementptr inbounds i64, i64* %2, i64 %14" (2.419094e-03%)
Noelle:     Loop "  %34 = getelementptr inbounds i64, i64* %2, i64 %31" (1.011493e-03%)
Noelle:     Loop "  %66 = sext i32 %65 to i64" (1.319685e-05%)
Noelle:     Loop "  %82 = sext i32 %81 to i64" (1.301457e-05%)
Noelle:     Loop "  %90 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %89" (2.269571e-05%)
Noelle:     Loop "  %108 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %106" (4.918174e-06%)
Noelle:     Loop "  br label %._crit_edge47" (3.366072e-06%)
Noelle:     Loop "  %116 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %115" (9.471802e-07%)
Noelle:     Loop "  %137 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %136" (1.536183e-07%)
Noelle:     Loop "  br label %._crit_edge52" (6.879131e-04%)
Noelle:     Loop "  %149 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %146" (6.858834e-04%)
Noelle:  Function "access_virt_barray"
Noelle:     Loop "  %80 = mul nsw i64 %77, %47" (0.000000e+00%)
Noelle:     Loop "  %162 = mul nsw i64 %159, %131" (0.000000e+00%)
Noelle:     Loop "  %226 = load [64 x i16]**, [64 x i16]*** %223, align 8, !tbaa !40" (0.000000e+00%)
Noelle:  Function "pre_process_data"
Noelle:     Loop "  %23 = load i32, i32* %5, align 4, !tbaa !39" (2.554322e-04%)
Noelle:     Loop "  %54 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %53" (1.392912e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %55, i32 %59, i8** %55, i32 %60, i32 1, i32 %56) #20" (9.153422e-08%)
Noelle:     Loop "  %99 = getelementptr inbounds i8**, i8*** %4, i64 %97" (4.329967e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %100, i32 %110, i8** %100, i32 %111, i32 1, i32 %103) #20" (3.709126e-07%)
Noelle:  Function "fullsize_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %3, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %3, i64 %60" (7.014307e-05%)
Noelle:  Function "jpeg_write_scanlines"
Noelle:  Function "sep_downsample"
Noelle:     Loop "  %18 = getelementptr inbounds i8**, i8*** %1, i64 %16" (1.823720e-04%)
Noelle:  Function "process_data_simple_main"
Noelle:     Loop "  %21 = icmp ult i32 %20, 8" (7.784787e-05%)
Noelle:  Function "jpeg_finish_compress"
Noelle:     Loop "  %42 = getelementptr inbounds %struct.jpeg_comp_master, %struct.jpeg_comp_master* %41, i64 0, i32 0" (1.203038e-04%)
Noelle:     Loop "  %48 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %37, align 8, !tbaa !57" (1.200324e-04%)
Noelle:  Function "jcopy_sample_rows"
Noelle:     Loop "  %29 = getelementptr inbounds i8*, i8** %27, i64 1" (4.489157e-05%)
Noelle:  Function "get_raw_row"
Noelle:  Function "empty_output_buffer"
Noelle:  Function "jpeg_make_c_derived_tbl"
Noelle:     Loop "  %23 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %1, i64 0, i32 0, i64 %20" (4.984237e-06%)
Noelle:     Loop "  %49 = add nsw <2 x i64> %46, <i64 8, i64 8>" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw <2 x i64> %58, <i64 1, i64 1>" (2.658472e-07%)
Noelle:     Loop "  %96 = sext i8 %92 to i32" (5.938581e-06%)
Noelle:     Loop "  %102 = add nsw i64 %100, 1" (3.238720e-06%)
Noelle:     Loop "  %143 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 %141" (4.483585e-06%)
Noelle:  Function "write_scan_header"
Noelle:     Loop "  %14 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %13" (9.484537e-06%)
Noelle:     Loop "  %287 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %286" (6.152692e-07%)
Noelle:  Function "realize_virt_arrays"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %8, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %41 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %38, i64 0, i32 0" (7.083953e-08%)
Noelle:     Loop "  %92 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %91, i64 0, i32 0" (1.116718e-06%)
Noelle:     Loop "  %143 = sub i32 %119, %141" (0.000000e+00%)
Noelle:     Loop "  %191 = add i32 %189, 1" (0.000000e+00%)
Noelle:     Loop "  %206 = add i32 %205, 1" (0.000000e+00%)
Noelle:     Loop "  %234 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %233, i64 0, i32 0" (9.879328e-06%)
Noelle:     Loop "  %288 = sub i32 %262, %286" (9.630992e-06%)
Noelle:     Loop "  %332 = add i32 %330, 1" (3.581774e-08%)
Noelle:     Loop "  %347 = add i32 %346, 1" (9.453495e-06%)
Noelle:  Function "emit_dht"
Noelle:     Loop "  %202 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 0, i64 %201" (2.539080e-06%)
Noelle:     Loop "  %225 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 1, i64 %224" (5.456236e-06%)
Noelle:  Function "rgb_ycc_start"
Noelle:     Loop "  %15 = mul nuw nsw i64 %14, 19595" (7.742203e-06%)
Noelle:  Function "jpeg_start_compress"
Noelle:  Function "jinit_compress_master"
Noelle:  Function "jinit_c_master_control"
Noelle:     Loop "  %106 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %105, i64 0, i32 2" (7.561523e-08%)
Noelle:     Loop "  %155 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %154, i64 0, i32 1" (1.178006e-07%)
Noelle:     Loop "  %222 = bitcast i32* %220 to i8*" (2.308254e-08%)
Noelle:     Loop "  %242 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 0" (5.116365e-06%)
Noelle:     Loop "  %258 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %257" (1.862522e-07%)
Noelle:     Loop "  %340 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %339" (4.493136e-06%)
Noelle:     Loop "  %403 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %402" (0.000000e+00%)
Noelle:     Loop "  %390 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %389" (1.675474e-06%)
Noelle:     Loop "  %368 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %367" (2.633002e-06%)
Noelle:     Loop "  %355 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %354" (0.000000e+00%)
Noelle:     Loop "  %430 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %429" (0.000000e+00%)
Noelle:     Loop "  %466 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %465, i64 0" (3.024609e-08%)
Noelle:     Loop "  %481 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i64 0, i64 %480" (0.000000e+00%)
Noelle:  Function "parse_switches"
Noelle:     Loop "  %34 = sext i32 %33 to i64" (3.323090e-06%)
Noelle:  Function "write_frame_header"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %8, i64 0, i32 4" (3.464769e-06%)
Noelle:     Loop "  %43 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %40, i64 0, i32 5" (0.000000e+00%)
Noelle:  Function "jpeg_set_linear_quality"
Noelle:     Loop "  %41 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %40" (9.161382e-07%)
Noelle:     Loop "  %26 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %25" (9.161382e-07%)
Noelle:     Loop "  %90 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %89" (9.161382e-07%)
Noelle:     Loop "  %75 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %74" (9.161382e-07%)
Noelle:  Function "emit_dqt"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %5, i64 0, i32 0, i64 %16" (8.381351e-07%)
Noelle:     Loop "  %197 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %196" (2.443566e-06%)
Noelle:     Loop "  %150 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %149" (0.000000e+00%)
Noelle:  Function "keymatch"
Noelle:     Loop "  %10 = getelementptr inbounds i8, i8* %7, i64 1" (2.419687e-06%)
Noelle:  Function "jpeg_set_defaults"
Noelle:  Function "jpeg_set_quality"
Noelle:  Function "alloc_small"
Noelle:     Loop "  %35 = getelementptr inbounds %union.small_pool_struct, %union.small_pool_struct* %34, i64 0, i32 0, i32 2" (2.316214e-07%)
Noelle:     Loop "  %59 = lshr i64 %58, 1" (0.000000e+00%)
Noelle:  Function "finish_pass_phuff"
Noelle:  Function "start_pass_phuff"
Noelle:     Loop "  %134 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %133" (0.000000e+00%)
Noelle:     Loop "  %45 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %44" (3.183799e-07%)
Noelle:     Loop "  %108 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %107" (0.000000e+00%)
Noelle:     Loop "  %75 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %74" (1.878441e-07%)
Noelle:  Function "prepare_for_pass"
Noelle:  Function "alloc_sarray"
Noelle:     Loop "  %29 = sub i32 %3, %27" (5.547770e-07%)
Noelle:     Loop "  %43 = add i32 %41, 1" (5.492053e-08%)
Noelle:     Loop "  %58 = add i32 %57, 1" (1.695373e-07%)
Noelle:  Function "per_scan_setup"
Noelle:     Loop "  %68 = getelementptr inbounds %struct.jpeg_compress_struct.275, %struct.jpeg_compress_struct.275* %0, i64 0, i32 42, i64 %67" (3.438503e-07%)
Noelle:     Loop "  %106 = load i32, i32* %60, align 8, !tbaa !51" (3.183799e-08%)
Noelle:     Loop "  %116 = load i32, i32* %60, align 8, !tbaa !51" (4.457319e-08%)
Noelle:  Function "start_pass_coef"
Noelle:  Function "select_scan_parameters"
Noelle:     Loop "  %32 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %83" (1.146168e-07%)
Noelle:     Loop "  %138 = add <2 x i64> %136, <i64 2, i64 2>" (0.000000e+00%)
Noelle:     Loop "  %172 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %124, i64 %171" (0.000000e+00%)
Noelle:  Function "flush_bits"
Noelle:     Loop "  %23 = lshr i64 %21, 16" (1.647616e-07%)
Noelle:  Function "start_pass_fdctmgr"
Noelle:     Loop "  %17 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %16, i64 0, i32 4" (3.852397e-07%)
Noelle:     Loop "  %209 = shl i64 %208, 3" (0.000000e+00%)
Noelle:     Loop "  %170 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %33, i64 0, i32 0, i64 %169" (0.000000e+00%)
Noelle:  Function "finish_pass_master"
Noelle:  Function "free_pool"
Noelle:     Loop "  %22 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %21, i64 0, i32 10" (0.000000e+00%)
Noelle:     Loop "  %36 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %35, i64 0, i32 10" (2.547039e-08%)
Noelle:     Loop "  %54 = bitcast %union.large_pool_struct* %53 to i8*" (1.289439e-07%)
Noelle:     Loop "  %73 = bitcast %union.small_pool_struct* %72 to i8*" (8.516662e-08%)
Noelle:  Function "emit_sof"
Noelle:     Loop "  %250 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %248, i64 0, i32 0" (1.424750e-07%)
Noelle:  Function "start_input_ppm"
Noelle:     Loop "  %179 = load i8*, i8** %167, align 8, !tbaa !67" (0.000000e+00%)
Noelle:  Function "self_destruct"
Noelle:  Function "write_file_header"
Noelle:  Function "alloc_large"
Noelle:  Function "request_virt_barray"
Noelle:  Function "read_pbm_integer"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (3.661369e-08%)
Noelle:     Loop "  %6 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:     Loop "  %31 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (1.074532e-07%)
Noelle:     Loop "  %33 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:  Function "jinit_c_coef_controller"
Noelle:     Loop "  %24 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (9.392207e-08%)
Noelle:  Function "jinit_downsampler"
Noelle:     Loop "  %40 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %39, i64 0, i32 2" (6.956172e-01%)
Noelle:  Function "jpeg_simple_progression"
Noelle:     Loop "  %190 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %188, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %220 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %218, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %131 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %128" (0.000000e+00%)
Noelle:     Loop "  %167 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %164" (0.000000e+00%)
Noelle:     Loop "  %179 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %178" (0.000000e+00%)
Noelle:     Loop "  %240 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %238, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %270 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %268, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %284 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %282, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %313 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %311, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %327 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %325, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %356 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %354, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %446 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %444, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %476 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %474, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %388 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %385" (0.000000e+00%)
Noelle:     Loop "  %424 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %421" (0.000000e+00%)
Noelle:     Loop "  %436 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %435" (0.000000e+00%)
Noelle:     Loop "  %494 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %492, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %523 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %521, i64 0, i32 0" (0.000000e+00%)
Noelle:  Function "jinit_c_prep_controller"
Noelle:     Loop "  %83 = mul i64 %62, %80" (0.000000e+00%)
Noelle:     Loop "  %140 = add nsw i64 %138, %60" (0.000000e+00%)
Noelle:     Loop "  %231 = add nsw i64 %230, %60" (0.000000e+00%)
Noelle:     Loop "  %278 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (6.606383e-08%)
Noelle:  Function "jpeg_default_colorspace"
Noelle:     Loop "  %202 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %199, i64 %201, i32 0" (0.000000e+00%)
Noelle:  Function "jpeg_CreateCompress"
Noelle:  Function "jinit_c_main_controller"
Noelle:     Loop "  %34 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (4.934888e-08%)
Noelle:  Function "jpeg_suppress_tables"
Noelle:  Function "jdiv_round_up"
Noelle:  Function "jinit_memory_mgr"
Noelle:  Function "jinit_color_converter"
Noelle:  Function "jpeg_alloc_huff_table"
Noelle:  Function "jround_up"
Noelle:  Function "jinit_forward_dct"
Noelle:  Function "write_file_trailer"
Noelle:  Function "jpeg_std_error"
Noelle:  Function "term_destination"
Noelle:  Function "jpeg_stdio_dest"
Noelle:  Function "start_pass_main"
Noelle:  Function "jinit_marker_writer"
Noelle:  Function "jpeg_alloc_quant_table"
Noelle:  Function "start_pass_prep"
Noelle:  Function "jpeg_free_large"
Noelle:  Function "jpeg_get_large"
Noelle:  Function "jinit_phuff_encoder"
Noelle:  Function "jpeg_destroy_compress"
Noelle:  Function "init_destination"
Noelle:  Function "jpeg_free_small"
Noelle:  Function "jpeg_get_small"
Noelle:  Function "jpeg_destroy"
Noelle:  Function "jinit_read_ppm"
Noelle:  Function "jpeg_abort"
Noelle:  Function "emit_message"
Noelle:  Function "reset_error_mgr"
Noelle:  Function "jpeg_mem_available"
Noelle:  Function "start_pass_downsample"
Noelle:  Function "finish_input_ppm"
Noelle:  Function "output_message"
Noelle:  Function "request_virt_sarray"
Noelle:  Function "error_exit"
Noelle:  Function "jpeg_quality_scaling"
Noelle:  Function "format_message"
Noelle:     Loop "  %41 = getelementptr inbounds i8, i8* %40, i64 1" (0.000000e+00%)
Noelle:  Function "jpeg_add_quant_table"
Noelle:     Loop "  %29 = getelementptr inbounds i32, i32* %2, i64 %28" (0.000000e+00%)
Noelle:     Loop "  %44 = getelementptr inbounds i32, i32* %2, i64 %43" (0.000000e+00%)
Noelle:  Function "jpeg_write_raw_data"
Noelle:  Function "access_virt_sarray"
Noelle:     Loop "  %79 = mul nsw i64 %76, %46" (0.000000e+00%)
Noelle:     Loop "  %159 = mul nsw i64 %156, %128" (0.000000e+00%)
Noelle:     Loop "  %221 = load i8**, i8*** %218, align 8, !tbaa !38" (0.000000e+00%)
Noelle:  Function "jpeg_fdct_ifast"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "jpeg_mem_term"
Noelle:  Function "jpeg_mem_init"
Noelle:  Function "jpeg_open_backing_store"
Noelle:  Function "pre_process_context"
Noelle:     Loop "  %27 = load i32, i32* %2, align 4, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %90 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %89" (0.000000e+00%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %91, i32 %95, i8** %91, i32 %96, i32 1, i32 %92) #20" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp slt i32 %50, 1" (0.000000e+00%)
Noelle:     Loop "  %56 = load i8**, i8*** %54, align 8, !tbaa !50" (0.000000e+00%)
Noelle:  Function "null_convert"
Noelle:     Loop "  %25 = add nsw i32 %22, -1" (0.000000e+00%)
Noelle:     Loop "  %28 = getelementptr inbounds i8**, i8*** %2, i64 %27" (0.000000e+00%)
Noelle:     Loop "  %36 = getelementptr inbounds i8, i8* %34, i64 %27" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8, i8* %59, i64 %27" (0.000000e+00%)
Noelle:     Loop "  %71 = getelementptr inbounds i8**, i8*** %2, i64 %70" (0.000000e+00%)
Noelle:     Loop "  %79 = getelementptr inbounds i8, i8* %77, i64 %70" (0.000000e+00%)
Noelle:     Loop "  %104 = getelementptr inbounds i8**, i8*** %2, i64 %103" (0.000000e+00%)
Noelle:     Loop "  %112 = getelementptr inbounds i8, i8* %110, i64 %103" (0.000000e+00%)
Noelle:  Function "forward_DCT_float"
Noelle:     Loop "  %28 = zext i32 %27 to i64" (0.000000e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %85 = getelementptr inbounds [64 x float], [64 x float]* %8, i64 0, i64 %84" (0.000000e+00%)
Noelle:  Function "jzero_far"
Noelle:  Function "jpeg_fdct_float"
Noelle:  Function "pass_startup"
Noelle:  Function "alloc_barray"
Noelle:     Loop "  %31 = sub i32 %3, %29" (0.000000e+00%)
Noelle:     Loop "  %46 = add i32 %44, 1" (0.000000e+00%)
Noelle:     Loop "  %61 = add i32 %60, 1" (0.000000e+00%)
Noelle:  Function "jpeg_set_colorspace"
Noelle:     Loop "  %130 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %127, i64 %129, i32 0" (0.000000e+00%)
Noelle:  Function "jcopy_block_row"
Noelle:  Function "get_text_rgb_row"
Noelle:     Loop "  %17 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "get_word_gray_row"
Noelle:     Loop "  %54 = getelementptr inbounds i8, i8* %53, i64 1" (0.000000e+00%)
Noelle:  Function "load_interlaced_image"
Noelle:     Loop "  %46 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %16, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %58 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:     Loop "  store i64 %20, i64* %12, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %36 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "get_scaled_gray_row"
Noelle:     Loop "  %38 = getelementptr inbounds i8, i8* %36, i64 1" (0.000000e+00%)
Noelle:     Loop "  %54 = getelementptr inbounds i8, i8* %53, i64 1" (0.000000e+00%)
Noelle:  Function "get_word_rgb_row"
Noelle:     Loop "  %35 = getelementptr inbounds i8, i8* %34, i64 1" (0.000000e+00%)
Noelle:  Function "get_scaled_rgb_row"
Noelle:     Loop "  %61 = getelementptr inbounds i8, i8* %60, i64 1" (0.000000e+00%)
Noelle:  Function "get_text_gray_row"
Noelle:     Loop "  %17 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "jinit_read_gif"
Noelle:  Function "cmyk_ycck_convert"
Noelle:     Loop "  %27 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %43 = load i8, i8* %42, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "fullsize_smooth_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %8, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %8, i64 %59" (0.000000e+00%)
Noelle:     Loop "  %82 = getelementptr inbounds i8*, i8** %3, i64 %81" (0.000000e+00%)
Noelle:     Loop "  %131 = getelementptr inbounds i8, i8* %130, i64 1" (0.000000e+00%)
Noelle:  Function "h2v1_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59" (0.000000e+00%)
Noelle:     Loop "  %74 = getelementptr inbounds i8*, i8** %2, i64 %73" (0.000000e+00%)
Noelle:     Loop "  %81 = load i8, i8* %79, align 1, !tbaa !42" (0.000000e+00%)
Noelle:  Function "h2v2_smooth_downsample"
Noelle:     Loop "  %33 = getelementptr inbounds i8*, i8** %8, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %8, i64 %60" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds i8*, i8** %3, i64 %82" (0.000000e+00%)
Noelle:     Loop "  %159 = getelementptr inbounds i8, i8* %158, i64 1" (0.000000e+00%)
Noelle:  Function "int_downsample"
Noelle:     Loop "  %41 = getelementptr inbounds i8*, i8** %2, i64 %39" (0.000000e+00%)
Noelle:     Loop "  %71 = getelementptr inbounds i8*, i8** %2, i64 %69" (0.000000e+00%)
Noelle:     Loop "  br i1 %83, label %._crit_edge40.._crit_edge36_crit_edge, label %107" (0.000000e+00%)
Noelle:     Loop "  br i1 %84, label %113, label %.loopexit2._crit_edge..loopexit2_crit_edge" (0.000000e+00%)
Noelle:     Loop "  %235 = add nsw i64 %233, %106" (0.000000e+00%)
Noelle:     Loop "  %244 = getelementptr i8, i8* %238, i64 %240" (0.000000e+00%)
Noelle:     Loop "  %286 = getelementptr inbounds i8, i8* %284, i64 1" (0.000000e+00%)
Noelle:     Loop "  %117 = add nsw i64 %115, %106" (0.000000e+00%)
Noelle:     Loop "  %126 = getelementptr i8, i8* %120, i64 %122" (0.000000e+00%)
Noelle:     Loop "  %157 = getelementptr inbounds i8, i8* %155, i64 1" (0.000000e+00%)
Noelle:     Loop "  %203 = add nsw i64 %201, %106" (0.000000e+00%)
Noelle:     Loop "  %224 = getelementptr inbounds i8, i8* %222, i64 1" (0.000000e+00%)
Noelle:     Loop "  %168 = add nsw i64 %167, %106" (0.000000e+00%)
Noelle:     Loop "  %176 = getelementptr inbounds i8, i8* %174, i64 1" (0.000000e+00%)
Noelle:     Loop "  %186 = add nsw i64 %184, %106" (0.000000e+00%)
Noelle:     Loop "  %193 = getelementptr inbounds i8, i8* %191, i64 1" (0.000000e+00%)
Noelle:  Function "jinit_huff_encoder"
Noelle:  Function "start_pass_huff"
Noelle:     Loop "  %75 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %74" (1.597471e-05%)
Noelle:     Loop "  %19 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %18" (0.000000e+00%)
Noelle:  Function "jinit_read_targa"
Noelle:  Function "usage"
Noelle:  Function "start_input_gif"
Noelle:     Loop "  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %144 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %193 = icmp sgt i32 %192, 0" (0.000000e+00%)
Noelle:     Loop "  %258 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:  Function "finish_input_gif"
Noelle:  Function "get_pixel_rows"
Noelle:     Loop "  %18 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "LZWReadByte"
Noelle:     Loop "  %137 = load i8*, i8** %134, align 8, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %81 = icmp sgt i32 %80, 0" (0.000000e+00%)
Noelle:     Loop "  %39 = tail call fastcc i32 @GetCode(%struct.gif_source_struct* nonnull %0)" (0.000000e+00%)
Noelle:  Function "GetCode"
Noelle:     Loop "  %18 = load i32, i32* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "get_interlaced_row"
Noelle:     Loop "  %72 = getelementptr inbounds i8, i8* %69, i64 1" (0.000000e+00%)
Noelle:  Function "encode_mcu_gather"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.huff_entropy_encoder, %struct.huff_entropy_encoder* %5, i64 0, i32 1, i32 2, i64 %17" (0.000000e+00%)
Noelle:     Loop "  %32 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %70 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %68" (0.000000e+00%)
Noelle:  Function "start_input_tga"
Noelle:     Loop "  %214 = add nsw i32 %213, -1" (0.000000e+00%)
Noelle:     Loop "  %274 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "finish_pass_gather"
Noelle:     Loop "  %15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %14" (6.367598e-09%)
Noelle:  Function "finish_pass_huff"
Noelle:     Loop "  %30 = lshr i64 %29, 16" (0.000000e+00%)
Noelle:  Function "emit_restart"
Noelle:     Loop "  %76 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 7, i64 %75" (0.000000e+00%)
Noelle:  Function "read_stdin"
Noelle:  Function "read_text_integer"
Noelle:     Loop "  %4 = tail call fastcc i32 @text_getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:     Loop "  %24 = load i16*, i16** %.lcssa20, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "text_getc"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:  Function "read_scan_script"
Noelle:     Loop "  %23 = icmp eq i32 %22, 100" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp eq i64 %35, 4" (0.000000e+00%)
Noelle:  Function "read_scan_integer"
Noelle:     Loop "  %11 = load i16*, i16** %9, align 8, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %20 = tail call i32 @getc(%struct._IO_FILE* %0) #21" (0.000000e+00%)
Noelle:  Function "set_quant_slots"
Noelle:     Loop "  %9 = load i8, i8* %8, align 1, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %29 = load i8, i8* %28, align 1, !tbaa !34" (0.000000e+00%)
Noelle:  Function "set_sample_factors"
Noelle:     Loop "  %12 = load i8, i8* %11, align 1, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %38 = load i8, i8* %37, align 1, !tbaa !30" (0.000000e+00%)
Noelle:  Function "read_quant_tables"
Noelle:     Loop "  %24 = icmp eq i32 %23, 4" (0.000000e+00%)
Noelle:     Loop "  %34 = call fastcc i32 @read_text_integer(%struct._IO_FILE* nonnull %12, i64* nonnull %6, i32* nonnull %5)" (0.000000e+00%)
Noelle:  Function "compress_data"
Noelle:     Loop "  %28 = icmp ugt i32 %26, %8" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %19, align 4, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %39 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %37" (0.000000e+00%)
Noelle:     Loop "  %60 = load i32, i32* %20, align 8, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %145 = load i16, i16* %136, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %175 = load i16, i16* %136, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %105 = add i64 %104, %70" (0.000000e+00%)
Noelle:  Function "null_method"
Noelle:  Function "grayscale_convert"
Noelle:     Loop "  %90 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %98 = load i8, i8* %96, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %77 = load i8, i8* %75, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %23 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %29, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %56 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %64 = load i8, i8* %62, align 1, !tbaa !40" (0.000000e+00%)
Noelle:  Function "rgb_gray_convert"
Noelle:     Loop "  %24 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %30, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "write_stdout"
Noelle:  Function "jpeg_abort_compress"
Noelle:  Function "jpeg_write_marker"
Noelle:  Function "get_memory_row"
Noelle:  Function "encode_mcu_huff"
Noelle:     Loop "  %49 = lshr i64 %48, 16" (0.000000e+00%)
Noelle:     Loop "  %140 = getelementptr inbounds %struct.working_state, %struct.working_state* %3, i64 0, i32 2, i32 2, i64 %139" (0.000000e+00%)
Noelle:     Loop "  %156 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %155" (0.000000e+00%)
Noelle:     Loop "  %219 = lshr i64 %218, 16" (0.000000e+00%)
Noelle:     Loop "  %280 = lshr i64 %279, 16" (0.000000e+00%)
Noelle:     Loop "  %337 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %335" (0.000000e+00%)
Noelle:     Loop "  %352 = load i32, i32* %330, align 4, !tbaa !49" (0.000000e+00%)
Noelle:     Loop "  %377 = lshr i64 %376, 16" (0.000000e+00%)
Noelle:     Loop "  %469 = lshr i64 %468, 16" (0.000000e+00%)
Noelle:     Loop "  %529 = lshr i64 %528, 16" (0.000000e+00%)
Noelle:     Loop "  %613 = lshr i64 %612, 16" (0.000000e+00%)
Noelle:  Function "finish_input_tga"
Noelle:  Function "read_rle_pixel"
Noelle:     Loop "  %35 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "read_non_rle_pixel"
Noelle:     Loop "  %8 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "get_8bit_row"
Noelle:     Loop "  %22 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %15, align 8, !tbaa !43" (0.000000e+00%)
Noelle:  Function "get_16bit_row"
Noelle:     Loop "  %19 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_24bit_row"
Noelle:     Loop "  %20 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_8bit_gray_row"
Noelle:     Loop "  %17 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "preload_image"
Noelle:     Loop "  %37 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  store i64 %20, i64* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "jpeg_write_tables"
Noelle:  Function "jinit_read_bmp"
Noelle:  Function "start_input_bmp"
Noelle:     Loop "  %461 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %411 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %550 = add nsw i64 %549, -1" (0.000000e+00%)
Noelle:  Function "finish_input_bmp"
Noelle:  Function "preload_image.9"
Noelle:     Loop "  %55 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %18, align 8, !tbaa !48" (0.000000e+00%)
Noelle:     Loop "  %67 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:     Loop "  store i64 %23, i64* %14, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %39 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "write_any_marker"
Noelle:     Loop "  %99 = add i32 %97, -1" (0.000000e+00%)
Noelle:  Function "write_tables_only"
Noelle:  Function "get_8bit_row.10"
Noelle:     Loop "  %55 = getelementptr inbounds i8, i8* %54, i64 1" (0.000000e+00%)
Noelle:  Function "get_24bit_row.11"
Noelle:     Loop "  %44 = getelementptr inbounds i8, i8* %43, i64 1" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !56" (7.179014e+01%)
Noelle:  Function "encode_mcu_AC_refine"
Noelle:     Loop "  %40 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %38" (5.986120e+00%)
Noelle:     Loop "  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %69" (6.434902e+00%)
Noelle:     Loop "  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %6)" (9.731302e-03%)
Noelle:     Loop "  %129 = lshr i64 %127, 16" (3.310650e-04%)
Noelle:     Loop "  %199 = icmp eq i32 %196, 0" (3.328213e-03%)
Noelle:     Loop "  %212 = lshr i64 %210, 16" (2.726542e-04%)
Noelle:     Loop "  %340 = lshr i64 %338, 16" (1.702081e-02%)
Noelle:     Loop "  %416 = lshr i64 %414, 16" (5.348372e-03%)
Noelle:     Loop "  %487 = icmp eq i32 %484, 0" (2.083870e-01%)
Noelle:     Loop "  %500 = lshr i64 %498, 16" (1.714799e-02%)
Noelle:  Function "encode_mcu_AC_first"
Noelle:     Loop "  %42 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %40" (4.792297e+00%)
Noelle:     Loop "  %74 = load i32, i32* %33, align 8, !tbaa !61" (8.888395e-04%)
Noelle:     Loop "  %118 = lshr i64 %116, 16" (2.747101e-04%)
Noelle:     Loop "  %180 = ashr i32 %179, 1" (2.103076e-01%)
Noelle:     Loop "  %233 = lshr i64 %231, 16" (9.506808e-02%)
Noelle:     Loop "  %306 = lshr i64 %304, 16" (4.571877e-02%)
Noelle:  Function "rgb_ycc_convert"
Noelle:     Loop "  %26 = load i8**, i8*** %2, align 8, !tbaa !45" (3.935536e+00%)
Noelle:     Loop "  %39 = load i8, i8* %38, align 1, !tbaa !46" (3.935423e+00%)
Noelle:  Function "forward_DCT"
Noelle:     Loop "  %28 = zext i32 %27 to i64" (2.486162e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29" (6.072154e-01%)
Noelle:     Loop "  %77 = getelementptr inbounds i32, i32* %18, i64 %76" (1.864005e+00%)
Noelle:  Function "jpeg_fdct_islow"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !30" (1.079098e+00%)
Noelle:     Loop "  %95 = load i32, i32* %94, align 4, !tbaa !30" (1.100493e+00%)
Noelle:  Function "compress_output"
Noelle:     Loop "  %16 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %15" (2.039390e-04%)
Noelle:     Loop "  %54 = icmp ult i32 %52, %51" (8.181511e-01%)
Noelle:     Loop "  %56 = load i32, i32* %8, align 4, !tbaa !39" (8.179872e-01%)
Noelle:     Loop "  %62 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %60" (6.427602e-01%)
Noelle:     Loop "  %131 = add nsw i64 %129, %53" (0.000000e+00%)
Noelle:     Loop "  %137 = add i64 %136, %135" (0.000000e+00%)
Noelle:     Loop "  %160 = getelementptr inbounds [64 x i16], [64 x i16]* %158, i64 1" (0.000000e+00%)
Noelle:     Loop "  %103 = add nsw i64 %101, %53" (0.000000e+00%)
Noelle:     Loop "  %109 = add i64 %108, %107" (0.000000e+00%)
Noelle:     Loop "  %85 = sext i32 %84 to i64" (2.864007e-01%)
Noelle:     Loop "  %93 = getelementptr inbounds [64 x i16], [64 x i16]* %91, i64 1" (1.326726e-01%)
Noelle:  Function "emit_eobrun"
Noelle:     Loop "  %7 = ashr i32 %5, 1" (3.276659e-02%)
Noelle:     Loop "  %68 = lshr i64 %66, 16" (1.749598e-02%)
Noelle:     Loop "  %154 = lshr i64 %152, 16" (1.792054e-03%)
Noelle:     Loop "  %231 = icmp eq i32 %228, 0" (5.123367e-01%)
Noelle:     Loop "  %246 = lshr i64 %244, 16" (4.479985e-02%)
Noelle:  Function "h2v2_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59" (1.402861e-04%)
Noelle:     Loop "  %75 = or i64 %74, 1" (6.950056e-01%)
Noelle:     Loop "  %86 = load i8, i8* %84, align 1, !tbaa !44" (6.949158e-01%)
Noelle:  Function "encode_mcu_DC_first"
Noelle:     Loop "  %34 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %33" (2.132135e-01%)
Noelle:     Loop "  %105 = lshr i64 %103, 16" (9.250555e-03%)
Noelle:     Loop "  %183 = lshr i64 %181, 16" (9.316079e-03%)
Noelle:  Function "encode_mcu_DC_refine"
Noelle:     Loop "  %36 = load i32, i32* %30, align 8, !tbaa !50" (5.445365e-02%)
Noelle:     Loop "  %57 = lshr i64 %55, 16" (3.739171e-03%)
Noelle:  Function "compress_first_pass"
Noelle:     Loop "  %21 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (7.514084e-05%)
Noelle:     Loop "  %198 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %197" (1.860373e-05%)
Noelle:     Loop "  %147 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %146" (0.000000e+00%)
Noelle:     Loop "  %162 = getelementptr inbounds [64 x i16], [64 x i16]* %155, i64 %160" (0.000000e+00%)
Noelle:     Loop "  %190 = getelementptr inbounds [64 x i16], [64 x i16]* %155, i64 %188" (0.000000e+00%)
Noelle:     Loop "  %67 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %66" (0.000000e+00%)
Noelle:     Loop "  %82 = getelementptr inbounds [64 x i16], [64 x i16]* %75, i64 %80" (0.000000e+00%)
Noelle:     Loop "  %124 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %123" (0.000000e+00%)
Noelle:     Loop "  %139 = getelementptr inbounds [64 x i16], [64 x i16]* %132, i64 %137" (0.000000e+00%)
Noelle:     Loop "  %111 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %110" (0.000000e+00%)
Noelle:     Loop "  %314 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %313" (0.000000e+00%)
Noelle:     Loop "  %232 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %231" (0.000000e+00%)
Noelle:     Loop "  %262 = getelementptr inbounds [64 x i16], [64 x i16]* %259, i64 %221, i64 0" (0.000000e+00%)
Noelle:     Loop "  %266 = getelementptr inbounds [64 x i16], [64 x i16]* %260, i64 %264, i64 0" (0.000000e+00%)
Noelle:     Loop "  %278 = getelementptr inbounds [64 x i16], [64 x i16]* %260, i64 %276, i64 0" (0.000000e+00%)
Noelle:     Loop "  %241 = getelementptr inbounds [64 x i16], [64 x i16]* %238, i64 %221, i64 0" (0.000000e+00%)
Noelle:     Loop "  %245 = getelementptr inbounds [64 x i16], [64 x i16]* %239, i64 %243, i64 0" (0.000000e+00%)
Noelle:     Loop "  %293 = getelementptr inbounds [64 x i16], [64 x i16]* %290, i64 %221, i64 0" (0.000000e+00%)
Noelle:     Loop "  %301 = getelementptr inbounds [64 x i16], [64 x i16]* %291, i64 %299, i64 0" (0.000000e+00%)
Noelle:     Loop "  %306 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %305" (0.000000e+00%)
Noelle:  Function "finish_pass_gather_phuff"
Noelle:     Loop "  %46 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %45" (2.508198e-03%)
Noelle:     Loop "  %19 = load i32, i32* %14, align 4, !tbaa !43" (6.270723e-04%)
Noelle:  Function "jpeg_gen_optimal_table"
Noelle:     Loop "  %17 = getelementptr inbounds i64, i64* %2, i64 %14" (2.419094e-03%)
Noelle:     Loop "  %34 = getelementptr inbounds i64, i64* %2, i64 %31" (1.011493e-03%)
Noelle:     Loop "  %66 = sext i32 %65 to i64" (1.319685e-05%)
Noelle:     Loop "  %82 = sext i32 %81 to i64" (1.301457e-05%)
Noelle:     Loop "  %90 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %89" (2.269571e-05%)
Noelle:     Loop "  %108 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %106" (4.918174e-06%)
Noelle:     Loop "  br label %._crit_edge47" (3.366072e-06%)
Noelle:     Loop "  %116 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %115" (9.471802e-07%)
Noelle:     Loop "  %137 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %136" (1.536183e-07%)
Noelle:     Loop "  br label %._crit_edge52" (6.879131e-04%)
Noelle:     Loop "  %149 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %146" (6.858834e-04%)
Noelle:  Function "access_virt_barray"
Noelle:     Loop "  %80 = mul nsw i64 %77, %47" (0.000000e+00%)
Noelle:     Loop "  %162 = mul nsw i64 %159, %131" (0.000000e+00%)
Noelle:     Loop "  %226 = load [64 x i16]**, [64 x i16]*** %223, align 8, !tbaa !40" (0.000000e+00%)
Noelle:  Function "pre_process_data"
Noelle:     Loop "  %23 = load i32, i32* %5, align 4, !tbaa !39" (2.554322e-04%)
Noelle:     Loop "  %54 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %53" (1.392912e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %55, i32 %59, i8** %55, i32 %60, i32 1, i32 %56) #20" (9.153422e-08%)
Noelle:     Loop "  %99 = getelementptr inbounds i8**, i8*** %4, i64 %97" (4.329967e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %100, i32 %110, i8** %100, i32 %111, i32 1, i32 %103) #20" (3.709126e-07%)
Noelle:  Function "fullsize_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %3, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %3, i64 %60" (7.014307e-05%)
Noelle:  Function "jpeg_write_scanlines"
Noelle:  Function "sep_downsample"
Noelle:     Loop "  %18 = getelementptr inbounds i8**, i8*** %1, i64 %16" (1.823720e-04%)
Noelle:  Function "process_data_simple_main"
Noelle:     Loop "  %21 = icmp ult i32 %20, 8" (7.784787e-05%)
Noelle:  Function "jpeg_finish_compress"
Noelle:     Loop "  %42 = getelementptr inbounds %struct.jpeg_comp_master, %struct.jpeg_comp_master* %41, i64 0, i32 0" (1.203038e-04%)
Noelle:     Loop "  %48 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %37, align 8, !tbaa !57" (1.200324e-04%)
Noelle:  Function "jcopy_sample_rows"
Noelle:     Loop "  %29 = getelementptr inbounds i8*, i8** %27, i64 1" (4.489157e-05%)
Noelle:  Function "get_raw_row"
Noelle:  Function "empty_output_buffer"
Noelle:  Function "jpeg_make_c_derived_tbl"
Noelle:     Loop "  %23 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %1, i64 0, i32 0, i64 %20" (4.984237e-06%)
Noelle:     Loop "  %49 = add nsw <2 x i64> %46, <i64 8, i64 8>" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw <2 x i64> %58, <i64 1, i64 1>" (2.658472e-07%)
Noelle:     Loop "  %96 = sext i8 %92 to i32" (5.938581e-06%)
Noelle:     Loop "  %102 = add nsw i64 %100, 1" (3.238720e-06%)
Noelle:     Loop "  %143 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 %141" (4.483585e-06%)
Noelle:  Function "write_scan_header"
Noelle:     Loop "  %14 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %13" (9.484537e-06%)
Noelle:     Loop "  %287 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %286" (6.152692e-07%)
Noelle:  Function "realize_virt_arrays"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %8, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %41 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %38, i64 0, i32 0" (7.083953e-08%)
Noelle:     Loop "  %92 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %91, i64 0, i32 0" (1.116718e-06%)
Noelle:     Loop "  %143 = sub i32 %119, %141" (0.000000e+00%)
Noelle:     Loop "  %191 = add i32 %189, 1" (0.000000e+00%)
Noelle:     Loop "  %206 = add i32 %205, 1" (0.000000e+00%)
Noelle:     Loop "  %234 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %233, i64 0, i32 0" (9.879328e-06%)
Noelle:     Loop "  %288 = sub i32 %262, %286" (9.630992e-06%)
Noelle:     Loop "  %332 = add i32 %330, 1" (3.581774e-08%)
Noelle:     Loop "  %347 = add i32 %346, 1" (9.453495e-06%)
Noelle:  Function "emit_dht"
Noelle:     Loop "  %202 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 0, i64 %201" (2.539080e-06%)
Noelle:     Loop "  %225 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 1, i64 %224" (5.456236e-06%)
Noelle:  Function "rgb_ycc_start"
Noelle:     Loop "  %15 = mul nuw nsw i64 %14, 19595" (7.742203e-06%)
Noelle:  Function "jpeg_start_compress"
Noelle:  Function "jinit_compress_master"
Noelle:  Function "jinit_c_master_control"
Noelle:     Loop "  %106 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %105, i64 0, i32 2" (7.561523e-08%)
Noelle:     Loop "  %155 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %154, i64 0, i32 1" (1.178006e-07%)
Noelle:     Loop "  %222 = bitcast i32* %220 to i8*" (2.308254e-08%)
Noelle:     Loop "  %242 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 0" (5.116365e-06%)
Noelle:     Loop "  %258 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %257" (1.862522e-07%)
Noelle:     Loop "  %340 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %339" (4.493136e-06%)
Noelle:     Loop "  %403 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %402" (0.000000e+00%)
Noelle:     Loop "  %390 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %389" (1.675474e-06%)
Noelle:     Loop "  %368 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %367" (2.633002e-06%)
Noelle:     Loop "  %355 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %354" (0.000000e+00%)
Noelle:     Loop "  %430 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %429" (0.000000e+00%)
Noelle:     Loop "  %466 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %465, i64 0" (3.024609e-08%)
Noelle:     Loop "  %481 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i64 0, i64 %480" (0.000000e+00%)
Noelle:  Function "parse_switches"
Noelle:     Loop "  %34 = sext i32 %33 to i64" (3.323090e-06%)
Noelle:  Function "write_frame_header"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %8, i64 0, i32 4" (3.464769e-06%)
Noelle:     Loop "  %43 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %40, i64 0, i32 5" (0.000000e+00%)
Noelle:  Function "jpeg_set_linear_quality"
Noelle:     Loop "  %41 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %40" (9.161382e-07%)
Noelle:     Loop "  %26 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %25" (9.161382e-07%)
Noelle:     Loop "  %90 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %89" (9.161382e-07%)
Noelle:     Loop "  %75 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %74" (9.161382e-07%)
Noelle:  Function "emit_dqt"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %5, i64 0, i32 0, i64 %16" (8.381351e-07%)
Noelle:     Loop "  %197 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %196" (2.443566e-06%)
Noelle:     Loop "  %150 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %149" (0.000000e+00%)
Noelle:  Function "keymatch"
Noelle:     Loop "  %10 = getelementptr inbounds i8, i8* %7, i64 1" (2.419687e-06%)
Noelle:  Function "jpeg_set_defaults"
Noelle:  Function "jpeg_set_quality"
Noelle:  Function "alloc_small"
Noelle:     Loop "  %35 = getelementptr inbounds %union.small_pool_struct, %union.small_pool_struct* %34, i64 0, i32 0, i32 2" (2.316214e-07%)
Noelle:     Loop "  %59 = lshr i64 %58, 1" (0.000000e+00%)
Noelle:  Function "finish_pass_phuff"
Noelle:  Function "start_pass_phuff"
Noelle:     Loop "  %134 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %133" (0.000000e+00%)
Noelle:     Loop "  %45 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %44" (3.183799e-07%)
Noelle:     Loop "  %108 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %107" (0.000000e+00%)
Noelle:     Loop "  %75 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %74" (1.878441e-07%)
Noelle:  Function "prepare_for_pass"
Noelle:  Function "alloc_sarray"
Noelle:     Loop "  %29 = sub i32 %3, %27" (5.547770e-07%)
Noelle:     Loop "  %43 = add i32 %41, 1" (5.492053e-08%)
Noelle:     Loop "  %58 = add i32 %57, 1" (1.695373e-07%)
Noelle:  Function "per_scan_setup"
Noelle:     Loop "  %68 = getelementptr inbounds %struct.jpeg_compress_struct.275, %struct.jpeg_compress_struct.275* %0, i64 0, i32 42, i64 %67" (3.438503e-07%)
Noelle:     Loop "  %106 = load i32, i32* %60, align 8, !tbaa !51" (3.183799e-08%)
Noelle:     Loop "  %116 = load i32, i32* %60, align 8, !tbaa !51" (4.457319e-08%)
Noelle:  Function "start_pass_coef"
Noelle:  Function "select_scan_parameters"
Noelle:     Loop "  %32 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %83" (1.146168e-07%)
Noelle:     Loop "  %138 = add <2 x i64> %136, <i64 2, i64 2>" (0.000000e+00%)
Noelle:     Loop "  %172 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %124, i64 %171" (0.000000e+00%)
Noelle:  Function "flush_bits"
Noelle:     Loop "  %23 = lshr i64 %21, 16" (1.647616e-07%)
Noelle:  Function "start_pass_fdctmgr"
Noelle:     Loop "  %17 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %16, i64 0, i32 4" (3.852397e-07%)
Noelle:     Loop "  %209 = shl i64 %208, 3" (0.000000e+00%)
Noelle:     Loop "  %170 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %33, i64 0, i32 0, i64 %169" (0.000000e+00%)
Noelle:  Function "finish_pass_master"
Noelle:  Function "free_pool"
Noelle:     Loop "  %22 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %21, i64 0, i32 10" (0.000000e+00%)
Noelle:     Loop "  %36 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %35, i64 0, i32 10" (2.547039e-08%)
Noelle:     Loop "  %54 = bitcast %union.large_pool_struct* %53 to i8*" (1.289439e-07%)
Noelle:     Loop "  %73 = bitcast %union.small_pool_struct* %72 to i8*" (8.516662e-08%)
Noelle:  Function "emit_sof"
Noelle:     Loop "  %250 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %248, i64 0, i32 0" (1.424750e-07%)
Noelle:  Function "start_input_ppm"
Noelle:     Loop "  %179 = load i8*, i8** %167, align 8, !tbaa !67" (0.000000e+00%)
Noelle:  Function "self_destruct"
Noelle:  Function "write_file_header"
Noelle:  Function "alloc_large"
Noelle:  Function "request_virt_barray"
Noelle:  Function "read_pbm_integer"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (3.661369e-08%)
Noelle:     Loop "  %6 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:     Loop "  %31 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (1.074532e-07%)
Noelle:     Loop "  %33 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:  Function "jinit_c_coef_controller"
Noelle:     Loop "  %24 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (9.392207e-08%)
Noelle:  Function "jinit_downsampler"
Noelle:     Loop "  %40 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %39, i64 0, i32 2" (6.956172e-01%)
Noelle:  Function "jpeg_simple_progression"
Noelle:     Loop "  %190 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %188, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %220 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %218, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %131 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %128" (0.000000e+00%)
Noelle:     Loop "  %167 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %164" (0.000000e+00%)
Noelle:     Loop "  %179 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %178" (0.000000e+00%)
Noelle:     Loop "  %240 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %238, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %270 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %268, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %284 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %282, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %313 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %311, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %327 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %325, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %356 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %354, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %446 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %444, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %476 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %474, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %388 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %385" (0.000000e+00%)
Noelle:     Loop "  %424 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %421" (0.000000e+00%)
Noelle:     Loop "  %436 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %435" (0.000000e+00%)
Noelle:     Loop "  %494 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %492, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %523 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %521, i64 0, i32 0" (0.000000e+00%)
Noelle:  Function "jinit_c_prep_controller"
Noelle:     Loop "  %83 = mul i64 %62, %80" (0.000000e+00%)
Noelle:     Loop "  %140 = add nsw i64 %138, %60" (0.000000e+00%)
Noelle:     Loop "  %231 = add nsw i64 %230, %60" (0.000000e+00%)
Noelle:     Loop "  %278 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (6.606383e-08%)
Noelle:  Function "jpeg_default_colorspace"
Noelle:     Loop "  %202 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %199, i64 %201, i32 0" (0.000000e+00%)
Noelle:  Function "jpeg_CreateCompress"
Noelle:  Function "jinit_c_main_controller"
Noelle:     Loop "  %34 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (4.934888e-08%)
Noelle:  Function "jpeg_suppress_tables"
Noelle:  Function "jdiv_round_up"
Noelle:  Function "jinit_memory_mgr"
Noelle:  Function "jinit_color_converter"
Noelle:  Function "jpeg_alloc_huff_table"
Noelle:  Function "jround_up"
Noelle:  Function "jinit_forward_dct"
Noelle:  Function "write_file_trailer"
Noelle:  Function "jpeg_std_error"
Noelle:  Function "term_destination"
Noelle:  Function "jpeg_stdio_dest"
Noelle:  Function "start_pass_main"
Noelle:  Function "jinit_marker_writer"
Noelle:  Function "jpeg_alloc_quant_table"
Noelle:  Function "start_pass_prep"
Noelle:  Function "jpeg_free_large"
Noelle:  Function "jpeg_get_large"
Noelle:  Function "jinit_phuff_encoder"
Noelle:  Function "jpeg_destroy_compress"
Noelle:  Function "init_destination"
Noelle:  Function "jpeg_free_small"
Noelle:  Function "jpeg_get_small"
Noelle:  Function "jpeg_destroy"
Noelle:  Function "jinit_read_ppm"
Noelle:  Function "jpeg_abort"
Noelle:  Function "emit_message"
Noelle:  Function "reset_error_mgr"
Noelle:  Function "jpeg_mem_available"
Noelle:  Function "start_pass_downsample"
Noelle:  Function "finish_input_ppm"
Noelle:  Function "output_message"
Noelle:  Function "request_virt_sarray"
Noelle:  Function "error_exit"
Noelle:  Function "jpeg_quality_scaling"
Noelle:  Function "format_message"
Noelle:     Loop "  %41 = getelementptr inbounds i8, i8* %40, i64 1" (0.000000e+00%)
Noelle:  Function "jpeg_add_quant_table"
Noelle:     Loop "  %29 = getelementptr inbounds i32, i32* %2, i64 %28" (0.000000e+00%)
Noelle:     Loop "  %44 = getelementptr inbounds i32, i32* %2, i64 %43" (0.000000e+00%)
Noelle:  Function "jpeg_write_raw_data"
Noelle:  Function "access_virt_sarray"
Noelle:     Loop "  %79 = mul nsw i64 %76, %46" (0.000000e+00%)
Noelle:     Loop "  %159 = mul nsw i64 %156, %128" (0.000000e+00%)
Noelle:     Loop "  %221 = load i8**, i8*** %218, align 8, !tbaa !38" (0.000000e+00%)
Noelle:  Function "jpeg_fdct_ifast"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "jpeg_mem_term"
Noelle:  Function "jpeg_mem_init"
Noelle:  Function "jpeg_open_backing_store"
Noelle:  Function "pre_process_context"
Noelle:     Loop "  %27 = load i32, i32* %2, align 4, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %90 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %89" (0.000000e+00%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %91, i32 %95, i8** %91, i32 %96, i32 1, i32 %92) #20" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp slt i32 %50, 1" (0.000000e+00%)
Noelle:     Loop "  %56 = load i8**, i8*** %54, align 8, !tbaa !50" (0.000000e+00%)
Noelle:  Function "null_convert"
Noelle:     Loop "  %25 = add nsw i32 %22, -1" (0.000000e+00%)
Noelle:     Loop "  %28 = getelementptr inbounds i8**, i8*** %2, i64 %27" (0.000000e+00%)
Noelle:     Loop "  %36 = getelementptr inbounds i8, i8* %34, i64 %27" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8, i8* %59, i64 %27" (0.000000e+00%)
Noelle:     Loop "  %71 = getelementptr inbounds i8**, i8*** %2, i64 %70" (0.000000e+00%)
Noelle:     Loop "  %79 = getelementptr inbounds i8, i8* %77, i64 %70" (0.000000e+00%)
Noelle:     Loop "  %104 = getelementptr inbounds i8**, i8*** %2, i64 %103" (0.000000e+00%)
Noelle:     Loop "  %112 = getelementptr inbounds i8, i8* %110, i64 %103" (0.000000e+00%)
Noelle:  Function "forward_DCT_float"
Noelle:     Loop "  %28 = zext i32 %27 to i64" (0.000000e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %85 = getelementptr inbounds [64 x float], [64 x float]* %8, i64 0, i64 %84" (0.000000e+00%)
Noelle:  Function "jzero_far"
Noelle:  Function "jpeg_fdct_float"
Noelle:  Function "pass_startup"
Noelle:  Function "alloc_barray"
Noelle:     Loop "  %31 = sub i32 %3, %29" (0.000000e+00%)
Noelle:     Loop "  %46 = add i32 %44, 1" (0.000000e+00%)
Noelle:     Loop "  %61 = add i32 %60, 1" (0.000000e+00%)
Noelle:  Function "jpeg_set_colorspace"
Noelle:     Loop "  %130 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %127, i64 %129, i32 0" (0.000000e+00%)
Noelle:  Function "jcopy_block_row"
Noelle:  Function "get_text_rgb_row"
Noelle:     Loop "  %17 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "get_word_gray_row"
Noelle:     Loop "  %54 = getelementptr inbounds i8, i8* %53, i64 1" (0.000000e+00%)
Noelle:  Function "load_interlaced_image"
Noelle:     Loop "  %46 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %16, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %58 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:     Loop "  store i64 %20, i64* %12, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %36 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "get_scaled_gray_row"
Noelle:     Loop "  %38 = getelementptr inbounds i8, i8* %36, i64 1" (0.000000e+00%)
Noelle:     Loop "  %54 = getelementptr inbounds i8, i8* %53, i64 1" (0.000000e+00%)
Noelle:  Function "get_word_rgb_row"
Noelle:     Loop "  %35 = getelementptr inbounds i8, i8* %34, i64 1" (0.000000e+00%)
Noelle:  Function "get_scaled_rgb_row"
Noelle:     Loop "  %61 = getelementptr inbounds i8, i8* %60, i64 1" (0.000000e+00%)
Noelle:  Function "get_text_gray_row"
Noelle:     Loop "  %17 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "jinit_read_gif"
Noelle:  Function "cmyk_ycck_convert"
Noelle:     Loop "  %27 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %43 = load i8, i8* %42, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "fullsize_smooth_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %8, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %8, i64 %59" (0.000000e+00%)
Noelle:     Loop "  %82 = getelementptr inbounds i8*, i8** %3, i64 %81" (0.000000e+00%)
Noelle:     Loop "  %131 = getelementptr inbounds i8, i8* %130, i64 1" (0.000000e+00%)
Noelle:  Function "h2v1_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59" (0.000000e+00%)
Noelle:     Loop "  %74 = getelementptr inbounds i8*, i8** %2, i64 %73" (0.000000e+00%)
Noelle:     Loop "  %81 = load i8, i8* %79, align 1, !tbaa !42" (0.000000e+00%)
Noelle:  Function "h2v2_smooth_downsample"
Noelle:     Loop "  %33 = getelementptr inbounds i8*, i8** %8, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %8, i64 %60" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds i8*, i8** %3, i64 %82" (0.000000e+00%)
Noelle:     Loop "  %159 = getelementptr inbounds i8, i8* %158, i64 1" (0.000000e+00%)
Noelle:  Function "int_downsample"
Noelle:     Loop "  %41 = getelementptr inbounds i8*, i8** %2, i64 %39" (0.000000e+00%)
Noelle:     Loop "  %71 = getelementptr inbounds i8*, i8** %2, i64 %69" (0.000000e+00%)
Noelle:     Loop "  br i1 %83, label %._crit_edge40.._crit_edge36_crit_edge, label %107" (0.000000e+00%)
Noelle:     Loop "  br i1 %84, label %113, label %.loopexit2._crit_edge..loopexit2_crit_edge" (0.000000e+00%)
Noelle:     Loop "  %235 = add nsw i64 %233, %106" (0.000000e+00%)
Noelle:     Loop "  %244 = getelementptr i8, i8* %238, i64 %240" (0.000000e+00%)
Noelle:     Loop "  %286 = getelementptr inbounds i8, i8* %284, i64 1" (0.000000e+00%)
Noelle:     Loop "  %117 = add nsw i64 %115, %106" (0.000000e+00%)
Noelle:     Loop "  %126 = getelementptr i8, i8* %120, i64 %122" (0.000000e+00%)
Noelle:     Loop "  %157 = getelementptr inbounds i8, i8* %155, i64 1" (0.000000e+00%)
Noelle:     Loop "  %203 = add nsw i64 %201, %106" (0.000000e+00%)
Noelle:     Loop "  %224 = getelementptr inbounds i8, i8* %222, i64 1" (0.000000e+00%)
Noelle:     Loop "  %168 = add nsw i64 %167, %106" (0.000000e+00%)
Noelle:     Loop "  %176 = getelementptr inbounds i8, i8* %174, i64 1" (0.000000e+00%)
Noelle:     Loop "  %186 = add nsw i64 %184, %106" (0.000000e+00%)
Noelle:     Loop "  %193 = getelementptr inbounds i8, i8* %191, i64 1" (0.000000e+00%)
Noelle:  Function "jinit_huff_encoder"
Noelle:  Function "start_pass_huff"
Noelle:     Loop "  %75 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %74" (1.597471e-05%)
Noelle:     Loop "  %19 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %18" (0.000000e+00%)
Noelle:  Function "jinit_read_targa"
Noelle:  Function "usage"
Noelle:  Function "start_input_gif"
Noelle:     Loop "  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %144 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %193 = icmp sgt i32 %192, 0" (0.000000e+00%)
Noelle:     Loop "  %258 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:  Function "finish_input_gif"
Noelle:  Function "get_pixel_rows"
Noelle:     Loop "  %18 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "LZWReadByte"
Noelle:     Loop "  %137 = load i8*, i8** %134, align 8, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %81 = icmp sgt i32 %80, 0" (0.000000e+00%)
Noelle:     Loop "  %39 = tail call fastcc i32 @GetCode(%struct.gif_source_struct* nonnull %0)" (0.000000e+00%)
Noelle:  Function "GetCode"
Noelle:     Loop "  %18 = load i32, i32* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "get_interlaced_row"
Noelle:     Loop "  %72 = getelementptr inbounds i8, i8* %69, i64 1" (0.000000e+00%)
Noelle:  Function "encode_mcu_gather"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.huff_entropy_encoder, %struct.huff_entropy_encoder* %5, i64 0, i32 1, i32 2, i64 %17" (0.000000e+00%)
Noelle:     Loop "  %32 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %70 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %68" (0.000000e+00%)
Noelle:  Function "start_input_tga"
Noelle:     Loop "  %214 = add nsw i32 %213, -1" (0.000000e+00%)
Noelle:     Loop "  %274 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "finish_pass_gather"
Noelle:     Loop "  %15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %14" (6.367598e-09%)
Noelle:  Function "finish_pass_huff"
Noelle:     Loop "  %30 = lshr i64 %29, 16" (0.000000e+00%)
Noelle:  Function "emit_restart"
Noelle:     Loop "  %76 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 7, i64 %75" (0.000000e+00%)
Noelle:  Function "read_stdin"
Noelle:  Function "read_text_integer"
Noelle:     Loop "  %4 = tail call fastcc i32 @text_getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:     Loop "  %24 = load i16*, i16** %.lcssa20, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "text_getc"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:  Function "read_scan_script"
Noelle:     Loop "  %23 = icmp eq i32 %22, 100" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp eq i64 %35, 4" (0.000000e+00%)
Noelle:  Function "read_scan_integer"
Noelle:     Loop "  %11 = load i16*, i16** %9, align 8, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %20 = tail call i32 @getc(%struct._IO_FILE* %0) #21" (0.000000e+00%)
Noelle:  Function "set_quant_slots"
Noelle:     Loop "  %9 = load i8, i8* %8, align 1, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %29 = load i8, i8* %28, align 1, !tbaa !34" (0.000000e+00%)
Noelle:  Function "set_sample_factors"
Noelle:     Loop "  %12 = load i8, i8* %11, align 1, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %38 = load i8, i8* %37, align 1, !tbaa !30" (0.000000e+00%)
Noelle:  Function "read_quant_tables"
Noelle:     Loop "  %24 = icmp eq i32 %23, 4" (0.000000e+00%)
Noelle:     Loop "  %34 = call fastcc i32 @read_text_integer(%struct._IO_FILE* nonnull %12, i64* nonnull %6, i32* nonnull %5)" (0.000000e+00%)
Noelle:  Function "compress_data"
Noelle:     Loop "  %28 = icmp ugt i32 %26, %8" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %19, align 4, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %39 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %37" (0.000000e+00%)
Noelle:     Loop "  %60 = load i32, i32* %20, align 8, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %145 = load i16, i16* %136, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %175 = load i16, i16* %136, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %105 = add i64 %104, %70" (0.000000e+00%)
Noelle:  Function "null_method"
Noelle:  Function "grayscale_convert"
Noelle:     Loop "  %90 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %98 = load i8, i8* %96, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %77 = load i8, i8* %75, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %23 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %29, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %56 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %64 = load i8, i8* %62, align 1, !tbaa !40" (0.000000e+00%)
Noelle:  Function "rgb_gray_convert"
Noelle:     Loop "  %24 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %30, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "write_stdout"
Noelle:  Function "jpeg_abort_compress"
Noelle:  Function "jpeg_write_marker"
Noelle:  Function "get_memory_row"
Noelle:  Function "encode_mcu_huff"
Noelle:     Loop "  %49 = lshr i64 %48, 16" (0.000000e+00%)
Noelle:     Loop "  %140 = getelementptr inbounds %struct.working_state, %struct.working_state* %3, i64 0, i32 2, i32 2, i64 %139" (0.000000e+00%)
Noelle:     Loop "  %156 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %155" (0.000000e+00%)
Noelle:     Loop "  %219 = lshr i64 %218, 16" (0.000000e+00%)
Noelle:     Loop "  %280 = lshr i64 %279, 16" (0.000000e+00%)
Noelle:     Loop "  %337 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %335" (0.000000e+00%)
Noelle:     Loop "  %352 = load i32, i32* %330, align 4, !tbaa !49" (0.000000e+00%)
Noelle:     Loop "  %377 = lshr i64 %376, 16" (0.000000e+00%)
Noelle:     Loop "  %469 = lshr i64 %468, 16" (0.000000e+00%)
Noelle:     Loop "  %529 = lshr i64 %528, 16" (0.000000e+00%)
Noelle:     Loop "  %613 = lshr i64 %612, 16" (0.000000e+00%)
Noelle:  Function "finish_input_tga"
Noelle:  Function "read_rle_pixel"
Noelle:     Loop "  %35 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "read_non_rle_pixel"
Noelle:     Loop "  %8 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "get_8bit_row"
Noelle:     Loop "  %22 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %15, align 8, !tbaa !43" (0.000000e+00%)
Noelle:  Function "get_16bit_row"
Noelle:     Loop "  %19 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_24bit_row"
Noelle:     Loop "  %20 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_8bit_gray_row"
Noelle:     Loop "  %17 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "preload_image"
Noelle:     Loop "  %37 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  store i64 %20, i64* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "jpeg_write_tables"
Noelle:  Function "jinit_read_bmp"
Noelle:  Function "start_input_bmp"
Noelle:     Loop "  %461 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %411 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %550 = add nsw i64 %549, -1" (0.000000e+00%)
Noelle:  Function "finish_input_bmp"
Noelle:  Function "preload_image.9"
Noelle:     Loop "  %55 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %18, align 8, !tbaa !48" (0.000000e+00%)
Noelle:     Loop "  %67 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:     Loop "  store i64 %23, i64* %14, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %39 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "write_any_marker"
Noelle:     Loop "  %99 = add i32 %97, -1" (0.000000e+00%)
Noelle:  Function "write_tables_only"
Noelle:  Function "get_8bit_row.10"
Noelle:     Loop "  %55 = getelementptr inbounds i8, i8* %54, i64 1" (0.000000e+00%)
Noelle:  Function "get_24bit_row.11"
Noelle:     Loop "  %44 = getelementptr inbounds i8, i8* %43, i64 1" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-enable baseline_pre.bc baseline_pre.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: Enablers: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.LqoZjdrrFp (.ll version is /tmp/tmp.nJOQw7X4JS)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.DeXcdZwAiD (.ll version is /tmp/tmp.wgnu8kw4KP)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.LqoZjdrrFp -o /tmp/tmp.DeXcdZwAiD
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.LqoZjdrrFp -o /tmp/tmp.DeXcdZwAiD
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.LqoZjdrrFp -o /tmp/tmp.DeXcdZwAiD
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.LqoZjdrrFp -o /tmp/tmp.DeXcdZwAiD
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.LqoZjdrrFp -o /tmp/tmp.DeXcdZwAiD
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !56" (7.179014e+01%)
Noelle:  Function "jpeg_finish_compress"
Noelle:  Disable "jpeg_finish_compress" as cold function
Noelle:  Function "realize_virt_arrays"
Noelle:  Disable "realize_virt_arrays" as cold function
Noelle:  Function "jpeg_start_compress"
Noelle:  Disable "jpeg_start_compress" as cold function
Noelle:  Function "jinit_compress_master"
Noelle:  Disable "jinit_compress_master" as cold function
Noelle:  Function "jinit_c_master_control"
Noelle:  Disable "jinit_c_master_control" as cold function
Noelle:  Function "parse_switches"
Noelle:  Disable "parse_switches" as cold function
Noelle:  Function "jpeg_set_linear_quality"
Noelle:  Disable "jpeg_set_linear_quality" as cold function
Noelle:  Function "keymatch"
Noelle:  Disable "keymatch" as cold function
Noelle:  Function "jpeg_set_defaults"
Noelle:  Disable "jpeg_set_defaults" as cold function
Noelle:  Function "jpeg_set_quality"
Noelle:  Disable "jpeg_set_quality" as cold function
Noelle:  Function "alloc_small"
Noelle:  Disable "alloc_small" as cold function
Noelle:  Function "alloc_sarray"
Noelle:  Disable "alloc_sarray" as cold function
Noelle:  Function "free_pool"
Noelle:  Disable "free_pool" as cold function
Noelle:  Function "self_destruct"
Noelle:  Disable "self_destruct" as cold function
Noelle:  Function "alloc_large"
Noelle:  Disable "alloc_large" as cold function
Noelle:  Function "request_virt_barray"
Noelle:  Disable "request_virt_barray" as cold function
Noelle:  Function "jinit_c_coef_controller"
Noelle:  Disable "jinit_c_coef_controller" as cold function
Noelle:  Function "jinit_downsampler"
Noelle:  Disable "jinit_downsampler" as cold function
Noelle:  Function "jpeg_simple_progression"
Noelle:  Disable "jpeg_simple_progression" as cold function
Noelle:  Function "jinit_c_prep_controller"
Noelle:  Disable "jinit_c_prep_controller" as cold function
Noelle:  Function "jpeg_default_colorspace"
Noelle:  Disable "jpeg_default_colorspace" as cold function
Noelle:  Function "jpeg_CreateCompress"
Noelle:  Disable "jpeg_CreateCompress" as cold function
Noelle:  Function "jinit_c_main_controller"
Noelle:  Disable "jinit_c_main_controller" as cold function
Noelle:  Function "jpeg_suppress_tables"
Noelle:  Disable "jpeg_suppress_tables" as cold function
Noelle:  Function "jdiv_round_up"
Noelle:  Disable "jdiv_round_up" as cold function
Noelle:  Function "jinit_memory_mgr"
Noelle:  Disable "jinit_memory_mgr" as cold function
Noelle:  Function "jinit_color_converter"
Noelle:  Disable "jinit_color_converter" as cold function
Noelle:  Function "jpeg_alloc_huff_table"
Noelle:  Disable "jpeg_alloc_huff_table" as cold function
Noelle:  Function "jround_up"
Noelle:  Disable "jround_up" as cold function
Noelle:  Function "jinit_forward_dct"
Noelle:  Disable "jinit_forward_dct" as cold function
Noelle:  Function "jpeg_stdio_dest"
Noelle:  Disable "jpeg_stdio_dest" as cold function
Noelle:  Function "jpeg_std_error"
Noelle:  Disable "jpeg_std_error" as cold function
Noelle:  Function "jinit_marker_writer"
Noelle:  Disable "jinit_marker_writer" as cold function
Noelle:  Function "jpeg_alloc_quant_table"
Noelle:  Disable "jpeg_alloc_quant_table" as cold function
Noelle:  Function "jpeg_get_large"
Noelle:  Disable "jpeg_get_large" as cold function
Noelle:  Function "jpeg_free_large"
Noelle:  Disable "jpeg_free_large" as cold function
Noelle:  Function "jinit_phuff_encoder"
Noelle:  Disable "jinit_phuff_encoder" as cold function
Noelle:  Function "jpeg_destroy_compress"
Noelle:  Disable "jpeg_destroy_compress" as cold function
Noelle:  Function "jpeg_get_small"
Noelle:  Disable "jpeg_get_small" as cold function
Noelle:  Function "jpeg_free_small"
Noelle:  Disable "jpeg_free_small" as cold function
Noelle:  Function "jpeg_destroy"
Noelle:  Disable "jpeg_destroy" as cold function
Noelle:  Function "jinit_read_ppm"
Noelle:  Disable "jinit_read_ppm" as cold function
Noelle:  Function "jpeg_abort"
Noelle:  Disable "jpeg_abort" as cold function
Noelle:  Function "emit_message"
Noelle:  Disable "emit_message" as cold function
Noelle:  Function "reset_error_mgr"
Noelle:  Disable "reset_error_mgr" as cold function
Noelle:  Function "jpeg_mem_available"
Noelle:  Disable "jpeg_mem_available" as cold function
Noelle:  Function "read_quant_tables"
Noelle:  Disable "read_quant_tables" as cold function
Noelle:  Function "format_message"
Noelle:  Disable "format_message" as cold function
Noelle:  Function "read_scan_script"
Noelle:  Disable "read_scan_script" as cold function
Noelle:  Function "jinit_read_bmp"
Noelle:  Disable "jinit_read_bmp" as cold function
Noelle:  Function "jinit_huff_encoder"
Noelle:  Disable "jinit_huff_encoder" as cold function
Noelle:  Function "jinit_read_gif"
Noelle:  Disable "jinit_read_gif" as cold function
Noelle:  Function "alloc_barray"
Noelle:  Disable "alloc_barray" as cold function
Noelle:  Function "request_virt_sarray"
Noelle:  Disable "request_virt_sarray" as cold function
Noelle:  Function "jinit_read_targa"
Noelle:  Disable "jinit_read_targa" as cold function
Noelle:  Function "usage"
Noelle:  Disable "usage" as cold function
Noelle:  Function "output_message"
Noelle:  Disable "output_message" as cold function
Noelle:  Function "error_exit"
Noelle:  Disable "error_exit" as cold function
Noelle:  Function "read_text_integer"
Noelle:  Disable "read_text_integer" as cold function
Noelle:  Function "text_getc"
Noelle:  Disable "text_getc" as cold function
Noelle:  Function "jpeg_set_colorspace"
Noelle:  Disable "jpeg_set_colorspace" as cold function
Noelle:  Function "read_scan_integer"
Noelle:  Disable "read_scan_integer" as cold function
Noelle:  Function "set_quant_slots"
Noelle:  Disable "set_quant_slots" as cold function
Noelle:  Function "set_sample_factors"
Noelle:  Disable "set_sample_factors" as cold function
Noelle:  Function "read_stdin"
Noelle:  Disable "read_stdin" as cold function
Noelle:  Function "jpeg_open_backing_store"
Noelle:  Disable "jpeg_open_backing_store" as cold function
Noelle:  Function "write_stdout"
Noelle:  Disable "write_stdout" as cold function
Noelle:  Function "jpeg_add_quant_table"
Noelle:  Disable "jpeg_add_quant_table" as cold function
Noelle:  Function "jpeg_quality_scaling"
Noelle:  Disable "jpeg_quality_scaling" as cold function
EnablersManager:   Try to improve all 1 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !56
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.jpeg_error_mgr, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.jpeg_compress_struct, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !56"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %122, label %._crit_edge23.._crit_edge.i_crit_edge, label %123, !prof !60
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !56" (7.179014e+01%)
Noelle:  Function "encode_mcu_AC_refine"
Noelle:     Loop "  %40 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %38" (5.986120e+00%)
Noelle:     Loop "  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %69" (6.434902e+00%)
Noelle:     Loop "  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %6)" (9.731302e-03%)
Noelle:     Loop "  %129 = lshr i64 %127, 16" (3.310650e-04%)
Noelle:     Loop "  %199 = icmp eq i32 %196, 0" (3.328213e-03%)
Noelle:     Loop "  %212 = lshr i64 %210, 16" (2.726542e-04%)
Noelle:     Loop "  %340 = lshr i64 %338, 16" (1.702081e-02%)
Noelle:     Loop "  %416 = lshr i64 %414, 16" (5.348372e-03%)
Noelle:     Loop "  %487 = icmp eq i32 %484, 0" (2.083870e-01%)
Noelle:     Loop "  %500 = lshr i64 %498, 16" (1.714799e-02%)
Noelle:  Function "encode_mcu_AC_first"
Noelle:     Loop "  %42 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %40" (4.792297e+00%)
Noelle:     Loop "  %74 = load i32, i32* %33, align 8, !tbaa !61" (8.888395e-04%)
Noelle:     Loop "  %118 = lshr i64 %116, 16" (2.747101e-04%)
Noelle:     Loop "  %180 = ashr i32 %179, 1" (2.103076e-01%)
Noelle:     Loop "  %233 = lshr i64 %231, 16" (9.506808e-02%)
Noelle:     Loop "  %306 = lshr i64 %304, 16" (4.571877e-02%)
Noelle:  Function "rgb_ycc_convert"
Noelle:     Loop "  %26 = load i8**, i8*** %2, align 8, !tbaa !45" (3.935536e+00%)
Noelle:     Loop "  %39 = load i8, i8* %38, align 1, !tbaa !46" (3.935423e+00%)
Noelle:  Function "forward_DCT"
Noelle:     Loop "  %28 = zext i32 %27 to i64" (2.486162e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29" (6.072154e-01%)
Noelle:     Loop "  %77 = getelementptr inbounds i32, i32* %18, i64 %76" (1.864005e+00%)
Noelle:  Function "jpeg_fdct_islow"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !30" (1.079098e+00%)
Noelle:     Loop "  %95 = load i32, i32* %94, align 4, !tbaa !30" (1.100493e+00%)
Noelle:  Function "compress_output"
Noelle:     Loop "  %16 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %15" (2.039390e-04%)
Noelle:     Loop "  %54 = icmp ult i32 %52, %51" (8.181511e-01%)
Noelle:     Loop "  %56 = load i32, i32* %8, align 4, !tbaa !39" (8.179872e-01%)
Noelle:     Loop "  %62 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %60" (6.427602e-01%)
Noelle:     Loop "  %131 = add nsw i64 %129, %53" (0.000000e+00%)
Noelle:     Loop "  %137 = add i64 %136, %135" (0.000000e+00%)
Noelle:     Loop "  %160 = getelementptr inbounds [64 x i16], [64 x i16]* %158, i64 1" (0.000000e+00%)
Noelle:     Loop "  %103 = add nsw i64 %101, %53" (0.000000e+00%)
Noelle:     Loop "  %109 = add i64 %108, %107" (0.000000e+00%)
Noelle:     Loop "  %85 = sext i32 %84 to i64" (2.864007e-01%)
Noelle:     Loop "  %93 = getelementptr inbounds [64 x i16], [64 x i16]* %91, i64 1" (1.326726e-01%)
Noelle:  Function "emit_eobrun"
Noelle:     Loop "  %7 = ashr i32 %5, 1" (3.276659e-02%)
Noelle:     Loop "  %68 = lshr i64 %66, 16" (1.749598e-02%)
Noelle:     Loop "  %154 = lshr i64 %152, 16" (1.792054e-03%)
Noelle:     Loop "  %231 = icmp eq i32 %228, 0" (5.123367e-01%)
Noelle:     Loop "  %246 = lshr i64 %244, 16" (4.479985e-02%)
Noelle:  Function "h2v2_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59" (1.402861e-04%)
Noelle:     Loop "  %75 = or i64 %74, 1" (6.950056e-01%)
Noelle:     Loop "  %86 = load i8, i8* %84, align 1, !tbaa !44" (6.949158e-01%)
Noelle:  Function "encode_mcu_DC_first"
Noelle:     Loop "  %34 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %33" (2.132135e-01%)
Noelle:     Loop "  %105 = lshr i64 %103, 16" (9.250555e-03%)
Noelle:     Loop "  %183 = lshr i64 %181, 16" (9.316079e-03%)
Noelle:  Function "encode_mcu_DC_refine"
Noelle:     Loop "  %36 = load i32, i32* %30, align 8, !tbaa !50" (5.445365e-02%)
Noelle:     Loop "  %57 = lshr i64 %55, 16" (3.739171e-03%)
Noelle:  Function "compress_first_pass"
Noelle:     Loop "  %21 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (7.514084e-05%)
Noelle:     Loop "  %198 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %197" (1.860373e-05%)
Noelle:     Loop "  %147 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %146" (0.000000e+00%)
Noelle:     Loop "  %162 = getelementptr inbounds [64 x i16], [64 x i16]* %155, i64 %160" (0.000000e+00%)
Noelle:     Loop "  %190 = getelementptr inbounds [64 x i16], [64 x i16]* %155, i64 %188" (0.000000e+00%)
Noelle:     Loop "  %67 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %66" (0.000000e+00%)
Noelle:     Loop "  %82 = getelementptr inbounds [64 x i16], [64 x i16]* %75, i64 %80" (0.000000e+00%)
Noelle:     Loop "  %124 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %123" (0.000000e+00%)
Noelle:     Loop "  %139 = getelementptr inbounds [64 x i16], [64 x i16]* %132, i64 %137" (0.000000e+00%)
Noelle:     Loop "  %111 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %110" (0.000000e+00%)
Noelle:     Loop "  %325 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %324" (0.000000e+00%)
Noelle:     Loop "  %258 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %257" (0.000000e+00%)
Noelle:     Loop "  %288 = getelementptr inbounds [64 x i16], [64 x i16]* %285, i64 %221, i64 0" (0.000000e+00%)
Noelle:     Loop "  %292 = getelementptr inbounds [64 x i16], [64 x i16]* %286, i64 %290, i64 0" (0.000000e+00%)
Noelle:     Loop "  %304 = getelementptr inbounds [64 x i16], [64 x i16]* %286, i64 %302, i64 0" (0.000000e+00%)
Noelle:     Loop "  %267 = getelementptr inbounds [64 x i16], [64 x i16]* %264, i64 %221, i64 0" (0.000000e+00%)
Noelle:     Loop "  %271 = getelementptr inbounds [64 x i16], [64 x i16]* %265, i64 %269, i64 0" (0.000000e+00%)
Noelle:     Loop "  %232 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %231" (0.000000e+00%)
Noelle:     Loop "  %241 = getelementptr inbounds [64 x i16], [64 x i16]* %238, i64 %221, i64 0" (0.000000e+00%)
Noelle:     Loop "  %245 = getelementptr inbounds [64 x i16], [64 x i16]* %239, i64 %243, i64 0" (0.000000e+00%)
Noelle:     Loop "  %317 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %316" (0.000000e+00%)
Noelle:  Function "finish_pass_gather_phuff"
Noelle:     Loop "  %46 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %45" (2.508198e-03%)
Noelle:     Loop "  %19 = load i32, i32* %14, align 4, !tbaa !43" (6.270723e-04%)
Noelle:  Function "jpeg_gen_optimal_table"
Noelle:     Loop "  %17 = getelementptr inbounds i64, i64* %2, i64 %14" (2.419094e-03%)
Noelle:     Loop "  %34 = getelementptr inbounds i64, i64* %2, i64 %31" (1.011493e-03%)
Noelle:     Loop "  %66 = sext i32 %65 to i64" (1.319685e-05%)
Noelle:     Loop "  %82 = sext i32 %81 to i64" (1.301457e-05%)
Noelle:     Loop "  %90 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %89" (2.269571e-05%)
Noelle:     Loop "  %108 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %106" (4.918174e-06%)
Noelle:     Loop "  br label %._crit_edge47" (3.366072e-06%)
Noelle:     Loop "  %116 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %115" (9.471802e-07%)
Noelle:     Loop "  %137 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %136" (1.536183e-07%)
Noelle:     Loop "  br label %._crit_edge52" (6.879131e-04%)
Noelle:     Loop "  %149 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %146" (6.858834e-04%)
Noelle:  Function "access_virt_barray"
Noelle:     Loop "  %80 = mul nsw i64 %77, %47" (0.000000e+00%)
Noelle:     Loop "  %162 = mul nsw i64 %159, %131" (0.000000e+00%)
Noelle:     Loop "  %226 = load [64 x i16]**, [64 x i16]*** %223, align 8, !tbaa !40" (0.000000e+00%)
Noelle:  Function "pre_process_data"
Noelle:     Loop "  %23 = load i32, i32* %5, align 4, !tbaa !39" (2.554322e-04%)
Noelle:     Loop "  %54 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %53" (1.392912e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %55, i32 %59, i8** %55, i32 %60, i32 1, i32 %56) #20" (9.153422e-08%)
Noelle:     Loop "  %99 = getelementptr inbounds i8**, i8*** %4, i64 %97" (4.329967e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %100, i32 %110, i8** %100, i32 %111, i32 1, i32 %103) #20" (3.709126e-07%)
Noelle:  Function "fullsize_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %3, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %3, i64 %60" (7.014307e-05%)
Noelle:  Function "jpeg_write_scanlines"
Noelle:  Function "sep_downsample"
Noelle:     Loop "  %18 = getelementptr inbounds i8**, i8*** %1, i64 %16" (1.823720e-04%)
Noelle:  Function "process_data_simple_main"
Noelle:     Loop "  %21 = icmp ult i32 %20, 8" (7.784787e-05%)
Noelle:  Function "jpeg_finish_compress"
Noelle:     Loop "  %42 = getelementptr inbounds %struct.jpeg_comp_master, %struct.jpeg_comp_master* %41, i64 0, i32 0" (1.203038e-04%)
Noelle:     Loop "  %48 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %37, align 8, !tbaa !57" (1.200324e-04%)
Noelle:  Function "jcopy_sample_rows"
Noelle:     Loop "  %29 = getelementptr inbounds i8*, i8** %27, i64 1" (4.489157e-05%)
Noelle:  Function "get_raw_row"
Noelle:  Function "empty_output_buffer"
Noelle:  Function "jpeg_make_c_derived_tbl"
Noelle:     Loop "  %23 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %1, i64 0, i32 0, i64 %20" (4.984237e-06%)
Noelle:     Loop "  %49 = add nsw <2 x i64> %46, <i64 8, i64 8>" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw <2 x i64> %58, <i64 1, i64 1>" (2.658472e-07%)
Noelle:     Loop "  %96 = sext i8 %92 to i32" (5.938581e-06%)
Noelle:     Loop "  %102 = add nsw i64 %100, 1" (3.238720e-06%)
Noelle:     Loop "  %143 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 %141" (4.483585e-06%)
Noelle:  Function "write_scan_header"
Noelle:     Loop "  %14 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %13" (9.484537e-06%)
Noelle:     Loop "  %287 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %286" (6.152692e-07%)
Noelle:  Function "realize_virt_arrays"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %8, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %41 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %38, i64 0, i32 0" (7.083953e-08%)
Noelle:     Loop "  %92 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %91, i64 0, i32 0" (1.116718e-06%)
Noelle:     Loop "  %143 = sub i32 %119, %141" (0.000000e+00%)
Noelle:     Loop "  %191 = add i32 %189, 1" (0.000000e+00%)
Noelle:     Loop "  %206 = add i32 %205, 1" (0.000000e+00%)
Noelle:     Loop "  %234 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %233, i64 0, i32 0" (9.879328e-06%)
Noelle:     Loop "  %288 = sub i32 %262, %286" (9.630992e-06%)
Noelle:     Loop "  %332 = add i32 %330, 1" (3.581774e-08%)
Noelle:     Loop "  %347 = add i32 %346, 1" (9.453495e-06%)
Noelle:  Function "emit_dht"
Noelle:     Loop "  %202 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 0, i64 %201" (2.539080e-06%)
Noelle:     Loop "  %225 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 1, i64 %224" (5.456236e-06%)
Noelle:  Function "rgb_ycc_start"
Noelle:     Loop "  %15 = mul nuw nsw i64 %14, 19595" (7.742203e-06%)
Noelle:  Function "jpeg_start_compress"
Noelle:  Function "jinit_compress_master"
Noelle:  Function "jinit_c_master_control"
Noelle:     Loop "  %106 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %105, i64 0, i32 2" (7.561523e-08%)
Noelle:     Loop "  %155 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %154, i64 0, i32 1" (1.178006e-07%)
Noelle:     Loop "  %222 = bitcast i32* %220 to i8*" (2.308254e-08%)
Noelle:     Loop "  %242 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 0" (5.116365e-06%)
Noelle:     Loop "  %258 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %257" (1.862522e-07%)
Noelle:     Loop "  %340 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %339" (4.493136e-06%)
Noelle:     Loop "  %403 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %402" (0.000000e+00%)
Noelle:     Loop "  %390 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %389" (1.675474e-06%)
Noelle:     Loop "  %368 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %367" (2.633002e-06%)
Noelle:     Loop "  %355 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %354" (0.000000e+00%)
Noelle:     Loop "  %430 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %429" (0.000000e+00%)
Noelle:     Loop "  %466 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %465, i64 0" (3.024609e-08%)
Noelle:     Loop "  %481 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i64 0, i64 %480" (0.000000e+00%)
Noelle:  Function "parse_switches"
Noelle:     Loop "  %34 = sext i32 %33 to i64" (3.323090e-06%)
Noelle:  Function "write_frame_header"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %8, i64 0, i32 4" (3.464769e-06%)
Noelle:     Loop "  %43 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %40, i64 0, i32 5" (0.000000e+00%)
Noelle:  Function "jpeg_set_linear_quality"
Noelle:     Loop "  %41 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %40" (9.161382e-07%)
Noelle:     Loop "  %26 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %25" (9.161382e-07%)
Noelle:     Loop "  %90 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %89" (9.161382e-07%)
Noelle:     Loop "  %75 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %74" (9.161382e-07%)
Noelle:  Function "emit_dqt"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %5, i64 0, i32 0, i64 %16" (8.381351e-07%)
Noelle:     Loop "  %197 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %196" (2.443566e-06%)
Noelle:     Loop "  %150 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %149" (0.000000e+00%)
Noelle:  Function "keymatch"
Noelle:     Loop "  %10 = getelementptr inbounds i8, i8* %7, i64 1" (2.419687e-06%)
Noelle:  Function "jpeg_set_defaults"
Noelle:  Function "jpeg_set_quality"
Noelle:  Function "alloc_small"
Noelle:     Loop "  %35 = getelementptr inbounds %union.small_pool_struct, %union.small_pool_struct* %34, i64 0, i32 0, i32 2" (2.316214e-07%)
Noelle:     Loop "  %59 = lshr i64 %58, 1" (0.000000e+00%)
Noelle:  Function "finish_pass_phuff"
Noelle:  Function "start_pass_phuff"
Noelle:     Loop "  %134 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %133" (0.000000e+00%)
Noelle:     Loop "  %45 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %44" (3.183799e-07%)
Noelle:     Loop "  %108 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %107" (0.000000e+00%)
Noelle:     Loop "  %75 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %74" (1.878441e-07%)
Noelle:  Function "prepare_for_pass"
Noelle:  Function "alloc_sarray"
Noelle:     Loop "  %29 = sub i32 %3, %27" (5.547770e-07%)
Noelle:     Loop "  %43 = add i32 %41, 1" (5.492053e-08%)
Noelle:     Loop "  %58 = add i32 %57, 1" (1.695373e-07%)
Noelle:  Function "per_scan_setup"
Noelle:     Loop "  %68 = getelementptr inbounds %struct.jpeg_compress_struct.275, %struct.jpeg_compress_struct.275* %0, i64 0, i32 42, i64 %67" (3.438503e-07%)
Noelle:     Loop "  %106 = load i32, i32* %60, align 8, !tbaa !51" (3.183799e-08%)
Noelle:     Loop "  %116 = load i32, i32* %60, align 8, !tbaa !51" (4.457319e-08%)
Noelle:  Function "start_pass_coef"
Noelle:  Function "select_scan_parameters"
Noelle:     Loop "  %32 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %83" (1.146168e-07%)
Noelle:     Loop "  %138 = add <2 x i64> %136, <i64 2, i64 2>" (0.000000e+00%)
Noelle:     Loop "  %172 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %124, i64 %171" (0.000000e+00%)
Noelle:  Function "flush_bits"
Noelle:     Loop "  %23 = lshr i64 %21, 16" (1.647616e-07%)
Noelle:  Function "start_pass_fdctmgr"
Noelle:     Loop "  %17 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %16, i64 0, i32 4" (3.852397e-07%)
Noelle:     Loop "  %209 = shl i64 %208, 3" (0.000000e+00%)
Noelle:     Loop "  %170 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %33, i64 0, i32 0, i64 %169" (0.000000e+00%)
Noelle:  Function "finish_pass_master"
Noelle:  Function "free_pool"
Noelle:     Loop "  %22 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %21, i64 0, i32 10" (0.000000e+00%)
Noelle:     Loop "  %36 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %35, i64 0, i32 10" (2.547039e-08%)
Noelle:     Loop "  %54 = bitcast %union.large_pool_struct* %53 to i8*" (1.289439e-07%)
Noelle:     Loop "  %73 = bitcast %union.small_pool_struct* %72 to i8*" (8.516662e-08%)
Noelle:  Function "emit_sof"
Noelle:     Loop "  %250 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %248, i64 0, i32 0" (1.424750e-07%)
Noelle:  Function "start_input_ppm"
Noelle:     Loop "  %179 = load i8*, i8** %167, align 8, !tbaa !67" (0.000000e+00%)
Noelle:  Function "self_destruct"
Noelle:  Function "write_file_header"
Noelle:  Function "alloc_large"
Noelle:  Function "request_virt_barray"
Noelle:  Function "read_pbm_integer"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (3.661369e-08%)
Noelle:     Loop "  %6 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:     Loop "  %31 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (1.074532e-07%)
Noelle:     Loop "  %33 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:  Function "jinit_c_coef_controller"
Noelle:     Loop "  %24 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (9.392207e-08%)
Noelle:  Function "jinit_downsampler"
Noelle:     Loop "  %40 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %39, i64 0, i32 2" (6.956172e-01%)
Noelle:  Function "jpeg_simple_progression"
Noelle:     Loop "  %190 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %188, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %220 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %218, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %131 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %128" (0.000000e+00%)
Noelle:     Loop "  %167 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %164" (0.000000e+00%)
Noelle:     Loop "  %179 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %178" (0.000000e+00%)
Noelle:     Loop "  %240 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %238, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %270 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %268, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %284 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %282, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %313 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %311, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %327 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %325, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %356 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %354, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %446 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %444, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %476 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %474, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %388 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %385" (0.000000e+00%)
Noelle:     Loop "  %424 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %421" (0.000000e+00%)
Noelle:     Loop "  %436 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %435" (0.000000e+00%)
Noelle:     Loop "  %494 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %492, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %523 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %521, i64 0, i32 0" (0.000000e+00%)
Noelle:  Function "jinit_c_prep_controller"
Noelle:     Loop "  %83 = mul i64 %62, %80" (0.000000e+00%)
Noelle:     Loop "  %140 = add nsw i64 %138, %60" (0.000000e+00%)
Noelle:     Loop "  %231 = add nsw i64 %230, %60" (0.000000e+00%)
Noelle:     Loop "  %278 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (6.606383e-08%)
Noelle:  Function "jpeg_default_colorspace"
Noelle:     Loop "  %202 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %199, i64 %201, i32 0" (0.000000e+00%)
Noelle:  Function "jpeg_CreateCompress"
Noelle:  Function "jinit_c_main_controller"
Noelle:     Loop "  %34 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (4.934888e-08%)
Noelle:  Function "jpeg_suppress_tables"
Noelle:  Function "jdiv_round_up"
Noelle:  Function "jinit_memory_mgr"
Noelle:  Function "jinit_color_converter"
Noelle:  Function "jpeg_alloc_huff_table"
Noelle:  Function "jround_up"
Noelle:  Function "jinit_forward_dct"
Noelle:  Function "write_file_trailer"
Noelle:  Function "jpeg_std_error"
Noelle:  Function "term_destination"
Noelle:  Function "jpeg_stdio_dest"
Noelle:  Function "start_pass_main"
Noelle:  Function "jinit_marker_writer"
Noelle:  Function "jpeg_alloc_quant_table"
Noelle:  Function "start_pass_prep"
Noelle:  Function "jpeg_free_large"
Noelle:  Function "jpeg_get_large"
Noelle:  Function "jinit_phuff_encoder"
Noelle:  Function "jpeg_destroy_compress"
Noelle:  Function "init_destination"
Noelle:  Function "jpeg_free_small"
Noelle:  Function "jpeg_get_small"
Noelle:  Function "jpeg_destroy"
Noelle:  Function "jinit_read_ppm"
Noelle:  Function "jpeg_abort"
Noelle:  Function "emit_message"
Noelle:  Function "reset_error_mgr"
Noelle:  Function "jpeg_mem_available"
Noelle:  Function "start_pass_downsample"
Noelle:  Function "finish_input_ppm"
Noelle:  Function "output_message"
Noelle:  Function "request_virt_sarray"
Noelle:  Function "error_exit"
Noelle:  Function "jpeg_quality_scaling"
Noelle:  Function "format_message"
Noelle:     Loop "  %41 = getelementptr inbounds i8, i8* %40, i64 1" (0.000000e+00%)
Noelle:  Function "jpeg_add_quant_table"
Noelle:     Loop "  %29 = getelementptr inbounds i32, i32* %2, i64 %28" (0.000000e+00%)
Noelle:     Loop "  %44 = getelementptr inbounds i32, i32* %2, i64 %43" (0.000000e+00%)
Noelle:  Function "jpeg_write_raw_data"
Noelle:  Function "access_virt_sarray"
Noelle:     Loop "  %79 = mul nsw i64 %76, %46" (0.000000e+00%)
Noelle:     Loop "  %159 = mul nsw i64 %156, %128" (0.000000e+00%)
Noelle:     Loop "  %221 = load i8**, i8*** %218, align 8, !tbaa !38" (0.000000e+00%)
Noelle:  Function "jpeg_fdct_ifast"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "jpeg_mem_term"
Noelle:  Function "jpeg_mem_init"
Noelle:  Function "jpeg_open_backing_store"
Noelle:  Function "pre_process_context"
Noelle:     Loop "  %27 = load i32, i32* %2, align 4, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %90 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %89" (0.000000e+00%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %91, i32 %95, i8** %91, i32 %96, i32 1, i32 %92) #20" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp slt i32 %50, 1" (0.000000e+00%)
Noelle:     Loop "  %56 = load i8**, i8*** %54, align 8, !tbaa !50" (0.000000e+00%)
Noelle:  Function "null_convert"
Noelle:     Loop "  %25 = add nsw i32 %22, -1" (0.000000e+00%)
Noelle:     Loop "  %28 = getelementptr inbounds i8**, i8*** %2, i64 %27" (0.000000e+00%)
Noelle:     Loop "  %36 = getelementptr inbounds i8, i8* %34, i64 %27" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8, i8* %59, i64 %27" (0.000000e+00%)
Noelle:     Loop "  %71 = getelementptr inbounds i8**, i8*** %2, i64 %70" (0.000000e+00%)
Noelle:     Loop "  %79 = getelementptr inbounds i8, i8* %77, i64 %70" (0.000000e+00%)
Noelle:     Loop "  %104 = getelementptr inbounds i8**, i8*** %2, i64 %103" (0.000000e+00%)
Noelle:     Loop "  %112 = getelementptr inbounds i8, i8* %110, i64 %103" (0.000000e+00%)
Noelle:  Function "forward_DCT_float"
Noelle:     Loop "  %28 = zext i32 %27 to i64" (0.000000e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %85 = getelementptr inbounds [64 x float], [64 x float]* %8, i64 0, i64 %84" (0.000000e+00%)
Noelle:  Function "jzero_far"
Noelle:  Function "jpeg_fdct_float"
Noelle:  Function "pass_startup"
Noelle:  Function "alloc_barray"
Noelle:     Loop "  %31 = sub i32 %3, %29" (0.000000e+00%)
Noelle:     Loop "  %46 = add i32 %44, 1" (0.000000e+00%)
Noelle:     Loop "  %61 = add i32 %60, 1" (0.000000e+00%)
Noelle:  Function "jpeg_set_colorspace"
Noelle:     Loop "  %130 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %127, i64 %129, i32 0" (0.000000e+00%)
Noelle:  Function "jcopy_block_row"
Noelle:  Function "get_text_rgb_row"
Noelle:     Loop "  %17 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "get_word_gray_row"
Noelle:     Loop "  %54 = getelementptr inbounds i8, i8* %53, i64 1" (0.000000e+00%)
Noelle:  Function "load_interlaced_image"
Noelle:     Loop "  %46 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %16, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %58 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:     Loop "  store i64 %20, i64* %12, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %36 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "get_scaled_gray_row"
Noelle:     Loop "  %38 = getelementptr inbounds i8, i8* %36, i64 1" (0.000000e+00%)
Noelle:     Loop "  %54 = getelementptr inbounds i8, i8* %53, i64 1" (0.000000e+00%)
Noelle:  Function "get_word_rgb_row"
Noelle:     Loop "  %35 = getelementptr inbounds i8, i8* %34, i64 1" (0.000000e+00%)
Noelle:  Function "get_scaled_rgb_row"
Noelle:     Loop "  %61 = getelementptr inbounds i8, i8* %60, i64 1" (0.000000e+00%)
Noelle:  Function "get_text_gray_row"
Noelle:     Loop "  %17 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "jinit_read_gif"
Noelle:  Function "cmyk_ycck_convert"
Noelle:     Loop "  %27 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %43 = load i8, i8* %42, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "fullsize_smooth_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %8, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %8, i64 %59" (0.000000e+00%)
Noelle:     Loop "  %82 = getelementptr inbounds i8*, i8** %3, i64 %81" (0.000000e+00%)
Noelle:     Loop "  %131 = getelementptr inbounds i8, i8* %130, i64 1" (0.000000e+00%)
Noelle:  Function "h2v1_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59" (0.000000e+00%)
Noelle:     Loop "  %74 = getelementptr inbounds i8*, i8** %2, i64 %73" (0.000000e+00%)
Noelle:     Loop "  %81 = load i8, i8* %79, align 1, !tbaa !42" (0.000000e+00%)
Noelle:  Function "h2v2_smooth_downsample"
Noelle:     Loop "  %33 = getelementptr inbounds i8*, i8** %8, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %8, i64 %60" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds i8*, i8** %3, i64 %82" (0.000000e+00%)
Noelle:     Loop "  %159 = getelementptr inbounds i8, i8* %158, i64 1" (0.000000e+00%)
Noelle:  Function "int_downsample"
Noelle:     Loop "  %41 = getelementptr inbounds i8*, i8** %2, i64 %39" (0.000000e+00%)
Noelle:     Loop "  %71 = getelementptr inbounds i8*, i8** %2, i64 %69" (0.000000e+00%)
Noelle:     Loop "  br i1 %83, label %._crit_edge40.._crit_edge36_crit_edge, label %107" (0.000000e+00%)
Noelle:     Loop "  br i1 %84, label %113, label %.loopexit2._crit_edge..loopexit2_crit_edge" (0.000000e+00%)
Noelle:     Loop "  %346 = add nsw i64 %344, %106" (0.000000e+00%)
Noelle:     Loop "  %355 = getelementptr i8, i8* %349, i64 %351" (0.000000e+00%)
Noelle:     Loop "  %397 = getelementptr inbounds i8, i8* %395, i64 1" (0.000000e+00%)
Noelle:     Loop "  %117 = add nsw i64 %115, %106" (0.000000e+00%)
Noelle:     Loop "  %126 = getelementptr i8, i8* %120, i64 %122" (0.000000e+00%)
Noelle:     Loop "  %209 = add nsw i64 %207, %106" (0.000000e+00%)
Noelle:     Loop "  %218 = getelementptr i8, i8* %212, i64 %214" (0.000000e+00%)
Noelle:     Loop "  %250 = getelementptr inbounds i8, i8* %248, i64 1" (0.000000e+00%)
Noelle:     Loop "  %168 = add nsw i64 %166, %106" (0.000000e+00%)
Noelle:     Loop "  %177 = getelementptr i8, i8* %171, i64 %173" (0.000000e+00%)
Noelle:     Loop "  %315 = add nsw i64 %313, %106" (0.000000e+00%)
Noelle:     Loop "  %336 = getelementptr inbounds i8, i8* %334, i64 1" (0.000000e+00%)
Noelle:     Loop "  %260 = add nsw i64 %258, %106" (0.000000e+00%)
Noelle:     Loop "  %280 = add nsw i64 %279, %106" (0.000000e+00%)
Noelle:     Loop "  %288 = getelementptr inbounds i8, i8* %286, i64 1" (0.000000e+00%)
Noelle:     Loop "  %298 = add nsw i64 %296, %106" (0.000000e+00%)
Noelle:     Loop "  %305 = getelementptr inbounds i8, i8* %303, i64 1" (0.000000e+00%)
Noelle:  Function "jinit_huff_encoder"
Noelle:  Function "start_pass_huff"
Noelle:     Loop "  %75 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %74" (1.597471e-05%)
Noelle:     Loop "  %19 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %18" (0.000000e+00%)
Noelle:  Function "jinit_read_targa"
Noelle:  Function "usage"
Noelle:  Function "start_input_gif"
Noelle:     Loop "  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %144 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %193 = icmp sgt i32 %192, 0" (0.000000e+00%)
Noelle:     Loop "  %258 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:  Function "finish_input_gif"
Noelle:  Function "get_pixel_rows"
Noelle:     Loop "  %18 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "LZWReadByte"
Noelle:     Loop "  %137 = load i8*, i8** %134, align 8, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %81 = icmp sgt i32 %80, 0" (0.000000e+00%)
Noelle:     Loop "  %39 = tail call fastcc i32 @GetCode(%struct.gif_source_struct* nonnull %0)" (0.000000e+00%)
Noelle:  Function "GetCode"
Noelle:     Loop "  %18 = load i32, i32* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "get_interlaced_row"
Noelle:     Loop "  %72 = getelementptr inbounds i8, i8* %69, i64 1" (0.000000e+00%)
Noelle:  Function "encode_mcu_gather"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.huff_entropy_encoder, %struct.huff_entropy_encoder* %5, i64 0, i32 1, i32 2, i64 %17" (0.000000e+00%)
Noelle:     Loop "  %32 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %70 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %68" (0.000000e+00%)
Noelle:  Function "start_input_tga"
Noelle:     Loop "  %214 = add nsw i32 %213, -1" (0.000000e+00%)
Noelle:     Loop "  %274 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "finish_pass_gather"
Noelle:     Loop "  %15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %14" (6.367598e-09%)
Noelle:  Function "finish_pass_huff"
Noelle:     Loop "  %30 = lshr i64 %29, 16" (0.000000e+00%)
Noelle:  Function "emit_restart"
Noelle:     Loop "  %76 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 7, i64 %75" (0.000000e+00%)
Noelle:  Function "read_stdin"
Noelle:  Function "read_text_integer"
Noelle:     Loop "  %4 = tail call fastcc i32 @text_getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:     Loop "  %24 = load i16*, i16** %.lcssa20, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "text_getc"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:  Function "read_scan_script"
Noelle:     Loop "  %23 = icmp eq i32 %22, 100" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp eq i64 %35, 4" (0.000000e+00%)
Noelle:  Function "read_scan_integer"
Noelle:     Loop "  %11 = load i16*, i16** %9, align 8, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %20 = tail call i32 @getc(%struct._IO_FILE* %0) #21" (0.000000e+00%)
Noelle:  Function "set_quant_slots"
Noelle:     Loop "  %9 = load i8, i8* %8, align 1, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %29 = load i8, i8* %28, align 1, !tbaa !34" (0.000000e+00%)
Noelle:  Function "set_sample_factors"
Noelle:     Loop "  %12 = load i8, i8* %11, align 1, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %38 = load i8, i8* %37, align 1, !tbaa !30" (0.000000e+00%)
Noelle:  Function "read_quant_tables"
Noelle:     Loop "  %24 = icmp eq i32 %23, 4" (0.000000e+00%)
Noelle:     Loop "  %34 = call fastcc i32 @read_text_integer(%struct._IO_FILE* nonnull %12, i64* nonnull %6, i32* nonnull %5)" (0.000000e+00%)
Noelle:  Function "compress_data"
Noelle:     Loop "  %28 = icmp ugt i32 %26, %8" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %19, align 4, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %39 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %37" (0.000000e+00%)
Noelle:     Loop "  %60 = load i32, i32* %20, align 8, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %145 = load i16, i16* %136, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %175 = load i16, i16* %136, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %105 = add i64 %104, %70" (0.000000e+00%)
Noelle:  Function "null_method"
Noelle:  Function "grayscale_convert"
Noelle:     Loop "  %90 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %98 = load i8, i8* %96, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %77 = load i8, i8* %75, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %23 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %29, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %56 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %64 = load i8, i8* %62, align 1, !tbaa !40" (0.000000e+00%)
Noelle:  Function "rgb_gray_convert"
Noelle:     Loop "  %24 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %30, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "write_stdout"
Noelle:  Function "jpeg_abort_compress"
Noelle:  Function "jpeg_write_marker"
Noelle:  Function "get_memory_row"
Noelle:  Function "encode_mcu_huff"
Noelle:     Loop "  %49 = lshr i64 %48, 16" (0.000000e+00%)
Noelle:     Loop "  %140 = getelementptr inbounds %struct.working_state, %struct.working_state* %3, i64 0, i32 2, i32 2, i64 %139" (0.000000e+00%)
Noelle:     Loop "  %156 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %155" (0.000000e+00%)
Noelle:     Loop "  %219 = lshr i64 %218, 16" (0.000000e+00%)
Noelle:     Loop "  %280 = lshr i64 %279, 16" (0.000000e+00%)
Noelle:     Loop "  %337 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %335" (0.000000e+00%)
Noelle:     Loop "  %352 = load i32, i32* %330, align 4, !tbaa !49" (0.000000e+00%)
Noelle:     Loop "  %377 = lshr i64 %376, 16" (0.000000e+00%)
Noelle:     Loop "  %469 = lshr i64 %468, 16" (0.000000e+00%)
Noelle:     Loop "  %529 = lshr i64 %528, 16" (0.000000e+00%)
Noelle:     Loop "  %613 = lshr i64 %612, 16" (0.000000e+00%)
Noelle:  Function "finish_input_tga"
Noelle:  Function "read_rle_pixel"
Noelle:     Loop "  %35 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "read_non_rle_pixel"
Noelle:     Loop "  %8 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "get_8bit_row"
Noelle:     Loop "  %22 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %15, align 8, !tbaa !43" (0.000000e+00%)
Noelle:  Function "get_16bit_row"
Noelle:     Loop "  %19 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_24bit_row"
Noelle:     Loop "  %20 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_8bit_gray_row"
Noelle:     Loop "  %17 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "preload_image"
Noelle:     Loop "  %37 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  store i64 %20, i64* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "jpeg_write_tables"
Noelle:  Function "jinit_read_bmp"
Noelle:  Function "start_input_bmp"
Noelle:     Loop "  %461 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %411 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %550 = add nsw i64 %549, -1" (0.000000e+00%)
Noelle:  Function "finish_input_bmp"
Noelle:  Function "preload_image.9"
Noelle:     Loop "  %55 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %18, align 8, !tbaa !48" (0.000000e+00%)
Noelle:     Loop "  %67 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:     Loop "  store i64 %23, i64* %14, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %39 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "write_any_marker"
Noelle:     Loop "  %99 = add i32 %97, -1" (0.000000e+00%)
Noelle:  Function "write_tables_only"
Noelle:  Function "get_8bit_row.10"
Noelle:     Loop "  %55 = getelementptr inbounds i8, i8* %54, i64 1" (0.000000e+00%)
Noelle:  Function "get_24bit_row.11"
Noelle:     Loop "  %44 = getelementptr inbounds i8, i8* %43, i64 1" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !56" (7.179014e+01%)
Noelle:  Function "encode_mcu_AC_refine"
Noelle:     Loop "  %40 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %38" (5.986120e+00%)
Noelle:     Loop "  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %69" (6.434902e+00%)
Noelle:     Loop "  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %6)" (9.731302e-03%)
Noelle:     Loop "  %129 = lshr i64 %127, 16" (3.310650e-04%)
Noelle:     Loop "  %199 = icmp eq i32 %196, 0" (3.328213e-03%)
Noelle:     Loop "  %212 = lshr i64 %210, 16" (2.726542e-04%)
Noelle:     Loop "  %340 = lshr i64 %338, 16" (1.702081e-02%)
Noelle:     Loop "  %416 = lshr i64 %414, 16" (5.348372e-03%)
Noelle:     Loop "  %487 = icmp eq i32 %484, 0" (2.083870e-01%)
Noelle:     Loop "  %500 = lshr i64 %498, 16" (1.714799e-02%)
Noelle:  Function "encode_mcu_AC_first"
Noelle:     Loop "  %42 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %40" (4.792297e+00%)
Noelle:     Loop "  %74 = load i32, i32* %33, align 8, !tbaa !61" (8.888395e-04%)
Noelle:     Loop "  %118 = lshr i64 %116, 16" (2.747101e-04%)
Noelle:     Loop "  %180 = ashr i32 %179, 1" (2.103076e-01%)
Noelle:     Loop "  %233 = lshr i64 %231, 16" (9.506808e-02%)
Noelle:     Loop "  %306 = lshr i64 %304, 16" (4.571877e-02%)
Noelle:  Function "rgb_ycc_convert"
Noelle:     Loop "  %26 = load i8**, i8*** %2, align 8, !tbaa !45" (3.935536e+00%)
Noelle:     Loop "  %39 = load i8, i8* %38, align 1, !tbaa !46" (3.935423e+00%)
Noelle:  Function "forward_DCT"
Noelle:     Loop "  %28 = zext i32 %27 to i64" (2.486162e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29" (6.072154e-01%)
Noelle:     Loop "  %77 = getelementptr inbounds i32, i32* %18, i64 %76" (1.864005e+00%)
Noelle:  Function "jpeg_fdct_islow"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !30" (1.079098e+00%)
Noelle:     Loop "  %95 = load i32, i32* %94, align 4, !tbaa !30" (1.100493e+00%)
Noelle:  Function "compress_output"
Noelle:     Loop "  %16 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %15" (2.039390e-04%)
Noelle:     Loop "  %54 = icmp ult i32 %52, %51" (8.181511e-01%)
Noelle:     Loop "  %56 = load i32, i32* %8, align 4, !tbaa !39" (8.179872e-01%)
Noelle:     Loop "  %62 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %60" (6.427602e-01%)
Noelle:     Loop "  %131 = add nsw i64 %129, %53" (0.000000e+00%)
Noelle:     Loop "  %137 = add i64 %136, %135" (0.000000e+00%)
Noelle:     Loop "  %160 = getelementptr inbounds [64 x i16], [64 x i16]* %158, i64 1" (0.000000e+00%)
Noelle:     Loop "  %103 = add nsw i64 %101, %53" (0.000000e+00%)
Noelle:     Loop "  %109 = add i64 %108, %107" (0.000000e+00%)
Noelle:     Loop "  %85 = sext i32 %84 to i64" (2.864007e-01%)
Noelle:     Loop "  %93 = getelementptr inbounds [64 x i16], [64 x i16]* %91, i64 1" (1.326726e-01%)
Noelle:  Function "emit_eobrun"
Noelle:     Loop "  %7 = ashr i32 %5, 1" (3.276659e-02%)
Noelle:     Loop "  %68 = lshr i64 %66, 16" (1.749598e-02%)
Noelle:     Loop "  %154 = lshr i64 %152, 16" (1.792054e-03%)
Noelle:     Loop "  %231 = icmp eq i32 %228, 0" (5.123367e-01%)
Noelle:     Loop "  %246 = lshr i64 %244, 16" (4.479985e-02%)
Noelle:  Function "h2v2_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59" (1.402861e-04%)
Noelle:     Loop "  %75 = or i64 %74, 1" (6.950056e-01%)
Noelle:     Loop "  %86 = load i8, i8* %84, align 1, !tbaa !44" (6.949158e-01%)
Noelle:  Function "encode_mcu_DC_first"
Noelle:     Loop "  %34 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %33" (2.132135e-01%)
Noelle:     Loop "  %105 = lshr i64 %103, 16" (9.250555e-03%)
Noelle:     Loop "  %183 = lshr i64 %181, 16" (9.316079e-03%)
Noelle:  Function "encode_mcu_DC_refine"
Noelle:     Loop "  %36 = load i32, i32* %30, align 8, !tbaa !50" (5.445365e-02%)
Noelle:     Loop "  %57 = lshr i64 %55, 16" (3.739171e-03%)
Noelle:  Function "compress_first_pass"
Noelle:     Loop "  %21 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (7.514084e-05%)
Noelle:     Loop "  %198 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %197" (1.860373e-05%)
Noelle:     Loop "  %147 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %146" (0.000000e+00%)
Noelle:     Loop "  %162 = getelementptr inbounds [64 x i16], [64 x i16]* %155, i64 %160" (0.000000e+00%)
Noelle:     Loop "  %190 = getelementptr inbounds [64 x i16], [64 x i16]* %155, i64 %188" (0.000000e+00%)
Noelle:     Loop "  %67 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %66" (0.000000e+00%)
Noelle:     Loop "  %82 = getelementptr inbounds [64 x i16], [64 x i16]* %75, i64 %80" (0.000000e+00%)
Noelle:     Loop "  %124 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %123" (0.000000e+00%)
Noelle:     Loop "  %139 = getelementptr inbounds [64 x i16], [64 x i16]* %132, i64 %137" (0.000000e+00%)
Noelle:     Loop "  %111 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %110" (0.000000e+00%)
Noelle:     Loop "  %325 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %324" (0.000000e+00%)
Noelle:     Loop "  %258 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %257" (0.000000e+00%)
Noelle:     Loop "  %288 = getelementptr inbounds [64 x i16], [64 x i16]* %285, i64 %221, i64 0" (0.000000e+00%)
Noelle:     Loop "  %292 = getelementptr inbounds [64 x i16], [64 x i16]* %286, i64 %290, i64 0" (0.000000e+00%)
Noelle:     Loop "  %304 = getelementptr inbounds [64 x i16], [64 x i16]* %286, i64 %302, i64 0" (0.000000e+00%)
Noelle:     Loop "  %267 = getelementptr inbounds [64 x i16], [64 x i16]* %264, i64 %221, i64 0" (0.000000e+00%)
Noelle:     Loop "  %271 = getelementptr inbounds [64 x i16], [64 x i16]* %265, i64 %269, i64 0" (0.000000e+00%)
Noelle:     Loop "  %232 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %231" (0.000000e+00%)
Noelle:     Loop "  %241 = getelementptr inbounds [64 x i16], [64 x i16]* %238, i64 %221, i64 0" (0.000000e+00%)
Noelle:     Loop "  %245 = getelementptr inbounds [64 x i16], [64 x i16]* %239, i64 %243, i64 0" (0.000000e+00%)
Noelle:     Loop "  %317 = getelementptr inbounds [64 x i16]*, [64 x i16]** %30, i64 %316" (0.000000e+00%)
Noelle:  Function "finish_pass_gather_phuff"
Noelle:     Loop "  %46 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %45" (2.508198e-03%)
Noelle:     Loop "  %19 = load i32, i32* %14, align 4, !tbaa !43" (6.270723e-04%)
Noelle:  Function "jpeg_gen_optimal_table"
Noelle:     Loop "  %17 = getelementptr inbounds i64, i64* %2, i64 %14" (2.419094e-03%)
Noelle:     Loop "  %34 = getelementptr inbounds i64, i64* %2, i64 %31" (1.011493e-03%)
Noelle:     Loop "  %66 = sext i32 %65 to i64" (1.319685e-05%)
Noelle:     Loop "  %82 = sext i32 %81 to i64" (1.301457e-05%)
Noelle:     Loop "  %90 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %89" (2.269571e-05%)
Noelle:     Loop "  %108 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %106" (4.918174e-06%)
Noelle:     Loop "  br label %._crit_edge47" (3.366072e-06%)
Noelle:     Loop "  %116 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %115" (9.471802e-07%)
Noelle:     Loop "  %137 = getelementptr inbounds [33 x i8], [33 x i8]* %4, i64 0, i64 %136" (1.536183e-07%)
Noelle:     Loop "  br label %._crit_edge52" (6.879131e-04%)
Noelle:     Loop "  %149 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %146" (6.858834e-04%)
Noelle:  Function "access_virt_barray"
Noelle:     Loop "  %80 = mul nsw i64 %77, %47" (0.000000e+00%)
Noelle:     Loop "  %162 = mul nsw i64 %159, %131" (0.000000e+00%)
Noelle:     Loop "  %226 = load [64 x i16]**, [64 x i16]*** %223, align 8, !tbaa !40" (0.000000e+00%)
Noelle:  Function "pre_process_data"
Noelle:     Loop "  %23 = load i32, i32* %5, align 4, !tbaa !39" (2.554322e-04%)
Noelle:     Loop "  %54 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %53" (1.392912e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %55, i32 %59, i8** %55, i32 %60, i32 1, i32 %56) #20" (9.153422e-08%)
Noelle:     Loop "  %99 = getelementptr inbounds i8**, i8*** %4, i64 %97" (4.329967e-07%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %100, i32 %110, i8** %100, i32 %111, i32 1, i32 %103) #20" (3.709126e-07%)
Noelle:  Function "fullsize_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %3, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %3, i64 %60" (7.014307e-05%)
Noelle:  Function "jpeg_write_scanlines"
Noelle:  Function "sep_downsample"
Noelle:     Loop "  %18 = getelementptr inbounds i8**, i8*** %1, i64 %16" (1.823720e-04%)
Noelle:  Function "process_data_simple_main"
Noelle:     Loop "  %21 = icmp ult i32 %20, 8" (7.784787e-05%)
Noelle:  Function "jpeg_finish_compress"
Noelle:     Loop "  %42 = getelementptr inbounds %struct.jpeg_comp_master, %struct.jpeg_comp_master* %41, i64 0, i32 0" (1.203038e-04%)
Noelle:     Loop "  %48 = load %struct.jpeg_progress_mgr*, %struct.jpeg_progress_mgr** %37, align 8, !tbaa !57" (1.200324e-04%)
Noelle:  Function "jcopy_sample_rows"
Noelle:     Loop "  %29 = getelementptr inbounds i8*, i8** %27, i64 1" (4.489157e-05%)
Noelle:  Function "get_raw_row"
Noelle:  Function "empty_output_buffer"
Noelle:  Function "jpeg_make_c_derived_tbl"
Noelle:     Loop "  %23 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %1, i64 0, i32 0, i64 %20" (4.984237e-06%)
Noelle:     Loop "  %49 = add nsw <2 x i64> %46, <i64 8, i64 8>" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw <2 x i64> %58, <i64 1, i64 1>" (2.658472e-07%)
Noelle:     Loop "  %96 = sext i8 %92 to i32" (5.938581e-06%)
Noelle:     Loop "  %102 = add nsw i64 %100, 1" (3.238720e-06%)
Noelle:     Loop "  %143 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 %141" (4.483585e-06%)
Noelle:  Function "write_scan_header"
Noelle:     Loop "  %14 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %13" (9.484537e-06%)
Noelle:     Loop "  %287 = getelementptr inbounds %struct.jpeg_compress_struct.297, %struct.jpeg_compress_struct.297* %0, i64 0, i32 42, i64 %286" (6.152692e-07%)
Noelle:  Function "realize_virt_arrays"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %8, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %41 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %38, i64 0, i32 0" (7.083953e-08%)
Noelle:     Loop "  %92 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %91, i64 0, i32 0" (1.116718e-06%)
Noelle:     Loop "  %143 = sub i32 %119, %141" (0.000000e+00%)
Noelle:     Loop "  %191 = add i32 %189, 1" (0.000000e+00%)
Noelle:     Loop "  %206 = add i32 %205, 1" (0.000000e+00%)
Noelle:     Loop "  %234 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %233, i64 0, i32 0" (9.879328e-06%)
Noelle:     Loop "  %288 = sub i32 %262, %286" (9.630992e-06%)
Noelle:     Loop "  %332 = add i32 %330, 1" (3.581774e-08%)
Noelle:     Loop "  %347 = add i32 %346, 1" (9.453495e-06%)
Noelle:  Function "emit_dht"
Noelle:     Loop "  %202 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 0, i64 %201" (2.539080e-06%)
Noelle:     Loop "  %225 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %11, i64 0, i32 1, i64 %224" (5.456236e-06%)
Noelle:  Function "rgb_ycc_start"
Noelle:     Loop "  %15 = mul nuw nsw i64 %14, 19595" (7.742203e-06%)
Noelle:  Function "jpeg_start_compress"
Noelle:  Function "jinit_compress_master"
Noelle:  Function "jinit_c_master_control"
Noelle:     Loop "  %106 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %105, i64 0, i32 2" (7.561523e-08%)
Noelle:     Loop "  %155 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %154, i64 0, i32 1" (1.178006e-07%)
Noelle:     Loop "  %222 = bitcast i32* %220 to i8*" (2.308254e-08%)
Noelle:     Loop "  %242 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 0" (5.116365e-06%)
Noelle:     Loop "  %258 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %257" (1.862522e-07%)
Noelle:     Loop "  %340 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %339" (4.493136e-06%)
Noelle:     Loop "  %403 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %402" (0.000000e+00%)
Noelle:     Loop "  %390 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %389" (1.675474e-06%)
Noelle:     Loop "  %368 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %367" (2.633002e-06%)
Noelle:     Loop "  %355 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %342, i64 %354" (0.000000e+00%)
Noelle:     Loop "  %430 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %240, i64 0, i32 1, i64 %429" (0.000000e+00%)
Noelle:     Loop "  %466 = getelementptr inbounds [10 x [64 x i32]], [10 x [64 x i32]]* %4, i64 0, i64 %465, i64 0" (3.024609e-08%)
Noelle:     Loop "  %481 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i64 0, i64 %480" (0.000000e+00%)
Noelle:  Function "parse_switches"
Noelle:     Loop "  %34 = sext i32 %33 to i64" (3.323090e-06%)
Noelle:  Function "write_frame_header"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %8, i64 0, i32 4" (3.464769e-06%)
Noelle:     Loop "  %43 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %40, i64 0, i32 5" (0.000000e+00%)
Noelle:  Function "jpeg_set_linear_quality"
Noelle:     Loop "  %41 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %40" (9.161382e-07%)
Noelle:     Loop "  %26 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_luminance_quant_tbl, i64 0, i64 %25" (9.161382e-07%)
Noelle:     Loop "  %90 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %89" (9.161382e-07%)
Noelle:     Loop "  %75 = getelementptr inbounds [64 x i32], [64 x i32]* @jpeg_set_linear_quality.std_chrominance_quant_tbl, i64 0, i64 %74" (9.161382e-07%)
Noelle:  Function "emit_dqt"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %5, i64 0, i32 0, i64 %16" (8.381351e-07%)
Noelle:     Loop "  %197 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %196" (2.443566e-06%)
Noelle:     Loop "  %150 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %149" (0.000000e+00%)
Noelle:  Function "keymatch"
Noelle:     Loop "  %10 = getelementptr inbounds i8, i8* %7, i64 1" (2.419687e-06%)
Noelle:  Function "jpeg_set_defaults"
Noelle:  Function "jpeg_set_quality"
Noelle:  Function "alloc_small"
Noelle:     Loop "  %35 = getelementptr inbounds %union.small_pool_struct, %union.small_pool_struct* %34, i64 0, i32 0, i32 2" (2.316214e-07%)
Noelle:     Loop "  %59 = lshr i64 %58, 1" (0.000000e+00%)
Noelle:  Function "finish_pass_phuff"
Noelle:  Function "start_pass_phuff"
Noelle:     Loop "  %134 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %133" (0.000000e+00%)
Noelle:     Loop "  %45 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %44" (3.183799e-07%)
Noelle:     Loop "  %108 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %107" (0.000000e+00%)
Noelle:     Loop "  %75 = getelementptr inbounds %struct.jpeg_compress_struct.253, %struct.jpeg_compress_struct.253* %0, i64 0, i32 42, i64 %74" (1.878441e-07%)
Noelle:  Function "prepare_for_pass"
Noelle:  Function "alloc_sarray"
Noelle:     Loop "  %29 = sub i32 %3, %27" (5.547770e-07%)
Noelle:     Loop "  %43 = add i32 %41, 1" (5.492053e-08%)
Noelle:     Loop "  %58 = add i32 %57, 1" (1.695373e-07%)
Noelle:  Function "per_scan_setup"
Noelle:     Loop "  %68 = getelementptr inbounds %struct.jpeg_compress_struct.275, %struct.jpeg_compress_struct.275* %0, i64 0, i32 42, i64 %67" (3.438503e-07%)
Noelle:     Loop "  %106 = load i32, i32* %60, align 8, !tbaa !51" (3.183799e-08%)
Noelle:     Loop "  %116 = load i32, i32* %60, align 8, !tbaa !51" (4.457319e-08%)
Noelle:  Function "start_pass_coef"
Noelle:  Function "select_scan_parameters"
Noelle:     Loop "  %32 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %3, i64 %11, i32 1, i64 %83" (1.146168e-07%)
Noelle:     Loop "  %138 = add <2 x i64> %136, <i64 2, i64 2>" (0.000000e+00%)
Noelle:     Loop "  %172 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %124, i64 %171" (0.000000e+00%)
Noelle:  Function "flush_bits"
Noelle:     Loop "  %23 = lshr i64 %21, 16" (1.647616e-07%)
Noelle:  Function "start_pass_fdctmgr"
Noelle:     Loop "  %17 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %16, i64 0, i32 4" (3.852397e-07%)
Noelle:     Loop "  %209 = shl i64 %208, 3" (0.000000e+00%)
Noelle:     Loop "  %170 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %33, i64 0, i32 0, i64 %169" (0.000000e+00%)
Noelle:  Function "finish_pass_master"
Noelle:  Function "free_pool"
Noelle:     Loop "  %22 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %21, i64 0, i32 10" (0.000000e+00%)
Noelle:     Loop "  %36 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %35, i64 0, i32 10" (2.547039e-08%)
Noelle:     Loop "  %54 = bitcast %union.large_pool_struct* %53 to i8*" (1.289439e-07%)
Noelle:     Loop "  %73 = bitcast %union.small_pool_struct* %72 to i8*" (8.516662e-08%)
Noelle:  Function "emit_sof"
Noelle:     Loop "  %250 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %248, i64 0, i32 0" (1.424750e-07%)
Noelle:  Function "start_input_ppm"
Noelle:     Loop "  %179 = load i8*, i8** %167, align 8, !tbaa !67" (0.000000e+00%)
Noelle:  Function "self_destruct"
Noelle:  Function "write_file_header"
Noelle:  Function "alloc_large"
Noelle:  Function "request_virt_barray"
Noelle:  Function "read_pbm_integer"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (3.661369e-08%)
Noelle:     Loop "  %6 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:     Loop "  %31 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (1.074532e-07%)
Noelle:     Loop "  %33 = tail call i32 @getc(%struct._IO_FILE* %1) #20" (0.000000e+00%)
Noelle:  Function "jinit_c_coef_controller"
Noelle:     Loop "  %24 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (9.392207e-08%)
Noelle:  Function "jinit_downsampler"
Noelle:     Loop "  %40 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %39, i64 0, i32 2" (6.956172e-01%)
Noelle:  Function "jpeg_simple_progression"
Noelle:     Loop "  %190 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %188, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %220 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %218, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %131 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %128" (0.000000e+00%)
Noelle:     Loop "  %167 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %164" (0.000000e+00%)
Noelle:     Loop "  %179 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %36, i64 0, i32 1, i64 %178" (0.000000e+00%)
Noelle:     Loop "  %240 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %238, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %270 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %268, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %284 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %282, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %313 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %311, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %327 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %325, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %356 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %354, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %446 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %444, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %476 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %474, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %388 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %385" (0.000000e+00%)
Noelle:     Loop "  %424 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %421" (0.000000e+00%)
Noelle:     Loop "  %436 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %364, i64 0, i32 1, i64 %435" (0.000000e+00%)
Noelle:     Loop "  %494 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %492, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %523 = getelementptr inbounds %struct.jpeg_scan_info, %struct.jpeg_scan_info* %521, i64 0, i32 0" (0.000000e+00%)
Noelle:  Function "jinit_c_prep_controller"
Noelle:     Loop "  %83 = mul i64 %62, %80" (0.000000e+00%)
Noelle:     Loop "  %140 = add nsw i64 %138, %60" (0.000000e+00%)
Noelle:     Loop "  %231 = add nsw i64 %230, %60" (0.000000e+00%)
Noelle:     Loop "  %278 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !43" (6.606383e-08%)
Noelle:  Function "jpeg_default_colorspace"
Noelle:     Loop "  %202 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %199, i64 %201, i32 0" (0.000000e+00%)
Noelle:  Function "jpeg_CreateCompress"
Noelle:  Function "jinit_c_main_controller"
Noelle:     Loop "  %34 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8, !tbaa !30" (4.934888e-08%)
Noelle:  Function "jpeg_suppress_tables"
Noelle:  Function "jdiv_round_up"
Noelle:  Function "jinit_memory_mgr"
Noelle:  Function "jinit_color_converter"
Noelle:  Function "jpeg_alloc_huff_table"
Noelle:  Function "jround_up"
Noelle:  Function "jinit_forward_dct"
Noelle:  Function "write_file_trailer"
Noelle:  Function "jpeg_std_error"
Noelle:  Function "term_destination"
Noelle:  Function "jpeg_stdio_dest"
Noelle:  Function "start_pass_main"
Noelle:  Function "jinit_marker_writer"
Noelle:  Function "jpeg_alloc_quant_table"
Noelle:  Function "start_pass_prep"
Noelle:  Function "jpeg_free_large"
Noelle:  Function "jpeg_get_large"
Noelle:  Function "jinit_phuff_encoder"
Noelle:  Function "jpeg_destroy_compress"
Noelle:  Function "init_destination"
Noelle:  Function "jpeg_free_small"
Noelle:  Function "jpeg_get_small"
Noelle:  Function "jpeg_destroy"
Noelle:  Function "jinit_read_ppm"
Noelle:  Function "jpeg_abort"
Noelle:  Function "emit_message"
Noelle:  Function "reset_error_mgr"
Noelle:  Function "jpeg_mem_available"
Noelle:  Function "start_pass_downsample"
Noelle:  Function "finish_input_ppm"
Noelle:  Function "output_message"
Noelle:  Function "request_virt_sarray"
Noelle:  Function "error_exit"
Noelle:  Function "jpeg_quality_scaling"
Noelle:  Function "format_message"
Noelle:     Loop "  %41 = getelementptr inbounds i8, i8* %40, i64 1" (0.000000e+00%)
Noelle:  Function "jpeg_add_quant_table"
Noelle:     Loop "  %29 = getelementptr inbounds i32, i32* %2, i64 %28" (0.000000e+00%)
Noelle:     Loop "  %44 = getelementptr inbounds i32, i32* %2, i64 %43" (0.000000e+00%)
Noelle:  Function "jpeg_write_raw_data"
Noelle:  Function "access_virt_sarray"
Noelle:     Loop "  %79 = mul nsw i64 %76, %46" (0.000000e+00%)
Noelle:     Loop "  %159 = mul nsw i64 %156, %128" (0.000000e+00%)
Noelle:     Loop "  %221 = load i8**, i8*** %218, align 8, !tbaa !38" (0.000000e+00%)
Noelle:  Function "jpeg_fdct_ifast"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "jpeg_mem_term"
Noelle:  Function "jpeg_mem_init"
Noelle:  Function "jpeg_open_backing_store"
Noelle:  Function "pre_process_context"
Noelle:     Loop "  %27 = load i32, i32* %2, align 4, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %90 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %89" (0.000000e+00%)
Noelle:     Loop "  tail call void @jcopy_sample_rows(i8** %91, i32 %95, i8** %91, i32 %96, i32 1, i32 %92) #20" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp slt i32 %50, 1" (0.000000e+00%)
Noelle:     Loop "  %56 = load i8**, i8*** %54, align 8, !tbaa !50" (0.000000e+00%)
Noelle:  Function "null_convert"
Noelle:     Loop "  %25 = add nsw i32 %22, -1" (0.000000e+00%)
Noelle:     Loop "  %28 = getelementptr inbounds i8**, i8*** %2, i64 %27" (0.000000e+00%)
Noelle:     Loop "  %36 = getelementptr inbounds i8, i8* %34, i64 %27" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8, i8* %59, i64 %27" (0.000000e+00%)
Noelle:     Loop "  %71 = getelementptr inbounds i8**, i8*** %2, i64 %70" (0.000000e+00%)
Noelle:     Loop "  %79 = getelementptr inbounds i8, i8* %77, i64 %70" (0.000000e+00%)
Noelle:     Loop "  %104 = getelementptr inbounds i8**, i8*** %2, i64 %103" (0.000000e+00%)
Noelle:     Loop "  %112 = getelementptr inbounds i8, i8* %110, i64 %103" (0.000000e+00%)
Noelle:  Function "forward_DCT_float"
Noelle:     Loop "  %28 = zext i32 %27 to i64" (0.000000e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %85 = getelementptr inbounds [64 x float], [64 x float]* %8, i64 0, i64 %84" (0.000000e+00%)
Noelle:  Function "jzero_far"
Noelle:  Function "jpeg_fdct_float"
Noelle:  Function "pass_startup"
Noelle:  Function "alloc_barray"
Noelle:     Loop "  %31 = sub i32 %3, %29" (0.000000e+00%)
Noelle:     Loop "  %46 = add i32 %44, 1" (0.000000e+00%)
Noelle:     Loop "  %61 = add i32 %60, 1" (0.000000e+00%)
Noelle:  Function "jpeg_set_colorspace"
Noelle:     Loop "  %130 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %127, i64 %129, i32 0" (0.000000e+00%)
Noelle:  Function "jcopy_block_row"
Noelle:  Function "get_text_rgb_row"
Noelle:     Loop "  %17 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "get_word_gray_row"
Noelle:     Loop "  %54 = getelementptr inbounds i8, i8* %53, i64 1" (0.000000e+00%)
Noelle:  Function "load_interlaced_image"
Noelle:     Loop "  %46 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %16, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %58 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:     Loop "  store i64 %20, i64* %12, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %36 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "get_scaled_gray_row"
Noelle:     Loop "  %38 = getelementptr inbounds i8, i8* %36, i64 1" (0.000000e+00%)
Noelle:     Loop "  %54 = getelementptr inbounds i8, i8* %53, i64 1" (0.000000e+00%)
Noelle:  Function "get_word_rgb_row"
Noelle:     Loop "  %35 = getelementptr inbounds i8, i8* %34, i64 1" (0.000000e+00%)
Noelle:  Function "get_scaled_rgb_row"
Noelle:     Loop "  %61 = getelementptr inbounds i8, i8* %60, i64 1" (0.000000e+00%)
Noelle:  Function "get_text_gray_row"
Noelle:     Loop "  %17 = tail call fastcc i32 @read_pbm_integer(%struct.jpeg_compress_struct* %0, %struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "jinit_read_gif"
Noelle:  Function "cmyk_ycck_convert"
Noelle:     Loop "  %27 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %43 = load i8, i8* %42, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "fullsize_smooth_downsample"
Noelle:     Loop "  %32 = getelementptr inbounds i8*, i8** %8, i64 %30" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %8, i64 %59" (0.000000e+00%)
Noelle:     Loop "  %82 = getelementptr inbounds i8*, i8** %3, i64 %81" (0.000000e+00%)
Noelle:     Loop "  %131 = getelementptr inbounds i8, i8* %130, i64 1" (0.000000e+00%)
Noelle:  Function "h2v1_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29" (0.000000e+00%)
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59" (0.000000e+00%)
Noelle:     Loop "  %74 = getelementptr inbounds i8*, i8** %2, i64 %73" (0.000000e+00%)
Noelle:     Loop "  %81 = load i8, i8* %79, align 1, !tbaa !42" (0.000000e+00%)
Noelle:  Function "h2v2_smooth_downsample"
Noelle:     Loop "  %33 = getelementptr inbounds i8*, i8** %8, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %62 = getelementptr inbounds i8*, i8** %8, i64 %60" (0.000000e+00%)
Noelle:     Loop "  %84 = getelementptr inbounds i8*, i8** %3, i64 %82" (0.000000e+00%)
Noelle:     Loop "  %159 = getelementptr inbounds i8, i8* %158, i64 1" (0.000000e+00%)
Noelle:  Function "int_downsample"
Noelle:     Loop "  %41 = getelementptr inbounds i8*, i8** %2, i64 %39" (0.000000e+00%)
Noelle:     Loop "  %71 = getelementptr inbounds i8*, i8** %2, i64 %69" (0.000000e+00%)
Noelle:     Loop "  br i1 %83, label %._crit_edge40.._crit_edge36_crit_edge, label %107" (0.000000e+00%)
Noelle:     Loop "  br i1 %84, label %113, label %.loopexit2._crit_edge..loopexit2_crit_edge" (0.000000e+00%)
Noelle:     Loop "  %346 = add nsw i64 %344, %106" (0.000000e+00%)
Noelle:     Loop "  %355 = getelementptr i8, i8* %349, i64 %351" (0.000000e+00%)
Noelle:     Loop "  %397 = getelementptr inbounds i8, i8* %395, i64 1" (0.000000e+00%)
Noelle:     Loop "  %117 = add nsw i64 %115, %106" (0.000000e+00%)
Noelle:     Loop "  %126 = getelementptr i8, i8* %120, i64 %122" (0.000000e+00%)
Noelle:     Loop "  %209 = add nsw i64 %207, %106" (0.000000e+00%)
Noelle:     Loop "  %218 = getelementptr i8, i8* %212, i64 %214" (0.000000e+00%)
Noelle:     Loop "  %250 = getelementptr inbounds i8, i8* %248, i64 1" (0.000000e+00%)
Noelle:     Loop "  %168 = add nsw i64 %166, %106" (0.000000e+00%)
Noelle:     Loop "  %177 = getelementptr i8, i8* %171, i64 %173" (0.000000e+00%)
Noelle:     Loop "  %315 = add nsw i64 %313, %106" (0.000000e+00%)
Noelle:     Loop "  %336 = getelementptr inbounds i8, i8* %334, i64 1" (0.000000e+00%)
Noelle:     Loop "  %260 = add nsw i64 %258, %106" (0.000000e+00%)
Noelle:     Loop "  %280 = add nsw i64 %279, %106" (0.000000e+00%)
Noelle:     Loop "  %288 = getelementptr inbounds i8, i8* %286, i64 1" (0.000000e+00%)
Noelle:     Loop "  %298 = add nsw i64 %296, %106" (0.000000e+00%)
Noelle:     Loop "  %305 = getelementptr inbounds i8, i8* %303, i64 1" (0.000000e+00%)
Noelle:  Function "jinit_huff_encoder"
Noelle:  Function "start_pass_huff"
Noelle:     Loop "  %75 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %74" (1.597471e-05%)
Noelle:     Loop "  %19 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %18" (0.000000e+00%)
Noelle:  Function "jinit_read_targa"
Noelle:  Function "usage"
Noelle:  Function "start_input_gif"
Noelle:     Loop "  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %144 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:     Loop "  %193 = icmp sgt i32 %192, 0" (0.000000e+00%)
Noelle:     Loop "  %258 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !44" (0.000000e+00%)
Noelle:  Function "finish_input_gif"
Noelle:  Function "get_pixel_rows"
Noelle:     Loop "  %18 = tail call fastcc i32 @LZWReadByte(%struct.gif_source_struct* %3)" (0.000000e+00%)
Noelle:  Function "LZWReadByte"
Noelle:     Loop "  %137 = load i8*, i8** %134, align 8, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %81 = icmp sgt i32 %80, 0" (0.000000e+00%)
Noelle:     Loop "  %39 = tail call fastcc i32 @GetCode(%struct.gif_source_struct* nonnull %0)" (0.000000e+00%)
Noelle:  Function "GetCode"
Noelle:     Loop "  %18 = load i32, i32* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "get_interlaced_row"
Noelle:     Loop "  %72 = getelementptr inbounds i8, i8* %69, i64 1" (0.000000e+00%)
Noelle:  Function "encode_mcu_gather"
Noelle:     Loop "  %18 = getelementptr inbounds %struct.huff_entropy_encoder, %struct.huff_entropy_encoder* %5, i64 0, i32 1, i32 2, i64 %17" (0.000000e+00%)
Noelle:     Loop "  %32 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %31" (0.000000e+00%)
Noelle:     Loop "  %70 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %68" (0.000000e+00%)
Noelle:  Function "start_input_tga"
Noelle:     Loop "  %214 = add nsw i32 %213, -1" (0.000000e+00%)
Noelle:     Loop "  %274 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "finish_pass_gather"
Noelle:     Loop "  %15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42, i64 %14" (6.367598e-09%)
Noelle:  Function "finish_pass_huff"
Noelle:     Loop "  %30 = lshr i64 %29, 16" (0.000000e+00%)
Noelle:  Function "emit_restart"
Noelle:     Loop "  %76 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 7, i64 %75" (0.000000e+00%)
Noelle:  Function "read_stdin"
Noelle:  Function "read_text_integer"
Noelle:     Loop "  %4 = tail call fastcc i32 @text_getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:     Loop "  %24 = load i16*, i16** %.lcssa20, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "text_getc"
Noelle:     Loop "  %4 = tail call i32 @getc(%struct._IO_FILE* %0)" (0.000000e+00%)
Noelle:  Function "read_scan_script"
Noelle:     Loop "  %23 = icmp eq i32 %22, 100" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp eq i64 %35, 4" (0.000000e+00%)
Noelle:  Function "read_scan_integer"
Noelle:     Loop "  %11 = load i16*, i16** %9, align 8, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %20 = tail call i32 @getc(%struct._IO_FILE* %0) #21" (0.000000e+00%)
Noelle:  Function "set_quant_slots"
Noelle:     Loop "  %9 = load i8, i8* %8, align 1, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %29 = load i8, i8* %28, align 1, !tbaa !34" (0.000000e+00%)
Noelle:  Function "set_sample_factors"
Noelle:     Loop "  %12 = load i8, i8* %11, align 1, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %38 = load i8, i8* %37, align 1, !tbaa !30" (0.000000e+00%)
Noelle:  Function "read_quant_tables"
Noelle:     Loop "  %24 = icmp eq i32 %23, 4" (0.000000e+00%)
Noelle:     Loop "  %34 = call fastcc i32 @read_text_integer(%struct._IO_FILE* nonnull %12, i64* nonnull %6, i32* nonnull %5)" (0.000000e+00%)
Noelle:  Function "compress_data"
Noelle:     Loop "  %28 = icmp ugt i32 %26, %8" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %19, align 4, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  %39 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %37" (0.000000e+00%)
Noelle:     Loop "  %60 = load i32, i32* %20, align 8, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %145 = load i16, i16* %136, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %175 = load i16, i16* %136, align 2, !tbaa !57" (0.000000e+00%)
Noelle:     Loop "  %105 = add i64 %104, %70" (0.000000e+00%)
Noelle:  Function "null_method"
Noelle:  Function "grayscale_convert"
Noelle:     Loop "  %90 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %98 = load i8, i8* %96, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %77 = load i8, i8* %75, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %23 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %29, align 1, !tbaa !40" (0.000000e+00%)
Noelle:     Loop "  %56 = load i8**, i8*** %2, align 8, !tbaa !39" (0.000000e+00%)
Noelle:     Loop "  %64 = load i8, i8* %62, align 1, !tbaa !40" (0.000000e+00%)
Noelle:  Function "rgb_gray_convert"
Noelle:     Loop "  %24 = load i8**, i8*** %2, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %31 = load i8, i8* %30, align 1, !tbaa !43" (0.000000e+00%)
Noelle:  Function "write_stdout"
Noelle:  Function "jpeg_abort_compress"
Noelle:  Function "jpeg_write_marker"
Noelle:  Function "get_memory_row"
Noelle:  Function "encode_mcu_huff"
Noelle:     Loop "  %49 = lshr i64 %48, 16" (0.000000e+00%)
Noelle:     Loop "  %140 = getelementptr inbounds %struct.working_state, %struct.working_state* %3, i64 0, i32 2, i32 2, i64 %139" (0.000000e+00%)
Noelle:     Loop "  %156 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46, i64 %155" (0.000000e+00%)
Noelle:     Loop "  %219 = lshr i64 %218, 16" (0.000000e+00%)
Noelle:     Loop "  %280 = lshr i64 %279, 16" (0.000000e+00%)
Noelle:     Loop "  %337 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %335" (0.000000e+00%)
Noelle:     Loop "  %352 = load i32, i32* %330, align 4, !tbaa !49" (0.000000e+00%)
Noelle:     Loop "  %377 = lshr i64 %376, 16" (0.000000e+00%)
Noelle:     Loop "  %469 = lshr i64 %468, 16" (0.000000e+00%)
Noelle:     Loop "  %529 = lshr i64 %528, 16" (0.000000e+00%)
Noelle:     Loop "  %613 = lshr i64 %612, 16" (0.000000e+00%)
Noelle:  Function "finish_input_tga"
Noelle:  Function "read_rle_pixel"
Noelle:     Loop "  %35 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "read_non_rle_pixel"
Noelle:     Loop "  %8 = tail call i32 @getc(%struct._IO_FILE* %3)" (0.000000e+00%)
Noelle:  Function "get_8bit_row"
Noelle:     Loop "  %22 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %15, align 8, !tbaa !43" (0.000000e+00%)
Noelle:  Function "get_16bit_row"
Noelle:     Loop "  %19 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_24bit_row"
Noelle:     Loop "  %20 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "get_8bit_gray_row"
Noelle:     Loop "  %17 = load void (%struct._tga_source_struct*)*, void (%struct._tga_source_struct*)** %12, align 8, !tbaa !42" (0.000000e+00%)
Noelle:  Function "preload_image"
Noelle:     Loop "  %37 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8, !tbaa !45" (0.000000e+00%)
Noelle:     Loop "  store i64 %20, i64* %11, align 8, !tbaa !39" (0.000000e+00%)
Noelle:  Function "jpeg_write_tables"
Noelle:  Function "jinit_read_bmp"
Noelle:  Function "start_input_bmp"
Noelle:     Loop "  %461 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %411 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %550 = add nsw i64 %549, -1" (0.000000e+00%)
Noelle:  Function "finish_input_bmp"
Noelle:  Function "preload_image.9"
Noelle:     Loop "  %55 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %18, align 8, !tbaa !48" (0.000000e+00%)
Noelle:     Loop "  %67 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:     Loop "  store i64 %23, i64* %14, align 8, !tbaa !42" (0.000000e+00%)
Noelle:     Loop "  %39 = tail call i32 @getc(%struct._IO_FILE* %4)" (0.000000e+00%)
Noelle:  Function "write_any_marker"
Noelle:     Loop "  %99 = add i32 %97, -1" (0.000000e+00%)
Noelle:  Function "write_tables_only"
Noelle:  Function "get_8bit_row.10"
Noelle:     Loop "  %55 = getelementptr inbounds i8, i8* %54, i64 1" (0.000000e+00%)
Noelle:  Function "get_24bit_row.11"
Noelle:     Loop "  %44 = getelementptr inbounds i8, i8* %43, i64 1" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: Enablers: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true baseline_pre.bc -o baseline_pre.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata baseline_pre.bc -o baseline_pre.bc
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg
WARNING: ./runme_cjpeg.sh not found. Going up one dir.
Running: ./baseline_pre_prof -dct int -progressive -opt -outfile output_very_large_encode.jpeg input_very_large.ppm ; in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/MiBench/consumer/jpeg
--------------------------------------------------------------------------------------
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg
DONE
opt -pgo-test-profile-file=/tmp/tmp.EdMt2KOEpK -block-freq -pgo-instr-use baseline_pre.bc -o baseline_with_metadata.bc
noelle-load -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
PDGAnalysis: Construct PDG from Analysis
Embed PDG as metadata
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3536, !noelle.pdg.inst.id !166" (7.179032e+01%)
Noelle:  Function "encode_mcu_AC_refine"
Noelle:     Loop "  %40 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %38, !noelle.pdg.inst.id !6489" (5.986135e+00%)
Noelle:     Loop "  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %69, !noelle.pdg.inst.id !6529" (6.434918e+00%)
Noelle:     Loop "  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %6), !noelle.pdg.inst.id !6546" (9.731326e-03%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %129 = lshr i64 %127, 16, !noelle.pdg.inst.id !6599" (3.310658e-04%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %199 = icmp eq i32 %196, 0, !noelle.pdg.inst.id !6676" (3.328221e-03%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %212 = lshr i64 %210, 16, !noelle.pdg.inst.id !6695" (2.726549e-04%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %340 = lshr i64 %338, 16, !noelle.pdg.inst.id !6828" (1.702085e-02%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %416 = lshr i64 %414, 16, !noelle.pdg.inst.id !6907" (5.348385e-03%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %487 = icmp eq i32 %484, 0, !noelle.pdg.inst.id !6977" (2.083875e-01%)
Noelle:     Loop "  %500 = lshr i64 %498, 16, !noelle.pdg.inst.id !6996" (1.714804e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:  Function "encode_mcu_AC_first"
Noelle:     Loop "  %42 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %40, !noelle.pdg.inst.id !2767" (4.792309e+00%)
Noelle:     Loop "  %74 = load i32, i32* %33, align 8, !tbaa !2812, !noelle.pdg.inst.id !278" (8.888417e-04%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %118 = lshr i64 %116, 16, !noelle.pdg.inst.id !2864" (2.747108e-04%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %180 = ashr i32 %179, 1, !noelle.pdg.inst.id !2933" (2.103081e-01%)
Noelle:     Loop "  %233 = lshr i64 %231, 16, !noelle.pdg.inst.id !2986" (9.506832e-02%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %306 = lshr i64 %304, 16, !noelle.pdg.inst.id !3066" (4.571888e-02%)
Noelle:  Disable loop "16" as cold code
Noelle:  Function "rgb_ycc_convert"
Noelle:     Loop "  %26 = load i8**, i8*** %2, align 8, !tbaa !76, !noelle.pdg.inst.id !77" (3.935545e+00%)
Noelle:     Loop "  %39 = load i8, i8* %38, align 1, !tbaa !92, !noelle.pdg.inst.id !93" (3.935433e+00%)
Noelle:  Function "forward_DCT"
Noelle:     Loop "  %28 = zext i32 %27 to i64, !noelle.pdg.inst.id !216" (2.486168e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29, !noelle.pdg.inst.id !221" (6.072169e-01%)
Noelle:     Loop "  %77 = getelementptr inbounds i32, i32* %18, i64 %76, !noelle.pdg.inst.id !265" (1.864010e+00%)
Noelle:  Function "jpeg_fdct_islow"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !34, !noelle.pdg.inst.id !38" (1.079100e+00%)
Noelle:     Loop "  %95 = load i32, i32* %94, align 4, !tbaa !34, !noelle.pdg.inst.id !142" (1.100496e+00%)
Noelle:  Function "compress_output"
Noelle:     Loop "  %16 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %15, !noelle.pdg.inst.id !155" (2.039395e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %54 = icmp ult i32 %52, %51, !noelle.pdg.inst.id !204" (8.181533e-01%)
Noelle:     Loop "  %56 = load i32, i32* %8, align 4, !tbaa !145, !noelle.pdg.inst.id !88" (8.179893e-01%)
Noelle:     Loop "  %62 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %60, !noelle.pdg.inst.id !220" (6.427619e-01%)
Noelle:     Loop "  %131 = add nsw i64 %129, %53, !noelle.pdg.inst.id !320" (8.118708e-08%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  %137 = add i64 %136, %135, !noelle.pdg.inst.id !327" (5.492067e-08%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  %160 = getelementptr inbounds [64 x i16], [64 x i16]* %158, i64 1, !noelle.pdg.inst.id !354" (2.626641e-08%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  %103 = add nsw i64 %101, %53, !noelle.pdg.inst.id !284" (5.492067e-08%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %109 = add i64 %108, %107, !noelle.pdg.inst.id !291" (5.492067e-08%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %85 = sext i32 %84 to i64, !noelle.pdg.inst.id !250" (2.864014e-01%)
Noelle:     Loop "  %93 = getelementptr inbounds [64 x i16], [64 x i16]* %91, i64 1, !noelle.pdg.inst.id !259" (1.326729e-01%)
Noelle:  Function "emit_eobrun"
Noelle:     Loop "  %7 = ashr i32 %5, 1, !noelle.pdg.inst.id !1441" (3.276667e-02%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %68 = lshr i64 %66, 16, !noelle.pdg.inst.id !1518" (1.749602e-02%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %154 = lshr i64 %152, 16, !noelle.pdg.inst.id !1614" (1.792058e-03%)
Noelle:  Disable loop "37" as cold code
Noelle:     Loop "  %231 = icmp eq i32 %228, 0, !noelle.pdg.inst.id !1691" (5.123379e-01%)
Noelle:     Loop "  %246 = lshr i64 %244, 16, !noelle.pdg.inst.id !1710" (4.479996e-02%)
Noelle:  Disable loop "39" as cold code
Noelle:  Function "h2v2_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29, !noelle.pdg.inst.id !343" (0.000000e+00%)
Noelle:  Disable loop "40" as cold code
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59, !noelle.pdg.inst.id !376" (1.402865e-04%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %75 = or i64 %74, 1, !noelle.pdg.inst.id !400" (6.950073e-01%)
Noelle:     Loop "  %86 = load i8, i8* %84, align 1, !tbaa !347, !noelle.pdg.inst.id !114" (6.949175e-01%)
Noelle:  Function "encode_mcu_DC_first"
Noelle:     Loop "  %34 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %33, !noelle.pdg.inst.id !1566" (2.132140e-01%)
Noelle:     Loop "  %105 = lshr i64 %103, 16, !noelle.pdg.inst.id !1648" (9.250578e-03%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %183 = lshr i64 %181, 16, !noelle.pdg.inst.id !1734" (9.316102e-03%)
Noelle:  Disable loop "46" as cold code
Noelle:  Function "encode_mcu_DC_refine"
Noelle:  Disable "encode_mcu_DC_refine" as cold function
Noelle:  Function "compress_first_pass"
Noelle:  Disable "compress_first_pass" as cold function
Noelle:  Function "finish_pass_gather_phuff"
Noelle:  Disable "finish_pass_gather_phuff" as cold function
Noelle:  Function "jpeg_gen_optimal_table"
Noelle:  Disable "jpeg_gen_optimal_table" as cold function
Noelle:  Function "access_virt_barray"
Noelle:  Disable "access_virt_barray" as cold function
Noelle:  Function "pre_process_data"
Noelle:  Disable "pre_process_data" as cold function
Noelle:  Function "fullsize_downsample"
Noelle:  Disable "fullsize_downsample" as cold function
Noelle:  Function "sep_downsample"
Noelle:  Disable "sep_downsample" as cold function
Noelle:  Function "process_data_simple_main"
Noelle:  Disable "process_data_simple_main" as cold function
Noelle:  Function "jpeg_finish_compress"
Noelle:  Disable "jpeg_finish_compress" as cold function
Noelle:  Function "jcopy_sample_rows"
Noelle:  Disable "jcopy_sample_rows" as cold function
Noelle:  Function "get_raw_row"
Noelle:  Disable "get_raw_row" as cold function
Noelle:  Function "empty_output_buffer"
Noelle:  Disable "empty_output_buffer" as cold function
Noelle:  Function "start_pass_phuff"
Noelle:  Disable "start_pass_phuff" as cold function
Noelle:  Function "jpeg_make_c_derived_tbl"
Noelle:  Disable "jpeg_make_c_derived_tbl" as cold function
Noelle:  Function "write_scan_header"
Noelle:  Disable "write_scan_header" as cold function
Noelle:  Function "realize_virt_arrays"
Noelle:  Disable "realize_virt_arrays" as cold function
Noelle:  Function "emit_dht"
Noelle:  Disable "emit_dht" as cold function
Noelle:  Function "rgb_ycc_start"
Noelle:  Disable "rgb_ycc_start" as cold function
Noelle:  Function "jpeg_start_compress"
Noelle:  Disable "jpeg_start_compress" as cold function
Noelle:  Function "jinit_compress_master"
Noelle:  Disable "jinit_compress_master" as cold function
Noelle:  Function "jinit_c_master_control"
Noelle:  Disable "jinit_c_master_control" as cold function
Noelle:  Function "parse_switches"
Noelle:  Disable "parse_switches" as cold function
Noelle:  Function "write_frame_header"
Noelle:  Disable "write_frame_header" as cold function
Noelle:  Function "jpeg_set_linear_quality"
Noelle:  Disable "jpeg_set_linear_quality" as cold function
Noelle:  Function "emit_dqt"
Noelle:  Disable "emit_dqt" as cold function
Noelle:  Function "keymatch"
Noelle:  Disable "keymatch" as cold function
Noelle:  Function "jpeg_set_defaults"
Noelle:  Disable "jpeg_set_defaults" as cold function
Noelle:  Function "prepare_for_pass"
Noelle:  Disable "prepare_for_pass" as cold function
Noelle:  Function "jpeg_set_quality"
Noelle:  Disable "jpeg_set_quality" as cold function
Noelle:  Function "alloc_small"
Noelle:  Disable "alloc_small" as cold function
Noelle:  Function "finish_pass_phuff"
Noelle:  Disable "finish_pass_phuff" as cold function
Noelle:  Function "alloc_sarray"
Noelle:  Disable "alloc_sarray" as cold function
Noelle:  Function "per_scan_setup"
Noelle:  Disable "per_scan_setup" as cold function
Noelle:  Function "start_pass_coef"
Noelle:  Disable "start_pass_coef" as cold function
Noelle:  Function "select_scan_parameters"
Noelle:  Disable "select_scan_parameters" as cold function
Noelle:  Function "finish_pass_master"
Noelle:  Disable "finish_pass_master" as cold function
Noelle:  Function "flush_bits"
Noelle:  Disable "flush_bits" as cold function
Noelle:  Function "start_pass_fdctmgr"
Noelle:  Disable "start_pass_fdctmgr" as cold function
Noelle:  Function "free_pool"
Noelle:  Disable "free_pool" as cold function
Noelle:  Function "emit_sof"
Noelle:  Disable "emit_sof" as cold function
Noelle:  Function "start_input_ppm"
Noelle:  Disable "start_input_ppm" as cold function
Noelle:  Function "self_destruct"
Noelle:  Disable "self_destruct" as cold function
Noelle:  Function "write_file_header"
Noelle:  Disable "write_file_header" as cold function
Noelle:  Function "alloc_large"
Noelle:  Disable "alloc_large" as cold function
Noelle:  Function "request_virt_barray"
Noelle:  Disable "request_virt_barray" as cold function
Noelle:  Function "read_pbm_integer"
Noelle:  Disable "read_pbm_integer" as cold function
Noelle:  Function "jinit_c_coef_controller"
Noelle:  Disable "jinit_c_coef_controller" as cold function
Noelle:  Function "jinit_downsampler"
Noelle:  Disable "jinit_downsampler" as cold function
Noelle:  Function "jpeg_simple_progression"
Noelle:  Disable "jpeg_simple_progression" as cold function
Noelle:  Function "jinit_c_prep_controller"
Noelle:  Disable "jinit_c_prep_controller" as cold function
Noelle:  Function "jpeg_default_colorspace"
Noelle:  Disable "jpeg_default_colorspace" as cold function
Noelle:  Function "jpeg_CreateCompress"
Noelle:  Disable "jpeg_CreateCompress" as cold function
Noelle:  Function "jinit_c_main_controller"
Noelle:  Disable "jinit_c_main_controller" as cold function
Noelle:  Function "jpeg_suppress_tables"
Noelle:  Disable "jpeg_suppress_tables" as cold function
Noelle:  Function "jdiv_round_up"
Noelle:  Disable "jdiv_round_up" as cold function
Noelle:  Function "jinit_memory_mgr"
Noelle:  Disable "jinit_memory_mgr" as cold function
Noelle:  Function "jinit_color_converter"
Noelle:  Disable "jinit_color_converter" as cold function
Noelle:  Function "jpeg_alloc_huff_table"
Noelle:  Disable "jpeg_alloc_huff_table" as cold function
Noelle:  Function "jround_up"
Noelle:  Disable "jround_up" as cold function
Noelle:  Function "jinit_forward_dct"
Noelle:  Disable "jinit_forward_dct" as cold function
Noelle:  Function "write_file_trailer"
Noelle:  Disable "write_file_trailer" as cold function
Noelle:  Function "jpeg_std_error"
Noelle:  Disable "jpeg_std_error" as cold function
Noelle:  Function "term_destination"
Noelle:  Disable "term_destination" as cold function
Noelle:  Function "jpeg_stdio_dest"
Noelle:  Disable "jpeg_stdio_dest" as cold function
Noelle:  Function "start_pass_main"
Noelle:  Disable "start_pass_main" as cold function
Noelle:  Function "jinit_marker_writer"
Noelle:  Disable "jinit_marker_writer" as cold function
Noelle:  Function "start_pass_prep"
Noelle:  Disable "start_pass_prep" as cold function
Noelle:  Function "jpeg_alloc_quant_table"
Noelle:  Disable "jpeg_alloc_quant_table" as cold function
Noelle:  Function "jpeg_free_large"
Noelle:  Disable "jpeg_free_large" as cold function
Noelle:  Function "jpeg_get_large"
Noelle:  Disable "jpeg_get_large" as cold function
Noelle:  Function "jinit_phuff_encoder"
Noelle:  Disable "jinit_phuff_encoder" as cold function
Noelle:  Function "jpeg_destroy_compress"
Noelle:  Disable "jpeg_destroy_compress" as cold function
Noelle:  Function "init_destination"
Noelle:  Disable "init_destination" as cold function
Noelle:  Function "jpeg_free_small"
Noelle:  Disable "jpeg_free_small" as cold function
Noelle:  Function "jpeg_get_small"
Noelle:  Disable "jpeg_get_small" as cold function
Noelle:  Function "jpeg_destroy"
Noelle:  Disable "jpeg_destroy" as cold function
Noelle:  Function "jinit_read_ppm"
Noelle:  Disable "jinit_read_ppm" as cold function
Noelle:  Function "jpeg_abort"
Noelle:  Disable "jpeg_abort" as cold function
Noelle:  Function "emit_message"
Noelle:  Disable "emit_message" as cold function
Noelle:  Function "reset_error_mgr"
Noelle:  Disable "reset_error_mgr" as cold function
Noelle:  Function "finish_input_ppm"
Noelle:  Disable "finish_input_ppm" as cold function
Noelle:  Function "jpeg_mem_available"
Noelle:  Disable "jpeg_mem_available" as cold function
Noelle:  Function "start_pass_downsample"
Noelle:  Disable "start_pass_downsample" as cold function
Noelle:  Function "jzero_far"
Noelle:  Disable "jzero_far" as cold function
Noelle:  Function "error_exit"
Noelle:  Disable "error_exit" as cold function
Noelle:  Function "output_message"
Noelle:  Disable "output_message" as cold function
Noelle:  Function "jpeg_quality_scaling"
Noelle:  Disable "jpeg_quality_scaling" as cold function
Noelle:  Function "format_message"
Noelle:  Disable "format_message" as cold function
Noelle:  Function "jpeg_add_quant_table"
Noelle:  Disable "jpeg_add_quant_table" as cold function
Noelle:  Function "jpeg_write_raw_data"
Noelle:  Disable "jpeg_write_raw_data" as cold function
Noelle:  Function "access_virt_sarray"
Noelle:  Disable "access_virt_sarray" as cold function
Noelle:  Function "jpeg_write_scanlines"
Noelle:  Disable "jpeg_write_scanlines" as cold function
Noelle:  Function "forward_DCT_float"
Noelle:  Disable "forward_DCT_float" as cold function
Noelle:  Function "jpeg_mem_term"
Noelle:  Disable "jpeg_mem_term" as cold function
Noelle:  Function "jpeg_mem_init"
Noelle:  Disable "jpeg_mem_init" as cold function
Noelle:  Function "jpeg_open_backing_store"
Noelle:  Disable "jpeg_open_backing_store" as cold function
Noelle:  Function "pre_process_context"
Noelle:  Disable "pre_process_context" as cold function
Noelle:  Function "null_convert"
Noelle:  Disable "null_convert" as cold function
Noelle:  Function "alloc_barray"
Noelle:  Disable "alloc_barray" as cold function
Noelle:  Function "jcopy_block_row"
Noelle:  Disable "jcopy_block_row" as cold function
Noelle:  Function "jpeg_fdct_ifast"
Noelle:  Disable "jpeg_fdct_ifast" as cold function
Noelle:  Function "jpeg_fdct_float"
Noelle:  Disable "jpeg_fdct_float" as cold function
Noelle:  Function "pass_startup"
Noelle:  Disable "pass_startup" as cold function
Noelle:  Function "request_virt_sarray"
Noelle:  Disable "request_virt_sarray" as cold function
Noelle:  Function "jpeg_set_colorspace"
Noelle:  Disable "jpeg_set_colorspace" as cold function
Noelle:  Function "get_text_rgb_row"
Noelle:  Disable "get_text_rgb_row" as cold function
Noelle:  Function "get_word_gray_row"
Noelle:  Disable "get_word_gray_row" as cold function
Noelle:  Function "load_interlaced_image"
Noelle:  Disable "load_interlaced_image" as cold function
Noelle:  Function "get_scaled_gray_row"
Noelle:  Disable "get_scaled_gray_row" as cold function
Noelle:  Function "get_word_rgb_row"
Noelle:  Disable "get_word_rgb_row" as cold function
Noelle:  Function "get_scaled_rgb_row"
Noelle:  Disable "get_scaled_rgb_row" as cold function
Noelle:  Function "get_text_gray_row"
Noelle:  Disable "get_text_gray_row" as cold function
Noelle:  Function "jinit_read_gif"
Noelle:  Disable "jinit_read_gif" as cold function
Noelle:  Function "cmyk_ycck_convert"
Noelle:  Disable "cmyk_ycck_convert" as cold function
Noelle:  Function "fullsize_smooth_downsample"
Noelle:  Disable "fullsize_smooth_downsample" as cold function
Noelle:  Function "h2v1_downsample"
Noelle:  Disable "h2v1_downsample" as cold function
Noelle:  Function "h2v2_smooth_downsample"
Noelle:  Disable "h2v2_smooth_downsample" as cold function
Noelle:  Function "int_downsample"
Noelle:  Disable "int_downsample" as cold function
Noelle:  Function "jinit_huff_encoder"
Noelle:  Disable "jinit_huff_encoder" as cold function
Noelle:  Function "start_pass_huff"
Noelle:  Disable "start_pass_huff" as cold function
Noelle:  Function "jinit_read_targa"
Noelle:  Disable "jinit_read_targa" as cold function
Noelle:  Function "usage"
Noelle:  Disable "usage" as cold function
Noelle:  Function "start_input_gif"
Noelle:  Disable "start_input_gif" as cold function
Noelle:  Function "finish_input_gif"
Noelle:  Disable "finish_input_gif" as cold function
Noelle:  Function "get_pixel_rows"
Noelle:  Disable "get_pixel_rows" as cold function
Noelle:  Function "LZWReadByte"
Noelle:  Disable "LZWReadByte" as cold function
Noelle:  Function "GetCode"
Noelle:  Disable "GetCode" as cold function
Noelle:  Function "get_interlaced_row"
Noelle:  Disable "get_interlaced_row" as cold function
Noelle:  Function "encode_mcu_gather"
Noelle:  Disable "encode_mcu_gather" as cold function
Noelle:  Function "start_input_tga"
Noelle:  Disable "start_input_tga" as cold function
Noelle:  Function "finish_pass_gather"
Noelle:  Disable "finish_pass_gather" as cold function
Noelle:  Function "finish_pass_huff"
Noelle:  Disable "finish_pass_huff" as cold function
Noelle:  Function "emit_restart"
Noelle:  Disable "emit_restart" as cold function
Noelle:  Function "read_stdin"
Noelle:  Disable "read_stdin" as cold function
Noelle:  Function "read_text_integer"
Noelle:  Disable "read_text_integer" as cold function
Noelle:  Function "text_getc"
Noelle:  Disable "text_getc" as cold function
Noelle:  Function "read_scan_script"
Noelle:  Disable "read_scan_script" as cold function
Noelle:  Function "read_scan_integer"
Noelle:  Disable "read_scan_integer" as cold function
Noelle:  Function "set_quant_slots"
Noelle:  Disable "set_quant_slots" as cold function
Noelle:  Function "set_sample_factors"
Noelle:  Disable "set_sample_factors" as cold function
Noelle:  Function "read_quant_tables"
Noelle:  Disable "read_quant_tables" as cold function
Noelle:  Function "compress_data"
Noelle:  Disable "compress_data" as cold function
Noelle:  Function "null_method"
Noelle:  Disable "null_method" as cold function
Noelle:  Function "grayscale_convert"
Noelle:  Disable "grayscale_convert" as cold function
Noelle:  Function "rgb_gray_convert"
Noelle:  Disable "rgb_gray_convert" as cold function
Noelle:  Function "write_stdout"
Noelle:  Disable "write_stdout" as cold function
Noelle:  Function "jpeg_abort_compress"
Noelle:  Disable "jpeg_abort_compress" as cold function
Noelle:  Function "jpeg_write_marker"
Noelle:  Disable "jpeg_write_marker" as cold function
Noelle:  Function "get_memory_row"
Noelle:  Disable "get_memory_row" as cold function
Noelle:  Function "encode_mcu_huff"
Noelle:  Disable "encode_mcu_huff" as cold function
Noelle:  Function "finish_input_tga"
Noelle:  Disable "finish_input_tga" as cold function
Noelle:  Function "read_rle_pixel"
Noelle:  Disable "read_rle_pixel" as cold function
Noelle:  Function "read_non_rle_pixel"
Noelle:  Disable "read_non_rle_pixel" as cold function
Noelle:  Function "get_8bit_row"
Noelle:  Disable "get_8bit_row" as cold function
Noelle:  Function "get_16bit_row"
Noelle:  Disable "get_16bit_row" as cold function
Noelle:  Function "get_24bit_row"
Noelle:  Disable "get_24bit_row" as cold function
Noelle:  Function "get_8bit_gray_row"
Noelle:  Disable "get_8bit_gray_row" as cold function
Noelle:  Function "preload_image"
Noelle:  Disable "preload_image" as cold function
Noelle:  Function "jpeg_write_tables"
Noelle:  Disable "jpeg_write_tables" as cold function
Noelle:  Function "jinit_read_bmp"
Noelle:  Disable "jinit_read_bmp" as cold function
Noelle:  Function "start_input_bmp"
Noelle:  Disable "start_input_bmp" as cold function
Noelle:  Function "finish_input_bmp"
Noelle:  Disable "finish_input_bmp" as cold function
Noelle:  Function "preload_image.9"
Noelle:  Disable "preload_image.9" as cold function
Noelle:  Function "write_any_marker"
Noelle:  Disable "write_any_marker" as cold function
Noelle:  Function "write_tables_only"
Noelle:  Disable "write_tables_only" as cold function
Noelle:  Function "get_8bit_row.10"
Noelle:  Disable "get_8bit_row.10" as cold function
Noelle:  Function "get_24bit_row.11"
Noelle:  Disable "get_24bit_row.11" as cold function
Planner:    There are 22 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:    Loop 281 has 4.708697e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 307 has 8.929887e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 168 has 1.421053e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 170 has 6.602327e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 176 has 2.581633e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 177 has 1.126923e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 321 has 7.943750e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 292 has 1.322000e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 219 has 9.998582e-01 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 293 has 1.421111e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 300 has 1.484632e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 322 has 8.101250e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 315 has 4.470001e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 316 has 1.372183e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 284 has 1.058351e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 287 has 9.408357e+00 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 197 has 9.998581e-01 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:  There are 5 loop nesting trees in the program
Planner:    ID: 198 (1)
Planner:      Function: "rgb_ycc_convert"
Planner:      Loop: "  %39 = load i8, i8* %38, align 1, !tbaa !92, !noelle.pdg.inst.id !93"
Planner:      Loop nesting level: 2
Planner:      Hotness = 3.935433e+00 %
Planner:      Average instructions per invocation = 7.014202e+05 %
Planner:      Average iterations per invocation = 1.031502e+04 %
Planner:    
Planner:    ID: 220 (1)
Planner:      Function: "h2v2_downsample"
Planner:      Loop: "  %86 = load i8, i8* %84, align 1, !tbaa !347, !noelle.pdg.inst.id !114"
Planner:      Loop nesting level: 2
Planner:      Hotness = 6.949175e-01 %
Planner:      Average instructions per invocation = 1.238390e+05 %
Planner:      Average iterations per invocation = 2.580000e+03 %
Planner:    
Planner:    ID: 169 (1)
Planner:      Function: "compress_output"
Planner:      Loop: "  %56 = load i32, i32* %8, align 4, !tbaa !145, !noelle.pdg.inst.id !88"
Planner:      Loop nesting level: 2
Planner:      Hotness = 8.179893e-01 %
Planner:      Average instructions per invocation = 8.630949e+04 %
Planner:      Average iterations per invocation = 1.027221e+03 %
Planner:    
Planner:    ID: 0 (1)
Planner:      Function: "main"
Planner:      Loop: "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3536, !noelle.pdg.inst.id !166"
Planner:      Loop nesting level: 1
Planner:      Hotness = 7.179032e+01 %
Planner:      Average instructions per invocation = 9.019431e+10 %
Planner:      Average iterations per invocation = 2.147484e+09 %
Planner:    
Planner:    ID: 314 (1)
Planner:      Function: "forward_DCT"
Planner:      Loop: "  %28 = zext i32 %27 to i64, !noelle.pdg.inst.id !216"
Planner:      Loop nesting level: 1
Planner:      Hotness = 2.486168e+00 %
Planner:      Average instructions per invocation = 1.770701e+06 %
Planner:      Average iterations per invocation = 9.674994e+02 %
Planner:    
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 198
Planner: LoopSelector:      Function: "rgb_ycc_convert"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %39 = load i8, i8* %38, align 1, !tbaa !92, !noelle.pdg.inst.id !93"
Planner: LoopSelector:      Coverage: 3.935433e+00%
Planner: LoopSelector:      Whole-program savings = 3.935433e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 220 saves only 6.949175e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [4 x [64 x i16]**], align 16, !noelle.pdg.inst.id !131
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [4 x [64 x i16]**], align 16, !noelle.pdg.inst.id !131
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 169 saves only 6.655339e-02 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.jpeg_error_mgr, align 8, !noelle.pdg.inst.id !3399
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3397 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.jpeg_compress_struct, align 8, !noelle.pdg.inst.id !3398
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.jpeg_error_mgr, align 8, !noelle.pdg.inst.id !3399
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3397 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.jpeg_compress_struct, align 8, !noelle.pdg.inst.id !3398
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 0
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3536, !noelle.pdg.inst.id !166"
Planner: LoopSelector:      Coverage: 7.179032e+01%
Planner: LoopSelector:      Whole-program savings = 2.051152e+01%
Planner: LoopSelector:      Loop savings = 2.857143e+01%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16, !noelle.pdg.inst.id !182
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16, !noelle.pdg.inst.id !182
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 314
Planner: LoopSelector:      Function: "forward_DCT"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %28 = zext i32 %27 to i64, !noelle.pdg.inst.id !216"
Planner: LoopSelector:      Coverage: 2.486168e+00%
Planner: LoopSelector:      Whole-program savings = 2.312289e+00%
Planner: LoopSelector:      Loop savings = 9.300616e+01%
Planner: LoopSelector: End
Planner:   Maximum time saved = 2.675924e+01% (33619177372)
Planner:   Maximum time saved with DOALL only = 3.935433e+00% (4944311303)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168" (7.179032e+01%)
Noelle:  Function "encode_mcu_AC_refine"
Noelle:     Loop "  %40 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %38, !noelle.pdg.inst.id !6491" (5.986135e+00%)
Noelle:     Loop "  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %69, !noelle.pdg.inst.id !6531" (6.434918e+00%)
Noelle:     Loop "  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %6), !noelle.pdg.inst.id !6548" (9.731326e-03%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %129 = lshr i64 %127, 16, !noelle.pdg.inst.id !6601" (3.310658e-04%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %199 = icmp eq i32 %196, 0, !noelle.pdg.inst.id !6678" (3.328221e-03%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %212 = lshr i64 %210, 16, !noelle.pdg.inst.id !6697" (2.726549e-04%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %340 = lshr i64 %338, 16, !noelle.pdg.inst.id !6830" (1.702085e-02%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %416 = lshr i64 %414, 16, !noelle.pdg.inst.id !6909" (5.348385e-03%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %487 = icmp eq i32 %484, 0, !noelle.pdg.inst.id !6979" (2.083875e-01%)
Noelle:     Loop "  %500 = lshr i64 %498, 16, !noelle.pdg.inst.id !6998" (1.714804e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:  Function "encode_mcu_AC_first"
Noelle:     Loop "  %42 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %40, !noelle.pdg.inst.id !2769" (4.792309e+00%)
Noelle:     Loop "  %74 = load i32, i32* %33, align 8, !tbaa !2814, !noelle.pdg.inst.id !280" (8.888417e-04%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %118 = lshr i64 %116, 16, !noelle.pdg.inst.id !2866" (2.747108e-04%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %180 = ashr i32 %179, 1, !noelle.pdg.inst.id !2935" (2.103081e-01%)
Noelle:     Loop "  %233 = lshr i64 %231, 16, !noelle.pdg.inst.id !2988" (9.506832e-02%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %306 = lshr i64 %304, 16, !noelle.pdg.inst.id !3068" (4.571888e-02%)
Noelle:  Disable loop "16" as cold code
Noelle:  Function "rgb_ycc_convert"
Noelle:     Loop "  %26 = load i8**, i8*** %2, align 8, !tbaa !78, !noelle.pdg.inst.id !79" (3.935545e+00%)
Noelle:     Loop "  %39 = load i8, i8* %38, align 1, !tbaa !94, !noelle.pdg.inst.id !95" (3.935433e+00%)
Noelle:  Function "forward_DCT"
Noelle:     Loop "  %28 = zext i32 %27 to i64, !noelle.pdg.inst.id !218" (2.486168e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29, !noelle.pdg.inst.id !224" (6.072169e-01%)
Noelle:     Loop "  %77 = getelementptr inbounds i32, i32* %18, i64 %76, !noelle.pdg.inst.id !268" (1.864010e+00%)
Noelle:  Function "jpeg_fdct_islow"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !36, !noelle.pdg.inst.id !40" (1.079100e+00%)
Noelle:     Loop "  %95 = load i32, i32* %94, align 4, !tbaa !36, !noelle.pdg.inst.id !144" (1.100496e+00%)
Noelle:  Function "compress_output"
Noelle:     Loop "  %16 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %15, !noelle.pdg.inst.id !157" (2.039395e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %54 = icmp ult i32 %52, %51, !noelle.pdg.inst.id !206" (8.181533e-01%)
Noelle:     Loop "  %56 = load i32, i32* %8, align 4, !tbaa !147, !noelle.pdg.inst.id !90" (8.179893e-01%)
Noelle:     Loop "  %62 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %60, !noelle.pdg.inst.id !222" (6.427619e-01%)
Noelle:     Loop "  %131 = add nsw i64 %129, %53, !noelle.pdg.inst.id !322" (8.118708e-08%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  %137 = add i64 %136, %135, !noelle.pdg.inst.id !329" (5.492067e-08%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  %160 = getelementptr inbounds [64 x i16], [64 x i16]* %158, i64 1, !noelle.pdg.inst.id !356" (2.626641e-08%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  %103 = add nsw i64 %101, %53, !noelle.pdg.inst.id !286" (5.492067e-08%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %109 = add i64 %108, %107, !noelle.pdg.inst.id !293" (5.492067e-08%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %85 = sext i32 %84 to i64, !noelle.pdg.inst.id !252" (2.864014e-01%)
Noelle:     Loop "  %93 = getelementptr inbounds [64 x i16], [64 x i16]* %91, i64 1, !noelle.pdg.inst.id !261" (1.326729e-01%)
Noelle:  Function "emit_eobrun"
Noelle:     Loop "  %7 = ashr i32 %5, 1, !noelle.pdg.inst.id !1443" (3.276667e-02%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %68 = lshr i64 %66, 16, !noelle.pdg.inst.id !1520" (1.749602e-02%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %154 = lshr i64 %152, 16, !noelle.pdg.inst.id !1616" (1.792058e-03%)
Noelle:  Disable loop "37" as cold code
Noelle:     Loop "  %231 = icmp eq i32 %228, 0, !noelle.pdg.inst.id !1693" (5.123379e-01%)
Noelle:     Loop "  %246 = lshr i64 %244, 16, !noelle.pdg.inst.id !1712" (4.479996e-02%)
Noelle:  Disable loop "39" as cold code
Noelle:  Function "h2v2_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29, !noelle.pdg.inst.id !345" (0.000000e+00%)
Noelle:  Disable loop "40" as cold code
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59, !noelle.pdg.inst.id !378" (1.402865e-04%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %75 = or i64 %74, 1, !noelle.pdg.inst.id !402" (6.950073e-01%)
Noelle:     Loop "  %86 = load i8, i8* %84, align 1, !tbaa !349, !noelle.pdg.inst.id !116" (6.949175e-01%)
Noelle:  Function "encode_mcu_DC_first"
Noelle:     Loop "  %34 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %33, !noelle.pdg.inst.id !1568" (2.132140e-01%)
Noelle:     Loop "  %105 = lshr i64 %103, 16, !noelle.pdg.inst.id !1650" (9.250578e-03%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %183 = lshr i64 %181, 16, !noelle.pdg.inst.id !1736" (9.316102e-03%)
Noelle:  Disable loop "46" as cold code
Noelle:  Function "encode_mcu_DC_refine"
Noelle:  Disable "encode_mcu_DC_refine" as cold function
Noelle:  Function "compress_first_pass"
Noelle:  Disable "compress_first_pass" as cold function
Noelle:  Function "finish_pass_gather_phuff"
Noelle:  Disable "finish_pass_gather_phuff" as cold function
Noelle:  Function "jpeg_gen_optimal_table"
Noelle:  Disable "jpeg_gen_optimal_table" as cold function
Noelle:  Function "access_virt_barray"
Noelle:  Disable "access_virt_barray" as cold function
Noelle:  Function "pre_process_data"
Noelle:  Disable "pre_process_data" as cold function
Noelle:  Function "fullsize_downsample"
Noelle:  Disable "fullsize_downsample" as cold function
Noelle:  Function "sep_downsample"
Noelle:  Disable "sep_downsample" as cold function
Noelle:  Function "process_data_simple_main"
Noelle:  Disable "process_data_simple_main" as cold function
Noelle:  Function "jpeg_finish_compress"
Noelle:  Disable "jpeg_finish_compress" as cold function
Noelle:  Function "jcopy_sample_rows"
Noelle:  Disable "jcopy_sample_rows" as cold function
Noelle:  Function "get_raw_row"
Noelle:  Disable "get_raw_row" as cold function
Noelle:  Function "empty_output_buffer"
Noelle:  Disable "empty_output_buffer" as cold function
Noelle:  Function "start_pass_phuff"
Noelle:  Disable "start_pass_phuff" as cold function
Noelle:  Function "jpeg_make_c_derived_tbl"
Noelle:  Disable "jpeg_make_c_derived_tbl" as cold function
Noelle:  Function "write_scan_header"
Noelle:  Disable "write_scan_header" as cold function
Noelle:  Function "realize_virt_arrays"
Noelle:  Disable "realize_virt_arrays" as cold function
Noelle:  Function "emit_dht"
Noelle:  Disable "emit_dht" as cold function
Noelle:  Function "rgb_ycc_start"
Noelle:  Disable "rgb_ycc_start" as cold function
Noelle:  Function "jpeg_start_compress"
Noelle:  Disable "jpeg_start_compress" as cold function
Noelle:  Function "jinit_compress_master"
Noelle:  Disable "jinit_compress_master" as cold function
Noelle:  Function "jinit_c_master_control"
Noelle:  Disable "jinit_c_master_control" as cold function
Noelle:  Function "parse_switches"
Noelle:  Disable "parse_switches" as cold function
Noelle:  Function "write_frame_header"
Noelle:  Disable "write_frame_header" as cold function
Noelle:  Function "jpeg_set_linear_quality"
Noelle:  Disable "jpeg_set_linear_quality" as cold function
Noelle:  Function "emit_dqt"
Noelle:  Disable "emit_dqt" as cold function
Noelle:  Function "keymatch"
Noelle:  Disable "keymatch" as cold function
Noelle:  Function "jpeg_set_defaults"
Noelle:  Disable "jpeg_set_defaults" as cold function
Noelle:  Function "prepare_for_pass"
Noelle:  Disable "prepare_for_pass" as cold function
Noelle:  Function "jpeg_set_quality"
Noelle:  Disable "jpeg_set_quality" as cold function
Noelle:  Function "alloc_small"
Noelle:  Disable "alloc_small" as cold function
Noelle:  Function "finish_pass_phuff"
Noelle:  Disable "finish_pass_phuff" as cold function
Noelle:  Function "alloc_sarray"
Noelle:  Disable "alloc_sarray" as cold function
Noelle:  Function "per_scan_setup"
Noelle:  Disable "per_scan_setup" as cold function
Noelle:  Function "start_pass_coef"
Noelle:  Disable "start_pass_coef" as cold function
Noelle:  Function "select_scan_parameters"
Noelle:  Disable "select_scan_parameters" as cold function
Noelle:  Function "finish_pass_master"
Noelle:  Disable "finish_pass_master" as cold function
Noelle:  Function "flush_bits"
Noelle:  Disable "flush_bits" as cold function
Noelle:  Function "start_pass_fdctmgr"
Noelle:  Disable "start_pass_fdctmgr" as cold function
Noelle:  Function "free_pool"
Noelle:  Disable "free_pool" as cold function
Noelle:  Function "emit_sof"
Noelle:  Disable "emit_sof" as cold function
Noelle:  Function "start_input_ppm"
Noelle:  Disable "start_input_ppm" as cold function
Noelle:  Function "self_destruct"
Noelle:  Disable "self_destruct" as cold function
Noelle:  Function "write_file_header"
Noelle:  Disable "write_file_header" as cold function
Noelle:  Function "alloc_large"
Noelle:  Disable "alloc_large" as cold function
Noelle:  Function "request_virt_barray"
Noelle:  Disable "request_virt_barray" as cold function
Noelle:  Function "read_pbm_integer"
Noelle:  Disable "read_pbm_integer" as cold function
Noelle:  Function "jinit_c_coef_controller"
Noelle:  Disable "jinit_c_coef_controller" as cold function
Noelle:  Function "jinit_downsampler"
Noelle:  Disable "jinit_downsampler" as cold function
Noelle:  Function "jpeg_simple_progression"
Noelle:  Disable "jpeg_simple_progression" as cold function
Noelle:  Function "jinit_c_prep_controller"
Noelle:  Disable "jinit_c_prep_controller" as cold function
Noelle:  Function "jpeg_default_colorspace"
Noelle:  Disable "jpeg_default_colorspace" as cold function
Noelle:  Function "jpeg_CreateCompress"
Noelle:  Disable "jpeg_CreateCompress" as cold function
Noelle:  Function "jinit_c_main_controller"
Noelle:  Disable "jinit_c_main_controller" as cold function
Noelle:  Function "jpeg_suppress_tables"
Noelle:  Disable "jpeg_suppress_tables" as cold function
Noelle:  Function "jdiv_round_up"
Noelle:  Disable "jdiv_round_up" as cold function
Noelle:  Function "jinit_memory_mgr"
Noelle:  Disable "jinit_memory_mgr" as cold function
Noelle:  Function "jinit_color_converter"
Noelle:  Disable "jinit_color_converter" as cold function
Noelle:  Function "jpeg_alloc_huff_table"
Noelle:  Disable "jpeg_alloc_huff_table" as cold function
Noelle:  Function "jround_up"
Noelle:  Disable "jround_up" as cold function
Noelle:  Function "jinit_forward_dct"
Noelle:  Disable "jinit_forward_dct" as cold function
Noelle:  Function "write_file_trailer"
Noelle:  Disable "write_file_trailer" as cold function
Noelle:  Function "jpeg_stdio_dest"
Noelle:  Disable "jpeg_stdio_dest" as cold function
Noelle:  Function "jpeg_std_error"
Noelle:  Disable "jpeg_std_error" as cold function
Noelle:  Function "term_destination"
Noelle:  Disable "term_destination" as cold function
Noelle:  Function "start_pass_main"
Noelle:  Disable "start_pass_main" as cold function
Noelle:  Function "jinit_marker_writer"
Noelle:  Disable "jinit_marker_writer" as cold function
Noelle:  Function "jpeg_alloc_quant_table"
Noelle:  Disable "jpeg_alloc_quant_table" as cold function
Noelle:  Function "start_pass_prep"
Noelle:  Disable "start_pass_prep" as cold function
Noelle:  Function "jpeg_get_large"
Noelle:  Disable "jpeg_get_large" as cold function
Noelle:  Function "jpeg_free_large"
Noelle:  Disable "jpeg_free_large" as cold function
Noelle:  Function "jinit_phuff_encoder"
Noelle:  Disable "jinit_phuff_encoder" as cold function
Noelle:  Function "jpeg_destroy_compress"
Noelle:  Disable "jpeg_destroy_compress" as cold function
Noelle:  Function "init_destination"
Noelle:  Disable "init_destination" as cold function
Noelle:  Function "jpeg_get_small"
Noelle:  Disable "jpeg_get_small" as cold function
Noelle:  Function "jpeg_free_small"
Noelle:  Disable "jpeg_free_small" as cold function
Noelle:  Function "jpeg_destroy"
Noelle:  Disable "jpeg_destroy" as cold function
Noelle:  Function "jinit_read_ppm"
Noelle:  Disable "jinit_read_ppm" as cold function
Noelle:  Function "jpeg_abort"
Noelle:  Disable "jpeg_abort" as cold function
Noelle:  Function "emit_message"
Noelle:  Disable "emit_message" as cold function
Noelle:  Function "reset_error_mgr"
Noelle:  Disable "reset_error_mgr" as cold function
Noelle:  Function "start_pass_downsample"
Noelle:  Disable "start_pass_downsample" as cold function
Noelle:  Function "finish_input_ppm"
Noelle:  Disable "finish_input_ppm" as cold function
Noelle:  Function "jpeg_mem_available"
Noelle:  Disable "jpeg_mem_available" as cold function
Noelle:  Function "get_text_gray_row"
Noelle:  Disable "get_text_gray_row" as cold function
Noelle:  Function "get_scaled_rgb_row"
Noelle:  Disable "get_scaled_rgb_row" as cold function
Noelle:  Function "get_word_rgb_row"
Noelle:  Disable "get_word_rgb_row" as cold function
Noelle:  Function "get_scaled_gray_row"
Noelle:  Disable "get_scaled_gray_row" as cold function
Noelle:  Function "get_word_gray_row"
Noelle:  Disable "get_word_gray_row" as cold function
Noelle:  Function "jinit_read_gif"
Noelle:  Disable "jinit_read_gif" as cold function
Noelle:  Function "emit_restart"
Noelle:  Disable "emit_restart" as cold function
Noelle:  Function "jinit_read_bmp"
Noelle:  Disable "jinit_read_bmp" as cold function
Noelle:  Function "finish_pass_huff"
Noelle:  Disable "finish_pass_huff" as cold function
Noelle:  Function "LZWReadByte"
Noelle:  Disable "LZWReadByte" as cold function
Noelle:  Function "start_pass_huff"
Noelle:  Disable "start_pass_huff" as cold function
Noelle:  Function "encode_mcu_gather"
Noelle:  Disable "encode_mcu_gather" as cold function
Noelle:  Function "encode_mcu_huff"
Noelle:  Disable "encode_mcu_huff" as cold function
Noelle:  Function "finish_pass_gather"
Noelle:  Disable "finish_pass_gather" as cold function
Noelle:  Function "get_text_rgb_row"
Noelle:  Disable "get_text_rgb_row" as cold function
Noelle:  Function "get_pixel_rows"
Noelle:  Disable "get_pixel_rows" as cold function
Noelle:  Function "load_interlaced_image"
Noelle:  Disable "load_interlaced_image" as cold function
Noelle:  Function "finish_input_gif"
Noelle:  Disable "finish_input_gif" as cold function
Noelle:  Function "output_message"
Noelle:  Disable "output_message" as cold function
Noelle:  Function "start_input_gif"
Noelle:  Disable "start_input_gif" as cold function
Noelle:  Function "h2v1_downsample"
Noelle:  Disable "h2v1_downsample" as cold function
Noelle:  Function "pass_startup"
Noelle:  Disable "pass_startup" as cold function
Noelle:  Function "cmyk_ycck_convert"
Noelle:  Disable "cmyk_ycck_convert" as cold function
Noelle:  Function "null_convert"
Noelle:  Disable "null_convert" as cold function
Noelle:  Function "rgb_gray_convert"
Noelle:  Disable "rgb_gray_convert" as cold function
Noelle:  Function "read_stdin"
Noelle:  Disable "read_stdin" as cold function
Noelle:  Function "grayscale_convert"
Noelle:  Disable "grayscale_convert" as cold function
Noelle:  Function "null_method"
Noelle:  Disable "null_method" as cold function
Noelle:  Function "int_downsample"
Noelle:  Disable "int_downsample" as cold function
Noelle:  Function "write_stdout"
Noelle:  Disable "write_stdout" as cold function
Noelle:  Function "h2v2_smooth_downsample"
Noelle:  Disable "h2v2_smooth_downsample" as cold function
Noelle:  Function "jinit_read_targa"
Noelle:  Disable "jinit_read_targa" as cold function
Noelle:  Function "fullsize_smooth_downsample"
Noelle:  Disable "fullsize_smooth_downsample" as cold function
Noelle:  Function "jpeg_mem_term"
Noelle:  Disable "jpeg_mem_term" as cold function
Noelle:  Function "jpeg_mem_init"
Noelle:  Disable "jpeg_mem_init" as cold function
Noelle:  Function "jcopy_block_row"
Noelle:  Disable "jcopy_block_row" as cold function
Noelle:  Function "jpeg_write_raw_data"
Noelle:  Disable "jpeg_write_raw_data" as cold function
Noelle:  Function "jpeg_write_scanlines"
Noelle:  Disable "jpeg_write_scanlines" as cold function
Noelle:  Function "jpeg_write_tables"
Noelle:  Disable "jpeg_write_tables" as cold function
Noelle:  Function "jpeg_write_marker"
Noelle:  Disable "jpeg_write_marker" as cold function
Noelle:  Function "jpeg_abort_compress"
Noelle:  Disable "jpeg_abort_compress" as cold function
Noelle:  Function "format_message"
Noelle:  Disable "format_message" as cold function
Noelle:  Function "start_input_bmp"
Noelle:  Disable "start_input_bmp" as cold function
Noelle:  Function "error_exit"
Noelle:  Disable "error_exit" as cold function
Noelle:  Function "jpeg_open_backing_store"
Noelle:  Disable "jpeg_open_backing_store" as cold function
Noelle:  Function "jpeg_fdct_float"
Noelle:  Disable "jpeg_fdct_float" as cold function
Noelle:  Function "forward_DCT_float"
Noelle:  Disable "forward_DCT_float" as cold function
Noelle:  Function "jpeg_fdct_ifast"
Noelle:  Disable "jpeg_fdct_ifast" as cold function
Noelle:  Function "get_16bit_row"
Noelle:  Disable "get_16bit_row" as cold function
Noelle:  Function "get_24bit_row"
Noelle:  Disable "get_24bit_row" as cold function
Noelle:  Function "get_8bit_gray_row"
Noelle:  Disable "get_8bit_gray_row" as cold function
Noelle:  Function "preload_image"
Noelle:  Disable "preload_image" as cold function
Noelle:  Function "get_memory_row"
Noelle:  Disable "get_memory_row" as cold function
Noelle:  Function "jpeg_set_colorspace"
Noelle:  Disable "jpeg_set_colorspace" as cold function
Noelle:  Function "jpeg_quality_scaling"
Noelle:  Disable "jpeg_quality_scaling" as cold function
Noelle:  Function "read_quant_tables"
Noelle:  Disable "read_quant_tables" as cold function
Noelle:  Function "pre_process_context"
Noelle:  Disable "pre_process_context" as cold function
Noelle:  Function "set_quant_slots"
Noelle:  Disable "set_quant_slots" as cold function
Noelle:  Function "set_sample_factors"
Noelle:  Disable "set_sample_factors" as cold function
Noelle:  Function "read_scan_script"
Noelle:  Disable "read_scan_script" as cold function
Noelle:  Function "read_scan_integer"
Noelle:  Disable "read_scan_integer" as cold function
Noelle:  Function "access_virt_sarray"
Noelle:  Disable "access_virt_sarray" as cold function
Noelle:  Function "read_text_integer"
Noelle:  Disable "read_text_integer" as cold function
Noelle:  Function "request_virt_sarray"
Noelle:  Disable "request_virt_sarray" as cold function
Noelle:  Function "alloc_barray"
Noelle:  Disable "alloc_barray" as cold function
Noelle:  Function "text_getc"
Noelle:  Disable "text_getc" as cold function
Noelle:  Function "jpeg_add_quant_table"
Noelle:  Disable "jpeg_add_quant_table" as cold function
Noelle:  Function "GetCode"
Noelle:  Disable "GetCode" as cold function
Noelle:  Function "get_interlaced_row"
Noelle:  Disable "get_interlaced_row" as cold function
Noelle:  Function "finish_input_bmp"
Noelle:  Disable "finish_input_bmp" as cold function
Noelle:  Function "jzero_far"
Noelle:  Disable "jzero_far" as cold function
Noelle:  Function "preload_image.9"
Noelle:  Disable "preload_image.9" as cold function
Noelle:  Function "get_8bit_row.10"
Noelle:  Disable "get_8bit_row.10" as cold function
Noelle:  Function "compress_data"
Noelle:  Disable "compress_data" as cold function
Noelle:  Function "get_24bit_row.11"
Noelle:  Disable "get_24bit_row.11" as cold function
Noelle:  Function "start_input_tga"
Noelle:  Disable "start_input_tga" as cold function
Noelle:  Function "finish_input_tga"
Noelle:  Disable "finish_input_tga" as cold function
Noelle:  Function "read_rle_pixel"
Noelle:  Disable "read_rle_pixel" as cold function
Noelle:  Function "read_non_rle_pixel"
Noelle:  Disable "read_non_rle_pixel" as cold function
Noelle:  Function "get_8bit_row"
Noelle:  Disable "get_8bit_row" as cold function
Noelle:  Function "write_tables_only"
Noelle:  Disable "write_tables_only" as cold function
Noelle:  Function "write_any_marker"
Noelle:  Disable "write_any_marker" as cold function
Noelle:  Function "jinit_huff_encoder"
Noelle:  Disable "jinit_huff_encoder" as cold function
Noelle:  Function "usage"
Noelle:  Disable "usage" as cold function
Parallelizer:    There are 22 loops in the program we are going to consider
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.jpeg_error_mgr, align 8, !noelle.pdg.inst.id !3401
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3399
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3399 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.jpeg_compress_struct, align 8, !noelle.pdg.inst.id !3400
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.jpeg_error_mgr, align 8, !noelle.pdg.inst.id !3401
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3399
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3399 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.jpeg_compress_struct, align 8, !noelle.pdg.inst.id !3400
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16, !noelle.pdg.inst.id !184
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16, !noelle.pdg.inst.id !184
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "rgb_ycc_convert"
Parallelizer: parallelizerLoop:   Loop 198 = "  %39 = load i8, i8* %38, align 1, !tbaa !94, !noelle.pdg.inst.id !95"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %10 = load i64*, i64** %9, align 8, !tbaa !50, !noelle.pdg.inst.id !53
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %18 = zext i32 %12 to i64, !noelle.pdg.inst.id !64
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %29 = load i8*, i8** %28, align 8, !tbaa !78, !noelle.pdg.inst.id !82
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %32 = load i8*, i8** %31, align 8, !tbaa !78, !noelle.pdg.inst.id !85
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %35 = load i8*, i8** %34, align 8, !tbaa !78, !noelle.pdg.inst.id !88
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %36 = load i8*, i8** %24, align 8, !tbaa !78, !noelle.pdg.inst.id !89
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 0 = "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %4 = alloca %struct.jpeg_compress_struct, align 8, !noelle.pdg.inst.id !3400
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 0, !noelle.pdg.inst.id !3421
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %96 = phi %struct.cjpeg_source_struct* [ %64, %63 ], [ null, %NewDefault ], [ %89, %88 ], [ %87, %86 ], [ %85, %84 ], [ %83, %82 ], !noelle.pdg.inst.id !3512
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %101 = bitcast %struct.jpeg_compress_struct* %4 to %struct.jpeg_compress_struct.183*, !noelle.pdg.inst.id !3519
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %102 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 36, !noelle.pdg.inst.id !3520
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %104 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 7, !noelle.pdg.inst.id !3522
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %108 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %96, i64 0, i32 1, !noelle.pdg.inst.id !3527
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %109 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %96, i64 0, i32 4, !noelle.pdg.inst.id !3528
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %110 = bitcast i32* %3 to i8*, !noelle.pdg.inst.id !3529
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %111 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 4, !noelle.pdg.inst.id !3530
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %112 = bitcast %struct.jpeg_compress_struct* %4 to %struct.jpeg_common_struct*, !noelle.pdg.inst.id !3531
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %113 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 2, !noelle.pdg.inst.id !3532
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %115 = bitcast %struct.jpeg_comp_master** %114 to %struct.jpeg_comp_master.174**, !noelle.pdg.inst.id !3534
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %117 = bitcast %struct.jpeg_c_main_controller** %116 to %struct.jpeg_c_main_controller.175**, !noelle.pdg.inst.id !3536
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "forward_DCT"
Parallelizer: parallelizerLoop:   Loop 314 = "  %28 = zext i32 %27 to i64, !noelle.pdg.inst.id !218"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 = [64 x i16]* %3
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 = i32 %5
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %8 = alloca [64 x i32], align 16, !noelle.pdg.inst.id !184
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %13 = load void (i32*)*, void (i32*)** %12, align 8, !tbaa !196, !noelle.pdg.inst.id !48
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %18 = load i32*, i32** %17, align 8, !tbaa !204, !noelle.pdg.inst.id !52
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %21 = getelementptr inbounds i8*, i8** %2, i64 %20, !noelle.pdg.inst.id !208
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %24 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 0, !noelle.pdg.inst.id !213
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %25 = zext i32 %6 to i64, !noelle.pdg.inst.id !214
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc cjpeg.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg'
