make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg'
./runEnablers.sh cjpeg cjpeg.bc large "-lm -lstdc++ -lpthread -ltermcap" -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg
The IR has already been transformed for enabling parallelization
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3536, !noelle.pdg.inst.id !166" (7.179032e+01%)
Noelle:  Function "encode_mcu_AC_refine"
Noelle:     Loop "  %40 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %38, !noelle.pdg.inst.id !6489" (5.986135e+00%)
Noelle:     Loop "  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %69, !noelle.pdg.inst.id !6529" (6.434918e+00%)
Noelle:     Loop "  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %6), !noelle.pdg.inst.id !6546" (9.731326e-03%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %129 = lshr i64 %127, 16, !noelle.pdg.inst.id !6599" (3.310658e-04%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %199 = icmp eq i32 %196, 0, !noelle.pdg.inst.id !6676" (3.328221e-03%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %212 = lshr i64 %210, 16, !noelle.pdg.inst.id !6695" (2.726549e-04%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %340 = lshr i64 %338, 16, !noelle.pdg.inst.id !6828" (1.702085e-02%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %416 = lshr i64 %414, 16, !noelle.pdg.inst.id !6907" (5.348385e-03%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %487 = icmp eq i32 %484, 0, !noelle.pdg.inst.id !6977" (2.083875e-01%)
Noelle:     Loop "  %500 = lshr i64 %498, 16, !noelle.pdg.inst.id !6996" (1.714804e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:  Function "encode_mcu_AC_first"
Noelle:     Loop "  %42 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %40, !noelle.pdg.inst.id !2767" (4.792309e+00%)
Noelle:     Loop "  %74 = load i32, i32* %33, align 8, !tbaa !2812, !noelle.pdg.inst.id !278" (8.888417e-04%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %118 = lshr i64 %116, 16, !noelle.pdg.inst.id !2864" (2.747108e-04%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %180 = ashr i32 %179, 1, !noelle.pdg.inst.id !2933" (2.103081e-01%)
Noelle:     Loop "  %233 = lshr i64 %231, 16, !noelle.pdg.inst.id !2986" (9.506832e-02%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %306 = lshr i64 %304, 16, !noelle.pdg.inst.id !3066" (4.571888e-02%)
Noelle:  Disable loop "16" as cold code
Noelle:  Function "rgb_ycc_convert"
Noelle:     Loop "  %26 = load i8**, i8*** %2, align 8, !tbaa !76, !noelle.pdg.inst.id !77" (3.935545e+00%)
Noelle:     Loop "  %39 = load i8, i8* %38, align 1, !tbaa !92, !noelle.pdg.inst.id !93" (3.935433e+00%)
Noelle:  Function "forward_DCT"
Noelle:     Loop "  %28 = zext i32 %27 to i64, !noelle.pdg.inst.id !216" (2.486168e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29, !noelle.pdg.inst.id !221" (6.072169e-01%)
Noelle:     Loop "  %77 = getelementptr inbounds i32, i32* %18, i64 %76, !noelle.pdg.inst.id !265" (1.864010e+00%)
Noelle:  Function "jpeg_fdct_islow"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !34, !noelle.pdg.inst.id !38" (1.079100e+00%)
Noelle:     Loop "  %95 = load i32, i32* %94, align 4, !tbaa !34, !noelle.pdg.inst.id !142" (1.100496e+00%)
Noelle:  Function "compress_output"
Noelle:     Loop "  %16 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %15, !noelle.pdg.inst.id !155" (2.039395e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %54 = icmp ult i32 %52, %51, !noelle.pdg.inst.id !204" (8.181533e-01%)
Noelle:     Loop "  %56 = load i32, i32* %8, align 4, !tbaa !145, !noelle.pdg.inst.id !88" (8.179893e-01%)
Noelle:     Loop "  %62 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %60, !noelle.pdg.inst.id !220" (6.427619e-01%)
Noelle:     Loop "  %131 = add nsw i64 %129, %53, !noelle.pdg.inst.id !320" (8.118708e-08%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  %137 = add i64 %136, %135, !noelle.pdg.inst.id !327" (5.492067e-08%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  %160 = getelementptr inbounds [64 x i16], [64 x i16]* %158, i64 1, !noelle.pdg.inst.id !354" (2.626641e-08%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  %103 = add nsw i64 %101, %53, !noelle.pdg.inst.id !284" (5.492067e-08%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %109 = add i64 %108, %107, !noelle.pdg.inst.id !291" (5.492067e-08%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %85 = sext i32 %84 to i64, !noelle.pdg.inst.id !250" (2.864014e-01%)
Noelle:     Loop "  %93 = getelementptr inbounds [64 x i16], [64 x i16]* %91, i64 1, !noelle.pdg.inst.id !259" (1.326729e-01%)
Noelle:  Function "emit_eobrun"
Noelle:     Loop "  %7 = ashr i32 %5, 1, !noelle.pdg.inst.id !1441" (3.276667e-02%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %68 = lshr i64 %66, 16, !noelle.pdg.inst.id !1518" (1.749602e-02%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %154 = lshr i64 %152, 16, !noelle.pdg.inst.id !1614" (1.792058e-03%)
Noelle:  Disable loop "37" as cold code
Noelle:     Loop "  %231 = icmp eq i32 %228, 0, !noelle.pdg.inst.id !1691" (5.123379e-01%)
Noelle:     Loop "  %246 = lshr i64 %244, 16, !noelle.pdg.inst.id !1710" (4.479996e-02%)
Noelle:  Disable loop "39" as cold code
Noelle:  Function "h2v2_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29, !noelle.pdg.inst.id !343" (0.000000e+00%)
Noelle:  Disable loop "40" as cold code
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59, !noelle.pdg.inst.id !376" (1.402865e-04%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %75 = or i64 %74, 1, !noelle.pdg.inst.id !400" (6.950073e-01%)
Noelle:     Loop "  %86 = load i8, i8* %84, align 1, !tbaa !347, !noelle.pdg.inst.id !114" (6.949175e-01%)
Noelle:  Function "encode_mcu_DC_first"
Noelle:     Loop "  %34 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %33, !noelle.pdg.inst.id !1566" (2.132140e-01%)
Noelle:     Loop "  %105 = lshr i64 %103, 16, !noelle.pdg.inst.id !1648" (9.250578e-03%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %183 = lshr i64 %181, 16, !noelle.pdg.inst.id !1734" (9.316102e-03%)
Noelle:  Disable loop "46" as cold code
Noelle:  Function "encode_mcu_DC_refine"
Noelle:  Disable "encode_mcu_DC_refine" as cold function
Noelle:  Function "compress_first_pass"
Noelle:  Disable "compress_first_pass" as cold function
Noelle:  Function "finish_pass_gather_phuff"
Noelle:  Disable "finish_pass_gather_phuff" as cold function
Noelle:  Function "jpeg_gen_optimal_table"
Noelle:  Disable "jpeg_gen_optimal_table" as cold function
Noelle:  Function "access_virt_barray"
Noelle:  Disable "access_virt_barray" as cold function
Noelle:  Function "pre_process_data"
Noelle:  Disable "pre_process_data" as cold function
Noelle:  Function "fullsize_downsample"
Noelle:  Disable "fullsize_downsample" as cold function
Noelle:  Function "sep_downsample"
Noelle:  Disable "sep_downsample" as cold function
Noelle:  Function "process_data_simple_main"
Noelle:  Disable "process_data_simple_main" as cold function
Noelle:  Function "jpeg_finish_compress"
Noelle:  Disable "jpeg_finish_compress" as cold function
Noelle:  Function "jcopy_sample_rows"
Noelle:  Disable "jcopy_sample_rows" as cold function
Noelle:  Function "get_raw_row"
Noelle:  Disable "get_raw_row" as cold function
Noelle:  Function "empty_output_buffer"
Noelle:  Disable "empty_output_buffer" as cold function
Noelle:  Function "start_pass_phuff"
Noelle:  Disable "start_pass_phuff" as cold function
Noelle:  Function "jpeg_make_c_derived_tbl"
Noelle:  Disable "jpeg_make_c_derived_tbl" as cold function
Noelle:  Function "write_scan_header"
Noelle:  Disable "write_scan_header" as cold function
Noelle:  Function "realize_virt_arrays"
Noelle:  Disable "realize_virt_arrays" as cold function
Noelle:  Function "emit_dht"
Noelle:  Disable "emit_dht" as cold function
Noelle:  Function "rgb_ycc_start"
Noelle:  Disable "rgb_ycc_start" as cold function
Noelle:  Function "jpeg_start_compress"
Noelle:  Disable "jpeg_start_compress" as cold function
Noelle:  Function "jinit_compress_master"
Noelle:  Disable "jinit_compress_master" as cold function
Noelle:  Function "jinit_c_master_control"
Noelle:  Disable "jinit_c_master_control" as cold function
Noelle:  Function "parse_switches"
Noelle:  Disable "parse_switches" as cold function
Noelle:  Function "write_frame_header"
Noelle:  Disable "write_frame_header" as cold function
Noelle:  Function "jpeg_set_linear_quality"
Noelle:  Disable "jpeg_set_linear_quality" as cold function
Noelle:  Function "emit_dqt"
Noelle:  Disable "emit_dqt" as cold function
Noelle:  Function "keymatch"
Noelle:  Disable "keymatch" as cold function
Noelle:  Function "jpeg_set_defaults"
Noelle:  Disable "jpeg_set_defaults" as cold function
Noelle:  Function "prepare_for_pass"
Noelle:  Disable "prepare_for_pass" as cold function
Noelle:  Function "jpeg_set_quality"
Noelle:  Disable "jpeg_set_quality" as cold function
Noelle:  Function "alloc_small"
Noelle:  Disable "alloc_small" as cold function
Noelle:  Function "finish_pass_phuff"
Noelle:  Disable "finish_pass_phuff" as cold function
Noelle:  Function "alloc_sarray"
Noelle:  Disable "alloc_sarray" as cold function
Noelle:  Function "per_scan_setup"
Noelle:  Disable "per_scan_setup" as cold function
Noelle:  Function "start_pass_coef"
Noelle:  Disable "start_pass_coef" as cold function
Noelle:  Function "select_scan_parameters"
Noelle:  Disable "select_scan_parameters" as cold function
Noelle:  Function "finish_pass_master"
Noelle:  Disable "finish_pass_master" as cold function
Noelle:  Function "flush_bits"
Noelle:  Disable "flush_bits" as cold function
Noelle:  Function "start_pass_fdctmgr"
Noelle:  Disable "start_pass_fdctmgr" as cold function
Noelle:  Function "free_pool"
Noelle:  Disable "free_pool" as cold function
Noelle:  Function "emit_sof"
Noelle:  Disable "emit_sof" as cold function
Noelle:  Function "start_input_ppm"
Noelle:  Disable "start_input_ppm" as cold function
Noelle:  Function "self_destruct"
Noelle:  Disable "self_destruct" as cold function
Noelle:  Function "write_file_header"
Noelle:  Disable "write_file_header" as cold function
Noelle:  Function "alloc_large"
Noelle:  Disable "alloc_large" as cold function
Noelle:  Function "request_virt_barray"
Noelle:  Disable "request_virt_barray" as cold function
Noelle:  Function "read_pbm_integer"
Noelle:  Disable "read_pbm_integer" as cold function
Noelle:  Function "jinit_c_coef_controller"
Noelle:  Disable "jinit_c_coef_controller" as cold function
Noelle:  Function "jinit_downsampler"
Noelle:  Disable "jinit_downsampler" as cold function
Noelle:  Function "jpeg_simple_progression"
Noelle:  Disable "jpeg_simple_progression" as cold function
Noelle:  Function "jinit_c_prep_controller"
Noelle:  Disable "jinit_c_prep_controller" as cold function
Noelle:  Function "jpeg_default_colorspace"
Noelle:  Disable "jpeg_default_colorspace" as cold function
Noelle:  Function "jpeg_CreateCompress"
Noelle:  Disable "jpeg_CreateCompress" as cold function
Noelle:  Function "jinit_c_main_controller"
Noelle:  Disable "jinit_c_main_controller" as cold function
Noelle:  Function "jpeg_suppress_tables"
Noelle:  Disable "jpeg_suppress_tables" as cold function
Noelle:  Function "jdiv_round_up"
Noelle:  Disable "jdiv_round_up" as cold function
Noelle:  Function "jinit_memory_mgr"
Noelle:  Disable "jinit_memory_mgr" as cold function
Noelle:  Function "jinit_color_converter"
Noelle:  Disable "jinit_color_converter" as cold function
Noelle:  Function "jpeg_alloc_huff_table"
Noelle:  Disable "jpeg_alloc_huff_table" as cold function
Noelle:  Function "jround_up"
Noelle:  Disable "jround_up" as cold function
Noelle:  Function "jinit_forward_dct"
Noelle:  Disable "jinit_forward_dct" as cold function
Noelle:  Function "write_file_trailer"
Noelle:  Disable "write_file_trailer" as cold function
Noelle:  Function "jpeg_std_error"
Noelle:  Disable "jpeg_std_error" as cold function
Noelle:  Function "term_destination"
Noelle:  Disable "term_destination" as cold function
Noelle:  Function "jpeg_stdio_dest"
Noelle:  Disable "jpeg_stdio_dest" as cold function
Noelle:  Function "start_pass_main"
Noelle:  Disable "start_pass_main" as cold function
Noelle:  Function "jinit_marker_writer"
Noelle:  Disable "jinit_marker_writer" as cold function
Noelle:  Function "start_pass_prep"
Noelle:  Disable "start_pass_prep" as cold function
Noelle:  Function "jpeg_alloc_quant_table"
Noelle:  Disable "jpeg_alloc_quant_table" as cold function
Noelle:  Function "jpeg_free_large"
Noelle:  Disable "jpeg_free_large" as cold function
Noelle:  Function "jpeg_get_large"
Noelle:  Disable "jpeg_get_large" as cold function
Noelle:  Function "jinit_phuff_encoder"
Noelle:  Disable "jinit_phuff_encoder" as cold function
Noelle:  Function "jpeg_destroy_compress"
Noelle:  Disable "jpeg_destroy_compress" as cold function
Noelle:  Function "init_destination"
Noelle:  Disable "init_destination" as cold function
Noelle:  Function "jpeg_free_small"
Noelle:  Disable "jpeg_free_small" as cold function
Noelle:  Function "jpeg_get_small"
Noelle:  Disable "jpeg_get_small" as cold function
Noelle:  Function "jpeg_destroy"
Noelle:  Disable "jpeg_destroy" as cold function
Noelle:  Function "jinit_read_ppm"
Noelle:  Disable "jinit_read_ppm" as cold function
Noelle:  Function "jpeg_abort"
Noelle:  Disable "jpeg_abort" as cold function
Noelle:  Function "emit_message"
Noelle:  Disable "emit_message" as cold function
Noelle:  Function "reset_error_mgr"
Noelle:  Disable "reset_error_mgr" as cold function
Noelle:  Function "finish_input_ppm"
Noelle:  Disable "finish_input_ppm" as cold function
Noelle:  Function "jpeg_mem_available"
Noelle:  Disable "jpeg_mem_available" as cold function
Noelle:  Function "start_pass_downsample"
Noelle:  Disable "start_pass_downsample" as cold function
Noelle:  Function "jzero_far"
Noelle:  Disable "jzero_far" as cold function
Noelle:  Function "error_exit"
Noelle:  Disable "error_exit" as cold function
Noelle:  Function "output_message"
Noelle:  Disable "output_message" as cold function
Noelle:  Function "jpeg_quality_scaling"
Noelle:  Disable "jpeg_quality_scaling" as cold function
Noelle:  Function "format_message"
Noelle:  Disable "format_message" as cold function
Noelle:  Function "jpeg_add_quant_table"
Noelle:  Disable "jpeg_add_quant_table" as cold function
Noelle:  Function "jpeg_write_raw_data"
Noelle:  Disable "jpeg_write_raw_data" as cold function
Noelle:  Function "access_virt_sarray"
Noelle:  Disable "access_virt_sarray" as cold function
Noelle:  Function "jpeg_write_scanlines"
Noelle:  Disable "jpeg_write_scanlines" as cold function
Noelle:  Function "forward_DCT_float"
Noelle:  Disable "forward_DCT_float" as cold function
Noelle:  Function "jpeg_mem_term"
Noelle:  Disable "jpeg_mem_term" as cold function
Noelle:  Function "jpeg_mem_init"
Noelle:  Disable "jpeg_mem_init" as cold function
Noelle:  Function "jpeg_open_backing_store"
Noelle:  Disable "jpeg_open_backing_store" as cold function
Noelle:  Function "pre_process_context"
Noelle:  Disable "pre_process_context" as cold function
Noelle:  Function "null_convert"
Noelle:  Disable "null_convert" as cold function
Noelle:  Function "alloc_barray"
Noelle:  Disable "alloc_barray" as cold function
Noelle:  Function "jcopy_block_row"
Noelle:  Disable "jcopy_block_row" as cold function
Noelle:  Function "jpeg_fdct_ifast"
Noelle:  Disable "jpeg_fdct_ifast" as cold function
Noelle:  Function "jpeg_fdct_float"
Noelle:  Disable "jpeg_fdct_float" as cold function
Noelle:  Function "pass_startup"
Noelle:  Disable "pass_startup" as cold function
Noelle:  Function "request_virt_sarray"
Noelle:  Disable "request_virt_sarray" as cold function
Noelle:  Function "jpeg_set_colorspace"
Noelle:  Disable "jpeg_set_colorspace" as cold function
Noelle:  Function "get_text_rgb_row"
Noelle:  Disable "get_text_rgb_row" as cold function
Noelle:  Function "get_word_gray_row"
Noelle:  Disable "get_word_gray_row" as cold function
Noelle:  Function "load_interlaced_image"
Noelle:  Disable "load_interlaced_image" as cold function
Noelle:  Function "get_scaled_gray_row"
Noelle:  Disable "get_scaled_gray_row" as cold function
Noelle:  Function "get_word_rgb_row"
Noelle:  Disable "get_word_rgb_row" as cold function
Noelle:  Function "get_scaled_rgb_row"
Noelle:  Disable "get_scaled_rgb_row" as cold function
Noelle:  Function "get_text_gray_row"
Noelle:  Disable "get_text_gray_row" as cold function
Noelle:  Function "jinit_read_gif"
Noelle:  Disable "jinit_read_gif" as cold function
Noelle:  Function "cmyk_ycck_convert"
Noelle:  Disable "cmyk_ycck_convert" as cold function
Noelle:  Function "fullsize_smooth_downsample"
Noelle:  Disable "fullsize_smooth_downsample" as cold function
Noelle:  Function "h2v1_downsample"
Noelle:  Disable "h2v1_downsample" as cold function
Noelle:  Function "h2v2_smooth_downsample"
Noelle:  Disable "h2v2_smooth_downsample" as cold function
Noelle:  Function "int_downsample"
Noelle:  Disable "int_downsample" as cold function
Noelle:  Function "jinit_huff_encoder"
Noelle:  Disable "jinit_huff_encoder" as cold function
Noelle:  Function "start_pass_huff"
Noelle:  Disable "start_pass_huff" as cold function
Noelle:  Function "jinit_read_targa"
Noelle:  Disable "jinit_read_targa" as cold function
Noelle:  Function "usage"
Noelle:  Disable "usage" as cold function
Noelle:  Function "start_input_gif"
Noelle:  Disable "start_input_gif" as cold function
Noelle:  Function "finish_input_gif"
Noelle:  Disable "finish_input_gif" as cold function
Noelle:  Function "get_pixel_rows"
Noelle:  Disable "get_pixel_rows" as cold function
Noelle:  Function "LZWReadByte"
Noelle:  Disable "LZWReadByte" as cold function
Noelle:  Function "GetCode"
Noelle:  Disable "GetCode" as cold function
Noelle:  Function "get_interlaced_row"
Noelle:  Disable "get_interlaced_row" as cold function
Noelle:  Function "encode_mcu_gather"
Noelle:  Disable "encode_mcu_gather" as cold function
Noelle:  Function "start_input_tga"
Noelle:  Disable "start_input_tga" as cold function
Noelle:  Function "finish_pass_gather"
Noelle:  Disable "finish_pass_gather" as cold function
Noelle:  Function "finish_pass_huff"
Noelle:  Disable "finish_pass_huff" as cold function
Noelle:  Function "emit_restart"
Noelle:  Disable "emit_restart" as cold function
Noelle:  Function "read_stdin"
Noelle:  Disable "read_stdin" as cold function
Noelle:  Function "read_text_integer"
Noelle:  Disable "read_text_integer" as cold function
Noelle:  Function "text_getc"
Noelle:  Disable "text_getc" as cold function
Noelle:  Function "read_scan_script"
Noelle:  Disable "read_scan_script" as cold function
Noelle:  Function "read_scan_integer"
Noelle:  Disable "read_scan_integer" as cold function
Noelle:  Function "set_quant_slots"
Noelle:  Disable "set_quant_slots" as cold function
Noelle:  Function "set_sample_factors"
Noelle:  Disable "set_sample_factors" as cold function
Noelle:  Function "read_quant_tables"
Noelle:  Disable "read_quant_tables" as cold function
Noelle:  Function "compress_data"
Noelle:  Disable "compress_data" as cold function
Noelle:  Function "null_method"
Noelle:  Disable "null_method" as cold function
Noelle:  Function "grayscale_convert"
Noelle:  Disable "grayscale_convert" as cold function
Noelle:  Function "rgb_gray_convert"
Noelle:  Disable "rgb_gray_convert" as cold function
Noelle:  Function "write_stdout"
Noelle:  Disable "write_stdout" as cold function
Noelle:  Function "jpeg_abort_compress"
Noelle:  Disable "jpeg_abort_compress" as cold function
Noelle:  Function "jpeg_write_marker"
Noelle:  Disable "jpeg_write_marker" as cold function
Noelle:  Function "get_memory_row"
Noelle:  Disable "get_memory_row" as cold function
Noelle:  Function "encode_mcu_huff"
Noelle:  Disable "encode_mcu_huff" as cold function
Noelle:  Function "finish_input_tga"
Noelle:  Disable "finish_input_tga" as cold function
Noelle:  Function "read_rle_pixel"
Noelle:  Disable "read_rle_pixel" as cold function
Noelle:  Function "read_non_rle_pixel"
Noelle:  Disable "read_non_rle_pixel" as cold function
Noelle:  Function "get_8bit_row"
Noelle:  Disable "get_8bit_row" as cold function
Noelle:  Function "get_16bit_row"
Noelle:  Disable "get_16bit_row" as cold function
Noelle:  Function "get_24bit_row"
Noelle:  Disable "get_24bit_row" as cold function
Noelle:  Function "get_8bit_gray_row"
Noelle:  Disable "get_8bit_gray_row" as cold function
Noelle:  Function "preload_image"
Noelle:  Disable "preload_image" as cold function
Noelle:  Function "jpeg_write_tables"
Noelle:  Disable "jpeg_write_tables" as cold function
Noelle:  Function "jinit_read_bmp"
Noelle:  Disable "jinit_read_bmp" as cold function
Noelle:  Function "start_input_bmp"
Noelle:  Disable "start_input_bmp" as cold function
Noelle:  Function "finish_input_bmp"
Noelle:  Disable "finish_input_bmp" as cold function
Noelle:  Function "preload_image.9"
Noelle:  Disable "preload_image.9" as cold function
Noelle:  Function "write_any_marker"
Noelle:  Disable "write_any_marker" as cold function
Noelle:  Function "write_tables_only"
Noelle:  Disable "write_tables_only" as cold function
Noelle:  Function "get_8bit_row.10"
Noelle:  Disable "get_8bit_row.10" as cold function
Noelle:  Function "get_24bit_row.11"
Noelle:  Disable "get_24bit_row.11" as cold function
Planner:    There are 22 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:    Loop 281 has 4.708697e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 219 has 9.998582e-01 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 307 has 8.929887e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 168 has 1.421053e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 170 has 6.602327e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 176 has 2.581633e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 177 has 1.126923e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 321 has 7.943750e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 292 has 1.322000e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 293 has 1.421111e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 300 has 1.484632e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 284 has 1.058351e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 287 has 9.408357e+00 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 197 has 9.998581e-01 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 322 has 8.101250e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 315 has 4.470001e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 316 has 1.372183e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:  There are 5 loop nesting trees in the program
Planner:    ID: 198 (1)
Planner:      Function: "rgb_ycc_convert"
Planner:      Loop: "  %39 = load i8, i8* %38, align 1, !tbaa !92, !noelle.pdg.inst.id !93"
Planner:      Loop nesting level: 2
Planner:      Hotness = 3.935433e+00 %
Planner:      Average instructions per invocation = 7.014202e+05 %
Planner:      Average iterations per invocation = 1.031502e+04 %
Planner:    
Planner:    ID: 220 (1)
Planner:      Function: "h2v2_downsample"
Planner:      Loop: "  %86 = load i8, i8* %84, align 1, !tbaa !347, !noelle.pdg.inst.id !114"
Planner:      Loop nesting level: 2
Planner:      Hotness = 6.949175e-01 %
Planner:      Average instructions per invocation = 1.238390e+05 %
Planner:      Average iterations per invocation = 2.580000e+03 %
Planner:    
Planner:    ID: 169 (1)
Planner:      Function: "compress_output"
Planner:      Loop: "  %56 = load i32, i32* %8, align 4, !tbaa !145, !noelle.pdg.inst.id !88"
Planner:      Loop nesting level: 2
Planner:      Hotness = 8.179893e-01 %
Planner:      Average instructions per invocation = 8.630949e+04 %
Planner:      Average iterations per invocation = 1.027221e+03 %
Planner:    
Planner:    ID: 0 (1)
Planner:      Function: "main"
Planner:      Loop: "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3536, !noelle.pdg.inst.id !166"
Planner:      Loop nesting level: 1
Planner:      Hotness = 7.179032e+01 %
Planner:      Average instructions per invocation = 9.019431e+10 %
Planner:      Average iterations per invocation = 2.147484e+09 %
Planner:    
Planner:    ID: 314 (1)
Planner:      Function: "forward_DCT"
Planner:      Loop: "  %28 = zext i32 %27 to i64, !noelle.pdg.inst.id !216"
Planner:      Loop nesting level: 1
Planner:      Hotness = 2.486168e+00 %
Planner:      Average instructions per invocation = 1.770701e+06 %
Planner:      Average iterations per invocation = 9.674994e+02 %
Planner:    
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 198
Planner: LoopSelector:      Function: "rgb_ycc_convert"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %39 = load i8, i8* %38, align 1, !tbaa !92, !noelle.pdg.inst.id !93"
Planner: LoopSelector:      Coverage: 3.935433e+00%
Planner: LoopSelector:      Whole-program savings = 3.935433e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 220 saves only 6.949175e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [4 x [64 x i16]**], align 16, !noelle.pdg.inst.id !131
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [4 x [64 x i16]**], align 16, !noelle.pdg.inst.id !131
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 169 saves only 6.655339e-02 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.jpeg_error_mgr, align 8, !noelle.pdg.inst.id !3399
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3397 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.jpeg_compress_struct, align 8, !noelle.pdg.inst.id !3398
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.jpeg_error_mgr, align 8, !noelle.pdg.inst.id !3399
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3397 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.jpeg_compress_struct, align 8, !noelle.pdg.inst.id !3398
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 0
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3536, !noelle.pdg.inst.id !166"
Planner: LoopSelector:      Coverage: 7.179032e+01%
Planner: LoopSelector:      Whole-program savings = 2.051152e+01%
Planner: LoopSelector:      Loop savings = 2.857143e+01%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16, !noelle.pdg.inst.id !182
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16, !noelle.pdg.inst.id !182
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 314
Planner: LoopSelector:      Function: "forward_DCT"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %28 = zext i32 %27 to i64, !noelle.pdg.inst.id !216"
Planner: LoopSelector:      Coverage: 2.486168e+00%
Planner: LoopSelector:      Whole-program savings = 2.312289e+00%
Planner: LoopSelector:      Loop savings = 9.300616e+01%
Planner: LoopSelector: End
Planner:   Maximum time saved = 2.675924e+01% (33619177372)
Planner:   Maximum time saved with DOALL only = 3.935433e+00% (4944311303)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168" (7.179032e+01%)
Noelle:  Function "encode_mcu_AC_refine"
Noelle:     Loop "  %40 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %38, !noelle.pdg.inst.id !6491" (5.986135e+00%)
Noelle:     Loop "  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %69, !noelle.pdg.inst.id !6531" (6.434918e+00%)
Noelle:     Loop "  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %6), !noelle.pdg.inst.id !6548" (9.731326e-03%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %129 = lshr i64 %127, 16, !noelle.pdg.inst.id !6601" (3.310658e-04%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %199 = icmp eq i32 %196, 0, !noelle.pdg.inst.id !6678" (3.328221e-03%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %212 = lshr i64 %210, 16, !noelle.pdg.inst.id !6697" (2.726549e-04%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %340 = lshr i64 %338, 16, !noelle.pdg.inst.id !6830" (1.702085e-02%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %416 = lshr i64 %414, 16, !noelle.pdg.inst.id !6909" (5.348385e-03%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %487 = icmp eq i32 %484, 0, !noelle.pdg.inst.id !6979" (2.083875e-01%)
Noelle:     Loop "  %500 = lshr i64 %498, 16, !noelle.pdg.inst.id !6998" (1.714804e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:  Function "encode_mcu_AC_first"
Noelle:     Loop "  %42 = getelementptr inbounds [80 x i32], [80 x i32]* @jpeg_natural_order, i64 0, i64 %40, !noelle.pdg.inst.id !2769" (4.792309e+00%)
Noelle:     Loop "  %74 = load i32, i32* %33, align 8, !tbaa !2814, !noelle.pdg.inst.id !280" (8.888417e-04%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %118 = lshr i64 %116, 16, !noelle.pdg.inst.id !2866" (2.747108e-04%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %180 = ashr i32 %179, 1, !noelle.pdg.inst.id !2935" (2.103081e-01%)
Noelle:     Loop "  %233 = lshr i64 %231, 16, !noelle.pdg.inst.id !2988" (9.506832e-02%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %306 = lshr i64 %304, 16, !noelle.pdg.inst.id !3068" (4.571888e-02%)
Noelle:  Disable loop "16" as cold code
Noelle:  Function "rgb_ycc_convert"
Noelle:     Loop "  %26 = load i8**, i8*** %2, align 8, !tbaa !78, !noelle.pdg.inst.id !79" (3.935545e+00%)
Noelle:     Loop "  %39 = load i8, i8* %38, align 1, !tbaa !94, !noelle.pdg.inst.id !95" (3.935433e+00%)
Noelle:  Function "forward_DCT"
Noelle:     Loop "  %28 = zext i32 %27 to i64, !noelle.pdg.inst.id !218" (2.486168e+00%)
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %21, i64 %29, !noelle.pdg.inst.id !224" (6.072169e-01%)
Noelle:     Loop "  %77 = getelementptr inbounds i32, i32* %18, i64 %76, !noelle.pdg.inst.id !268" (1.864010e+00%)
Noelle:  Function "jpeg_fdct_islow"
Noelle:     Loop "  %4 = load i32, i32* %3, align 4, !tbaa !36, !noelle.pdg.inst.id !40" (1.079100e+00%)
Noelle:     Loop "  %95 = load i32, i32* %94, align 4, !tbaa !36, !noelle.pdg.inst.id !144" (1.100496e+00%)
Noelle:  Function "compress_output"
Noelle:     Loop "  %16 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %15, !noelle.pdg.inst.id !157" (2.039395e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %54 = icmp ult i32 %52, %51, !noelle.pdg.inst.id !206" (8.181533e-01%)
Noelle:     Loop "  %56 = load i32, i32* %8, align 4, !tbaa !147, !noelle.pdg.inst.id !90" (8.179893e-01%)
Noelle:     Loop "  %62 = getelementptr inbounds %struct.jpeg_compress_struct.363, %struct.jpeg_compress_struct.363* %0, i64 0, i32 42, i64 %60, !noelle.pdg.inst.id !222" (6.427619e-01%)
Noelle:     Loop "  %131 = add nsw i64 %129, %53, !noelle.pdg.inst.id !322" (8.118708e-08%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  %137 = add i64 %136, %135, !noelle.pdg.inst.id !329" (5.492067e-08%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  %160 = getelementptr inbounds [64 x i16], [64 x i16]* %158, i64 1, !noelle.pdg.inst.id !356" (2.626641e-08%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  %103 = add nsw i64 %101, %53, !noelle.pdg.inst.id !286" (5.492067e-08%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %109 = add i64 %108, %107, !noelle.pdg.inst.id !293" (5.492067e-08%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %85 = sext i32 %84 to i64, !noelle.pdg.inst.id !252" (2.864014e-01%)
Noelle:     Loop "  %93 = getelementptr inbounds [64 x i16], [64 x i16]* %91, i64 1, !noelle.pdg.inst.id !261" (1.326729e-01%)
Noelle:  Function "emit_eobrun"
Noelle:     Loop "  %7 = ashr i32 %5, 1, !noelle.pdg.inst.id !1443" (3.276667e-02%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %68 = lshr i64 %66, 16, !noelle.pdg.inst.id !1520" (1.749602e-02%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %154 = lshr i64 %152, 16, !noelle.pdg.inst.id !1616" (1.792058e-03%)
Noelle:  Disable loop "37" as cold code
Noelle:     Loop "  %231 = icmp eq i32 %228, 0, !noelle.pdg.inst.id !1693" (5.123379e-01%)
Noelle:     Loop "  %246 = lshr i64 %244, 16, !noelle.pdg.inst.id !1712" (4.479996e-02%)
Noelle:  Disable loop "39" as cold code
Noelle:  Function "h2v2_downsample"
Noelle:     Loop "  %31 = getelementptr inbounds i8*, i8** %2, i64 %29, !noelle.pdg.inst.id !345" (0.000000e+00%)
Noelle:  Disable loop "40" as cold code
Noelle:     Loop "  %61 = getelementptr inbounds i8*, i8** %2, i64 %59, !noelle.pdg.inst.id !378" (1.402865e-04%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %75 = or i64 %74, 1, !noelle.pdg.inst.id !402" (6.950073e-01%)
Noelle:     Loop "  %86 = load i8, i8* %84, align 1, !tbaa !349, !noelle.pdg.inst.id !116" (6.949175e-01%)
Noelle:  Function "encode_mcu_DC_first"
Noelle:     Loop "  %34 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %33, !noelle.pdg.inst.id !1568" (2.132140e-01%)
Noelle:     Loop "  %105 = lshr i64 %103, 16, !noelle.pdg.inst.id !1650" (9.250578e-03%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %183 = lshr i64 %181, 16, !noelle.pdg.inst.id !1736" (9.316102e-03%)
Noelle:  Disable loop "46" as cold code
Noelle:  Function "encode_mcu_DC_refine"
Noelle:  Disable "encode_mcu_DC_refine" as cold function
Noelle:  Function "compress_first_pass"
Noelle:  Disable "compress_first_pass" as cold function
Noelle:  Function "finish_pass_gather_phuff"
Noelle:  Disable "finish_pass_gather_phuff" as cold function
Noelle:  Function "jpeg_gen_optimal_table"
Noelle:  Disable "jpeg_gen_optimal_table" as cold function
Noelle:  Function "access_virt_barray"
Noelle:  Disable "access_virt_barray" as cold function
Noelle:  Function "pre_process_data"
Noelle:  Disable "pre_process_data" as cold function
Noelle:  Function "fullsize_downsample"
Noelle:  Disable "fullsize_downsample" as cold function
Noelle:  Function "sep_downsample"
Noelle:  Disable "sep_downsample" as cold function
Noelle:  Function "process_data_simple_main"
Noelle:  Disable "process_data_simple_main" as cold function
Noelle:  Function "jpeg_finish_compress"
Noelle:  Disable "jpeg_finish_compress" as cold function
Noelle:  Function "jcopy_sample_rows"
Noelle:  Disable "jcopy_sample_rows" as cold function
Noelle:  Function "get_raw_row"
Noelle:  Disable "get_raw_row" as cold function
Noelle:  Function "empty_output_buffer"
Noelle:  Disable "empty_output_buffer" as cold function
Noelle:  Function "start_pass_phuff"
Noelle:  Disable "start_pass_phuff" as cold function
Noelle:  Function "jpeg_make_c_derived_tbl"
Noelle:  Disable "jpeg_make_c_derived_tbl" as cold function
Noelle:  Function "write_scan_header"
Noelle:  Disable "write_scan_header" as cold function
Noelle:  Function "realize_virt_arrays"
Noelle:  Disable "realize_virt_arrays" as cold function
Noelle:  Function "emit_dht"
Noelle:  Disable "emit_dht" as cold function
Noelle:  Function "rgb_ycc_start"
Noelle:  Disable "rgb_ycc_start" as cold function
Noelle:  Function "jpeg_start_compress"
Noelle:  Disable "jpeg_start_compress" as cold function
Noelle:  Function "jinit_compress_master"
Noelle:  Disable "jinit_compress_master" as cold function
Noelle:  Function "jinit_c_master_control"
Noelle:  Disable "jinit_c_master_control" as cold function
Noelle:  Function "parse_switches"
Noelle:  Disable "parse_switches" as cold function
Noelle:  Function "write_frame_header"
Noelle:  Disable "write_frame_header" as cold function
Noelle:  Function "jpeg_set_linear_quality"
Noelle:  Disable "jpeg_set_linear_quality" as cold function
Noelle:  Function "emit_dqt"
Noelle:  Disable "emit_dqt" as cold function
Noelle:  Function "keymatch"
Noelle:  Disable "keymatch" as cold function
Noelle:  Function "jpeg_set_defaults"
Noelle:  Disable "jpeg_set_defaults" as cold function
Noelle:  Function "prepare_for_pass"
Noelle:  Disable "prepare_for_pass" as cold function
Noelle:  Function "jpeg_set_quality"
Noelle:  Disable "jpeg_set_quality" as cold function
Noelle:  Function "alloc_small"
Noelle:  Disable "alloc_small" as cold function
Noelle:  Function "finish_pass_phuff"
Noelle:  Disable "finish_pass_phuff" as cold function
Noelle:  Function "alloc_sarray"
Noelle:  Disable "alloc_sarray" as cold function
Noelle:  Function "per_scan_setup"
Noelle:  Disable "per_scan_setup" as cold function
Noelle:  Function "start_pass_coef"
Noelle:  Disable "start_pass_coef" as cold function
Noelle:  Function "select_scan_parameters"
Noelle:  Disable "select_scan_parameters" as cold function
Noelle:  Function "finish_pass_master"
Noelle:  Disable "finish_pass_master" as cold function
Noelle:  Function "flush_bits"
Noelle:  Disable "flush_bits" as cold function
Noelle:  Function "start_pass_fdctmgr"
Noelle:  Disable "start_pass_fdctmgr" as cold function
Noelle:  Function "free_pool"
Noelle:  Disable "free_pool" as cold function
Noelle:  Function "emit_sof"
Noelle:  Disable "emit_sof" as cold function
Noelle:  Function "start_input_ppm"
Noelle:  Disable "start_input_ppm" as cold function
Noelle:  Function "self_destruct"
Noelle:  Disable "self_destruct" as cold function
Noelle:  Function "write_file_header"
Noelle:  Disable "write_file_header" as cold function
Noelle:  Function "alloc_large"
Noelle:  Disable "alloc_large" as cold function
Noelle:  Function "request_virt_barray"
Noelle:  Disable "request_virt_barray" as cold function
Noelle:  Function "read_pbm_integer"
Noelle:  Disable "read_pbm_integer" as cold function
Noelle:  Function "jinit_c_coef_controller"
Noelle:  Disable "jinit_c_coef_controller" as cold function
Noelle:  Function "jinit_downsampler"
Noelle:  Disable "jinit_downsampler" as cold function
Noelle:  Function "jpeg_simple_progression"
Noelle:  Disable "jpeg_simple_progression" as cold function
Noelle:  Function "jinit_c_prep_controller"
Noelle:  Disable "jinit_c_prep_controller" as cold function
Noelle:  Function "jpeg_default_colorspace"
Noelle:  Disable "jpeg_default_colorspace" as cold function
Noelle:  Function "jpeg_CreateCompress"
Noelle:  Disable "jpeg_CreateCompress" as cold function
Noelle:  Function "jinit_c_main_controller"
Noelle:  Disable "jinit_c_main_controller" as cold function
Noelle:  Function "jpeg_suppress_tables"
Noelle:  Disable "jpeg_suppress_tables" as cold function
Noelle:  Function "jdiv_round_up"
Noelle:  Disable "jdiv_round_up" as cold function
Noelle:  Function "jinit_memory_mgr"
Noelle:  Disable "jinit_memory_mgr" as cold function
Noelle:  Function "jinit_color_converter"
Noelle:  Disable "jinit_color_converter" as cold function
Noelle:  Function "jpeg_alloc_huff_table"
Noelle:  Disable "jpeg_alloc_huff_table" as cold function
Noelle:  Function "jround_up"
Noelle:  Disable "jround_up" as cold function
Noelle:  Function "jinit_forward_dct"
Noelle:  Disable "jinit_forward_dct" as cold function
Noelle:  Function "write_file_trailer"
Noelle:  Disable "write_file_trailer" as cold function
Noelle:  Function "jpeg_stdio_dest"
Noelle:  Disable "jpeg_stdio_dest" as cold function
Noelle:  Function "jpeg_std_error"
Noelle:  Disable "jpeg_std_error" as cold function
Noelle:  Function "term_destination"
Noelle:  Disable "term_destination" as cold function
Noelle:  Function "start_pass_main"
Noelle:  Disable "start_pass_main" as cold function
Noelle:  Function "jinit_marker_writer"
Noelle:  Disable "jinit_marker_writer" as cold function
Noelle:  Function "jpeg_alloc_quant_table"
Noelle:  Disable "jpeg_alloc_quant_table" as cold function
Noelle:  Function "start_pass_prep"
Noelle:  Disable "start_pass_prep" as cold function
Noelle:  Function "jpeg_get_large"
Noelle:  Disable "jpeg_get_large" as cold function
Noelle:  Function "jpeg_free_large"
Noelle:  Disable "jpeg_free_large" as cold function
Noelle:  Function "jinit_phuff_encoder"
Noelle:  Disable "jinit_phuff_encoder" as cold function
Noelle:  Function "jpeg_destroy_compress"
Noelle:  Disable "jpeg_destroy_compress" as cold function
Noelle:  Function "init_destination"
Noelle:  Disable "init_destination" as cold function
Noelle:  Function "jpeg_get_small"
Noelle:  Disable "jpeg_get_small" as cold function
Noelle:  Function "jpeg_free_small"
Noelle:  Disable "jpeg_free_small" as cold function
Noelle:  Function "jpeg_destroy"
Noelle:  Disable "jpeg_destroy" as cold function
Noelle:  Function "jinit_read_ppm"
Noelle:  Disable "jinit_read_ppm" as cold function
Noelle:  Function "jpeg_abort"
Noelle:  Disable "jpeg_abort" as cold function
Noelle:  Function "emit_message"
Noelle:  Disable "emit_message" as cold function
Noelle:  Function "reset_error_mgr"
Noelle:  Disable "reset_error_mgr" as cold function
Noelle:  Function "start_pass_downsample"
Noelle:  Disable "start_pass_downsample" as cold function
Noelle:  Function "finish_input_ppm"
Noelle:  Disable "finish_input_ppm" as cold function
Noelle:  Function "jpeg_mem_available"
Noelle:  Disable "jpeg_mem_available" as cold function
Noelle:  Function "get_text_gray_row"
Noelle:  Disable "get_text_gray_row" as cold function
Noelle:  Function "get_scaled_rgb_row"
Noelle:  Disable "get_scaled_rgb_row" as cold function
Noelle:  Function "get_word_rgb_row"
Noelle:  Disable "get_word_rgb_row" as cold function
Noelle:  Function "get_scaled_gray_row"
Noelle:  Disable "get_scaled_gray_row" as cold function
Noelle:  Function "get_word_gray_row"
Noelle:  Disable "get_word_gray_row" as cold function
Noelle:  Function "jinit_read_gif"
Noelle:  Disable "jinit_read_gif" as cold function
Noelle:  Function "emit_restart"
Noelle:  Disable "emit_restart" as cold function
Noelle:  Function "jinit_read_bmp"
Noelle:  Disable "jinit_read_bmp" as cold function
Noelle:  Function "finish_pass_huff"
Noelle:  Disable "finish_pass_huff" as cold function
Noelle:  Function "LZWReadByte"
Noelle:  Disable "LZWReadByte" as cold function
Noelle:  Function "start_pass_huff"
Noelle:  Disable "start_pass_huff" as cold function
Noelle:  Function "encode_mcu_gather"
Noelle:  Disable "encode_mcu_gather" as cold function
Noelle:  Function "encode_mcu_huff"
Noelle:  Disable "encode_mcu_huff" as cold function
Noelle:  Function "finish_pass_gather"
Noelle:  Disable "finish_pass_gather" as cold function
Noelle:  Function "get_text_rgb_row"
Noelle:  Disable "get_text_rgb_row" as cold function
Noelle:  Function "get_pixel_rows"
Noelle:  Disable "get_pixel_rows" as cold function
Noelle:  Function "load_interlaced_image"
Noelle:  Disable "load_interlaced_image" as cold function
Noelle:  Function "finish_input_gif"
Noelle:  Disable "finish_input_gif" as cold function
Noelle:  Function "output_message"
Noelle:  Disable "output_message" as cold function
Noelle:  Function "start_input_gif"
Noelle:  Disable "start_input_gif" as cold function
Noelle:  Function "h2v1_downsample"
Noelle:  Disable "h2v1_downsample" as cold function
Noelle:  Function "pass_startup"
Noelle:  Disable "pass_startup" as cold function
Noelle:  Function "cmyk_ycck_convert"
Noelle:  Disable "cmyk_ycck_convert" as cold function
Noelle:  Function "null_convert"
Noelle:  Disable "null_convert" as cold function
Noelle:  Function "rgb_gray_convert"
Noelle:  Disable "rgb_gray_convert" as cold function
Noelle:  Function "read_stdin"
Noelle:  Disable "read_stdin" as cold function
Noelle:  Function "grayscale_convert"
Noelle:  Disable "grayscale_convert" as cold function
Noelle:  Function "null_method"
Noelle:  Disable "null_method" as cold function
Noelle:  Function "int_downsample"
Noelle:  Disable "int_downsample" as cold function
Noelle:  Function "write_stdout"
Noelle:  Disable "write_stdout" as cold function
Noelle:  Function "h2v2_smooth_downsample"
Noelle:  Disable "h2v2_smooth_downsample" as cold function
Noelle:  Function "jinit_read_targa"
Noelle:  Disable "jinit_read_targa" as cold function
Noelle:  Function "fullsize_smooth_downsample"
Noelle:  Disable "fullsize_smooth_downsample" as cold function
Noelle:  Function "jpeg_mem_term"
Noelle:  Disable "jpeg_mem_term" as cold function
Noelle:  Function "jpeg_mem_init"
Noelle:  Disable "jpeg_mem_init" as cold function
Noelle:  Function "jcopy_block_row"
Noelle:  Disable "jcopy_block_row" as cold function
Noelle:  Function "jpeg_write_raw_data"
Noelle:  Disable "jpeg_write_raw_data" as cold function
Noelle:  Function "jpeg_write_scanlines"
Noelle:  Disable "jpeg_write_scanlines" as cold function
Noelle:  Function "jpeg_write_tables"
Noelle:  Disable "jpeg_write_tables" as cold function
Noelle:  Function "jpeg_write_marker"
Noelle:  Disable "jpeg_write_marker" as cold function
Noelle:  Function "jpeg_abort_compress"
Noelle:  Disable "jpeg_abort_compress" as cold function
Noelle:  Function "format_message"
Noelle:  Disable "format_message" as cold function
Noelle:  Function "start_input_bmp"
Noelle:  Disable "start_input_bmp" as cold function
Noelle:  Function "error_exit"
Noelle:  Disable "error_exit" as cold function
Noelle:  Function "jpeg_open_backing_store"
Noelle:  Disable "jpeg_open_backing_store" as cold function
Noelle:  Function "jpeg_fdct_float"
Noelle:  Disable "jpeg_fdct_float" as cold function
Noelle:  Function "forward_DCT_float"
Noelle:  Disable "forward_DCT_float" as cold function
Noelle:  Function "jpeg_fdct_ifast"
Noelle:  Disable "jpeg_fdct_ifast" as cold function
Noelle:  Function "get_16bit_row"
Noelle:  Disable "get_16bit_row" as cold function
Noelle:  Function "get_24bit_row"
Noelle:  Disable "get_24bit_row" as cold function
Noelle:  Function "get_8bit_gray_row"
Noelle:  Disable "get_8bit_gray_row" as cold function
Noelle:  Function "preload_image"
Noelle:  Disable "preload_image" as cold function
Noelle:  Function "get_memory_row"
Noelle:  Disable "get_memory_row" as cold function
Noelle:  Function "jpeg_set_colorspace"
Noelle:  Disable "jpeg_set_colorspace" as cold function
Noelle:  Function "jpeg_quality_scaling"
Noelle:  Disable "jpeg_quality_scaling" as cold function
Noelle:  Function "read_quant_tables"
Noelle:  Disable "read_quant_tables" as cold function
Noelle:  Function "pre_process_context"
Noelle:  Disable "pre_process_context" as cold function
Noelle:  Function "set_quant_slots"
Noelle:  Disable "set_quant_slots" as cold function
Noelle:  Function "set_sample_factors"
Noelle:  Disable "set_sample_factors" as cold function
Noelle:  Function "read_scan_script"
Noelle:  Disable "read_scan_script" as cold function
Noelle:  Function "read_scan_integer"
Noelle:  Disable "read_scan_integer" as cold function
Noelle:  Function "access_virt_sarray"
Noelle:  Disable "access_virt_sarray" as cold function
Noelle:  Function "read_text_integer"
Noelle:  Disable "read_text_integer" as cold function
Noelle:  Function "request_virt_sarray"
Noelle:  Disable "request_virt_sarray" as cold function
Noelle:  Function "alloc_barray"
Noelle:  Disable "alloc_barray" as cold function
Noelle:  Function "text_getc"
Noelle:  Disable "text_getc" as cold function
Noelle:  Function "jpeg_add_quant_table"
Noelle:  Disable "jpeg_add_quant_table" as cold function
Noelle:  Function "GetCode"
Noelle:  Disable "GetCode" as cold function
Noelle:  Function "get_interlaced_row"
Noelle:  Disable "get_interlaced_row" as cold function
Noelle:  Function "finish_input_bmp"
Noelle:  Disable "finish_input_bmp" as cold function
Noelle:  Function "jzero_far"
Noelle:  Disable "jzero_far" as cold function
Noelle:  Function "preload_image.9"
Noelle:  Disable "preload_image.9" as cold function
Noelle:  Function "get_8bit_row.10"
Noelle:  Disable "get_8bit_row.10" as cold function
Noelle:  Function "compress_data"
Noelle:  Disable "compress_data" as cold function
Noelle:  Function "get_24bit_row.11"
Noelle:  Disable "get_24bit_row.11" as cold function
Noelle:  Function "start_input_tga"
Noelle:  Disable "start_input_tga" as cold function
Noelle:  Function "finish_input_tga"
Noelle:  Disable "finish_input_tga" as cold function
Noelle:  Function "read_rle_pixel"
Noelle:  Disable "read_rle_pixel" as cold function
Noelle:  Function "read_non_rle_pixel"
Noelle:  Disable "read_non_rle_pixel" as cold function
Noelle:  Function "get_8bit_row"
Noelle:  Disable "get_8bit_row" as cold function
Noelle:  Function "write_tables_only"
Noelle:  Disable "write_tables_only" as cold function
Noelle:  Function "write_any_marker"
Noelle:  Disable "write_any_marker" as cold function
Noelle:  Function "jinit_huff_encoder"
Noelle:  Disable "jinit_huff_encoder" as cold function
Noelle:  Function "usage"
Noelle:  Disable "usage" as cold function
Parallelizer:    There are 22 loops in the program we are going to consider
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.jpeg_error_mgr, align 8, !noelle.pdg.inst.id !3401
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3399
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3399 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.jpeg_compress_struct, align 8, !noelle.pdg.inst.id !3400
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.jpeg_error_mgr, align 8, !noelle.pdg.inst.id !3401
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3399
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !3399 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.jpeg_compress_struct, align 8, !noelle.pdg.inst.id !3400
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16, !noelle.pdg.inst.id !184
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16, !noelle.pdg.inst.id !184
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "rgb_ycc_convert"
Parallelizer: parallelizerLoop:   Loop 198 = "  %39 = load i8, i8* %38, align 1, !tbaa !94, !noelle.pdg.inst.id !95"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %10 = load i64*, i64** %9, align 8, !tbaa !50, !noelle.pdg.inst.id !53
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %18 = zext i32 %12 to i64, !noelle.pdg.inst.id !64
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %29 = load i8*, i8** %28, align 8, !tbaa !78, !noelle.pdg.inst.id !82
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %32 = load i8*, i8** %31, align 8, !tbaa !78, !noelle.pdg.inst.id !85
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %35 = load i8*, i8** %34, align 8, !tbaa !78, !noelle.pdg.inst.id !88
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %36 = load i8*, i8** %24, align 8, !tbaa !78, !noelle.pdg.inst.id !89
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 0 = "  %118 = load i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)*, i32 (%struct.jpeg_compress_struct*, %struct.cjpeg_source_struct*)** %108, align 8, !tbaa !3538, !noelle.pdg.inst.id !168"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %4 = alloca %struct.jpeg_compress_struct, align 8, !noelle.pdg.inst.id !3400
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 0, !noelle.pdg.inst.id !3421
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %96 = phi %struct.cjpeg_source_struct* [ %64, %63 ], [ null, %NewDefault ], [ %89, %88 ], [ %87, %86 ], [ %85, %84 ], [ %83, %82 ], !noelle.pdg.inst.id !3512
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %101 = bitcast %struct.jpeg_compress_struct* %4 to %struct.jpeg_compress_struct.183*, !noelle.pdg.inst.id !3519
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %102 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 36, !noelle.pdg.inst.id !3520
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %104 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 7, !noelle.pdg.inst.id !3522
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %108 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %96, i64 0, i32 1, !noelle.pdg.inst.id !3527
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %109 = getelementptr inbounds %struct.cjpeg_source_struct, %struct.cjpeg_source_struct* %96, i64 0, i32 4, !noelle.pdg.inst.id !3528
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %110 = bitcast i32* %3 to i8*, !noelle.pdg.inst.id !3529
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %111 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 4, !noelle.pdg.inst.id !3530
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %112 = bitcast %struct.jpeg_compress_struct* %4 to %struct.jpeg_common_struct*, !noelle.pdg.inst.id !3531
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %113 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %4, i64 0, i32 2, !noelle.pdg.inst.id !3532
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %115 = bitcast %struct.jpeg_comp_master** %114 to %struct.jpeg_comp_master.174**, !noelle.pdg.inst.id !3534
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %117 = bitcast %struct.jpeg_c_main_controller** %116 to %struct.jpeg_c_main_controller.175**, !noelle.pdg.inst.id !3536
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "forward_DCT"
Parallelizer: parallelizerLoop:   Loop 314 = "  %28 = zext i32 %27 to i64, !noelle.pdg.inst.id !218"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 = [64 x i16]* %3
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 = i32 %5
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %8 = alloca [64 x i32], align 16, !noelle.pdg.inst.id !184
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %13 = load void (i32*)*, void (i32*)** %12, align 8, !tbaa !196, !noelle.pdg.inst.id !48
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %18 = load i32*, i32** %17, align 8, !tbaa !204, !noelle.pdg.inst.id !52
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %21 = getelementptr inbounds i8*, i8** %2, i64 %20, !noelle.pdg.inst.id !208
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %24 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 0, !noelle.pdg.inst.id !213
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %25 = zext i32 %6 to i64, !noelle.pdg.inst.id !214
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc cjpeg.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/MiBench/benchmarks/cjpeg'
