make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PolyBench/benchmarks/ludcmp'
./runEnablers.sh ludcmp ludcmp.bc large "-lm -lstdc++ -lpthread -L/usr/lib64 -L/usr/lib" -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PolyBench/benchmarks/ludcmp /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PolyBench/benchmarks/ludcmp
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PolyBench/benchmarks/ludcmp
The IR has already been transformed for enabling parallelization
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "kernel_ludcmp"
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 2000, !noelle.pdg.inst.id !46" (9.971348e+01%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2001, !noelle.pdg.inst.id !54" (4.982250e+01%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, %indvars.iv40, !noelle.pdg.inst.id !63" (4.975407e+01%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 2001, !noelle.pdg.inst.id !83" (4.989091e+01%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv31, %indvars.iv26, !noelle.pdg.inst.id !91" (4.982870e+01%)
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, 2001, !noelle.pdg.inst.id !113" (7.472436e-02%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %exitcond19 = icmp eq i64 %indvars.iv17, %indvars.iv20, !noelle.pdg.inst.id !121" (7.465597e-02%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 2000, !noelle.pdg.inst.id !147" (7.476166e-02%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv12, 2001, !noelle.pdg.inst.id !156" (7.465597e-02%)
Noelle:  Disable loop "8" as cold code
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2001, !noelle.pdg.inst.id !39" (1.370289e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2001, !noelle.pdg.inst.id !63" (1.369107e-01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Disable "polybench_alloc_data" as cold function
Noelle:  Function "xmalloc"
Noelle:  Disable "xmalloc" as cold function
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Disable "polybench_prepare_instruments" as cold function
Noelle:  Function "polybench_timer_print"
Noelle:  Disable "polybench_timer_print" as cold function
Noelle:  Function "polybench_timer_stop"
Noelle:  Disable "polybench_timer_stop" as cold function
Noelle:  Function "polybench_timer_start"
Noelle:  Disable "polybench_timer_start" as cold function
Noelle:  Function "polybench_flush_cache"
Noelle:  Disable "polybench_flush_cache" as cold function
Noelle:  Function "print_array"
Noelle:  Disable "print_array" as cold function
Planner:    There are 7 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:  There are 2 loop nesting trees in the program
Planner:    ID: 0 (1)
Planner:      Function: "init_array"
Planner:      Loop: "  %exitcond5 = icmp eq i64 %indvars.iv3, 2001, !noelle.pdg.inst.id !39"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.370289e-01 %
Planner:      Average instructions per invocation = 4.408805e+07 %
Planner:      Average iterations per invocation = 2.001000e+03 %
Planner:    
Planner:      ID: 1 (2)
Planner:        Function: "init_array"
Planner:        Loop: "  %exitcond = icmp eq i64 %indvars.iv, 2001, !noelle.pdg.inst.id !63"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.369107e-01 %
Planner:        Average instructions per invocation = 2.201401e+04 %
Planner:        Average iterations per invocation = 2.002000e+03 %
Planner:      
Planner:    ID: 2 (1)
Planner:      Function: "kernel_ludcmp"
Planner:      Loop: "  %exitcond42 = icmp eq i64 %indvars.iv40, 2000, !noelle.pdg.inst.id !46"
Planner:      Loop nesting level: 1
Planner:      Hotness = 9.971348e+01 %
Planner:      Average instructions per invocation = 3.208208e+10 %
Planner:      Average iterations per invocation = 2.000000e+03 %
Planner:    
Planner:      ID: 3 (2)
Planner:        Function: "kernel_ludcmp"
Planner:        Loop: "  %exitcond30 = icmp eq i64 %indvars.iv28, 2001, !noelle.pdg.inst.id !54"
Planner:        Loop nesting level: 2
Planner:        Hotness = 4.982250e+01 %
Planner:        Average instructions per invocation = 8.015012e+06 %
Planner:        Average iterations per invocation = 1.001500e+03 %
Planner:      
Planner:        ID: 4 (3)
Planner:          Function: "kernel_ludcmp"
Planner:          Loop: "  %exitcond25 = icmp eq i64 %indvars.iv23, %indvars.iv40, !noelle.pdg.inst.id !63"
Planner:          Loop nesting level: 3
Planner:          Hotness = 4.975407e+01 %
Planner:          Average instructions per invocation = 8.000000e+03 %
Planner:          Average iterations per invocation = 6.673333e+02 %
Planner:        
Planner:      ID: 5 (2)
Planner:        Function: "kernel_ludcmp"
Planner:        Loop: "  %exitcond39 = icmp eq i64 %indvars.iv37, 2001, !noelle.pdg.inst.id !83"
Planner:        Loop nesting level: 2
Planner:        Hotness = 4.989091e+01 %
Planner:        Average instructions per invocation = 8.026018e+06 %
Planner:        Average iterations per invocation = 1.001500e+03 %
Planner:      
Planner:        ID: 6 (3)
Planner:          Function: "kernel_ludcmp"
Planner:          Loop: "  %exitcond36 = icmp eq i64 %indvars.iv31, %indvars.iv26, !noelle.pdg.inst.id !91"
Planner:          Loop nesting level: 3
Planner:          Hotness = 4.982870e+01 %
Planner:          Average instructions per invocation = 8.012000e+03 %
Planner:          Average iterations per invocation = 6.683333e+02 %
Planner:        
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 0 saves only 1.370289e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 1 saves only 1.369107e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 2
Planner: LoopSelector:      Function: "kernel_ludcmp"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %exitcond42 = icmp eq i64 %indvars.iv40, 2000, !noelle.pdg.inst.id !46"
Planner: LoopSelector:      Coverage: 9.971348e+01%
Planner: LoopSelector:      Whole-program savings = 9.971348e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 5
Planner: LoopSelector:      Function: "kernel_ludcmp"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %exitcond39 = icmp eq i64 %indvars.iv37, 2001, !noelle.pdg.inst.id !83"
Planner: LoopSelector:      Coverage: 4.989091e+01%
Planner: LoopSelector:      Whole-program savings = 4.989091e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 3
Planner: LoopSelector:      Function: "kernel_ludcmp"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %exitcond30 = icmp eq i64 %indvars.iv28, 2001, !noelle.pdg.inst.id !54"
Planner: LoopSelector:      Coverage: 4.982250e+01%
Planner: LoopSelector:      Whole-program savings = 4.982250e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 6
Planner: LoopSelector:      Function: "kernel_ludcmp"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %exitcond36 = icmp eq i64 %indvars.iv31, %indvars.iv26, !noelle.pdg.inst.id !91"
Planner: LoopSelector:      Coverage: 4.982870e+01%
Planner: LoopSelector:      Whole-program savings = 4.152185e+01%
Planner: LoopSelector:      Loop savings = 8.332917e+01%
Planner: LoopSelector:    Loop 4
Planner: LoopSelector:      Function: "kernel_ludcmp"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %exitcond25 = icmp eq i64 %indvars.iv23, %indvars.iv40, !noelle.pdg.inst.id !63"
Planner: LoopSelector:      Coverage: 4.975407e+01%
Planner: LoopSelector:      Whole-program savings = 4.145965e+01%
Planner: LoopSelector:      Loop savings = 8.332917e+01%
Planner: LoopSelector: End
Planner:   Maximum time saved = 9.971348e+01% (32082082101)
Planner:   Maximum time saved with DOALL only = 9.971348e+01% (32082082101)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "kernel_ludcmp"
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 2000, !noelle.pdg.inst.id !48" (9.971348e+01%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2001, !noelle.pdg.inst.id !57" (4.982250e+01%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, %indvars.iv40, !noelle.pdg.inst.id !66" (4.975407e+01%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 2001, !noelle.pdg.inst.id !86" (4.989091e+01%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv31, %indvars.iv26, !noelle.pdg.inst.id !95" (4.982870e+01%)
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, 2001, !noelle.pdg.inst.id !117" (7.472436e-02%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %exitcond19 = icmp eq i64 %indvars.iv17, %indvars.iv20, !noelle.pdg.inst.id !125" (7.465597e-02%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 2000, !noelle.pdg.inst.id !151" (7.476166e-02%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv12, 2001, !noelle.pdg.inst.id !160" (7.465597e-02%)
Noelle:  Disable loop "8" as cold code
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2001, !noelle.pdg.inst.id !41" (1.370289e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2001, !noelle.pdg.inst.id !65" (1.369107e-01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Disable "polybench_alloc_data" as cold function
Noelle:  Function "xmalloc"
Noelle:  Disable "xmalloc" as cold function
Noelle:  Function "polybench_flush_cache"
Noelle:  Disable "polybench_flush_cache" as cold function
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Disable "polybench_prepare_instruments" as cold function
Noelle:  Function "polybench_timer_start"
Noelle:  Disable "polybench_timer_start" as cold function
Noelle:  Function "polybench_timer_stop"
Noelle:  Disable "polybench_timer_stop" as cold function
Noelle:  Function "polybench_timer_print"
Noelle:  Disable "polybench_timer_print" as cold function
Noelle:  Function "print_array"
Noelle:  Disable "print_array" as cold function
Parallelizer:    There are 7 loops in the program we are going to consider
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "kernel_ludcmp"
Parallelizer: parallelizerLoop:   Loop 2 = "  %exitcond42 = icmp eq i64 %indvars.iv40, 2000, !noelle.pdg.inst.id !48"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 = [2001 x double]* %1
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: Start the parallelization
DOALL:   Number of threads to extract = 8
DOALL:   Chunk size = 8
DOALL:   Reduced variables:
DOALL:  Cloned loop
DOALL:  Adjusted data flow
DOALL:  Rewired induction variables and reducible variables
DOALL:  Stored live outs
DOALL:  Final parallelized loop:

define void @noelle_task_0(i8*, i64, i64, i64) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [8 x i64]*
  %5 = getelementptr inbounds [8 x i64], [8 x i64]* %noelle.environment_variable.pointer, i64 0, i64 0
  %6 = bitcast i64* %5 to [2001 x double]**
  %noelle_environment_variable_0 = load [2001 x double]*, [2001 x double]** %6
  %coreIdx_X_chunkSize = mul i64 %1, %3
  %7 = mul i64 1, %coreIdx_X_chunkSize
  %8 = add i64 1, %7
  %coreIdx_X_chunkSize1 = mul i64 %1, %3
  %9 = mul i64 1, %coreIdx_X_chunkSize1
  %10 = add i64 0, %9
  %numCoresMinus1 = sub i64 %2, 1
  %numCoresMinus1_X_chunkSize = mul i64 %numCoresMinus1, %3
  %11 = mul i64 1, %numCoresMinus1_X_chunkSize
  %numCoresMinus12 = sub i64 %2, 1
  %numCoresMinus1_X_chunkSize3 = mul i64 %numCoresMinus12, %3
  %12 = mul i64 1, %numCoresMinus1_X_chunkSize3
  br label %51

13:                                               ; preds = %14
  ret void

14:                                               ; preds = %51
  br label %13

15:                                               ; preds = %39
  %16 = add nuw nsw i64 %53, 1, !noelle.pdg.inst.id !30
  %17 = add i64 %54, 1
  %18 = icmp eq i64 %17, %3
  %chunkWrap = select i1 %18, i64 0, i64 %17
  %19 = add i64 %16, %11
  %nextStepOrNextChunk = select i1 %18, i64 %19, i64 %16
  %20 = add i64 %43, %12
  %nextStepOrNextChunk4 = select i1 %18, i64 %20, i64 %43
  br label %51, !noelle.pdg.inst.id !31

21:                                               ; preds = %32
  %22 = phi double [ %34, %32 ], !noelle.pdg.inst.id !32
  store double %22, double* %37, align 8, !tbaa !33, !noelle.pdg.inst.id !37
  %23 = add nuw nsw i64 %40, 1, !noelle.pdg.inst.id !38
  br label %39, !noelle.pdg.inst.id !39

24:                                               ; preds = %32
  %25 = getelementptr inbounds [2001 x double], [2001 x double]* %noelle_environment_variable_0, i64 %43, i64 %33, !noelle.pdg.inst.id !40
  %26 = load double, double* %25, align 8, !tbaa !33, !noelle.pdg.inst.id !41
  %27 = getelementptr inbounds [2001 x double], [2001 x double]* %noelle_environment_variable_0, i64 %33, i64 %40, !noelle.pdg.inst.id !42
  %28 = load double, double* %27, align 8, !tbaa !33, !noelle.pdg.inst.id !43
  %29 = fmul double %26, %28, !noelle.pdg.inst.id !44
  %30 = fsub double %34, %29, !noelle.pdg.inst.id !45
  %31 = add nuw nsw i64 %33, 1, !noelle.pdg.inst.id !46
  br label %32, !noelle.pdg.inst.id !47

32:                                               ; preds = %24, %36
  %33 = phi i64 [ %31, %24 ], [ 0, %36 ], !noelle.pdg.inst.id !48
  %34 = phi double [ %30, %24 ], [ %38, %36 ], !noelle.pdg.inst.id !49
  %35 = icmp eq i64 %33, %53, !noelle.pdg.inst.id !50
  br i1 %35, label %21, label %24, !prof !51, !noelle.loop.id !52, !noelle.pdg.inst.id !53, !noelle.parallelizer.looporder !54

36:                                               ; preds = %39
  %37 = getelementptr inbounds [2001 x double], [2001 x double]* %noelle_environment_variable_0, i64 %43, i64 %40, !noelle.pdg.inst.id !55
  %38 = load double, double* %37, align 8, !tbaa !33, !noelle.pdg.inst.id !56
  br label %32, !noelle.pdg.inst.id !57

39:                                               ; preds = %21, %42
  %40 = phi i64 [ %23, %21 ], [ %53, %42 ], !noelle.pdg.inst.id !58
  %41 = icmp eq i64 %40, 2001, !noelle.pdg.inst.id !59
  br i1 %41, label %15, label %36, !prof !60, !noelle.loop.id !61, !noelle.pdg.inst.id !62, !noelle.parallelizer.looporder !63

42:                                               ; preds = %56
  %43 = add nuw nsw i64 %52, 1, !noelle.pdg.inst.id !64
  br label %39, !noelle.pdg.inst.id !65

44:                                               ; preds = %62
  %45 = phi double [ %64, %62 ], !noelle.pdg.inst.id !66
  %46 = fdiv double %45, %50, !noelle.pdg.inst.id !67
  store double %46, double* %60, align 8, !tbaa !33, !noelle.pdg.inst.id !68
  %47 = add nuw nsw i64 %57, 1, !noelle.pdg.inst.id !69
  br label %56, !noelle.pdg.inst.id !70

48:                                               ; preds = %51
  %49 = getelementptr inbounds [2001 x double], [2001 x double]* %noelle_environment_variable_0, i64 %52, i64 %52, !noelle.pdg.inst.id !71
  %50 = load double, double* %49, align 8, !tbaa !33, !noelle.pdg.inst.id !72
  br label %56, !noelle.pdg.inst.id !73

51:                                               ; preds = %4, %15
  %52 = phi i64 [ %nextStepOrNextChunk4, %15 ], [ %10, %4 ], !noelle.pdg.inst.id !74
  %53 = phi i64 [ %nextStepOrNextChunk, %15 ], [ %8, %4 ], !noelle.pdg.inst.id !75
  %54 = phi i64 [ 0, %4 ], [ %chunkWrap, %15 ]
  %55 = icmp sge i64 %52, 2000, !noelle.pdg.inst.id !76
  br i1 %55, label %14, label %48, !prof !77, !noelle.loop.id !78, !noelle.pdg.inst.id !79, !noelle.parallelizer.looporder !80

56:                                               ; preds = %44, %48
  %57 = phi i64 [ %47, %44 ], [ %53, %48 ], !noelle.pdg.inst.id !81
  %58 = icmp eq i64 %57, 2001, !noelle.pdg.inst.id !82
  br i1 %58, label %42, label %59, !prof !60, !noelle.loop.id !54, !noelle.pdg.inst.id !83, !noelle.parallelizer.looporder !78

59:                                               ; preds = %56
  %60 = getelementptr inbounds [2001 x double], [2001 x double]* %noelle_environment_variable_0, i64 %57, i64 %52, !noelle.pdg.inst.id !84
  %61 = load double, double* %60, align 8, !tbaa !33, !noelle.pdg.inst.id !85
  br label %62, !noelle.pdg.inst.id !86

62:                                               ; preds = %59, %66
  %63 = phi i64 [ %73, %66 ], [ 0, %59 ], !noelle.pdg.inst.id !87
  %64 = phi double [ %72, %66 ], [ %61, %59 ], !noelle.pdg.inst.id !88
  %65 = icmp eq i64 %63, %52, !noelle.pdg.inst.id !89
  br i1 %65, label %44, label %66, !prof !90, !noelle.loop.id !91, !noelle.pdg.inst.id !92, !noelle.parallelizer.looporder !91

66:                                               ; preds = %62
  %67 = getelementptr inbounds [2001 x double], [2001 x double]* %noelle_environment_variable_0, i64 %57, i64 %63, !noelle.pdg.inst.id !93
  %68 = load double, double* %67, align 8, !tbaa !33, !noelle.pdg.inst.id !94
  %69 = getelementptr inbounds [2001 x double], [2001 x double]* %noelle_environment_variable_0, i64 %63, i64 %52, !noelle.pdg.inst.id !95
  %70 = load double, double* %69, align 8, !tbaa !33, !noelle.pdg.inst.id !96
  %71 = fmul double %68, %70, !noelle.pdg.inst.id !97
  %72 = fsub double %64, %71, !noelle.pdg.inst.id !98
  %73 = add nuw nsw i64 %63, 1, !noelle.pdg.inst.id !99
  br label %62, !noelle.pdg.inst.id !100
}

DOALL: Exit
Parallelizer: parallelizerLoop:   Link the parallelize loop
Parallelizer: parallelizerLoop:   The loop has been parallelized with DOALL
Parallelizer: parallelizerLoop: Exit
Parallelizer:    Keep track of basic blocks being modified by the parallelization
Parallelizer:    Loop 5 cannot be parallelized because one of its parent has been parallelized already
Parallelizer:    Loop 3 cannot be parallelized because one of its parent has been parallelized already
Parallelizer:    Loop 6 cannot be parallelized because one of its parent has been parallelized already
Parallelizer:    Loop 4 cannot be parallelized because one of its parent has been parallelized already
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc ludcmp.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PolyBench/benchmarks/ludcmp'
