make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PolyBench/benchmarks/fdtd-apml'
./runEnablers.sh fdtd-apml fdtd-apml.bc large "-lm -lstdc++ -lpthread -L/usr/lib64 -L/usr/lib" -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PolyBench/benchmarks/fdtd-apml /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PolyBench/benchmarks/fdtd-apml
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PolyBench/benchmarks/fdtd-apml
The IR has already been transformed for enabling parallelization
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512, !noelle.pdg.inst.id !67" (7.892764e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512, !noelle.pdg.inst.id !105" (7.892750e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512, !noelle.pdg.inst.id !122" (3.893338e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512, !noelle.pdg.inst.id !204" (3.988284e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513, !noelle.pdg.inst.id !55" (5.445581e-05%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513, !noelle.pdg.inst.id !73" (5.445581e-05%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513, !noelle.pdg.inst.id !90" (5.445581e-05%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513, !noelle.pdg.inst.id !107" (2.107220e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513, !noelle.pdg.inst.id !115" (2.107217e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513, !noelle.pdg.inst.id !146" (2.101631e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Disable "polybench_alloc_data" as cold function
Noelle:  Function "xmalloc"
Noelle:  Disable "xmalloc" as cold function
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Disable "polybench_prepare_instruments" as cold function
Noelle:  Function "polybench_timer_print"
Noelle:  Disable "polybench_timer_print" as cold function
Noelle:  Function "polybench_timer_stop"
Noelle:  Disable "polybench_timer_stop" as cold function
Noelle:  Function "polybench_timer_start"
Noelle:  Disable "polybench_timer_start" as cold function
Noelle:  Function "polybench_flush_cache"
Noelle:  Disable "polybench_flush_cache" as cold function
Noelle:  Function "print_array"
Noelle:  Disable "print_array" as cold function
Planner:    There are 7 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:  There are 2 loop nesting trees in the program
Planner:    ID: 3 (1)
Planner:      Function: "init_array"
Planner:      Loop: "  %exitcond11 = icmp eq i64 %indvars.iv9, 513, !noelle.pdg.inst.id !107"
Planner:      Loop nesting level: 1
Planner:      Hotness = 2.107220e+01 %
Planner:      Average instructions per invocation = 2.978815e+09 %
Planner:      Average iterations per invocation = 5.130000e+02 %
Planner:    
Planner:      ID: 4 (2)
Planner:        Function: "init_array"
Planner:        Loop: "  %exitcond8 = icmp eq i64 %indvars.iv6, 513, !noelle.pdg.inst.id !115"
Planner:        Loop nesting level: 2
Planner:        Hotness = 2.107217e+01 %
Planner:        Average instructions per invocation = 5.806649e+06 %
Planner:        Average iterations per invocation = 5.139981e+02 %
Planner:      
Planner:        ID: 5 (3)
Planner:          Function: "init_array"
Planner:          Loop: "  %exitcond = icmp eq i64 %indvars.iv, 513, !noelle.pdg.inst.id !146"
Planner:          Loop nesting level: 3
Planner:          Hotness = 2.101631e+01 %
Planner:          Average instructions per invocation = 1.128900e+04 %
Planner:          Average iterations per invocation = 5.139999e+02 %
Planner:        
Planner:    ID: 6 (1)
Planner:      Function: "kernel_fdtd_apml"
Planner:      Loop: "  %exitcond12 = icmp eq i64 %indvars.iv10, 512, !noelle.pdg.inst.id !67"
Planner:      Loop nesting level: 1
Planner:      Hotness = 7.892764e+01 %
Planner:      Average instructions per invocation = 1.115739e+10 %
Planner:      Average iterations per invocation = 5.120000e+02 %
Planner:    
Planner:      ID: 7 (2)
Planner:        Function: "kernel_fdtd_apml"
Planner:        Loop: "  %exitcond9 = icmp eq i64 %indvars.iv7, 512, !noelle.pdg.inst.id !105"
Planner:        Loop nesting level: 2
Planner:        Hotness = 7.892750e+01 %
Planner:        Average instructions per invocation = 2.179175e+07 %
Planner:        Average iterations per invocation = 5.129980e+02 %
Planner:      
Planner:        ID: 8 (3)
Planner:          Function: "kernel_fdtd_apml"
Planner:          Loop: "  %exitcond = icmp eq i64 %indvars.iv, 512, !noelle.pdg.inst.id !122"
Planner:          Loop nesting level: 3
Planner:          Hotness = 3.893338e+01 %
Planner:          Average instructions per invocation = 2.099500e+04 %
Planner:          Average iterations per invocation = 5.130000e+02 %
Planner:        
Planner:        ID: 9 (3)
Planner:          Function: "kernel_fdtd_apml"
Planner:          Loop: "  %exitcond6 = icmp eq i64 %indvars.iv4, 512, !noelle.pdg.inst.id !204"
Planner:          Loop nesting level: 3
Planner:          Hotness = 3.988284e+01 %
Planner:          Average instructions per invocation = 2.150700e+04 %
Planner:          Average iterations per invocation = 5.130000e+02 %
Planner:        
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 3
Planner: LoopSelector:      Function: "init_array"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %exitcond11 = icmp eq i64 %indvars.iv9, 513, !noelle.pdg.inst.id !107"
Planner: LoopSelector:      Coverage: 2.107220e+01%
Planner: LoopSelector:      Whole-program savings = 2.107220e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 4
Planner: LoopSelector:      Function: "init_array"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %exitcond8 = icmp eq i64 %indvars.iv6, 513, !noelle.pdg.inst.id !115"
Planner: LoopSelector:      Coverage: 2.107217e+01%
Planner: LoopSelector:      Whole-program savings = 2.107217e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 5
Planner: LoopSelector:      Function: "init_array"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %exitcond = icmp eq i64 %indvars.iv, 513, !noelle.pdg.inst.id !146"
Planner: LoopSelector:      Coverage: 2.101631e+01%
Planner: LoopSelector:      Whole-program savings = 2.101631e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 6
Planner: LoopSelector:      Function: "kernel_fdtd_apml"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %exitcond12 = icmp eq i64 %indvars.iv10, 512, !noelle.pdg.inst.id !67"
Planner: LoopSelector:      Coverage: 7.892764e+01%
Planner: LoopSelector:      Whole-program savings = 7.892764e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 7
Planner: LoopSelector:      Function: "kernel_fdtd_apml"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %exitcond9 = icmp eq i64 %indvars.iv7, 512, !noelle.pdg.inst.id !105"
Planner: LoopSelector:      Coverage: 7.892750e+01%
Planner: LoopSelector:      Whole-program savings = 7.892750e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 9
Planner: LoopSelector:      Function: "kernel_fdtd_apml"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %exitcond6 = icmp eq i64 %indvars.iv4, 512, !noelle.pdg.inst.id !204"
Planner: LoopSelector:      Coverage: 3.988284e+01%
Planner: LoopSelector:      Whole-program savings = 3.988284e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 8
Planner: LoopSelector:      Function: "kernel_fdtd_apml"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %exitcond = icmp eq i64 %indvars.iv, 512, !noelle.pdg.inst.id !122"
Planner: LoopSelector:      Coverage: 3.893338e+01%
Planner: LoopSelector:      Whole-program savings = 3.893338e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
Planner:   Maximum time saved = 9.999983e+01% (14136208703)
Planner:   Maximum time saved with DOALL only = 9.999983e+01% (14136208703)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512, !noelle.pdg.inst.id !69" (7.892764e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512, !noelle.pdg.inst.id !108" (7.892750e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512, !noelle.pdg.inst.id !126" (3.893338e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512, !noelle.pdg.inst.id !208" (3.988284e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513, !noelle.pdg.inst.id !57" (5.445581e-05%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513, !noelle.pdg.inst.id !75" (5.445581e-05%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513, !noelle.pdg.inst.id !92" (5.445581e-05%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513, !noelle.pdg.inst.id !109" (2.107220e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513, !noelle.pdg.inst.id !117" (2.107217e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513, !noelle.pdg.inst.id !148" (2.101631e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Disable "polybench_alloc_data" as cold function
Noelle:  Function "xmalloc"
Noelle:  Disable "xmalloc" as cold function
Noelle:  Function "polybench_flush_cache"
Noelle:  Disable "polybench_flush_cache" as cold function
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Disable "polybench_prepare_instruments" as cold function
Noelle:  Function "polybench_timer_start"
Noelle:  Disable "polybench_timer_start" as cold function
Noelle:  Function "polybench_timer_stop"
Noelle:  Disable "polybench_timer_stop" as cold function
Noelle:  Function "polybench_timer_print"
Noelle:  Disable "polybench_timer_print" as cold function
Noelle:  Function "print_array"
Noelle:  Disable "print_array" as cold function
Parallelizer:    There are 7 loops in the program we are going to consider
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "init_array"
Parallelizer: parallelizerLoop:   Loop 3 = "  %exitcond11 = icmp eq i64 %indvars.iv9, 513, !noelle.pdg.inst.id !109"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 = [513 x double]* %5
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 = [513 x double]* %6
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 = [513 x [513 x double]]* %7
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 = [513 x [513 x double]]* %8
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 = [513 x [513 x double]]* %9
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: Start the parallelization
DOALL:   Number of threads to extract = 8
DOALL:   Chunk size = 8
DOALL:   Reduced variables:
DOALL:  Cloned loop
DOALL:  Adjusted data flow
DOALL:  Rewired induction variables and reducible variables
DOALL:  Stored live outs
DOALL:  Final parallelized loop:

define void @noelle_task_0(i8*, i64, i64, i64) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [40 x i64]*
  %5 = getelementptr inbounds [40 x i64], [40 x i64]* %noelle.environment_variable.pointer, i64 0, i64 0
  %6 = bitcast i64* %5 to [513 x double]**
  %noelle_environment_variable_0 = load [513 x double]*, [513 x double]** %6
  %7 = getelementptr inbounds [40 x i64], [40 x i64]* %noelle.environment_variable.pointer, i64 0, i64 8
  %8 = bitcast i64* %7 to [513 x double]**
  %noelle_environment_variable_1 = load [513 x double]*, [513 x double]** %8
  %9 = getelementptr inbounds [40 x i64], [40 x i64]* %noelle.environment_variable.pointer, i64 0, i64 16
  %10 = bitcast i64* %9 to [513 x [513 x double]]**
  %noelle_environment_variable_2 = load [513 x [513 x double]]*, [513 x [513 x double]]** %10
  %11 = getelementptr inbounds [40 x i64], [40 x i64]* %noelle.environment_variable.pointer, i64 0, i64 24
  %12 = bitcast i64* %11 to [513 x [513 x double]]**
  %noelle_environment_variable_3 = load [513 x [513 x double]]*, [513 x [513 x double]]** %12
  %13 = getelementptr inbounds [40 x i64], [40 x i64]* %noelle.environment_variable.pointer, i64 0, i64 32
  %14 = bitcast i64* %13 to [513 x [513 x double]]**
  %noelle_environment_variable_4 = load [513 x [513 x double]]*, [513 x [513 x double]]** %14
  %coreIdx_X_chunkSize = mul i64 %1, %3
  %15 = mul i64 1, %coreIdx_X_chunkSize
  %16 = add i64 0, %15
  %numCoresMinus1 = sub i64 %2, 1
  %numCoresMinus1_X_chunkSize = mul i64 %numCoresMinus1, %3
  %17 = mul i64 1, %numCoresMinus1_X_chunkSize
  br label %29

18:                                               ; preds = %19
  ret void

19:                                               ; preds = %29
  br label %18

20:                                               ; preds = %33
  %21 = add nuw nsw i64 %30, 1, !noelle.pdg.inst.id !30
  %22 = add i64 %31, 1
  %23 = icmp eq i64 %22, %3
  %chunkWrap = select i1 %23, i64 0, i64 %22
  %24 = add i64 %21, %17
  %nextStepOrNextChunk = select i1 %23, i64 %24, i64 %21
  br label %29, !noelle.pdg.inst.id !31

25:                                               ; preds = %60
  br label %33, !noelle.pdg.inst.id !32

26:                                               ; preds = %29
  %27 = trunc i64 %30 to i32, !noelle.pdg.inst.id !33
  %28 = sitofp i32 %27 to double, !noelle.pdg.inst.id !34
  br label %33, !noelle.pdg.inst.id !35

29:                                               ; preds = %4, %20
  %30 = phi i64 [ %nextStepOrNextChunk, %20 ], [ %16, %4 ], !noelle.pdg.inst.id !36
  %31 = phi i64 [ 0, %4 ], [ %chunkWrap, %20 ]
  %32 = icmp sge i64 %30, 513, !noelle.pdg.inst.id !37
  br i1 %32, label %19, label %26, !prof !38, !noelle.loop.id !39, !noelle.pdg.inst.id !40, !noelle.parallelizer.looporder !41

33:                                               ; preds = %26, %25
  %34 = phi i64 [ 0, %26 ], [ %37, %25 ], !noelle.pdg.inst.id !42
  %35 = icmp eq i64 %34, 513, !noelle.pdg.inst.id !43
  br i1 %35, label %20, label %36, !prof !44, !noelle.loop.id !45, !noelle.pdg.inst.id !46, !noelle.parallelizer.looporder !47

36:                                               ; preds = %33
  %37 = add nuw nsw i64 %34, 1, !noelle.pdg.inst.id !48
  %38 = trunc i64 %37 to i32, !noelle.pdg.inst.id !49
  %39 = sitofp i32 %38 to double, !noelle.pdg.inst.id !50
  %40 = fmul double %28, %39, !noelle.pdg.inst.id !51
  %41 = fadd double %40, 1.000000e+01, !noelle.pdg.inst.id !52
  %42 = fmul double %41, 0x3F60000000000000, !noelle.pdg.inst.id !53
  %43 = getelementptr inbounds [513 x double], [513 x double]* %noelle_environment_variable_1, i64 %30, i64 %34, !noelle.pdg.inst.id !54
  store double %42, double* %43, align 8, !tbaa !55, !noelle.pdg.inst.id !59
  %44 = trunc i64 %34 to i32, !noelle.pdg.inst.id !60
  %45 = add i32 %44, 2, !noelle.pdg.inst.id !61
  %46 = sitofp i32 %45 to double, !noelle.pdg.inst.id !62
  %47 = fmul double %28, %46, !noelle.pdg.inst.id !63
  %48 = fadd double %47, 1.100000e+01, !noelle.pdg.inst.id !64
  %49 = fmul double %48, 0x3F60000000000000, !noelle.pdg.inst.id !65
  %50 = getelementptr inbounds [513 x double], [513 x double]* %noelle_environment_variable_0, i64 %30, i64 %34, !noelle.pdg.inst.id !66
  store double %49, double* %50, align 8, !tbaa !55, !noelle.pdg.inst.id !67
  %51 = add i32 %44, 3, !noelle.pdg.inst.id !68
  %52 = sitofp i32 %51 to double, !noelle.pdg.inst.id !69
  %53 = fmul double %28, %52, !noelle.pdg.inst.id !70
  %54 = add i32 %44, 4, !noelle.pdg.inst.id !71
  %55 = sitofp i32 %54 to double, !noelle.pdg.inst.id !72
  %56 = fmul double %28, %55, !noelle.pdg.inst.id !73
  %57 = add i32 %44, 5, !noelle.pdg.inst.id !74
  %58 = sitofp i32 %57 to double, !noelle.pdg.inst.id !75
  %59 = fmul double %28, %58, !noelle.pdg.inst.id !76
  br label %60, !noelle.pdg.inst.id !77

60:                                               ; preds = %63, %36
  %61 = phi i64 [ %78, %63 ], [ 0, %36 ], !noelle.pdg.inst.id !78
  %62 = icmp eq i64 %61, 513, !noelle.pdg.inst.id !79
  br i1 %62, label %25, label %63, !prof !80, !noelle.loop.id !81, !noelle.pdg.inst.id !82, !noelle.parallelizer.looporder !83

63:                                               ; preds = %60
  %64 = trunc i64 %61 to i32, !noelle.pdg.inst.id !84
  %65 = sitofp i32 %64 to double, !noelle.pdg.inst.id !85
  %66 = fadd double %53, %65, !noelle.pdg.inst.id !86
  %67 = fadd double %66, 1.000000e+00, !noelle.pdg.inst.id !87
  %68 = fmul double %67, 0x3F60000000000000, !noelle.pdg.inst.id !88
  %69 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_2, i64 %30, i64 %34, i64 %61, !noelle.pdg.inst.id !89
  store double %68, double* %69, align 8, !tbaa !55, !noelle.pdg.inst.id !90
  %70 = fadd double %56, %65, !noelle.pdg.inst.id !91
  %71 = fadd double %70, 2.000000e+00, !noelle.pdg.inst.id !92
  %72 = fmul double %71, 0x3F60000000000000, !noelle.pdg.inst.id !93
  %73 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_3, i64 %30, i64 %34, i64 %61, !noelle.pdg.inst.id !94
  store double %72, double* %73, align 8, !tbaa !55, !noelle.pdg.inst.id !95
  %74 = fadd double %59, %65, !noelle.pdg.inst.id !96
  %75 = fadd double %74, 3.000000e+00, !noelle.pdg.inst.id !97
  %76 = fmul double %75, 0x3F60000000000000, !noelle.pdg.inst.id !98
  %77 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_4, i64 %30, i64 %34, i64 %61, !noelle.pdg.inst.id !99
  store double %76, double* %77, align 8, !tbaa !55, !noelle.pdg.inst.id !100
  %78 = add nuw nsw i64 %61, 1, !noelle.pdg.inst.id !101
  br label %60, !noelle.pdg.inst.id !102
}

DOALL: Exit
Parallelizer: parallelizerLoop:   Link the parallelize loop
Parallelizer: parallelizerLoop:   The loop has been parallelized with DOALL
Parallelizer: parallelizerLoop: Exit
Parallelizer:    Keep track of basic blocks being modified by the parallelization
Parallelizer:    Loop 4 cannot be parallelized because one of its parent has been parallelized already
Parallelizer:    Loop 5 cannot be parallelized because one of its parent has been parallelized already
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "kernel_fdtd_apml"
Parallelizer: parallelizerLoop:   Loop 6 = "  %exitcond12 = icmp eq i64 %indvars.iv10, 512, !noelle.pdg.inst.id !69"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %25 = load double, double* %21, align 8, !tbaa !56, !noelle.pdg.inst.id !61
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %26 = fdiv double %24, %25, !noelle.pdg.inst.id !62
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %27 = load double, double* %22, align 8, !tbaa !56, !noelle.pdg.inst.id !63
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %29 = fdiv double %27, %28, !noelle.pdg.inst.id !65
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %30 = fdiv double %4, %28, !noelle.pdg.inst.id !66
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 = double %3
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 = double %4
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 = [513 x double]* %5
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 = [513 x double]* %6
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 = [513 x double]* %7
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 = [513 x double]* %8
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 = [513 x [513 x double]]* %9
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 = [513 x [513 x double]]* %10
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 = [513 x [513 x double]]* %11
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 = [513 x [513 x double]]* %12
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 = double* %13
Parallelizer: parallelizerLoop:   Environment:   Live-in 16 = double* %14
Parallelizer: parallelizerLoop:   Environment:   Live-in 17 = double* %15
Parallelizer: parallelizerLoop:   Environment:   Live-in 18 = double* %16
Parallelizer: parallelizerLoop:   Environment:   Live-in 19 = double* %17
Parallelizer: parallelizerLoop:   Environment:   Live-in 20 = double* %18
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: Start the parallelization
DOALL:   Number of threads to extract = 8
DOALL:   Chunk size = 8
DOALL:   Reduced variables:
DOALL:  Cloned loop
DOALL:  Adjusted data flow
DOALL:  Rewired induction variables and reducible variables
DOALL:  Stored live outs
DOALL:  Final parallelized loop:

define void @noelle_task_1(i8*, i64, i64, i64) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [168 x i64]*
  %5 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 0
  %6 = bitcast i64* %5 to double*
  %noelle_environment_variable_0 = load double, double* %6
  %7 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 8
  %8 = bitcast i64* %7 to double*
  %noelle_environment_variable_1 = load double, double* %8
  %9 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 16
  %10 = bitcast i64* %9 to double*
  %noelle_environment_variable_2 = load double, double* %10
  %11 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 24
  %12 = bitcast i64* %11 to double*
  %noelle_environment_variable_3 = load double, double* %12
  %13 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 32
  %14 = bitcast i64* %13 to double*
  %noelle_environment_variable_4 = load double, double* %14
  %15 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 40
  %16 = bitcast i64* %15 to double*
  %noelle_environment_variable_5 = load double, double* %16
  %17 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 48
  %18 = bitcast i64* %17 to double*
  %noelle_environment_variable_6 = load double, double* %18
  %19 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 56
  %20 = bitcast i64* %19 to [513 x double]**
  %noelle_environment_variable_7 = load [513 x double]*, [513 x double]** %20
  %21 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 64
  %22 = bitcast i64* %21 to [513 x double]**
  %noelle_environment_variable_8 = load [513 x double]*, [513 x double]** %22
  %23 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 72
  %24 = bitcast i64* %23 to [513 x double]**
  %noelle_environment_variable_9 = load [513 x double]*, [513 x double]** %24
  %25 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 80
  %26 = bitcast i64* %25 to [513 x double]**
  %noelle_environment_variable_10 = load [513 x double]*, [513 x double]** %26
  %27 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 88
  %28 = bitcast i64* %27 to [513 x [513 x double]]**
  %noelle_environment_variable_11 = load [513 x [513 x double]]*, [513 x [513 x double]]** %28
  %29 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 96
  %30 = bitcast i64* %29 to [513 x [513 x double]]**
  %noelle_environment_variable_12 = load [513 x [513 x double]]*, [513 x [513 x double]]** %30
  %31 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 104
  %32 = bitcast i64* %31 to [513 x [513 x double]]**
  %noelle_environment_variable_13 = load [513 x [513 x double]]*, [513 x [513 x double]]** %32
  %33 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 112
  %34 = bitcast i64* %33 to [513 x [513 x double]]**
  %noelle_environment_variable_14 = load [513 x [513 x double]]*, [513 x [513 x double]]** %34
  %35 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 120
  %36 = bitcast i64* %35 to double**
  %noelle_environment_variable_15 = load double*, double** %36
  %37 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 128
  %38 = bitcast i64* %37 to double**
  %noelle_environment_variable_16 = load double*, double** %38
  %39 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 136
  %40 = bitcast i64* %39 to double**
  %noelle_environment_variable_17 = load double*, double** %40
  %41 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 144
  %42 = bitcast i64* %41 to double**
  %noelle_environment_variable_18 = load double*, double** %42
  %43 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 152
  %44 = bitcast i64* %43 to double**
  %noelle_environment_variable_19 = load double*, double** %44
  %45 = getelementptr inbounds [168 x i64], [168 x i64]* %noelle.environment_variable.pointer, i64 0, i64 160
  %46 = bitcast i64* %45 to double**
  %noelle_environment_variable_20 = load double*, double** %46
  %coreIdx_X_chunkSize = mul i64 %1, %3
  %47 = mul i64 1, %coreIdx_X_chunkSize
  %48 = add i64 0, %47
  %numCoresMinus1 = sub i64 %2, 1
  %numCoresMinus1_X_chunkSize = mul i64 %numCoresMinus1, %3
  %49 = mul i64 1, %numCoresMinus1_X_chunkSize
  br label %165

50:                                               ; preds = %51
  ret void

51:                                               ; preds = %165
  br label %50

52:                                               ; preds = %169
  %53 = add nuw nsw i64 %166, 1, !noelle.pdg.inst.id !30
  %54 = add i64 %167, 1
  %55 = icmp eq i64 %54, %3
  %chunkWrap = select i1 %55, i64 0, i64 %54
  %56 = add i64 %53, %49
  %nextStepOrNextChunk = select i1 %55, i64 %56, i64 %53
  br label %165, !noelle.pdg.inst.id !31

57:                                               ; preds = %94
  store double %154, double* %174, align 8, !tbaa !32, !noelle.pdg.inst.id !36
  store double %158, double* %177, align 8, !tbaa !32, !noelle.pdg.inst.id !37
  store double %164, double* %140, align 8, !tbaa !32, !noelle.pdg.inst.id !38
  %58 = load i64, i64* %178, align 8, !tbaa !32, !noelle.pdg.inst.id !39
  store i64 %58, i64* %141, align 8, !tbaa !32, !noelle.pdg.inst.id !40
  br label %169, !noelle.pdg.inst.id !41

59:                                               ; preds = %94
  %60 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_12, i64 %166, i64 512, i64 %95, !noelle.pdg.inst.id !42
  %61 = load double, double* %60, align 8, !tbaa !32, !noelle.pdg.inst.id !43
  %62 = getelementptr inbounds [513 x double], [513 x double]* %noelle_environment_variable_7, i64 %166, i64 %95, !noelle.pdg.inst.id !44
  %63 = load double, double* %62, align 8, !tbaa !32, !noelle.pdg.inst.id !45
  %64 = fsub double %61, %63, !noelle.pdg.inst.id !46
  %65 = add nuw nsw i64 %95, 1, !noelle.pdg.inst.id !47
  %66 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_13, i64 %166, i64 512, i64 %65, !noelle.pdg.inst.id !48
  %67 = load double, double* %66, align 8, !tbaa !32, !noelle.pdg.inst.id !49
  %68 = fadd double %64, %67, !noelle.pdg.inst.id !50
  %69 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_13, i64 %166, i64 512, i64 %95, !noelle.pdg.inst.id !51
  %70 = load double, double* %69, align 8, !tbaa !32, !noelle.pdg.inst.id !52
  %71 = fsub double %68, %70, !noelle.pdg.inst.id !53
  store double %71, double* %174, align 8, !tbaa !32, !noelle.pdg.inst.id !54
  %72 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_11, i64 %166, i64 %170, i64 %95, !noelle.pdg.inst.id !55
  %73 = load double, double* %72, align 8, !tbaa !32, !noelle.pdg.inst.id !56
  %74 = fmul double %129, %73, !noelle.pdg.inst.id !57
  %75 = fmul double %130, %71, !noelle.pdg.inst.id !58
  %76 = fsub double %74, %75, !noelle.pdg.inst.id !59
  store double %76, double* %177, align 8, !tbaa !32, !noelle.pdg.inst.id !60
  %77 = getelementptr inbounds double, double* %noelle_environment_variable_17, i64 %95, !noelle.pdg.inst.id !61
  %78 = load double, double* %77, align 8, !tbaa !32, !noelle.pdg.inst.id !62
  %79 = getelementptr inbounds double, double* %noelle_environment_variable_18, i64 %95, !noelle.pdg.inst.id !63
  %80 = load double, double* %79, align 8, !tbaa !32, !noelle.pdg.inst.id !64
  %81 = fdiv double %78, %80, !noelle.pdg.inst.id !65
  %82 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_14, i64 %166, i64 512, i64 %95, !noelle.pdg.inst.id !66
  %83 = load double, double* %82, align 8, !tbaa !32, !noelle.pdg.inst.id !67
  %84 = fmul double %81, %83, !noelle.pdg.inst.id !68
  %85 = fdiv double %143, %80, !noelle.pdg.inst.id !69
  %86 = fmul double %85, %76, !noelle.pdg.inst.id !70
  %87 = fadd double %84, %86, !noelle.pdg.inst.id !71
  %88 = fdiv double %145, %80, !noelle.pdg.inst.id !72
  %89 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_11, i64 %166, i64 512, i64 %95, !noelle.pdg.inst.id !73
  %90 = load double, double* %89, align 8, !tbaa !32, !noelle.pdg.inst.id !74
  %91 = fmul double %88, %90, !noelle.pdg.inst.id !75
  %92 = fsub double %87, %91, !noelle.pdg.inst.id !76
  store double %92, double* %82, align 8, !tbaa !32, !noelle.pdg.inst.id !77
  %93 = bitcast double* %89 to i64*, !noelle.pdg.inst.id !78
  store i64 %131, i64* %93, align 8, !tbaa !32, !noelle.pdg.inst.id !79
  br label %94, !noelle.pdg.inst.id !80

94:                                               ; preds = %97, %59
  %95 = phi i64 [ %65, %59 ], [ 0, %97 ], !noelle.pdg.inst.id !81
  %96 = icmp eq i64 %95, 512, !noelle.pdg.inst.id !82
  br i1 %96, label %57, label %59, !prof !83, !noelle.loop.id !84, !noelle.pdg.inst.id !85, !noelle.parallelizer.looporder !86

97:                                               ; preds = %184
  %98 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_12, i64 %166, i64 %170, i64 512, !noelle.pdg.inst.id !87
  %99 = load double, double* %98, align 8, !tbaa !32, !noelle.pdg.inst.id !88
  %100 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_12, i64 %166, i64 %173, i64 512, !noelle.pdg.inst.id !89
  %101 = load double, double* %100, align 8, !tbaa !32, !noelle.pdg.inst.id !90
  %102 = fsub double %99, %101, !noelle.pdg.inst.id !91
  %103 = getelementptr inbounds [513 x double], [513 x double]* %noelle_environment_variable_8, i64 %166, i64 %170, !noelle.pdg.inst.id !92
  %104 = load double, double* %103, align 8, !tbaa !32, !noelle.pdg.inst.id !93
  %105 = fadd double %102, %104, !noelle.pdg.inst.id !94
  %106 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_13, i64 %166, i64 %170, i64 512, !noelle.pdg.inst.id !95
  %107 = load double, double* %106, align 8, !tbaa !32, !noelle.pdg.inst.id !96
  %108 = fsub double %105, %107, !noelle.pdg.inst.id !97
  store double %108, double* %174, align 8, !tbaa !32, !noelle.pdg.inst.id !98
  %109 = load double, double* %175, align 8, !tbaa !32, !noelle.pdg.inst.id !99
  %110 = load double, double* %176, align 8, !tbaa !32, !noelle.pdg.inst.id !100
  %111 = fdiv double %109, %110, !noelle.pdg.inst.id !101
  %112 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_11, i64 %166, i64 %170, i64 512, !noelle.pdg.inst.id !102
  %113 = load double, double* %112, align 8, !tbaa !32, !noelle.pdg.inst.id !103
  %114 = fmul double %111, %113, !noelle.pdg.inst.id !104
  %115 = fdiv double %noelle_environment_variable_6, %110, !noelle.pdg.inst.id !105
  %116 = fmul double %115, %108, !noelle.pdg.inst.id !106
  %117 = fsub double %114, %116, !noelle.pdg.inst.id !107
  store double %117, double* %177, align 8, !tbaa !32, !noelle.pdg.inst.id !108
  %118 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_14, i64 %166, i64 %170, i64 512, !noelle.pdg.inst.id !109
  %119 = load double, double* %118, align 8, !tbaa !32, !noelle.pdg.inst.id !110
  %120 = fmul double %noelle_environment_variable_1, %119, !noelle.pdg.inst.id !111
  %121 = fmul double %146, %117, !noelle.pdg.inst.id !112
  %122 = fadd double %120, %121, !noelle.pdg.inst.id !113
  %123 = load double, double* %112, align 8, !tbaa !32, !noelle.pdg.inst.id !114
  %124 = fmul double %147, %123, !noelle.pdg.inst.id !115
  %125 = fsub double %122, %124, !noelle.pdg.inst.id !116
  store double %125, double* %118, align 8, !tbaa !32, !noelle.pdg.inst.id !117
  %126 = load i64, i64* %178, align 8, !tbaa !32, !noelle.pdg.inst.id !118
  %127 = bitcast double* %112 to i64*, !noelle.pdg.inst.id !119
  store i64 %126, i64* %127, align 8, !tbaa !32, !noelle.pdg.inst.id !120
  %128 = load double, double* %176, align 8, !tbaa !32, !noelle.pdg.inst.id !121
  %129 = fdiv double %noelle_environment_variable_2, %128, !noelle.pdg.inst.id !122
  %130 = fdiv double %noelle_environment_variable_6, %128, !noelle.pdg.inst.id !123
  %131 = load i64, i64* %178, align 8, !tbaa !32, !noelle.pdg.inst.id !124
  br label %94, !noelle.pdg.inst.id !125

132:                                              ; preds = %165
  %133 = getelementptr inbounds double, double* %noelle_environment_variable_16, i64 %166, !noelle.pdg.inst.id !126
  %134 = getelementptr inbounds double, double* %noelle_environment_variable_15, i64 %166, !noelle.pdg.inst.id !127
  %135 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_12, i64 %166, i64 512, i64 512, !noelle.pdg.inst.id !128
  %136 = getelementptr inbounds [513 x double], [513 x double]* %noelle_environment_variable_7, i64 %166, i64 512, !noelle.pdg.inst.id !129
  %137 = getelementptr inbounds [513 x double], [513 x double]* %noelle_environment_variable_8, i64 %166, i64 512, !noelle.pdg.inst.id !130
  %138 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_13, i64 %166, i64 512, i64 512, !noelle.pdg.inst.id !131
  %139 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_11, i64 %166, i64 512, i64 512, !noelle.pdg.inst.id !132
  %140 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_14, i64 %166, i64 512, i64 512, !noelle.pdg.inst.id !133
  %141 = bitcast double* %139 to i64*, !noelle.pdg.inst.id !134
  %142 = load double, double* %133, align 8, !tbaa !32, !noelle.pdg.inst.id !135
  %143 = fmul double %142, %noelle_environment_variable_5, !noelle.pdg.inst.id !136
  %144 = load double, double* %134, align 8, !tbaa !32, !noelle.pdg.inst.id !137
  %145 = fmul double %144, %noelle_environment_variable_5, !noelle.pdg.inst.id !138
  %146 = fdiv double %143, %noelle_environment_variable_0, !noelle.pdg.inst.id !139
  %147 = fdiv double %145, %noelle_environment_variable_0, !noelle.pdg.inst.id !140
  %148 = load double, double* %135, align 8, !tbaa !32, !noelle.pdg.inst.id !141
  %149 = load double, double* %136, align 8, !tbaa !32, !noelle.pdg.inst.id !142
  %150 = fsub double %148, %149, !noelle.pdg.inst.id !143
  %151 = load double, double* %137, align 8, !tbaa !32, !noelle.pdg.inst.id !144
  %152 = fadd double %150, %151, !noelle.pdg.inst.id !145
  %153 = load double, double* %138, align 8, !tbaa !32, !noelle.pdg.inst.id !146
  %154 = fsub double %152, %153, !noelle.pdg.inst.id !147
  %155 = load double, double* %139, align 8, !tbaa !32, !noelle.pdg.inst.id !148
  %156 = fmul double %noelle_environment_variable_3, %155, !noelle.pdg.inst.id !149
  %157 = fmul double %noelle_environment_variable_4, %154, !noelle.pdg.inst.id !150
  %158 = fsub double %156, %157, !noelle.pdg.inst.id !151
  %159 = load double, double* %140, align 8, !tbaa !32, !noelle.pdg.inst.id !152
  %160 = fmul double %noelle_environment_variable_1, %159, !noelle.pdg.inst.id !153
  %161 = fmul double %146, %158, !noelle.pdg.inst.id !154
  %162 = fadd double %160, %161, !noelle.pdg.inst.id !155
  %163 = fmul double %147, %155, !noelle.pdg.inst.id !156
  %164 = fsub double %162, %163, !noelle.pdg.inst.id !157
  br label %169, !noelle.pdg.inst.id !158

165:                                              ; preds = %4, %52
  %166 = phi i64 [ %nextStepOrNextChunk, %52 ], [ %48, %4 ], !noelle.pdg.inst.id !159
  %167 = phi i64 [ 0, %4 ], [ %chunkWrap, %52 ]
  %168 = icmp sge i64 %166, 512, !noelle.pdg.inst.id !160
  br i1 %168, label %51, label %132, !prof !161, !noelle.loop.id !162, !noelle.pdg.inst.id !163, !noelle.parallelizer.looporder !164

169:                                              ; preds = %57, %132
  %170 = phi i64 [ %173, %57 ], [ 0, %132 ], !noelle.pdg.inst.id !165
  %171 = icmp eq i64 %170, 512, !noelle.pdg.inst.id !166
  br i1 %171, label %52, label %172, !prof !167, !noelle.loop.id !168, !noelle.pdg.inst.id !169, !noelle.parallelizer.looporder !170

172:                                              ; preds = %169
  %173 = add nuw nsw i64 %170, 1, !noelle.pdg.inst.id !171
  %174 = getelementptr inbounds [513 x double], [513 x double]* %noelle_environment_variable_9, i64 %166, i64 %170, !noelle.pdg.inst.id !172
  %175 = getelementptr inbounds double, double* %noelle_environment_variable_19, i64 %170, !noelle.pdg.inst.id !173
  %176 = getelementptr inbounds double, double* %noelle_environment_variable_20, i64 %170, !noelle.pdg.inst.id !174
  %177 = getelementptr inbounds [513 x double], [513 x double]* %noelle_environment_variable_10, i64 %166, i64 %170, !noelle.pdg.inst.id !175
  %178 = bitcast double* %177 to i64*, !noelle.pdg.inst.id !176
  %179 = load double, double* %175, align 8, !tbaa !32, !noelle.pdg.inst.id !177
  %180 = load double, double* %176, align 8, !tbaa !32, !noelle.pdg.inst.id !178
  %181 = fdiv double %179, %180, !noelle.pdg.inst.id !179
  %182 = fdiv double %noelle_environment_variable_6, %180, !noelle.pdg.inst.id !180
  %183 = load i64, i64* %178, align 8, !tbaa !32, !noelle.pdg.inst.id !181
  br label %184, !noelle.pdg.inst.id !182

184:                                              ; preds = %187, %172
  %185 = phi i64 [ %193, %187 ], [ 0, %172 ], !noelle.pdg.inst.id !183
  %186 = icmp eq i64 %185, 512, !noelle.pdg.inst.id !184
  br i1 %186, label %97, label %187, !prof !83, !noelle.loop.id !185, !noelle.pdg.inst.id !186, !noelle.parallelizer.looporder !162

187:                                              ; preds = %184
  %188 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_12, i64 %166, i64 %170, i64 %185, !noelle.pdg.inst.id !187
  %189 = load double, double* %188, align 8, !tbaa !32, !noelle.pdg.inst.id !188
  %190 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_12, i64 %166, i64 %173, i64 %185, !noelle.pdg.inst.id !189
  %191 = load double, double* %190, align 8, !tbaa !32, !noelle.pdg.inst.id !190
  %192 = fsub double %189, %191, !noelle.pdg.inst.id !191
  %193 = add nuw nsw i64 %185, 1, !noelle.pdg.inst.id !192
  %194 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_13, i64 %166, i64 %170, i64 %193, !noelle.pdg.inst.id !193
  %195 = load double, double* %194, align 8, !tbaa !32, !noelle.pdg.inst.id !194
  %196 = fadd double %192, %195, !noelle.pdg.inst.id !195
  %197 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_13, i64 %166, i64 %170, i64 %185, !noelle.pdg.inst.id !196
  %198 = load double, double* %197, align 8, !tbaa !32, !noelle.pdg.inst.id !197
  %199 = fsub double %196, %198, !noelle.pdg.inst.id !198
  store double %199, double* %174, align 8, !tbaa !32, !noelle.pdg.inst.id !199
  %200 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_11, i64 %166, i64 %170, i64 %185, !noelle.pdg.inst.id !200
  %201 = load double, double* %200, align 8, !tbaa !32, !noelle.pdg.inst.id !201
  %202 = fmul double %181, %201, !noelle.pdg.inst.id !202
  %203 = fmul double %182, %199, !noelle.pdg.inst.id !203
  %204 = fsub double %202, %203, !noelle.pdg.inst.id !204
  store double %204, double* %177, align 8, !tbaa !32, !noelle.pdg.inst.id !205
  %205 = getelementptr inbounds double, double* %noelle_environment_variable_17, i64 %185, !noelle.pdg.inst.id !206
  %206 = load double, double* %205, align 8, !tbaa !32, !noelle.pdg.inst.id !207
  %207 = getelementptr inbounds double, double* %noelle_environment_variable_18, i64 %185, !noelle.pdg.inst.id !208
  %208 = load double, double* %207, align 8, !tbaa !32, !noelle.pdg.inst.id !209
  %209 = fdiv double %206, %208, !noelle.pdg.inst.id !210
  %210 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %noelle_environment_variable_14, i64 %166, i64 %170, i64 %185, !noelle.pdg.inst.id !211
  %211 = load double, double* %210, align 8, !tbaa !32, !noelle.pdg.inst.id !212
  %212 = fmul double %209, %211, !noelle.pdg.inst.id !213
  %213 = fdiv double %143, %208, !noelle.pdg.inst.id !214
  %214 = fmul double %213, %204, !noelle.pdg.inst.id !215
  %215 = fadd double %212, %214, !noelle.pdg.inst.id !216
  %216 = fdiv double %145, %208, !noelle.pdg.inst.id !217
  %217 = load double, double* %200, align 8, !tbaa !32, !noelle.pdg.inst.id !218
  %218 = fmul double %216, %217, !noelle.pdg.inst.id !219
  %219 = fsub double %215, %218, !noelle.pdg.inst.id !220
  store double %219, double* %210, align 8, !tbaa !32, !noelle.pdg.inst.id !221
  %220 = bitcast double* %200 to i64*, !noelle.pdg.inst.id !222
  store i64 %183, i64* %220, align 8, !tbaa !32, !noelle.pdg.inst.id !223
  br label %184, !noelle.pdg.inst.id !224
}

DOALL: Exit
Parallelizer: parallelizerLoop:   Link the parallelize loop
Parallelizer: parallelizerLoop:   The loop has been parallelized with DOALL
Parallelizer: parallelizerLoop: Exit
Parallelizer:    Keep track of basic blocks being modified by the parallelization
Parallelizer:    Loop 7 cannot be parallelized because one of its parent has been parallelized already
Parallelizer:    Loop 9 cannot be parallelized because one of its parent has been parallelized already
Parallelizer:    Loop 8 cannot be parallelized because one of its parent has been parallelized already
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc fdtd-apml.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PolyBench/benchmarks/fdtd-apml'
