make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PolyBench/benchmarks/fdtd-apml'
./runEnablers.sh fdtd-apml fdtd-apml.bc large "-lm -lstdc++ -lpthread -L/usr/lib64 -L/usr/lib" -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PolyBench/benchmarks/fdtd-apml /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PolyBench/benchmarks/fdtd-apml
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PolyBench/benchmarks/fdtd-apml

opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs fdtd-apml.bc -o baseline.bc
Running: ./baseline_prof  in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PolyBench/benchmarks/fdtd-apml
--------------------------------------------------------------------------------------
DONE
opt -pgo-test-profile-file=/tmp/tmp.xW1PVaoEgH -block-freq -pgo-instr-use baseline.bc -o baseline_pre.bc
opt --strip-debug --strip-debug-declare baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.n9wCi9fUC0 (.ll version is /tmp/tmp.cuUmlLSCU5)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.VbLEgM66PB (.ll version is /tmp/tmp.6uqSrTuXFt)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.n9wCi9fUC0 -o /tmp/tmp.VbLEgM66PB
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.n9wCi9fUC0 -o /tmp/tmp.VbLEgM66PB
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.n9wCi9fUC0 -o /tmp/tmp.VbLEgM66PB
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.n9wCi9fUC0 -o /tmp/tmp.VbLEgM66PB
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       main
DeadFunctionEliminator:       print_array
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       init_array
DeadFunctionEliminator:       kernel_fdtd_apml
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       fprintf
DeadFunctionEliminator:       polybench_alloc_data
DeadFunctionEliminator:       xmalloc
DeadFunctionEliminator:       posix_memalign
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       fwrite
DeadFunctionEliminator:       fputc
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (8.200822e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (8.200818e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (4.052684e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (4.133728e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (4.648255e-05%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (4.648255e-05%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (4.648255e-05%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (1.799163e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (1.799161e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (1.793916e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Function "xmalloc"
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Function "polybench_timer_print"
Noelle:  Function "polybench_timer_stop"
Noelle:  Function "rtclock"
Noelle:  Function "polybench_timer_start"
Noelle:  Function "polybench_flush_cache"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4194560" (0.000000e+00%)
Noelle:  Function "print_array"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (0.000000e+00%)
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (8.200822e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (8.200818e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (4.052684e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (4.133728e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (4.648255e-05%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (4.648255e-05%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (4.648255e-05%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (1.799163e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (1.799161e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (1.793916e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Function "xmalloc"
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Function "polybench_timer_print"
Noelle:  Function "polybench_timer_stop"
Noelle:  Function "rtclock"
Noelle:  Function "polybench_timer_start"
Noelle:  Function "polybench_flush_cache"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4194560" (0.000000e+00%)
Noelle:  Function "print_array"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-inline baseline_pre.bc "-noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier"
NOELLE: Inliner: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.WgNyEaTd7O (.ll version is /tmp/tmp.g3lSWuLS6U)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.fbhfDm8QpB (.ll version is /tmp/tmp.y9DDX3Deaj)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.WgNyEaTd7O -o /tmp/tmp.fbhfDm8QpB
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.WgNyEaTd7O -o /tmp/tmp.fbhfDm8QpB
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.WgNyEaTd7O -o /tmp/tmp.fbhfDm8QpB
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.WgNyEaTd7O -o /tmp/tmp.fbhfDm8QpB
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.WgNyEaTd7O -o /tmp/tmp.fbhfDm8QpB
Inliner: Start
Inliner:   Number of program instructions = 523
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   No remaining calls need to be inlined due to loop-carried data dependences
Inliner:   The code has not been modified
Inliner: Exit
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (8.201213e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (8.201209e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (4.052877e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (4.133925e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (4.648476e-05%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (4.648476e-05%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (4.648476e-05%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (1.798772e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (1.798770e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (1.794002e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Function "xmalloc"
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Function "polybench_timer_print"
Noelle:  Function "polybench_timer_stop"
Noelle:  Function "polybench_timer_start"
Noelle:  Function "polybench_flush_cache"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4194560" (0.000000e+00%)
Noelle:  Function "print_array"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (0.000000e+00%)
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (8.201213e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (8.201209e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (4.052877e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (4.133925e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (4.648476e-05%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (4.648476e-05%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (4.648476e-05%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (1.798772e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (1.798770e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (1.794002e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Function "xmalloc"
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Function "polybench_timer_print"
Noelle:  Function "polybench_timer_stop"
Noelle:  Function "polybench_timer_start"
Noelle:  Function "polybench_flush_cache"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4194560" (0.000000e+00%)
Noelle:  Function "print_array"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: Inliner: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.vFPbp90JOu (.ll version is /tmp/tmp.2n4hZXH4aG)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.45B3bek3Qf (.ll version is /tmp/tmp.iokC6iKghx)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.vFPbp90JOu -o /tmp/tmp.45B3bek3Qf
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.vFPbp90JOu -o /tmp/tmp.45B3bek3Qf
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.vFPbp90JOu -o /tmp/tmp.45B3bek3Qf
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.vFPbp90JOu -o /tmp/tmp.45B3bek3Qf
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       main
DeadFunctionEliminator:       print_array
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       init_array
DeadFunctionEliminator:       kernel_fdtd_apml
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       fprintf
DeadFunctionEliminator:       polybench_alloc_data
DeadFunctionEliminator:       xmalloc
DeadFunctionEliminator:       posix_memalign
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       fwrite
DeadFunctionEliminator:       fputc
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (8.201213e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (8.201209e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (4.052877e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (4.133925e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (4.648476e-05%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (4.648476e-05%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (4.648476e-05%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (1.798772e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (1.798770e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (1.794002e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Function "xmalloc"
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Function "polybench_timer_print"
Noelle:  Function "polybench_timer_stop"
Noelle:  Function "polybench_timer_start"
Noelle:  Function "polybench_flush_cache"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4194560" (0.000000e+00%)
Noelle:  Function "print_array"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (0.000000e+00%)
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (8.201213e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (8.201209e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (4.052877e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (4.133925e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (4.648476e-05%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (4.648476e-05%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (4.648476e-05%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (1.798772e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (1.798770e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (1.794002e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Function "xmalloc"
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Function "polybench_timer_print"
Noelle:  Function "polybench_timer_stop"
Noelle:  Function "polybench_timer_start"
Noelle:  Function "polybench_flush_cache"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4194560" (0.000000e+00%)
Noelle:  Function "print_array"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-enable baseline_pre.bc baseline_pre.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: Enablers: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.dn6PR7k7FY (.ll version is /tmp/tmp.xFKQzIeJaJ)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.UkyqqATJho (.ll version is /tmp/tmp.oS1I3NnN8E)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.dn6PR7k7FY -o /tmp/tmp.UkyqqATJho
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.dn6PR7k7FY -o /tmp/tmp.UkyqqATJho
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.dn6PR7k7FY -o /tmp/tmp.UkyqqATJho
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.dn6PR7k7FY -o /tmp/tmp.UkyqqATJho
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.dn6PR7k7FY -o /tmp/tmp.UkyqqATJho
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (8.201213e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (8.201209e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (4.052877e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (4.133925e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (4.648476e-05%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (4.648476e-05%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (4.648476e-05%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (1.798772e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (1.798770e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (1.794002e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Disable "polybench_alloc_data" as cold function
Noelle:  Function "xmalloc"
Noelle:  Disable "xmalloc" as cold function
Noelle:  Function "print_array"
Noelle:  Disable "print_array" as cold function
EnablersManager:   Try to improve all 7 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 512
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 512"
LICM:     Invariant = "  %55 = load double, double* %38, align 8, !tbaa !34
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %56 = load double, double* %39, align 8, !tbaa !34
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %57 = fdiv double %55, %56
LICM:       Checking dependences
LICM:         Dependent instruction = "  %55 = load double, double* %38, align 8, !tbaa !34
LICM:         Dependent instruction = "  %56 = load double, double* %39, align 8, !tbaa !34
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %55 = load double, double* %38, align 8, !tbaa !34
LICM:         %56 = load double, double* %39, align 8, !tbaa !34
LICM:     Invariant = "  %61 = fdiv double %4, %56
LICM:       Checking dependences
LICM:         Dependent instruction = "  %56 = load double, double* %39, align 8, !tbaa !34
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %56 = load double, double* %39, align 8, !tbaa !34
LICM:     Invariant = "  %72 = load double, double* %26, align 8, !tbaa !34
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %73 = fmul double %72, %3
LICM:       Checking dependences
LICM:         Dependent instruction = "  %72 = load double, double* %26, align 8, !tbaa !34
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %72 = load double, double* %26, align 8, !tbaa !34
LICM:     Invariant = "  %77 = load double, double* %27, align 8, !tbaa !34
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %78 = fmul double %77, %3
LICM:       Checking dependences
LICM:         Dependent instruction = "  %77 = load double, double* %27, align 8, !tbaa !34
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %77 = load double, double* %27, align 8, !tbaa !34
LICM:     Invariant = "  %83 = load i64, i64* %41, align 8, !tbaa !34
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %57 = fdiv double %55, %56
LICM:           It can be hoisted
LICM:         Invariant   %61 = fdiv double %4, %56
LICM:           It can be hoisted
LICM:         Invariant   %73 = fmul double %72, %3
LICM:           It can be hoisted
LICM:         Invariant   %78 = fmul double %77, %3
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond6 = icmp eq i64 %indvars.iv4, 512
EnablersManager:     The current loop belongs to the function kernel_fdtd_apml , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond9 = icmp eq i64 %indvars.iv7, 512
EnablersManager:     The current loop belongs to the function kernel_fdtd_apml , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond12 = icmp eq i64 %indvars.iv10, 512
EnablersManager:     The current loop belongs to the function kernel_fdtd_apml , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "init_array"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 513
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 513"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %.loopexit.loopexit, label %72, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "init_array"
EnablersManager:     Entry instruction =   %exitcond8 = icmp eq i64 %indvars.iv6, 513
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond8, label %87, label %48, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "init_array"
EnablersManager:     Entry instruction =   %exitcond11 = icmp eq i64 %indvars.iv9, 513
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond11, label %88, label %45, !prof !35
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (8.201213e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (8.201209e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (4.052877e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (4.133925e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (4.648476e-05%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (4.648476e-05%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (4.648476e-05%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (1.798772e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (1.798770e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (1.794002e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Function "xmalloc"
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Function "polybench_timer_print"
Noelle:  Function "polybench_timer_stop"
Noelle:  Function "polybench_timer_start"
Noelle:  Function "polybench_flush_cache"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4194560" (0.000000e+00%)
Noelle:  Function "print_array"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (0.000000e+00%)
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (8.059978e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (8.059973e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (3.584391e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (4.458508e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (5.013460e-05%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (5.013460e-05%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (5.013460e-05%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (1.940006e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (1.940004e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (1.934861e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Function "xmalloc"
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Function "polybench_timer_print"
Noelle:  Function "polybench_timer_stop"
Noelle:  Function "polybench_timer_start"
Noelle:  Function "polybench_flush_cache"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4194560" (0.000000e+00%)
Noelle:  Function "print_array"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (0.000000e+00%)
NOELLE: FixedPoint:       There are 0 different instructions and -9 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.UkyqqATJho -o /tmp/tmp.UkyqqATJho
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.UkyqqATJho -o /tmp/tmp.UkyqqATJho
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.dn6PR7k7FY -o /tmp/tmp.UkyqqATJho
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.dn6PR7k7FY -o /tmp/tmp.UkyqqATJho
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.dn6PR7k7FY -o /tmp/tmp.UkyqqATJho
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (8.059978e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (8.059973e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (3.584391e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (4.458508e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (5.013460e-05%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (5.013460e-05%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (5.013460e-05%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (1.940006e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (1.940004e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (1.934861e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Disable "polybench_alloc_data" as cold function
Noelle:  Function "xmalloc"
Noelle:  Disable "xmalloc" as cold function
Noelle:  Function "print_array"
Noelle:  Disable "print_array" as cold function
EnablersManager:   Try to improve all 7 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 512
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 512"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %85, label %52, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond6 = icmp eq i64 %indvars.iv4, 512
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512"
LICM:     Invariant = "  %138 = load double, double* %22, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %139 = load double, double* %39, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %140 = fdiv double %138, %139
LICM:       Checking dependences
LICM:         Dependent instruction = "  %139 = load double, double* %39, align 8, !tbaa !33
LICM:         Dependent instruction = "  %138 = load double, double* %22, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %138 = load double, double* %22, align 8, !tbaa !33
LICM:         %139 = load double, double* %39, align 8, !tbaa !33
LICM:     Invariant = "  %144 = fdiv double %4, %139
LICM:       Checking dependences
LICM:         Dependent instruction = "  %139 = load double, double* %39, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %139 = load double, double* %39, align 8, !tbaa !33
LICM:     Invariant = "  %155 = load double, double* %26, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %156 = fmul double %155, %3
LICM:       Checking dependences
LICM:         Dependent instruction = "  %155 = load double, double* %26, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %155 = load double, double* %26, align 8, !tbaa !33
LICM:     Invariant = "  %160 = load double, double* %27, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %161 = fmul double %160, %3
LICM:       Checking dependences
LICM:         Dependent instruction = "  %160 = load double, double* %27, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %160 = load double, double* %27, align 8, !tbaa !33
LICM:     Invariant = "  %167 = load i64, i64* %41, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %140 = fdiv double %138, %139
LICM:           It can be hoisted
LICM:         Invariant   %144 = fdiv double %4, %139
LICM:           It can be hoisted
LICM:         Invariant   %156 = fmul double %155, %3
LICM:           It can be hoisted
LICM:         Invariant   %161 = fmul double %160, %3
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond9 = icmp eq i64 %indvars.iv7, 512
EnablersManager:     The current loop belongs to the function kernel_fdtd_apml , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond12 = icmp eq i64 %indvars.iv10, 512
EnablersManager:     The current loop belongs to the function kernel_fdtd_apml , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "init_array"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 513
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 513"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %.loopexit.loopexit, label %72, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "init_array"
EnablersManager:     Entry instruction =   %exitcond8 = icmp eq i64 %indvars.iv6, 513
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond8, label %87, label %48, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "init_array"
EnablersManager:     Entry instruction =   %exitcond11 = icmp eq i64 %indvars.iv9, 513
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond11, label %88, label %45, !prof !35
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (8.059978e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (8.059973e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (3.584391e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (4.458508e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (5.013460e-05%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (5.013460e-05%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (5.013460e-05%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (1.940006e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (1.940004e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (1.934861e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Function "xmalloc"
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Function "polybench_timer_print"
Noelle:  Function "polybench_timer_stop"
Noelle:  Function "polybench_timer_start"
Noelle:  Function "polybench_flush_cache"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4194560" (0.000000e+00%)
Noelle:  Function "print_array"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (0.000000e+00%)
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (7.894675e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (7.894669e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (3.889807e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (3.984667e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (5.440642e-05%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (5.440642e-05%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (5.440642e-05%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (2.105309e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (2.105306e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (2.099725e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Function "xmalloc"
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Function "polybench_timer_print"
Noelle:  Function "polybench_timer_stop"
Noelle:  Function "polybench_timer_start"
Noelle:  Function "polybench_flush_cache"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4194560" (0.000000e+00%)
Noelle:  Function "print_array"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (0.000000e+00%)
NOELLE: FixedPoint:       There are 0 different instructions and -9 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.UkyqqATJho -o /tmp/tmp.UkyqqATJho
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.UkyqqATJho -o /tmp/tmp.UkyqqATJho
NOELLE: FixedPoint:     Invocation 2
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.dn6PR7k7FY -o /tmp/tmp.UkyqqATJho
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.dn6PR7k7FY -o /tmp/tmp.UkyqqATJho
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.dn6PR7k7FY -o /tmp/tmp.UkyqqATJho
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (7.894675e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (7.894669e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (3.889807e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (3.984667e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (5.440642e-05%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (5.440642e-05%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (5.440642e-05%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (2.105309e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (2.105306e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (2.099725e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Disable "polybench_alloc_data" as cold function
Noelle:  Function "xmalloc"
Noelle:  Disable "xmalloc" as cold function
Noelle:  Function "print_array"
Noelle:  Disable "print_array" as cold function
EnablersManager:   Try to improve all 7 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 512
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 512"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %85, label %52, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond6 = icmp eq i64 %indvars.iv4, 512
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond6, label %169, label %135, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond9 = icmp eq i64 %indvars.iv7, 512
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512"
LICM:     Invariant = "  %170 = load double, double* %28, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %171 = load double, double* %29, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %172 = fsub double %170, %171
LICM:       Checking dependences
LICM:         Dependent instruction = "  %170 = load double, double* %28, align 8, !tbaa !33
LICM:         Dependent instruction = "  %171 = load double, double* %29, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %170 = load double, double* %28, align 8, !tbaa !33
LICM:         %171 = load double, double* %29, align 8, !tbaa !33
LICM:     Invariant = "  %173 = load double, double* %30, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %174 = fadd double %172, %173
LICM:       Checking dependences
LICM:         Dependent instruction = "  %172 = fsub double %170, %171
LICM:         Dependent instruction = "  %173 = load double, double* %30, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %172 = fsub double %170, %171
LICM:         %173 = load double, double* %30, align 8, !tbaa !33
LICM:     Invariant = "  %175 = load double, double* %31, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %176 = fsub double %174, %175
LICM:       Checking dependences
LICM:         Dependent instruction = "  %174 = fadd double %172, %173
LICM:         Dependent instruction = "  %175 = load double, double* %31, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %174 = fadd double %172, %173
LICM:         %175 = load double, double* %31, align 8, !tbaa !33
LICM:     Invariant = "  %177 = load double, double* %22, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %178 = load double, double* %23, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %179 = fdiv double %177, %178
LICM:       Checking dependences
LICM:         Dependent instruction = "  %177 = load double, double* %22, align 8, !tbaa !33
LICM:         Dependent instruction = "  %178 = load double, double* %23, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %177 = load double, double* %22, align 8, !tbaa !33
LICM:         %178 = load double, double* %23, align 8, !tbaa !33
LICM:     Invariant = "  %180 = load double, double* %32, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %181 = fmul double %179, %180
LICM:       Checking dependences
LICM:         Dependent instruction = "  %179 = fdiv double %177, %178
LICM:         Dependent instruction = "  %180 = load double, double* %32, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %179 = fdiv double %177, %178
LICM:         %180 = load double, double* %32, align 8, !tbaa !33
LICM:     Invariant = "  %182 = fdiv double %4, %178
LICM:       Checking dependences
LICM:         Dependent instruction = "  %178 = load double, double* %23, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %178 = load double, double* %23, align 8, !tbaa !33
LICM:     Invariant = "  %183 = fmul double %182, %176
LICM:       Checking dependences
LICM:         Dependent instruction = "  %176 = fsub double %174, %175
LICM:         Dependent instruction = "  %182 = fdiv double %4, %178
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %176 = fsub double %174, %175
LICM:         %182 = fdiv double %4, %178
LICM:     Invariant = "  %184 = fsub double %181, %183
LICM:       Checking dependences
LICM:         Dependent instruction = "  %181 = fmul double %179, %180
LICM:         Dependent instruction = "  %183 = fmul double %182, %176
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %181 = fmul double %179, %180
LICM:         %183 = fmul double %182, %176
LICM:     Invariant = "  %185 = load double, double* %20, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %186 = load double, double* %21, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %187 = fdiv double %185, %186
LICM:       Checking dependences
LICM:         Dependent instruction = "  %185 = load double, double* %20, align 8, !tbaa !33
LICM:         Dependent instruction = "  %186 = load double, double* %21, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %185 = load double, double* %20, align 8, !tbaa !33
LICM:         %186 = load double, double* %21, align 8, !tbaa !33
LICM:     Invariant = "  %188 = load double, double* %33, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %189 = fmul double %187, %188
LICM:       Checking dependences
LICM:         Dependent instruction = "  %187 = fdiv double %185, %186
LICM:         Dependent instruction = "  %188 = load double, double* %33, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %187 = fdiv double %185, %186
LICM:         %188 = load double, double* %33, align 8, !tbaa !33
LICM:     Invariant = "  %190 = load double, double* %26, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %191 = fmul double %190, %3
LICM:       Checking dependences
LICM:         Dependent instruction = "  %190 = load double, double* %26, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %190 = load double, double* %26, align 8, !tbaa !33
LICM:     Invariant = "  %192 = fdiv double %191, %186
LICM:       Checking dependences
LICM:         Dependent instruction = "  %186 = load double, double* %21, align 8, !tbaa !33
LICM:         Dependent instruction = "  %191 = fmul double %190, %3
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %186 = load double, double* %21, align 8, !tbaa !33
LICM:         %191 = fmul double %190, %3
LICM:     Invariant = "  %193 = fmul double %192, %184
LICM:       Checking dependences
LICM:         Dependent instruction = "  %184 = fsub double %181, %183
LICM:         Dependent instruction = "  %192 = fdiv double %191, %186
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %184 = fsub double %181, %183
LICM:         %192 = fdiv double %191, %186
LICM:     Invariant = "  %194 = fadd double %189, %193
LICM:       Checking dependences
LICM:         Dependent instruction = "  %189 = fmul double %187, %188
LICM:         Dependent instruction = "  %193 = fmul double %192, %184
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %189 = fmul double %187, %188
LICM:         %193 = fmul double %192, %184
LICM:     Invariant = "  %195 = load double, double* %27, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %196 = fmul double %195, %3
LICM:       Checking dependences
LICM:         Dependent instruction = "  %195 = load double, double* %27, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %195 = load double, double* %27, align 8, !tbaa !33
LICM:     Invariant = "  %197 = fdiv double %196, %186
LICM:       Checking dependences
LICM:         Dependent instruction = "  %186 = load double, double* %21, align 8, !tbaa !33
LICM:         Dependent instruction = "  %196 = fmul double %195, %3
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %186 = load double, double* %21, align 8, !tbaa !33
LICM:         %196 = fmul double %195, %3
LICM:     Invariant = "  %198 = load double, double* %32, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %199 = fmul double %197, %198
LICM:       Checking dependences
LICM:         Dependent instruction = "  %197 = fdiv double %196, %186
LICM:         Dependent instruction = "  %198 = load double, double* %32, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %197 = fdiv double %196, %186
LICM:         %198 = load double, double* %32, align 8, !tbaa !33
LICM:     Invariant = "  %200 = fsub double %194, %199
LICM:       Checking dependences
LICM:         Dependent instruction = "  %194 = fadd double %189, %193
LICM:         Dependent instruction = "  %199 = fmul double %197, %198
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %194 = fadd double %189, %193
LICM:         %199 = fmul double %197, %198
LICM:     Invariant = "  store double %200, double* %33, align 8, !tbaa !33
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  %46 = load double, double* %26, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %47 = fmul double %46, %3
LICM:       Checking dependences
LICM:         Dependent instruction = "  %46 = load double, double* %26, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %46 = load double, double* %26, align 8, !tbaa !33
LICM:     Invariant = "  %48 = load double, double* %27, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %49 = fmul double %48, %3
LICM:       Checking dependences
LICM:         Dependent instruction = "  %48 = load double, double* %27, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %48 = load double, double* %27, align 8, !tbaa !33
LICM:     Invariant = "  %106 = load double, double* %20, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %107 = load double, double* %21, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %108 = fdiv double %106, %107
LICM:       Checking dependences
LICM:         Dependent instruction = "  %106 = load double, double* %20, align 8, !tbaa !33
LICM:         Dependent instruction = "  %107 = load double, double* %21, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %106 = load double, double* %20, align 8, !tbaa !33
LICM:         %107 = load double, double* %21, align 8, !tbaa !33
LICM:     Invariant = "  %112 = load double, double* %26, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %113 = fmul double %112, %3
LICM:       Checking dependences
LICM:         Dependent instruction = "  %112 = load double, double* %26, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %112 = load double, double* %26, align 8, !tbaa !33
LICM:     Invariant = "  %114 = fdiv double %113, %107
LICM:       Checking dependences
LICM:         Dependent instruction = "  %107 = load double, double* %21, align 8, !tbaa !33
LICM:         Dependent instruction = "  %113 = fmul double %112, %3
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %107 = load double, double* %21, align 8, !tbaa !33
LICM:         %113 = fmul double %112, %3
LICM:     Invariant = "  %117 = load double, double* %27, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %118 = fmul double %117, %3
LICM:       Checking dependences
LICM:         Dependent instruction = "  %117 = load double, double* %27, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %117 = load double, double* %27, align 8, !tbaa !33
LICM:     Invariant = "  %119 = fdiv double %118, %107
LICM:       Checking dependences
LICM:         Dependent instruction = "  %107 = load double, double* %21, align 8, !tbaa !33
LICM:         Dependent instruction = "  %118 = fmul double %117, %3
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %107 = load double, double* %21, align 8, !tbaa !33
LICM:         %118 = fmul double %117, %3
LICM:     Invariant = "  %125 = load double, double* %22, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %129 = load double, double* %26, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %130 = fmul double %129, %3
LICM:       Checking dependences
LICM:         Dependent instruction = "  %129 = load double, double* %26, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %129 = load double, double* %26, align 8, !tbaa !33
LICM:     Invariant = "  %131 = load double, double* %27, align 8, !tbaa !33
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %132 = fmul double %131, %3
LICM:       Checking dependences
LICM:         Dependent instruction = "  %131 = load double, double* %27, align 8, !tbaa !33
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %131 = load double, double* %27, align 8, !tbaa !33
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %47 = fmul double %46, %3
LICM:           It can be hoisted
LICM:         Invariant   %49 = fmul double %48, %3
LICM:           It can be hoisted
LICM:         Invariant   %108 = fdiv double %106, %107
LICM:           It can be hoisted
LICM:         Invariant   %113 = fmul double %112, %3
LICM:           It can be hoisted
LICM:         Invariant   %114 = fdiv double %113, %107
LICM:           It can be hoisted
LICM:         Invariant   %118 = fmul double %117, %3
LICM:           It can be hoisted
LICM:         Invariant   %119 = fdiv double %118, %107
LICM:           It can be hoisted
LICM:         Invariant   %130 = fmul double %129, %3
LICM:           It can be hoisted
LICM:         Invariant   %132 = fmul double %131, %3
LICM:           It can be hoisted
LICM:         Invariant   %172 = fsub double %170, %171
LICM:           It can be hoisted
LICM:         Invariant   %174 = fadd double %172, %173
LICM:           It can be hoisted
LICM:         Invariant   %176 = fsub double %174, %175
LICM:           It can be hoisted
LICM:         Invariant   %179 = fdiv double %177, %178
LICM:           It can be hoisted
LICM:         Invariant   %181 = fmul double %179, %180
LICM:           It can be hoisted
LICM:         Invariant   %182 = fdiv double %4, %178
LICM:           It can be hoisted
LICM:         Invariant   %183 = fmul double %182, %176
LICM:           It can be hoisted
LICM:         Invariant   %184 = fsub double %181, %183
LICM:           It can be hoisted
LICM:         Invariant   %187 = fdiv double %185, %186
LICM:           It can be hoisted
LICM:         Invariant   %189 = fmul double %187, %188
LICM:           It can be hoisted
LICM:         Invariant   %191 = fmul double %190, %3
LICM:           It can be hoisted
LICM:         Invariant   %192 = fdiv double %191, %186
LICM:           It can be hoisted
LICM:         Invariant   %193 = fmul double %192, %184
LICM:           It can be hoisted
LICM:         Invariant   %194 = fadd double %189, %193
LICM:           It can be hoisted
LICM:         Invariant   %196 = fmul double %195, %3
LICM:           It can be hoisted
LICM:         Invariant   %197 = fdiv double %196, %186
LICM:           It can be hoisted
LICM:         Invariant   %199 = fmul double %197, %198
LICM:           It can be hoisted
LICM:         Invariant   %200 = fsub double %194, %199
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond12 = icmp eq i64 %indvars.iv10, 512
EnablersManager:     The current loop belongs to the function kernel_fdtd_apml , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "init_array"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 513
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 513"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %.loopexit.loopexit, label %72, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "init_array"
EnablersManager:     Entry instruction =   %exitcond8 = icmp eq i64 %indvars.iv6, 513
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond8, label %87, label %48, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "init_array"
EnablersManager:     Entry instruction =   %exitcond11 = icmp eq i64 %indvars.iv9, 513
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond11, label %88, label %45, !prof !35
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (7.894675e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (7.894669e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (3.889807e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (3.984667e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (5.440642e-05%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (5.440642e-05%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (5.440642e-05%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (2.105309e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (2.105306e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (2.099725e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Function "xmalloc"
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Function "polybench_timer_print"
Noelle:  Function "polybench_timer_stop"
Noelle:  Function "polybench_timer_start"
Noelle:  Function "polybench_flush_cache"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4194560" (0.000000e+00%)
Noelle:  Function "print_array"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (0.000000e+00%)
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (7.892765e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (7.892742e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (3.893334e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (3.988280e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (5.445576e-05%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (5.445576e-05%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (5.445576e-05%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (2.107218e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (2.107215e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (2.101629e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Function "xmalloc"
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Function "polybench_timer_print"
Noelle:  Function "polybench_timer_stop"
Noelle:  Function "polybench_timer_start"
Noelle:  Function "polybench_flush_cache"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4194560" (0.000000e+00%)
Noelle:  Function "print_array"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (0.000000e+00%)
NOELLE: FixedPoint:       There are 0 different instructions and -49 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.UkyqqATJho -o /tmp/tmp.UkyqqATJho
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.UkyqqATJho -o /tmp/tmp.UkyqqATJho
NOELLE: FixedPoint:     Invocation 3
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.dn6PR7k7FY -o /tmp/tmp.UkyqqATJho
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.dn6PR7k7FY -o /tmp/tmp.UkyqqATJho
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.dn6PR7k7FY -o /tmp/tmp.UkyqqATJho
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (7.892765e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (7.892742e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (3.893334e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (3.988280e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (5.445576e-05%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (5.445576e-05%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (5.445576e-05%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (2.107218e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (2.107215e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (2.101629e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Disable "polybench_alloc_data" as cold function
Noelle:  Function "xmalloc"
Noelle:  Disable "xmalloc" as cold function
Noelle:  Function "print_array"
Noelle:  Disable "print_array" as cold function
EnablersManager:   Try to improve all 7 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 512
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 512"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %130, label %97, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond6 = icmp eq i64 %indvars.iv4, 512
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond6, label %200, label %166, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond9 = icmp eq i64 %indvars.iv7, 512
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512"
LICM:     Invariant = "  store double %83, double* %33, align 8, !tbaa !32
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond9, label %202, label %85, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond12 = icmp eq i64 %indvars.iv10, 512
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512"
LICM:     Invariant = "  %39 = load double, double* %20, align 8, !tbaa !32
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %40 = load double, double* %21, align 8, !tbaa !32
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %41 = fdiv double %39, %40
LICM:       Checking dependences
LICM:         Dependent instruction = "  %39 = load double, double* %20, align 8, !tbaa !32
LICM:         Dependent instruction = "  %40 = load double, double* %21, align 8, !tbaa !32
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %39 = load double, double* %20, align 8, !tbaa !32
LICM:         %40 = load double, double* %21, align 8, !tbaa !32
LICM:     Invariant = "  %48 = load double, double* %22, align 8, !tbaa !32
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %60 = load double, double* %22, align 8, !tbaa !32
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %61 = load double, double* %23, align 8, !tbaa !32
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %62 = fdiv double %60, %61
LICM:       Checking dependences
LICM:         Dependent instruction = "  %60 = load double, double* %22, align 8, !tbaa !32
LICM:         Dependent instruction = "  %61 = load double, double* %23, align 8, !tbaa !32
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %60 = load double, double* %22, align 8, !tbaa !32
LICM:         %61 = load double, double* %23, align 8, !tbaa !32
LICM:     Invariant = "  %65 = fdiv double %4, %61
LICM:       Checking dependences
LICM:         Dependent instruction = "  %61 = load double, double* %23, align 8, !tbaa !32
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %61 = load double, double* %23, align 8, !tbaa !32
LICM:     Invariant = "  %68 = load double, double* %20, align 8, !tbaa !32
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %69 = load double, double* %21, align 8, !tbaa !32
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %70 = fdiv double %68, %69
LICM:       Checking dependences
LICM:         Dependent instruction = "  %68 = load double, double* %20, align 8, !tbaa !32
LICM:         Dependent instruction = "  %69 = load double, double* %21, align 8, !tbaa !32
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %68 = load double, double* %20, align 8, !tbaa !32
LICM:         %69 = load double, double* %21, align 8, !tbaa !32
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %41 = fdiv double %39, %40
LICM:           It can be hoisted
LICM:         Invariant   %62 = fdiv double %60, %61
LICM:           It can be hoisted
LICM:         Invariant   %65 = fdiv double %4, %61
LICM:           It can be hoisted
LICM:         Invariant   %70 = fdiv double %68, %69
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "init_array"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 513
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 513"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %.loopexit.loopexit, label %72, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "init_array"
EnablersManager:     Entry instruction =   %exitcond8 = icmp eq i64 %indvars.iv6, 513
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond8, label %87, label %48, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "init_array"
EnablersManager:     Entry instruction =   %exitcond11 = icmp eq i64 %indvars.iv9, 513
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond11, label %88, label %45, !prof !35
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (7.892765e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (7.892742e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (3.893334e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (3.988280e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (5.445576e-05%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (5.445576e-05%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (5.445576e-05%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (2.107218e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (2.107215e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (2.101629e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Function "xmalloc"
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Function "polybench_timer_print"
Noelle:  Function "polybench_timer_stop"
Noelle:  Function "polybench_timer_start"
Noelle:  Function "polybench_flush_cache"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4194560" (0.000000e+00%)
Noelle:  Function "print_array"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (0.000000e+00%)
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (7.892765e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (7.892745e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (3.893336e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (3.988282e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (5.445578e-05%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (5.445578e-05%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (5.445578e-05%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (2.107219e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (2.107216e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (2.101630e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Function "xmalloc"
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Function "polybench_timer_print"
Noelle:  Function "polybench_timer_stop"
Noelle:  Function "polybench_timer_start"
Noelle:  Function "polybench_flush_cache"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4194560" (0.000000e+00%)
Noelle:  Function "print_array"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (0.000000e+00%)
NOELLE: FixedPoint:       There are 0 different instructions and -11 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.UkyqqATJho -o /tmp/tmp.UkyqqATJho
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.UkyqqATJho -o /tmp/tmp.UkyqqATJho
NOELLE: FixedPoint:     Invocation 4
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.dn6PR7k7FY -o /tmp/tmp.UkyqqATJho
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.dn6PR7k7FY -o /tmp/tmp.UkyqqATJho
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.dn6PR7k7FY -o /tmp/tmp.UkyqqATJho
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (7.892765e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (7.892745e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (3.893336e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (3.988282e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (5.445578e-05%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (5.445578e-05%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (5.445578e-05%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (2.107219e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (2.107216e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (2.101630e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Disable "polybench_alloc_data" as cold function
Noelle:  Function "xmalloc"
Noelle:  Disable "xmalloc" as cold function
Noelle:  Function "print_array"
Noelle:  Disable "print_array" as cold function
EnablersManager:   Try to improve all 7 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 512
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 512"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %130, label %97, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond6 = icmp eq i64 %indvars.iv4, 512
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond6, label %200, label %166, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond9 = icmp eq i64 %indvars.iv7, 512
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512"
LICM:     Invariant = "  store double %83, double* %44, align 8, !tbaa !31
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond9, label %202, label %85, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "kernel_fdtd_apml"
EnablersManager:     Entry instruction =   %exitcond12 = icmp eq i64 %indvars.iv10, 512
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond12, label %203, label %36, !prof !35
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "init_array"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 513
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 513"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %.loopexit.loopexit, label %72, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "init_array"
EnablersManager:     Entry instruction =   %exitcond8 = icmp eq i64 %indvars.iv6, 513
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond8, label %87, label %48, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "init_array"
EnablersManager:     Entry instruction =   %exitcond11 = icmp eq i64 %indvars.iv9, 513
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond11, label %88, label %45, !prof !35
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (7.892765e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (7.892745e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (3.893336e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (3.988282e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (5.445578e-05%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (5.445578e-05%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (5.445578e-05%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (2.107219e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (2.107216e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (2.101630e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Function "xmalloc"
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Function "polybench_timer_print"
Noelle:  Function "polybench_timer_stop"
Noelle:  Function "polybench_timer_start"
Noelle:  Function "polybench_flush_cache"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4194560" (0.000000e+00%)
Noelle:  Function "print_array"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (0.000000e+00%)
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512" (7.892765e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512" (7.892745e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512" (3.893336e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512" (3.988282e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513" (5.445578e-05%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513" (5.445578e-05%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (5.445578e-05%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (2.107219e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (2.107216e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (2.101630e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Function "xmalloc"
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Function "polybench_timer_print"
Noelle:  Function "polybench_timer_stop"
Noelle:  Function "polybench_timer_start"
Noelle:  Function "polybench_flush_cache"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4194560" (0.000000e+00%)
Noelle:  Function "print_array"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: Enablers: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true baseline_pre.bc -o baseline_pre.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata baseline_pre.bc -o baseline_pre.bc
Running: ./baseline_pre_prof  in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PolyBench/benchmarks/fdtd-apml
--------------------------------------------------------------------------------------
DONE
opt -pgo-test-profile-file=/tmp/tmp.KqphEQNnex -block-freq -pgo-instr-use baseline_pre.bc -o baseline_with_metadata.bc
noelle-load -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
PDGAnalysis: Construct PDG from Analysis
Embed PDG as metadata
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512, !noelle.pdg.inst.id !67" (7.892764e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512, !noelle.pdg.inst.id !105" (7.892750e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512, !noelle.pdg.inst.id !122" (3.893338e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512, !noelle.pdg.inst.id !204" (3.988284e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513, !noelle.pdg.inst.id !55" (5.445581e-05%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513, !noelle.pdg.inst.id !73" (5.445581e-05%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513, !noelle.pdg.inst.id !90" (5.445581e-05%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513, !noelle.pdg.inst.id !107" (2.107220e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513, !noelle.pdg.inst.id !115" (2.107217e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513, !noelle.pdg.inst.id !146" (2.101631e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Disable "polybench_alloc_data" as cold function
Noelle:  Function "xmalloc"
Noelle:  Disable "xmalloc" as cold function
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Disable "polybench_prepare_instruments" as cold function
Noelle:  Function "polybench_timer_print"
Noelle:  Disable "polybench_timer_print" as cold function
Noelle:  Function "polybench_timer_stop"
Noelle:  Disable "polybench_timer_stop" as cold function
Noelle:  Function "polybench_timer_start"
Noelle:  Disable "polybench_timer_start" as cold function
Noelle:  Function "polybench_flush_cache"
Noelle:  Disable "polybench_flush_cache" as cold function
Noelle:  Function "print_array"
Noelle:  Disable "print_array" as cold function
Planner:    There are 7 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:  There are 2 loop nesting trees in the program
Planner:    ID: 3 (1)
Planner:      Function: "init_array"
Planner:      Loop: "  %exitcond11 = icmp eq i64 %indvars.iv9, 513, !noelle.pdg.inst.id !107"
Planner:      Loop nesting level: 1
Planner:      Hotness = 2.107220e+01 %
Planner:      Average instructions per invocation = 2.978815e+09 %
Planner:      Average iterations per invocation = 5.130000e+02 %
Planner:    
Planner:      ID: 4 (2)
Planner:        Function: "init_array"
Planner:        Loop: "  %exitcond8 = icmp eq i64 %indvars.iv6, 513, !noelle.pdg.inst.id !115"
Planner:        Loop nesting level: 2
Planner:        Hotness = 2.107217e+01 %
Planner:        Average instructions per invocation = 5.806649e+06 %
Planner:        Average iterations per invocation = 5.139981e+02 %
Planner:      
Planner:        ID: 5 (3)
Planner:          Function: "init_array"
Planner:          Loop: "  %exitcond = icmp eq i64 %indvars.iv, 513, !noelle.pdg.inst.id !146"
Planner:          Loop nesting level: 3
Planner:          Hotness = 2.101631e+01 %
Planner:          Average instructions per invocation = 1.128900e+04 %
Planner:          Average iterations per invocation = 5.139999e+02 %
Planner:        
Planner:    ID: 6 (1)
Planner:      Function: "kernel_fdtd_apml"
Planner:      Loop: "  %exitcond12 = icmp eq i64 %indvars.iv10, 512, !noelle.pdg.inst.id !67"
Planner:      Loop nesting level: 1
Planner:      Hotness = 7.892764e+01 %
Planner:      Average instructions per invocation = 1.115739e+10 %
Planner:      Average iterations per invocation = 5.120000e+02 %
Planner:    
Planner:      ID: 7 (2)
Planner:        Function: "kernel_fdtd_apml"
Planner:        Loop: "  %exitcond9 = icmp eq i64 %indvars.iv7, 512, !noelle.pdg.inst.id !105"
Planner:        Loop nesting level: 2
Planner:        Hotness = 7.892750e+01 %
Planner:        Average instructions per invocation = 2.179175e+07 %
Planner:        Average iterations per invocation = 5.129980e+02 %
Planner:      
Planner:        ID: 8 (3)
Planner:          Function: "kernel_fdtd_apml"
Planner:          Loop: "  %exitcond = icmp eq i64 %indvars.iv, 512, !noelle.pdg.inst.id !122"
Planner:          Loop nesting level: 3
Planner:          Hotness = 3.893338e+01 %
Planner:          Average instructions per invocation = 2.099500e+04 %
Planner:          Average iterations per invocation = 5.130000e+02 %
Planner:        
Planner:        ID: 9 (3)
Planner:          Function: "kernel_fdtd_apml"
Planner:          Loop: "  %exitcond6 = icmp eq i64 %indvars.iv4, 512, !noelle.pdg.inst.id !204"
Planner:          Loop nesting level: 3
Planner:          Hotness = 3.988284e+01 %
Planner:          Average instructions per invocation = 2.150700e+04 %
Planner:          Average iterations per invocation = 5.130000e+02 %
Planner:        
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 3
Planner: LoopSelector:      Function: "init_array"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %exitcond11 = icmp eq i64 %indvars.iv9, 513, !noelle.pdg.inst.id !107"
Planner: LoopSelector:      Coverage: 2.107220e+01%
Planner: LoopSelector:      Whole-program savings = 2.107220e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 4
Planner: LoopSelector:      Function: "init_array"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %exitcond8 = icmp eq i64 %indvars.iv6, 513, !noelle.pdg.inst.id !115"
Planner: LoopSelector:      Coverage: 2.107217e+01%
Planner: LoopSelector:      Whole-program savings = 2.107217e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 5
Planner: LoopSelector:      Function: "init_array"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %exitcond = icmp eq i64 %indvars.iv, 513, !noelle.pdg.inst.id !146"
Planner: LoopSelector:      Coverage: 2.101631e+01%
Planner: LoopSelector:      Whole-program savings = 2.101631e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 6
Planner: LoopSelector:      Function: "kernel_fdtd_apml"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %exitcond12 = icmp eq i64 %indvars.iv10, 512, !noelle.pdg.inst.id !67"
Planner: LoopSelector:      Coverage: 7.892764e+01%
Planner: LoopSelector:      Whole-program savings = 7.892764e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 7
Planner: LoopSelector:      Function: "kernel_fdtd_apml"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %exitcond9 = icmp eq i64 %indvars.iv7, 512, !noelle.pdg.inst.id !105"
Planner: LoopSelector:      Coverage: 7.892750e+01%
Planner: LoopSelector:      Whole-program savings = 7.892750e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 9
Planner: LoopSelector:      Function: "kernel_fdtd_apml"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %exitcond6 = icmp eq i64 %indvars.iv4, 512, !noelle.pdg.inst.id !204"
Planner: LoopSelector:      Coverage: 3.988284e+01%
Planner: LoopSelector:      Whole-program savings = 3.988284e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 8
Planner: LoopSelector:      Function: "kernel_fdtd_apml"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %exitcond = icmp eq i64 %indvars.iv, 512, !noelle.pdg.inst.id !122"
Planner: LoopSelector:      Coverage: 3.893338e+01%
Planner: LoopSelector:      Whole-program savings = 3.893338e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
Planner:   Maximum time saved = 9.999983e+01% (14136208703)
Planner:   Maximum time saved with DOALL only = 9.999983e+01% (14136208703)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "kernel_fdtd_apml"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 512, !noelle.pdg.inst.id !69" (7.892764e+01%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 512, !noelle.pdg.inst.id !108" (7.892750e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512, !noelle.pdg.inst.id !126" (3.893338e+01%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 512, !noelle.pdg.inst.id !208" (3.988284e+01%)
Noelle:  Function "init_array"
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 513, !noelle.pdg.inst.id !57" (5.445581e-05%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 513, !noelle.pdg.inst.id !75" (5.445581e-05%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 513, !noelle.pdg.inst.id !92" (5.445581e-05%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 513, !noelle.pdg.inst.id !109" (2.107220e+01%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 513, !noelle.pdg.inst.id !117" (2.107217e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 513, !noelle.pdg.inst.id !148" (2.101631e+01%)
Noelle:  Function "polybench_alloc_data"
Noelle:  Disable "polybench_alloc_data" as cold function
Noelle:  Function "xmalloc"
Noelle:  Disable "xmalloc" as cold function
Noelle:  Function "polybench_flush_cache"
Noelle:  Disable "polybench_flush_cache" as cold function
Noelle:  Function "polybench_prepare_instruments"
Noelle:  Disable "polybench_prepare_instruments" as cold function
Noelle:  Function "polybench_timer_start"
Noelle:  Disable "polybench_timer_start" as cold function
Noelle:  Function "polybench_timer_stop"
Noelle:  Disable "polybench_timer_stop" as cold function
Noelle:  Function "polybench_timer_print"
Noelle:  Disable "polybench_timer_print" as cold function
Noelle:  Function "print_array"
Noelle:  Disable "print_array" as cold function
Parallelizer:    There are 7 loops in the program we are going to consider
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "init_array"
Parallelizer: parallelizerLoop:   Loop 3 = "  %exitcond11 = icmp eq i64 %indvars.iv9, 513, !noelle.pdg.inst.id !109"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 = [513 x double]* %5
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 = [513 x double]* %6
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 = [513 x [513 x double]]* %7
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 = [513 x [513 x double]]* %8
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 = [513 x [513 x double]]* %9
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "init_array"
Parallelizer: parallelizerLoop:   Loop 4 = "  %exitcond8 = icmp eq i64 %indvars.iv6, 513, !noelle.pdg.inst.id !117"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 = [513 x double]* %5
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 = [513 x double]* %6
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 = [513 x [513 x double]]* %7
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 = [513 x [513 x double]]* %8
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 = [513 x [513 x double]]* %9
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %87 ], [ 0, %.preheader.preheader ], !noelle.pdg.inst.id !108
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %47 = sitofp i32 %46 to double, !noelle.pdg.inst.id !113
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "init_array"
Parallelizer: parallelizerLoop:   Loop 5 = "  %exitcond = icmp eq i64 %indvars.iv, 513, !noelle.pdg.inst.id !148"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 = [513 x [513 x double]]* %7
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 = [513 x [513 x double]]* %8
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 = [513 x [513 x double]]* %9
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %indvars.iv9 = phi i64 [ %indvars.iv.next10, %87 ], [ 0, %.preheader.preheader ], !noelle.pdg.inst.id !108
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %indvars.iv6 = phi i64 [ 0, %45 ], [ %indvars.iv.next7, %.loopexit.loopexit ], !noelle.pdg.inst.id !116
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %64 = fmul double %47, %63, !noelle.pdg.inst.id !139
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %67 = fmul double %47, %66, !noelle.pdg.inst.id !142
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %70 = fmul double %47, %69, !noelle.pdg.inst.id !145
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "kernel_fdtd_apml"
Parallelizer: parallelizerLoop:   Loop 6 = "  %exitcond12 = icmp eq i64 %indvars.iv10, 512, !noelle.pdg.inst.id !69"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %25 = load double, double* %21, align 8, !tbaa !56, !noelle.pdg.inst.id !61
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %26 = fdiv double %24, %25, !noelle.pdg.inst.id !62
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %27 = load double, double* %22, align 8, !tbaa !56, !noelle.pdg.inst.id !63
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %29 = fdiv double %27, %28, !noelle.pdg.inst.id !65
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %30 = fdiv double %4, %28, !noelle.pdg.inst.id !66
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 = double %3
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 = double %4
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 = [513 x double]* %5
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 = [513 x double]* %6
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 = [513 x double]* %7
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 = [513 x double]* %8
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 = [513 x [513 x double]]* %9
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 = [513 x [513 x double]]* %10
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 = [513 x [513 x double]]* %11
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 = [513 x [513 x double]]* %12
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 = double* %13
Parallelizer: parallelizerLoop:   Environment:   Live-in 16 = double* %14
Parallelizer: parallelizerLoop:   Environment:   Live-in 17 = double* %15
Parallelizer: parallelizerLoop:   Environment:   Live-in 18 = double* %16
Parallelizer: parallelizerLoop:   Environment:   Live-in 19 = double* %17
Parallelizer: parallelizerLoop:   Environment:   Live-in 20 = double* %18
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "kernel_fdtd_apml"
Parallelizer: parallelizerLoop:   Loop 7 = "  %exitcond9 = icmp eq i64 %indvars.iv7, 512, !noelle.pdg.inst.id !108"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %26 = fdiv double %24, %25, !noelle.pdg.inst.id !62
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %27 = load double, double* %22, align 8, !tbaa !56, !noelle.pdg.inst.id !63
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 = double %4
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 = [513 x double]* %5
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 = [513 x double]* %6
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 = [513 x double]* %7
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 = [513 x double]* %8
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 = [513 x [513 x double]]* %9
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 = [513 x [513 x double]]* %10
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 = [513 x [513 x double]]* %11
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 = [513 x [513 x double]]* %12
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 = double* %15
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 = double* %16
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 = double* %17
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 = double* %18
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 =   %indvars.iv10 = phi i64 [ %indvars.iv.next11, %183 ], [ 0, %19 ], !noelle.pdg.inst.id !68
Parallelizer: parallelizerLoop:   Environment:   Live-in 16 =   %40 = getelementptr inbounds [513 x [513 x double]], [513 x [513 x double]]* %12, i64 %indvars.iv10, i64 512, i64 512, !noelle.pdg.inst.id !81
Parallelizer: parallelizerLoop:   Environment:   Live-in 17 =   %41 = bitcast double* %39 to i64*, !noelle.pdg.inst.id !82
Parallelizer: parallelizerLoop:   Environment:   Live-in 18 =   %43 = fmul double %42, %3, !noelle.pdg.inst.id !84
Parallelizer: parallelizerLoop:   Environment:   Live-in 19 =   %45 = fmul double %44, %3, !noelle.pdg.inst.id !86
Parallelizer: parallelizerLoop:   Environment:   Live-in 20 =   %46 = fdiv double %43, %25, !noelle.pdg.inst.id !87
Parallelizer: parallelizerLoop:   Environment:   Live-in 21 =   %47 = fdiv double %45, %25, !noelle.pdg.inst.id !88
Parallelizer: parallelizerLoop:   Environment:   Live-in 22 =   %54 = fsub double %52, %53, !noelle.pdg.inst.id !95
Parallelizer: parallelizerLoop:   Environment:   Live-in 23 =   %58 = fsub double %56, %57, !noelle.pdg.inst.id !99
Parallelizer: parallelizerLoop:   Environment:   Live-in 24 =   %64 = fsub double %62, %63, !noelle.pdg.inst.id !105
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "kernel_fdtd_apml"
Parallelizer: parallelizerLoop:   Loop 9 = "  %exitcond6 = icmp eq i64 %indvars.iv4, 512, !noelle.pdg.inst.id !208"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %143 = fdiv double %27, %142, !noelle.pdg.inst.id !203
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %144 = fdiv double %4, %142, !noelle.pdg.inst.id !204
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %145 = load i64, i64* %71, align 8, !tbaa !56, !noelle.pdg.inst.id !205
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %181 ], [ 0, %32 ], !noelle.pdg.inst.id !107
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 = [513 x double]* %5
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 = [513 x [513 x double]]* %9
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 = [513 x [513 x double]]* %10
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 = [513 x [513 x double]]* %11
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 = [513 x [513 x double]]* %12
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 = double* %15
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 = double* %16
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %indvars.iv10 = phi i64 [ %indvars.iv.next11, %183 ], [ 0, %19 ], !noelle.pdg.inst.id !68
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %43 = fmul double %42, %3, !noelle.pdg.inst.id !84
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %45 = fmul double %44, %3, !noelle.pdg.inst.id !86
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 =   %67 = getelementptr inbounds [513 x double], [513 x double]* %7, i64 %indvars.iv10, i64 %indvars.iv7, !noelle.pdg.inst.id !114
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 =   %70 = getelementptr inbounds [513 x double], [513 x double]* %8, i64 %indvars.iv10, i64 %indvars.iv7, !noelle.pdg.inst.id !117
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "kernel_fdtd_apml"
Parallelizer: parallelizerLoop:   Loop 8 = "  %exitcond = icmp eq i64 %indvars.iv, 512, !noelle.pdg.inst.id !126"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %indvars.iv7 = phi i64 [ %indvars.iv.next8, %181 ], [ 0, %32 ], !noelle.pdg.inst.id !107
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 = [513 x [513 x double]]* %9
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 = [513 x [513 x double]]* %10
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 = [513 x [513 x double]]* %11
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 = [513 x [513 x double]]* %12
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 = double* %15
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 = double* %16
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %indvars.iv10 = phi i64 [ %indvars.iv.next11, %183 ], [ 0, %19 ], !noelle.pdg.inst.id !68
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %43 = fmul double %42, %3, !noelle.pdg.inst.id !84
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %45 = fmul double %44, %3, !noelle.pdg.inst.id !86
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1, !noelle.pdg.inst.id !113
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %67 = getelementptr inbounds [513 x double], [513 x double]* %7, i64 %indvars.iv10, i64 %indvars.iv7, !noelle.pdg.inst.id !114
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %70 = getelementptr inbounds [513 x double], [513 x double]* %8, i64 %indvars.iv10, i64 %indvars.iv7, !noelle.pdg.inst.id !117
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %74 = fdiv double %72, %73, !noelle.pdg.inst.id !121
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 =   %75 = fdiv double %4, %73, !noelle.pdg.inst.id !122
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 =   %76 = load i64, i64* %71, align 8, !tbaa !56, !noelle.pdg.inst.id !123
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc fdtd-apml.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PolyBench/benchmarks/fdtd-apml'
