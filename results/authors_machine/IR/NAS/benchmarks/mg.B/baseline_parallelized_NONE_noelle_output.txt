make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/mg.B'
./runEnablers.sh mg.B mg.B.bc simlarge "-lm -lstdc++ -lpthread " -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/mg.B /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/mg.B
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/mg.B
The IR has already been transformed for enabling parallelization
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %28 = tail call i32 @fgetc(%struct._IO_FILE* nonnull %22) #12, !noelle.pdg.inst.id !3508" (0.000000e+00%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %38 = tail call i32 @fgetc(%struct._IO_FILE* nonnull %22), !noelle.pdg.inst.id !463" (0.000000e+00%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %43 = call i32 @fgetc(%struct._IO_FILE* nonnull %22), !noelle.pdg.inst.id !469" (0.000000e+00%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 8, !noelle.pdg.inst.id !10956" (0.000000e+00%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv61, 8, !noelle.pdg.inst.id !10973" (6.572002e-08%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %111 = icmp sgt i64 %indvars.iv59, 0, !noelle.pdg.inst.id !11053" (1.304882e-03%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %124 = icmp slt i64 %indvars.iv57, %115, !noelle.pdg.inst.id !11069" (1.304727e-03%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %133 = icmp slt i64 %indvars.iv55, %127, !noelle.pdg.inst.id !11079" (1.297084e-03%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %154 = icmp slt i64 %indvars.iv53, %147, !noelle.pdg.inst.id !11101" (8.946355e-04%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %164 = icmp slt i64 %indvars.iv51, %157, !noelle.pdg.inst.id !11112" (8.906088e-04%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %177 = icmp sgt i64 %indvars.iv49, 0, !noelle.pdg.inst.id !11127" (1.304882e-03%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %190 = icmp slt i64 %indvars.iv47, %181, !noelle.pdg.inst.id !11140" (1.304727e-03%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %199 = icmp slt i64 %indvars.iv, %193, !noelle.pdg.inst.id !11149" (1.297084e-03%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %301 = load i32, i32* %10, align 4, !tbaa !10934, !noelle.pdg.inst.id !166" (9.012041e+01%)
Noelle:  Function "mg3P"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv10, %26, !noelle.pdg.inst.id !11578" (5.653302e+00%)
Noelle:     Loop "  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !noelle.pdg.inst.id !11623" (8.942823e+00%)
Noelle:     Loop "  %257 = icmp slt i64 %indvars.iv72.i, %255, !noelle.pdg.inst.id !11800" (0.000000e+00%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %267 = icmp slt i64 %indvars.iv64.i, %253, !noelle.pdg.inst.id !11812" (0.000000e+00%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %275 = icmp slt i64 %indvars.iv60.i, %251, !noelle.pdg.inst.id !11823" (0.000000e+00%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %293 = icmp slt i64 %indvars.iv62.i, %251, !noelle.pdg.inst.id !11840" (0.000000e+00%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %315 = icmp slt i64 %indvars.iv70.i, %253, !noelle.pdg.inst.id !11861" (0.000000e+00%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %322 = icmp slt i64 %indvars.iv66.i, %251, !noelle.pdg.inst.id !11871" (0.000000e+00%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %346 = icmp slt i64 %indvars.iv68.i, %251, !noelle.pdg.inst.id !11892" (0.000000e+00%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %380 = icmp slt i64 %indvars.iv58.i, %255, !noelle.pdg.inst.id !11923" (0.000000e+00%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %390 = icmp slt i64 %indvars.iv50.i, %253, !noelle.pdg.inst.id !11936" (0.000000e+00%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %398 = icmp slt i64 %indvars.iv46.i, %251, !noelle.pdg.inst.id !11947" (0.000000e+00%)
Noelle:  Disable loop "25" as cold code
Noelle:     Loop "  %423 = icmp slt i64 %indvars.iv48.i, %251, !noelle.pdg.inst.id !11968" (0.000000e+00%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  %454 = icmp slt i64 %indvars.iv56.i, %253, !noelle.pdg.inst.id !11994" (0.000000e+00%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  %461 = icmp slt i64 %indvars.iv52.i, %251, !noelle.pdg.inst.id !12004" (0.000000e+00%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  %496 = icmp slt i64 %indvars.iv54.i, %251, !noelle.pdg.inst.id !12031" (0.000000e+00%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  %119 = icmp slt i64 %indvars.iv44.i, %118, !noelle.pdg.inst.id !11657" (8.303045e-01%)
Noelle:     Loop "  %131 = icmp slt i64 %indvars.iv42.i, %117, !noelle.pdg.inst.id !11671" (8.302547e-01%)
Noelle:     Loop "  %142 = icmp slt i64 %indvars.iv.i, %115, !noelle.pdg.inst.id !11682" (1.736813e-01%)
Noelle:     Loop "  %164 = icmp slt i64 %indvars.iv34.i, %116, !noelle.pdg.inst.id !11705" (1.632048e-01%)
Noelle:     Loop "  %186 = icmp slt i64 %indvars.iv36.i, %116, !noelle.pdg.inst.id !11725" (1.632048e-01%)
Noelle:     Loop "  %205 = icmp slt i64 %indvars.iv38.i, %116, !noelle.pdg.inst.id !11744" (1.632048e-01%)
Noelle:     Loop "  %224 = icmp slt i64 %indvars.iv40.i, %116, !noelle.pdg.inst.id !11763" (1.632048e-01%)
Noelle:     Loop "  %593 = icmp slt i64 %indvars.iv7.i, %589, !noelle.pdg.inst.id !12119" (3.469064e+00%)
Noelle:     Loop "  %604 = icmp slt i64 %indvars.iv5.i, %588, !noelle.pdg.inst.id !12132" (3.468975e+00%)
Noelle:     Loop "  %624 = icmp slt i64 %indvars.iv.i3, %586, !noelle.pdg.inst.id !12148" (1.771196e+00%)
Noelle:     Loop "  %654 = icmp slt i64 %indvars.iv3.i, %587, !noelle.pdg.inst.id !12174" (1.683457e+00%)
Noelle:     Loop "  %716 = icmp slt i64 %indvars.iv7.i3, %712, !noelle.pdg.inst.id !12232" (3.637256e+00%)
Noelle:     Loop "  %727 = icmp slt i64 %indvars.iv5.i6, %711, !noelle.pdg.inst.id !12244" (3.637167e+00%)
Noelle:     Loop "  %747 = icmp slt i64 %indvars.iv.i8, %709, !noelle.pdg.inst.id !12259" (1.771196e+00%)
Noelle:     Loop "  %777 = icmp slt i64 %indvars.iv3.i11, %710, !noelle.pdg.inst.id !12284" (1.851649e+00%)
Noelle:  Function "resid"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv7, %21, !noelle.pdg.inst.id !214" (5.129621e+01%)
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv5, %20, !noelle.pdg.inst.id !230" (5.129599e+01%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv, %18, !noelle.pdg.inst.id !246" (2.569937e+01%)
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv3, %19, !noelle.pdg.inst.id !273" (2.550022e+01%)
Noelle:  Function "psinv"
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv7, %20, !noelle.pdg.inst.id !211" (2.526413e+01%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv5, %19, !noelle.pdg.inst.id !226" (2.526404e+01%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv, %17, !noelle.pdg.inst.id !242" (1.226562e+01%)
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv3, %18, !noelle.pdg.inst.id !268" (1.295547e+01%)
Noelle:  Function "rprj3"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv11, %23, !noelle.pdg.inst.id !279" (5.533287e+00%)
Noelle:     Loop "  %43 = icmp slt i64 %indvars.iv9, %22, !noelle.pdg.inst.id !301" (5.533156e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %indvars.iv, %20, !noelle.pdg.inst.id !323" (1.981668e+00%)
Noelle:     Loop "  %102 = icmp slt i64 %indvars.iv7, %21, !noelle.pdg.inst.id !355" (3.533586e+00%)
Noelle:  Function "interp"
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv72, %163, !noelle.pdg.inst.id !1773" (0.000000e+00%)
Noelle:  Disable loop "57" as cold code
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv64, %161, !noelle.pdg.inst.id !1785" (0.000000e+00%)
Noelle:  Disable loop "58" as cold code
Noelle:     Loop "  %183 = icmp slt i64 %indvars.iv60, %159, !noelle.pdg.inst.id !1796" (0.000000e+00%)
Noelle:  Disable loop "59" as cold code
Noelle:     Loop "  %201 = icmp slt i64 %indvars.iv62, %159, !noelle.pdg.inst.id !1813" (0.000000e+00%)
Noelle:  Disable loop "60" as cold code
Noelle:     Loop "  %223 = icmp slt i64 %indvars.iv70, %161, !noelle.pdg.inst.id !1834" (0.000000e+00%)
Noelle:  Disable loop "61" as cold code
Noelle:     Loop "  %230 = icmp slt i64 %indvars.iv66, %159, !noelle.pdg.inst.id !1844" (0.000000e+00%)
Noelle:  Disable loop "62" as cold code
Noelle:     Loop "  %254 = icmp slt i64 %indvars.iv68, %159, !noelle.pdg.inst.id !1865" (0.000000e+00%)
Noelle:  Disable loop "63" as cold code
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv58, %163, !noelle.pdg.inst.id !1896" (0.000000e+00%)
Noelle:  Disable loop "64" as cold code
Noelle:     Loop "  %298 = icmp slt i64 %indvars.iv50, %161, !noelle.pdg.inst.id !1909" (0.000000e+00%)
Noelle:  Disable loop "65" as cold code
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv46, %159, !noelle.pdg.inst.id !1920" (0.000000e+00%)
Noelle:  Disable loop "66" as cold code
Noelle:     Loop "  %331 = icmp slt i64 %indvars.iv48, %159, !noelle.pdg.inst.id !1941" (0.000000e+00%)
Noelle:  Disable loop "67" as cold code
Noelle:     Loop "  %362 = icmp slt i64 %indvars.iv56, %161, !noelle.pdg.inst.id !1967" (0.000000e+00%)
Noelle:  Disable loop "68" as cold code
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv52, %159, !noelle.pdg.inst.id !1977" (0.000000e+00%)
Noelle:  Disable loop "69" as cold code
Noelle:     Loop "  %404 = icmp slt i64 %indvars.iv54, %159, !noelle.pdg.inst.id !2004" (0.000000e+00%)
Noelle:  Disable loop "70" as cold code
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv44, %26, !noelle.pdg.inst.id !1626" (5.599622e+00%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv42, %25, !noelle.pdg.inst.id !1644" (5.599574e+00%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv, %23, !noelle.pdg.inst.id !1655" (1.165068e+00%)
Noelle:     Loop "  %72 = icmp slt i64 %indvars.iv34, %24, !noelle.pdg.inst.id !1678" (1.105899e+00%)
Noelle:     Loop "  %94 = icmp slt i64 %indvars.iv36, %24, !noelle.pdg.inst.id !1698" (1.105899e+00%)
Noelle:     Loop "  %113 = icmp slt i64 %indvars.iv38, %24, !noelle.pdg.inst.id !1717" (1.105899e+00%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv40, %24, !noelle.pdg.inst.id !1736" (1.105899e+00%)
Noelle:  Function "zran3"
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv46, %43, !noelle.pdg.inst.id !709" (1.126270e+00%)
Noelle:     Loop "  %63 = icmp slt i64 %indvars.iv44, %42, !noelle.pdg.inst.id !722" (1.126253e+00%)
Noelle:     Loop "  %68 = icmp sgt i64 %indvars.iv.i1, %44, !noelle.pdg.inst.id !731" (1.121871e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv42, 10, !noelle.pdg.inst.id !807" (4.745208e-07%)
Noelle:  Disable loop "81" as cold code
Noelle:     Loop "  %161 = icmp slt i64 %indvars.iv40, %159, !noelle.pdg.inst.id !837" (5.624990e-01%)
Noelle:     Loop "  %167 = icmp slt i64 %indvars.iv38, %158, !noelle.pdg.inst.id !846" (5.624938e-01%)
Noelle:     Loop "  %173 = icmp slt i64 %indvars.iv36, %157, !noelle.pdg.inst.id !854" (5.611781e-01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, 9, !noelle.pdg.inst.id !866" (4.745877e-05%)
Noelle:  Disable loop "85" as cold code
Noelle:     Loop "  %exitcond9.i = icmp eq i64 %indvars.iv7.i, 9, !noelle.pdg.inst.id !893" (4.446015e-05%)
Noelle:  Disable loop "86" as cold code
Noelle:     Loop "  %217 = icmp sgt i64 %indvars.iv34, -1, !noelle.pdg.inst.id !922" (1.102760e-06%)
Noelle:  Disable loop "87" as cold code
Noelle:     Loop "  %262 = icmp slt i64 %indvars.iv32, %260, !noelle.pdg.inst.id !967" (2.694512e-01%)
Noelle:     Loop "  %268 = icmp slt i64 %indvars.iv30, %259, !noelle.pdg.inst.id !977" (2.694466e-01%)
Noelle:     Loop "  %271 = icmp slt i64 %indvars.iv28, %258, !noelle.pdg.inst.id !985" (2.682586e-01%)
Noelle:     Loop "  %277 = icmp sgt i64 %indvars.iv26, %263, !noelle.pdg.inst.id !997" (4.522429e-07%)
Noelle:  Disable loop "91" as cold code
Noelle:     Loop "  %295 = icmp sgt i64 %indvars.iv, %278, !noelle.pdg.inst.id !1016" (4.522429e-07%)
Noelle:  Disable loop "92" as cold code
Noelle:  Function "norm2u3"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv9, %15, !noelle.pdg.inst.id !75" (1.051518e+00%)
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv7, %14, !noelle.pdg.inst.id !88" (1.051504e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %13, !noelle.pdg.inst.id !97" (1.047994e+00%)
Noelle:  Function "zero3"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv5, %7, !noelle.pdg.inst.id !46" (9.592805e-01%)
Noelle:     Loop "  %14 = icmp slt i64 %indvars.iv3, %6, !noelle.pdg.inst.id !58" (9.592208e-01%)
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv, %5, !noelle.pdg.inst.id !66" (9.525428e-01%)
Noelle:  Function "comm3"
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv12, %16, !noelle.pdg.inst.id !151" (2.850094e-01%)
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv8, %14, !noelle.pdg.inst.id !158" (1.221637e-01%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv10, %15, !noelle.pdg.inst.id !182" (1.625495e-01%)
Noelle:     Loop "  %65 = icmp slt i64 %indvars.iv6, %63, !noelle.pdg.inst.id !214" (1.125473e-01%)
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv, %15, !noelle.pdg.inst.id !232" (1.118634e-01%)
Noelle:  Function "power"
Noelle:  Disable "power" as cold function
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "setup"
Noelle:  Disable "setup" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "vranlc"
Noelle:  Disable "vranlc" as cold function
Noelle:  Function "rep_nrm"
Noelle:  Disable "rep_nrm" as cold function
Noelle:  Function "showall"
Noelle:  Disable "showall" as cold function
Planner:    There are 57 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:    Loop 18 has 1.144919e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 41 has 7.952381e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 42 has 6.952381e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 61 has 1.220179e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 59 has 1.298506e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 60 has 1.220179e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 63 has 1.220179e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 62 has 1.220179e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 31 has 1.809000e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:  There are 15 loop nesting trees in the program
Planner:    ID: 68 (1)
Planner:      Function: "mg3P"
Planner:      Loop: "  %716 = icmp slt i64 %indvars.iv7.i3, %712, !noelle.pdg.inst.id !12232"
Planner:      Loop nesting level: 2
Planner:      Hotness = 3.637256e+00 %
Planner:      Average instructions per invocation = 2.591538e+07 %
Planner:      Average iterations per invocation = 4.299206e+01 %
Planner:    
Planner:      ID: 69 (2)
Planner:        Function: "mg3P"
Planner:        Loop: "  %727 = icmp slt i64 %indvars.iv5.i6, %711, !noelle.pdg.inst.id !12244"
Planner:        Loop nesting level: 3
Planner:        Hotness = 3.637167e+00 %
Planner:        Average instructions per invocation = 6.170179e+05 %
Planner:        Average iterations per invocation = 8.766648e+01 %
Planner:      
Planner:        ID: 70 (3)
Planner:          Function: "mg3P"
Planner:          Loop: "  %747 = icmp slt i64 %indvars.iv.i8, %709, !noelle.pdg.inst.id !12259"
Planner:          Loop nesting level: 4
Planner:          Hotness = 1.771196e+00 %
Planner:          Average instructions per invocation = 3.466961e+03 %
Planner:          Average iterations per invocation = 1.127407e+02 %
Planner:        
Planner:        ID: 71 (3)
Planner:          Function: "mg3P"
Planner:          Loop: "  %777 = icmp slt i64 %indvars.iv3.i11, %710, !noelle.pdg.inst.id !12284"
Planner:          Loop nesting level: 4
Planner:          Hotness = 1.851649e+00 %
Planner:          Average instructions per invocation = 3.624442e+03 %
Planner:          Average iterations per invocation = 1.107407e+02 %
Planner:        
Planner:    ID: 64 (1)
Planner:      Function: "mg3P"
Planner:      Loop: "  %593 = icmp slt i64 %indvars.iv7.i, %589, !noelle.pdg.inst.id !12119"
Planner:      Loop nesting level: 2
Planner:      Hotness = 3.469064e+00 %
Planner:      Average instructions per invocation = 2.471702e+07 %
Planner:      Average iterations per invocation = 4.299206e+01 %
Planner:    
Planner:      ID: 65 (2)
Planner:        Function: "mg3P"
Planner:        Loop: "  %604 = icmp slt i64 %indvars.iv5.i, %588, !noelle.pdg.inst.id !12132"
Planner:        Loop nesting level: 3
Planner:        Hotness = 3.468975e+00 %
Planner:        Average instructions per invocation = 5.884853e+05 %
Planner:        Average iterations per invocation = 8.766648e+01 %
Planner:      
Planner:        ID: 67 (3)
Planner:          Function: "mg3P"
Planner:          Loop: "  %654 = icmp slt i64 %indvars.iv3.i, %587, !noelle.pdg.inst.id !12174"
Planner:          Loop nesting level: 4
Planner:          Hotness = 1.683457e+00 %
Planner:          Average instructions per invocation = 3.295220e+03 %
Planner:          Average iterations per invocation = 1.107407e+02 %
Planner:        
Planner:        ID: 66 (3)
Planner:          Function: "mg3P"
Planner:          Loop: "  %624 = icmp slt i64 %indvars.iv.i3, %586, !noelle.pdg.inst.id !12148"
Planner:          Loop nesting level: 4
Planner:          Hotness = 1.771196e+00 %
Planner:          Average instructions per invocation = 3.466961e+03 %
Planner:          Average iterations per invocation = 1.127407e+02 %
Planner:        
Planner:    ID: 16 (1)
Planner:      Function: "zero3"
Planner:      Loop: "  %9 = icmp slt i64 %indvars.iv5, %7, !noelle.pdg.inst.id !46"
Planner:      Loop nesting level: 1
Planner:      Hotness = 9.592805e-01 %
Planner:      Average instructions per invocation = 5.703258e+06 %
Planner:      Average iterations per invocation = 4.499338e+01 %
Planner:    
Planner:      ID: 17 (2)
Planner:        Function: "zero3"
Planner:        Loop: "  %14 = icmp slt i64 %indvars.iv3, %6, !noelle.pdg.inst.id !58"
Planner:        Loop nesting level: 2
Planner:        Hotness = 9.592208e-01 %
Planner:        Average instructions per invocation = 1.296114e+05 %
Planner:        Average iterations per invocation = 1.134175e+02 %
Planner:      
Planner:    ID: 34 (1)
Planner:      Function: "norm2u3"
Planner:      Loop: "  %17 = icmp slt i64 %indvars.iv9, %15, !noelle.pdg.inst.id !75"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.051518e+00 %
Planner:      Average instructions per invocation = 2.359995e+08 %
Planner:      Average iterations per invocation = 2.567500e+02 %
Planner:    
Planner:      ID: 35 (2)
Planner:        Function: "norm2u3"
Planner:        Loop: "  %22 = icmp slt i64 %indvars.iv7, %14, !noelle.pdg.inst.id !88"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.051504e+00 %
Planner:        Average instructions per invocation = 9.218608e+05 %
Planner:        Average iterations per invocation = 2.569990e+02 %
Planner:      
Planner:        ID: 36 (3)
Planner:          Function: "norm2u3"
Planner:          Loop: "  %25 = icmp slt i64 %indvars.iv, %13, !noelle.pdg.inst.id !97"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.047994e+00 %
Planner:          Average instructions per invocation = 3.588999e+03 %
Planner:          Average iterations per invocation = 2.570000e+02 %
Planner:        
Planner:    ID: 23 (1)
Planner:      Function: "zran3"
Planner:      Loop: "  %161 = icmp slt i64 %indvars.iv40, %159, !noelle.pdg.inst.id !837"
Planner:      Loop nesting level: 1
Planner:      Hotness = 5.624990e-01 %
Planner:      Average instructions per invocation = 2.524911e+08 %
Planner:      Average iterations per invocation = 2.565000e+02 %
Planner:    
Planner:      ID: 24 (2)
Planner:        Function: "zran3"
Planner:        Loop: "  %167 = icmp slt i64 %indvars.iv38, %158, !noelle.pdg.inst.id !846"
Planner:        Loop nesting level: 2
Planner:        Hotness = 5.624938e-01 %
Planner:        Average instructions per invocation = 9.862843e+05 %
Planner:        Average iterations per invocation = 2.569980e+02 %
Planner:      
Planner:        ID: 25 (3)
Planner:          Function: "zran3"
Planner:          Loop: "  %173 = icmp slt i64 %indvars.iv36, %157, !noelle.pdg.inst.id !854"
Planner:          Loop nesting level: 3
Planner:          Hotness = 5.611781e-01 %
Planner:          Average instructions per invocation = 3.843661e+03 %
Planner:          Average iterations per invocation = 2.569999e+02 %
Planner:        
Planner:    ID: 57 (1)
Planner:      Function: "mg3P"
Planner:      Loop: "  %119 = icmp slt i64 %indvars.iv44.i, %118, !noelle.pdg.inst.id !11657"
Planner:      Loop nesting level: 2
Planner:      Hotness = 8.303045e-01 %
Planner:      Average instructions per invocation = 5.915905e+06 %
Planner:      Average iterations per invocation = 2.299206e+01 %
Planner:    
Planner:      ID: 58 (2)
Planner:        Function: "mg3P"
Planner:        Loop: "  %131 = icmp slt i64 %indvars.iv42.i, %117, !noelle.pdg.inst.id !11671"
Planner:        Loop nesting level: 3
Planner:        Hotness = 8.302547e-01 %
Planner:        Average instructions per invocation = 2.688886e+05 %
Planner:        Average iterations per invocation = 4.431782e+01 %
Planner:      
Planner:    ID: 94 (1)
Planner:      Function: "interp"
Planner:      Loop: "  %27 = icmp slt i64 %indvars.iv44, %26, !noelle.pdg.inst.id !1626"
Planner:      Loop nesting level: 1
Planner:      Hotness = 5.599622e+00 %
Planner:      Average instructions per invocation = 2.393832e+08 %
Planner:      Average iterations per invocation = 1.299524e+02 %
Planner:    
Planner:      ID: 95 (2)
Planner:        Function: "interp"
Planner:        Loop: "  %39 = icmp slt i64 %indvars.iv42, %25, !noelle.pdg.inst.id !1644"
Planner:        Loop nesting level: 2
Planner:        Hotness = 5.599574e+00 %
Planner:        Average instructions per invocation = 1.855668e+06 %
Planner:        Average iterations per invocation = 1.299996e+02 %
Planner:      
Planner:        ID: 99 (3)
Planner:          Function: "interp"
Planner:          Loop: "  %113 = icmp slt i64 %indvars.iv38, %24, !noelle.pdg.inst.id !1717"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.105899e+00 %
Planner:          Average instructions per invocation = 2.841000e+03 %
Planner:          Average iterations per invocation = 1.300000e+02 %
Planner:        
Planner:        ID: 97 (3)
Planner:          Function: "interp"
Planner:          Loop: "  %72 = icmp slt i64 %indvars.iv34, %24, !noelle.pdg.inst.id !1678"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.105899e+00 %
Planner:          Average instructions per invocation = 2.841000e+03 %
Planner:          Average iterations per invocation = 1.300000e+02 %
Planner:        
Planner:        ID: 98 (3)
Planner:          Function: "interp"
Planner:          Loop: "  %94 = icmp slt i64 %indvars.iv36, %24, !noelle.pdg.inst.id !1698"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.105899e+00 %
Planner:          Average instructions per invocation = 2.841000e+03 %
Planner:          Average iterations per invocation = 1.300000e+02 %
Planner:        
Planner:        ID: 100 (3)
Planner:          Function: "interp"
Planner:          Loop: "  %132 = icmp slt i64 %indvars.iv40, %24, !noelle.pdg.inst.id !1736"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.105899e+00 %
Planner:          Average instructions per invocation = 2.841000e+03 %
Planner:          Average iterations per invocation = 1.300000e+02 %
Planner:        
Planner:        ID: 96 (3)
Planner:          Function: "interp"
Planner:          Loop: "  %50 = icmp slt i64 %indvars.iv, %23, !noelle.pdg.inst.id !1655"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.165068e+00 %
Planner:          Average instructions per invocation = 2.993000e+03 %
Planner:          Average iterations per invocation = 1.310000e+02 %
Planner:        
Planner:    ID: 76 (1)
Planner:      Function: "psinv"
Planner:      Loop: "  %24 = icmp slt i64 %indvars.iv7, %20, !noelle.pdg.inst.id !211"
Planner:      Loop nesting level: 1
Planner:      Hotness = 2.526413e+01 %
Planner:      Average instructions per invocation = 5.400194e+08 %
Planner:      Average iterations per invocation = 1.299762e+02 %
Planner:    
Planner:      ID: 77 (2)
Planner:        Function: "psinv"
Planner:        Loop: "  %35 = icmp slt i64 %indvars.iv5, %19, !noelle.pdg.inst.id !226"
Planner:        Loop nesting level: 2
Planner:        Hotness = 2.526404e+01 %
Planner:        Average instructions per invocation = 4.186182e+06 %
Planner:        Average iterations per invocation = 2.550308e+02 %
Planner:      
Planner:        ID: 78 (3)
Planner:          Function: "psinv"
Planner:          Loop: "  %55 = icmp slt i64 %indvars.iv, %17, !noelle.pdg.inst.id !242"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.226562e+01 %
Planner:          Average instructions per invocation = 8.000519e+03 %
Planner:          Average iterations per invocation = 2.589845e+02 %
Planner:        
Planner:        ID: 79 (3)
Planner:          Function: "psinv"
Planner:          Loop: "  %85 = icmp slt i64 %indvars.iv3, %18, !noelle.pdg.inst.id !268"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.295547e+01 %
Planner:          Average instructions per invocation = 8.450488e+03 %
Planner:          Average iterations per invocation = 2.569845e+02 %
Planner:        
Planner:    ID: 107 (1)
Planner:      Function: "comm3"
Planner:      Loop: "  %65 = icmp slt i64 %indvars.iv6, %63, !noelle.pdg.inst.id !214"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.125473e-01 %
Planner:      Average instructions per invocation = 2.074725e+05 %
Planner:      Average iterations per invocation = 7.087269e+01 %
Planner:    
Planner:      ID: 108 (2)
Planner:        Function: "comm3"
Planner:        Loop: "  %78 = icmp slt i64 %indvars.iv, %15, !noelle.pdg.inst.id !232"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.118634e-01 %
Planner:        Average instructions per invocation = 2.951163e+03 %
Planner:        Average iterations per invocation = 1.744228e+02 %
Planner:      
Planner:    ID: 104 (1)
Planner:      Function: "comm3"
Planner:      Loop: "  %18 = icmp slt i64 %indvars.iv12, %16, !noelle.pdg.inst.id !151"
Planner:      Loop nesting level: 1
Planner:      Hotness = 2.850094e-01 %
Planner:      Average instructions per invocation = 5.253934e+05 %
Planner:      Average iterations per invocation = 6.887269e+01 %
Planner:    
Planner:      ID: 105 (2)
Planner:        Function: "comm3"
Planner:        Loop: "  %22 = icmp slt i64 %indvars.iv8, %14, !noelle.pdg.inst.id !158"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.221637e-01 %
Planner:        Average instructions per invocation = 3.317871e+03 %
Planner:        Average iterations per invocation = 1.754684e+02 %
Planner:      
Planner:      ID: 106 (2)
Planner:        Function: "comm3"
Planner:        Loop: "  %36 = icmp slt i64 %indvars.iv10, %15, !noelle.pdg.inst.id !182"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.625495e-01 %
Planner:        Average instructions per invocation = 4.414716e+03 %
Planner:        Average iterations per invocation = 1.774702e+02 %
Planner:      
Planner:    ID: 72 (1)
Planner:      Function: "rprj3"
Planner:      Loop: "  %25 = icmp slt i64 %indvars.iv11, %23, !noelle.pdg.inst.id !279"
Planner:      Loop nesting level: 1
Planner:      Hotness = 5.533287e+00 %
Planner:      Average instructions per invocation = 3.379249e+07 %
Planner:      Average iterations per invocation = 3.727891e+01 %
Planner:    
Planner:      ID: 73 (2)
Planner:        Function: "rprj3"
Planner:        Loop: "  %43 = icmp slt i64 %indvars.iv9, %22, !noelle.pdg.inst.id !301"
Planner:        Loop nesting level: 2
Planner:        Hotness = 5.533156e+00 %
Planner:        Average instructions per invocation = 9.312670e+05 %
Planner:        Average iterations per invocation = 8.699981e+01 %
Planner:      
Planner:        ID: 74 (3)
Planner:          Function: "rprj3"
Planner:          Loop: "  %69 = icmp slt i64 %indvars.iv, %20, !noelle.pdg.inst.id !323"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.981668e+00 %
Planner:          Average instructions per invocation = 3.878233e+03 %
Planner:          Average iterations per invocation = 1.117209e+02 %
Planner:        
Planner:        ID: 75 (3)
Planner:          Function: "rprj3"
Planner:          Loop: "  %102 = icmp slt i64 %indvars.iv7, %21, !noelle.pdg.inst.id !355"
Planner:          Loop nesting level: 3
Planner:          Hotness = 3.533586e+00 %
Planner:          Average instructions per invocation = 6.915419e+03 %
Planner:          Average iterations per invocation = 1.107209e+02 %
Planner:        
Planner:    ID: 29 (1)
Planner:      Function: "zran3"
Planner:      Loop: "  %262 = icmp slt i64 %indvars.iv32, %260, !noelle.pdg.inst.id !967"
Planner:      Loop nesting level: 1
Planner:      Hotness = 2.694512e-01 %
Planner:      Average instructions per invocation = 1.209496e+08 %
Planner:      Average iterations per invocation = 2.585000e+02 %
Planner:    
Planner:      ID: 30 (2)
Planner:        Function: "zran3"
Planner:        Loop: "  %268 = icmp slt i64 %indvars.iv30, %259, !noelle.pdg.inst.id !977"
Planner:        Loop nesting level: 2
Planner:        Hotness = 2.694466e-01 %
Planner:        Average instructions per invocation = 4.687889e+05 %
Planner:        Average iterations per invocation = 2.589981e+02 %
Planner:      
Planner:    ID: 13 (1)
Planner:      Function: "main"
Planner:      Loop: "  %301 = load i32, i32* %10, align 4, !tbaa !10934, !noelle.pdg.inst.id !166"
Planner:      Loop nesting level: 1
Planner:      Hotness = 9.012041e+01 %
Planner:      Average instructions per invocation = 8.090539e+10 %
Planner:      Average iterations per invocation = 2.000000e+01 %
Planner:    
Planner:    ID: 19 (1)
Planner:      Function: "zran3"
Planner:      Loop: "  %57 = icmp slt i64 %indvars.iv46, %43, !noelle.pdg.inst.id !709"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.126270e+00 %
Planner:      Average instructions per invocation = 5.055533e+08 %
Planner:      Average iterations per invocation = 2.565000e+02 %
Planner:    
Planner:      ID: 20 (2)
Planner:        Function: "zran3"
Planner:        Loop: "  %63 = icmp slt i64 %indvars.iv44, %42, !noelle.pdg.inst.id !722"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.126253e+00 %
Planner:        Average instructions per invocation = 1.974788e+06 %
Planner:        Average iterations per invocation = 2.569980e+02 %
Planner:      
Planner:        ID: 21 (3)
Planner:          Function: "zran3"
Planner:          Loop: "  %68 = icmp sgt i64 %indvars.iv.i1, %44, !noelle.pdg.inst.id !731"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.121871e+00 %
Planner:          Average instructions per invocation = 7.683999e+03 %
Planner:          Average iterations per invocation = 2.569999e+02 %
Planner:        
Planner:    ID: 37 (1)
Planner:      Function: "resid"
Planner:      Loop: "  %25 = icmp slt i64 %indvars.iv7, %21, !noelle.pdg.inst.id !214"
Planner:      Loop nesting level: 1
Planner:      Hotness = 5.129621e+01 %
Planner:      Average instructions per invocation = 1.046615e+09 %
Planner:      Average iterations per invocation = 2.569773e+02 %
Planner:    
Planner:      ID: 38 (2)
Planner:        Function: "resid"
Planner:        Loop: "  %38 = icmp slt i64 %indvars.iv5, %20, !noelle.pdg.inst.id !230"
Planner:        Loop nesting level: 2
Planner:        Hotness = 5.129599e+01 %
Planner:        Average instructions per invocation = 4.088322e+06 %
Planner:        Average iterations per invocation = 2.569999e+02 %
Planner:      
Planner:        ID: 39 (3)
Planner:          Function: "resid"
Planner:          Loop: "  %58 = icmp slt i64 %indvars.iv, %18, !noelle.pdg.inst.id !246"
Planner:          Loop nesting level: 3
Planner:          Hotness = 2.569937e+01 %
Planner:          Average instructions per invocation = 8.000999e+03 %
Planner:          Average iterations per invocation = 2.590000e+02 %
Planner:        
Planner:        ID: 40 (3)
Planner:          Function: "resid"
Planner:          Loop: "  %90 = icmp slt i64 %indvars.iv3, %19, !noelle.pdg.inst.id !273"
Planner:          Loop nesting level: 3
Planner:          Hotness = 2.550022e+01 %
Planner:          Average instructions per invocation = 7.938999e+03 %
Planner:          Average iterations per invocation = 2.570000e+02 %
Planner:        
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 70 saves only 1.771196e+00 when parallelized. Skip it
Planner: LoopSelector:  Loop 71 saves only 1.851649e+00 when parallelized. Skip it
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 68
Planner: LoopSelector:      Function: "mg3P"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %716 = icmp slt i64 %indvars.iv7.i3, %712, !noelle.pdg.inst.id !12232"
Planner: LoopSelector:      Coverage: 3.637256e+00%
Planner: LoopSelector:      Whole-program savings = 3.356935e+00%
Planner: LoopSelector:      Loop savings = 9.229307e+01%
Planner: LoopSelector:    Loop 69
Planner: LoopSelector:      Function: "mg3P"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %727 = icmp slt i64 %indvars.iv5.i6, %711, !noelle.pdg.inst.id !12244"
Planner: LoopSelector:      Coverage: 3.637167e+00%
Planner: LoopSelector:      Whole-program savings = 3.356846e+00%
Planner: LoopSelector:      Loop savings = 9.229288e+01%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 67 saves only 1.683457e+00 when parallelized. Skip it
Planner: LoopSelector:  Loop 66 saves only 1.771196e+00 when parallelized. Skip it
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 64
Planner: LoopSelector:      Function: "mg3P"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %593 = icmp slt i64 %indvars.iv7.i, %589, !noelle.pdg.inst.id !12119"
Planner: LoopSelector:      Coverage: 3.469064e+00%
Planner: LoopSelector:      Whole-program savings = 3.188743e+00%
Planner: LoopSelector:      Loop savings = 9.191941e+01%
Planner: LoopSelector:    Loop 65
Planner: LoopSelector:      Function: "mg3P"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %604 = icmp slt i64 %indvars.iv5.i, %588, !noelle.pdg.inst.id !12132"
Planner: LoopSelector:      Coverage: 3.468975e+00%
Planner: LoopSelector:      Whole-program savings = 3.188654e+00%
Planner: LoopSelector:      Loop savings = 9.191921e+01%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 16 saves only 8.235595e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 17 saves only 8.234998e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 34 saves only 8.263811e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 36 saves only 8.234451e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 35 saves only 8.263697e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !648
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !647
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !646
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca double, align 8, !noelle.pdg.inst.id !644
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [10 x [2 x double]], align 16, !noelle.pdg.inst.id !645
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !648
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !647
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !646
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca double, align 8, !noelle.pdg.inst.id !644
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [10 x [2 x double]], align 16, !noelle.pdg.inst.id !645
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !648
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !647
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !646
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca double, align 8, !noelle.pdg.inst.id !644
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [10 x [2 x double]], align 16, !noelle.pdg.inst.id !645
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !648
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !647
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !646
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca double, align 8, !noelle.pdg.inst.id !644
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [10 x [2 x double]], align 16, !noelle.pdg.inst.id !645
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !648
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !647
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !646
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca double, align 8, !noelle.pdg.inst.id !644
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [10 x [2 x double]], align 16, !noelle.pdg.inst.id !645
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !648
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !647
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !646
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca double, align 8, !noelle.pdg.inst.id !644
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [10 x [2 x double]], align 16, !noelle.pdg.inst.id !645
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 23 saves only 3.382005e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 25 saves only 3.368796e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 24 saves only 3.381953e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11558
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11557
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 58 saves only 4.217747e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 57 saves only 4.218245e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1600
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1601
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1600
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1601
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1600
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1601
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1600
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1601
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1600
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1601
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1600
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1601
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1600
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1601
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1600
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1601
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1600
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1601
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1600
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1601
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1600
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1601
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1600
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1601
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1600
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1601
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1600
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1601
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 98 saves only 1.105899e+00 when parallelized. Skip it
Planner: LoopSelector:  Loop 99 saves only 1.105899e+00 when parallelized. Skip it
Planner: LoopSelector:  Loop 97 saves only 6.539638e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 100 saves only 1.105899e+00 when parallelized. Skip it
Planner: LoopSelector:  Loop 96 saves only 1.165068e+00 when parallelized. Skip it
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 94
Planner: LoopSelector:      Function: "interp"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %27 = icmp slt i64 %indvars.iv44, %26, !noelle.pdg.inst.id !1626"
Planner: LoopSelector:      Coverage: 5.599622e+00%
Planner: LoopSelector:      Whole-program savings = 2.833511e+00%
Planner: LoopSelector:      Loop savings = 5.060183e+01%
Planner: LoopSelector:    Loop 95
Planner: LoopSelector:      Function: "interp"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %39 = icmp slt i64 %indvars.iv42, %25, !noelle.pdg.inst.id !1644"
Planner: LoopSelector:      Coverage: 5.599574e+00%
Planner: LoopSelector:      Whole-program savings = 2.833463e+00%
Planner: LoopSelector:      Loop savings = 5.060140e+01%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !190
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !189
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !190
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !189
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !190
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !189
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !190
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !189
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !190
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !189
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !190
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !189
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !190
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !189
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !190
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !189
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 76
Planner: LoopSelector:      Function: "psinv"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %24 = icmp slt i64 %indvars.iv7, %20, !noelle.pdg.inst.id !211"
Planner: LoopSelector:      Coverage: 2.526413e+01%
Planner: LoopSelector:      Whole-program savings = 2.330187e+01%
Planner: LoopSelector:      Loop savings = 9.223305e+01%
Planner: LoopSelector:    Loop 77
Planner: LoopSelector:      Function: "psinv"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %35 = icmp slt i64 %indvars.iv5, %19, !noelle.pdg.inst.id !226"
Planner: LoopSelector:      Coverage: 2.526404e+01%
Planner: LoopSelector:      Whole-program savings = 2.330178e+01%
Planner: LoopSelector:      Loop savings = 9.223302e+01%
Planner: LoopSelector:    Loop 79
Planner: LoopSelector:      Function: "psinv"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %85 = icmp slt i64 %indvars.iv3, %18, !noelle.pdg.inst.id !268"
Planner: LoopSelector:      Coverage: 1.295547e+01%
Planner: LoopSelector:      Whole-program savings = 1.295547e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 78
Planner: LoopSelector:      Function: "psinv"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %55 = icmp slt i64 %indvars.iv, %17, !noelle.pdg.inst.id !242"
Planner: LoopSelector:      Coverage: 1.226562e+01%
Planner: LoopSelector:      Whole-program savings = 1.226562e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 107 saves only 8.625332e-02 when parallelized. Skip it
Planner: LoopSelector:  Loop 108 saves only 8.556941e-02 when parallelized. Skip it
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 106 saves only 1.365593e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 104 saves only 2.333238e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 105 saves only 9.646835e-02 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !258
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !257
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !258
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !257
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !258
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !257
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !258
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !257
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !258
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !257
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !258
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !257
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !258
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !257
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !258
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !257
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 74 saves only 1.925093e+00 when parallelized. Skip it
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 72
Planner: LoopSelector:      Function: "rprj3"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %25 = icmp slt i64 %indvars.iv11, %23, !noelle.pdg.inst.id !279"
Planner: LoopSelector:      Coverage: 5.533287e+00%
Planner: LoopSelector:      Whole-program savings = 2.721895e+00%
Planner: LoopSelector:      Loop savings = 4.919129e+01%
Planner: LoopSelector:    Loop 73
Planner: LoopSelector:      Function: "rprj3"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %43 = icmp slt i64 %indvars.iv9, %22, !noelle.pdg.inst.id !301"
Planner: LoopSelector:      Coverage: 5.533156e+00%
Planner: LoopSelector:      Whole-program savings = 2.721764e+00%
Planner: LoopSelector:      Loop savings = 4.919008e+01%
Planner: LoopSelector:    Loop 75
Planner: LoopSelector:      Function: "rprj3"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %102 = icmp slt i64 %indvars.iv7, %21, !noelle.pdg.inst.id !355"
Planner: LoopSelector:      Coverage: 3.533586e+00%
Planner: LoopSelector:      Whole-program savings = 2.019849e+00%
Planner: LoopSelector:      Loop savings = 5.716145e+01%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !648
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !647
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !646
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca double, align 8, !noelle.pdg.inst.id !644
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [10 x [2 x double]], align 16, !noelle.pdg.inst.id !645
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !648
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !647
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !646
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca double, align 8, !noelle.pdg.inst.id !644
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [10 x [2 x double]], align 16, !noelle.pdg.inst.id !645
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !648
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !647
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !646
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca double, align 8, !noelle.pdg.inst.id !644
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [10 x [2 x double]], align 16, !noelle.pdg.inst.id !645
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !648
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !647
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !646
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca double, align 8, !noelle.pdg.inst.id !644
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [10 x [2 x double]], align 16, !noelle.pdg.inst.id !645
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 29 saves only 2.311921e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 30 saves only 2.311875e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4, !noelle.pdg.inst.id !10904
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4, !noelle.pdg.inst.id !10903
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x double], align 16, !noelle.pdg.inst.id !10898
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [4 x double], align 16, !noelle.pdg.inst.id !10897
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca double, align 8, !noelle.pdg.inst.id !10899
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca double, align 8, !noelle.pdg.inst.id !10900
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !10901
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !10902
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4, !noelle.pdg.inst.id !10904
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4, !noelle.pdg.inst.id !10903
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x double], align 16, !noelle.pdg.inst.id !10898
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [4 x double], align 16, !noelle.pdg.inst.id !10897
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca double, align 8, !noelle.pdg.inst.id !10899
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca double, align 8, !noelle.pdg.inst.id !10900
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !10901
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !10902
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 13
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %301 = load i32, i32* %10, align 4, !tbaa !10934, !noelle.pdg.inst.id !166"
Planner: LoopSelector:      Coverage: 9.012041e+01%
Planner: LoopSelector:      Whole-program savings = 9.012041e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !648
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !647
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !646
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca double, align 8, !noelle.pdg.inst.id !644
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [10 x [2 x double]], align 16, !noelle.pdg.inst.id !645
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !648
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !647
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !646
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca double, align 8, !noelle.pdg.inst.id !644
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [10 x [2 x double]], align 16, !noelle.pdg.inst.id !645
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !648
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !647
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !646
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca double, align 8, !noelle.pdg.inst.id !644
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [10 x [2 x double]], align 16, !noelle.pdg.inst.id !645
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !648
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !647
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !646
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca double, align 8, !noelle.pdg.inst.id !644
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [10 x [2 x double]], align 16, !noelle.pdg.inst.id !645
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !648
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !647
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !646
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca double, align 8, !noelle.pdg.inst.id !644
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [10 x [2 x double]], align 16, !noelle.pdg.inst.id !645
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !648
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !647
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [10 x [2 x i32]], align 16, !noelle.pdg.inst.id !646
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca double, align 8, !noelle.pdg.inst.id !644
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [10 x [2 x double]], align 16, !noelle.pdg.inst.id !645
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 21 saves only 2.994478e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 20 saves only 1.088877e+00 when parallelized. Skip it
Planner: LoopSelector:  Loop 19 saves only 1.088894e+00 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !193
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !193
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !193
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !193
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !193
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !193
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !193
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !193
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 37
Planner: LoopSelector:      Function: "resid"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %25 = icmp slt i64 %indvars.iv7, %21, !noelle.pdg.inst.id !214"
Planner: LoopSelector:      Coverage: 5.129621e+01%
Planner: LoopSelector:      Whole-program savings = 4.800068e+01%
Planner: LoopSelector:      Loop savings = 9.357549e+01%
Planner: LoopSelector:    Loop 38
Planner: LoopSelector:      Function: "resid"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %38 = icmp slt i64 %indvars.iv5, %20, !noelle.pdg.inst.id !230"
Planner: LoopSelector:      Coverage: 5.129599e+01%
Planner: LoopSelector:      Whole-program savings = 4.800046e+01%
Planner: LoopSelector:      Loop savings = 9.357546e+01%
Planner: LoopSelector:    Loop 39
Planner: LoopSelector:      Function: "resid"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %58 = icmp slt i64 %indvars.iv, %18, !noelle.pdg.inst.id !246"
Planner: LoopSelector:      Coverage: 2.569937e+01%
Planner: LoopSelector:      Whole-program savings = 2.569937e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 40
Planner: LoopSelector:      Function: "resid"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %90 = icmp slt i64 %indvars.iv3, %19, !noelle.pdg.inst.id !273"
Planner: LoopSelector:      Coverage: 2.550022e+01%
Planner: LoopSelector:      Whole-program savings = 2.550022e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
Planner:   Maximum time saved = 1.827003e+02% (164018748208)
Planner:   Maximum time saved with DOALL only = 9.012041e+01% (80905391566)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %28 = tail call i32 @fgetc(%struct._IO_FILE* nonnull %22) #13, !noelle.pdg.inst.id !3510" (0.000000e+00%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %38 = tail call i32 @fgetc(%struct._IO_FILE* nonnull %22), !noelle.pdg.inst.id !465" (0.000000e+00%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %43 = call i32 @fgetc(%struct._IO_FILE* nonnull %22), !noelle.pdg.inst.id !471" (0.000000e+00%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 8, !noelle.pdg.inst.id !10958" (0.000000e+00%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv61, 8, !noelle.pdg.inst.id !10975" (6.572002e-08%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %111 = icmp sgt i64 %indvars.iv59, 0, !noelle.pdg.inst.id !11055" (1.304882e-03%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %124 = icmp slt i64 %indvars.iv57, %115, !noelle.pdg.inst.id !11071" (1.304727e-03%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %133 = icmp slt i64 %indvars.iv55, %127, !noelle.pdg.inst.id !11081" (1.297084e-03%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %154 = icmp slt i64 %indvars.iv53, %147, !noelle.pdg.inst.id !11103" (8.946355e-04%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  %164 = icmp slt i64 %indvars.iv51, %157, !noelle.pdg.inst.id !11114" (8.906088e-04%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %177 = icmp sgt i64 %indvars.iv49, 0, !noelle.pdg.inst.id !11129" (1.304882e-03%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %190 = icmp slt i64 %indvars.iv47, %181, !noelle.pdg.inst.id !11142" (1.304727e-03%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %199 = icmp slt i64 %indvars.iv, %193, !noelle.pdg.inst.id !11151" (1.297084e-03%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %301 = load i32, i32* %10, align 4, !tbaa !10936, !noelle.pdg.inst.id !168" (9.012041e+01%)
Noelle:  Function "mg3P"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv10, %26, !noelle.pdg.inst.id !11580" (5.653302e+00%)
Noelle:     Loop "  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !noelle.pdg.inst.id !11625" (8.942824e+00%)
Noelle:     Loop "  %257 = icmp slt i64 %indvars.iv72.i, %255, !noelle.pdg.inst.id !11802" (0.000000e+00%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %267 = icmp slt i64 %indvars.iv64.i, %253, !noelle.pdg.inst.id !11814" (0.000000e+00%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %275 = icmp slt i64 %indvars.iv60.i, %251, !noelle.pdg.inst.id !11825" (0.000000e+00%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %293 = icmp slt i64 %indvars.iv62.i, %251, !noelle.pdg.inst.id !11842" (0.000000e+00%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %315 = icmp slt i64 %indvars.iv70.i, %253, !noelle.pdg.inst.id !11863" (0.000000e+00%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %322 = icmp slt i64 %indvars.iv66.i, %251, !noelle.pdg.inst.id !11873" (0.000000e+00%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %346 = icmp slt i64 %indvars.iv68.i, %251, !noelle.pdg.inst.id !11894" (0.000000e+00%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %380 = icmp slt i64 %indvars.iv58.i, %255, !noelle.pdg.inst.id !11925" (0.000000e+00%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %390 = icmp slt i64 %indvars.iv50.i, %253, !noelle.pdg.inst.id !11938" (0.000000e+00%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %398 = icmp slt i64 %indvars.iv46.i, %251, !noelle.pdg.inst.id !11949" (0.000000e+00%)
Noelle:  Disable loop "25" as cold code
Noelle:     Loop "  %423 = icmp slt i64 %indvars.iv48.i, %251, !noelle.pdg.inst.id !11970" (0.000000e+00%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  %454 = icmp slt i64 %indvars.iv56.i, %253, !noelle.pdg.inst.id !11996" (0.000000e+00%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  %461 = icmp slt i64 %indvars.iv52.i, %251, !noelle.pdg.inst.id !12006" (0.000000e+00%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  %496 = icmp slt i64 %indvars.iv54.i, %251, !noelle.pdg.inst.id !12033" (0.000000e+00%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  %119 = icmp slt i64 %indvars.iv44.i, %118, !noelle.pdg.inst.id !11659" (8.303045e-01%)
Noelle:     Loop "  %131 = icmp slt i64 %indvars.iv42.i, %117, !noelle.pdg.inst.id !11673" (8.302547e-01%)
Noelle:     Loop "  %142 = icmp slt i64 %indvars.iv.i, %115, !noelle.pdg.inst.id !11684" (1.736813e-01%)
Noelle:     Loop "  %164 = icmp slt i64 %indvars.iv34.i, %116, !noelle.pdg.inst.id !11707" (1.632048e-01%)
Noelle:     Loop "  %186 = icmp slt i64 %indvars.iv36.i, %116, !noelle.pdg.inst.id !11727" (1.632048e-01%)
Noelle:     Loop "  %205 = icmp slt i64 %indvars.iv38.i, %116, !noelle.pdg.inst.id !11746" (1.632048e-01%)
Noelle:     Loop "  %224 = icmp slt i64 %indvars.iv40.i, %116, !noelle.pdg.inst.id !11765" (1.632048e-01%)
Noelle:     Loop "  %593 = icmp slt i64 %indvars.iv7.i, %589, !noelle.pdg.inst.id !12121" (3.469064e+00%)
Noelle:     Loop "  %604 = icmp slt i64 %indvars.iv5.i, %588, !noelle.pdg.inst.id !12135" (3.468975e+00%)
Noelle:     Loop "  %624 = icmp slt i64 %indvars.iv.i3, %586, !noelle.pdg.inst.id !12152" (1.771196e+00%)
Noelle:     Loop "  %654 = icmp slt i64 %indvars.iv3.i, %587, !noelle.pdg.inst.id !12178" (1.683457e+00%)
Noelle:     Loop "  %716 = icmp slt i64 %indvars.iv7.i3, %712, !noelle.pdg.inst.id !12236" (3.637256e+00%)
Noelle:     Loop "  %727 = icmp slt i64 %indvars.iv5.i6, %711, !noelle.pdg.inst.id !12249" (3.637167e+00%)
Noelle:     Loop "  %747 = icmp slt i64 %indvars.iv.i8, %709, !noelle.pdg.inst.id !12265" (1.771196e+00%)
Noelle:     Loop "  %777 = icmp slt i64 %indvars.iv3.i11, %710, !noelle.pdg.inst.id !12290" (1.851649e+00%)
Noelle:  Function "resid"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv7, %21, !noelle.pdg.inst.id !216" (5.129621e+01%)
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv5, %20, !noelle.pdg.inst.id !233" (5.129599e+01%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv, %18, !noelle.pdg.inst.id !250" (2.569937e+01%)
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv3, %19, !noelle.pdg.inst.id !278" (2.550022e+01%)
Noelle:  Function "psinv"
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv7, %20, !noelle.pdg.inst.id !213" (2.526413e+01%)
Noelle:     Loop "  %35 = icmp slt i64 %indvars.iv5, %19, !noelle.pdg.inst.id !229" (2.526404e+01%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv, %17, !noelle.pdg.inst.id !246" (1.226562e+01%)
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv3, %18, !noelle.pdg.inst.id !273" (1.295547e+01%)
Noelle:  Function "rprj3"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv11, %23, !noelle.pdg.inst.id !281" (5.533287e+00%)
Noelle:     Loop "  %43 = icmp slt i64 %indvars.iv9, %22, !noelle.pdg.inst.id !304" (5.533156e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %indvars.iv, %20, !noelle.pdg.inst.id !327" (1.981668e+00%)
Noelle:     Loop "  %102 = icmp slt i64 %indvars.iv7, %21, !noelle.pdg.inst.id !359" (3.533586e+00%)
Noelle:  Function "interp"
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv72, %163, !noelle.pdg.inst.id !1777" (0.000000e+00%)
Noelle:  Disable loop "57" as cold code
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv64, %161, !noelle.pdg.inst.id !1789" (0.000000e+00%)
Noelle:  Disable loop "58" as cold code
Noelle:     Loop "  %183 = icmp slt i64 %indvars.iv60, %159, !noelle.pdg.inst.id !1800" (0.000000e+00%)
Noelle:  Disable loop "59" as cold code
Noelle:     Loop "  %201 = icmp slt i64 %indvars.iv62, %159, !noelle.pdg.inst.id !1817" (0.000000e+00%)
Noelle:  Disable loop "60" as cold code
Noelle:     Loop "  %223 = icmp slt i64 %indvars.iv70, %161, !noelle.pdg.inst.id !1838" (0.000000e+00%)
Noelle:  Disable loop "61" as cold code
Noelle:     Loop "  %230 = icmp slt i64 %indvars.iv66, %159, !noelle.pdg.inst.id !1848" (0.000000e+00%)
Noelle:  Disable loop "62" as cold code
Noelle:     Loop "  %254 = icmp slt i64 %indvars.iv68, %159, !noelle.pdg.inst.id !1869" (0.000000e+00%)
Noelle:  Disable loop "63" as cold code
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv58, %163, !noelle.pdg.inst.id !1900" (0.000000e+00%)
Noelle:  Disable loop "64" as cold code
Noelle:     Loop "  %298 = icmp slt i64 %indvars.iv50, %161, !noelle.pdg.inst.id !1913" (0.000000e+00%)
Noelle:  Disable loop "65" as cold code
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv46, %159, !noelle.pdg.inst.id !1924" (0.000000e+00%)
Noelle:  Disable loop "66" as cold code
Noelle:     Loop "  %331 = icmp slt i64 %indvars.iv48, %159, !noelle.pdg.inst.id !1945" (0.000000e+00%)
Noelle:  Disable loop "67" as cold code
Noelle:     Loop "  %362 = icmp slt i64 %indvars.iv56, %161, !noelle.pdg.inst.id !1971" (0.000000e+00%)
Noelle:  Disable loop "68" as cold code
Noelle:     Loop "  %369 = icmp slt i64 %indvars.iv52, %159, !noelle.pdg.inst.id !1981" (0.000000e+00%)
Noelle:  Disable loop "69" as cold code
Noelle:     Loop "  %404 = icmp slt i64 %indvars.iv54, %159, !noelle.pdg.inst.id !2008" (0.000000e+00%)
Noelle:  Disable loop "70" as cold code
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv44, %26, !noelle.pdg.inst.id !1628" (5.599622e+00%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv42, %25, !noelle.pdg.inst.id !1647" (5.599574e+00%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv, %23, !noelle.pdg.inst.id !1659" (1.165068e+00%)
Noelle:     Loop "  %72 = icmp slt i64 %indvars.iv34, %24, !noelle.pdg.inst.id !1682" (1.105899e+00%)
Noelle:     Loop "  %94 = icmp slt i64 %indvars.iv36, %24, !noelle.pdg.inst.id !1702" (1.105899e+00%)
Noelle:     Loop "  %113 = icmp slt i64 %indvars.iv38, %24, !noelle.pdg.inst.id !1721" (1.105899e+00%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv40, %24, !noelle.pdg.inst.id !1740" (1.105899e+00%)
Noelle:  Function "zran3"
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv46, %43, !noelle.pdg.inst.id !711" (1.126270e+00%)
Noelle:     Loop "  %63 = icmp slt i64 %indvars.iv44, %42, !noelle.pdg.inst.id !724" (1.126253e+00%)
Noelle:     Loop "  %68 = icmp sgt i64 %indvars.iv.i1, %44, !noelle.pdg.inst.id !733" (1.121871e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv42, 10, !noelle.pdg.inst.id !809" (4.745208e-07%)
Noelle:  Disable loop "81" as cold code
Noelle:     Loop "  %161 = icmp slt i64 %indvars.iv40, %159, !noelle.pdg.inst.id !839" (5.624990e-01%)
Noelle:     Loop "  %167 = icmp slt i64 %indvars.iv38, %158, !noelle.pdg.inst.id !848" (5.624938e-01%)
Noelle:     Loop "  %173 = icmp slt i64 %indvars.iv36, %157, !noelle.pdg.inst.id !856" (5.611781e-01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv.i, 9, !noelle.pdg.inst.id !868" (4.745877e-05%)
Noelle:  Disable loop "85" as cold code
Noelle:     Loop "  %exitcond9.i = icmp eq i64 %indvars.iv7.i, 9, !noelle.pdg.inst.id !895" (4.446015e-05%)
Noelle:  Disable loop "86" as cold code
Noelle:     Loop "  %217 = icmp sgt i64 %indvars.iv34, -1, !noelle.pdg.inst.id !924" (1.102760e-06%)
Noelle:  Disable loop "87" as cold code
Noelle:     Loop "  %262 = icmp slt i64 %indvars.iv32, %260, !noelle.pdg.inst.id !969" (2.694512e-01%)
Noelle:     Loop "  %268 = icmp slt i64 %indvars.iv30, %259, !noelle.pdg.inst.id !979" (2.694466e-01%)
Noelle:     Loop "  %271 = icmp slt i64 %indvars.iv28, %258, !noelle.pdg.inst.id !987" (2.682586e-01%)
Noelle:     Loop "  %277 = icmp sgt i64 %indvars.iv26, %263, !noelle.pdg.inst.id !999" (4.522429e-07%)
Noelle:  Disable loop "91" as cold code
Noelle:     Loop "  %295 = icmp sgt i64 %indvars.iv, %278, !noelle.pdg.inst.id !1018" (4.522429e-07%)
Noelle:  Disable loop "92" as cold code
Noelle:  Function "norm2u3"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv9, %15, !noelle.pdg.inst.id !77" (1.051518e+00%)
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv7, %14, !noelle.pdg.inst.id !90" (1.051504e+00%)
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %13, !noelle.pdg.inst.id !99" (1.047994e+00%)
Noelle:  Function "zero3"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv5, %7, !noelle.pdg.inst.id !48" (9.592805e-01%)
Noelle:     Loop "  %14 = icmp slt i64 %indvars.iv3, %6, !noelle.pdg.inst.id !60" (9.592208e-01%)
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv, %5, !noelle.pdg.inst.id !68" (9.525428e-01%)
Noelle:  Function "comm3"
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv12, %16, !noelle.pdg.inst.id !153" (2.850094e-01%)
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv8, %14, !noelle.pdg.inst.id !160" (1.221637e-01%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv10, %15, !noelle.pdg.inst.id !184" (1.625495e-01%)
Noelle:     Loop "  %65 = icmp slt i64 %indvars.iv6, %63, !noelle.pdg.inst.id !216" (1.125473e-01%)
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv, %15, !noelle.pdg.inst.id !234" (1.118634e-01%)
Noelle:  Function "power"
Noelle:  Disable "power" as cold function
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "setup"
Noelle:  Disable "setup" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "showall"
Noelle:  Disable "showall" as cold function
Noelle:  Function "rep_nrm"
Noelle:  Disable "rep_nrm" as cold function
Noelle:  Function "vranlc"
Noelle:  Disable "vranlc" as cold function
Parallelizer:    There are 57 loops in the program we are going to consider
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1604
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1603
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1604
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1603
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1604
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1603
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1604
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1603
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4, !noelle.pdg.inst.id !10906
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4, !noelle.pdg.inst.id !10905
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x double], align 16, !noelle.pdg.inst.id !10900
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [4 x double], align 16, !noelle.pdg.inst.id !10899
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca double, align 8, !noelle.pdg.inst.id !10901
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca double, align 8, !noelle.pdg.inst.id !10902
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !10903
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !10904
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4, !noelle.pdg.inst.id !10906
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4, !noelle.pdg.inst.id !10905
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x double], align 16, !noelle.pdg.inst.id !10900
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [4 x double], align 16, !noelle.pdg.inst.id !10899
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca double, align 8, !noelle.pdg.inst.id !10901
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca double, align 8, !noelle.pdg.inst.id !10902
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4, !noelle.pdg.inst.id !10903
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4, !noelle.pdg.inst.id !10904
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !195
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !194
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !195
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !194
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !195
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !194
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !195
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !194
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !195
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !194
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !195
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !194
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !195
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !194
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !195
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !194
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11570
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11570
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11570
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11570
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11570
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11570
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11570
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %22 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11571
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11570
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11569
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca double, align 8, !noelle.pdg.inst.id !11568
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca double, align 8, !noelle.pdg.inst.id !11567
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca double, align 8, !noelle.pdg.inst.id !11566
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca double, align 8, !noelle.pdg.inst.id !11565
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11560
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11559
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca double, align 8, !noelle.pdg.inst.id !11561
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca double, align 8, !noelle.pdg.inst.id !11562
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11563
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11564
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !191
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !191
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !191
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !191
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !191
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !191
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !191
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !191
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !260
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !259
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !260
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !259
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !260
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !259
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !260
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !259
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !260
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !259
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !260
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !259
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "mg3P"
Parallelizer: parallelizerLoop:   Loop 68 = "  %716 = icmp slt i64 %indvars.iv7.i3, %712, !noelle.pdg.inst.id !12236"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %701 = load double***, double**** %578, align 8, !tbaa !11586, !noelle.pdg.inst.id !311
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %702 = load double***, double**** %87, align 8, !tbaa !11586, !noelle.pdg.inst.id !315
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %709 = sext i32 %703 to i64, !noelle.pdg.inst.id !12229
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %710 = sext i32 %708 to i64, !noelle.pdg.inst.id !12230
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %711 = sext i32 %707 to i64, !noelle.pdg.inst.id !12231
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %712 = sext i32 %706 to i64, !noelle.pdg.inst.id !12232
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %713 = load double, double* %4, align 8, !tbaa !11689, !noelle.pdg.inst.id !323
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %714 = load double, double* %79, align 8, !tbaa !11689, !noelle.pdg.inst.id !325
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %715 = load double, double* %80, align 8, !tbaa !11689, !noelle.pdg.inst.id !327
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11559
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11560
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "mg3P"
Parallelizer: parallelizerLoop:   Loop 69 = "  %727 = icmp slt i64 %indvars.iv5.i6, %711, !noelle.pdg.inst.id !12249"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %709 = sext i32 %703 to i64, !noelle.pdg.inst.id !12229
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %710 = sext i32 %708 to i64, !noelle.pdg.inst.id !12230
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %711 = sext i32 %707 to i64, !noelle.pdg.inst.id !12231
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %713 = load double, double* %4, align 8, !tbaa !11689, !noelle.pdg.inst.id !323
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %714 = load double, double* %79, align 8, !tbaa !11689, !noelle.pdg.inst.id !325
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %715 = load double, double* %80, align 8, !tbaa !11689, !noelle.pdg.inst.id !327
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %723 = load double**, double*** %718, align 8, !tbaa !11586, !noelle.pdg.inst.id !329
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %724 = load double**, double*** %720, align 8, !tbaa !11586, !noelle.pdg.inst.id !331
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %725 = load double**, double*** %721, align 8, !tbaa !11586, !noelle.pdg.inst.id !333
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %726 = load double**, double*** %722, align 8, !tbaa !11586, !noelle.pdg.inst.id !335
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11559
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11560
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "mg3P"
Parallelizer: parallelizerLoop:   Loop 64 = "  %593 = icmp slt i64 %indvars.iv7.i, %589, !noelle.pdg.inst.id !12121"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %577 = load double***, double**** %87, align 8, !tbaa !11586, !noelle.pdg.inst.id !635
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %579 = load double***, double**** %578, align 8, !tbaa !11586, !noelle.pdg.inst.id !637
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %586 = sext i32 %580 to i64, !noelle.pdg.inst.id !12114
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %587 = sext i32 %585 to i64, !noelle.pdg.inst.id !12115
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %588 = sext i32 %584 to i64, !noelle.pdg.inst.id !12116
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %589 = sext i32 %583 to i64, !noelle.pdg.inst.id !12117
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %590 = load double, double* %3, align 8, !tbaa !11689, !noelle.pdg.inst.id !645
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %591 = load double, double* %73, align 8, !tbaa !11689, !noelle.pdg.inst.id !647
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %592 = load double, double* %74, align 8, !tbaa !11689, !noelle.pdg.inst.id !649
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11563
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11564
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "mg3P"
Parallelizer: parallelizerLoop:   Loop 65 = "  %604 = icmp slt i64 %indvars.iv5.i, %588, !noelle.pdg.inst.id !12135"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %586 = sext i32 %580 to i64, !noelle.pdg.inst.id !12114
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %587 = sext i32 %585 to i64, !noelle.pdg.inst.id !12115
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %588 = sext i32 %584 to i64, !noelle.pdg.inst.id !12116
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %590 = load double, double* %3, align 8, !tbaa !11689, !noelle.pdg.inst.id !645
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %591 = load double, double* %73, align 8, !tbaa !11689, !noelle.pdg.inst.id !647
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %592 = load double, double* %74, align 8, !tbaa !11689, !noelle.pdg.inst.id !649
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %600 = load double**, double*** %595, align 8, !tbaa !11586, !noelle.pdg.inst.id !651
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %601 = load double**, double*** %597, align 8, !tbaa !11586, !noelle.pdg.inst.id !653
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %602 = load double**, double*** %598, align 8, !tbaa !11586, !noelle.pdg.inst.id !655
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %603 = load double**, double*** %599, align 8, !tbaa !11586, !noelle.pdg.inst.id !657
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %14 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11563
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %15 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !11564
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "interp"
Parallelizer: parallelizerLoop:   Loop 94 = "  %27 = icmp slt i64 %indvars.iv44, %26, !noelle.pdg.inst.id !1628"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 = double*** %0
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 = double*** %4
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1603
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1604
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %23 = sext i32 %1 to i64, !noelle.pdg.inst.id !1621
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %24 = sext i32 %22 to i64, !noelle.pdg.inst.id !1622
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %25 = sext i32 %21 to i64, !noelle.pdg.inst.id !1623
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %26 = sext i32 %20 to i64, !noelle.pdg.inst.id !1624
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "interp"
Parallelizer: parallelizerLoop:   Loop 95 = "  %39 = icmp slt i64 %indvars.iv42, %25, !noelle.pdg.inst.id !1647"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1602
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1603
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %12 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !1604
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %23 = sext i32 %1 to i64, !noelle.pdg.inst.id !1621
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %24 = sext i32 %22 to i64, !noelle.pdg.inst.id !1622
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %25 = sext i32 %21 to i64, !noelle.pdg.inst.id !1623
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %35 = load double**, double*** %29, align 8, !tbaa !1640, !noelle.pdg.inst.id !44
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %36 = load double**, double*** %30, align 8, !tbaa !1640, !noelle.pdg.inst.id !56
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %37 = load double**, double*** %32, align 8, !tbaa !1640, !noelle.pdg.inst.id !61
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %38 = load double**, double*** %34, align 8, !tbaa !1640, !noelle.pdg.inst.id !66
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "psinv"
Parallelizer: parallelizerLoop:   Loop 76 = "  %24 = icmp slt i64 %indvars.iv7, %20, !noelle.pdg.inst.id !213"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 = double*** %0
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 = double*** %1
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !191
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %17 = sext i32 %2 to i64, !noelle.pdg.inst.id !202
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %18 = sext i32 %14 to i64, !noelle.pdg.inst.id !203
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %19 = sext i32 %13 to i64, !noelle.pdg.inst.id !204
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %20 = sext i32 %12 to i64, !noelle.pdg.inst.id !205
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %21 = load double, double* %5, align 8, !tbaa !206, !noelle.pdg.inst.id !53
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %22 = load double, double* %15, align 8, !tbaa !206, !noelle.pdg.inst.id !56
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %23 = load double, double* %16, align 8, !tbaa !206, !noelle.pdg.inst.id !59
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "psinv"
Parallelizer: parallelizerLoop:   Loop 77 = "  %35 = icmp slt i64 %indvars.iv5, %19, !noelle.pdg.inst.id !229"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !191
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %17 = sext i32 %2 to i64, !noelle.pdg.inst.id !202
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %18 = sext i32 %14 to i64, !noelle.pdg.inst.id !203
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %19 = sext i32 %13 to i64, !noelle.pdg.inst.id !204
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %21 = load double, double* %5, align 8, !tbaa !206, !noelle.pdg.inst.id !53
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %22 = load double, double* %15, align 8, !tbaa !206, !noelle.pdg.inst.id !56
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %23 = load double, double* %16, align 8, !tbaa !206, !noelle.pdg.inst.id !59
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %31 = load double**, double*** %26, align 8, !tbaa !224, !noelle.pdg.inst.id !62
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %32 = load double**, double*** %28, align 8, !tbaa !224, !noelle.pdg.inst.id !65
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %33 = load double**, double*** %29, align 8, !tbaa !224, !noelle.pdg.inst.id !68
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %34 = load double**, double*** %30, align 8, !tbaa !224, !noelle.pdg.inst.id !71
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "psinv"
Parallelizer: parallelizerLoop:   Loop 79 = "  %85 = icmp slt i64 %indvars.iv3, %18, !noelle.pdg.inst.id !273"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !191
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %18 = sext i32 %14 to i64, !noelle.pdg.inst.id !203
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %21 = load double, double* %5, align 8, !tbaa !206, !noelle.pdg.inst.id !53
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %22 = load double, double* %15, align 8, !tbaa !206, !noelle.pdg.inst.id !56
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %23 = load double, double* %16, align 8, !tbaa !206, !noelle.pdg.inst.id !59
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %57 = load double*, double** %56, align 8, !tbaa !224, !noelle.pdg.inst.id !98
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %59 = load double*, double** %58, align 8, !tbaa !224, !noelle.pdg.inst.id !101
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "psinv"
Parallelizer: parallelizerLoop:   Loop 78 = "  %55 = icmp slt i64 %indvars.iv, %17, !noelle.pdg.inst.id !246"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %8 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !191
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !192
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %17 = sext i32 %2 to i64, !noelle.pdg.inst.id !202
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %39 = load double*, double** %38, align 8, !tbaa !224, !noelle.pdg.inst.id !74
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %41 = load double*, double** %40, align 8, !tbaa !224, !noelle.pdg.inst.id !77
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %43 = load double*, double** %42, align 8, !tbaa !224, !noelle.pdg.inst.id !80
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %45 = load double*, double** %44, align 8, !tbaa !224, !noelle.pdg.inst.id !83
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %47 = load double*, double** %46, align 8, !tbaa !224, !noelle.pdg.inst.id !86
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %49 = load double*, double** %48, align 8, !tbaa !224, !noelle.pdg.inst.id !89
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %51 = load double*, double** %50, align 8, !tbaa !224, !noelle.pdg.inst.id !92
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %53 = load double*, double** %52, align 8, !tbaa !224, !noelle.pdg.inst.id !95
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "rprj3"
Parallelizer: parallelizerLoop:   Loop 72 = "  %25 = icmp slt i64 %indvars.iv11, %23, !noelle.pdg.inst.id !281"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 = double*** %0
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 = double*** %4
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %. = select i1 %14, i32 2, i32 1, !prof !266, !noelle.pdg.inst.id !267
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !259
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !260
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %.01 = select i1 %15, i32 2, i32 1, !prof !266, !noelle.pdg.inst.id !269
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %.6 = select i1 %16, i32 2, i32 1, !prof !266, !noelle.pdg.inst.id !271
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %20 = sext i32 %5 to i64, !noelle.pdg.inst.id !275
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %21 = sext i32 %19 to i64, !noelle.pdg.inst.id !276
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %22 = sext i32 %18 to i64, !noelle.pdg.inst.id !277
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %23 = sext i32 %17 to i64, !noelle.pdg.inst.id !278
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "rprj3"
Parallelizer: parallelizerLoop:   Loop 73 = "  %43 = icmp slt i64 %indvars.iv9, %22, !noelle.pdg.inst.id !304"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %. = select i1 %14, i32 2, i32 1, !prof !266, !noelle.pdg.inst.id !267
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !259
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !260
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %.01 = select i1 %15, i32 2, i32 1, !prof !266, !noelle.pdg.inst.id !269
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %20 = sext i32 %5 to i64, !noelle.pdg.inst.id !275
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %21 = sext i32 %19 to i64, !noelle.pdg.inst.id !276
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %22 = sext i32 %18 to i64, !noelle.pdg.inst.id !277
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %38 = load double**, double*** %31, align 8, !tbaa !298, !noelle.pdg.inst.id !44
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %39 = load double**, double*** %33, align 8, !tbaa !298, !noelle.pdg.inst.id !52
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %40 = load double**, double*** %36, align 8, !tbaa !298, !noelle.pdg.inst.id !55
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %41 = load double**, double*** %37, align 8, !tbaa !298, !noelle.pdg.inst.id !58
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "rprj3"
Parallelizer: parallelizerLoop:   Loop 75 = "  %102 = icmp slt i64 %indvars.iv7, %21, !noelle.pdg.inst.id !359"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %. = select i1 %14, i32 2, i32 1, !prof !266, !noelle.pdg.inst.id !267
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !259
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %11 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !260
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %21 = sext i32 %19 to i64, !noelle.pdg.inst.id !276
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %53 = load double*, double** %52, align 8, !tbaa !298, !noelle.pdg.inst.id !61
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %55 = load double*, double** %54, align 8, !tbaa !298, !noelle.pdg.inst.id !64
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %57 = load double*, double** %56, align 8, !tbaa !298, !noelle.pdg.inst.id !67
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %59 = load double*, double** %58, align 8, !tbaa !298, !noelle.pdg.inst.id !70
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %61 = load double*, double** %60, align 8, !tbaa !298, !noelle.pdg.inst.id !73
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %63 = load double*, double** %62, align 8, !tbaa !298, !noelle.pdg.inst.id !76
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %65 = load double*, double** %64, align 8, !tbaa !298, !noelle.pdg.inst.id !79
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %67 = load double*, double** %66, align 8, !tbaa !298, !noelle.pdg.inst.id !82
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %71 = load double*, double** %70, align 8, !tbaa !298, !noelle.pdg.inst.id !85
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %73 = load double*, double** %72, align 8, !tbaa !298, !noelle.pdg.inst.id !88
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 13 = "  %301 = load i32, i32* %10, align 4, !tbaa !10936, !noelle.pdg.inst.id !168"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %261 = getelementptr inbounds [4 x double], [4 x double]* %4, i64 0, i64 0, !noelle.pdg.inst.id !11187
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %274 = load i32, i32* %7, align 4, !tbaa !10936, !noelle.pdg.inst.id !123
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %275 = load i32, i32* %8, align 4, !tbaa !10936, !noelle.pdg.inst.id !125
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %276 = load i32, i32* %9, align 4, !tbaa !10936, !noelle.pdg.inst.id !127
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %299 = load i32, i32* @lt, align 4, !tbaa !10936, !noelle.pdg.inst.id !166
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %175 = bitcast i8* %174 to double****, !noelle.pdg.inst.id !11126
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %88 = getelementptr inbounds [4 x double], [4 x double]* %3, i64 0, i64 0, !noelle.pdg.inst.id !11021
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %108 = bitcast i8* %107 to double****, !noelle.pdg.inst.id !11051
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %150 = bitcast i8* %149 to double***, !noelle.pdg.inst.id !11098
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %10 = alloca i32, align 4, !noelle.pdg.inst.id !10906
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "resid"
Parallelizer: parallelizerLoop:   Loop 37 = "  %25 = icmp slt i64 %indvars.iv7, %21, !noelle.pdg.inst.id !216"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 = double*** %0
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 = double*** %1
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 = double*** %2
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !194
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !195
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %18 = sext i32 %3 to i64, !noelle.pdg.inst.id !205
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %19 = sext i32 %15 to i64, !noelle.pdg.inst.id !206
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %20 = sext i32 %14 to i64, !noelle.pdg.inst.id !207
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %21 = sext i32 %13 to i64, !noelle.pdg.inst.id !208
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %22 = load double, double* %6, align 8, !tbaa !209, !noelle.pdg.inst.id !43
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %23 = load double, double* %16, align 8, !tbaa !209, !noelle.pdg.inst.id !51
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %24 = load double, double* %17, align 8, !tbaa !209, !noelle.pdg.inst.id !54
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "resid"
Parallelizer: parallelizerLoop:   Loop 38 = "  %38 = icmp slt i64 %indvars.iv5, %20, !noelle.pdg.inst.id !233"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !194
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !195
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %18 = sext i32 %3 to i64, !noelle.pdg.inst.id !205
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %19 = sext i32 %15 to i64, !noelle.pdg.inst.id !206
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %20 = sext i32 %14 to i64, !noelle.pdg.inst.id !207
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %22 = load double, double* %6, align 8, !tbaa !209, !noelle.pdg.inst.id !43
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %23 = load double, double* %16, align 8, !tbaa !209, !noelle.pdg.inst.id !51
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %24 = load double, double* %17, align 8, !tbaa !209, !noelle.pdg.inst.id !54
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %33 = load double**, double*** %27, align 8, !tbaa !228, !noelle.pdg.inst.id !57
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %34 = load double**, double*** %29, align 8, !tbaa !228, !noelle.pdg.inst.id !60
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %35 = load double**, double*** %30, align 8, !tbaa !228, !noelle.pdg.inst.id !63
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %36 = load double**, double*** %31, align 8, !tbaa !228, !noelle.pdg.inst.id !66
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %37 = load double**, double*** %32, align 8, !tbaa !228, !noelle.pdg.inst.id !69
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "resid"
Parallelizer: parallelizerLoop:   Loop 39 = "  %58 = icmp slt i64 %indvars.iv, %18, !noelle.pdg.inst.id !250"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !194
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !195
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %18 = sext i32 %3 to i64, !noelle.pdg.inst.id !205
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %42 = load double*, double** %41, align 8, !tbaa !228, !noelle.pdg.inst.id !72
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %44 = load double*, double** %43, align 8, !tbaa !228, !noelle.pdg.inst.id !75
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %46 = load double*, double** %45, align 8, !tbaa !228, !noelle.pdg.inst.id !78
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %48 = load double*, double** %47, align 8, !tbaa !228, !noelle.pdg.inst.id !81
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %50 = load double*, double** %49, align 8, !tbaa !228, !noelle.pdg.inst.id !84
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %52 = load double*, double** %51, align 8, !tbaa !228, !noelle.pdg.inst.id !87
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %54 = load double*, double** %53, align 8, !tbaa !228, !noelle.pdg.inst.id !90
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %56 = load double*, double** %55, align 8, !tbaa !228, !noelle.pdg.inst.id !93
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "resid"
Parallelizer: parallelizerLoop:   Loop 40 = "  %90 = icmp slt i64 %indvars.iv3, %19, !noelle.pdg.inst.id !278"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %9 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !194
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %10 = alloca [1037 x double], align 16, !noelle.pdg.inst.id !195
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %19 = sext i32 %15 to i64, !noelle.pdg.inst.id !206
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %22 = load double, double* %6, align 8, !tbaa !209, !noelle.pdg.inst.id !43
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %23 = load double, double* %16, align 8, !tbaa !209, !noelle.pdg.inst.id !51
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %24 = load double, double* %17, align 8, !tbaa !209, !noelle.pdg.inst.id !54
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %60 = load double*, double** %59, align 8, !tbaa !228, !noelle.pdg.inst.id !96
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %62 = load double*, double** %61, align 8, !tbaa !228, !noelle.pdg.inst.id !99
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %64 = load double*, double** %63, align 8, !tbaa !228, !noelle.pdg.inst.id !102
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc mg.B.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/mg.B'
