make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/ep.B'
./runEnablers.sh ep.B ep.B.bc simlarge "-lm -lstdc++ -lpthread " -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/ep.B /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/ep.B
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/ep.B

opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs ep.B.bc -o baseline.bc
Running: ./baseline_prof in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/ep.B


 NAS Parallel Benchmarks 3.0 structured OpenMP C version - EP Benchmark
 Number of random numbers generated:    2147483648
EP Benchmark Results: 
CPU Time =   100.5089
N = 2^   30
No. Gaussian Pairs =       843345606
Sums =     4.033815542441498e+04    -2.660669192809233e+04
Counts:
  0       393058470
  1       375280898
  2        70460742
  3         4438852
  4          105691
  5             948
  6               5
  7               0
  8               0
  9               0


 EP Benchmark Completed
 Class           =                        B
 Size            =                       31
 Iterations      =                        0
 Threads         =                        1
 Time in seconds =                   100.51
 Mop/s total     =                    21.37
 Operation type  = Random numbers generated
 Verification    =               SUCCESSFUL
 Version         =           3.0 structured
 Compile date    =              20 Jan 2023

 Compile options:
    CC           = gclang
    CLINK        = gclang
    C_LIB        = (none)
    C_INC        = -I../common
    CFLAGS       = -g -O1 -Xclang -disable-llvm-passes
    CLINKFLAGS   = -lm -mcmodel=large
    RAND         = randdp
--------------------------------------------------------------------------------------
DONE
opt -pgo-test-profile-file=/tmp/tmp.GaSJ9ykCJn -block-freq -pgo-instr-use baseline.bc -o baseline_pre.bc
opt --strip-debug --strip-debug-declare baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.pTdayQVh7D (.ll version is /tmp/tmp.g9BYYE5OEa)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.tML9BrGR3T (.ll version is /tmp/tmp.xlKgMkxtRf)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.pTdayQVh7D -o /tmp/tmp.tML9BrGR3T
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.pTdayQVh7D -o /tmp/tmp.tML9BrGR3T
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.pTdayQVh7D -o /tmp/tmp.tML9BrGR3T
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.pTdayQVh7D -o /tmp/tmp.tML9BrGR3T
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       main
DeadFunctionEliminator:       llvm.memcpy.p0i8.p0i8.i64
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       sprintf
DeadFunctionEliminator:       llvm.fabs.f64
DeadFunctionEliminator:       sqrt
DeadFunctionEliminator:       log
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       c_print_results
DeadFunctionEliminator:       randlc
DeadFunctionEliminator:       vranlc
DeadFunctionEliminator:       elapsed_time
DeadFunctionEliminator:       timer_clear
DeadFunctionEliminator:       timer_start
DeadFunctionEliminator:       timer_stop
DeadFunctionEliminator:       timer_read
DeadFunctionEliminator:       wtime_
DeadFunctionEliminator:       gettimeofday
DeadFunctionEliminator:       puts
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:     Loop "  %16 = icmp eq i64 %indvars.iv39, 0" (1.217704e-07%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (8.400325e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (5.804693e-07%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (6.683637e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (6.683637e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (9.999166e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (1.153558e-02%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (4.100237e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (1.034590e-07%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (8.606327e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (9.430337e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (5.898455e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "wtime_"
Noelle:  Function "c_print_results"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "main"
Noelle:     Loop "  %16 = icmp eq i64 %indvars.iv39, 0" (1.217704e-07%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (8.400325e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (5.804693e-07%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (6.683637e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (6.683637e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (9.999166e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (1.153558e-02%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (4.100237e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (1.034590e-07%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (8.606327e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (9.430337e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (5.898455e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "wtime_"
Noelle:  Function "c_print_results"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-inline baseline_pre.bc "-noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier"
NOELLE: Inliner: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.Xvwo3A6auk (.ll version is /tmp/tmp.Lgh96B9KeD)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.KSicNvoI67 (.ll version is /tmp/tmp.vGSBqIvQpC)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.Xvwo3A6auk -o /tmp/tmp.KSicNvoI67
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.Xvwo3A6auk -o /tmp/tmp.KSicNvoI67
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Xvwo3A6auk -o /tmp/tmp.KSicNvoI67
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Xvwo3A6auk -o /tmp/tmp.KSicNvoI67
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Xvwo3A6auk -o /tmp/tmp.KSicNvoI67
Inliner: Start
Inliner:   Number of program instructions = 429
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca double, align 8
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca double, align 8
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %97 = load double, double* %96, align 8, !tbaa !37
DOALL:     	  %98 = fadd double %97, 1.000000e+00
DOALL:     	  store double %98, double* %96, align 8, !tbaa !37
DOALL:     External nodes: 2
DOALL:     	  br i1 %83, label %.._crit_edge43_crit_edge, label %84, !prof !47
DOALL:     	  %96 = getelementptr inbounds [10 x double], [10 x double]* %8, i64 0, i64 %95
DOALL:     Edges: 10
DOALL:     Loop-carried data dependences
DOALL:         store double %98, double* %96, align 8, !tbaa !37 --->   %97 = load double, double* %96, align 8, !tbaa !37 via memory
DOALL:         store double %98, double* %96, align 8, !tbaa !37 --->   store double %98, double* %96, align 8, !tbaa !37 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 31
DOALL:     	  store double 0x41B033C4D7000000, double* %6, align 8, !tbaa !37
DOALL:     	  store double %.lcssa10, double* %7, align 8, !tbaa !37
DOALL:     	  %58 = load double, double* %7, align 8, !tbaa !37
DOALL:     	  %59 = call double @randlc(double* nonnull %6, double %58)
DOALL:     	  %62 = load double, double* %7, align 8, !tbaa !37
DOALL:     	  %63 = call double @randlc(double* nonnull %7, double %62)
DOALL:     	  call void @vranlc(i32 131072, double* nonnull %6, double 0x41D2309CE5400000, double* %65)
DOALL:     	  %.promoted = load double, double* %6, align 8, !tbaa !37
DOALL:     	  %.promoted2 = load double, double* %7, align 8, !tbaa !37
DOALL:     	  %67 = phi double [ %101, %._crit_edge43 ], [ %.promoted2, %.loopexit ]
DOALL:     	  %68 = phi double [ %82, %._crit_edge43 ], [ %.promoted, %.loopexit ]
DOALL:     	  %72 = load double, double* %71, align 16, !tbaa !37
DOALL:     	  %73 = fmul double %72, 2.000000e+00
DOALL:     	  %74 = fadd double %73, -1.000000e+00
DOALL:     	  %77 = load double, double* %76, align 8, !tbaa !37
DOALL:     	  %78 = fmul double %77, 2.000000e+00
DOALL:     	  %79 = fadd double %78, -1.000000e+00
DOALL:     	  %80 = fmul double %74, %74
DOALL:     	  %81 = fmul double %79, %79
DOALL:     	  %82 = fadd double %80, %81
DOALL:     	  %83 = fcmp ugt double %82, 1.000000e+00
DOALL:     	  br i1 %83, label %.._crit_edge43_crit_edge, label %84, !prof !47
DOALL:     	  %85 = call double @log(double %82) #11
DOALL:     	  %86 = fmul double %85, -2.000000e+00
DOALL:     	  %87 = fdiv double %86, %82
DOALL:     	  %88 = call double @sqrt(double %87) #11
DOALL:     	  %101 = phi double [ %88, %84 ], [ %67, %.._crit_edge43_crit_edge ]
DOALL:     	  %.lcssa9 = phi double [ %67, %66 ]
DOALL:     	  %.lcssa = phi double [ %68, %66 ]
DOALL:     	  store double %.lcssa, double* %6, align 8, !tbaa !37
DOALL:     	  store double %.lcssa9, double* %7, align 8, !tbaa !37
DOALL:     External nodes: 25
DOALL:     	  br i1 %exitcond28, label %104, label %50, !prof !42
DOALL:     	  br i1 %56, label %.._crit_edge41_crit_edge, label %57, !prof !44
DOALL:     	  br i1 %60, label %._crit_edge41..loopexit_crit_edge, label %61, !prof !45
DOALL:     	  %65 = getelementptr [131072 x double], [131072 x double]* @x, i64 0, i64 -1
DOALL:     	  br i1 %exitcond27, label %102, label %69, !prof !46
DOALL:     	  %71 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %70
DOALL:     	  %76 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %75
DOALL:     	  br label %._crit_edge43
DOALL:     	  %89 = fmul double %74, %88
DOALL:     	  %90 = fmul double %79, %88
DOALL:     	  %91 = call double @llvm.fabs.f64(double %89)
DOALL:     	  %92 = call double @llvm.fabs.f64(double %90)
DOALL:     	  %93 = fcmp ogt double %91, %92
DOALL:     	  %. = select i1 %93, double %91, double %92, !prof !48
DOALL:     	  %94 = fptosi double %. to i32
DOALL:     	  %95 = sext i32 %94 to i64
DOALL:     	  %96 = getelementptr inbounds [10 x double], [10 x double]* %8, i64 0, i64 %95
DOALL:     	  %97 = load double, double* %96, align 8, !tbaa !37
DOALL:     	  %98 = fadd double %97, 1.000000e+00
DOALL:     	  store double %98, double* %96, align 8, !tbaa !37
DOALL:     	  %99 = fadd double %.111, %89
DOALL:     	  %100 = fadd double %.114, %90
DOALL:     	  br label %._crit_edge43
DOALL:     	  %.215 = phi double [ %100, %84 ], [ %.114, %.._crit_edge43_crit_edge ]
DOALL:     	  %.212 = phi double [ %99, %84 ], [ %.111, %.._crit_edge43_crit_edge ]
DOALL:     Edges: 142
DOALL:     Loop-carried data dependences
DOALL:         store double %.lcssa, double* %6, align 8, !tbaa !37 --->   store double 0x41B033C4D7000000, double* %6, align 8, !tbaa !37 via memory
DOALL:         store double %.lcssa9, double* %7, align 8, !tbaa !37 --->   store double %.lcssa10, double* %7, align 8, !tbaa !37 via memory
DOALL:         %59 = call double @randlc(double* nonnull %6, double %58) --->   store double 0x41B033C4D7000000, double* %6, align 8, !tbaa !37 via memory
DOALL:         %59 = call double @randlc(double* nonnull %6, double %58) --->   store double 0x41B033C4D7000000, double* %6, align 8, !tbaa !37 via memory
DOALL:         %59 = call double @randlc(double* nonnull %6, double %58) --->   call void @vranlc(i32 131072, double* nonnull %6, double 0x41D2309CE5400000, double* %65) via memory
DOALL:         %59 = call double @randlc(double* nonnull %6, double %58) --->   %59 = call double @randlc(double* nonnull %6, double %58) via memory
DOALL:         %59 = call double @randlc(double* nonnull %6, double %58) --->   %59 = call double @randlc(double* nonnull %6, double %58) via memory
DOALL:         %59 = call double @randlc(double* nonnull %6, double %58) --->   %59 = call double @randlc(double* nonnull %6, double %58) via memory
DOALL:         %63 = call double @randlc(double* nonnull %7, double %62) --->   %63 = call double @randlc(double* nonnull %7, double %62) via memory
DOALL:         %63 = call double @randlc(double* nonnull %7, double %62) --->   store double %.lcssa10, double* %7, align 8, !tbaa !37 via memory
DOALL:         %63 = call double @randlc(double* nonnull %7, double %62) --->   store double %.lcssa10, double* %7, align 8, !tbaa !37 via memory
DOALL:         %63 = call double @randlc(double* nonnull %7, double %62) --->   %63 = call double @randlc(double* nonnull %7, double %62) via memory
DOALL:         %63 = call double @randlc(double* nonnull %7, double %62) --->   %63 = call double @randlc(double* nonnull %7, double %62) via memory
DOALL:         call void @vranlc(i32 131072, double* nonnull %6, double 0x41D2309CE5400000, double* %65) --->   %77 = load double, double* %76, align 8, !tbaa !37 via memory
DOALL:         call void @vranlc(i32 131072, double* nonnull %6, double 0x41D2309CE5400000, double* %65) --->   store double 0x41B033C4D7000000, double* %6, align 8, !tbaa !37 via memory
DOALL:         call void @vranlc(i32 131072, double* nonnull %6, double 0x41D2309CE5400000, double* %65) --->   %72 = load double, double* %71, align 16, !tbaa !37 via memory
DOALL:         call void @vranlc(i32 131072, double* nonnull %6, double 0x41D2309CE5400000, double* %65) --->   call void @vranlc(i32 131072, double* nonnull %6, double 0x41D2309CE5400000, double* %65) via memory
DOALL:         call void @vranlc(i32 131072, double* nonnull %6, double 0x41D2309CE5400000, double* %65) --->   store double 0x41B033C4D7000000, double* %6, align 8, !tbaa !37 via memory
DOALL:         call void @vranlc(i32 131072, double* nonnull %6, double 0x41D2309CE5400000, double* %65) --->   call void @vranlc(i32 131072, double* nonnull %6, double 0x41D2309CE5400000, double* %65) via memory
DOALL:         call void @vranlc(i32 131072, double* nonnull %6, double 0x41D2309CE5400000, double* %65) --->   %59 = call double @randlc(double* nonnull %6, double %58) via memory
DOALL:         call void @vranlc(i32 131072, double* nonnull %6, double 0x41D2309CE5400000, double* %65) --->   %59 = call double @randlc(double* nonnull %6, double %58) via memory
DOALL:         call void @vranlc(i32 131072, double* nonnull %6, double 0x41D2309CE5400000, double* %65) --->   call void @vranlc(i32 131072, double* nonnull %6, double 0x41D2309CE5400000, double* %65) via memory
DOALL:         %72 = load double, double* %71, align 16, !tbaa !37 --->   call void @vranlc(i32 131072, double* nonnull %6, double 0x41D2309CE5400000, double* %65) via memory
DOALL:         %77 = load double, double* %76, align 8, !tbaa !37 --->   call void @vranlc(i32 131072, double* nonnull %6, double 0x41D2309CE5400000, double* %65) via memory
Inliner:   Inlining in: main (250 instructions. The inlining will add 41 instructions),   call void @vranlc(i32 131072, double* nonnull %6, double 0x41D2309CE5400000, double* %65)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %16 = icmp eq i64 %indvars.iv39, 0" (1.212587e-07%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (8.365024e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (5.780300e-07%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (6.655551e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (6.655551e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (9.999169e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (1.148710e-02%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (4.125021e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (1.030243e-07%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (8.570161e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (9.390708e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (5.873668e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "main"
Noelle:     Loop "  %16 = icmp eq i64 %indvars.iv39, 0" (7.639326e-08%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.269986e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (3.641603e-07%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.193013e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.193013e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.299494e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (7.236904e-03%)
Noelle:     Loop "  %68 = icmp sgt i64 %indvars.iv.i, 131072" (3.699974e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.598773e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.490555e-08%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.399223e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (5.916169e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.700425e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
NOELLE: FixedPoint:       There are 28 different instructions and 55 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.KSicNvoI67 -o /tmp/tmp.KSicNvoI67
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.KSicNvoI67 -o /tmp/tmp.KSicNvoI67
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Xvwo3A6auk -o /tmp/tmp.KSicNvoI67
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Xvwo3A6auk -o /tmp/tmp.KSicNvoI67
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Xvwo3A6auk -o /tmp/tmp.KSicNvoI67
Inliner: Start
Inliner:   Number of program instructions = 462
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca double, align 8
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca double, align 8
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %123 = load double, double* %122, align 8, !tbaa !37
DOALL:     	  %124 = fadd double %123, 1.000000e+00
DOALL:     	  store double %124, double* %122, align 8, !tbaa !37
DOALL:     External nodes: 2
DOALL:     	  br i1 %109, label %.._crit_edge43_crit_edge, label %110, !prof !48
DOALL:     	  %122 = getelementptr inbounds [10 x double], [10 x double]* %8, i64 0, i64 %121
DOALL:     Edges: 10
DOALL:     Loop-carried data dependences
DOALL:         store double %124, double* %122, align 8, !tbaa !37 --->   store double %124, double* %122, align 8, !tbaa !37 via memory
DOALL:         store double %124, double* %122, align 8, !tbaa !37 --->   %123 = load double, double* %122, align 8, !tbaa !37 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 57
DOALL:     	  store double 0x41B033C4D7000000, double* %6, align 8, !tbaa !37
DOALL:     	  store double %.lcssa10, double* %7, align 8, !tbaa !37
DOALL:     	  %58 = load double, double* %7, align 8, !tbaa !37
DOALL:     	  %59 = call double @randlc(double* nonnull %6, double %58)
DOALL:     	  %62 = load double, double* %7, align 8, !tbaa !37
DOALL:     	  %63 = call double @randlc(double* nonnull %7, double %62)
DOALL:     	  %66 = load double, double* %6, align 8, !tbaa !37
DOALL:     	  %.0.i = phi double [ %89, %68 ], [ %66, %.loopexit ]
DOALL:     	  %69 = fmul double %.0.i, 0x3E80000000000000
DOALL:     	  %70 = fptosi double %69 to i32
DOALL:     	  %71 = sitofp i32 %70 to double
DOALL:     	  %72 = fmul double %71, 0x4160000000000000
DOALL:     	  %73 = fsub double %.0.i, %72
DOALL:     	  %74 = fmul double %73, 1.450000e+02
DOALL:     	  %75 = fmul double 0x41509CE540000000, %71
DOALL:     	  %76 = fadd double %74, %75
DOALL:     	  %77 = fmul double %76, 0x3E80000000000000
DOALL:     	  %78 = fptosi double %77 to i32
DOALL:     	  %79 = sitofp i32 %78 to double
DOALL:     	  %80 = fmul double %79, 0x4160000000000000
DOALL:     	  %81 = fsub double %76, %80
DOALL:     	  %82 = fmul double %81, 0x4160000000000000
DOALL:     	  %83 = fmul double 0x41509CE540000000, %73
DOALL:     	  %84 = fadd double %82, %83
DOALL:     	  %85 = fmul double %84, 0x3D10000000000000
DOALL:     	  %86 = fptosi double %85 to i32
DOALL:     	  %87 = sitofp i32 %86 to double
DOALL:     	  %88 = fmul double %87, 0x42D0000000000000
DOALL:     	  %89 = fsub double %84, %88
DOALL:     	  %90 = fmul double %89, 0x3D10000000000000
DOALL:     	  store double %90, double* %91, align 8, !tbaa !37
DOALL:     	  %.0.i.lcssa = phi double [ %.0.i, %67 ]
DOALL:     	  store double %.0.i.lcssa, double* %6, align 8, !tbaa !37
DOALL:     	  %.promoted = load double, double* %6, align 8, !tbaa !37
DOALL:     	  %.promoted2 = load double, double* %7, align 8, !tbaa !37
DOALL:     	  %93 = phi double [ %127, %._crit_edge43 ], [ %.promoted2, %vranlc.exit ]
DOALL:     	  %94 = phi double [ %108, %._crit_edge43 ], [ %.promoted, %vranlc.exit ]
DOALL:     	  %98 = load double, double* %97, align 16, !tbaa !37
DOALL:     	  %99 = fmul double %98, 2.000000e+00
DOALL:     	  %100 = fadd double %99, -1.000000e+00
DOALL:     	  %103 = load double, double* %102, align 8, !tbaa !37
DOALL:     	  %104 = fmul double %103, 2.000000e+00
DOALL:     	  %105 = fadd double %104, -1.000000e+00
DOALL:     	  %106 = fmul double %100, %100
DOALL:     	  %107 = fmul double %105, %105
DOALL:     	  %108 = fadd double %106, %107
DOALL:     	  %109 = fcmp ugt double %108, 1.000000e+00
DOALL:     	  br i1 %109, label %.._crit_edge43_crit_edge, label %110, !prof !48
DOALL:     	  %111 = call double @log(double %108) #11
DOALL:     	  %112 = fmul double %111, -2.000000e+00
DOALL:     	  %113 = fdiv double %112, %108
DOALL:     	  %114 = call double @sqrt(double %113) #11
DOALL:     	  %127 = phi double [ %114, %110 ], [ %93, %.._crit_edge43_crit_edge ]
DOALL:     	  %.lcssa9 = phi double [ %93, %92 ]
DOALL:     	  %.lcssa = phi double [ %94, %92 ]
DOALL:     	  store double %.lcssa, double* %6, align 8, !tbaa !37
DOALL:     	  store double %.lcssa9, double* %7, align 8, !tbaa !37
DOALL:     External nodes: 26
DOALL:     	  br i1 %exitcond28, label %130, label %50, !prof !42
DOALL:     	  br i1 %56, label %.._crit_edge41_crit_edge, label %57, !prof !44
DOALL:     	  br i1 %60, label %._crit_edge41..loopexit_crit_edge, label %61, !prof !45
DOALL:     	  br i1 %exitcond1, label %vranlc.exit, label %68, !prof !46
DOALL:     	  %91 = getelementptr inbounds double, double* %65, i64 %indvars.iv.i
DOALL:     	  br i1 %exitcond27, label %128, label %95, !prof !47
DOALL:     	  %97 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %96
DOALL:     	  %102 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %101
DOALL:     	  br label %._crit_edge43
DOALL:     	  %115 = fmul double %100, %114
DOALL:     	  %116 = fmul double %105, %114
DOALL:     	  %117 = call double @llvm.fabs.f64(double %115)
DOALL:     	  %118 = call double @llvm.fabs.f64(double %116)
DOALL:     	  %119 = fcmp ogt double %117, %118
DOALL:     	  %. = select i1 %119, double %117, double %118, !prof !49
DOALL:     	  %120 = fptosi double %. to i32
DOALL:     	  %121 = sext i32 %120 to i64
DOALL:     	  %122 = getelementptr inbounds [10 x double], [10 x double]* %8, i64 0, i64 %121
DOALL:     	  %123 = load double, double* %122, align 8, !tbaa !37
DOALL:     	  %124 = fadd double %123, 1.000000e+00
DOALL:     	  store double %124, double* %122, align 8, !tbaa !37
DOALL:     	  %125 = fadd double %.111, %115
DOALL:     	  %126 = fadd double %.114, %116
DOALL:     	  br label %._crit_edge43
DOALL:     	  %.215 = phi double [ %126, %110 ], [ %.114, %.._crit_edge43_crit_edge ]
DOALL:     	  %.212 = phi double [ %125, %110 ], [ %.111, %.._crit_edge43_crit_edge ]
DOALL:     Edges: 193
DOALL:     Loop-carried data dependences
DOALL:         store double %90, double* %91, align 8, !tbaa !37 --->   %103 = load double, double* %102, align 8, !tbaa !37 via memory
DOALL:         store double %90, double* %91, align 8, !tbaa !37 --->   store double %90, double* %91, align 8, !tbaa !37 via memory
DOALL:         store double %90, double* %91, align 8, !tbaa !37 --->   %98 = load double, double* %97, align 16, !tbaa !37 via memory
DOALL:         %98 = load double, double* %97, align 16, !tbaa !37 --->   store double %90, double* %91, align 8, !tbaa !37 via memory
DOALL:         %103 = load double, double* %102, align 8, !tbaa !37 --->   store double %90, double* %91, align 8, !tbaa !37 via memory
DOALL:         store double %.lcssa, double* %6, align 8, !tbaa !37 --->   store double 0x41B033C4D7000000, double* %6, align 8, !tbaa !37 via memory
DOALL:         store double %.lcssa9, double* %7, align 8, !tbaa !37 --->   store double %.lcssa10, double* %7, align 8, !tbaa !37 via memory
DOALL:         %59 = call double @randlc(double* nonnull %6, double %58) --->   store double 0x41B033C4D7000000, double* %6, align 8, !tbaa !37 via memory
DOALL:         %59 = call double @randlc(double* nonnull %6, double %58) --->   store double 0x41B033C4D7000000, double* %6, align 8, !tbaa !37 via memory
DOALL:         %59 = call double @randlc(double* nonnull %6, double %58) --->   %59 = call double @randlc(double* nonnull %6, double %58) via memory
DOALL:         %59 = call double @randlc(double* nonnull %6, double %58) --->   %59 = call double @randlc(double* nonnull %6, double %58) via memory
DOALL:         %59 = call double @randlc(double* nonnull %6, double %58) --->   %59 = call double @randlc(double* nonnull %6, double %58) via memory
DOALL:         %63 = call double @randlc(double* nonnull %7, double %62) --->   %63 = call double @randlc(double* nonnull %7, double %62) via memory
DOALL:         %63 = call double @randlc(double* nonnull %7, double %62) --->   store double %.lcssa10, double* %7, align 8, !tbaa !37 via memory
DOALL:         %63 = call double @randlc(double* nonnull %7, double %62) --->   store double %.lcssa10, double* %7, align 8, !tbaa !37 via memory
DOALL:         %63 = call double @randlc(double* nonnull %7, double %62) --->   %63 = call double @randlc(double* nonnull %7, double %62) via memory
DOALL:         %63 = call double @randlc(double* nonnull %7, double %62) --->   %63 = call double @randlc(double* nonnull %7, double %62) via memory
Inliner:   Inlining in: main (283 instructions. The inlining will add 30 instructions),   %63 = call double @randlc(double* nonnull %7, double %62)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %16 = icmp eq i64 %indvars.iv39, 0" (7.639325e-08%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.269985e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (3.641603e-07%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.193013e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.193013e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.299494e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (7.236904e-03%)
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073" (3.699973e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.598773e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.490554e-08%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.399222e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (5.916169e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.700425e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "main"
Noelle:     Loop "  %16 = icmp eq i64 %indvars.iv39, 0" (7.639083e-08%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.269819e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (3.641488e-07%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.192880e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.192880e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.299623e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (1.051154e-02%)
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073" (3.699856e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.598691e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.490349e-08%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.399051e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (5.915982e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.700308e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
NOELLE: FixedPoint:       There are 28 different instructions and 56 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.KSicNvoI67 -o /tmp/tmp.KSicNvoI67
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.KSicNvoI67 -o /tmp/tmp.KSicNvoI67
NOELLE: FixedPoint:     Invocation 2
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Xvwo3A6auk -o /tmp/tmp.KSicNvoI67
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Xvwo3A6auk -o /tmp/tmp.KSicNvoI67
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Xvwo3A6auk -o /tmp/tmp.KSicNvoI67
Inliner: Start
Inliner:   Number of program instructions = 483
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca double, align 8
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 42
DOALL:     	  store double 0x41B033C4D7000000, double* %6, align 8, !tbaa !37
DOALL:     	  %56 = call double @randlc(double* nonnull %6, double %.0)
DOALL:     	  %88 = load double, double* %6, align 8, !tbaa !37
DOALL:     	  %.0.i = phi double [ %111, %90 ], [ %88, %.loopexit ]
DOALL:     	  %91 = fmul double %.0.i, 0x3E80000000000000
DOALL:     	  %92 = fptosi double %91 to i32
DOALL:     	  %93 = sitofp i32 %92 to double
DOALL:     	  %94 = fmul double %93, 0x4160000000000000
DOALL:     	  %95 = fsub double %.0.i, %94
DOALL:     	  %96 = fmul double %95, 1.450000e+02
DOALL:     	  %97 = fmul double 0x41509CE540000000, %93
DOALL:     	  %98 = fadd double %96, %97
DOALL:     	  %99 = fmul double %98, 0x3E80000000000000
DOALL:     	  %100 = fptosi double %99 to i32
DOALL:     	  %101 = sitofp i32 %100 to double
DOALL:     	  %102 = fmul double %101, 0x4160000000000000
DOALL:     	  %103 = fsub double %98, %102
DOALL:     	  %104 = fmul double %103, 0x4160000000000000
DOALL:     	  %105 = fmul double 0x41509CE540000000, %95
DOALL:     	  %106 = fadd double %104, %105
DOALL:     	  %107 = fmul double %106, 0x3D10000000000000
DOALL:     	  %108 = fptosi double %107 to i32
DOALL:     	  %109 = sitofp i32 %108 to double
DOALL:     	  %110 = fmul double %109, 0x42D0000000000000
DOALL:     	  %111 = fsub double %106, %110
DOALL:     	  %112 = fmul double %111, 0x3D10000000000000
DOALL:     	  store double %112, double* %113, align 8, !tbaa !37
DOALL:     	  %.0.i.lcssa = phi double [ %.0.i, %89 ]
DOALL:     	  store double %.0.i.lcssa, double* %6, align 8, !tbaa !37
DOALL:     	  %.promoted = load double, double* %6, align 8, !tbaa !37
DOALL:     	  %116 = phi double [ %130, %._crit_edge43 ], [ %.promoted, %vranlc.exit ]
DOALL:     	  %120 = load double, double* %119, align 16, !tbaa !37
DOALL:     	  %121 = fmul double %120, 2.000000e+00
DOALL:     	  %122 = fadd double %121, -1.000000e+00
DOALL:     	  %125 = load double, double* %124, align 8, !tbaa !37
DOALL:     	  %126 = fmul double %125, 2.000000e+00
DOALL:     	  %127 = fadd double %126, -1.000000e+00
DOALL:     	  %128 = fmul double %122, %122
DOALL:     	  %129 = fmul double %127, %127
DOALL:     	  %130 = fadd double %128, %129
DOALL:     	  %.lcssa = phi double [ %116, %114 ]
DOALL:     	  store double %.lcssa, double* %6, align 8, !tbaa !37
DOALL:     External nodes: 13
DOALL:     	  br i1 %exitcond28, label %152, label %48, !prof !42
DOALL:     	  %.0 = phi double [ %.lcssa10, %48 ], [ %84, %58 ]
DOALL:     	  br i1 %54, label %.._crit_edge41_crit_edge, label %55, !prof !44
DOALL:     	  br i1 %exitcond1, label %vranlc.exit, label %90, !prof !46
DOALL:     	  %113 = getelementptr inbounds double, double* %87, i64 %indvars.iv.i
DOALL:     	  br i1 %exitcond27, label %150, label %117, !prof !47
DOALL:     	  %119 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %118
DOALL:     	  %124 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %123
DOALL:     	  %131 = fcmp ugt double %130, 1.000000e+00
DOALL:     	  %133 = call double @log(double %130) #11
DOALL:     	  %135 = fdiv double %134, %130
DOALL:     	  %137 = fmul double %122, %136
DOALL:     	  %138 = fmul double %127, %136
DOALL:     Edges: 123
DOALL:     Loop-carried data dependences
DOALL:         store double %112, double* %113, align 8, !tbaa !37 --->   %125 = load double, double* %124, align 8, !tbaa !37 via memory
DOALL:         store double %112, double* %113, align 8, !tbaa !37 --->   store double %112, double* %113, align 8, !tbaa !37 via memory
DOALL:         store double %112, double* %113, align 8, !tbaa !37 --->   %120 = load double, double* %119, align 16, !tbaa !37 via memory
DOALL:         %120 = load double, double* %119, align 16, !tbaa !37 --->   store double %112, double* %113, align 8, !tbaa !37 via memory
DOALL:         %125 = load double, double* %124, align 8, !tbaa !37 --->   store double %112, double* %113, align 8, !tbaa !37 via memory
DOALL:         store double %.lcssa, double* %6, align 8, !tbaa !37 --->   store double 0x41B033C4D7000000, double* %6, align 8, !tbaa !37 via memory
DOALL:         %56 = call double @randlc(double* nonnull %6, double %.0) --->   store double 0x41B033C4D7000000, double* %6, align 8, !tbaa !37 via memory
DOALL:         %56 = call double @randlc(double* nonnull %6, double %.0) --->   store double 0x41B033C4D7000000, double* %6, align 8, !tbaa !37 via memory
DOALL:         %56 = call double @randlc(double* nonnull %6, double %.0) --->   %56 = call double @randlc(double* nonnull %6, double %.0) via memory
DOALL:         %56 = call double @randlc(double* nonnull %6, double %.0) --->   %56 = call double @randlc(double* nonnull %6, double %.0) via memory
DOALL:         %56 = call double @randlc(double* nonnull %6, double %.0) --->   %56 = call double @randlc(double* nonnull %6, double %.0) via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %145 = load double, double* %144, align 8, !tbaa !37
DOALL:     	  %146 = fadd double %145, 1.000000e+00
DOALL:     	  store double %146, double* %144, align 8, !tbaa !37
DOALL:     External nodes: 2
DOALL:     	  br i1 %131, label %.._crit_edge43_crit_edge, label %132, !prof !48
DOALL:     	  %144 = getelementptr inbounds [10 x double], [10 x double]* %7, i64 0, i64 %143
DOALL:     Edges: 10
DOALL:     Loop-carried data dependences
DOALL:         store double %146, double* %144, align 8, !tbaa !37 --->   store double %146, double* %144, align 8, !tbaa !37 via memory
DOALL:         store double %146, double* %144, align 8, !tbaa !37 --->   %145 = load double, double* %144, align 8, !tbaa !37 via memory
Inliner:   Inlining in: main (304 instructions. The inlining will add 30 instructions),   %56 = call double @randlc(double* nonnull %6, double %.0)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %15 = icmp eq i64 %indvars.iv39, 0" (7.639106e-08%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.269834e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (3.641498e-07%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.192893e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.192893e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.299612e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (1.022925e-02%)
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073" (3.699867e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.598698e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.490368e-08%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.399067e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (5.915999e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.700319e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "main"
Noelle:     Loop "  %15 = icmp eq i64 %indvars.iv39, 0" (7.638965e-08%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.269737e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (5.364261e-03%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.192815e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.192815e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.299150e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (6.775454e-03%)
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073" (3.699799e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.598650e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.490248e-08%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.398968e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (5.915890e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.700250e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
NOELLE: FixedPoint:       There are 28 different instructions and 56 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.KSicNvoI67 -o /tmp/tmp.KSicNvoI67
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.KSicNvoI67 -o /tmp/tmp.KSicNvoI67
NOELLE: FixedPoint:     Invocation 3
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Xvwo3A6auk -o /tmp/tmp.KSicNvoI67
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Xvwo3A6auk -o /tmp/tmp.KSicNvoI67
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.Xvwo3A6auk -o /tmp/tmp.KSicNvoI67
Inliner: Start
Inliner:   Number of program instructions = 502
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %167 = load double, double* %166, align 8, !tbaa !37
DOALL:     	  %168 = fadd double %167, 1.000000e+00
DOALL:     	  store double %168, double* %166, align 8, !tbaa !37
DOALL:     External nodes: 2
DOALL:     	  %166 = getelementptr inbounds [10 x double], [10 x double]* %6, i64 0, i64 %165
DOALL:     	  br i1 %153, label %.._crit_edge43_crit_edge, label %154, !prof !48
DOALL:     Edges: 10
DOALL:     Loop-carried data dependences
DOALL:         store double %168, double* %166, align 8, !tbaa !37 --->   store double %168, double* %166, align 8, !tbaa !37 via memory
DOALL:         store double %168, double* %166, align 8, !tbaa !37 --->   %167 = load double, double* %166, align 8, !tbaa !37 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  store double %135, double* %136, align 8, !tbaa !37
DOALL:     	  %142 = load double, double* %141, align 16, !tbaa !37
DOALL:     	  %147 = load double, double* %146, align 8, !tbaa !37
DOALL:     External nodes: 8
DOALL:     	  br i1 %exitcond1, label %vranlc.exit, label %113, !prof !46
DOALL:     	  %135 = fmul double %134, 0x3D10000000000000
DOALL:     	  %136 = getelementptr inbounds double, double* %111, i64 %indvars.iv.i
DOALL:     	  br i1 %exitcond27, label %172, label %139, !prof !47
DOALL:     	  %141 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %140
DOALL:     	  %143 = fmul double %142, 2.000000e+00
DOALL:     	  %146 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %145
DOALL:     	  %148 = fmul double %147, 2.000000e+00
DOALL:     Edges: 14
DOALL:     Loop-carried data dependences
DOALL:         store double %135, double* %136, align 8, !tbaa !37 --->   %147 = load double, double* %146, align 8, !tbaa !37 via memory
DOALL:         store double %135, double* %136, align 8, !tbaa !37 --->   store double %135, double* %136, align 8, !tbaa !37 via memory
DOALL:         store double %135, double* %136, align 8, !tbaa !37 --->   %142 = load double, double* %141, align 16, !tbaa !37 via memory
DOALL:         %142 = load double, double* %141, align 16, !tbaa !37 --->   store double %135, double* %136, align 8, !tbaa !37 via memory
DOALL:         %147 = load double, double* %146, align 8, !tbaa !37 --->   store double %135, double* %136, align 8, !tbaa !37 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   No remaining calls need to be inlined due to loop-carried data dependences
Inliner:   The code has not been modified
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %14 = icmp eq i64 %indvars.iv39, 0" (7.686362e-08%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.302434e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (5.397545e-03%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.218830e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.218830e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.276187e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (6.931120e-03%)
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073" (3.722755e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.552720e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.530518e-08%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.432467e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (5.952596e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.723209e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "main"
Noelle:     Loop "  %14 = icmp eq i64 %indvars.iv39, 0" (7.686362e-08%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.302434e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (5.397545e-03%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.218830e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.218830e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.276187e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (6.931120e-03%)
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073" (3.722755e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.552720e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.530518e-08%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.432467e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (5.952596e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.723209e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
NOELLE: FixedPoint: Exit
NOELLE: Inliner: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.WHa656WiiA (.ll version is /tmp/tmp.1XaXGv2mKM)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.ufvfpTrImF (.ll version is /tmp/tmp.jdKetCOFL4)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.WHa656WiiA -o /tmp/tmp.ufvfpTrImF
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.WHa656WiiA -o /tmp/tmp.ufvfpTrImF
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.WHa656WiiA -o /tmp/tmp.ufvfpTrImF
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.WHa656WiiA -o /tmp/tmp.ufvfpTrImF
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       main
DeadFunctionEliminator:       llvm.memcpy.p0i8.p0i8.i64
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       sprintf
DeadFunctionEliminator:       llvm.fabs.f64
DeadFunctionEliminator:       sqrt
DeadFunctionEliminator:       log
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       c_print_results
DeadFunctionEliminator:       randlc
DeadFunctionEliminator:       vranlc
DeadFunctionEliminator:       elapsed_time
DeadFunctionEliminator:       timer_clear
DeadFunctionEliminator:       timer_start
DeadFunctionEliminator:       timer_stop
DeadFunctionEliminator:       timer_read
DeadFunctionEliminator:       wtime_
DeadFunctionEliminator:       gettimeofday
DeadFunctionEliminator:       puts
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:     Loop "  %14 = icmp eq i64 %indvars.iv39, 0" (7.686443e-08%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.302490e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (5.397602e-03%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.218875e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.218875e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.276148e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (6.069526e-03%)
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073" (3.846887e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.428639e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.530587e-08%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.432524e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (5.952659e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.723248e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "main"
Noelle:     Loop "  %14 = icmp eq i64 %indvars.iv39, 0" (7.686443e-08%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.302490e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (5.397602e-03%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.218875e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.218875e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.276148e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (6.069526e-03%)
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073" (3.846887e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.428639e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.530587e-08%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.432524e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (5.952659e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.723248e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-enable baseline_pre.bc baseline_pre.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: Enablers: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.epFCfTHSJo (.ll version is /tmp/tmp.4CjzQ4DI3y)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.amvn7jss5p (.ll version is /tmp/tmp.cj41nnQTU8)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.epFCfTHSJo -o /tmp/tmp.amvn7jss5p
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.epFCfTHSJo -o /tmp/tmp.amvn7jss5p
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.epFCfTHSJo -o /tmp/tmp.amvn7jss5p
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.epFCfTHSJo -o /tmp/tmp.amvn7jss5p
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.epFCfTHSJo -o /tmp/tmp.amvn7jss5p
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %14 = icmp eq i64 %indvars.iv39, 0" (7.686443e-08%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.302490e-04%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (5.397602e-03%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.218875e-08%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.218875e-08%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.276148e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (6.069526e-03%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073" (3.846887e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.428639e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.530587e-08%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.432524e-08%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (5.952659e-08%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.723248e+01%)
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
EnablersManager:   Try to improve all 4 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond1 = icmp eq i64 %indvars.iv.i, 131073
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073"
LICM:     Invariant = "  %127 = getelementptr [131072 x double], [131072 x double]* @x, i64 0, i64 -1
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond27 = icmp eq i64 %indvars.iv25, 65536
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond28 = icmp eq i32 %.04, 16385
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "vranlc"
EnablersManager:     Entry instruction =   %13 = icmp sgt i64 %indvars.iv, %11
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %13 = icmp sgt i64 %indvars.iv, %11"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %13, label %38, label %14, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %14 = icmp eq i64 %indvars.iv39, 0" (7.686443e-08%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.302490e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (5.397602e-03%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.218875e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.218875e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.276148e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (6.069526e-03%)
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073" (3.846887e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.428639e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.530587e-08%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.432524e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (5.952659e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.723248e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "main"
Noelle:     Loop "  %14 = icmp eq i64 %indvars.iv39, 0" (7.783024e-08%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.369116e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (5.465423e-03%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.271886e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.271886e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.229358e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (6.145791e-03%)
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073" (3.769571e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.459155e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.612645e-08%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.500784e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (6.027455e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.770032e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
NOELLE: FixedPoint:       There are 0 different instructions and -1 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.amvn7jss5p -o /tmp/tmp.amvn7jss5p
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.amvn7jss5p -o /tmp/tmp.amvn7jss5p
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.epFCfTHSJo -o /tmp/tmp.amvn7jss5p
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.epFCfTHSJo -o /tmp/tmp.amvn7jss5p
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.epFCfTHSJo -o /tmp/tmp.amvn7jss5p
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %14 = icmp eq i64 %indvars.iv39, 0" (7.783024e-08%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.369116e-04%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (5.465423e-03%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.271886e-08%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.271886e-08%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.229358e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (6.145791e-03%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073" (3.769571e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.459155e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.612645e-08%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.500784e-08%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (6.027455e-08%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.770032e+01%)
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
EnablersManager:   Try to improve all 4 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond1 = icmp eq i64 %indvars.iv.i, 131073
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond1, label %vranlc.exit.preheader, label %105, !prof !46
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond27 = icmp eq i64 %indvars.iv25, 65536
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond27, label %161, label %129, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond28 = icmp eq i32 %.04, 16385
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond28 = icmp eq i32 %.04, 16385"
LICM:     Invariant = "  %103 = getelementptr [131072 x double], [131072 x double]* @x, i64 0, i64 -1
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "vranlc"
EnablersManager:     Entry instruction =   %13 = icmp sgt i64 %indvars.iv, %11
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %13 = icmp sgt i64 %indvars.iv, %11"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %13, label %38, label %14, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %14 = icmp eq i64 %indvars.iv39, 0" (7.783024e-08%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.369116e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (5.465423e-03%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.271886e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.271886e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.229358e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (6.145791e-03%)
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073" (3.769571e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.459155e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.612645e-08%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.500784e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (6.027455e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.770032e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "main"
Noelle:     Loop "  %14 = icmp eq i64 %indvars.iv39, 0" (7.783025e-08%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.369117e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (5.465424e-03%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.271886e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.271886e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.229357e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (6.145791e-03%)
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073" (3.769572e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.459155e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.612645e-08%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.500785e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (6.027455e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.770032e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
NOELLE: FixedPoint:       There are 0 different instructions and -1 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.amvn7jss5p -o /tmp/tmp.amvn7jss5p
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.amvn7jss5p -o /tmp/tmp.amvn7jss5p
NOELLE: FixedPoint:     Invocation 2
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.epFCfTHSJo -o /tmp/tmp.amvn7jss5p
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.epFCfTHSJo -o /tmp/tmp.amvn7jss5p
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.epFCfTHSJo -o /tmp/tmp.amvn7jss5p
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %14 = icmp eq i64 %indvars.iv39, 0" (7.783025e-08%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.369117e-04%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (5.465424e-03%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.271886e-08%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.271886e-08%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.229357e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (6.145791e-03%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073" (3.769572e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.459155e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.612645e-08%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.500785e-08%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (6.027455e-08%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.770032e+01%)
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
EnablersManager:   Try to improve all 4 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond1 = icmp eq i64 %indvars.iv.i, 131073
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond1, label %vranlc.exit.preheader, label %105, !prof !46
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond27 = icmp eq i64 %indvars.iv25, 65536
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond27, label %161, label %129, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond28 = icmp eq i32 %.04, 16385
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond28 = icmp eq i32 %.04, 16385"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond28, label %163, label %47, !prof !42
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "vranlc"
EnablersManager:     Entry instruction =   %13 = icmp sgt i64 %indvars.iv, %11
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %13 = icmp sgt i64 %indvars.iv, %11"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %13, label %38, label %14, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %14 = icmp eq i64 %indvars.iv39, 0" (7.783025e-08%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.369117e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (5.465424e-03%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.271886e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.271886e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.229357e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (6.145791e-03%)
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073" (3.769572e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.459155e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.612645e-08%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.500785e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (6.027455e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.770032e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "main"
Noelle:     Loop "  %14 = icmp eq i64 %indvars.iv39, 0" (7.783025e-08%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072" (5.369117e-04%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18" (5.465424e-03%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10" (4.271886e-08%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10" (4.271886e-08%)
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385" (6.229357e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101" (6.145791e-03%)
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073" (3.769572e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536" (2.459155e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10" (6.612645e-08%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10" (5.500785e-08%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10" (6.027455e-08%)
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (3.770032e+01%)
Noelle:  Function "randlc"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
NOELLE: FixedPoint: Exit
NOELLE: Enablers: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true baseline_pre.bc -o baseline_pre.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata baseline_pre.bc -o baseline_pre.bc
Running: ./baseline_pre_prof in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/ep.B


 NAS Parallel Benchmarks 3.0 structured OpenMP C version - EP Benchmark
 Number of random numbers generated:    2147483648
EP Benchmark Results: 
CPU Time =   100.4523
N = 2^   30
No. Gaussian Pairs =       843345606
Sums =     4.033815542441498e+04    -2.660669192809233e+04
Counts:
  0       393058470
  1       375280898
  2        70460742
  3         4438852
  4          105691
  5             948
  6               5
  7               0
  8               0
  9               0


 EP Benchmark Completed
 Class           =                        B
 Size            =                       31
 Iterations      =                        0
 Threads         =                        1
 Time in seconds =                   100.45
 Mop/s total     =                    21.38
 Operation type  = Random numbers generated
 Verification    =               SUCCESSFUL
 Version         =           3.0 structured
 Compile date    =              20 Jan 2023

 Compile options:
    CC           = gclang
    CLINK        = gclang
    C_LIB        = (none)
    C_INC        = -I../common
    CFLAGS       = -g -O1 -Xclang -disable-llvm-passes
    CLINKFLAGS   = -lm -mcmodel=large
    RAND         = randdp
--------------------------------------------------------------------------------------
DONE
opt -pgo-test-profile-file=/tmp/tmp.UB7C0RvMj5 -block-freq -pgo-instr-use baseline_pre.bc -o baseline_with_metadata.bc
noelle-load -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
PDGAnalysis: Construct PDG from Analysis
Embed PDG as metadata
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %14 = icmp eq i64 %indvars.iv39, 0, !noelle.pdg.inst.id !867" (1.224605e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072, !noelle.pdg.inst.id !890" (8.447934e-04%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18, !noelle.pdg.inst.id !901" (5.837591e-07%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10, !noelle.pdg.inst.id !910" (6.721517e-08%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10, !noelle.pdg.inst.id !921" (6.721517e-08%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385, !noelle.pdg.inst.id !931" (9.999915e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101, !noelle.pdg.inst.id !941" (9.669977e-03%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073, !noelle.pdg.inst.id !1013" (6.129613e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536, !noelle.pdg.inst.id !1047" (3.869311e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10, !noelle.pdg.inst.id !1094" (1.040454e-07%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10, !noelle.pdg.inst.id !1106" (8.655104e-08%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10, !noelle.pdg.inst.id !1129" (9.483784e-08%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "vranlc"
Noelle:  Disable "vranlc" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
Planner:    There are 3 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:  There are 1 loop nesting trees in the program
Planner:    ID: 5 (1)
Planner:      Function: "main"
Planner:      Loop: "  %exitcond28 = icmp eq i32 %.04, 16385, !noelle.pdg.inst.id !931"
Planner:      Loop nesting level: 1
Planner:      Hotness = 9.999915e+01 %
Planner:      Average instructions per invocation = 1.086055e+11 %
Planner:      Average iterations per invocation = 1.638400e+04 %
Planner:    
Planner:      ID: 7 (2)
Planner:        Function: "main"
Planner:        Loop: "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073, !noelle.pdg.inst.id !1013"
Planner:        Loop nesting level: 2
Planner:        Hotness = 6.129613e+01 %
Planner:        Average instructions per invocation = 4.063205e+06 %
Planner:        Average iterations per invocation = 1.310720e+05 %
Planner:      
Planner:      ID: 8 (2)
Planner:        Function: "main"
Planner:        Loop: "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536, !noelle.pdg.inst.id !1047"
Planner:        Loop nesting level: 2
Planner:        Hotness = 3.869311e+01 %
Planner:        Average instructions per invocation = 2.564893e+06 %
Planner:        Average iterations per invocation = 6.553600e+04 %
Planner:      
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16, !noelle.pdg.inst.id !856
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1, !noelle.pdg.inst.id !855
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !853
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16, !noelle.pdg.inst.id !854
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16, !noelle.pdg.inst.id !856
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1, !noelle.pdg.inst.id !855
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !853
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16, !noelle.pdg.inst.id !854
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16, !noelle.pdg.inst.id !856
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1, !noelle.pdg.inst.id !855
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !853
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16, !noelle.pdg.inst.id !854
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16, !noelle.pdg.inst.id !856
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1, !noelle.pdg.inst.id !855
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !853
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16, !noelle.pdg.inst.id !854
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16, !noelle.pdg.inst.id !856
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1, !noelle.pdg.inst.id !855
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !853
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16, !noelle.pdg.inst.id !854
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16, !noelle.pdg.inst.id !856
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1, !noelle.pdg.inst.id !855
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !853
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16, !noelle.pdg.inst.id !854
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 5
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %exitcond28 = icmp eq i32 %.04, 16385, !noelle.pdg.inst.id !931"
Planner: LoopSelector:      Coverage: 9.999915e+01%
Planner: LoopSelector:      Whole-program savings = 9.604458e+01%
Planner: LoopSelector:      Loop savings = 9.604540e+01%
Planner: LoopSelector:    Loop 8
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536, !noelle.pdg.inst.id !1047"
Planner: LoopSelector:      Coverage: 3.869311e+01%
Planner: LoopSelector:      Whole-program savings = 3.636360e+01%
Planner: LoopSelector:      Loop savings = 9.397952e+01%
Planner: LoopSelector:    Loop 7
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073, !noelle.pdg.inst.id !1013"
Planner: LoopSelector:      Coverage: 6.129613e+01%
Planner: LoopSelector:      Whole-program savings = 1.779568e+01%
Planner: LoopSelector:      Loop savings = 2.903230e+01%
Planner: LoopSelector: End
Planner:   Maximum time saved = 9.604458e+01% (104310604533)
Planner:   Maximum time saved with DOALL only = 0.000000e+00% (0)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %14 = icmp eq i64 %indvars.iv39, 0, !noelle.pdg.inst.id !869" (1.224605e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, 131072, !noelle.pdg.inst.id !892" (8.447934e-04%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.16, 18, !noelle.pdg.inst.id !903" (5.837591e-07%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 10, !noelle.pdg.inst.id !912" (6.721517e-08%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 10, !noelle.pdg.inst.id !923" (6.721517e-08%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %exitcond28 = icmp eq i32 %.04, 16385, !noelle.pdg.inst.id !933" (9.999915e+01%)
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.1, 101, !noelle.pdg.inst.id !943" (9.669977e-03%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073, !noelle.pdg.inst.id !1015" (6.129613e+01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536, !noelle.pdg.inst.id !1049" (3.869311e+01%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 10, !noelle.pdg.inst.id !1096" (1.040454e-07%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 10, !noelle.pdg.inst.id !1108" (8.655104e-08%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 10, !noelle.pdg.inst.id !1131" (9.483784e-08%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "vranlc"
Noelle:  Disable "vranlc" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
Parallelizer:    There are 3 loops in the program we are going to consider
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16, !noelle.pdg.inst.id !858
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1, !noelle.pdg.inst.id !857
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !855
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16, !noelle.pdg.inst.id !856
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16, !noelle.pdg.inst.id !858
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1, !noelle.pdg.inst.id !857
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !855
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16, !noelle.pdg.inst.id !856
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16, !noelle.pdg.inst.id !858
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1, !noelle.pdg.inst.id !857
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !855
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16, !noelle.pdg.inst.id !856
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16, !noelle.pdg.inst.id !858
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1, !noelle.pdg.inst.id !857
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !855
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16, !noelle.pdg.inst.id !856
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16, !noelle.pdg.inst.id !858
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1, !noelle.pdg.inst.id !857
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !855
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16, !noelle.pdg.inst.id !856
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [10 x double], align 16, !noelle.pdg.inst.id !858
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [14 x i8], align 1, !noelle.pdg.inst.id !857
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !855
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [3 x double], align 16, !noelle.pdg.inst.id !856
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 5 = "  %exitcond28 = icmp eq i32 %.04, 16385, !noelle.pdg.inst.id !933"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %6 = alloca [10 x double], align 16, !noelle.pdg.inst.id !858
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %.lcssa = phi double [ %34, %33 ], !noelle.pdg.inst.id !907
Parallelizer: parallelizerLoop:   Environment:   Live-out 2 =   %.013 = phi double [ %.114.lcssa, %161 ], [ 0.000000e+00, %.preheader.preheader ], !noelle.pdg.inst.id !930
Parallelizer: parallelizerLoop:   Environment:   Live-out 3 =   %.010 = phi double [ %.111.lcssa, %161 ], [ 0.000000e+00, %.preheader.preheader ], !noelle.pdg.inst.id !931
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 8 = "  %exitcond27 = icmp eq i64 %indvars.iv25, 65536, !noelle.pdg.inst.id !1049"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %6 = alloca [10 x double], align 16, !noelle.pdg.inst.id !858
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %.013 = phi double [ %.114.lcssa, %161 ], [ 0.000000e+00, %.preheader.preheader ], !noelle.pdg.inst.id !930
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %.010 = phi double [ %.111.lcssa, %161 ], [ 0.000000e+00, %.preheader.preheader ], !noelle.pdg.inst.id !931
Parallelizer: parallelizerLoop:   Environment:   Live-out 3 =   %.114 = phi double [ %.215, %._crit_edge43 ], [ %.013, %vranlc.exit.preheader ], !noelle.pdg.inst.id !1047
Parallelizer: parallelizerLoop:   Environment:   Live-out 4 =   %.111 = phi double [ %.212, %._crit_edge43 ], [ %.010, %vranlc.exit.preheader ], !noelle.pdg.inst.id !1048
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 7 = "  %exitcond1 = icmp eq i64 %indvars.iv.i, 131073, !noelle.pdg.inst.id !1015"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %.2 = phi double [ %.05.lcssa, %..loopexit_crit_edge ], [ %.17.lcssa, %._crit_edge41..loopexit_crit_edge ], !noelle.pdg.inst.id !1011
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc ep.B.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/ep.B'
