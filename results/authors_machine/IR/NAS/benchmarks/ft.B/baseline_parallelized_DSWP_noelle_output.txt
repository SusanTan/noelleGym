make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/ft.B'
./runEnablers.sh ft.B ft.B.bc simlarge "-lm -lstdc++ -lpthread " -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/ft.B /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/ft.B
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/ft.B
The IR has already been transformed for enabling parallelization
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 7, !noelle.pdg.inst.id !1052" (5.096999e-08%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 7, !noelle.pdg.inst.id !1071" (5.096999e-08%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1113" (6.805510e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv15.i, 3, !noelle.pdg.inst.id !1123" (2.738686e-07%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %81 = icmp slt i64 %indvars.iv13.i, %40, !noelle.pdg.inst.id !1132" (1.997330e+01%)
Noelle:     Loop "  %82 = icmp sgt i64 %indvars.iv, %49, !noelle.pdg.inst.id !1138" (1.997328e+01%)
Noelle:     Loop "  %83 = icmp slt i64 %indvars.iv7.i, %48, !noelle.pdg.inst.id !1144" (1.049606e+01%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv.i, %47, !noelle.pdg.inst.id !1150" (1.030428e+01%)
Noelle:     Loop "  br i1 false, label %.preheader.i.i..loopexit.i.i_crit_edge, label %100, !prof !1173, !noelle.loop.id !1177, !noelle.pdg.inst.id !1178" (4.984683e-04%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  br i1 false, label %101, label %.us-lcssa.us.loopexit1.i19.i.i, !prof !1173, !noelle.loop.id !1181, !noelle.pdg.inst.id !1182" (1.246163e-04%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  br i1 false, label %103, label %107, !noelle.loop.id !1184, !noelle.pdg.inst.id !1185" (0.000000e+00%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  br i1 false, label %105, label %106, !noelle.loop.id !1187, !noelle.pdg.inst.id !1188" (0.000000e+00%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  br i1 false, label %109, label %.us-lcssa.us.loopexit1.i.i.i, !noelle.loop.id !1195, !noelle.pdg.inst.id !1196" (3.042985e-09%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  br i1 false, label %111, label %115, !noelle.loop.id !1198, !noelle.pdg.inst.id !1199" (3.042985e-09%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  br i1 false, label %113, label %114, !noelle.loop.id !1201, !noelle.pdg.inst.id !1202" (3.042985e-09%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  br i1 false, label %.preheader1.i.i.preheader, label %cfftz.exit.i.loopexit, !noelle.loop.id !1211, !noelle.pdg.inst.id !1212" (0.000000e+00%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  br i1 false, label %116, label %117, !noelle.loop.id !1214, !noelle.pdg.inst.id !1215" (0.000000e+00%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %119 = icmp slt i64 %indvars.iv11.i, %48, !noelle.pdg.inst.id !1221" (9.475207e+00%)
Noelle:     Loop "  %120 = icmp slt i64 %indvars.iv9.i, %47, !noelle.pdg.inst.id !1226" (9.283423e+00%)
Noelle:     Loop "  %exitcond.i2 = icmp eq i64 %indvars.iv15.i1, 3, !noelle.pdg.inst.id !1249" (2.738686e-07%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %140 = icmp slt i64 %indvars.iv13.i4, %52, !noelle.pdg.inst.id !1257" (1.997322e+01%)
Noelle:     Loop "  %141 = icmp sgt i64 %indvars.iv60, %59, !noelle.pdg.inst.id !1262" (1.997320e+01%)
Noelle:     Loop "  %142 = icmp slt i64 %indvars.iv7.i7, %58, !noelle.pdg.inst.id !1267" (1.049602e+01%)
Noelle:     Loop "  %143 = icmp slt i64 %indvars.iv.i9, %47, !noelle.pdg.inst.id !1272" (1.030424e+01%)
Noelle:     Loop "  br i1 false, label %.preheader.i.i16..loopexit.i.i38_crit_edge, label %159, !prof !1173, !noelle.loop.id !1293, !noelle.pdg.inst.id !1294" (4.984652e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  br i1 false, label %160, label %.us-lcssa.us.loopexit1.i19.i.i27, !prof !1173, !noelle.loop.id !1297, !noelle.pdg.inst.id !1298" (1.246155e-04%)
Noelle:  Disable loop "25" as cold code
Noelle:     Loop "  br i1 false, label %162, label %166, !noelle.loop.id !1300, !noelle.pdg.inst.id !1301" (0.000000e+00%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  br i1 false, label %164, label %165, !noelle.loop.id !1303, !noelle.pdg.inst.id !1304" (0.000000e+00%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  br i1 false, label %168, label %.us-lcssa.us.loopexit1.i.i.i37, !noelle.loop.id !1310, !noelle.pdg.inst.id !1311" (3.042985e-09%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  br i1 false, label %170, label %174, !noelle.loop.id !1313, !noelle.pdg.inst.id !1314" (3.042985e-09%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  br i1 false, label %172, label %173, !noelle.loop.id !1316, !noelle.pdg.inst.id !1317" (3.042985e-09%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  br i1 false, label %.preheader1.i.i41.preheader, label %cfftz.exit.i46.loopexit, !noelle.loop.id !1326, !noelle.pdg.inst.id !1327" (0.000000e+00%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  br i1 false, label %175, label %176, !noelle.loop.id !1329, !noelle.pdg.inst.id !1330" (0.000000e+00%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %178 = icmp slt i64 %indvars.iv11.i47, %58, !noelle.pdg.inst.id !1336" (9.475171e+00%)
Noelle:     Loop "  %179 = icmp slt i64 %indvars.iv9.i49, %47, !noelle.pdg.inst.id !1341" (9.283387e+00%)
Noelle:     Loop "  %exitcond.i1 = icmp eq i64 %indvars.iv14.i, 3, !noelle.pdg.inst.id !1364" (2.738686e-07%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %199 = icmp slt i64 %indvars.iv12.i, %62, !noelle.pdg.inst.id !1372" (1.737782e+01%)
Noelle:     Loop "  %200 = icmp sgt i64 %indvars.iv62, %69, !noelle.pdg.inst.id !1377" (1.737779e+01%)
Noelle:     Loop "  %201 = icmp slt i64 %indvars.iv6.i, %47, !noelle.pdg.inst.id !1383" (8.689389e+00%)
Noelle:     Loop "  %206 = icmp slt i64 %indvars.iv.i5, %68, !noelle.pdg.inst.id !1392" (8.680230e+00%)
Noelle:     Loop "  br i1 false, label %.preheader.i.i11..loopexit.i.i33_crit_edge, label %220, !prof !1408, !noelle.loop.id !1412, !noelle.pdg.inst.id !1413" (2.492341e-04%)
Noelle:  Disable loop "40" as cold code
Noelle:     Loop "  br i1 false, label %221, label %.us-lcssa.us.loopexit1.i19.i.i22, !prof !1408, !noelle.loop.id !1416, !noelle.pdg.inst.id !1417" (6.230815e-05%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  br i1 false, label %223, label %227, !noelle.loop.id !1419, !noelle.pdg.inst.id !1420" (0.000000e+00%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  br i1 false, label %225, label %226, !noelle.loop.id !1422, !noelle.pdg.inst.id !1423" (0.000000e+00%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  br i1 false, label %229, label %.us-lcssa.us.loopexit1.i.i.i32, !noelle.loop.id !1430, !noelle.pdg.inst.id !1431" (1.521492e-09%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  br i1 false, label %231, label %235, !noelle.loop.id !1433, !noelle.pdg.inst.id !1434" (1.521492e-09%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  br i1 false, label %233, label %234, !noelle.loop.id !1436, !noelle.pdg.inst.id !1437" (1.521492e-09%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  br i1 false, label %.preheader1.i.i36.preheader, label %cfftz.exit.i41.loopexit, !noelle.loop.id !1446, !noelle.pdg.inst.id !1447" (0.000000e+00%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  br i1 false, label %236, label %237, !noelle.loop.id !1449, !noelle.pdg.inst.id !1450" (0.000000e+00%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %239 = icmp slt i64 %indvars.iv10.i, %47, !noelle.pdg.inst.id !1456" (8.687396e+00%)
Noelle:     Loop "  %243 = icmp slt i64 %indvars.iv8.i, %68, !noelle.pdg.inst.id !1462" (8.680230e+00%)
Noelle:  Function "fft"
Noelle:  Function "evolve"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv5, %8, !noelle.pdg.inst.id !61" (1.073010e+01%)
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv3, %11, !noelle.pdg.inst.id !67" (1.073007e+01%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv, %14, !noelle.pdg.inst.id !73" (1.072408e+01%)
Noelle:  Function "cffts1"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv14, 3, !noelle.pdg.inst.id !366" (3.294031e-07%)
Noelle:  Disable loop "54" as cold code
Noelle:     Loop "  %43 = icmp slt i64 %indvars.iv12, %24, !noelle.pdg.inst.id !403" (1.000171e+01%)
Noelle:     Loop "  %44 = icmp sgt i64 %indvars.iv11, %37, !noelle.pdg.inst.id !409" (1.000171e+01%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv6, %36, !noelle.pdg.inst.id !415" (8.691114e-01%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv, %29, !noelle.pdg.inst.id !424" (8.681953e-01%)
Noelle:     Loop "  %65 = icmp slt i32 %21, %.0.i, !noelle.pdg.inst.id !451" (7.366971e+00%)
Noelle:     Loop "  %77 = icmp slt i64 %indvars.iv10.i4.i, %75, !noelle.pdg.inst.id !472" (4.098632e+00%)
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv8.i6.i, %74, !noelle.pdg.inst.id !485" (4.066661e+00%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv.i8.i, %36, !noelle.pdg.inst.id !497" (3.980516e+00%)
Noelle:     Loop "  %134 = icmp slt i64 %indvars.iv10.i.i, %132, !noelle.pdg.inst.id !541" (3.267374e+00%)
Noelle:     Loop "  %146 = icmp slt i64 %indvars.iv8.i.i, %131, !noelle.pdg.inst.id !554" (3.251407e+00%)
Noelle:     Loop "  %154 = icmp slt i64 %indvars.iv.i.i, %36, !noelle.pdg.inst.id !566" (3.184413e+00%)
Noelle:     Loop "  %180 = icmp slt i64 %indvars.iv5.i, %29, !noelle.pdg.inst.id !599" (8.966320e-01%)
Noelle:     Loop "  %181 = icmp slt i64 %indvars.iv.i, %36, !noelle.pdg.inst.id !605" (8.774685e-01%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv10, %36, !noelle.pdg.inst.id !624" (8.689119e-01%)
Noelle:     Loop "  %199 = icmp slt i64 %indvars.iv8, %29, !noelle.pdg.inst.id !630" (8.681953e-01%)
Noelle:  Function "cffts3"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv15, 3, !noelle.pdg.inst.id !358" (3.415750e-07%)
Noelle:  Disable loop "70" as cold code
Noelle:     Loop "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !395" (8.553348e+00%)
Noelle:     Loop "  %44 = icmp sgt i64 %indvars.iv12, %37, !noelle.pdg.inst.id !401" (8.553346e+00%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv7, %29, !noelle.pdg.inst.id !407" (1.049807e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv, %35, !noelle.pdg.inst.id !413" (1.030625e+00%)
Noelle:     Loop "  %63 = icmp slt i32 %21, %.0.i, !noelle.pdg.inst.id !443" (6.555687e+00%)
Noelle:     Loop "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !465" (3.286512e+00%)
Noelle:     Loop "  %87 = icmp slt i64 %indvars.iv8.i6.i, %72, !noelle.pdg.inst.id !478" (3.254579e+00%)
Noelle:     Loop "  %95 = icmp slt i64 %indvars.iv.i8.i, %35, !noelle.pdg.inst.id !490" (3.184407e+00%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !533" (3.267442e+00%)
Noelle:     Loop "  %144 = icmp slt i64 %indvars.iv8.i.i, %129, !noelle.pdg.inst.id !546" (3.251401e+00%)
Noelle:     Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %35, !noelle.pdg.inst.id !558" (3.184407e+00%)
Noelle:     Loop "  %178 = icmp slt i64 %indvars.iv5.i, %29, !noelle.pdg.inst.id !589" (0.000000e+00%)
Noelle:  Disable loop "82" as cold code
Noelle:     Loop "  %179 = icmp slt i64 %indvars.iv.i, %35, !noelle.pdg.inst.id !594" (0.000000e+00%)
Noelle:  Disable loop "83" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %indvars.iv11, %29, !noelle.pdg.inst.id !612" (9.477015e-01%)
Noelle:     Loop "  %194 = icmp slt i64 %indvars.iv9, %35, !noelle.pdg.inst.id !617" (9.285194e-01%)
Noelle:  Function "cffts2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv15, 3, !noelle.pdg.inst.id !366" (3.294031e-07%)
Noelle:  Disable loop "86" as cold code
Noelle:     Loop "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !403" (8.553348e+00%)
Noelle:     Loop "  %44 = icmp sgt i64 %indvars.iv14, %41, !noelle.pdg.inst.id !409" (8.553346e+00%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv7, %31, !noelle.pdg.inst.id !415" (1.049807e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv, %30, !noelle.pdg.inst.id !421" (1.030625e+00%)
Noelle:     Loop "  %63 = icmp slt i32 %21, %.0.i, !noelle.pdg.inst.id !451" (6.555687e+00%)
Noelle:     Loop "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !473" (3.286512e+00%)
Noelle:     Loop "  %87 = icmp slt i64 %indvars.iv8.i6.i, %72, !noelle.pdg.inst.id !486" (3.254579e+00%)
Noelle:     Loop "  %95 = icmp slt i64 %indvars.iv.i8.i, %30, !noelle.pdg.inst.id !498" (3.184407e+00%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !541" (3.267442e+00%)
Noelle:     Loop "  %144 = icmp slt i64 %indvars.iv8.i.i, %129, !noelle.pdg.inst.id !554" (3.251401e+00%)
Noelle:     Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %30, !noelle.pdg.inst.id !566" (3.184407e+00%)
Noelle:     Loop "  %178 = icmp slt i64 %indvars.iv5.i, %31, !noelle.pdg.inst.id !597" (0.000000e+00%)
Noelle:  Disable loop "98" as cold code
Noelle:     Loop "  %179 = icmp slt i64 %indvars.iv.i, %30, !noelle.pdg.inst.id !602" (0.000000e+00%)
Noelle:  Disable loop "99" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %indvars.iv11, %31, !noelle.pdg.inst.id !620" (9.477015e-01%)
Noelle:     Loop "  %194 = icmp slt i64 %indvars.iv9, %30, !noelle.pdg.inst.id !625" (9.285194e-01%)
Noelle:  Function "compute_initial_conditions"
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv8, %20, !noelle.pdg.inst.id !141" (4.085625e+00%)
Noelle:     Loop "  %35 = icmp sgt i64 %indvars.iv.i, %24, !noelle.pdg.inst.id !148" (3.063158e+00%)
Noelle:     Loop "  %60 = icmp slt i64 %indvars.iv6, %25, !noelle.pdg.inst.id !180" (1.022454e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512, !noelle.pdg.inst.id !189" (1.021455e+00%)
Noelle:  Function "compute_indexmap"
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv10, %4, !noelle.pdg.inst.id !75" (7.179418e-01%)
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv8, %8, !noelle.pdg.inst.id !89" (7.179324e-01%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv6, %12, !noelle.pdg.inst.id !103" (7.153375e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1966081, !noelle.pdg.inst.id !124" (3.291316e-02%)
Noelle:  Disable loop "109" as cold code
Noelle:  Function "checksum"
Noelle:  Disable "checksum" as cold function
Noelle:  Function "fft_init"
Noelle:  Disable "fft_init" as cold function
Noelle:  Function "ipow46"
Noelle:  Disable "ipow46" as cold function
Noelle:  Function "ilog2"
Noelle:  Disable "ilog2" as cold function
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "setup"
Noelle:  Disable "setup" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "verify"
Noelle:  Disable "verify" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
Noelle:  Function "vranlc"
Noelle:  Disable "vranlc" as cold function
Planner:    There are 70 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:    Loop 18 has 2.910000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 7 has 3.230000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 23 has 3.230000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 34 has 2.910000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 73 has 5.000000e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 75 has 1.913616e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 76 has 4.990000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 78 has 7.023530e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 79 has 4.990000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 81 has 2.750000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 104 has 3.230000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 115 has 2.910000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 105 has 4.999939e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 107 has 1.535988e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 108 has 4.990000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 110 has 7.023527e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 111 has 4.990000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 88 has 3.230000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 89 has 4.999939e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 91 has 1.535988e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 92 has 4.990000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 94 has 7.023527e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 95 has 4.990000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 99 has 2.910000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:  There are 7 loop nesting trees in the program
Planner:    ID: 63 (1)
Planner:      Function: "evolve"
Planner:      Loop: "  %16 = icmp slt i64 %indvars.iv5, %8, !noelle.pdg.inst.id !61"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.073010e+01 %
Planner:      Average instructions per invocation = 7.052351e+08 %
Planner:      Average iterations per invocation = 2.568500e+02 %
Planner:    
Planner:      ID: 64 (2)
Planner:        Function: "evolve"
Planner:        Loop: "  %17 = icmp slt i64 %indvars.iv3, %11, !noelle.pdg.inst.id !67"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.073007e+01 %
Planner:        Average instructions per invocation = 2.755895e+06 %
Planner:        Average iterations per invocation = 2.570998e+02 %
Planner:      
Planner:        ID: 65 (3)
Planner:          Function: "evolve"
Planner:          Loop: "  %18 = icmp slt i64 %indvars.iv, %14, !noelle.pdg.inst.id !73"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.072408e+01 %
Planner:          Average instructions per invocation = 1.075502e+04 %
Planner:          Average iterations per invocation = 5.130007e+02 %
Planner:        
Planner:    ID: 2 (1)
Planner:      Function: "main"
Planner:      Loop: "  %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1113"
Planner:      Loop nesting level: 1
Planner:      Hotness = 6.805510e+01 %
Planner:      Average instructions per invocation = 8.945835e+10 %
Planner:      Average iterations per invocation = 2.000000e+01 %
Planner:    
Planner:      ID: 36 (2)
Planner:        Function: "main"
Planner:        Loop: "  %199 = icmp slt i64 %indvars.iv12.i, %62, !noelle.pdg.inst.id !1372"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.737782e+01 %
Planner:        Average instructions per invocation = 1.142156e+09 %
Planner:        Average iterations per invocation = 2.569000e+02 %
Planner:      
Planner:        ID: 37 (3)
Planner:          Function: "main"
Planner:          Loop: "  %200 = icmp sgt i64 %indvars.iv62, %69, !noelle.pdg.inst.id !1377"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.737779e+01 %
Planner:          Average instructions per invocation = 4.462413e+06 %
Planner:          Average iterations per invocation = 1.699980e+01 %
Planner:        
Planner:          ID: 38 (4)
Planner:            Function: "main"
Planner:            Loop: "  %201 = icmp slt i64 %indvars.iv6.i, %47, !noelle.pdg.inst.id !1383"
Planner:            Loop nesting level: 4
Planner:            Hotness = 8.689389e+00 %
Planner:            Average instructions per invocation = 1.394583e+05 %
Planner:            Average iterations per invocation = 1.699990e+01 %
Planner:          
Planner:            ID: 39 (5)
Planner:              Function: "main"
Planner:              Loop: "  %206 = icmp slt i64 %indvars.iv.i5, %68, !noelle.pdg.inst.id !1392"
Planner:              Loop nesting level: 5
Planner:              Hotness = 8.680230e+00 %
Planner:              Average instructions per invocation = 8.707003e+03 %
Planner:              Average iterations per invocation = 5.130002e+02 %
Planner:            
Planner:          ID: 49 (4)
Planner:            Function: "main"
Planner:            Loop: "  %239 = icmp slt i64 %indvars.iv10.i, %47, !noelle.pdg.inst.id !1456"
Planner:            Loop nesting level: 4
Planner:            Hotness = 8.687396e+00 %
Planner:            Average instructions per invocation = 1.394263e+05 %
Planner:            Average iterations per invocation = 1.699990e+01 %
Planner:          
Planner:            ID: 50 (5)
Planner:              Function: "main"
Planner:              Loop: "  %243 = icmp slt i64 %indvars.iv8.i, %68, !noelle.pdg.inst.id !1462"
Planner:              Loop nesting level: 5
Planner:              Hotness = 8.680230e+00 %
Planner:              Average instructions per invocation = 8.707003e+03 %
Planner:              Average iterations per invocation = 5.130002e+02 %
Planner:            
Planner:      ID: 4 (2)
Planner:        Function: "main"
Planner:        Loop: "  %81 = icmp slt i64 %indvars.iv13.i, %40, !noelle.pdg.inst.id !1132"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.997330e+01 %
Planner:        Average instructions per invocation = 1.312744e+09 %
Planner:        Average iterations per invocation = 2.569000e+02 %
Planner:      
Planner:        ID: 5 (3)
Planner:          Function: "main"
Planner:          Loop: "  %82 = icmp sgt i64 %indvars.iv, %49, !noelle.pdg.inst.id !1138"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.997328e+01 %
Planner:          Average instructions per invocation = 5.128902e+06 %
Planner:          Average iterations per invocation = 3.299980e+01 %
Planner:        
Planner:          ID: 17 (4)
Planner:            Function: "main"
Planner:            Loop: "  %119 = icmp slt i64 %indvars.iv11.i, %48, !noelle.pdg.inst.id !1221"
Planner:            Loop nesting level: 4
Planner:            Hotness = 9.475207e+00 %
Planner:            Average instructions per invocation = 7.603505e+04 %
Planner:            Average iterations per invocation = 2.570002e+02 %
Planner:          
Planner:          ID: 6 (4)
Planner:            Function: "main"
Planner:            Loop: "  %83 = icmp slt i64 %indvars.iv7.i, %48, !noelle.pdg.inst.id !1144"
Planner:            Loop nesting level: 4
Planner:            Hotness = 1.049606e+01 %
Planner:            Average instructions per invocation = 8.422706e+04 %
Planner:            Average iterations per invocation = 2.570002e+02 %
Planner:          
Planner:      ID: 20 (2)
Planner:        Function: "main"
Planner:        Loop: "  %140 = icmp slt i64 %indvars.iv13.i4, %52, !noelle.pdg.inst.id !1257"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.997322e+01 %
Planner:        Average instructions per invocation = 1.312739e+09 %
Planner:        Average iterations per invocation = 2.569000e+02 %
Planner:      
Planner:        ID: 21 (3)
Planner:          Function: "main"
Planner:          Loop: "  %141 = icmp sgt i64 %indvars.iv60, %59, !noelle.pdg.inst.id !1262"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.997320e+01 %
Planner:          Average instructions per invocation = 5.128883e+06 %
Planner:          Average iterations per invocation = 3.299961e+01 %
Planner:        
Planner:          ID: 22 (4)
Planner:            Function: "main"
Planner:            Loop: "  %142 = icmp slt i64 %indvars.iv7.i7, %58, !noelle.pdg.inst.id !1267"
Planner:            Loop nesting level: 4
Planner:            Hotness = 1.049602e+01 %
Planner:            Average instructions per invocation = 8.422725e+04 %
Planner:            Average iterations per invocation = 2.570008e+02 %
Planner:          
Planner:          ID: 33 (4)
Planner:            Function: "main"
Planner:            Loop: "  %178 = icmp slt i64 %indvars.iv11.i47, %58, !noelle.pdg.inst.id !1336"
Planner:            Loop nesting level: 4
Planner:            Hotness = 9.475171e+00 %
Planner:            Average instructions per invocation = 7.603522e+04 %
Planner:            Average iterations per invocation = 2.570008e+02 %
Planner:          
Planner:    ID: 69 (1)
Planner:      Function: "cffts1"
Planner:      Loop: "  %43 = icmp slt i64 %indvars.iv12, %24, !noelle.pdg.inst.id !403"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.000171e+01 %
Planner:      Average instructions per invocation = 6.573619e+09 %
Planner:      Average iterations per invocation = 2.565000e+02 %
Planner:    
Planner:      ID: 70 (2)
Planner:        Function: "cffts1"
Planner:        Loop: "  %44 = icmp sgt i64 %indvars.iv11, %37, !noelle.pdg.inst.id !409"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.000171e+01 %
Planner:        Average instructions per invocation = 2.567819e+07 %
Planner:        Average iterations per invocation = 1.699805e+01 %
Planner:      
Planner:        ID: 71 (3)
Planner:          Function: "cffts1"
Planner:          Loop: "  %45 = icmp slt i64 %indvars.iv6, %36, !noelle.pdg.inst.id !415"
Planner:          Loop nesting level: 3
Planner:          Hotness = 8.691114e-01 %
Planner:          Average instructions per invocation = 1.394587e+05 %
Planner:          Average iterations per invocation = 1.699988e+01 %
Planner:        
Planner:          ID: 72 (4)
Planner:            Function: "cffts1"
Planner:            Loop: "  %50 = icmp slt i64 %indvars.iv, %29, !noelle.pdg.inst.id !424"
Planner:            Loop nesting level: 4
Planner:            Hotness = 8.681953e-01 %
Planner:            Average instructions per invocation = 8.706983e+03 %
Planner:            Average iterations per invocation = 5.129990e+02 %
Planner:          
Planner:        ID: 77 (3)
Planner:          Function: "cffts1"
Planner:          Loop: "  %134 = icmp slt i64 %indvars.iv10.i.i, %132, !noelle.pdg.inst.id !541"
Planner:          Loop nesting level: 4
Planner:          Hotness = 3.267374e+00 %
Planner:          Average instructions per invocation = 1.310717e+05 %
Planner:          Average iterations per invocation = 4.349988e+01 %
Planner:        
Planner:        ID: 74 (3)
Planner:          Function: "cffts1"
Planner:          Loop: "  %77 = icmp slt i64 %indvars.iv10.i4.i, %75, !noelle.pdg.inst.id !472"
Planner:          Loop nesting level: 4
Planner:          Hotness = 4.098632e+00 %
Planner:          Average instructions per invocation = 1.315343e+05 %
Planner:          Average iterations per invocation = 6.919985e+01 %
Planner:        
Planner:        ID: 82 (3)
Planner:          Function: "cffts1"
Planner:          Loop: "  %195 = icmp slt i64 %indvars.iv10, %36, !noelle.pdg.inst.id !624"
Planner:          Loop nesting level: 3
Planner:          Hotness = 8.689119e-01 %
Planner:          Average instructions per invocation = 1.394267e+05 %
Planner:          Average iterations per invocation = 1.699988e+01 %
Planner:        
Planner:          ID: 83 (4)
Planner:            Function: "cffts1"
Planner:            Loop: "  %199 = icmp slt i64 %indvars.iv8, %29, !noelle.pdg.inst.id !630"
Planner:            Loop nesting level: 4
Planner:            Hotness = 8.681953e-01 %
Planner:            Average instructions per invocation = 8.706983e+03 %
Planner:            Average iterations per invocation = 5.129990e+02 %
Planner:          
Planner:        ID: 80 (3)
Planner:          Function: "cffts1"
Planner:          Loop: "  %180 = icmp slt i64 %indvars.iv5.i, %29, !noelle.pdg.inst.id !599"
Planner:          Loop nesting level: 3
Planner:          Hotness = 8.966320e-01 %
Planner:          Average instructions per invocation = 1.438747e+05 %
Planner:          Average iterations per invocation = 5.129989e+02 %
Planner:        
Planner:    ID: 101 (1)
Planner:      Function: "cffts3"
Planner:      Loop: "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !395"
Planner:      Loop nesting level: 1
Planner:      Hotness = 8.553348e+00 %
Planner:      Average instructions per invocation = 5.621683e+09 %
Planner:      Average iterations per invocation = 2.565000e+02 %
Planner:    
Planner:      ID: 102 (2)
Planner:        Function: "cffts3"
Planner:        Loop: "  %44 = icmp sgt i64 %indvars.iv12, %37, !noelle.pdg.inst.id !401"
Planner:        Loop nesting level: 2
Planner:        Hotness = 8.553346e+00 %
Planner:        Average instructions per invocation = 2.195969e+07 %
Planner:        Average iterations per invocation = 3.299805e+01 %
Planner:      
Planner:        ID: 103 (3)
Planner:          Function: "cffts3"
Planner:          Loop: "  %45 = icmp slt i64 %indvars.iv7, %29, !noelle.pdg.inst.id !407"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.049807e+00 %
Planner:          Average instructions per invocation = 8.422667e+04 %
Planner:          Average iterations per invocation = 2.569990e+02 %
Planner:        
Planner:        ID: 109 (3)
Planner:          Function: "cffts3"
Planner:          Loop: "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !533"
Planner:          Loop nesting level: 4
Planner:          Hotness = 3.267442e+00 %
Planner:          Average instructions per invocation = 6.553725e+04 %
Planner:          Average iterations per invocation = 2.224989e+01 %
Planner:        
Planner:        ID: 106 (3)
Planner:          Function: "cffts3"
Planner:          Loop: "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !465"
Planner:          Loop nesting level: 4
Planner:          Hotness = 3.286512e+00 %
Planner:          Average instructions per invocation = 6.591975e+04 %
Planner:          Average iterations per invocation = 4.349982e+01 %
Planner:        
Planner:        ID: 114 (3)
Planner:          Function: "cffts3"
Planner:          Loop: "  %193 = icmp slt i64 %indvars.iv11, %29, !noelle.pdg.inst.id !612"
Planner:          Loop nesting level: 3
Planner:          Hotness = 9.477015e-01 %
Planner:          Average instructions per invocation = 7.603471e+04 %
Planner:          Average iterations per invocation = 2.569990e+02 %
Planner:        
Planner:    ID: 53 (1)
Planner:      Function: "compute_indexmap"
Planner:      Loop: "  %15 = icmp slt i64 %indvars.iv10, %4, !noelle.pdg.inst.id !75"
Planner:      Loop nesting level: 1
Planner:      Hotness = 7.179418e-01 %
Planner:      Average instructions per invocation = 4.718668e+08 %
Planner:      Average iterations per invocation = 5.125000e+02 %
Planner:    
Planner:      ID: 54 (2)
Planner:        Function: "compute_indexmap"
Planner:        Loop: "  %23 = icmp slt i64 %indvars.iv8, %8, !noelle.pdg.inst.id !89"
Planner:        Loop nesting level: 2
Planner:        Hotness = 7.179324e-01 %
Planner:        Average instructions per invocation = 9.216029e+05 %
Planner:        Average iterations per invocation = 2.569990e+02 %
Planner:      
Planner:        ID: 55 (3)
Planner:          Function: "compute_indexmap"
Planner:          Loop: "  %33 = icmp slt i64 %indvars.iv6, %12, !noelle.pdg.inst.id !103"
Planner:          Loop nesting level: 3
Planner:          Hotness = 7.153375e-01 %
Planner:          Average instructions per invocation = 3.587000e+03 %
Planner:          Average iterations per invocation = 2.570000e+02 %
Planner:        
Planner:    ID: 85 (1)
Planner:      Function: "cffts2"
Planner:      Loop: "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !403"
Planner:      Loop nesting level: 1
Planner:      Hotness = 8.553348e+00 %
Planner:      Average instructions per invocation = 5.621683e+09 %
Planner:      Average iterations per invocation = 2.565000e+02 %
Planner:    
Planner:      ID: 86 (2)
Planner:        Function: "cffts2"
Planner:        Loop: "  %44 = icmp sgt i64 %indvars.iv14, %41, !noelle.pdg.inst.id !409"
Planner:        Loop nesting level: 2
Planner:        Hotness = 8.553346e+00 %
Planner:        Average instructions per invocation = 2.195969e+07 %
Planner:        Average iterations per invocation = 3.299805e+01 %
Planner:      
Planner:        ID: 87 (3)
Planner:          Function: "cffts2"
Planner:          Loop: "  %45 = icmp slt i64 %indvars.iv7, %31, !noelle.pdg.inst.id !415"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.049807e+00 %
Planner:          Average instructions per invocation = 8.422667e+04 %
Planner:          Average iterations per invocation = 2.569990e+02 %
Planner:        
Planner:        ID: 93 (3)
Planner:          Function: "cffts2"
Planner:          Loop: "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !541"
Planner:          Loop nesting level: 4
Planner:          Hotness = 3.267442e+00 %
Planner:          Average instructions per invocation = 6.553725e+04 %
Planner:          Average iterations per invocation = 2.224989e+01 %
Planner:        
Planner:        ID: 90 (3)
Planner:          Function: "cffts2"
Planner:          Loop: "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !473"
Planner:          Loop nesting level: 4
Planner:          Hotness = 3.286512e+00 %
Planner:          Average instructions per invocation = 6.591975e+04 %
Planner:          Average iterations per invocation = 4.349982e+01 %
Planner:        
Planner:        ID: 98 (3)
Planner:          Function: "cffts2"
Planner:          Loop: "  %193 = icmp slt i64 %indvars.iv11, %31, !noelle.pdg.inst.id !620"
Planner:          Loop nesting level: 3
Planner:          Hotness = 9.477015e-01 %
Planner:          Average instructions per invocation = 7.603471e+04 %
Planner:          Average iterations per invocation = 2.569990e+02 %
Planner:        
Planner:    ID: 57 (1)
Planner:      Function: "compute_initial_conditions"
Planner:      Loop: "  %34 = icmp slt i64 %indvars.iv8, %20, !noelle.pdg.inst.id !141"
Planner:      Loop nesting level: 1
Planner:      Hotness = 4.085625e+00 %
Planner:      Average instructions per invocation = 2.685275e+09 %
Planner:      Average iterations per invocation = 2.565000e+02 %
Planner:    
Planner:      ID: 58 (2)
Planner:        Function: "compute_initial_conditions"
Planner:        Loop: "  %35 = icmp sgt i64 %indvars.iv.i, %24, !noelle.pdg.inst.id !148"
Planner:        Loop nesting level: 2
Planner:        Hotness = 3.063158e+00 %
Planner:        Average instructions per invocation = 7.864294e+06 %
Planner:        Average iterations per invocation = 2.621440e+05 %
Planner:      
Planner:      ID: 59 (2)
Planner:        Function: "compute_initial_conditions"
Planner:        Loop: "  %60 = icmp slt i64 %indvars.iv6, %25, !noelle.pdg.inst.id !180"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.022454e+00 %
Planner:        Average instructions per invocation = 2.625028e+06 %
Planner:        Average iterations per invocation = 2.569980e+02 %
Planner:      
Planner:        ID: 60 (3)
Planner:          Function: "compute_initial_conditions"
Planner:          Loop: "  %exitcond = icmp eq i64 %indvars.iv, 512, !noelle.pdg.inst.id !189"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.021455e+00 %
Planner:          Average instructions per invocation = 1.024400e+04 %
Planner:          Average iterations per invocation = 5.129999e+02 %
Planner:        
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 63
Planner: LoopSelector:      Function: "evolve"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %16 = icmp slt i64 %indvars.iv5, %8, !noelle.pdg.inst.id !61"
Planner: LoopSelector:      Coverage: 1.073010e+01%
Planner: LoopSelector:      Whole-program savings = 1.073010e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 64
Planner: LoopSelector:      Function: "evolve"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %17 = icmp slt i64 %indvars.iv3, %11, !noelle.pdg.inst.id !67"
Planner: LoopSelector:      Coverage: 1.073007e+01%
Planner: LoopSelector:      Whole-program savings = 1.073007e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 65
Planner: LoopSelector:      Function: "evolve"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %18 = icmp slt i64 %indvars.iv, %14, !noelle.pdg.inst.id !73"
Planner: LoopSelector:      Coverage: 1.072408e+01%
Planner: LoopSelector:      Whole-program savings = 1.072408e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 2
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1113"
Planner: LoopSelector:      Coverage: 6.805510e+01%
Planner: LoopSelector:      Whole-program savings = 4.507409e+01%
Planner: LoopSelector:      Loop savings = 6.623177e+01%
Planner: LoopSelector:    Loop 4
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %81 = icmp slt i64 %indvars.iv13.i, %40, !noelle.pdg.inst.id !1132"
Planner: LoopSelector:      Coverage: 1.997330e+01%
Planner: LoopSelector:      Whole-program savings = 1.588987e+01%
Planner: LoopSelector:      Loop savings = 7.955556e+01%
Planner: LoopSelector:    Loop 5
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %82 = icmp sgt i64 %indvars.iv, %49, !noelle.pdg.inst.id !1138"
Planner: LoopSelector:      Coverage: 1.997328e+01%
Planner: LoopSelector:      Whole-program savings = 1.588985e+01%
Planner: LoopSelector:      Loop savings = 7.955553e+01%
Planner: LoopSelector:    Loop 20
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %140 = icmp slt i64 %indvars.iv13.i4, %52, !noelle.pdg.inst.id !1257"
Planner: LoopSelector:      Coverage: 1.997322e+01%
Planner: LoopSelector:      Whole-program savings = 1.588981e+01%
Planner: LoopSelector:      Loop savings = 7.955556e+01%
Planner: LoopSelector:    Loop 21
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %141 = icmp sgt i64 %indvars.iv60, %59, !noelle.pdg.inst.id !1262"
Planner: LoopSelector:      Coverage: 1.997320e+01%
Planner: LoopSelector:      Whole-program savings = 1.588979e+01%
Planner: LoopSelector:      Loop savings = 7.955553e+01%
Planner: LoopSelector:    Loop 36
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %199 = icmp slt i64 %indvars.iv12.i, %62, !noelle.pdg.inst.id !1372"
Planner: LoopSelector:      Coverage: 1.737782e+01%
Planner: LoopSelector:      Whole-program savings = 1.533611e+01%
Planner: LoopSelector:      Loop savings = 8.825109e+01%
Planner: LoopSelector:    Loop 37
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %200 = icmp sgt i64 %indvars.iv62, %69, !noelle.pdg.inst.id !1377"
Planner: LoopSelector:      Coverage: 1.737779e+01%
Planner: LoopSelector:      Whole-program savings = 1.533609e+01%
Planner: LoopSelector:      Loop savings = 8.825108e+01%
Planner: LoopSelector:    Loop 6
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %83 = icmp slt i64 %indvars.iv7.i, %48, !noelle.pdg.inst.id !1144"
Planner: LoopSelector:      Coverage: 1.049606e+01%
Planner: LoopSelector:      Whole-program savings = 1.049606e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 22
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %142 = icmp slt i64 %indvars.iv7.i7, %58, !noelle.pdg.inst.id !1267"
Planner: LoopSelector:      Coverage: 1.049602e+01%
Planner: LoopSelector:      Whole-program savings = 1.049602e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 17
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %119 = icmp slt i64 %indvars.iv11.i, %48, !noelle.pdg.inst.id !1221"
Planner: LoopSelector:      Coverage: 9.475207e+00%
Planner: LoopSelector:      Whole-program savings = 9.475207e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 33
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %178 = icmp slt i64 %indvars.iv11.i47, %58, !noelle.pdg.inst.id !1336"
Planner: LoopSelector:      Coverage: 9.475171e+00%
Planner: LoopSelector:      Whole-program savings = 9.475171e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 38
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %201 = icmp slt i64 %indvars.iv6.i, %47, !noelle.pdg.inst.id !1383"
Planner: LoopSelector:      Coverage: 8.689389e+00%
Planner: LoopSelector:      Whole-program savings = 8.689389e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 49
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %239 = icmp slt i64 %indvars.iv10.i, %47, !noelle.pdg.inst.id !1456"
Planner: LoopSelector:      Coverage: 8.687396e+00%
Planner: LoopSelector:      Whole-program savings = 8.687396e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 39
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 5
Planner: LoopSelector:      "  %206 = icmp slt i64 %indvars.iv.i5, %68, !noelle.pdg.inst.id !1392"
Planner: LoopSelector:      Coverage: 8.680230e+00%
Planner: LoopSelector:      Whole-program savings = 8.680230e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 50
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 5
Planner: LoopSelector:      "  %243 = icmp slt i64 %indvars.iv8.i, %68, !noelle.pdg.inst.id !1462"
Planner: LoopSelector:      Coverage: 8.680230e+00%
Planner: LoopSelector:      Whole-program savings = 8.680230e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 71 saves only 8.691114e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 72 saves only 8.681953e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 82 saves only 8.689119e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 83 saves only 8.681953e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 80 saves only 8.966320e-01 when parallelized. Skip it
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 69
Planner: LoopSelector:      Function: "cffts1"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %43 = icmp slt i64 %indvars.iv12, %24, !noelle.pdg.inst.id !403"
Planner: LoopSelector:      Coverage: 1.000171e+01%
Planner: LoopSelector:      Whole-program savings = 5.253809e+00%
Planner: LoopSelector:      Loop savings = 5.252910e+01%
Planner: LoopSelector:    Loop 70
Planner: LoopSelector:      Function: "cffts1"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %44 = icmp sgt i64 %indvars.iv11, %37, !noelle.pdg.inst.id !409"
Planner: LoopSelector:      Coverage: 1.000171e+01%
Planner: LoopSelector:      Whole-program savings = 5.253806e+00%
Planner: LoopSelector:      Loop savings = 5.252909e+01%
Planner: LoopSelector:    Loop 74
Planner: LoopSelector:      Function: "cffts1"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %77 = icmp slt i64 %indvars.iv10.i4.i, %75, !noelle.pdg.inst.id !472"
Planner: LoopSelector:      Coverage: 4.098632e+00%
Planner: LoopSelector:      Whole-program savings = 3.588105e+00%
Planner: LoopSelector:      Loop savings = 8.754396e+01%
Planner: LoopSelector:    Loop 77
Planner: LoopSelector:      Function: "cffts1"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %134 = icmp slt i64 %indvars.iv10.i.i, %132, !noelle.pdg.inst.id !541"
Planner: LoopSelector:      Coverage: 3.267374e+00%
Planner: LoopSelector:      Whole-program savings = 2.858952e+00%
Planner: LoopSelector:      Loop savings = 8.750000e+01%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 103 saves only 1.049807e+00 when parallelized. Skip it
Planner: LoopSelector:  Loop 114 saves only 9.477015e-01 when parallelized. Skip it
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 101
Planner: LoopSelector:      Function: "cffts3"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !395"
Planner: LoopSelector:      Coverage: 8.553348e+00%
Planner: LoopSelector:      Whole-program savings = 4.673349e+00%
Planner: LoopSelector:      Loop savings = 5.463766e+01%
Planner: LoopSelector:    Loop 102
Planner: LoopSelector:      Function: "cffts3"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %44 = icmp sgt i64 %indvars.iv12, %37, !noelle.pdg.inst.id !401"
Planner: LoopSelector:      Coverage: 8.553346e+00%
Planner: LoopSelector:      Whole-program savings = 4.673347e+00%
Planner: LoopSelector:      Loop savings = 5.463765e+01%
Planner: LoopSelector:    Loop 106
Planner: LoopSelector:      Function: "cffts3"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !465"
Planner: LoopSelector:      Coverage: 3.286512e+00%
Planner: LoopSelector:      Whole-program savings = 2.878091e+00%
Planner: LoopSelector:      Loop savings = 8.757282e+01%
Planner: LoopSelector:    Loop 109
Planner: LoopSelector:      Function: "cffts3"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !533"
Planner: LoopSelector:      Coverage: 3.267442e+00%
Planner: LoopSelector:      Whole-program savings = 2.859021e+00%
Planner: LoopSelector:      Loop savings = 8.750029e+01%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 54 saves only 7.179324e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 55 saves only 7.153375e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 53 saves only 7.179418e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 87 saves only 1.049807e+00 when parallelized. Skip it
Planner: LoopSelector:  Loop 98 saves only 9.477015e-01 when parallelized. Skip it
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 85
Planner: LoopSelector:      Function: "cffts2"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !403"
Planner: LoopSelector:      Coverage: 8.553348e+00%
Planner: LoopSelector:      Whole-program savings = 4.469139e+00%
Planner: LoopSelector:      Loop savings = 5.225017e+01%
Planner: LoopSelector:    Loop 86
Planner: LoopSelector:      Function: "cffts2"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %44 = icmp sgt i64 %indvars.iv14, %41, !noelle.pdg.inst.id !409"
Planner: LoopSelector:      Coverage: 8.553346e+00%
Planner: LoopSelector:      Whole-program savings = 4.469137e+00%
Planner: LoopSelector:      Loop savings = 5.225016e+01%
Planner: LoopSelector:    Loop 90
Planner: LoopSelector:      Function: "cffts2"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !473"
Planner: LoopSelector:      Coverage: 3.286512e+00%
Planner: LoopSelector:      Whole-program savings = 2.878091e+00%
Planner: LoopSelector:      Loop savings = 8.757282e+01%
Planner: LoopSelector:    Loop 93
Planner: LoopSelector:      Function: "cffts2"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !541"
Planner: LoopSelector:      Coverage: 3.267442e+00%
Planner: LoopSelector:      Whole-program savings = 2.859021e+00%
Planner: LoopSelector:      Loop savings = 8.750029e+01%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !109
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !108
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !109
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !108
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !109
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !108
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !109
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !108
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !109
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !108
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !109
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !108
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !109
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !108
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !109
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !108
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 58 saves only 8.168430e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 60 saves only 1.021455e+00 when parallelized. Skip it
Planner: LoopSelector:  Loop 59 saves only 9.198491e-01 when parallelized. Skip it
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 57
Planner: LoopSelector:      Function: "compute_initial_conditions"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %34 = icmp slt i64 %indvars.iv8, %20, !noelle.pdg.inst.id !141"
Planner: LoopSelector:      Coverage: 4.085625e+00%
Planner: LoopSelector:      Whole-program savings = 3.881414e+00%
Planner: LoopSelector:      Loop savings = 9.500172e+01%
Planner: LoopSelector: End
Planner:   Maximum time saved = 9.648172e+01% (126825112648)
Planner:   Maximum time saved with DOALL only = 1.073010e+01% (14104702208)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 7, !noelle.pdg.inst.id !1054" (5.096999e-08%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 7, !noelle.pdg.inst.id !1073" (5.096999e-08%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1115" (6.805510e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv15.i, 3, !noelle.pdg.inst.id !1126" (2.738686e-07%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %81 = icmp slt i64 %indvars.iv13.i, %40, !noelle.pdg.inst.id !1134" (1.997330e+01%)
Noelle:     Loop "  %82 = icmp sgt i64 %indvars.iv, %49, !noelle.pdg.inst.id !1140" (1.997328e+01%)
Noelle:     Loop "  %83 = icmp slt i64 %indvars.iv7.i, %48, !noelle.pdg.inst.id !1146" (1.049606e+01%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv.i, %47, !noelle.pdg.inst.id !1153" (1.030428e+01%)
Noelle:     Loop "  br i1 false, label %.preheader.i.i..loopexit.i.i_crit_edge, label %100, !prof !1176, !noelle.loop.id !1180, !noelle.pdg.inst.id !1181" (4.984683e-04%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  br i1 false, label %101, label %.us-lcssa.us.loopexit1.i19.i.i, !prof !1176, !noelle.loop.id !1184, !noelle.pdg.inst.id !1185" (1.246163e-04%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  br i1 false, label %103, label %107, !noelle.loop.id !1150, !noelle.pdg.inst.id !1187" (0.000000e+00%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  br i1 false, label %105, label %106, !noelle.loop.id !1189, !noelle.pdg.inst.id !1190" (0.000000e+00%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  br i1 false, label %109, label %.us-lcssa.us.loopexit1.i.i.i, !noelle.loop.id !1197, !noelle.pdg.inst.id !1198" (3.042985e-09%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  br i1 false, label %111, label %115, !noelle.loop.id !1200, !noelle.pdg.inst.id !1201" (3.042985e-09%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  br i1 false, label %113, label %114, !noelle.loop.id !1203, !noelle.pdg.inst.id !1204" (3.042985e-09%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  br i1 false, label %.preheader1.i.i.preheader, label %cfftz.exit.i.loopexit, !noelle.loop.id !1213, !noelle.pdg.inst.id !1214" (0.000000e+00%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  br i1 false, label %116, label %117, !noelle.loop.id !1216, !noelle.pdg.inst.id !1217" (0.000000e+00%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %119 = icmp slt i64 %indvars.iv11.i, %48, !noelle.pdg.inst.id !1223" (9.475207e+00%)
Noelle:     Loop "  %120 = icmp slt i64 %indvars.iv9.i, %47, !noelle.pdg.inst.id !1228" (9.283423e+00%)
Noelle:     Loop "  %exitcond.i2 = icmp eq i64 %indvars.iv15.i1, 3, !noelle.pdg.inst.id !1251" (2.738686e-07%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %140 = icmp slt i64 %indvars.iv13.i4, %52, !noelle.pdg.inst.id !1259" (1.997322e+01%)
Noelle:     Loop "  %141 = icmp sgt i64 %indvars.iv60, %59, !noelle.pdg.inst.id !1264" (1.997320e+01%)
Noelle:     Loop "  %142 = icmp slt i64 %indvars.iv7.i7, %58, !noelle.pdg.inst.id !1269" (1.049602e+01%)
Noelle:     Loop "  %143 = icmp slt i64 %indvars.iv.i9, %47, !noelle.pdg.inst.id !1274" (1.030424e+01%)
Noelle:     Loop "  br i1 false, label %.preheader.i.i16..loopexit.i.i38_crit_edge, label %159, !prof !1176, !noelle.loop.id !1295, !noelle.pdg.inst.id !1296" (4.984652e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  br i1 false, label %160, label %.us-lcssa.us.loopexit1.i19.i.i27, !prof !1176, !noelle.loop.id !1299, !noelle.pdg.inst.id !1300" (1.246155e-04%)
Noelle:  Disable loop "25" as cold code
Noelle:     Loop "  br i1 false, label %162, label %166, !noelle.loop.id !1302, !noelle.pdg.inst.id !1303" (0.000000e+00%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  br i1 false, label %164, label %165, !noelle.loop.id !1305, !noelle.pdg.inst.id !1306" (0.000000e+00%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  br i1 false, label %168, label %.us-lcssa.us.loopexit1.i.i.i37, !noelle.loop.id !1312, !noelle.pdg.inst.id !1313" (3.042985e-09%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  br i1 false, label %170, label %174, !noelle.loop.id !1315, !noelle.pdg.inst.id !1316" (3.042985e-09%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  br i1 false, label %172, label %173, !noelle.loop.id !1318, !noelle.pdg.inst.id !1319" (3.042985e-09%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  br i1 false, label %.preheader1.i.i41.preheader, label %cfftz.exit.i46.loopexit, !noelle.loop.id !1328, !noelle.pdg.inst.id !1329" (0.000000e+00%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  br i1 false, label %175, label %176, !noelle.loop.id !1331, !noelle.pdg.inst.id !1332" (0.000000e+00%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %178 = icmp slt i64 %indvars.iv11.i47, %58, !noelle.pdg.inst.id !1338" (9.475171e+00%)
Noelle:     Loop "  %179 = icmp slt i64 %indvars.iv9.i49, %47, !noelle.pdg.inst.id !1343" (9.283387e+00%)
Noelle:     Loop "  %exitcond.i1 = icmp eq i64 %indvars.iv14.i, 3, !noelle.pdg.inst.id !1366" (2.738686e-07%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %199 = icmp slt i64 %indvars.iv12.i, %62, !noelle.pdg.inst.id !1374" (1.737782e+01%)
Noelle:     Loop "  %200 = icmp sgt i64 %indvars.iv62, %69, !noelle.pdg.inst.id !1379" (1.737779e+01%)
Noelle:     Loop "  %201 = icmp slt i64 %indvars.iv6.i, %47, !noelle.pdg.inst.id !1385" (8.689389e+00%)
Noelle:     Loop "  %206 = icmp slt i64 %indvars.iv.i5, %68, !noelle.pdg.inst.id !1394" (8.680230e+00%)
Noelle:     Loop "  br i1 false, label %.preheader.i.i11..loopexit.i.i33_crit_edge, label %220, !prof !1410, !noelle.loop.id !1414, !noelle.pdg.inst.id !1415" (2.492341e-04%)
Noelle:  Disable loop "40" as cold code
Noelle:     Loop "  br i1 false, label %221, label %.us-lcssa.us.loopexit1.i19.i.i22, !prof !1410, !noelle.loop.id !1418, !noelle.pdg.inst.id !1419" (6.230815e-05%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  br i1 false, label %223, label %227, !noelle.loop.id !1421, !noelle.pdg.inst.id !1422" (0.000000e+00%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  br i1 false, label %225, label %226, !noelle.loop.id !1424, !noelle.pdg.inst.id !1425" (0.000000e+00%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  br i1 false, label %229, label %.us-lcssa.us.loopexit1.i.i.i32, !noelle.loop.id !1432, !noelle.pdg.inst.id !1433" (1.521492e-09%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  br i1 false, label %231, label %235, !noelle.loop.id !1435, !noelle.pdg.inst.id !1436" (1.521492e-09%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  br i1 false, label %233, label %234, !noelle.loop.id !1438, !noelle.pdg.inst.id !1439" (1.521492e-09%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  br i1 false, label %.preheader1.i.i36.preheader, label %cfftz.exit.i41.loopexit, !noelle.loop.id !1448, !noelle.pdg.inst.id !1449" (0.000000e+00%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  br i1 false, label %236, label %237, !noelle.loop.id !1451, !noelle.pdg.inst.id !1452" (0.000000e+00%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %239 = icmp slt i64 %indvars.iv10.i, %47, !noelle.pdg.inst.id !1458" (8.687396e+00%)
Noelle:     Loop "  %243 = icmp slt i64 %indvars.iv8.i, %68, !noelle.pdg.inst.id !1464" (8.680230e+00%)
Noelle:  Function "fft"
Noelle:  Function "evolve"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv5, %8, !noelle.pdg.inst.id !63" (1.073010e+01%)
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv3, %11, !noelle.pdg.inst.id !70" (1.073007e+01%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv, %14, !noelle.pdg.inst.id !77" (1.072408e+01%)
Noelle:  Function "cffts1"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv14, 3, !noelle.pdg.inst.id !368" (3.294031e-07%)
Noelle:  Disable loop "54" as cold code
Noelle:     Loop "  %43 = icmp slt i64 %indvars.iv12, %24, !noelle.pdg.inst.id !405" (1.000171e+01%)
Noelle:     Loop "  %44 = icmp sgt i64 %indvars.iv11, %37, !noelle.pdg.inst.id !412" (1.000171e+01%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv6, %36, !noelle.pdg.inst.id !419" (8.691114e-01%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv, %29, !noelle.pdg.inst.id !428" (8.681953e-01%)
Noelle:     Loop "  %65 = icmp slt i32 %21, %.0.i, !noelle.pdg.inst.id !455" (7.366971e+00%)
Noelle:     Loop "  %77 = icmp slt i64 %indvars.iv10.i4.i, %75, !noelle.pdg.inst.id !476" (4.098632e+00%)
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv8.i6.i, %74, !noelle.pdg.inst.id !490" (4.066661e+00%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv.i8.i, %36, !noelle.pdg.inst.id !502" (3.980516e+00%)
Noelle:     Loop "  %134 = icmp slt i64 %indvars.iv10.i.i, %132, !noelle.pdg.inst.id !546" (3.267374e+00%)
Noelle:     Loop "  %146 = icmp slt i64 %indvars.iv8.i.i, %131, !noelle.pdg.inst.id !560" (3.251407e+00%)
Noelle:     Loop "  %154 = icmp slt i64 %indvars.iv.i.i, %36, !noelle.pdg.inst.id !572" (3.184413e+00%)
Noelle:     Loop "  %180 = icmp slt i64 %indvars.iv5.i, %29, !noelle.pdg.inst.id !605" (8.966320e-01%)
Noelle:     Loop "  %181 = icmp slt i64 %indvars.iv.i, %36, !noelle.pdg.inst.id !611" (8.774685e-01%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv10, %36, !noelle.pdg.inst.id !630" (8.689119e-01%)
Noelle:     Loop "  %199 = icmp slt i64 %indvars.iv8, %29, !noelle.pdg.inst.id !636" (8.681953e-01%)
Noelle:  Function "cffts2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv15, 3, !noelle.pdg.inst.id !368" (3.294031e-07%)
Noelle:  Disable loop "70" as cold code
Noelle:     Loop "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !405" (8.553348e+00%)
Noelle:     Loop "  %44 = icmp sgt i64 %indvars.iv14, %41, !noelle.pdg.inst.id !412" (8.553346e+00%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv7, %31, !noelle.pdg.inst.id !419" (1.049807e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv, %30, !noelle.pdg.inst.id !425" (1.030625e+00%)
Noelle:     Loop "  %63 = icmp slt i32 %21, %.0.i, !noelle.pdg.inst.id !455" (6.555687e+00%)
Noelle:     Loop "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !477" (3.286512e+00%)
Noelle:     Loop "  %87 = icmp slt i64 %indvars.iv8.i6.i, %72, !noelle.pdg.inst.id !491" (3.254579e+00%)
Noelle:     Loop "  %95 = icmp slt i64 %indvars.iv.i8.i, %30, !noelle.pdg.inst.id !503" (3.184407e+00%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !546" (3.267442e+00%)
Noelle:     Loop "  %144 = icmp slt i64 %indvars.iv8.i.i, %129, !noelle.pdg.inst.id !560" (3.251401e+00%)
Noelle:     Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %30, !noelle.pdg.inst.id !572" (3.184407e+00%)
Noelle:     Loop "  %178 = icmp slt i64 %indvars.iv5.i, %31, !noelle.pdg.inst.id !603" (0.000000e+00%)
Noelle:  Disable loop "82" as cold code
Noelle:     Loop "  %179 = icmp slt i64 %indvars.iv.i, %30, !noelle.pdg.inst.id !608" (0.000000e+00%)
Noelle:  Disable loop "83" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %indvars.iv11, %31, !noelle.pdg.inst.id !626" (9.477015e-01%)
Noelle:     Loop "  %194 = icmp slt i64 %indvars.iv9, %30, !noelle.pdg.inst.id !631" (9.285194e-01%)
Noelle:  Function "cffts3"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv15, 3, !noelle.pdg.inst.id !360" (3.415750e-07%)
Noelle:  Disable loop "86" as cold code
Noelle:     Loop "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !397" (8.553348e+00%)
Noelle:     Loop "  %44 = icmp sgt i64 %indvars.iv12, %37, !noelle.pdg.inst.id !404" (8.553346e+00%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv7, %29, !noelle.pdg.inst.id !411" (1.049807e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv, %35, !noelle.pdg.inst.id !417" (1.030625e+00%)
Noelle:     Loop "  %63 = icmp slt i32 %21, %.0.i, !noelle.pdg.inst.id !447" (6.555687e+00%)
Noelle:     Loop "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !469" (3.286512e+00%)
Noelle:     Loop "  %87 = icmp slt i64 %indvars.iv8.i6.i, %72, !noelle.pdg.inst.id !483" (3.254579e+00%)
Noelle:     Loop "  %95 = icmp slt i64 %indvars.iv.i8.i, %35, !noelle.pdg.inst.id !495" (3.184407e+00%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !538" (3.267442e+00%)
Noelle:     Loop "  %144 = icmp slt i64 %indvars.iv8.i.i, %129, !noelle.pdg.inst.id !552" (3.251401e+00%)
Noelle:     Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %35, !noelle.pdg.inst.id !564" (3.184407e+00%)
Noelle:     Loop "  %178 = icmp slt i64 %indvars.iv5.i, %29, !noelle.pdg.inst.id !595" (0.000000e+00%)
Noelle:  Disable loop "98" as cold code
Noelle:     Loop "  %179 = icmp slt i64 %indvars.iv.i, %35, !noelle.pdg.inst.id !600" (0.000000e+00%)
Noelle:  Disable loop "99" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %indvars.iv11, %29, !noelle.pdg.inst.id !618" (9.477015e-01%)
Noelle:     Loop "  %194 = icmp slt i64 %indvars.iv9, %35, !noelle.pdg.inst.id !623" (9.285194e-01%)
Noelle:  Function "compute_initial_conditions"
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv8, %20, !noelle.pdg.inst.id !143" (4.085625e+00%)
Noelle:     Loop "  %35 = icmp sgt i64 %indvars.iv.i, %24, !noelle.pdg.inst.id !151" (3.063158e+00%)
Noelle:     Loop "  %60 = icmp slt i64 %indvars.iv6, %25, !noelle.pdg.inst.id !183" (1.022454e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512, !noelle.pdg.inst.id !192" (1.021455e+00%)
Noelle:  Function "compute_indexmap"
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv10, %4, !noelle.pdg.inst.id !77" (7.179418e-01%)
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv8, %8, !noelle.pdg.inst.id !91" (7.179324e-01%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv6, %12, !noelle.pdg.inst.id !105" (7.153375e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1966081, !noelle.pdg.inst.id !126" (3.291316e-02%)
Noelle:  Disable loop "109" as cold code
Noelle:  Function "checksum"
Noelle:  Disable "checksum" as cold function
Noelle:  Function "fft_init"
Noelle:  Disable "fft_init" as cold function
Noelle:  Function "ipow46"
Noelle:  Disable "ipow46" as cold function
Noelle:  Function "ilog2"
Noelle:  Disable "ilog2" as cold function
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "setup"
Noelle:  Disable "setup" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "verify"
Noelle:  Disable "verify" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
Noelle:  Function "vranlc"
Noelle:  Disable "vranlc" as cold function
Parallelizer:    There are 70 loops in the program we are going to consider
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !111
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !110
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !111
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !110
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "evolve"
Parallelizer: parallelizerLoop:   Loop 63 = "  %16 = icmp slt i64 %indvars.iv5, %8, !noelle.pdg.inst.id !63"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 = i32 %2
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %8 = sext i32 %7 to i64, !noelle.pdg.inst.id !54
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %11 = sext i32 %10 to i64, !noelle.pdg.inst.id !57
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %14 = sext i32 %13 to i64, !noelle.pdg.inst.id !60
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: Start the parallelization
DOALL:   Number of threads to extract = 8
DOALL:   Chunk size = 8
DOALL:   Reduced variables:
DOALL:  Cloned loop
DOALL:  Adjusted data flow
DOALL:  Rewired induction variables and reducible variables
DOALL:  Stored live outs
DOALL:  Final parallelized loop:

define void @noelle_task_0(i8*, i64, i64, i64) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [32 x i64]*
  %5 = getelementptr inbounds [32 x i64], [32 x i64]* %noelle.environment_variable.pointer, i64 0, i64 0
  %6 = bitcast i64* %5 to i32*
  %noelle_environment_variable_0 = load i32, i32* %6
  %7 = getelementptr inbounds [32 x i64], [32 x i64]* %noelle.environment_variable.pointer, i64 0, i64 8
  %8 = getelementptr inbounds [32 x i64], [32 x i64]* %noelle.environment_variable.pointer, i64 0, i64 16
  %noelle_environment_variable_2 = load i64, i64* %8
  %9 = getelementptr inbounds [32 x i64], [32 x i64]* %noelle.environment_variable.pointer, i64 0, i64 24
  %noelle_environment_variable_3 = load i64, i64* %9
  %coreIdx_X_chunkSize = mul i64 %1, %3
  %10 = mul i64 1, %coreIdx_X_chunkSize
  %11 = add i64 0, %10
  %numCoresMinus1 = sub i64 %2, 1
  %numCoresMinus1_X_chunkSize = mul i64 %numCoresMinus1, %3
  %12 = mul i64 1, %numCoresMinus1_X_chunkSize
  %13 = load i64, i64* %7
  br label %35

14:                                               ; preds = %15
  ret void

15:                                               ; preds = %35
  br label %14

16:                                               ; preds = %48
  %17 = getelementptr inbounds [256 x [256 x [512 x %struct.dcomplex]]], [256 x [256 x [512 x %struct.dcomplex]]]* @main.u0, i64 0, i64 %36, i64 %45, i64 %49, i32 0, !noelle.pdg.inst.id !30
  %18 = load double, double* %17, align 16, !tbaa !31, !noelle.pdg.inst.id !36
  %19 = getelementptr inbounds [256 x [256 x [512 x i32]]], [256 x [256 x [512 x i32]]]* @main.indexmap, i64 0, i64 %36, i64 %45, i64 %49, !noelle.pdg.inst.id !37
  %20 = load i32, i32* %19, align 4, !tbaa !38, !noelle.pdg.inst.id !40
  %21 = mul nsw i32 %20, %noelle_environment_variable_0, !noelle.pdg.inst.id !41
  %22 = sext i32 %21 to i64, !noelle.pdg.inst.id !42
  %23 = getelementptr inbounds [1966081 x double], [1966081 x double]* @ex, i64 0, i64 %22, !noelle.pdg.inst.id !43
  %24 = load double, double* %23, align 8, !tbaa !44, !noelle.pdg.inst.id !45
  %25 = fmul double %18, %24, !noelle.pdg.inst.id !46
  %26 = getelementptr inbounds [256 x [256 x [512 x %struct.dcomplex]]], [256 x [256 x [512 x %struct.dcomplex]]]* @main.u1, i64 0, i64 %36, i64 %45, i64 %49, i32 0, !noelle.pdg.inst.id !47
  store double %25, double* %26, align 16, !tbaa !31, !noelle.pdg.inst.id !48
  %27 = getelementptr inbounds [256 x [256 x [512 x %struct.dcomplex]]], [256 x [256 x [512 x %struct.dcomplex]]]* @main.u0, i64 0, i64 %36, i64 %45, i64 %49, i32 1, !noelle.pdg.inst.id !49
  %28 = load double, double* %27, align 8, !tbaa !50, !noelle.pdg.inst.id !51
  %29 = fmul double %28, %24, !noelle.pdg.inst.id !52
  %30 = getelementptr inbounds [256 x [256 x [512 x %struct.dcomplex]]], [256 x [256 x [512 x %struct.dcomplex]]]* @main.u1, i64 0, i64 %36, i64 %45, i64 %49, i32 1, !noelle.pdg.inst.id !53
  store double %29, double* %30, align 8, !tbaa !50, !noelle.pdg.inst.id !54
  %31 = add nuw nsw i64 %49, 1, !noelle.pdg.inst.id !55
  br label %48, !noelle.pdg.inst.id !56

32:                                               ; preds = %48
  %33 = add nuw nsw i64 %45, 1, !noelle.pdg.inst.id !57
  br label %44, !noelle.pdg.inst.id !58

34:                                               ; preds = %35
  br label %44, !noelle.pdg.inst.id !59

35:                                               ; preds = %4, %39
  %36 = phi i64 [ %nextStepOrNextChunk, %39 ], [ %11, %4 ], !noelle.pdg.inst.id !60
  %37 = phi i64 [ 0, %4 ], [ %chunkWrap, %39 ]
  %38 = icmp sge i64 %36, %13, !noelle.pdg.inst.id !61
  br i1 %38, label %15, label %34, !prof !62, !noelle.loop.id !63, !noelle.pdg.inst.id !64, !noelle.parallelizer.looporder !65

39:                                               ; preds = %44
  %40 = add nuw nsw i64 %36, 1, !noelle.pdg.inst.id !66
  %41 = add i64 %37, 1
  %42 = icmp eq i64 %41, %3
  %chunkWrap = select i1 %42, i64 0, i64 %41
  %43 = add i64 %40, %12
  %nextStepOrNextChunk = select i1 %42, i64 %43, i64 %40
  br label %35, !noelle.pdg.inst.id !67

44:                                               ; preds = %32, %34
  %45 = phi i64 [ %33, %32 ], [ 0, %34 ], !noelle.pdg.inst.id !68
  %46 = icmp slt i64 %45, %noelle_environment_variable_2, !noelle.pdg.inst.id !69
  br i1 %46, label %47, label %39, !prof !70, !noelle.loop.id !71, !noelle.pdg.inst.id !72, !noelle.parallelizer.looporder !73

47:                                               ; preds = %44
  br label %48, !noelle.pdg.inst.id !74

48:                                               ; preds = %16, %47
  %49 = phi i64 [ %31, %16 ], [ 0, %47 ], !noelle.pdg.inst.id !75
  %50 = icmp slt i64 %49, %noelle_environment_variable_3, !noelle.pdg.inst.id !76
  br i1 %50, label %16, label %32, !prof !77, !noelle.loop.id !78, !noelle.pdg.inst.id !79, !noelle.parallelizer.looporder !80
}

DOALL: Exit
Parallelizer: parallelizerLoop:   Link the parallelize loop
Parallelizer: parallelizerLoop:   The loop has been parallelized with DOALL
Parallelizer: parallelizerLoop: Exit
Parallelizer:    Keep track of basic blocks being modified by the parallelization
Parallelizer:    Loop 64 cannot be parallelized because one of its parent has been parallelized already
Parallelizer:    Loop 65 cannot be parallelized because one of its parent has been parallelized already
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 2 = "  %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1115"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %33 = bitcast [512 x [18 x %struct.dcomplex]]* %5 to i8*, !noelle.pdg.inst.id !1085
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %34 = bitcast [512 x [18 x %struct.dcomplex]]* %3 to i8*, !noelle.pdg.inst.id !1086
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %35 = bitcast [512 x [18 x %struct.dcomplex]]* %4 to i8*, !noelle.pdg.inst.id !1087
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %40 = sext i32 %39 to i64, !noelle.pdg.inst.id !1091
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %47 = sext i32 %41 to i64, !noelle.pdg.inst.id !1095
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %48 = sext i32 %46 to i64, !noelle.pdg.inst.id !1096
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %49 = sext i32 %44 to i64, !noelle.pdg.inst.id !1097
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %52 = sext i32 %51 to i64, !noelle.pdg.inst.id !1099
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %58 = sext i32 %57 to i64, !noelle.pdg.inst.id !1103
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %59 = sext i32 %55 to i64, !noelle.pdg.inst.id !1104
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %62 = sext i32 %61 to i64, !noelle.pdg.inst.id !1106
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %68 = sext i32 %67 to i64, !noelle.pdg.inst.id !1110
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %69 = sext i32 %65 to i64, !noelle.pdg.inst.id !1111
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %70 = or i32 %37, 1, !noelle.pdg.inst.id !1112
DOALL: Checking if the loop is DOALL
DOALL:   More than 1 loop exit blocks
DSWP: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences:  Initial number of partitions: 8
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Exit
DSWP:  Before partitioning the SCCDAG
Heuristic:   PCA: No candidates
DSWP:  Final number of partitions: 8
DSWP:  After partitioning the SCCDAG
DSWP:  There are 8 partitions in the SCCDAG
DSWP:  Pipeline stages
DSWP:    Stage: 0
DSWP:    SCC
DSWP:      %.01 = phi i32 [ 1, %24 ], [ %260, %cffts1.exit ], !noelle.pdg.inst.id !1114
DSWP:      %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1115
DSWP:      br i1 %exitcond1, label %261, label %72, !prof !1116, !noelle.loop.id !1117, !noelle.pdg.inst.id !1118, !noelle.parallelizer.looporder !1119
DSWP:      %indvars.iv13.i = phi i64 [ %indvars.iv.next14.i, %135 ], [ 0, %79 ], !noelle.pdg.inst.id !1133
DSWP:      %81 = icmp slt i64 %indvars.iv13.i, %40, !noelle.pdg.inst.id !1134
DSWP:      br i1 %81, label %.preheader19.preheader, label %cffts3.exit, !prof !1135, !noelle.loop.id !1136, !noelle.pdg.inst.id !1137, !noelle.parallelizer.looporder !1136
DSWP:      %indvars.iv = phi i64 [ %indvars.iv.next, %134 ], [ 0, %.preheader19.preheader ], !noelle.pdg.inst.id !1139
DSWP:      %82 = icmp sgt i64 %indvars.iv, %49, !noelle.pdg.inst.id !1140
DSWP:      br i1 %82, label %135, label %.preheader16.preheader, !prof !1141, !noelle.loop.id !1142, !noelle.pdg.inst.id !1143, !noelle.parallelizer.looporder !1142
DSWP:      br i1 false, label %LeafBlock7._crit_edge.._crit_edge_crit_edge.i.i, label %.preheader.i.i.preheader, !prof !1176, !noelle.pdg.inst.id !1177
DSWP:      %indvars.iv.next = add i64 %indvars.iv, %47, !noelle.pdg.inst.id !1244
DSWP:      %indvars.iv.next14.i = add nuw nsw i64 %indvars.iv13.i, 1, !noelle.pdg.inst.id !1246
DSWP:      %indvars.iv13.i4 = phi i64 [ %indvars.iv.next14.i52, %194 ], [ 0, %138 ], !noelle.pdg.inst.id !1258
DSWP:      %140 = icmp slt i64 %indvars.iv13.i4, %52, !noelle.pdg.inst.id !1259
DSWP:      br i1 %140, label %.preheader18.preheader, label %cffts2.exit, !prof !1135, !noelle.loop.id !1260, !noelle.pdg.inst.id !1261, !noelle.parallelizer.looporder !1148
DSWP:      %indvars.iv60 = phi i64 [ %indvars.iv.next61, %193 ], [ 0, %.preheader18.preheader ], !noelle.pdg.inst.id !1263
DSWP:      %141 = icmp sgt i64 %indvars.iv60, %59, !noelle.pdg.inst.id !1264
DSWP:      br i1 %141, label %194, label %.preheader14.preheader, !prof !1141, !noelle.loop.id !1265, !noelle.pdg.inst.id !1266, !noelle.parallelizer.looporder !1155
DSWP:      br i1 false, label %LeafBlock7._crit_edge.._crit_edge_crit_edge.i.i13, label %.preheader.i.i16.preheader, !prof !1176, !noelle.pdg.inst.id !1292
DSWP:      %indvars.iv.next61 = add i64 %indvars.iv60, %47, !noelle.pdg.inst.id !1359
DSWP:      %indvars.iv.next14.i52 = add nuw nsw i64 %indvars.iv13.i4, 1, !noelle.pdg.inst.id !1361
DSWP:      %indvars.iv12.i = phi i64 [ %indvars.iv.next13.i, %257 ], [ 0, %197 ], !noelle.pdg.inst.id !1373
DSWP:      %199 = icmp slt i64 %indvars.iv12.i, %62, !noelle.pdg.inst.id !1374
DSWP:      br i1 %199, label %.preheader17.preheader, label %cffts1.exit, !prof !1135, !noelle.loop.id !1375, !noelle.pdg.inst.id !1376, !noelle.parallelizer.looporder !1180
DSWP:      %indvars.iv62 = phi i64 [ %indvars.iv.next63, %256 ], [ 0, %.preheader17.preheader ], !noelle.pdg.inst.id !1378
DSWP:      %200 = icmp sgt i64 %indvars.iv62, %69, !noelle.pdg.inst.id !1379
DSWP:      br i1 %200, label %257, label %.preheader.i4.preheader, !prof !1380, !noelle.loop.id !1381, !noelle.pdg.inst.id !1382, !noelle.parallelizer.looporder !1184
DSWP:      br i1 false, label %LeafBlock7._crit_edge.._crit_edge_crit_edge.i.i8, label %.preheader.i.i11.preheader, !prof !1410, !noelle.pdg.inst.id !1411
DSWP:      %indvars.iv.next63 = add i64 %indvars.iv62, %47, !noelle.pdg.inst.id !1479
DSWP:      %indvars.iv.next13.i = add nuw nsw i64 %indvars.iv12.i, 1, !noelle.pdg.inst.id !1481
DSWP:      %260 = add nuw nsw i32 %.01, 1, !noelle.pdg.inst.id !1486
DSWP:    
DSWP:    Stage: 1
DSWP:    SCC
DSWP:      call void @llvm.lifetime.start.p0i8(i64 147456, i8* nonnull %33) #14, !noelle.pdg.inst.id !1131
DSWP:    
DSWP:    Stage: 2
DSWP:    SCC
DSWP:      call void @llvm.lifetime.start.p0i8(i64 147456, i8* nonnull %34) #14, !noelle.pdg.inst.id !1256
DSWP:    
DSWP:    Stage: 3
DSWP:    SCC
DSWP:      call void @llvm.lifetime.end.p0i8(i64 147456, i8* nonnull %33) #14, !noelle.pdg.inst.id !1248
DSWP:    
DSWP:    Stage: 4
DSWP:    SCC
DSWP:      call void @llvm.lifetime.end.p0i8(i64 147456, i8* nonnull %35) #14, !noelle.pdg.inst.id !1483
DSWP:    
DSWP:    Stage: 5
DSWP:    SCC
DSWP:      call void @llvm.lifetime.end.p0i8(i64 147456, i8* nonnull %34) #14, !noelle.pdg.inst.id !1363
DSWP:    
DSWP:    Stage: 6
DSWP:    SCC
DSWP:      tail call fastcc void @evolve([256 x [512 x %struct.dcomplex]]* %73, [256 x [512 x %struct.dcomplex]]* %74, i32 %.01, [256 x [512 x i32]]* %75, i32* %76), !noelle.pdg.inst.id !37
DSWP:      %90 = load i64, i64* %89, align 16, !tbaa !1162, !noelle.pdg.inst.id !101
DSWP:      store i64 %90, i64* %92, align 16, !tbaa !1162, !noelle.pdg.inst.id !103
DSWP:      %95 = load i64, i64* %94, align 8, !tbaa !1169, !noelle.pdg.inst.id !106
DSWP:      store i64 %95, i64* %97, align 8, !tbaa !1169, !noelle.pdg.inst.id !110
DSWP:      %124 = load i64, i64* %123, align 16, !tbaa !1162, !noelle.pdg.inst.id !113
DSWP:      store i64 %124, i64* %127, align 16, !tbaa !1162, !noelle.pdg.inst.id !115
DSWP:      %130 = load i64, i64* %129, align 8, !tbaa !1169, !noelle.pdg.inst.id !118
DSWP:      store i64 %130, i64* %132, align 8, !tbaa !1169, !noelle.pdg.inst.id !120
DSWP:      %149 = load i64, i64* %148, align 16, !tbaa !1162, !noelle.pdg.inst.id !123
DSWP:      store i64 %149, i64* %151, align 16, !tbaa !1162, !noelle.pdg.inst.id !125
DSWP:      %154 = load i64, i64* %153, align 8, !tbaa !1169, !noelle.pdg.inst.id !128
DSWP:      store i64 %154, i64* %156, align 8, !tbaa !1169, !noelle.pdg.inst.id !130
DSWP:      %183 = load i64, i64* %182, align 16, !tbaa !1162, !noelle.pdg.inst.id !108
DSWP:      store i64 %183, i64* %186, align 16, !tbaa !1162, !noelle.pdg.inst.id !133
DSWP:      %189 = load i64, i64* %188, align 8, !tbaa !1169, !noelle.pdg.inst.id !136
DSWP:      store i64 %189, i64* %191, align 8, !tbaa !1169, !noelle.pdg.inst.id !138
DSWP:      %210 = load i64, i64* %209, align 16, !tbaa !1162, !noelle.pdg.inst.id !141
DSWP:      store i64 %210, i64* %212, align 16, !tbaa !1162, !noelle.pdg.inst.id !143
DSWP:      %215 = load i64, i64* %214, align 8, !tbaa !1169, !noelle.pdg.inst.id !146
DSWP:      store i64 %215, i64* %217, align 8, !tbaa !1169, !noelle.pdg.inst.id !148
DSWP:      %247 = load i64, i64* %246, align 16, !tbaa !1162, !noelle.pdg.inst.id !151
DSWP:      store i64 %247, i64* %249, align 16, !tbaa !1162, !noelle.pdg.inst.id !153
DSWP:      %252 = load i64, i64* %251, align 8, !tbaa !1169, !noelle.pdg.inst.id !156
DSWP:      store i64 %252, i64* %254, align 8, !tbaa !1169, !noelle.pdg.inst.id !158
DSWP:      tail call fastcc void @checksum(i32 %.01, [256 x [512 x %struct.dcomplex]]* %258, i32* %259), !noelle.pdg.inst.id !161
DSWP:    
DSWP:    Stage: 7
DSWP:    SCC
DSWP:      call void @llvm.lifetime.start.p0i8(i64 147456, i8* nonnull %35) #14, !noelle.pdg.inst.id !1371
DSWP:    
DSWP:  Queues that connect the pipeline stages
DSWP:    Stage: 0
DSWP:      Push value queues: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 
DSWP:      Pop value queues: 
DSWP:    Stage: 1
DSWP:      Push value queues: 
DSWP:      Pop value queues: 12 19 26 33 40 47 54 
DSWP:    Stage: 2
DSWP:      Push value queues: 
DSWP:      Pop value queues: 11 18 25 32 39 46 53 
DSWP:    Stage: 3
DSWP:      Push value queues: 
DSWP:      Pop value queues: 10 17 24 31 38 45 52 
DSWP:    Stage: 4
DSWP:      Push value queues: 
DSWP:      Pop value queues: 9 16 23 30 37 44 51 
DSWP:    Stage: 5
DSWP:      Push value queues: 
DSWP:      Pop value queues: 8 15 22 29 36 43 50 
DSWP:    Stage: 6
DSWP:      Push value queues: 
DSWP:      Pop value queues: 0 1 2 3 4 5 6 7 14 21 28 35 42 49 
DSWP:    Stage: 7
DSWP:      Push value queues: 
DSWP:      Pop value queues: 13 20 27 34 41 48 55 
DSWP:    Queue: 0
DSWP:     Producer:	  %indvars.iv13.i = phi i64 [ %indvars.iv.next14.i, %135 ], [ 0, %79 ], !noelle.pdg.inst.id !1133
DSWP:     Consumer:	  %131 = getelementptr inbounds [256 x [256 x [512 x %struct.dcomplex]]], [256 x [256 x [512 x %struct.dcomplex]]]* @main.u1, i64 0, i64 %indvars.iv11.i, i64 %indvars.iv13.i, i64 %125, i32 1, !noelle.pdg.inst.id !1238
DSWP:     Consumer:	  %93 = getelementptr inbounds [256 x [256 x [512 x %struct.dcomplex]]], [256 x [256 x [512 x %struct.dcomplex]]]* @main.u1, i64 0, i64 %indvars.iv7.i, i64 %indvars.iv13.i, i64 %87, i32 1, !noelle.pdg.inst.id !1167
DSWP:     Consumer:	  %88 = getelementptr inbounds [256 x [256 x [512 x %struct.dcomplex]]], [256 x [256 x [512 x %struct.dcomplex]]]* @main.u1, i64 0, i64 %indvars.iv7.i, i64 %indvars.iv13.i, i64 %87, !noelle.pdg.inst.id !1160
DSWP:     Consumer:	  %126 = getelementptr inbounds [256 x [256 x [512 x %struct.dcomplex]]], [256 x [256 x [512 x %struct.dcomplex]]]* @main.u1, i64 0, i64 %indvars.iv11.i, i64 %indvars.iv13.i, i64 %125, !noelle.pdg.inst.id !1234
DSWP:    Queue: 1
DSWP:     Producer:	  %indvars.iv = phi i64 [ %indvars.iv.next, %134 ], [ 0, %.preheader19.preheader ], !noelle.pdg.inst.id !1139
DSWP:     Consumer:	  %86 = add i64 %indvars.iv, %indvars.iv.i, !noelle.pdg.inst.id !1157
DSWP:     Consumer:	  %125 = add nsw i64 %indvars.iv9.i, %indvars.iv, !noelle.pdg.inst.id !1233
DSWP:    Queue: 2
DSWP:     Producer:	  %.01 = phi i32 [ 1, %24 ], [ %260, %cffts1.exit ], !noelle.pdg.inst.id !1114
DSWP:     Consumer:	  tail call fastcc void @evolve([256 x [512 x %struct.dcomplex]]* %73, [256 x [512 x %struct.dcomplex]]* %74, i32 %.01, [256 x [512 x i32]]* %75, i32* %76), !noelle.pdg.inst.id !37
DSWP:     Consumer:	  tail call fastcc void @checksum(i32 %.01, [256 x [512 x %struct.dcomplex]]* %258, i32* %259), !noelle.pdg.inst.id !161
DSWP:    Queue: 3
DSWP:     Producer:	  %indvars.iv13.i4 = phi i64 [ %indvars.iv.next14.i52, %194 ], [ 0, %138 ], !noelle.pdg.inst.id !1258
DSWP:     Consumer:	  %190 = getelementptr inbounds [256 x [256 x [512 x %struct.dcomplex]]], [256 x [256 x [512 x %struct.dcomplex]]]* @main.u1, i64 0, i64 %indvars.iv13.i4, i64 %indvars.iv11.i47, i64 %184, i32 1, !noelle.pdg.inst.id !1353
DSWP:     Consumer:	  %152 = getelementptr inbounds [256 x [256 x [512 x %struct.dcomplex]]], [256 x [256 x [512 x %struct.dcomplex]]]* @main.u1, i64 0, i64 %indvars.iv13.i4, i64 %indvars.iv7.i7, i64 %146, i32 1, !noelle.pdg.inst.id !1284
DSWP:     Consumer:	  %147 = getelementptr inbounds [256 x [256 x [512 x %struct.dcomplex]]], [256 x [256 x [512 x %struct.dcomplex]]]* @main.u1, i64 0, i64 %indvars.iv13.i4, i64 %indvars.iv7.i7, i64 %146, !noelle.pdg.inst.id !1280
DSWP:     Consumer:	  %185 = getelementptr inbounds [256 x [256 x [512 x %struct.dcomplex]]], [256 x [256 x [512 x %struct.dcomplex]]]* @main.u1, i64 0, i64 %indvars.iv13.i4, i64 %indvars.iv11.i47, i64 %184, !noelle.pdg.inst.id !1349
DSWP:    Queue: 4
DSWP:     Producer:	  %indvars.iv60 = phi i64 [ %indvars.iv.next61, %193 ], [ 0, %.preheader18.preheader ], !noelle.pdg.inst.id !1263
DSWP:     Consumer:	  %145 = add i64 %indvars.iv60, %indvars.iv.i9, !noelle.pdg.inst.id !1277
DSWP:     Consumer:	  %184 = add nsw i64 %indvars.iv9.i49, %indvars.iv60, !noelle.pdg.inst.id !1348
DSWP:    Queue: 5
DSWP:     Producer:	  %indvars.iv12.i = phi i64 [ %indvars.iv.next13.i, %257 ], [ 0, %197 ], !noelle.pdg.inst.id !1373
DSWP:     Consumer:	  %253 = getelementptr inbounds [256 x [256 x [512 x %struct.dcomplex]]], [256 x [256 x [512 x %struct.dcomplex]]]* @main.u2, i64 0, i64 %indvars.iv12.i, i64 %241, i64 %indvars.iv8.i, i32 1, !noelle.pdg.inst.id !1473
DSWP:     Consumer:	  %213 = getelementptr inbounds [256 x [256 x [512 x %struct.dcomplex]]], [256 x [256 x [512 x %struct.dcomplex]]]* @main.u1, i64 0, i64 %indvars.iv12.i, i64 %204, i64 %indvars.iv.i5, i32 1, !noelle.pdg.inst.id !1402
DSWP:     Consumer:	  %208 = getelementptr inbounds [256 x [256 x [512 x %struct.dcomplex]]], [256 x [256 x [512 x %struct.dcomplex]]]* @main.u1, i64 0, i64 %indvars.iv12.i, i64 %204, i64 %indvars.iv.i5, !noelle.pdg.inst.id !1398
DSWP:     Consumer:	  %248 = getelementptr inbounds [256 x [256 x [512 x %struct.dcomplex]]], [256 x [256 x [512 x %struct.dcomplex]]]* @main.u2, i64 0, i64 %indvars.iv12.i, i64 %241, i64 %indvars.iv8.i, !noelle.pdg.inst.id !1469
DSWP:    Queue: 6
DSWP:     Producer:	  %indvars.iv62 = phi i64 [ %indvars.iv.next63, %256 ], [ 0, %.preheader17.preheader ], !noelle.pdg.inst.id !1378
DSWP:     Consumer:	  %203 = add i64 %indvars.iv62, %indvars.iv6.i, !noelle.pdg.inst.id !1389
DSWP:     Consumer:	  %241 = add nsw i64 %indvars.iv10.i, %indvars.iv62, !noelle.pdg.inst.id !1461
DSWP:    Queue: 7
DSWP:     Producer:	  %81 = icmp slt i64 %indvars.iv13.i, %40, !noelle.pdg.inst.id !1134
DSWP:     Consumer:	  br i1 %81, label %.preheader19.preheader, label %cffts3.exit, !prof !1135, !noelle.loop.id !1136, !noelle.pdg.inst.id !1137, !noelle.parallelizer.looporder !1136
DSWP:    Queue: 8
DSWP:     Producer:	  %81 = icmp slt i64 %indvars.iv13.i, %40, !noelle.pdg.inst.id !1134
DSWP:     Consumer:	  br i1 %81, label %.preheader19.preheader, label %cffts3.exit, !prof !1135, !noelle.loop.id !1136, !noelle.pdg.inst.id !1137, !noelle.parallelizer.looporder !1136
DSWP:    Queue: 9
DSWP:     Producer:	  %81 = icmp slt i64 %indvars.iv13.i, %40, !noelle.pdg.inst.id !1134
DSWP:     Consumer:	  br i1 %81, label %.preheader19.preheader, label %cffts3.exit, !prof !1135, !noelle.loop.id !1136, !noelle.pdg.inst.id !1137, !noelle.parallelizer.looporder !1136
DSWP:    Queue: 10
DSWP:     Producer:	  %81 = icmp slt i64 %indvars.iv13.i, %40, !noelle.pdg.inst.id !1134
DSWP:     Consumer:	  br i1 %81, label %.preheader19.preheader, label %cffts3.exit, !prof !1135, !noelle.loop.id !1136, !noelle.pdg.inst.id !1137, !noelle.parallelizer.looporder !1136
DSWP:    Queue: 11
DSWP:     Producer:	  %81 = icmp slt i64 %indvars.iv13.i, %40, !noelle.pdg.inst.id !1134
DSWP:     Consumer:	  br i1 %81, label %.preheader19.preheader, label %cffts3.exit, !prof !1135, !noelle.loop.id !1136, !noelle.pdg.inst.id !1137, !noelle.parallelizer.looporder !1136
DSWP:    Queue: 12
DSWP:     Producer:	  %81 = icmp slt i64 %indvars.iv13.i, %40, !noelle.pdg.inst.id !1134
DSWP:     Consumer:	  br i1 %81, label %.preheader19.preheader, label %cffts3.exit, !prof !1135, !noelle.loop.id !1136, !noelle.pdg.inst.id !1137, !noelle.parallelizer.looporder !1136
DSWP:    Queue: 13
DSWP:     Producer:	  %81 = icmp slt i64 %indvars.iv13.i, %40, !noelle.pdg.inst.id !1134
DSWP:     Consumer:	  br i1 %81, label %.preheader19.preheader, label %cffts3.exit, !prof !1135, !noelle.loop.id !1136, !noelle.pdg.inst.id !1137, !noelle.parallelizer.looporder !1136
DSWP:    Queue: 14
DSWP:     Producer:	  %82 = icmp sgt i64 %indvars.iv, %49, !noelle.pdg.inst.id !1140
DSWP:     Consumer:	  br i1 %82, label %135, label %.preheader16.preheader, !prof !1141, !noelle.loop.id !1142, !noelle.pdg.inst.id !1143, !noelle.parallelizer.looporder !1142
DSWP:    Queue: 15
DSWP:     Producer:	  %82 = icmp sgt i64 %indvars.iv, %49, !noelle.pdg.inst.id !1140
DSWP:     Consumer:	  br i1 %82, label %135, label %.preheader16.preheader, !prof !1141, !noelle.loop.id !1142, !noelle.pdg.inst.id !1143, !noelle.parallelizer.looporder !1142
DSWP:    Queue: 16
DSWP:     Producer:	  %82 = icmp sgt i64 %indvars.iv, %49, !noelle.pdg.inst.id !1140
DSWP:     Consumer:	  br i1 %82, label %135, label %.preheader16.preheader, !prof !1141, !noelle.loop.id !1142, !noelle.pdg.inst.id !1143, !noelle.parallelizer.looporder !1142
DSWP:    Queue: 17
DSWP:     Producer:	  %82 = icmp sgt i64 %indvars.iv, %49, !noelle.pdg.inst.id !1140
DSWP:     Consumer:	  br i1 %82, label %135, label %.preheader16.preheader, !prof !1141, !noelle.loop.id !1142, !noelle.pdg.inst.id !1143, !noelle.parallelizer.looporder !1142
DSWP:    Queue: 18
DSWP:     Producer:	  %82 = icmp sgt i64 %indvars.iv, %49, !noelle.pdg.inst.id !1140
DSWP:     Consumer:	  br i1 %82, label %135, label %.preheader16.preheader, !prof !1141, !noelle.loop.id !1142, !noelle.pdg.inst.id !1143, !noelle.parallelizer.looporder !1142
DSWP:    Queue: 19
DSWP:     Producer:	  %82 = icmp sgt i64 %indvars.iv, %49, !noelle.pdg.inst.id !1140
DSWP:     Consumer:	  br i1 %82, label %135, label %.preheader16.preheader, !prof !1141, !noelle.loop.id !1142, !noelle.pdg.inst.id !1143, !noelle.parallelizer.looporder !1142
DSWP:    Queue: 20
DSWP:     Producer:	  %82 = icmp sgt i64 %indvars.iv, %49, !noelle.pdg.inst.id !1140
DSWP:     Consumer:	  br i1 %82, label %135, label %.preheader16.preheader, !prof !1141, !noelle.loop.id !1142, !noelle.pdg.inst.id !1143, !noelle.parallelizer.looporder !1142
DSWP:    Queue: 21
DSWP:     Producer:	  %140 = icmp slt i64 %indvars.iv13.i4, %52, !noelle.pdg.inst.id !1259
DSWP:     Consumer:	  br i1 %140, label %.preheader18.preheader, label %cffts2.exit, !prof !1135, !noelle.loop.id !1260, !noelle.pdg.inst.id !1261, !noelle.parallelizer.looporder !1148
DSWP:    Queue: 22
DSWP:     Producer:	  %140 = icmp slt i64 %indvars.iv13.i4, %52, !noelle.pdg.inst.id !1259
DSWP:     Consumer:	  br i1 %140, label %.preheader18.preheader, label %cffts2.exit, !prof !1135, !noelle.loop.id !1260, !noelle.pdg.inst.id !1261, !noelle.parallelizer.looporder !1148
DSWP:    Queue: 23
DSWP:     Producer:	  %140 = icmp slt i64 %indvars.iv13.i4, %52, !noelle.pdg.inst.id !1259
DSWP:     Consumer:	  br i1 %140, label %.preheader18.preheader, label %cffts2.exit, !prof !1135, !noelle.loop.id !1260, !noelle.pdg.inst.id !1261, !noelle.parallelizer.looporder !1148
DSWP:    Queue: 24
DSWP:     Producer:	  %140 = icmp slt i64 %indvars.iv13.i4, %52, !noelle.pdg.inst.id !1259
DSWP:     Consumer:	  br i1 %140, label %.preheader18.preheader, label %cffts2.exit, !prof !1135, !noelle.loop.id !1260, !noelle.pdg.inst.id !1261, !noelle.parallelizer.looporder !1148
DSWP:    Queue: 25
DSWP:     Producer:	  %140 = icmp slt i64 %indvars.iv13.i4, %52, !noelle.pdg.inst.id !1259
DSWP:     Consumer:	  br i1 %140, label %.preheader18.preheader, label %cffts2.exit, !prof !1135, !noelle.loop.id !1260, !noelle.pdg.inst.id !1261, !noelle.parallelizer.looporder !1148
DSWP:    Queue: 26
DSWP:     Producer:	  %140 = icmp slt i64 %indvars.iv13.i4, %52, !noelle.pdg.inst.id !1259
DSWP:     Consumer:	  br i1 %140, label %.preheader18.preheader, label %cffts2.exit, !prof !1135, !noelle.loop.id !1260, !noelle.pdg.inst.id !1261, !noelle.parallelizer.looporder !1148
DSWP:    Queue: 27
DSWP:     Producer:	  %140 = icmp slt i64 %indvars.iv13.i4, %52, !noelle.pdg.inst.id !1259
DSWP:     Consumer:	  br i1 %140, label %.preheader18.preheader, label %cffts2.exit, !prof !1135, !noelle.loop.id !1260, !noelle.pdg.inst.id !1261, !noelle.parallelizer.looporder !1148
DSWP:    Queue: 28
DSWP:     Producer:	  %141 = icmp sgt i64 %indvars.iv60, %59, !noelle.pdg.inst.id !1264
DSWP:     Consumer:	  br i1 %141, label %194, label %.preheader14.preheader, !prof !1141, !noelle.loop.id !1265, !noelle.pdg.inst.id !1266, !noelle.parallelizer.looporder !1155
DSWP:    Queue: 29
DSWP:     Producer:	  %141 = icmp sgt i64 %indvars.iv60, %59, !noelle.pdg.inst.id !1264
DSWP:     Consumer:	  br i1 %141, label %194, label %.preheader14.preheader, !prof !1141, !noelle.loop.id !1265, !noelle.pdg.inst.id !1266, !noelle.parallelizer.looporder !1155
DSWP:    Queue: 30
DSWP:     Producer:	  %141 = icmp sgt i64 %indvars.iv60, %59, !noelle.pdg.inst.id !1264
DSWP:     Consumer:	  br i1 %141, label %194, label %.preheader14.preheader, !prof !1141, !noelle.loop.id !1265, !noelle.pdg.inst.id !1266, !noelle.parallelizer.looporder !1155
DSWP:    Queue: 31
DSWP:     Producer:	  %141 = icmp sgt i64 %indvars.iv60, %59, !noelle.pdg.inst.id !1264
DSWP:     Consumer:	  br i1 %141, label %194, label %.preheader14.preheader, !prof !1141, !noelle.loop.id !1265, !noelle.pdg.inst.id !1266, !noelle.parallelizer.looporder !1155
DSWP:    Queue: 32
DSWP:     Producer:	  %141 = icmp sgt i64 %indvars.iv60, %59, !noelle.pdg.inst.id !1264
DSWP:     Consumer:	  br i1 %141, label %194, label %.preheader14.preheader, !prof !1141, !noelle.loop.id !1265, !noelle.pdg.inst.id !1266, !noelle.parallelizer.looporder !1155
DSWP:    Queue: 33
DSWP:     Producer:	  %141 = icmp sgt i64 %indvars.iv60, %59, !noelle.pdg.inst.id !1264
DSWP:     Consumer:	  br i1 %141, label %194, label %.preheader14.preheader, !prof !1141, !noelle.loop.id !1265, !noelle.pdg.inst.id !1266, !noelle.parallelizer.looporder !1155
DSWP:    Queue: 34
DSWP:     Producer:	  %141 = icmp sgt i64 %indvars.iv60, %59, !noelle.pdg.inst.id !1264
DSWP:     Consumer:	  br i1 %141, label %194, label %.preheader14.preheader, !prof !1141, !noelle.loop.id !1265, !noelle.pdg.inst.id !1266, !noelle.parallelizer.looporder !1155
DSWP:    Queue: 35
DSWP:     Producer:	  %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1115
DSWP:     Consumer:	  br i1 %exitcond1, label %261, label %72, !prof !1116, !noelle.loop.id !1117, !noelle.pdg.inst.id !1118, !noelle.parallelizer.looporder !1119
DSWP:    Queue: 36
DSWP:     Producer:	  %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1115
DSWP:     Consumer:	  br i1 %exitcond1, label %261, label %72, !prof !1116, !noelle.loop.id !1117, !noelle.pdg.inst.id !1118, !noelle.parallelizer.looporder !1119
DSWP:    Queue: 37
DSWP:     Producer:	  %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1115
DSWP:     Consumer:	  br i1 %exitcond1, label %261, label %72, !prof !1116, !noelle.loop.id !1117, !noelle.pdg.inst.id !1118, !noelle.parallelizer.looporder !1119
DSWP:    Queue: 38
DSWP:     Producer:	  %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1115
DSWP:     Consumer:	  br i1 %exitcond1, label %261, label %72, !prof !1116, !noelle.loop.id !1117, !noelle.pdg.inst.id !1118, !noelle.parallelizer.looporder !1119
DSWP:    Queue: 39
DSWP:     Producer:	  %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1115
DSWP:     Consumer:	  br i1 %exitcond1, label %261, label %72, !prof !1116, !noelle.loop.id !1117, !noelle.pdg.inst.id !1118, !noelle.parallelizer.looporder !1119
DSWP:    Queue: 40
DSWP:     Producer:	  %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1115
DSWP:     Consumer:	  br i1 %exitcond1, label %261, label %72, !prof !1116, !noelle.loop.id !1117, !noelle.pdg.inst.id !1118, !noelle.parallelizer.looporder !1119
DSWP:    Queue: 41
DSWP:     Producer:	  %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1115
DSWP:     Consumer:	  br i1 %exitcond1, label %261, label %72, !prof !1116, !noelle.loop.id !1117, !noelle.pdg.inst.id !1118, !noelle.parallelizer.looporder !1119
DSWP:    Queue: 42
DSWP:     Producer:	  %199 = icmp slt i64 %indvars.iv12.i, %62, !noelle.pdg.inst.id !1374
DSWP:     Consumer:	  br i1 %199, label %.preheader17.preheader, label %cffts1.exit, !prof !1135, !noelle.loop.id !1375, !noelle.pdg.inst.id !1376, !noelle.parallelizer.looporder !1180
DSWP:    Queue: 43
DSWP:     Producer:	  %199 = icmp slt i64 %indvars.iv12.i, %62, !noelle.pdg.inst.id !1374
DSWP:     Consumer:	  br i1 %199, label %.preheader17.preheader, label %cffts1.exit, !prof !1135, !noelle.loop.id !1375, !noelle.pdg.inst.id !1376, !noelle.parallelizer.looporder !1180
DSWP:    Queue: 44
DSWP:     Producer:	  %199 = icmp slt i64 %indvars.iv12.i, %62, !noelle.pdg.inst.id !1374
DSWP:     Consumer:	  br i1 %199, label %.preheader17.preheader, label %cffts1.exit, !prof !1135, !noelle.loop.id !1375, !noelle.pdg.inst.id !1376, !noelle.parallelizer.looporder !1180
DSWP:    Queue: 45
DSWP:     Producer:	  %199 = icmp slt i64 %indvars.iv12.i, %62, !noelle.pdg.inst.id !1374
DSWP:     Consumer:	  br i1 %199, label %.preheader17.preheader, label %cffts1.exit, !prof !1135, !noelle.loop.id !1375, !noelle.pdg.inst.id !1376, !noelle.parallelizer.looporder !1180
DSWP:    Queue: 46
DSWP:     Producer:	  %199 = icmp slt i64 %indvars.iv12.i, %62, !noelle.pdg.inst.id !1374
DSWP:     Consumer:	  br i1 %199, label %.preheader17.preheader, label %cffts1.exit, !prof !1135, !noelle.loop.id !1375, !noelle.pdg.inst.id !1376, !noelle.parallelizer.looporder !1180
DSWP:    Queue: 47
DSWP:     Producer:	  %199 = icmp slt i64 %indvars.iv12.i, %62, !noelle.pdg.inst.id !1374
DSWP:     Consumer:	  br i1 %199, label %.preheader17.preheader, label %cffts1.exit, !prof !1135, !noelle.loop.id !1375, !noelle.pdg.inst.id !1376, !noelle.parallelizer.looporder !1180
DSWP:    Queue: 48
DSWP:     Producer:	  %199 = icmp slt i64 %indvars.iv12.i, %62, !noelle.pdg.inst.id !1374
DSWP:     Consumer:	  br i1 %199, label %.preheader17.preheader, label %cffts1.exit, !prof !1135, !noelle.loop.id !1375, !noelle.pdg.inst.id !1376, !noelle.parallelizer.looporder !1180
DSWP:    Queue: 49
DSWP:     Producer:	  %200 = icmp sgt i64 %indvars.iv62, %69, !noelle.pdg.inst.id !1379
DSWP:     Consumer:	  br i1 %200, label %257, label %.preheader.i4.preheader, !prof !1380, !noelle.loop.id !1381, !noelle.pdg.inst.id !1382, !noelle.parallelizer.looporder !1184
DSWP:    Queue: 50
DSWP:     Producer:	  %200 = icmp sgt i64 %indvars.iv62, %69, !noelle.pdg.inst.id !1379
DSWP:     Consumer:	  br i1 %200, label %257, label %.preheader.i4.preheader, !prof !1380, !noelle.loop.id !1381, !noelle.pdg.inst.id !1382, !noelle.parallelizer.looporder !1184
DSWP:    Queue: 51
DSWP:     Producer:	  %200 = icmp sgt i64 %indvars.iv62, %69, !noelle.pdg.inst.id !1379
DSWP:     Consumer:	  br i1 %200, label %257, label %.preheader.i4.preheader, !prof !1380, !noelle.loop.id !1381, !noelle.pdg.inst.id !1382, !noelle.parallelizer.looporder !1184
DSWP:    Queue: 52
DSWP:     Producer:	  %200 = icmp sgt i64 %indvars.iv62, %69, !noelle.pdg.inst.id !1379
DSWP:     Consumer:	  br i1 %200, label %257, label %.preheader.i4.preheader, !prof !1380, !noelle.loop.id !1381, !noelle.pdg.inst.id !1382, !noelle.parallelizer.looporder !1184
DSWP:    Queue: 53
DSWP:     Producer:	  %200 = icmp sgt i64 %indvars.iv62, %69, !noelle.pdg.inst.id !1379
DSWP:     Consumer:	  br i1 %200, label %257, label %.preheader.i4.preheader, !prof !1380, !noelle.loop.id !1381, !noelle.pdg.inst.id !1382, !noelle.parallelizer.looporder !1184
DSWP:    Queue: 54
DSWP:     Producer:	  %200 = icmp sgt i64 %indvars.iv62, %69, !noelle.pdg.inst.id !1379
DSWP:     Consumer:	  br i1 %200, label %257, label %.preheader.i4.preheader, !prof !1380, !noelle.loop.id !1381, !noelle.pdg.inst.id !1382, !noelle.parallelizer.looporder !1184
DSWP:    Queue: 55
DSWP:     Producer:	  %200 = icmp sgt i64 %indvars.iv62, %69, !noelle.pdg.inst.id !1379
DSWP:     Consumer:	  br i1 %200, label %257, label %.preheader.i4.preheader, !prof !1380, !noelle.loop.id !1381, !noelle.pdg.inst.id !1382, !noelle.parallelizer.looporder !1184
DSWP:  Environment
DSWP:    Pre loop env 1, producer:	  %33 = bitcast [512 x [18 x %struct.dcomplex]]* %5 to i8*, !noelle.pdg.inst.id !1085
DSWP:    Pre loop env 2, producer:	  %34 = bitcast [512 x [18 x %struct.dcomplex]]* %3 to i8*, !noelle.pdg.inst.id !1086
DSWP:    Pre loop env 3, producer:	  %35 = bitcast [512 x [18 x %struct.dcomplex]]* %4 to i8*, !noelle.pdg.inst.id !1087
DSWP:    Pre loop env 4, producer:	  %40 = sext i32 %39 to i64, !noelle.pdg.inst.id !1091
DSWP:    Pre loop env 5, producer:	  %47 = sext i32 %41 to i64, !noelle.pdg.inst.id !1095
DSWP:    Pre loop env 6, producer:	  %48 = sext i32 %46 to i64, !noelle.pdg.inst.id !1096
DSWP:    Pre loop env 7, producer:	  %49 = sext i32 %44 to i64, !noelle.pdg.inst.id !1097
DSWP:    Pre loop env 8, producer:	  %52 = sext i32 %51 to i64, !noelle.pdg.inst.id !1099
DSWP:    Pre loop env 9, producer:	  %58 = sext i32 %57 to i64, !noelle.pdg.inst.id !1103
DSWP:    Pre loop env 10, producer:	  %59 = sext i32 %55 to i64, !noelle.pdg.inst.id !1104
DSWP:    Pre loop env 11, producer:	  %62 = sext i32 %61 to i64, !noelle.pdg.inst.id !1106
DSWP:    Pre loop env 12, producer:	  %68 = sext i32 %67 to i64, !noelle.pdg.inst.id !1110
DSWP:    Pre loop env 13, producer:	  %69 = sext i32 %65 to i64, !noelle.pdg.inst.id !1111
DSWP:    Pre loop env 14, producer:	  %70 = or i32 %37, 1, !noelle.pdg.inst.id !1112
DSWP:  Create 8 pipeline stages
DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 0:

define void @noelle_task_1(i8*, i8*) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [120 x i64]*
  %3 = bitcast i8* %1 to [56 x i8*]*
  %4 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 0
  %5 = load i8*, i8** %4
  %6 = alloca i64
  %7 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 1
  %8 = load i8*, i8** %7
  %9 = alloca i64
  %10 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 2
  %11 = load i8*, i8** %10
  %12 = alloca i32
  %13 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 3
  %14 = load i8*, i8** %13
  %15 = alloca i64
  %16 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 4
  %17 = load i8*, i8** %16
  %18 = alloca i64
  %19 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 5
  %20 = load i8*, i8** %19
  %21 = alloca i64
  %22 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 6
  %23 = load i8*, i8** %22
  %24 = alloca i64
  %25 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 7
  %26 = load i8*, i8** %25
  %27 = alloca i1
  %28 = bitcast i1* %27 to i8*
  %29 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 8
  %30 = load i8*, i8** %29
  %31 = alloca i1
  %32 = bitcast i1* %31 to i8*
  %33 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 9
  %34 = load i8*, i8** %33
  %35 = alloca i1
  %36 = bitcast i1* %35 to i8*
  %37 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 10
  %38 = load i8*, i8** %37
  %39 = alloca i1
  %40 = bitcast i1* %39 to i8*
  %41 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 11
  %42 = load i8*, i8** %41
  %43 = alloca i1
  %44 = bitcast i1* %43 to i8*
  %45 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 12
  %46 = load i8*, i8** %45
  %47 = alloca i1
  %48 = bitcast i1* %47 to i8*
  %49 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 13
  %50 = load i8*, i8** %49
  %51 = alloca i1
  %52 = bitcast i1* %51 to i8*
  %53 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 14
  %54 = load i8*, i8** %53
  %55 = alloca i1
  %56 = bitcast i1* %55 to i8*
  %57 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 15
  %58 = load i8*, i8** %57
  %59 = alloca i1
  %60 = bitcast i1* %59 to i8*
  %61 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 16
  %62 = load i8*, i8** %61
  %63 = alloca i1
  %64 = bitcast i1* %63 to i8*
  %65 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 17
  %66 = load i8*, i8** %65
  %67 = alloca i1
  %68 = bitcast i1* %67 to i8*
  %69 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 18
  %70 = load i8*, i8** %69
  %71 = alloca i1
  %72 = bitcast i1* %71 to i8*
  %73 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 19
  %74 = load i8*, i8** %73
  %75 = alloca i1
  %76 = bitcast i1* %75 to i8*
  %77 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 20
  %78 = load i8*, i8** %77
  %79 = alloca i1
  %80 = bitcast i1* %79 to i8*
  %81 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 21
  %82 = load i8*, i8** %81
  %83 = alloca i1
  %84 = bitcast i1* %83 to i8*
  %85 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 22
  %86 = load i8*, i8** %85
  %87 = alloca i1
  %88 = bitcast i1* %87 to i8*
  %89 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 23
  %90 = load i8*, i8** %89
  %91 = alloca i1
  %92 = bitcast i1* %91 to i8*
  %93 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 24
  %94 = load i8*, i8** %93
  %95 = alloca i1
  %96 = bitcast i1* %95 to i8*
  %97 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 25
  %98 = load i8*, i8** %97
  %99 = alloca i1
  %100 = bitcast i1* %99 to i8*
  %101 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 26
  %102 = load i8*, i8** %101
  %103 = alloca i1
  %104 = bitcast i1* %103 to i8*
  %105 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 27
  %106 = load i8*, i8** %105
  %107 = alloca i1
  %108 = bitcast i1* %107 to i8*
  %109 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 28
  %110 = load i8*, i8** %109
  %111 = alloca i1
  %112 = bitcast i1* %111 to i8*
  %113 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 29
  %114 = load i8*, i8** %113
  %115 = alloca i1
  %116 = bitcast i1* %115 to i8*
  %117 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 30
  %118 = load i8*, i8** %117
  %119 = alloca i1
  %120 = bitcast i1* %119 to i8*
  %121 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 31
  %122 = load i8*, i8** %121
  %123 = alloca i1
  %124 = bitcast i1* %123 to i8*
  %125 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 32
  %126 = load i8*, i8** %125
  %127 = alloca i1
  %128 = bitcast i1* %127 to i8*
  %129 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 33
  %130 = load i8*, i8** %129
  %131 = alloca i1
  %132 = bitcast i1* %131 to i8*
  %133 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 34
  %134 = load i8*, i8** %133
  %135 = alloca i1
  %136 = bitcast i1* %135 to i8*
  %137 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 35
  %138 = load i8*, i8** %137
  %139 = alloca i1
  %140 = bitcast i1* %139 to i8*
  %141 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 36
  %142 = load i8*, i8** %141
  %143 = alloca i1
  %144 = bitcast i1* %143 to i8*
  %145 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 37
  %146 = load i8*, i8** %145
  %147 = alloca i1
  %148 = bitcast i1* %147 to i8*
  %149 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 38
  %150 = load i8*, i8** %149
  %151 = alloca i1
  %152 = bitcast i1* %151 to i8*
  %153 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 39
  %154 = load i8*, i8** %153
  %155 = alloca i1
  %156 = bitcast i1* %155 to i8*
  %157 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 40
  %158 = load i8*, i8** %157
  %159 = alloca i1
  %160 = bitcast i1* %159 to i8*
  %161 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 41
  %162 = load i8*, i8** %161
  %163 = alloca i1
  %164 = bitcast i1* %163 to i8*
  %165 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 42
  %166 = load i8*, i8** %165
  %167 = alloca i1
  %168 = bitcast i1* %167 to i8*
  %169 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 43
  %170 = load i8*, i8** %169
  %171 = alloca i1
  %172 = bitcast i1* %171 to i8*
  %173 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 44
  %174 = load i8*, i8** %173
  %175 = alloca i1
  %176 = bitcast i1* %175 to i8*
  %177 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 45
  %178 = load i8*, i8** %177
  %179 = alloca i1
  %180 = bitcast i1* %179 to i8*
  %181 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 46
  %182 = load i8*, i8** %181
  %183 = alloca i1
  %184 = bitcast i1* %183 to i8*
  %185 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 47
  %186 = load i8*, i8** %185
  %187 = alloca i1
  %188 = bitcast i1* %187 to i8*
  %189 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 48
  %190 = load i8*, i8** %189
  %191 = alloca i1
  %192 = bitcast i1* %191 to i8*
  %193 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 49
  %194 = load i8*, i8** %193
  %195 = alloca i1
  %196 = bitcast i1* %195 to i8*
  %197 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 50
  %198 = load i8*, i8** %197
  %199 = alloca i1
  %200 = bitcast i1* %199 to i8*
  %201 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 51
  %202 = load i8*, i8** %201
  %203 = alloca i1
  %204 = bitcast i1* %203 to i8*
  %205 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 52
  %206 = load i8*, i8** %205
  %207 = alloca i1
  %208 = bitcast i1* %207 to i8*
  %209 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 53
  %210 = load i8*, i8** %209
  %211 = alloca i1
  %212 = bitcast i1* %211 to i8*
  %213 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 54
  %214 = load i8*, i8** %213
  %215 = alloca i1
  %216 = bitcast i1* %215 to i8*
  %217 = getelementptr inbounds [56 x i8*], [56 x i8*]* %3, i64 0, i64 55
  %218 = load i8*, i8** %217
  %219 = alloca i1
  %220 = bitcast i1* %219 to i8*
  %221 = getelementptr inbounds [120 x i64], [120 x i64]* %noelle.environment_variable.pointer, i64 0, i64 24
  %noelle_environment_variable_3 = load i64, i64* %221
  %222 = getelementptr inbounds [120 x i64], [120 x i64]* %noelle.environment_variable.pointer, i64 0, i64 32
  %noelle_environment_variable_4 = load i64, i64* %222
  %223 = getelementptr inbounds [120 x i64], [120 x i64]* %noelle.environment_variable.pointer, i64 0, i64 48
  %noelle_environment_variable_6 = load i64, i64* %223
  %224 = getelementptr inbounds [120 x i64], [120 x i64]* %noelle.environment_variable.pointer, i64 0, i64 56
  %noelle_environment_variable_7 = load i64, i64* %224
  %225 = getelementptr inbounds [120 x i64], [120 x i64]* %noelle.environment_variable.pointer, i64 0, i64 72
  %noelle_environment_variable_9 = load i64, i64* %225
  %226 = getelementptr inbounds [120 x i64], [120 x i64]* %noelle.environment_variable.pointer, i64 0, i64 80
  %noelle_environment_variable_10 = load i64, i64* %226
  %227 = getelementptr inbounds [120 x i64], [120 x i64]* %noelle.environment_variable.pointer, i64 0, i64 96
  %noelle_environment_variable_12 = load i64, i64* %227
  %228 = getelementptr inbounds [120 x i64], [120 x i64]* %noelle.environment_variable.pointer, i64 0, i64 104
  %229 = bitcast i64* %228 to i32*
  %noelle_environment_variable_13 = load i32, i32* %229
  %230 = getelementptr inbounds [120 x i64], [120 x i64]* %noelle.environment_variable.pointer, i64 0, i64 112
  %231 = bitcast i64* %230 to i32*
  br label %237

232:                                              ; preds = %236, %235, %234, %233
  ret void

233:                                              ; preds = %237
  store i32 0, i32* %231, !noelle.exit_block !30
  br label %232

234:                                              ; preds = %268
  store i32 1, i32* %231, !noelle.exit_block !31
  br label %232

235:                                              ; preds = %257
  store i32 2, i32* %231, !noelle.exit_block !32
  br label %232

236:                                              ; preds = %246
  store i32 3, i32* %231, !noelle.exit_block !33
  br label %232

237:                                              ; preds = %2, %273
  %238 = phi i32 [ 1, %2 ], [ %274, %273 ], !noelle.pdg.inst.id !34
  store i32 %238, i32* %12
  call void @queuePush32(i8* %11, i32* %12)
  %239 = icmp eq i32 %238, %noelle_environment_variable_13, !noelle.pdg.inst.id !35
  store i1 %239, i1* %163
  call void @queuePush8(i8* %162, i8* %164)
  store i1 %239, i1* %159
  call void @queuePush8(i8* %158, i8* %160)
  store i1 %239, i1* %155
  call void @queuePush8(i8* %154, i8* %156)
  store i1 %239, i1* %151
  call void @queuePush8(i8* %150, i8* %152)
  store i1 %239, i1* %147
  call void @queuePush8(i8* %146, i8* %148)
  store i1 %239, i1* %143
  call void @queuePush8(i8* %142, i8* %144)
  store i1 %239, i1* %139
  call void @queuePush8(i8* %138, i8* %140)
  br i1 %239, label %233, label %275, !prof !36, !noelle.loop.id !32, !noelle.pdg.inst.id !37, !noelle.parallelizer.looporder !33

240:                                              ; preds = %249, %280
  %241 = phi i64 [ %250, %249 ], [ 0, %280 ], !noelle.pdg.inst.id !38
  store i64 %241, i64* %6
  call void @queuePush64(i8* %5, i64* %6)
  %242 = icmp slt i64 %241, %noelle_environment_variable_3, !noelle.pdg.inst.id !39
  store i1 %242, i1* %51
  call void @queuePush8(i8* %50, i8* %52)
  store i1 %242, i1* %47
  call void @queuePush8(i8* %46, i8* %48)
  store i1 %242, i1* %43
  call void @queuePush8(i8* %42, i8* %44)
  store i1 %242, i1* %39
  call void @queuePush8(i8* %38, i8* %40)
  store i1 %242, i1* %35
  call void @queuePush8(i8* %34, i8* %36)
  store i1 %242, i1* %31
  call void @queuePush8(i8* %30, i8* %32)
  store i1 %242, i1* %27
  call void @queuePush8(i8* %26, i8* %28)
  br i1 %242, label %300, label %288, !prof !40, !noelle.loop.id !41, !noelle.pdg.inst.id !42, !noelle.parallelizer.looporder !41

243:                                              ; preds = %247, %300
  %244 = phi i64 [ %248, %247 ], [ 0, %300 ], !noelle.pdg.inst.id !43
  store i64 %244, i64* %9
  call void @queuePush64(i8* %8, i64* %9)
  %245 = icmp sgt i64 %244, %noelle_environment_variable_6, !noelle.pdg.inst.id !44
  store i1 %245, i1* %79
  call void @queuePush8(i8* %78, i8* %80)
  store i1 %245, i1* %75
  call void @queuePush8(i8* %74, i8* %76)
  store i1 %245, i1* %71
  call void @queuePush8(i8* %70, i8* %72)
  store i1 %245, i1* %67
  call void @queuePush8(i8* %66, i8* %68)
  store i1 %245, i1* %63
  call void @queuePush8(i8* %62, i8* %64)
  store i1 %245, i1* %59
  call void @queuePush8(i8* %58, i8* %60)
  store i1 %245, i1* %55
  call void @queuePush8(i8* %54, i8* %56)
  br i1 %245, label %249, label %301, !prof !45, !noelle.loop.id !46, !noelle.pdg.inst.id !47, !noelle.parallelizer.looporder !46

246:                                              ; preds = %302
  br i1 false, label %236, label %303, !prof !48, !noelle.pdg.inst.id !49

247:                                              ; preds = %307
  %248 = add i64 %244, %noelle_environment_variable_4, !noelle.pdg.inst.id !50
  br label %243

249:                                              ; preds = %243
  %250 = add nuw nsw i64 %241, 1, !noelle.pdg.inst.id !51
  br label %240

251:                                              ; preds = %260, %286
  %252 = phi i64 [ %261, %260 ], [ 0, %286 ], !noelle.pdg.inst.id !52
  store i64 %252, i64* %15
  call void @queuePush64(i8* %14, i64* %15)
  %253 = icmp slt i64 %252, %noelle_environment_variable_7, !noelle.pdg.inst.id !53
  store i1 %253, i1* %107
  call void @queuePush8(i8* %106, i8* %108)
  store i1 %253, i1* %103
  call void @queuePush8(i8* %102, i8* %104)
  store i1 %253, i1* %99
  call void @queuePush8(i8* %98, i8* %100)
  store i1 %253, i1* %95
  call void @queuePush8(i8* %94, i8* %96)
  store i1 %253, i1* %91
  call void @queuePush8(i8* %90, i8* %92)
  store i1 %253, i1* %87
  call void @queuePush8(i8* %86, i8* %88)
  store i1 %253, i1* %83
  call void @queuePush8(i8* %82, i8* %84)
  br i1 %253, label %294, label %283, !prof !40, !noelle.loop.id !54, !noelle.pdg.inst.id !55, !noelle.parallelizer.looporder !56

254:                                              ; preds = %258, %294
  %255 = phi i64 [ %259, %258 ], [ 0, %294 ], !noelle.pdg.inst.id !57
  store i64 %255, i64* %18
  call void @queuePush64(i8* %17, i64* %18)
  %256 = icmp sgt i64 %255, %noelle_environment_variable_9, !noelle.pdg.inst.id !58
  store i1 %256, i1* %135
  call void @queuePush8(i8* %134, i8* %136)
  store i1 %256, i1* %131
  call void @queuePush8(i8* %130, i8* %132)
  store i1 %256, i1* %127
  call void @queuePush8(i8* %126, i8* %128)
  store i1 %256, i1* %123
  call void @queuePush8(i8* %122, i8* %124)
  store i1 %256, i1* %119
  call void @queuePush8(i8* %118, i8* %120)
  store i1 %256, i1* %115
  call void @queuePush8(i8* %114, i8* %116)
  store i1 %256, i1* %111
  call void @queuePush8(i8* %110, i8* %112)
  br i1 %256, label %260, label %295, !prof !45, !noelle.loop.id !59, !noelle.pdg.inst.id !60, !noelle.parallelizer.looporder !61

257:                                              ; preds = %296
  br i1 false, label %235, label %285, !prof !48, !noelle.pdg.inst.id !62

258:                                              ; preds = %299
  %259 = add i64 %255, %noelle_environment_variable_4, !noelle.pdg.inst.id !63
  br label %254

260:                                              ; preds = %254
  %261 = add nuw nsw i64 %252, 1, !noelle.pdg.inst.id !64
  br label %251

262:                                              ; preds = %271, %278
  %263 = phi i64 [ %272, %271 ], [ 0, %278 ], !noelle.pdg.inst.id !65
  store i64 %263, i64* %21
  call void @queuePush64(i8* %20, i64* %21)
  %264 = icmp slt i64 %263, %noelle_environment_variable_10, !noelle.pdg.inst.id !66
  store i1 %264, i1* %191
  call void @queuePush8(i8* %190, i8* %192)
  store i1 %264, i1* %187
  call void @queuePush8(i8* %186, i8* %188)
  store i1 %264, i1* %183
  call void @queuePush8(i8* %182, i8* %184)
  store i1 %264, i1* %179
  call void @queuePush8(i8* %178, i8* %180)
  store i1 %264, i1* %175
  call void @queuePush8(i8* %174, i8* %176)
  store i1 %264, i1* %171
  call void @queuePush8(i8* %170, i8* %172)
  store i1 %264, i1* %167
  call void @queuePush8(i8* %166, i8* %168)
  br i1 %264, label %289, label %273, !prof !40, !noelle.loop.id !67, !noelle.pdg.inst.id !68, !noelle.parallelizer.looporder !69

265:                                              ; preds = %269, %289
  %266 = phi i64 [ %270, %269 ], [ 0, %289 ], !noelle.pdg.inst.id !70
  store i64 %266, i64* %24
  call void @queuePush64(i8* %23, i64* %24)
  %267 = icmp sgt i64 %266, %noelle_environment_variable_12, !noelle.pdg.inst.id !71
  store i1 %267, i1* %219
  call void @queuePush8(i8* %218, i8* %220)
  store i1 %267, i1* %215
  call void @queuePush8(i8* %214, i8* %216)
  store i1 %267, i1* %211
  call void @queuePush8(i8* %210, i8* %212)
  store i1 %267, i1* %207
  call void @queuePush8(i8* %206, i8* %208)
  store i1 %267, i1* %203
  call void @queuePush8(i8* %202, i8* %204)
  store i1 %267, i1* %199
  call void @queuePush8(i8* %198, i8* %200)
  store i1 %267, i1* %195
  call void @queuePush8(i8* %194, i8* %196)
  br i1 %267, label %271, label %290, !prof !72, !noelle.loop.id !73, !noelle.pdg.inst.id !74, !noelle.parallelizer.looporder !75

268:                                              ; preds = %291
  br i1 false, label %234, label %292, !prof !76, !noelle.pdg.inst.id !77

269:                                              ; preds = %279
  %270 = add i64 %266, %noelle_environment_variable_4, !noelle.pdg.inst.id !78
  br label %265

271:                                              ; preds = %265
  %272 = add nuw nsw i64 %263, 1, !noelle.pdg.inst.id !79
  br label %262

273:                                              ; preds = %262
  %274 = add nuw nsw i32 %238, 1, !noelle.pdg.inst.id !80
  br label %237

275:                                              ; preds = %237
  br label %284

276:                                              ; preds = %285
  br label %297

277:                                              ; preds = %293
  br label %282

278:                                              ; preds = %281
  br label %262

279:                                              ; preds = %282
  br label %269

280:                                              ; preds = %284
  br label %240

281:                                              ; preds = %283
  br label %278

282:                                              ; preds = %277
  br label %279

283:                                              ; preds = %251
  br label %281

284:                                              ; preds = %275
  br label %280

285:                                              ; preds = %257
  br label %276

286:                                              ; preds = %287
  br label %251

287:                                              ; preds = %288
  br label %286

288:                                              ; preds = %240
  br label %287

289:                                              ; preds = %262
  br label %265

290:                                              ; preds = %265
  br label %291

291:                                              ; preds = %290
  br label %268

292:                                              ; preds = %268
  br label %293

293:                                              ; preds = %292
  br label %277

294:                                              ; preds = %251
  br label %254

295:                                              ; preds = %254
  br label %296

296:                                              ; preds = %295
  br label %257

297:                                              ; preds = %276
  br label %298

298:                                              ; preds = %297
  br label %299

299:                                              ; preds = %298
  br label %258

300:                                              ; preds = %240
  br label %243

301:                                              ; preds = %243
  br label %302

302:                                              ; preds = %301
  br label %246

303:                                              ; preds = %246
  br label %304

304:                                              ; preds = %303
  br label %305

305:                                              ; preds = %304
  br label %306

306:                                              ; preds = %305
  br label %307

307:                                              ; preds = %306
  br label %247
}

Stack dump:
0.	Program arguments: opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix 
1.	Running pass 'Automatic parallelization of sequential code' on module 'code_to_parallelize.bc'.
#0 0x000000000219868a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/project/extra/llvm/9.0.0/release/bin/opt+0x219868a)
#1 0x0000000002196614 llvm::sys::RunSignalHandlers() (/project/extra/llvm/9.0.0/release/bin/opt+0x2196614)
#2 0x0000000002196775 SignalHandler(int) (/project/extra/llvm/9.0.0/release/bin/opt+0x2196775)
#3 0x00007fcec71e0cf0 __restore_rt (/lib64/libpthread.so.0+0x12cf0)
#4 0x0000000001aed3b0 llvm::BasicBlock::getContext() const (/project/extra/llvm/9.0.0/release/bin/opt+0x1aed3b0)
#5 0x0000000001b79ccf llvm::BranchInst::BranchInst(llvm::BasicBlock*, llvm::Instruction*) (/project/extra/llvm/9.0.0/release/bin/opt+0x1b79ccf)
#6 0x00007fcec0544df3 llvm::BranchInst::Create(llvm::BasicBlock*, llvm::Instruction*) /project/extra/llvm/9.0.0/release/include/llvm/IR/Instructions.h:3023:19
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/bin/noelle-load: line 50: 2862365 Segmentation fault      (core dumped) opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
make[1]: *** [Makefile:19: baseline_parallelized.bc] Error 139
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/ft.B'
