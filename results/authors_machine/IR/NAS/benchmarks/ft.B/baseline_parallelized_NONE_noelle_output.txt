make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/ft.B'
./runEnablers.sh ft.B ft.B.bc simlarge "-lm -lstdc++ -lpthread " -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/ft.B /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/ft.B
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/ft.B
The IR has already been transformed for enabling parallelization
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 7, !noelle.pdg.inst.id !1052" (5.096999e-08%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 7, !noelle.pdg.inst.id !1071" (5.096999e-08%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1113" (6.805510e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv15.i, 3, !noelle.pdg.inst.id !1123" (2.738686e-07%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %81 = icmp slt i64 %indvars.iv13.i, %40, !noelle.pdg.inst.id !1132" (1.997330e+01%)
Noelle:     Loop "  %82 = icmp sgt i64 %indvars.iv, %49, !noelle.pdg.inst.id !1138" (1.997328e+01%)
Noelle:     Loop "  %83 = icmp slt i64 %indvars.iv7.i, %48, !noelle.pdg.inst.id !1144" (1.049606e+01%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv.i, %47, !noelle.pdg.inst.id !1150" (1.030428e+01%)
Noelle:     Loop "  br i1 false, label %.preheader.i.i..loopexit.i.i_crit_edge, label %100, !prof !1173, !noelle.loop.id !1177, !noelle.pdg.inst.id !1178" (4.984683e-04%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  br i1 false, label %101, label %.us-lcssa.us.loopexit1.i19.i.i, !prof !1173, !noelle.loop.id !1181, !noelle.pdg.inst.id !1182" (1.246163e-04%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  br i1 false, label %103, label %107, !noelle.loop.id !1184, !noelle.pdg.inst.id !1185" (0.000000e+00%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  br i1 false, label %105, label %106, !noelle.loop.id !1187, !noelle.pdg.inst.id !1188" (0.000000e+00%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  br i1 false, label %109, label %.us-lcssa.us.loopexit1.i.i.i, !noelle.loop.id !1195, !noelle.pdg.inst.id !1196" (3.042985e-09%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  br i1 false, label %111, label %115, !noelle.loop.id !1198, !noelle.pdg.inst.id !1199" (3.042985e-09%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  br i1 false, label %113, label %114, !noelle.loop.id !1201, !noelle.pdg.inst.id !1202" (3.042985e-09%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  br i1 false, label %.preheader1.i.i.preheader, label %cfftz.exit.i.loopexit, !noelle.loop.id !1211, !noelle.pdg.inst.id !1212" (0.000000e+00%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  br i1 false, label %116, label %117, !noelle.loop.id !1214, !noelle.pdg.inst.id !1215" (0.000000e+00%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %119 = icmp slt i64 %indvars.iv11.i, %48, !noelle.pdg.inst.id !1221" (9.475207e+00%)
Noelle:     Loop "  %120 = icmp slt i64 %indvars.iv9.i, %47, !noelle.pdg.inst.id !1226" (9.283423e+00%)
Noelle:     Loop "  %exitcond.i2 = icmp eq i64 %indvars.iv15.i1, 3, !noelle.pdg.inst.id !1249" (2.738686e-07%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %140 = icmp slt i64 %indvars.iv13.i4, %52, !noelle.pdg.inst.id !1257" (1.997322e+01%)
Noelle:     Loop "  %141 = icmp sgt i64 %indvars.iv60, %59, !noelle.pdg.inst.id !1262" (1.997320e+01%)
Noelle:     Loop "  %142 = icmp slt i64 %indvars.iv7.i7, %58, !noelle.pdg.inst.id !1267" (1.049602e+01%)
Noelle:     Loop "  %143 = icmp slt i64 %indvars.iv.i9, %47, !noelle.pdg.inst.id !1272" (1.030424e+01%)
Noelle:     Loop "  br i1 false, label %.preheader.i.i16..loopexit.i.i38_crit_edge, label %159, !prof !1173, !noelle.loop.id !1293, !noelle.pdg.inst.id !1294" (4.984652e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  br i1 false, label %160, label %.us-lcssa.us.loopexit1.i19.i.i27, !prof !1173, !noelle.loop.id !1297, !noelle.pdg.inst.id !1298" (1.246155e-04%)
Noelle:  Disable loop "25" as cold code
Noelle:     Loop "  br i1 false, label %162, label %166, !noelle.loop.id !1300, !noelle.pdg.inst.id !1301" (0.000000e+00%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  br i1 false, label %164, label %165, !noelle.loop.id !1303, !noelle.pdg.inst.id !1304" (0.000000e+00%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  br i1 false, label %168, label %.us-lcssa.us.loopexit1.i.i.i37, !noelle.loop.id !1310, !noelle.pdg.inst.id !1311" (3.042985e-09%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  br i1 false, label %170, label %174, !noelle.loop.id !1313, !noelle.pdg.inst.id !1314" (3.042985e-09%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  br i1 false, label %172, label %173, !noelle.loop.id !1316, !noelle.pdg.inst.id !1317" (3.042985e-09%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  br i1 false, label %.preheader1.i.i41.preheader, label %cfftz.exit.i46.loopexit, !noelle.loop.id !1326, !noelle.pdg.inst.id !1327" (0.000000e+00%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  br i1 false, label %175, label %176, !noelle.loop.id !1329, !noelle.pdg.inst.id !1330" (0.000000e+00%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %178 = icmp slt i64 %indvars.iv11.i47, %58, !noelle.pdg.inst.id !1336" (9.475171e+00%)
Noelle:     Loop "  %179 = icmp slt i64 %indvars.iv9.i49, %47, !noelle.pdg.inst.id !1341" (9.283387e+00%)
Noelle:     Loop "  %exitcond.i1 = icmp eq i64 %indvars.iv14.i, 3, !noelle.pdg.inst.id !1364" (2.738686e-07%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %199 = icmp slt i64 %indvars.iv12.i, %62, !noelle.pdg.inst.id !1372" (1.737782e+01%)
Noelle:     Loop "  %200 = icmp sgt i64 %indvars.iv62, %69, !noelle.pdg.inst.id !1377" (1.737779e+01%)
Noelle:     Loop "  %201 = icmp slt i64 %indvars.iv6.i, %47, !noelle.pdg.inst.id !1383" (8.689389e+00%)
Noelle:     Loop "  %206 = icmp slt i64 %indvars.iv.i5, %68, !noelle.pdg.inst.id !1392" (8.680230e+00%)
Noelle:     Loop "  br i1 false, label %.preheader.i.i11..loopexit.i.i33_crit_edge, label %220, !prof !1408, !noelle.loop.id !1412, !noelle.pdg.inst.id !1413" (2.492341e-04%)
Noelle:  Disable loop "40" as cold code
Noelle:     Loop "  br i1 false, label %221, label %.us-lcssa.us.loopexit1.i19.i.i22, !prof !1408, !noelle.loop.id !1416, !noelle.pdg.inst.id !1417" (6.230815e-05%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  br i1 false, label %223, label %227, !noelle.loop.id !1419, !noelle.pdg.inst.id !1420" (0.000000e+00%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  br i1 false, label %225, label %226, !noelle.loop.id !1422, !noelle.pdg.inst.id !1423" (0.000000e+00%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  br i1 false, label %229, label %.us-lcssa.us.loopexit1.i.i.i32, !noelle.loop.id !1430, !noelle.pdg.inst.id !1431" (1.521492e-09%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  br i1 false, label %231, label %235, !noelle.loop.id !1433, !noelle.pdg.inst.id !1434" (1.521492e-09%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  br i1 false, label %233, label %234, !noelle.loop.id !1436, !noelle.pdg.inst.id !1437" (1.521492e-09%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  br i1 false, label %.preheader1.i.i36.preheader, label %cfftz.exit.i41.loopexit, !noelle.loop.id !1446, !noelle.pdg.inst.id !1447" (0.000000e+00%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  br i1 false, label %236, label %237, !noelle.loop.id !1449, !noelle.pdg.inst.id !1450" (0.000000e+00%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %239 = icmp slt i64 %indvars.iv10.i, %47, !noelle.pdg.inst.id !1456" (8.687396e+00%)
Noelle:     Loop "  %243 = icmp slt i64 %indvars.iv8.i, %68, !noelle.pdg.inst.id !1462" (8.680230e+00%)
Noelle:  Function "fft"
Noelle:  Function "evolve"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv5, %8, !noelle.pdg.inst.id !61" (1.073010e+01%)
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv3, %11, !noelle.pdg.inst.id !67" (1.073007e+01%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv, %14, !noelle.pdg.inst.id !73" (1.072408e+01%)
Noelle:  Function "cffts1"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv14, 3, !noelle.pdg.inst.id !366" (3.294031e-07%)
Noelle:  Disable loop "54" as cold code
Noelle:     Loop "  %43 = icmp slt i64 %indvars.iv12, %24, !noelle.pdg.inst.id !403" (1.000171e+01%)
Noelle:     Loop "  %44 = icmp sgt i64 %indvars.iv11, %37, !noelle.pdg.inst.id !409" (1.000171e+01%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv6, %36, !noelle.pdg.inst.id !415" (8.691114e-01%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv, %29, !noelle.pdg.inst.id !424" (8.681953e-01%)
Noelle:     Loop "  %65 = icmp slt i32 %21, %.0.i, !noelle.pdg.inst.id !451" (7.366971e+00%)
Noelle:     Loop "  %77 = icmp slt i64 %indvars.iv10.i4.i, %75, !noelle.pdg.inst.id !472" (4.098632e+00%)
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv8.i6.i, %74, !noelle.pdg.inst.id !485" (4.066661e+00%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv.i8.i, %36, !noelle.pdg.inst.id !497" (3.980516e+00%)
Noelle:     Loop "  %134 = icmp slt i64 %indvars.iv10.i.i, %132, !noelle.pdg.inst.id !541" (3.267374e+00%)
Noelle:     Loop "  %146 = icmp slt i64 %indvars.iv8.i.i, %131, !noelle.pdg.inst.id !554" (3.251407e+00%)
Noelle:     Loop "  %154 = icmp slt i64 %indvars.iv.i.i, %36, !noelle.pdg.inst.id !566" (3.184413e+00%)
Noelle:     Loop "  %180 = icmp slt i64 %indvars.iv5.i, %29, !noelle.pdg.inst.id !599" (8.966320e-01%)
Noelle:     Loop "  %181 = icmp slt i64 %indvars.iv.i, %36, !noelle.pdg.inst.id !605" (8.774685e-01%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv10, %36, !noelle.pdg.inst.id !624" (8.689119e-01%)
Noelle:     Loop "  %199 = icmp slt i64 %indvars.iv8, %29, !noelle.pdg.inst.id !630" (8.681953e-01%)
Noelle:  Function "cffts3"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv15, 3, !noelle.pdg.inst.id !358" (3.415750e-07%)
Noelle:  Disable loop "70" as cold code
Noelle:     Loop "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !395" (8.553348e+00%)
Noelle:     Loop "  %44 = icmp sgt i64 %indvars.iv12, %37, !noelle.pdg.inst.id !401" (8.553346e+00%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv7, %29, !noelle.pdg.inst.id !407" (1.049807e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv, %35, !noelle.pdg.inst.id !413" (1.030625e+00%)
Noelle:     Loop "  %63 = icmp slt i32 %21, %.0.i, !noelle.pdg.inst.id !443" (6.555687e+00%)
Noelle:     Loop "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !465" (3.286512e+00%)
Noelle:     Loop "  %87 = icmp slt i64 %indvars.iv8.i6.i, %72, !noelle.pdg.inst.id !478" (3.254579e+00%)
Noelle:     Loop "  %95 = icmp slt i64 %indvars.iv.i8.i, %35, !noelle.pdg.inst.id !490" (3.184407e+00%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !533" (3.267442e+00%)
Noelle:     Loop "  %144 = icmp slt i64 %indvars.iv8.i.i, %129, !noelle.pdg.inst.id !546" (3.251401e+00%)
Noelle:     Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %35, !noelle.pdg.inst.id !558" (3.184407e+00%)
Noelle:     Loop "  %178 = icmp slt i64 %indvars.iv5.i, %29, !noelle.pdg.inst.id !589" (0.000000e+00%)
Noelle:  Disable loop "82" as cold code
Noelle:     Loop "  %179 = icmp slt i64 %indvars.iv.i, %35, !noelle.pdg.inst.id !594" (0.000000e+00%)
Noelle:  Disable loop "83" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %indvars.iv11, %29, !noelle.pdg.inst.id !612" (9.477015e-01%)
Noelle:     Loop "  %194 = icmp slt i64 %indvars.iv9, %35, !noelle.pdg.inst.id !617" (9.285194e-01%)
Noelle:  Function "cffts2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv15, 3, !noelle.pdg.inst.id !366" (3.294031e-07%)
Noelle:  Disable loop "86" as cold code
Noelle:     Loop "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !403" (8.553348e+00%)
Noelle:     Loop "  %44 = icmp sgt i64 %indvars.iv14, %41, !noelle.pdg.inst.id !409" (8.553346e+00%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv7, %31, !noelle.pdg.inst.id !415" (1.049807e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv, %30, !noelle.pdg.inst.id !421" (1.030625e+00%)
Noelle:     Loop "  %63 = icmp slt i32 %21, %.0.i, !noelle.pdg.inst.id !451" (6.555687e+00%)
Noelle:     Loop "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !473" (3.286512e+00%)
Noelle:     Loop "  %87 = icmp slt i64 %indvars.iv8.i6.i, %72, !noelle.pdg.inst.id !486" (3.254579e+00%)
Noelle:     Loop "  %95 = icmp slt i64 %indvars.iv.i8.i, %30, !noelle.pdg.inst.id !498" (3.184407e+00%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !541" (3.267442e+00%)
Noelle:     Loop "  %144 = icmp slt i64 %indvars.iv8.i.i, %129, !noelle.pdg.inst.id !554" (3.251401e+00%)
Noelle:     Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %30, !noelle.pdg.inst.id !566" (3.184407e+00%)
Noelle:     Loop "  %178 = icmp slt i64 %indvars.iv5.i, %31, !noelle.pdg.inst.id !597" (0.000000e+00%)
Noelle:  Disable loop "98" as cold code
Noelle:     Loop "  %179 = icmp slt i64 %indvars.iv.i, %30, !noelle.pdg.inst.id !602" (0.000000e+00%)
Noelle:  Disable loop "99" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %indvars.iv11, %31, !noelle.pdg.inst.id !620" (9.477015e-01%)
Noelle:     Loop "  %194 = icmp slt i64 %indvars.iv9, %30, !noelle.pdg.inst.id !625" (9.285194e-01%)
Noelle:  Function "compute_initial_conditions"
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv8, %20, !noelle.pdg.inst.id !141" (4.085625e+00%)
Noelle:     Loop "  %35 = icmp sgt i64 %indvars.iv.i, %24, !noelle.pdg.inst.id !148" (3.063158e+00%)
Noelle:     Loop "  %60 = icmp slt i64 %indvars.iv6, %25, !noelle.pdg.inst.id !180" (1.022454e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512, !noelle.pdg.inst.id !189" (1.021455e+00%)
Noelle:  Function "compute_indexmap"
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv10, %4, !noelle.pdg.inst.id !75" (7.179418e-01%)
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv8, %8, !noelle.pdg.inst.id !89" (7.179324e-01%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv6, %12, !noelle.pdg.inst.id !103" (7.153375e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1966081, !noelle.pdg.inst.id !124" (3.291316e-02%)
Noelle:  Disable loop "109" as cold code
Noelle:  Function "checksum"
Noelle:  Disable "checksum" as cold function
Noelle:  Function "fft_init"
Noelle:  Disable "fft_init" as cold function
Noelle:  Function "ipow46"
Noelle:  Disable "ipow46" as cold function
Noelle:  Function "ilog2"
Noelle:  Disable "ilog2" as cold function
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "setup"
Noelle:  Disable "setup" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "verify"
Noelle:  Disable "verify" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
Noelle:  Function "vranlc"
Noelle:  Disable "vranlc" as cold function
Planner:    There are 70 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:    Loop 73 has 5.000000e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 75 has 1.913616e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 76 has 4.990000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 78 has 7.023530e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 79 has 4.990000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 81 has 2.750000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 7 has 3.230000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 18 has 2.910000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 23 has 3.230000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 34 has 2.910000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 104 has 3.230000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 105 has 4.999939e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 107 has 1.535988e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 108 has 4.990000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 110 has 7.023527e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 111 has 4.990000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 115 has 2.910000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 89 has 4.999939e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 91 has 1.535988e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 92 has 4.990000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 94 has 7.023527e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 95 has 4.990000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 99 has 2.910000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 88 has 3.230000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:  There are 7 loop nesting trees in the program
Planner:    ID: 69 (1)
Planner:      Function: "cffts1"
Planner:      Loop: "  %43 = icmp slt i64 %indvars.iv12, %24, !noelle.pdg.inst.id !403"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.000171e+01 %
Planner:      Average instructions per invocation = 6.573619e+09 %
Planner:      Average iterations per invocation = 2.565000e+02 %
Planner:    
Planner:      ID: 70 (2)
Planner:        Function: "cffts1"
Planner:        Loop: "  %44 = icmp sgt i64 %indvars.iv11, %37, !noelle.pdg.inst.id !409"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.000171e+01 %
Planner:        Average instructions per invocation = 2.567819e+07 %
Planner:        Average iterations per invocation = 1.699805e+01 %
Planner:      
Planner:        ID: 71 (3)
Planner:          Function: "cffts1"
Planner:          Loop: "  %45 = icmp slt i64 %indvars.iv6, %36, !noelle.pdg.inst.id !415"
Planner:          Loop nesting level: 3
Planner:          Hotness = 8.691114e-01 %
Planner:          Average instructions per invocation = 1.394587e+05 %
Planner:          Average iterations per invocation = 1.699988e+01 %
Planner:        
Planner:          ID: 72 (4)
Planner:            Function: "cffts1"
Planner:            Loop: "  %50 = icmp slt i64 %indvars.iv, %29, !noelle.pdg.inst.id !424"
Planner:            Loop nesting level: 4
Planner:            Hotness = 8.681953e-01 %
Planner:            Average instructions per invocation = 8.706983e+03 %
Planner:            Average iterations per invocation = 5.129990e+02 %
Planner:          
Planner:        ID: 77 (3)
Planner:          Function: "cffts1"
Planner:          Loop: "  %134 = icmp slt i64 %indvars.iv10.i.i, %132, !noelle.pdg.inst.id !541"
Planner:          Loop nesting level: 4
Planner:          Hotness = 3.267374e+00 %
Planner:          Average instructions per invocation = 1.310717e+05 %
Planner:          Average iterations per invocation = 4.349988e+01 %
Planner:        
Planner:        ID: 74 (3)
Planner:          Function: "cffts1"
Planner:          Loop: "  %77 = icmp slt i64 %indvars.iv10.i4.i, %75, !noelle.pdg.inst.id !472"
Planner:          Loop nesting level: 4
Planner:          Hotness = 4.098632e+00 %
Planner:          Average instructions per invocation = 1.315343e+05 %
Planner:          Average iterations per invocation = 6.919985e+01 %
Planner:        
Planner:        ID: 82 (3)
Planner:          Function: "cffts1"
Planner:          Loop: "  %195 = icmp slt i64 %indvars.iv10, %36, !noelle.pdg.inst.id !624"
Planner:          Loop nesting level: 3
Planner:          Hotness = 8.689119e-01 %
Planner:          Average instructions per invocation = 1.394267e+05 %
Planner:          Average iterations per invocation = 1.699988e+01 %
Planner:        
Planner:          ID: 83 (4)
Planner:            Function: "cffts1"
Planner:            Loop: "  %199 = icmp slt i64 %indvars.iv8, %29, !noelle.pdg.inst.id !630"
Planner:            Loop nesting level: 4
Planner:            Hotness = 8.681953e-01 %
Planner:            Average instructions per invocation = 8.706983e+03 %
Planner:            Average iterations per invocation = 5.129990e+02 %
Planner:          
Planner:        ID: 80 (3)
Planner:          Function: "cffts1"
Planner:          Loop: "  %180 = icmp slt i64 %indvars.iv5.i, %29, !noelle.pdg.inst.id !599"
Planner:          Loop nesting level: 3
Planner:          Hotness = 8.966320e-01 %
Planner:          Average instructions per invocation = 1.438747e+05 %
Planner:          Average iterations per invocation = 5.129989e+02 %
Planner:        
Planner:    ID: 2 (1)
Planner:      Function: "main"
Planner:      Loop: "  %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1113"
Planner:      Loop nesting level: 1
Planner:      Hotness = 6.805510e+01 %
Planner:      Average instructions per invocation = 8.945835e+10 %
Planner:      Average iterations per invocation = 2.000000e+01 %
Planner:    
Planner:      ID: 36 (2)
Planner:        Function: "main"
Planner:        Loop: "  %199 = icmp slt i64 %indvars.iv12.i, %62, !noelle.pdg.inst.id !1372"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.737782e+01 %
Planner:        Average instructions per invocation = 1.142156e+09 %
Planner:        Average iterations per invocation = 2.569000e+02 %
Planner:      
Planner:        ID: 37 (3)
Planner:          Function: "main"
Planner:          Loop: "  %200 = icmp sgt i64 %indvars.iv62, %69, !noelle.pdg.inst.id !1377"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.737779e+01 %
Planner:          Average instructions per invocation = 4.462413e+06 %
Planner:          Average iterations per invocation = 1.699980e+01 %
Planner:        
Planner:          ID: 38 (4)
Planner:            Function: "main"
Planner:            Loop: "  %201 = icmp slt i64 %indvars.iv6.i, %47, !noelle.pdg.inst.id !1383"
Planner:            Loop nesting level: 4
Planner:            Hotness = 8.689389e+00 %
Planner:            Average instructions per invocation = 1.394583e+05 %
Planner:            Average iterations per invocation = 1.699990e+01 %
Planner:          
Planner:            ID: 39 (5)
Planner:              Function: "main"
Planner:              Loop: "  %206 = icmp slt i64 %indvars.iv.i5, %68, !noelle.pdg.inst.id !1392"
Planner:              Loop nesting level: 5
Planner:              Hotness = 8.680230e+00 %
Planner:              Average instructions per invocation = 8.707003e+03 %
Planner:              Average iterations per invocation = 5.130002e+02 %
Planner:            
Planner:          ID: 49 (4)
Planner:            Function: "main"
Planner:            Loop: "  %239 = icmp slt i64 %indvars.iv10.i, %47, !noelle.pdg.inst.id !1456"
Planner:            Loop nesting level: 4
Planner:            Hotness = 8.687396e+00 %
Planner:            Average instructions per invocation = 1.394263e+05 %
Planner:            Average iterations per invocation = 1.699990e+01 %
Planner:          
Planner:            ID: 50 (5)
Planner:              Function: "main"
Planner:              Loop: "  %243 = icmp slt i64 %indvars.iv8.i, %68, !noelle.pdg.inst.id !1462"
Planner:              Loop nesting level: 5
Planner:              Hotness = 8.680230e+00 %
Planner:              Average instructions per invocation = 8.707003e+03 %
Planner:              Average iterations per invocation = 5.130002e+02 %
Planner:            
Planner:      ID: 4 (2)
Planner:        Function: "main"
Planner:        Loop: "  %81 = icmp slt i64 %indvars.iv13.i, %40, !noelle.pdg.inst.id !1132"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.997330e+01 %
Planner:        Average instructions per invocation = 1.312744e+09 %
Planner:        Average iterations per invocation = 2.569000e+02 %
Planner:      
Planner:        ID: 5 (3)
Planner:          Function: "main"
Planner:          Loop: "  %82 = icmp sgt i64 %indvars.iv, %49, !noelle.pdg.inst.id !1138"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.997328e+01 %
Planner:          Average instructions per invocation = 5.128902e+06 %
Planner:          Average iterations per invocation = 3.299980e+01 %
Planner:        
Planner:          ID: 6 (4)
Planner:            Function: "main"
Planner:            Loop: "  %83 = icmp slt i64 %indvars.iv7.i, %48, !noelle.pdg.inst.id !1144"
Planner:            Loop nesting level: 4
Planner:            Hotness = 1.049606e+01 %
Planner:            Average instructions per invocation = 8.422706e+04 %
Planner:            Average iterations per invocation = 2.570002e+02 %
Planner:          
Planner:          ID: 17 (4)
Planner:            Function: "main"
Planner:            Loop: "  %119 = icmp slt i64 %indvars.iv11.i, %48, !noelle.pdg.inst.id !1221"
Planner:            Loop nesting level: 4
Planner:            Hotness = 9.475207e+00 %
Planner:            Average instructions per invocation = 7.603505e+04 %
Planner:            Average iterations per invocation = 2.570002e+02 %
Planner:          
Planner:      ID: 20 (2)
Planner:        Function: "main"
Planner:        Loop: "  %140 = icmp slt i64 %indvars.iv13.i4, %52, !noelle.pdg.inst.id !1257"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.997322e+01 %
Planner:        Average instructions per invocation = 1.312739e+09 %
Planner:        Average iterations per invocation = 2.569000e+02 %
Planner:      
Planner:        ID: 21 (3)
Planner:          Function: "main"
Planner:          Loop: "  %141 = icmp sgt i64 %indvars.iv60, %59, !noelle.pdg.inst.id !1262"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.997320e+01 %
Planner:          Average instructions per invocation = 5.128883e+06 %
Planner:          Average iterations per invocation = 3.299961e+01 %
Planner:        
Planner:          ID: 22 (4)
Planner:            Function: "main"
Planner:            Loop: "  %142 = icmp slt i64 %indvars.iv7.i7, %58, !noelle.pdg.inst.id !1267"
Planner:            Loop nesting level: 4
Planner:            Hotness = 1.049602e+01 %
Planner:            Average instructions per invocation = 8.422725e+04 %
Planner:            Average iterations per invocation = 2.570008e+02 %
Planner:          
Planner:          ID: 33 (4)
Planner:            Function: "main"
Planner:            Loop: "  %178 = icmp slt i64 %indvars.iv11.i47, %58, !noelle.pdg.inst.id !1336"
Planner:            Loop nesting level: 4
Planner:            Hotness = 9.475171e+00 %
Planner:            Average instructions per invocation = 7.603522e+04 %
Planner:            Average iterations per invocation = 2.570008e+02 %
Planner:          
Planner:    ID: 101 (1)
Planner:      Function: "cffts3"
Planner:      Loop: "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !395"
Planner:      Loop nesting level: 1
Planner:      Hotness = 8.553348e+00 %
Planner:      Average instructions per invocation = 5.621683e+09 %
Planner:      Average iterations per invocation = 2.565000e+02 %
Planner:    
Planner:      ID: 102 (2)
Planner:        Function: "cffts3"
Planner:        Loop: "  %44 = icmp sgt i64 %indvars.iv12, %37, !noelle.pdg.inst.id !401"
Planner:        Loop nesting level: 2
Planner:        Hotness = 8.553346e+00 %
Planner:        Average instructions per invocation = 2.195969e+07 %
Planner:        Average iterations per invocation = 3.299805e+01 %
Planner:      
Planner:        ID: 103 (3)
Planner:          Function: "cffts3"
Planner:          Loop: "  %45 = icmp slt i64 %indvars.iv7, %29, !noelle.pdg.inst.id !407"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.049807e+00 %
Planner:          Average instructions per invocation = 8.422667e+04 %
Planner:          Average iterations per invocation = 2.569990e+02 %
Planner:        
Planner:        ID: 109 (3)
Planner:          Function: "cffts3"
Planner:          Loop: "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !533"
Planner:          Loop nesting level: 4
Planner:          Hotness = 3.267442e+00 %
Planner:          Average instructions per invocation = 6.553725e+04 %
Planner:          Average iterations per invocation = 2.224989e+01 %
Planner:        
Planner:        ID: 106 (3)
Planner:          Function: "cffts3"
Planner:          Loop: "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !465"
Planner:          Loop nesting level: 4
Planner:          Hotness = 3.286512e+00 %
Planner:          Average instructions per invocation = 6.591975e+04 %
Planner:          Average iterations per invocation = 4.349982e+01 %
Planner:        
Planner:        ID: 114 (3)
Planner:          Function: "cffts3"
Planner:          Loop: "  %193 = icmp slt i64 %indvars.iv11, %29, !noelle.pdg.inst.id !612"
Planner:          Loop nesting level: 3
Planner:          Hotness = 9.477015e-01 %
Planner:          Average instructions per invocation = 7.603471e+04 %
Planner:          Average iterations per invocation = 2.569990e+02 %
Planner:        
Planner:    ID: 53 (1)
Planner:      Function: "compute_indexmap"
Planner:      Loop: "  %15 = icmp slt i64 %indvars.iv10, %4, !noelle.pdg.inst.id !75"
Planner:      Loop nesting level: 1
Planner:      Hotness = 7.179418e-01 %
Planner:      Average instructions per invocation = 4.718668e+08 %
Planner:      Average iterations per invocation = 5.125000e+02 %
Planner:    
Planner:      ID: 54 (2)
Planner:        Function: "compute_indexmap"
Planner:        Loop: "  %23 = icmp slt i64 %indvars.iv8, %8, !noelle.pdg.inst.id !89"
Planner:        Loop nesting level: 2
Planner:        Hotness = 7.179324e-01 %
Planner:        Average instructions per invocation = 9.216029e+05 %
Planner:        Average iterations per invocation = 2.569990e+02 %
Planner:      
Planner:        ID: 55 (3)
Planner:          Function: "compute_indexmap"
Planner:          Loop: "  %33 = icmp slt i64 %indvars.iv6, %12, !noelle.pdg.inst.id !103"
Planner:          Loop nesting level: 3
Planner:          Hotness = 7.153375e-01 %
Planner:          Average instructions per invocation = 3.587000e+03 %
Planner:          Average iterations per invocation = 2.570000e+02 %
Planner:        
Planner:    ID: 63 (1)
Planner:      Function: "evolve"
Planner:      Loop: "  %16 = icmp slt i64 %indvars.iv5, %8, !noelle.pdg.inst.id !61"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.073010e+01 %
Planner:      Average instructions per invocation = 7.052351e+08 %
Planner:      Average iterations per invocation = 2.568500e+02 %
Planner:    
Planner:      ID: 64 (2)
Planner:        Function: "evolve"
Planner:        Loop: "  %17 = icmp slt i64 %indvars.iv3, %11, !noelle.pdg.inst.id !67"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.073007e+01 %
Planner:        Average instructions per invocation = 2.755895e+06 %
Planner:        Average iterations per invocation = 2.570998e+02 %
Planner:      
Planner:        ID: 65 (3)
Planner:          Function: "evolve"
Planner:          Loop: "  %18 = icmp slt i64 %indvars.iv, %14, !noelle.pdg.inst.id !73"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.072408e+01 %
Planner:          Average instructions per invocation = 1.075502e+04 %
Planner:          Average iterations per invocation = 5.130007e+02 %
Planner:        
Planner:    ID: 85 (1)
Planner:      Function: "cffts2"
Planner:      Loop: "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !403"
Planner:      Loop nesting level: 1
Planner:      Hotness = 8.553348e+00 %
Planner:      Average instructions per invocation = 5.621683e+09 %
Planner:      Average iterations per invocation = 2.565000e+02 %
Planner:    
Planner:      ID: 86 (2)
Planner:        Function: "cffts2"
Planner:        Loop: "  %44 = icmp sgt i64 %indvars.iv14, %41, !noelle.pdg.inst.id !409"
Planner:        Loop nesting level: 2
Planner:        Hotness = 8.553346e+00 %
Planner:        Average instructions per invocation = 2.195969e+07 %
Planner:        Average iterations per invocation = 3.299805e+01 %
Planner:      
Planner:        ID: 93 (3)
Planner:          Function: "cffts2"
Planner:          Loop: "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !541"
Planner:          Loop nesting level: 4
Planner:          Hotness = 3.267442e+00 %
Planner:          Average instructions per invocation = 6.553725e+04 %
Planner:          Average iterations per invocation = 2.224989e+01 %
Planner:        
Planner:        ID: 90 (3)
Planner:          Function: "cffts2"
Planner:          Loop: "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !473"
Planner:          Loop nesting level: 4
Planner:          Hotness = 3.286512e+00 %
Planner:          Average instructions per invocation = 6.591975e+04 %
Planner:          Average iterations per invocation = 4.349982e+01 %
Planner:        
Planner:        ID: 98 (3)
Planner:          Function: "cffts2"
Planner:          Loop: "  %193 = icmp slt i64 %indvars.iv11, %31, !noelle.pdg.inst.id !620"
Planner:          Loop nesting level: 3
Planner:          Hotness = 9.477015e-01 %
Planner:          Average instructions per invocation = 7.603471e+04 %
Planner:          Average iterations per invocation = 2.569990e+02 %
Planner:        
Planner:        ID: 87 (3)
Planner:          Function: "cffts2"
Planner:          Loop: "  %45 = icmp slt i64 %indvars.iv7, %31, !noelle.pdg.inst.id !415"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.049807e+00 %
Planner:          Average instructions per invocation = 8.422667e+04 %
Planner:          Average iterations per invocation = 2.569990e+02 %
Planner:        
Planner:    ID: 57 (1)
Planner:      Function: "compute_initial_conditions"
Planner:      Loop: "  %34 = icmp slt i64 %indvars.iv8, %20, !noelle.pdg.inst.id !141"
Planner:      Loop nesting level: 1
Planner:      Hotness = 4.085625e+00 %
Planner:      Average instructions per invocation = 2.685275e+09 %
Planner:      Average iterations per invocation = 2.565000e+02 %
Planner:    
Planner:      ID: 58 (2)
Planner:        Function: "compute_initial_conditions"
Planner:        Loop: "  %35 = icmp sgt i64 %indvars.iv.i, %24, !noelle.pdg.inst.id !148"
Planner:        Loop nesting level: 2
Planner:        Hotness = 3.063158e+00 %
Planner:        Average instructions per invocation = 7.864294e+06 %
Planner:        Average iterations per invocation = 2.621440e+05 %
Planner:      
Planner:      ID: 59 (2)
Planner:        Function: "compute_initial_conditions"
Planner:        Loop: "  %60 = icmp slt i64 %indvars.iv6, %25, !noelle.pdg.inst.id !180"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.022454e+00 %
Planner:        Average instructions per invocation = 2.625028e+06 %
Planner:        Average iterations per invocation = 2.569980e+02 %
Planner:      
Planner:        ID: 60 (3)
Planner:          Function: "compute_initial_conditions"
Planner:          Loop: "  %exitcond = icmp eq i64 %indvars.iv, 512, !noelle.pdg.inst.id !189"
Planner:          Loop nesting level: 3
Planner:          Hotness = 1.021455e+00 %
Planner:          Average instructions per invocation = 1.024400e+04 %
Planner:          Average iterations per invocation = 5.129999e+02 %
Planner:        
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 71 saves only 8.691114e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 72 saves only 8.681953e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 82 saves only 8.689119e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 83 saves only 8.681953e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 80 saves only 8.966320e-01 when parallelized. Skip it
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 69
Planner: LoopSelector:      Function: "cffts1"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %43 = icmp slt i64 %indvars.iv12, %24, !noelle.pdg.inst.id !403"
Planner: LoopSelector:      Coverage: 1.000171e+01%
Planner: LoopSelector:      Whole-program savings = 5.253809e+00%
Planner: LoopSelector:      Loop savings = 5.252910e+01%
Planner: LoopSelector:    Loop 70
Planner: LoopSelector:      Function: "cffts1"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %44 = icmp sgt i64 %indvars.iv11, %37, !noelle.pdg.inst.id !409"
Planner: LoopSelector:      Coverage: 1.000171e+01%
Planner: LoopSelector:      Whole-program savings = 5.253806e+00%
Planner: LoopSelector:      Loop savings = 5.252909e+01%
Planner: LoopSelector:    Loop 74
Planner: LoopSelector:      Function: "cffts1"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %77 = icmp slt i64 %indvars.iv10.i4.i, %75, !noelle.pdg.inst.id !472"
Planner: LoopSelector:      Coverage: 4.098632e+00%
Planner: LoopSelector:      Whole-program savings = 3.588105e+00%
Planner: LoopSelector:      Loop savings = 8.754396e+01%
Planner: LoopSelector:    Loop 77
Planner: LoopSelector:      Function: "cffts1"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %134 = icmp slt i64 %indvars.iv10.i.i, %132, !noelle.pdg.inst.id !541"
Planner: LoopSelector:      Coverage: 3.267374e+00%
Planner: LoopSelector:      Whole-program savings = 2.858952e+00%
Planner: LoopSelector:      Loop savings = 8.750000e+01%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1042
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1043
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 2
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1113"
Planner: LoopSelector:      Coverage: 6.805510e+01%
Planner: LoopSelector:      Whole-program savings = 4.507409e+01%
Planner: LoopSelector:      Loop savings = 6.623177e+01%
Planner: LoopSelector:    Loop 4
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %81 = icmp slt i64 %indvars.iv13.i, %40, !noelle.pdg.inst.id !1132"
Planner: LoopSelector:      Coverage: 1.997330e+01%
Planner: LoopSelector:      Whole-program savings = 1.588987e+01%
Planner: LoopSelector:      Loop savings = 7.955556e+01%
Planner: LoopSelector:    Loop 5
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %82 = icmp sgt i64 %indvars.iv, %49, !noelle.pdg.inst.id !1138"
Planner: LoopSelector:      Coverage: 1.997328e+01%
Planner: LoopSelector:      Whole-program savings = 1.588985e+01%
Planner: LoopSelector:      Loop savings = 7.955553e+01%
Planner: LoopSelector:    Loop 20
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %140 = icmp slt i64 %indvars.iv13.i4, %52, !noelle.pdg.inst.id !1257"
Planner: LoopSelector:      Coverage: 1.997322e+01%
Planner: LoopSelector:      Whole-program savings = 1.588981e+01%
Planner: LoopSelector:      Loop savings = 7.955556e+01%
Planner: LoopSelector:    Loop 21
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %141 = icmp sgt i64 %indvars.iv60, %59, !noelle.pdg.inst.id !1262"
Planner: LoopSelector:      Coverage: 1.997320e+01%
Planner: LoopSelector:      Whole-program savings = 1.588979e+01%
Planner: LoopSelector:      Loop savings = 7.955553e+01%
Planner: LoopSelector:    Loop 36
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %199 = icmp slt i64 %indvars.iv12.i, %62, !noelle.pdg.inst.id !1372"
Planner: LoopSelector:      Coverage: 1.737782e+01%
Planner: LoopSelector:      Whole-program savings = 1.533611e+01%
Planner: LoopSelector:      Loop savings = 8.825109e+01%
Planner: LoopSelector:    Loop 37
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %200 = icmp sgt i64 %indvars.iv62, %69, !noelle.pdg.inst.id !1377"
Planner: LoopSelector:      Coverage: 1.737779e+01%
Planner: LoopSelector:      Whole-program savings = 1.533609e+01%
Planner: LoopSelector:      Loop savings = 8.825108e+01%
Planner: LoopSelector:    Loop 6
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %83 = icmp slt i64 %indvars.iv7.i, %48, !noelle.pdg.inst.id !1144"
Planner: LoopSelector:      Coverage: 1.049606e+01%
Planner: LoopSelector:      Whole-program savings = 1.049606e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 22
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %142 = icmp slt i64 %indvars.iv7.i7, %58, !noelle.pdg.inst.id !1267"
Planner: LoopSelector:      Coverage: 1.049602e+01%
Planner: LoopSelector:      Whole-program savings = 1.049602e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 17
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %119 = icmp slt i64 %indvars.iv11.i, %48, !noelle.pdg.inst.id !1221"
Planner: LoopSelector:      Coverage: 9.475207e+00%
Planner: LoopSelector:      Whole-program savings = 9.475207e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 33
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %178 = icmp slt i64 %indvars.iv11.i47, %58, !noelle.pdg.inst.id !1336"
Planner: LoopSelector:      Coverage: 9.475171e+00%
Planner: LoopSelector:      Whole-program savings = 9.475171e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 38
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %201 = icmp slt i64 %indvars.iv6.i, %47, !noelle.pdg.inst.id !1383"
Planner: LoopSelector:      Coverage: 8.689389e+00%
Planner: LoopSelector:      Whole-program savings = 8.689389e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 49
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %239 = icmp slt i64 %indvars.iv10.i, %47, !noelle.pdg.inst.id !1456"
Planner: LoopSelector:      Coverage: 8.687396e+00%
Planner: LoopSelector:      Whole-program savings = 8.687396e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 39
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 5
Planner: LoopSelector:      "  %206 = icmp slt i64 %indvars.iv.i5, %68, !noelle.pdg.inst.id !1392"
Planner: LoopSelector:      Coverage: 8.680230e+00%
Planner: LoopSelector:      Whole-program savings = 8.680230e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 50
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 5
Planner: LoopSelector:      "  %243 = icmp slt i64 %indvars.iv8.i, %68, !noelle.pdg.inst.id !1462"
Planner: LoopSelector:      Coverage: 8.680230e+00%
Planner: LoopSelector:      Whole-program savings = 8.680230e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !351
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !352
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 103 saves only 1.049807e+00 when parallelized. Skip it
Planner: LoopSelector:  Loop 114 saves only 9.477015e-01 when parallelized. Skip it
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 101
Planner: LoopSelector:      Function: "cffts3"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !395"
Planner: LoopSelector:      Coverage: 8.553348e+00%
Planner: LoopSelector:      Whole-program savings = 4.673349e+00%
Planner: LoopSelector:      Loop savings = 5.463766e+01%
Planner: LoopSelector:    Loop 102
Planner: LoopSelector:      Function: "cffts3"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %44 = icmp sgt i64 %indvars.iv12, %37, !noelle.pdg.inst.id !401"
Planner: LoopSelector:      Coverage: 8.553346e+00%
Planner: LoopSelector:      Whole-program savings = 4.673347e+00%
Planner: LoopSelector:      Loop savings = 5.463765e+01%
Planner: LoopSelector:    Loop 106
Planner: LoopSelector:      Function: "cffts3"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !465"
Planner: LoopSelector:      Coverage: 3.286512e+00%
Planner: LoopSelector:      Whole-program savings = 2.878091e+00%
Planner: LoopSelector:      Loop savings = 8.757282e+01%
Planner: LoopSelector:    Loop 109
Planner: LoopSelector:      Function: "cffts3"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !533"
Planner: LoopSelector:      Coverage: 3.267442e+00%
Planner: LoopSelector:      Whole-program savings = 2.859021e+00%
Planner: LoopSelector:      Loop savings = 8.750029e+01%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 54 saves only 7.179324e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 55 saves only 7.153375e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 53 saves only 7.179418e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 63
Planner: LoopSelector:      Function: "evolve"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %16 = icmp slt i64 %indvars.iv5, %8, !noelle.pdg.inst.id !61"
Planner: LoopSelector:      Coverage: 1.073010e+01%
Planner: LoopSelector:      Whole-program savings = 1.073010e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 64
Planner: LoopSelector:      Function: "evolve"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %17 = icmp slt i64 %indvars.iv3, %11, !noelle.pdg.inst.id !67"
Planner: LoopSelector:      Coverage: 1.073007e+01%
Planner: LoopSelector:      Whole-program savings = 1.073007e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 65
Planner: LoopSelector:      Function: "evolve"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %18 = icmp slt i64 %indvars.iv, %14, !noelle.pdg.inst.id !73"
Planner: LoopSelector:      Coverage: 1.072408e+01%
Planner: LoopSelector:      Whole-program savings = 1.072408e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !359
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !360
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 98 saves only 9.477015e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 87 saves only 1.049807e+00 when parallelized. Skip it
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 85
Planner: LoopSelector:      Function: "cffts2"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !403"
Planner: LoopSelector:      Coverage: 8.553348e+00%
Planner: LoopSelector:      Whole-program savings = 4.469139e+00%
Planner: LoopSelector:      Loop savings = 5.225017e+01%
Planner: LoopSelector:    Loop 86
Planner: LoopSelector:      Function: "cffts2"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %44 = icmp sgt i64 %indvars.iv14, %41, !noelle.pdg.inst.id !409"
Planner: LoopSelector:      Coverage: 8.553346e+00%
Planner: LoopSelector:      Whole-program savings = 4.469137e+00%
Planner: LoopSelector:      Loop savings = 5.225016e+01%
Planner: LoopSelector:    Loop 90
Planner: LoopSelector:      Function: "cffts2"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !473"
Planner: LoopSelector:      Coverage: 3.286512e+00%
Planner: LoopSelector:      Whole-program savings = 2.878091e+00%
Planner: LoopSelector:      Loop savings = 8.757282e+01%
Planner: LoopSelector:    Loop 93
Planner: LoopSelector:      Function: "cffts2"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !541"
Planner: LoopSelector:      Coverage: 3.267442e+00%
Planner: LoopSelector:      Whole-program savings = 2.859021e+00%
Planner: LoopSelector:      Loop savings = 8.750029e+01%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !109
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !108
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !109
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !108
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !109
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !108
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !109
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !108
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !109
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !108
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !109
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !108
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !109
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !108
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !109
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !108
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 60 saves only 1.021455e+00 when parallelized. Skip it
Planner: LoopSelector:  Loop 58 saves only 8.168430e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 59 saves only 9.198491e-01 when parallelized. Skip it
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 57
Planner: LoopSelector:      Function: "compute_initial_conditions"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %34 = icmp slt i64 %indvars.iv8, %20, !noelle.pdg.inst.id !141"
Planner: LoopSelector:      Coverage: 4.085625e+00%
Planner: LoopSelector:      Whole-program savings = 3.881414e+00%
Planner: LoopSelector:      Loop savings = 9.500172e+01%
Planner: LoopSelector: End
Planner:   Maximum time saved = 9.648172e+01% (126825112648)
Planner:   Maximum time saved with DOALL only = 1.073010e+01% (14104702208)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 7, !noelle.pdg.inst.id !1054" (5.096999e-08%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 7, !noelle.pdg.inst.id !1073" (5.096999e-08%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1115" (6.805510e+01%)
Noelle:     Loop "  %exitcond.i = icmp eq i64 %indvars.iv15.i, 3, !noelle.pdg.inst.id !1126" (2.738686e-07%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %81 = icmp slt i64 %indvars.iv13.i, %40, !noelle.pdg.inst.id !1135" (1.997330e+01%)
Noelle:     Loop "  %82 = icmp sgt i64 %indvars.iv, %49, !noelle.pdg.inst.id !1141" (1.997328e+01%)
Noelle:     Loop "  %83 = icmp slt i64 %indvars.iv7.i, %48, !noelle.pdg.inst.id !1147" (1.049606e+01%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv.i, %47, !noelle.pdg.inst.id !1153" (1.030428e+01%)
Noelle:     Loop "  br i1 false, label %.preheader.i.i..loopexit.i.i_crit_edge, label %100, !prof !1176, !noelle.loop.id !1180, !noelle.pdg.inst.id !1181" (4.984683e-04%)
Noelle:  Disable loop "8" as cold code
Noelle:     Loop "  br i1 false, label %101, label %.us-lcssa.us.loopexit1.i19.i.i, !prof !1176, !noelle.loop.id !1184, !noelle.pdg.inst.id !1185" (1.246163e-04%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  br i1 false, label %103, label %107, !noelle.loop.id !1187, !noelle.pdg.inst.id !1188" (0.000000e+00%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  br i1 false, label %105, label %106, !noelle.loop.id !1150, !noelle.pdg.inst.id !1190" (0.000000e+00%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  br i1 false, label %109, label %.us-lcssa.us.loopexit1.i.i.i, !noelle.loop.id !1197, !noelle.pdg.inst.id !1198" (3.042985e-09%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  br i1 false, label %111, label %115, !noelle.loop.id !1200, !noelle.pdg.inst.id !1201" (3.042985e-09%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  br i1 false, label %113, label %114, !noelle.loop.id !1203, !noelle.pdg.inst.id !1204" (3.042985e-09%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  br i1 false, label %.preheader1.i.i.preheader, label %cfftz.exit.i.loopexit, !noelle.loop.id !1213, !noelle.pdg.inst.id !1214" (0.000000e+00%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  br i1 false, label %116, label %117, !noelle.loop.id !1216, !noelle.pdg.inst.id !1217" (0.000000e+00%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %119 = icmp slt i64 %indvars.iv11.i, %48, !noelle.pdg.inst.id !1223" (9.475207e+00%)
Noelle:     Loop "  %120 = icmp slt i64 %indvars.iv9.i, %47, !noelle.pdg.inst.id !1228" (9.283423e+00%)
Noelle:     Loop "  %exitcond.i2 = icmp eq i64 %indvars.iv15.i1, 3, !noelle.pdg.inst.id !1251" (2.738686e-07%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %140 = icmp slt i64 %indvars.iv13.i4, %52, !noelle.pdg.inst.id !1259" (1.997322e+01%)
Noelle:     Loop "  %141 = icmp sgt i64 %indvars.iv60, %59, !noelle.pdg.inst.id !1264" (1.997320e+01%)
Noelle:     Loop "  %142 = icmp slt i64 %indvars.iv7.i7, %58, !noelle.pdg.inst.id !1269" (1.049602e+01%)
Noelle:     Loop "  %143 = icmp slt i64 %indvars.iv.i9, %47, !noelle.pdg.inst.id !1274" (1.030424e+01%)
Noelle:     Loop "  br i1 false, label %.preheader.i.i16..loopexit.i.i38_crit_edge, label %159, !prof !1176, !noelle.loop.id !1295, !noelle.pdg.inst.id !1296" (4.984652e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  br i1 false, label %160, label %.us-lcssa.us.loopexit1.i19.i.i27, !prof !1176, !noelle.loop.id !1299, !noelle.pdg.inst.id !1300" (1.246155e-04%)
Noelle:  Disable loop "25" as cold code
Noelle:     Loop "  br i1 false, label %162, label %166, !noelle.loop.id !1302, !noelle.pdg.inst.id !1303" (0.000000e+00%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  br i1 false, label %164, label %165, !noelle.loop.id !1305, !noelle.pdg.inst.id !1306" (0.000000e+00%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  br i1 false, label %168, label %.us-lcssa.us.loopexit1.i.i.i37, !noelle.loop.id !1312, !noelle.pdg.inst.id !1313" (3.042985e-09%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  br i1 false, label %170, label %174, !noelle.loop.id !1315, !noelle.pdg.inst.id !1316" (3.042985e-09%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  br i1 false, label %172, label %173, !noelle.loop.id !1318, !noelle.pdg.inst.id !1319" (3.042985e-09%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  br i1 false, label %.preheader1.i.i41.preheader, label %cfftz.exit.i46.loopexit, !noelle.loop.id !1328, !noelle.pdg.inst.id !1329" (0.000000e+00%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  br i1 false, label %175, label %176, !noelle.loop.id !1331, !noelle.pdg.inst.id !1332" (0.000000e+00%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %178 = icmp slt i64 %indvars.iv11.i47, %58, !noelle.pdg.inst.id !1338" (9.475171e+00%)
Noelle:     Loop "  %179 = icmp slt i64 %indvars.iv9.i49, %47, !noelle.pdg.inst.id !1343" (9.283387e+00%)
Noelle:     Loop "  %exitcond.i1 = icmp eq i64 %indvars.iv14.i, 3, !noelle.pdg.inst.id !1366" (2.738686e-07%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %199 = icmp slt i64 %indvars.iv12.i, %62, !noelle.pdg.inst.id !1374" (1.737782e+01%)
Noelle:     Loop "  %200 = icmp sgt i64 %indvars.iv62, %69, !noelle.pdg.inst.id !1379" (1.737779e+01%)
Noelle:     Loop "  %201 = icmp slt i64 %indvars.iv6.i, %47, !noelle.pdg.inst.id !1385" (8.689389e+00%)
Noelle:     Loop "  %206 = icmp slt i64 %indvars.iv.i5, %68, !noelle.pdg.inst.id !1394" (8.680230e+00%)
Noelle:     Loop "  br i1 false, label %.preheader.i.i11..loopexit.i.i33_crit_edge, label %220, !prof !1410, !noelle.loop.id !1414, !noelle.pdg.inst.id !1415" (2.492341e-04%)
Noelle:  Disable loop "40" as cold code
Noelle:     Loop "  br i1 false, label %221, label %.us-lcssa.us.loopexit1.i19.i.i22, !prof !1410, !noelle.loop.id !1418, !noelle.pdg.inst.id !1419" (6.230815e-05%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  br i1 false, label %223, label %227, !noelle.loop.id !1421, !noelle.pdg.inst.id !1422" (0.000000e+00%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  br i1 false, label %225, label %226, !noelle.loop.id !1424, !noelle.pdg.inst.id !1425" (0.000000e+00%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  br i1 false, label %229, label %.us-lcssa.us.loopexit1.i.i.i32, !noelle.loop.id !1432, !noelle.pdg.inst.id !1433" (1.521492e-09%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  br i1 false, label %231, label %235, !noelle.loop.id !1435, !noelle.pdg.inst.id !1436" (1.521492e-09%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  br i1 false, label %233, label %234, !noelle.loop.id !1438, !noelle.pdg.inst.id !1439" (1.521492e-09%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  br i1 false, label %.preheader1.i.i36.preheader, label %cfftz.exit.i41.loopexit, !noelle.loop.id !1448, !noelle.pdg.inst.id !1449" (0.000000e+00%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  br i1 false, label %236, label %237, !noelle.loop.id !1451, !noelle.pdg.inst.id !1452" (0.000000e+00%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %239 = icmp slt i64 %indvars.iv10.i, %47, !noelle.pdg.inst.id !1458" (8.687396e+00%)
Noelle:     Loop "  %243 = icmp slt i64 %indvars.iv8.i, %68, !noelle.pdg.inst.id !1464" (8.680230e+00%)
Noelle:  Function "fft"
Noelle:  Function "evolve"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv5, %8, !noelle.pdg.inst.id !63" (1.073010e+01%)
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv3, %11, !noelle.pdg.inst.id !70" (1.073007e+01%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv, %14, !noelle.pdg.inst.id !77" (1.072408e+01%)
Noelle:  Function "cffts1"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv14, 3, !noelle.pdg.inst.id !368" (3.294031e-07%)
Noelle:  Disable loop "54" as cold code
Noelle:     Loop "  %43 = icmp slt i64 %indvars.iv12, %24, !noelle.pdg.inst.id !405" (1.000171e+01%)
Noelle:     Loop "  %44 = icmp sgt i64 %indvars.iv11, %37, !noelle.pdg.inst.id !412" (1.000171e+01%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv6, %36, !noelle.pdg.inst.id !419" (8.691114e-01%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv, %29, !noelle.pdg.inst.id !428" (8.681953e-01%)
Noelle:     Loop "  %65 = icmp slt i32 %21, %.0.i, !noelle.pdg.inst.id !455" (7.366971e+00%)
Noelle:     Loop "  %77 = icmp slt i64 %indvars.iv10.i4.i, %75, !noelle.pdg.inst.id !476" (4.098632e+00%)
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv8.i6.i, %74, !noelle.pdg.inst.id !490" (4.066661e+00%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv.i8.i, %36, !noelle.pdg.inst.id !502" (3.980516e+00%)
Noelle:     Loop "  %134 = icmp slt i64 %indvars.iv10.i.i, %132, !noelle.pdg.inst.id !546" (3.267374e+00%)
Noelle:     Loop "  %146 = icmp slt i64 %indvars.iv8.i.i, %131, !noelle.pdg.inst.id !560" (3.251407e+00%)
Noelle:     Loop "  %154 = icmp slt i64 %indvars.iv.i.i, %36, !noelle.pdg.inst.id !572" (3.184413e+00%)
Noelle:     Loop "  %180 = icmp slt i64 %indvars.iv5.i, %29, !noelle.pdg.inst.id !605" (8.966320e-01%)
Noelle:     Loop "  %181 = icmp slt i64 %indvars.iv.i, %36, !noelle.pdg.inst.id !611" (8.774685e-01%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv10, %36, !noelle.pdg.inst.id !630" (8.689119e-01%)
Noelle:     Loop "  %199 = icmp slt i64 %indvars.iv8, %29, !noelle.pdg.inst.id !636" (8.681953e-01%)
Noelle:  Function "cffts2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv15, 3, !noelle.pdg.inst.id !368" (3.294031e-07%)
Noelle:  Disable loop "70" as cold code
Noelle:     Loop "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !405" (8.553348e+00%)
Noelle:     Loop "  %44 = icmp sgt i64 %indvars.iv14, %41, !noelle.pdg.inst.id !412" (8.553346e+00%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv7, %31, !noelle.pdg.inst.id !419" (1.049807e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv, %30, !noelle.pdg.inst.id !425" (1.030625e+00%)
Noelle:     Loop "  %63 = icmp slt i32 %21, %.0.i, !noelle.pdg.inst.id !455" (6.555687e+00%)
Noelle:     Loop "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !477" (3.286512e+00%)
Noelle:     Loop "  %87 = icmp slt i64 %indvars.iv8.i6.i, %72, !noelle.pdg.inst.id !491" (3.254579e+00%)
Noelle:     Loop "  %95 = icmp slt i64 %indvars.iv.i8.i, %30, !noelle.pdg.inst.id !503" (3.184407e+00%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !546" (3.267442e+00%)
Noelle:     Loop "  %144 = icmp slt i64 %indvars.iv8.i.i, %129, !noelle.pdg.inst.id !560" (3.251401e+00%)
Noelle:     Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %30, !noelle.pdg.inst.id !572" (3.184407e+00%)
Noelle:     Loop "  %178 = icmp slt i64 %indvars.iv5.i, %31, !noelle.pdg.inst.id !603" (0.000000e+00%)
Noelle:  Disable loop "82" as cold code
Noelle:     Loop "  %179 = icmp slt i64 %indvars.iv.i, %30, !noelle.pdg.inst.id !608" (0.000000e+00%)
Noelle:  Disable loop "83" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %indvars.iv11, %31, !noelle.pdg.inst.id !626" (9.477015e-01%)
Noelle:     Loop "  %194 = icmp slt i64 %indvars.iv9, %30, !noelle.pdg.inst.id !631" (9.285194e-01%)
Noelle:  Function "cffts3"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv15, 3, !noelle.pdg.inst.id !360" (3.415750e-07%)
Noelle:  Disable loop "86" as cold code
Noelle:     Loop "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !397" (8.553348e+00%)
Noelle:     Loop "  %44 = icmp sgt i64 %indvars.iv12, %37, !noelle.pdg.inst.id !404" (8.553346e+00%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv7, %29, !noelle.pdg.inst.id !411" (1.049807e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv, %35, !noelle.pdg.inst.id !417" (1.030625e+00%)
Noelle:     Loop "  %63 = icmp slt i32 %21, %.0.i, !noelle.pdg.inst.id !447" (6.555687e+00%)
Noelle:     Loop "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !469" (3.286512e+00%)
Noelle:     Loop "  %87 = icmp slt i64 %indvars.iv8.i6.i, %72, !noelle.pdg.inst.id !483" (3.254579e+00%)
Noelle:     Loop "  %95 = icmp slt i64 %indvars.iv.i8.i, %35, !noelle.pdg.inst.id !495" (3.184407e+00%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !538" (3.267442e+00%)
Noelle:     Loop "  %144 = icmp slt i64 %indvars.iv8.i.i, %129, !noelle.pdg.inst.id !552" (3.251401e+00%)
Noelle:     Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %35, !noelle.pdg.inst.id !564" (3.184407e+00%)
Noelle:     Loop "  %178 = icmp slt i64 %indvars.iv5.i, %29, !noelle.pdg.inst.id !595" (0.000000e+00%)
Noelle:  Disable loop "98" as cold code
Noelle:     Loop "  %179 = icmp slt i64 %indvars.iv.i, %35, !noelle.pdg.inst.id !600" (0.000000e+00%)
Noelle:  Disable loop "99" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %indvars.iv11, %29, !noelle.pdg.inst.id !618" (9.477015e-01%)
Noelle:     Loop "  %194 = icmp slt i64 %indvars.iv9, %35, !noelle.pdg.inst.id !623" (9.285194e-01%)
Noelle:  Function "compute_initial_conditions"
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv8, %20, !noelle.pdg.inst.id !143" (4.085625e+00%)
Noelle:     Loop "  %35 = icmp sgt i64 %indvars.iv.i, %24, !noelle.pdg.inst.id !151" (3.063158e+00%)
Noelle:     Loop "  %60 = icmp slt i64 %indvars.iv6, %25, !noelle.pdg.inst.id !183" (1.022454e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 512, !noelle.pdg.inst.id !192" (1.021455e+00%)
Noelle:  Function "compute_indexmap"
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv10, %4, !noelle.pdg.inst.id !77" (7.179418e-01%)
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv8, %8, !noelle.pdg.inst.id !91" (7.179324e-01%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv6, %12, !noelle.pdg.inst.id !105" (7.153375e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1966081, !noelle.pdg.inst.id !126" (3.291316e-02%)
Noelle:  Disable loop "109" as cold code
Noelle:  Function "checksum"
Noelle:  Disable "checksum" as cold function
Noelle:  Function "fft_init"
Noelle:  Disable "fft_init" as cold function
Noelle:  Function "ipow46"
Noelle:  Disable "ipow46" as cold function
Noelle:  Function "ilog2"
Noelle:  Disable "ilog2" as cold function
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "setup"
Noelle:  Disable "setup" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "verify"
Noelle:  Disable "verify" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
Noelle:  Function "vranlc"
Noelle:  Disable "vranlc" as cold function
Parallelizer:    There are 70 loops in the program we are going to consider
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i8, align 1, !noelle.pdg.inst.id !1048
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4, !noelle.pdg.inst.id !1047
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !361
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [3 x i32], align 4, !noelle.pdg.inst.id !353
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !111
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !110
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !111
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !110
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "cffts1"
Parallelizer: parallelizerLoop:   Loop 69 = "  %43 = icmp slt i64 %indvars.iv12, %24, !noelle.pdg.inst.id !405"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %21 = load i32, i32* %20, align 4, !noelle.pdg.inst.id !50
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %24 = sext i32 %23 to i64, !noelle.pdg.inst.id !387
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %29 = sext i32 %28 to i64, !noelle.pdg.inst.id !390
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %32 = sext i32 %31 to i64, !noelle.pdg.inst.id !393
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %34 = icmp eq i32 %33, 1, !noelle.pdg.inst.id !395
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %36 = sext i32 %.pre to i64, !noelle.pdg.inst.id !397
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %37 = sext i32 %35 to i64, !noelle.pdg.inst.id !398
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %or.cond.i = or i1 %30, %41, !noelle.pdg.inst.id !402
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "cffts1"
Parallelizer: parallelizerLoop:   Loop 70 = "  %44 = icmp sgt i64 %indvars.iv11, %37, !noelle.pdg.inst.id !412"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %21 = load i32, i32* %20, align 4, !noelle.pdg.inst.id !50
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %29 = sext i32 %28 to i64, !noelle.pdg.inst.id !390
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %32 = sext i32 %31 to i64, !noelle.pdg.inst.id !393
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %34 = icmp eq i32 %33, 1, !noelle.pdg.inst.id !395
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %36 = sext i32 %.pre to i64, !noelle.pdg.inst.id !397
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %37 = sext i32 %35 to i64, !noelle.pdg.inst.id !398
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %or.cond.i = or i1 %30, %41, !noelle.pdg.inst.id !402
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %indvars.iv12 = phi i64 [ %indvars.iv.next13, %213 ], [ 0, %17 ], !noelle.pdg.inst.id !404
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "cffts1"
Parallelizer: parallelizerLoop:   Loop 74 = "  %77 = icmp slt i64 %indvars.iv10.i4.i, %75, !noelle.pdg.inst.id !476"
Parallelizer: parallelizerLoop:   Nesting level = 4
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %32 = sext i32 %31 to i64, !noelle.pdg.inst.id !393
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %36 = sext i32 %.pre to i64, !noelle.pdg.inst.id !397
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %74 = sext i32 %.02.i.i to i64, !noelle.pdg.inst.id !471
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %75 = sext i32 %.03.i1.i to i64, !noelle.pdg.inst.id !472
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %76 = sext i32 %73 to i64, !noelle.pdg.inst.id !473
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "cffts1"
Parallelizer: parallelizerLoop:   Loop 77 = "  %134 = icmp slt i64 %indvars.iv10.i.i, %132, !noelle.pdg.inst.id !546"
Parallelizer: parallelizerLoop:   Nesting level = 4
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %32 = sext i32 %31 to i64, !noelle.pdg.inst.id !393
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %36 = sext i32 %.pre to i64, !noelle.pdg.inst.id !397
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %131 = sext i32 %124 to i64, !noelle.pdg.inst.id !541
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %132 = sext i32 %.03.i.i to i64, !noelle.pdg.inst.id !542
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %133 = sext i32 %130 to i64, !noelle.pdg.inst.id !543
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 2 = "  %exitcond1 = icmp eq i32 %.01, %70, !noelle.pdg.inst.id !1115"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %33 = bitcast [512 x [18 x %struct.dcomplex]]* %5 to i8*, !noelle.pdg.inst.id !1085
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %34 = bitcast [512 x [18 x %struct.dcomplex]]* %3 to i8*, !noelle.pdg.inst.id !1086
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %35 = bitcast [512 x [18 x %struct.dcomplex]]* %4 to i8*, !noelle.pdg.inst.id !1087
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %40 = sext i32 %39 to i64, !noelle.pdg.inst.id !1091
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %47 = sext i32 %41 to i64, !noelle.pdg.inst.id !1095
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %48 = sext i32 %46 to i64, !noelle.pdg.inst.id !1096
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %49 = sext i32 %44 to i64, !noelle.pdg.inst.id !1097
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %52 = sext i32 %51 to i64, !noelle.pdg.inst.id !1099
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %58 = sext i32 %57 to i64, !noelle.pdg.inst.id !1103
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %59 = sext i32 %55 to i64, !noelle.pdg.inst.id !1104
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %62 = sext i32 %61 to i64, !noelle.pdg.inst.id !1106
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %68 = sext i32 %67 to i64, !noelle.pdg.inst.id !1110
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %69 = sext i32 %65 to i64, !noelle.pdg.inst.id !1111
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %70 = or i32 %37, 1, !noelle.pdg.inst.id !1112
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 4 = "  %81 = icmp slt i64 %indvars.iv13.i, %40, !noelle.pdg.inst.id !1135"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %40 = sext i32 %39 to i64, !noelle.pdg.inst.id !1091
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %47 = sext i32 %41 to i64, !noelle.pdg.inst.id !1095
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %48 = sext i32 %46 to i64, !noelle.pdg.inst.id !1096
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %49 = sext i32 %44 to i64, !noelle.pdg.inst.id !1097
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 5 = "  %82 = icmp sgt i64 %indvars.iv, %49, !noelle.pdg.inst.id !1141"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %47 = sext i32 %41 to i64, !noelle.pdg.inst.id !1095
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %48 = sext i32 %46 to i64, !noelle.pdg.inst.id !1096
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %49 = sext i32 %44 to i64, !noelle.pdg.inst.id !1097
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %indvars.iv13.i = phi i64 [ %indvars.iv.next14.i, %135 ], [ 0, %79 ], !noelle.pdg.inst.id !1134
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 20 = "  %140 = icmp slt i64 %indvars.iv13.i4, %52, !noelle.pdg.inst.id !1259"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %47 = sext i32 %41 to i64, !noelle.pdg.inst.id !1095
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %52 = sext i32 %51 to i64, !noelle.pdg.inst.id !1099
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %58 = sext i32 %57 to i64, !noelle.pdg.inst.id !1103
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %59 = sext i32 %55 to i64, !noelle.pdg.inst.id !1104
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 21 = "  %141 = icmp sgt i64 %indvars.iv60, %59, !noelle.pdg.inst.id !1264"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %47 = sext i32 %41 to i64, !noelle.pdg.inst.id !1095
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %58 = sext i32 %57 to i64, !noelle.pdg.inst.id !1103
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %59 = sext i32 %55 to i64, !noelle.pdg.inst.id !1104
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %indvars.iv13.i4 = phi i64 [ %indvars.iv.next14.i52, %194 ], [ 0, %138 ], !noelle.pdg.inst.id !1258
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 36 = "  %199 = icmp slt i64 %indvars.iv12.i, %62, !noelle.pdg.inst.id !1374"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %47 = sext i32 %41 to i64, !noelle.pdg.inst.id !1095
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %62 = sext i32 %61 to i64, !noelle.pdg.inst.id !1106
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %68 = sext i32 %67 to i64, !noelle.pdg.inst.id !1110
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %69 = sext i32 %65 to i64, !noelle.pdg.inst.id !1111
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 37 = "  %200 = icmp sgt i64 %indvars.iv62, %69, !noelle.pdg.inst.id !1379"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %47 = sext i32 %41 to i64, !noelle.pdg.inst.id !1095
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %68 = sext i32 %67 to i64, !noelle.pdg.inst.id !1110
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %69 = sext i32 %65 to i64, !noelle.pdg.inst.id !1111
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %indvars.iv12.i = phi i64 [ %indvars.iv.next13.i, %257 ], [ 0, %197 ], !noelle.pdg.inst.id !1373
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 6 = "  %83 = icmp slt i64 %indvars.iv7.i, %48, !noelle.pdg.inst.id !1147"
Parallelizer: parallelizerLoop:   Nesting level = 4
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %47 = sext i32 %41 to i64, !noelle.pdg.inst.id !1095
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %48 = sext i32 %46 to i64, !noelle.pdg.inst.id !1096
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %indvars.iv13.i = phi i64 [ %indvars.iv.next14.i, %135 ], [ 0, %79 ], !noelle.pdg.inst.id !1134
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %indvars.iv = phi i64 [ %indvars.iv.next, %134 ], [ 0, %.preheader19.preheader ], !noelle.pdg.inst.id !1140
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 22 = "  %142 = icmp slt i64 %indvars.iv7.i7, %58, !noelle.pdg.inst.id !1269"
Parallelizer: parallelizerLoop:   Nesting level = 4
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %47 = sext i32 %41 to i64, !noelle.pdg.inst.id !1095
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %58 = sext i32 %57 to i64, !noelle.pdg.inst.id !1103
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %indvars.iv13.i4 = phi i64 [ %indvars.iv.next14.i52, %194 ], [ 0, %138 ], !noelle.pdg.inst.id !1258
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %indvars.iv60 = phi i64 [ %indvars.iv.next61, %193 ], [ 0, %.preheader18.preheader ], !noelle.pdg.inst.id !1263
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 17 = "  %119 = icmp slt i64 %indvars.iv11.i, %48, !noelle.pdg.inst.id !1223"
Parallelizer: parallelizerLoop:   Nesting level = 4
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %5 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1046
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %47 = sext i32 %41 to i64, !noelle.pdg.inst.id !1095
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %48 = sext i32 %46 to i64, !noelle.pdg.inst.id !1096
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %indvars.iv13.i = phi i64 [ %indvars.iv.next14.i, %135 ], [ 0, %79 ], !noelle.pdg.inst.id !1134
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %indvars.iv = phi i64 [ %indvars.iv.next, %134 ], [ 0, %.preheader19.preheader ], !noelle.pdg.inst.id !1140
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 33 = "  %178 = icmp slt i64 %indvars.iv11.i47, %58, !noelle.pdg.inst.id !1338"
Parallelizer: parallelizerLoop:   Nesting level = 4
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %3 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1044
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %47 = sext i32 %41 to i64, !noelle.pdg.inst.id !1095
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %58 = sext i32 %57 to i64, !noelle.pdg.inst.id !1103
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %indvars.iv13.i4 = phi i64 [ %indvars.iv.next14.i52, %194 ], [ 0, %138 ], !noelle.pdg.inst.id !1258
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %indvars.iv60 = phi i64 [ %indvars.iv.next61, %193 ], [ 0, %.preheader18.preheader ], !noelle.pdg.inst.id !1263
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 38 = "  %201 = icmp slt i64 %indvars.iv6.i, %47, !noelle.pdg.inst.id !1385"
Parallelizer: parallelizerLoop:   Nesting level = 4
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %47 = sext i32 %41 to i64, !noelle.pdg.inst.id !1095
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %68 = sext i32 %67 to i64, !noelle.pdg.inst.id !1110
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %indvars.iv12.i = phi i64 [ %indvars.iv.next13.i, %257 ], [ 0, %197 ], !noelle.pdg.inst.id !1373
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %indvars.iv62 = phi i64 [ %indvars.iv.next63, %256 ], [ 0, %.preheader17.preheader ], !noelle.pdg.inst.id !1378
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 49 = "  %239 = icmp slt i64 %indvars.iv10.i, %47, !noelle.pdg.inst.id !1458"
Parallelizer: parallelizerLoop:   Nesting level = 4
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %47 = sext i32 %41 to i64, !noelle.pdg.inst.id !1095
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %68 = sext i32 %67 to i64, !noelle.pdg.inst.id !1110
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %indvars.iv12.i = phi i64 [ %indvars.iv.next13.i, %257 ], [ 0, %197 ], !noelle.pdg.inst.id !1373
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %indvars.iv62 = phi i64 [ %indvars.iv.next63, %256 ], [ 0, %.preheader17.preheader ], !noelle.pdg.inst.id !1378
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 39 = "  %206 = icmp slt i64 %indvars.iv.i5, %68, !noelle.pdg.inst.id !1394"
Parallelizer: parallelizerLoop:   Nesting level = 5
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %68 = sext i32 %67 to i64, !noelle.pdg.inst.id !1110
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %indvars.iv12.i = phi i64 [ %indvars.iv.next13.i, %257 ], [ 0, %197 ], !noelle.pdg.inst.id !1373
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %indvars.iv6.i = phi i64 [ %indvars.iv.next7.i, %218 ], [ 0, %.preheader.i4.preheader ], !noelle.pdg.inst.id !1384
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %204 = ashr exact i64 %sext, 32, !noelle.pdg.inst.id !1391
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 50 = "  %243 = icmp slt i64 %indvars.iv8.i, %68, !noelle.pdg.inst.id !1464"
Parallelizer: parallelizerLoop:   Nesting level = 5
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %4 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !1045
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %68 = sext i32 %67 to i64, !noelle.pdg.inst.id !1110
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %indvars.iv12.i = phi i64 [ %indvars.iv.next13.i, %257 ], [ 0, %197 ], !noelle.pdg.inst.id !1373
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %indvars.iv10.i = phi i64 [ %indvars.iv.next11.i, %255 ], [ 0, %cfftz.exit.i41 ], !noelle.pdg.inst.id !1457
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %241 = add nsw i64 %indvars.iv10.i, %indvars.iv62, !noelle.pdg.inst.id !1461
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "cffts3"
Parallelizer: parallelizerLoop:   Loop 101 = "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !397"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %21 = load i32, i32* %20, align 4, !noelle.pdg.inst.id !50
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %24 = sext i32 %23 to i64, !noelle.pdg.inst.id !379
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %29 = sext i32 %28 to i64, !noelle.pdg.inst.id !382
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %32 = sext i32 %31 to i64, !noelle.pdg.inst.id !385
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %34 = icmp eq i32 %33, 1, !noelle.pdg.inst.id !387
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %35 = sext i32 %.pre to i64, !noelle.pdg.inst.id !388
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %37 = sext i32 %36 to i64, !noelle.pdg.inst.id !390
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %or.cond.i = or i1 %30, %41, !noelle.pdg.inst.id !394
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "cffts3"
Parallelizer: parallelizerLoop:   Loop 102 = "  %44 = icmp sgt i64 %indvars.iv12, %37, !noelle.pdg.inst.id !404"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %21 = load i32, i32* %20, align 4, !noelle.pdg.inst.id !50
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %29 = sext i32 %28 to i64, !noelle.pdg.inst.id !382
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %32 = sext i32 %31 to i64, !noelle.pdg.inst.id !385
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %34 = icmp eq i32 %33, 1, !noelle.pdg.inst.id !387
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %35 = sext i32 %.pre to i64, !noelle.pdg.inst.id !388
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %37 = sext i32 %36 to i64, !noelle.pdg.inst.id !390
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %or.cond.i = or i1 %30, %41, !noelle.pdg.inst.id !394
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %indvars.iv13 = phi i64 [ %indvars.iv.next14, %209 ], [ 0, %17 ], !noelle.pdg.inst.id !396
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "cffts3"
Parallelizer: parallelizerLoop:   Loop 106 = "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !469"
Parallelizer: parallelizerLoop:   Nesting level = 4
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %32 = sext i32 %31 to i64, !noelle.pdg.inst.id !385
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %35 = sext i32 %.pre to i64, !noelle.pdg.inst.id !388
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %72 = sext i32 %.02.i.i to i64, !noelle.pdg.inst.id !464
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %73 = sext i32 %.03.i1.i to i64, !noelle.pdg.inst.id !465
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %74 = sext i32 %71 to i64, !noelle.pdg.inst.id !466
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "cffts3"
Parallelizer: parallelizerLoop:   Loop 109 = "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !538"
Parallelizer: parallelizerLoop:   Nesting level = 4
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !354
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !355
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %32 = sext i32 %31 to i64, !noelle.pdg.inst.id !385
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %35 = sext i32 %.pre to i64, !noelle.pdg.inst.id !388
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %129 = sext i32 %122 to i64, !noelle.pdg.inst.id !533
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %130 = sext i32 %.03.i.i to i64, !noelle.pdg.inst.id !534
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %131 = sext i32 %128 to i64, !noelle.pdg.inst.id !535
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "evolve"
Parallelizer: parallelizerLoop:   Loop 63 = "  %16 = icmp slt i64 %indvars.iv5, %8, !noelle.pdg.inst.id !63"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 = i32 %2
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %8 = sext i32 %7 to i64, !noelle.pdg.inst.id !54
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %11 = sext i32 %10 to i64, !noelle.pdg.inst.id !57
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %14 = sext i32 %13 to i64, !noelle.pdg.inst.id !60
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "evolve"
Parallelizer: parallelizerLoop:   Loop 64 = "  %17 = icmp slt i64 %indvars.iv3, %11, !noelle.pdg.inst.id !70"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 = i32 %2
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %indvars.iv5 = phi i64 [ %indvars.iv.next6, %35 ], [ 0, %5 ], !noelle.pdg.inst.id !62
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %11 = sext i32 %10 to i64, !noelle.pdg.inst.id !57
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %14 = sext i32 %13 to i64, !noelle.pdg.inst.id !60
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "evolve"
Parallelizer: parallelizerLoop:   Loop 65 = "  %18 = icmp slt i64 %indvars.iv, %14, !noelle.pdg.inst.id !77"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 = i32 %2
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %indvars.iv5 = phi i64 [ %indvars.iv.next6, %35 ], [ 0, %5 ], !noelle.pdg.inst.id !62
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %14 = sext i32 %13 to i64, !noelle.pdg.inst.id !60
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %indvars.iv3 = phi i64 [ %indvars.iv.next4, %34 ], [ 0, %.preheader1.preheader ], !noelle.pdg.inst.id !69
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "cffts2"
Parallelizer: parallelizerLoop:   Loop 85 = "  %43 = icmp slt i64 %indvars.iv13, %24, !noelle.pdg.inst.id !405"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %21 = load i32, i32* %20, align 4, !noelle.pdg.inst.id !50
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %24 = sext i32 %23 to i64, !noelle.pdg.inst.id !387
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %30 = sext i32 %.pre to i64, !noelle.pdg.inst.id !391
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %31 = sext i32 %29 to i64, !noelle.pdg.inst.id !392
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %or.cond.i = or i1 %35, %36, !noelle.pdg.inst.id !397
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %38 = sext i32 %37 to i64, !noelle.pdg.inst.id !399
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %40 = icmp eq i32 %39, 1, !noelle.pdg.inst.id !401
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %41 = sext i32 %27 to i64, !noelle.pdg.inst.id !402
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "cffts2"
Parallelizer: parallelizerLoop:   Loop 86 = "  %44 = icmp sgt i64 %indvars.iv14, %41, !noelle.pdg.inst.id !412"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %21 = load i32, i32* %20, align 4, !noelle.pdg.inst.id !50
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %30 = sext i32 %.pre to i64, !noelle.pdg.inst.id !391
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %31 = sext i32 %29 to i64, !noelle.pdg.inst.id !392
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %indvars.iv13 = phi i64 [ %indvars.iv.next14, %209 ], [ 0, %17 ], !noelle.pdg.inst.id !404
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %or.cond.i = or i1 %35, %36, !noelle.pdg.inst.id !397
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %38 = sext i32 %37 to i64, !noelle.pdg.inst.id !399
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %40 = icmp eq i32 %39, 1, !noelle.pdg.inst.id !401
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %41 = sext i32 %27 to i64, !noelle.pdg.inst.id !402
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "cffts2"
Parallelizer: parallelizerLoop:   Loop 90 = "  %75 = icmp slt i64 %indvars.iv10.i4.i, %73, !noelle.pdg.inst.id !477"
Parallelizer: parallelizerLoop:   Nesting level = 4
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %30 = sext i32 %.pre to i64, !noelle.pdg.inst.id !391
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %38 = sext i32 %37 to i64, !noelle.pdg.inst.id !399
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %72 = sext i32 %.02.i.i to i64, !noelle.pdg.inst.id !472
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %73 = sext i32 %.03.i1.i to i64, !noelle.pdg.inst.id !473
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %74 = sext i32 %71 to i64, !noelle.pdg.inst.id !474
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "cffts2"
Parallelizer: parallelizerLoop:   Loop 93 = "  %132 = icmp slt i64 %indvars.iv10.i.i, %130, !noelle.pdg.inst.id !546"
Parallelizer: parallelizerLoop:   Nesting level = 4
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %8 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !362
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %9 = alloca [512 x [18 x %struct.dcomplex]], align 16, !noelle.pdg.inst.id !363
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %30 = sext i32 %.pre to i64, !noelle.pdg.inst.id !391
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %38 = sext i32 %37 to i64, !noelle.pdg.inst.id !399
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %129 = sext i32 %122 to i64, !noelle.pdg.inst.id !541
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %130 = sext i32 %.03.i.i to i64, !noelle.pdg.inst.id !542
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %131 = sext i32 %128 to i64, !noelle.pdg.inst.id !543
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "compute_initial_conditions"
Parallelizer: parallelizerLoop:   Loop 57 = "  %34 = icmp slt i64 %indvars.iv8, %20, !noelle.pdg.inst.id !143"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %20 = sext i32 %19 to i64, !noelle.pdg.inst.id !129
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %24 = sext i32 %23 to i64, !noelle.pdg.inst.id !132
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %25 = sext i32 %22 to i64, !noelle.pdg.inst.id !133
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %26 = zext i32 %19 to i64, !noelle.pdg.inst.id !134
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %29 = sitofp i32 %28 to double, !noelle.pdg.inst.id !137
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %31 = fsub double %17, %30, !noelle.pdg.inst.id !139
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %.promoted = load double, double* %3, align 8, !tbaa !116, !noelle.pdg.inst.id !51
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc ft.B.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/ft.B'
