make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/is.B'
./runEnablers.sh is.B is.B.bc simlarge "-lm -lstdc++ -lpthread " -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/is.B /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/is.B
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/is.B

opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs is.B.bc -o baseline.bc
Running: ./baseline_prof in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/is.B


 NAS Parallel Benchmarks 2.3 OpenMP C version - IS Benchmark

 Size:  33554432  (class B)
 Iterations:   10

   iteration
        1
        2
        3
        4
        5
        6
        7
        8
        9
        10


 IS Benchmark Completed
 Class           =                        B
 Size            =                 33554432
 Iterations      =                       10
 Threads         =                        1
 Time in seconds =                     3.73
 Mop/s total     =                    89.92
 Operation type  =              keys ranked
 Verification    =               SUCCESSFUL
 Version         =           3.0 structured
 Compile date    =              20 Jan 2023

 Compile options:
    CC           = gclang
    CLINK        = gclang
    C_LIB        = (none)
    C_INC        = -I../common
    CFLAGS       = -g -O1 -Xclang -disable-llvm-passes
    CLINKFLAGS   = -lm -mcmodel=large
    RAND         = randlc
--------------------------------------------------------------------------------------
DONE
opt -pgo-test-profile-file=/tmp/tmp.Zy8iGuoQxw -block-freq -pgo-instr-use baseline.bc -o baseline_pre.bc
opt --strip-debug --strip-debug-declare baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.1WClLDeCeh (.ll version is /tmp/tmp.3WI902ISA9)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.amz7nFpcrO (.ll version is /tmp/tmp.9KmTiAKDAB)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.1WClLDeCeh -o /tmp/tmp.amz7nFpcrO
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.1WClLDeCeh -o /tmp/tmp.amz7nFpcrO
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.1WClLDeCeh -o /tmp/tmp.amz7nFpcrO
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.1WClLDeCeh -o /tmp/tmp.amz7nFpcrO
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       randlc
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       create_seq
DeadFunctionEliminator:       full_verify
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       rank
DeadFunctionEliminator:       main
DeadFunctionEliminator:       c_print_results
DeadFunctionEliminator:       elapsed_time
DeadFunctionEliminator:       timer_clear
DeadFunctionEliminator:       timer_start
DeadFunctionEliminator:       timer_stop
DeadFunctionEliminator:       timer_read
DeadFunctionEliminator:       wtime_
DeadFunctionEliminator:       gettimeofday
DeadFunctionEliminator:       puts
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 5" (5.120802e-07%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 11" (4.106128e+01%)
Noelle:  Function "create_seq"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (4.649399e+01%)
Noelle:  Function "rank"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 5" (5.218700e-06%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432" (3.891345e+01%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2097151" (1.910927e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 2097152" (1.910927e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (1.275682e-05%)
Noelle:  Function "randlc"
Noelle:     Loop "  %exitcond13 = icmp eq i32 %.0, 24" (1.596485e-06%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 47" (3.155318e-06%)
Noelle:  Function "full_verify"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432" (3.790271e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (3.537586e+00%)
Noelle:  Function "elapsed_time"
Noelle:  Function "wtime_"
Noelle:  Function "c_print_results"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "main"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 5" (5.120802e-07%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 11" (4.106128e+01%)
Noelle:  Function "create_seq"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (4.649399e+01%)
Noelle:  Function "rank"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 5" (5.218700e-06%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432" (3.891345e+01%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2097151" (1.910927e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 2097152" (1.910927e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (1.275682e-05%)
Noelle:  Function "randlc"
Noelle:     Loop "  %exitcond13 = icmp eq i32 %.0, 24" (1.596485e-06%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 47" (3.155318e-06%)
Noelle:  Function "full_verify"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432" (3.790271e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (3.537586e+00%)
Noelle:  Function "elapsed_time"
Noelle:  Function "wtime_"
Noelle:  Function "c_print_results"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-inline baseline_pre.bc "-noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier"
NOELLE: Inliner: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.wze8JiGwfg (.ll version is /tmp/tmp.gw207bq2Qj)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.tSIuJ4uLhd (.ll version is /tmp/tmp.SzIFpl32Dp)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.wze8JiGwfg -o /tmp/tmp.tSIuJ4uLhd
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.wze8JiGwfg -o /tmp/tmp.tSIuJ4uLhd
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.wze8JiGwfg -o /tmp/tmp.tSIuJ4uLhd
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.wze8JiGwfg -o /tmp/tmp.tSIuJ4uLhd
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.wze8JiGwfg -o /tmp/tmp.tSIuJ4uLhd
Inliner: Start
Inliner:   Number of program instructions = 452
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject:   It requires initialization
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca double, align 8 can be cloned
MemoryCloningAnalysis:     The private copies need to be initialized with the original object.
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject:   It requires initialization
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca double, align 8 can be cloned
MemoryCloningAnalysis:     The private copies need to be initialized with the original object.
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   No remaining calls need to be inlined due to loop-carried data dependences
Inliner:   The code has not been modified
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 5" (5.120802e-07%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 11" (4.106128e+01%)
Noelle:  Function "create_seq"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (4.649399e+01%)
Noelle:  Function "rank"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 5" (5.218700e-06%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432" (3.891345e+01%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2097151" (1.910928e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 2097152" (1.910928e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (1.217697e-05%)
Noelle:  Function "randlc"
Noelle:     Loop "  %exitcond13 = icmp eq i32 %.0, 24" (1.596485e-06%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 47" (3.155318e-06%)
Noelle:  Function "full_verify"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432" (3.790271e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (3.537586e+00%)
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "main"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 5" (5.120802e-07%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 11" (4.106128e+01%)
Noelle:  Function "create_seq"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (4.649399e+01%)
Noelle:  Function "rank"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 5" (5.218700e-06%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432" (3.891345e+01%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2097151" (1.910928e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 2097152" (1.910928e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (1.217697e-05%)
Noelle:  Function "randlc"
Noelle:     Loop "  %exitcond13 = icmp eq i32 %.0, 24" (1.596485e-06%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 47" (3.155318e-06%)
Noelle:  Function "full_verify"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432" (3.790271e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (3.537586e+00%)
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
NOELLE: FixedPoint: Exit
NOELLE: Inliner: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.3lnYk397AP (.ll version is /tmp/tmp.ONF8Yi2Dtn)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.hewZ3me7V0 (.ll version is /tmp/tmp.2CwqoUsJan)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.3lnYk397AP -o /tmp/tmp.hewZ3me7V0
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.3lnYk397AP -o /tmp/tmp.hewZ3me7V0
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.3lnYk397AP -o /tmp/tmp.hewZ3me7V0
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.3lnYk397AP -o /tmp/tmp.hewZ3me7V0
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       randlc
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       create_seq
DeadFunctionEliminator:       full_verify
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       rank
DeadFunctionEliminator:       main
DeadFunctionEliminator:       c_print_results
DeadFunctionEliminator:       elapsed_time
DeadFunctionEliminator:       timer_clear
DeadFunctionEliminator:       timer_start
DeadFunctionEliminator:       timer_stop
DeadFunctionEliminator:       timer_read
DeadFunctionEliminator:       wtime_
DeadFunctionEliminator:       gettimeofday
DeadFunctionEliminator:       puts
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 5" (5.120802e-07%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 11" (4.106128e+01%)
Noelle:  Function "create_seq"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (4.649399e+01%)
Noelle:  Function "rank"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 5" (5.218700e-06%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432" (3.891345e+01%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2097151" (1.910928e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 2097152" (1.910928e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (1.217697e-05%)
Noelle:  Function "randlc"
Noelle:     Loop "  %exitcond13 = icmp eq i32 %.0, 24" (1.596485e-06%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 47" (3.155318e-06%)
Noelle:  Function "full_verify"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432" (3.790271e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (3.537586e+00%)
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "main"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 5" (5.120802e-07%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 11" (4.106128e+01%)
Noelle:  Function "create_seq"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (4.649399e+01%)
Noelle:  Function "rank"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 5" (5.218700e-06%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432" (3.891345e+01%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2097151" (1.910928e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 2097152" (1.910928e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (1.217697e-05%)
Noelle:  Function "randlc"
Noelle:     Loop "  %exitcond13 = icmp eq i32 %.0, 24" (1.596485e-06%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 47" (3.155318e-06%)
Noelle:  Function "full_verify"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432" (3.790271e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (3.537586e+00%)
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-enable baseline_pre.bc baseline_pre.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: Enablers: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.QIoeWll9YJ (.ll version is /tmp/tmp.ajqCwscobj)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.xMq7M3ZciQ (.ll version is /tmp/tmp.Z2tmWiOLlu)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.QIoeWll9YJ -o /tmp/tmp.xMq7M3ZciQ
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.QIoeWll9YJ -o /tmp/tmp.xMq7M3ZciQ
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.QIoeWll9YJ -o /tmp/tmp.xMq7M3ZciQ
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.QIoeWll9YJ -o /tmp/tmp.xMq7M3ZciQ
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.QIoeWll9YJ -o /tmp/tmp.xMq7M3ZciQ
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 5" (5.120802e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 11" (4.106128e+01%)
Noelle:  Function "create_seq"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (4.649399e+01%)
Noelle:  Function "rank"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 5" (5.218700e-06%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432" (3.891345e+01%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2097151" (1.910928e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 2097152" (1.910928e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (1.217697e-05%)
Noelle:  Disable loop "9" as cold code
Noelle:  Function "randlc"
Noelle:     Loop "  %exitcond13 = icmp eq i32 %.0, 24" (1.596485e-06%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 47" (3.155318e-06%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "full_verify"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432" (3.790271e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (3.537586e+00%)
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
EnablersManager:   Try to improve all 9 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "create_seq"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 33554432
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject:   It requires initialization
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca double, align 8 can be cloned
MemoryCloningAnalysis:     The private copies need to be initialized with the original object.
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject:   It requires initialization
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca double, align 8 can be cloned
MemoryCloningAnalysis:     The private copies need to be initialized with the original object.
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %17, label %6, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i32 %.0, 11
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i32 %.0, 11"
LICM:     Invariant = "  %20 = getelementptr [12 x i8], [12 x i8]* @.str.6, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "rank"
EnablersManager:     Entry instruction =   %exitcond15 = icmp eq i64 %indvars.iv13, 33554432
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond15, label %.preheader2.preheader, label %22, !prof !38
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "full_verify"
EnablersManager:     Entry instruction =   %exitcond5 = icmp eq i64 %indvars.iv3, 33554432
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond5, label %.preheader.preheader, label %3, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "full_verify"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 33554432
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %20, label %12, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "rank"
EnablersManager:     Entry instruction =   %exitcond9 = icmp eq i64 %indvars.iv7, 2097152
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 2097152"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond9, label %.preheader.preheader, label %36, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "rank"
EnablersManager:     Entry instruction =   %exitcond12 = icmp eq i64 %indvars.iv10, 2097151
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2097151"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond12, label %.preheader1.preheader, label %30, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "rank"
EnablersManager:     Entry instruction =   %exitcond21 = icmp eq i64 %indvars.iv19, 2097152
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2097152"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond21, label %.preheader4.preheader, label %18, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "rank"
EnablersManager:     Entry instruction =   %exitcond18 = icmp eq i64 %indvars.iv16, 2097152
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2097152"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond18, label %.preheader3.preheader, label %20, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 5" (5.120802e-07%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 11" (4.106128e+01%)
Noelle:  Function "create_seq"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (4.649399e+01%)
Noelle:  Function "rank"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 5" (5.218700e-06%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432" (3.891345e+01%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2097151" (1.910928e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 2097152" (1.910928e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (1.217697e-05%)
Noelle:  Function "randlc"
Noelle:     Loop "  %exitcond13 = icmp eq i32 %.0, 24" (1.596485e-06%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 47" (3.155318e-06%)
Noelle:  Function "full_verify"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432" (3.790271e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (3.537586e+00%)
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "main"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 5" (5.120802e-07%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 11" (4.106128e+01%)
Noelle:  Function "create_seq"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (4.649399e+01%)
Noelle:  Function "rank"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 5" (5.218700e-06%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432" (3.891345e+01%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2097151" (1.910928e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 2097152" (1.910928e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (1.217697e-05%)
Noelle:  Function "randlc"
Noelle:     Loop "  %exitcond13 = icmp eq i32 %.0, 24" (1.596485e-06%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 47" (3.155318e-06%)
Noelle:  Function "full_verify"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432" (3.790271e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (3.537586e+00%)
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
NOELLE: FixedPoint:       There are 0 different instructions and -1 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.xMq7M3ZciQ -o /tmp/tmp.xMq7M3ZciQ
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.xMq7M3ZciQ -o /tmp/tmp.xMq7M3ZciQ
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.QIoeWll9YJ -o /tmp/tmp.xMq7M3ZciQ
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.QIoeWll9YJ -o /tmp/tmp.xMq7M3ZciQ
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.QIoeWll9YJ -o /tmp/tmp.xMq7M3ZciQ
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 5" (5.120802e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 11" (4.106128e+01%)
Noelle:  Function "create_seq"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (4.649399e+01%)
Noelle:  Function "rank"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 5" (5.218700e-06%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432" (3.891345e+01%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2097151" (1.910928e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 2097152" (1.910928e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (1.217697e-05%)
Noelle:  Disable loop "9" as cold code
Noelle:  Function "randlc"
Noelle:     Loop "  %exitcond13 = icmp eq i32 %.0, 24" (1.596485e-06%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 47" (3.155318e-06%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "full_verify"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432" (3.790271e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (3.537586e+00%)
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
EnablersManager:   Try to improve all 9 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "create_seq"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 33554432
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject:   It requires initialization
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca double, align 8 can be cloned
MemoryCloningAnalysis:     The private copies need to be initialized with the original object.
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject:   It requires initialization
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca double, align 8 can be cloned
MemoryCloningAnalysis:     The private copies need to be initialized with the original object.
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %17, label %6, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i32 %.0, 11
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i32 %.0, 11"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %23, label %20, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "rank"
EnablersManager:     Entry instruction =   %exitcond15 = icmp eq i64 %indvars.iv13, 33554432
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond15, label %.preheader2.preheader, label %22, !prof !38
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "full_verify"
EnablersManager:     Entry instruction =   %exitcond5 = icmp eq i64 %indvars.iv3, 33554432
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond5, label %.preheader.preheader, label %3, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "full_verify"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 33554432
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %20, label %12, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "rank"
EnablersManager:     Entry instruction =   %exitcond9 = icmp eq i64 %indvars.iv7, 2097152
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 2097152"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond9, label %.preheader.preheader, label %36, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "rank"
EnablersManager:     Entry instruction =   %exitcond12 = icmp eq i64 %indvars.iv10, 2097151
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2097151"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond12, label %.preheader1.preheader, label %30, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "rank"
EnablersManager:     Entry instruction =   %exitcond21 = icmp eq i64 %indvars.iv19, 2097152
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2097152"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond21, label %.preheader4.preheader, label %18, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "rank"
EnablersManager:     Entry instruction =   %exitcond18 = icmp eq i64 %indvars.iv16, 2097152
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2097152"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond18, label %.preheader3.preheader, label %20, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 5" (5.120802e-07%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 11" (4.106128e+01%)
Noelle:  Function "create_seq"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (4.649399e+01%)
Noelle:  Function "rank"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 5" (5.218700e-06%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432" (3.891345e+01%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2097151" (1.910928e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 2097152" (1.910928e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (1.217697e-05%)
Noelle:  Function "randlc"
Noelle:     Loop "  %exitcond13 = icmp eq i32 %.0, 24" (1.596485e-06%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 47" (3.155318e-06%)
Noelle:  Function "full_verify"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432" (3.790271e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (3.537586e+00%)
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "main"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 5" (5.120802e-07%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 11" (4.106128e+01%)
Noelle:  Function "create_seq"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (4.649399e+01%)
Noelle:  Function "rank"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 5" (5.218700e-06%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2097152" (1.216045e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432" (3.891345e+01%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2097151" (1.910928e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 2097152" (1.910928e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (1.217697e-05%)
Noelle:  Function "randlc"
Noelle:     Loop "  %exitcond13 = icmp eq i32 %.0, 24" (1.596485e-06%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 47" (3.155318e-06%)
Noelle:  Function "full_verify"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432" (3.790271e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432" (3.537586e+00%)
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
NOELLE: FixedPoint: Exit
NOELLE: Enablers: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true baseline_pre.bc -o baseline_pre.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata baseline_pre.bc -o baseline_pre.bc
Running: ./baseline_pre_prof in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/is.B


 NAS Parallel Benchmarks 2.3 OpenMP C version - IS Benchmark

 Size:  33554432  (class B)
 Iterations:   10

   iteration
        1
        2
        3
        4
        5
        6
        7
        8
        9
        10


 IS Benchmark Completed
 Class           =                        B
 Size            =                 33554432
 Iterations      =                       10
 Threads         =                        1
 Time in seconds =                     3.79
 Mop/s total     =                    88.55
 Operation type  =              keys ranked
 Verification    =               SUCCESSFUL
 Version         =           3.0 structured
 Compile date    =              20 Jan 2023

 Compile options:
    CC           = gclang
    CLINK        = gclang
    C_LIB        = (none)
    C_INC        = -I../common
    CFLAGS       = -g -O1 -Xclang -disable-llvm-passes
    CLINKFLAGS   = -lm -mcmodel=large
    RAND         = randlc
--------------------------------------------------------------------------------------
DONE
opt -pgo-test-profile-file=/tmp/tmp.gbzQerxvtL -block-freq -pgo-instr-use baseline_pre.bc -o baseline_with_metadata.bc
noelle-load -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
PDGAnalysis: Construct PDG from Analysis
Embed PDG as metadata
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 5, !noelle.pdg.inst.id !348" (5.120802e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 11, !noelle.pdg.inst.id !368" (4.106128e+01%)
Noelle:  Function "create_seq"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432, !noelle.pdg.inst.id !102" (4.649399e+01%)
Noelle:  Function "rank"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 5, !noelle.pdg.inst.id !185" (5.218700e-06%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2097152, !noelle.pdg.inst.id !197" (1.216045e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2097152, !noelle.pdg.inst.id !206" (1.216045e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432, !noelle.pdg.inst.id !214" (3.891345e+01%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2097151, !noelle.pdg.inst.id !227" (1.910928e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 2097152, !noelle.pdg.inst.id !238" (1.910928e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5, !noelle.pdg.inst.id !248" (1.217697e-05%)
Noelle:  Disable loop "9" as cold code
Noelle:  Function "randlc"
Noelle:     Loop "  %exitcond13 = icmp eq i32 %.0, 24, !noelle.pdg.inst.id !74" (1.596485e-06%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 47, !noelle.pdg.inst.id !88" (3.155318e-06%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "full_verify"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432, !noelle.pdg.inst.id !65" (3.790271e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432, !noelle.pdg.inst.id !82" (3.537586e+00%)
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
Planner:    There are 9 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:    Loop 13 has 1.000000e+01 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:  There are 8 loop nesting trees in the program
Planner:    ID: 4 (1)
Planner:      Function: "full_verify"
Planner:      Loop: "  %exitcond = icmp eq i64 %indvars.iv, 33554432, !noelle.pdg.inst.id !82"
Planner:      Loop nesting level: 1
Planner:      Hotness = 3.537586e+00 %
Planner:      Average instructions per invocation = 4.697620e+08 %
Planner:      Average iterations per invocation = 3.355443e+07 %
Planner:    
Planner:    ID: 3 (1)
Planner:      Function: "full_verify"
Planner:      Loop: "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432, !noelle.pdg.inst.id !65"
Planner:      Loop nesting level: 1
Planner:      Hotness = 3.790271e+00 %
Planner:      Average instructions per invocation = 5.033165e+08 %
Planner:      Average iterations per invocation = 3.355443e+07 %
Planner:    
Planner:    ID: 10 (1)
Planner:      Function: "rank"
Planner:      Loop: "  %exitcond9 = icmp eq i64 %indvars.iv7, 2097152, !noelle.pdg.inst.id !238"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.910928e+00 %
Planner:      Average instructions per invocation = 2.306866e+07 %
Planner:      Average iterations per invocation = 2.097152e+06 %
Planner:    
Planner:    ID: 6 (1)
Planner:      Function: "rank"
Planner:      Loop: "  %exitcond21 = icmp eq i64 %indvars.iv19, 2097152, !noelle.pdg.inst.id !197"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.216045e+00 %
Planner:      Average instructions per invocation = 1.468006e+07 %
Planner:      Average iterations per invocation = 2.097152e+06 %
Planner:    
Planner:    ID: 7 (1)
Planner:      Function: "rank"
Planner:      Loop: "  %exitcond18 = icmp eq i64 %indvars.iv16, 2097152, !noelle.pdg.inst.id !206"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.216045e+00 %
Planner:      Average instructions per invocation = 1.468006e+07 %
Planner:      Average iterations per invocation = 2.097152e+06 %
Planner:    
Planner:    ID: 2 (1)
Planner:      Function: "create_seq"
Planner:      Loop: "  %exitcond = icmp eq i64 %indvars.iv, 33554432, !noelle.pdg.inst.id !102"
Planner:      Loop nesting level: 1
Planner:      Hotness = 4.649399e+01 %
Planner:      Average instructions per invocation = 6.174016e+09 %
Planner:      Average iterations per invocation = 3.355443e+07 %
Planner:    
Planner:    ID: 9 (1)
Planner:      Function: "rank"
Planner:      Loop: "  %exitcond12 = icmp eq i64 %indvars.iv10, 2097151, !noelle.pdg.inst.id !227"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.910928e+00 %
Planner:      Average instructions per invocation = 2.306866e+07 %
Planner:      Average iterations per invocation = 2.097152e+06 %
Planner:    
Planner:    ID: 8 (1)
Planner:      Function: "rank"
Planner:      Loop: "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432, !noelle.pdg.inst.id !214"
Planner:      Loop nesting level: 1
Planner:      Hotness = 3.891345e+01 %
Planner:      Average instructions per invocation = 4.697620e+08 %
Planner:      Average iterations per invocation = 3.355443e+07 %
Planner:    
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 4
Planner: LoopSelector:      Function: "full_verify"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %exitcond = icmp eq i64 %indvars.iv, 33554432, !noelle.pdg.inst.id !82"
Planner: LoopSelector:      Coverage: 3.537586e+00%
Planner: LoopSelector:      Whole-program savings = 3.537586e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 3
Planner: LoopSelector:      Function: "full_verify"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432, !noelle.pdg.inst.id !65"
Planner: LoopSelector:      Coverage: 3.790271e+00%
Planner: LoopSelector:      Whole-program savings = 3.032217e+00%
Planner: LoopSelector:      Loop savings = 8.000000e+01%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16, !noelle.pdg.inst.id !170
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16, !noelle.pdg.inst.id !170
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 10 saves only 1.910927e+00 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16, !noelle.pdg.inst.id !170
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16, !noelle.pdg.inst.id !170
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 6 saves only 1.216045e+00 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16, !noelle.pdg.inst.id !170
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16, !noelle.pdg.inst.id !170
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 7 saves only 1.216045e+00 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !95
ClonableMemoryObject:   It is clonable
ClonableMemoryObject:   It requires initialization
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca double, align 8, !noelle.pdg.inst.id !95 can be cloned
MemoryCloningAnalysis:     The private copies need to be initialized with the original object.
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !94
ClonableMemoryObject:   It is clonable
ClonableMemoryObject:   It requires initialization
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca double, align 8, !noelle.pdg.inst.id !94 can be cloned
MemoryCloningAnalysis:     The private copies need to be initialized with the original object.
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !95
ClonableMemoryObject:   It is clonable
ClonableMemoryObject:   It requires initialization
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca double, align 8, !noelle.pdg.inst.id !95 can be cloned
MemoryCloningAnalysis:     The private copies need to be initialized with the original object.
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !94
ClonableMemoryObject:   It is clonable
ClonableMemoryObject:   It requires initialization
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca double, align 8, !noelle.pdg.inst.id !94 can be cloned
MemoryCloningAnalysis:     The private copies need to be initialized with the original object.
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 2
Planner: LoopSelector:      Function: "create_seq"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %exitcond = icmp eq i64 %indvars.iv, 33554432, !noelle.pdg.inst.id !102"
Planner: LoopSelector:      Coverage: 4.649399e+01%
Planner: LoopSelector:      Whole-program savings = 4.649399e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16, !noelle.pdg.inst.id !170
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16, !noelle.pdg.inst.id !170
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 9 saves only 1.389766e+00 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16, !noelle.pdg.inst.id !170
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16, !noelle.pdg.inst.id !170
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 8
Planner: LoopSelector:      Function: "rank"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432, !noelle.pdg.inst.id !214"
Planner: LoopSelector:      Coverage: 3.891345e+01%
Planner: LoopSelector:      Whole-program savings = 3.057485e+01%
Planner: LoopSelector:      Loop savings = 7.857143e+01%
Planner: LoopSelector: End
Planner:   Maximum time saved = 8.363865e+01% (11106517522)
Planner:   Maximum time saved with DOALL only = 5.003158e+01% (6643778163)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 5, !noelle.pdg.inst.id !350" (5.120802e-07%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 11, !noelle.pdg.inst.id !370" (4.106128e+01%)
Noelle:  Function "create_seq"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432, !noelle.pdg.inst.id !104" (4.649399e+01%)
Noelle:  Function "rank"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 5, !noelle.pdg.inst.id !187" (5.218700e-06%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2097152, !noelle.pdg.inst.id !199" (1.216045e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2097152, !noelle.pdg.inst.id !208" (1.216045e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432, !noelle.pdg.inst.id !216" (3.891345e+01%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2097151, !noelle.pdg.inst.id !230" (1.910928e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 2097152, !noelle.pdg.inst.id !241" (1.910928e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5, !noelle.pdg.inst.id !251" (1.217697e-05%)
Noelle:  Disable loop "9" as cold code
Noelle:  Function "randlc"
Noelle:     Loop "  %exitcond13 = icmp eq i32 %.0, 24, !noelle.pdg.inst.id !76" (1.596485e-06%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 47, !noelle.pdg.inst.id !90" (3.155318e-06%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "full_verify"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432, !noelle.pdg.inst.id !67" (3.790271e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 33554432, !noelle.pdg.inst.id !85" (3.537586e+00%)
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
Parallelizer:    There are 9 loops in the program we are going to consider
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !97
ClonableMemoryObject:   It is clonable
ClonableMemoryObject:   It requires initialization
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca double, align 8, !noelle.pdg.inst.id !97 can be cloned
MemoryCloningAnalysis:     The private copies need to be initialized with the original object.
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !96
ClonableMemoryObject:   It is clonable
ClonableMemoryObject:   It requires initialization
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca double, align 8, !noelle.pdg.inst.id !96 can be cloned
MemoryCloningAnalysis:     The private copies need to be initialized with the original object.
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca double, align 8, !noelle.pdg.inst.id !97
ClonableMemoryObject:   It is clonable
ClonableMemoryObject:   It requires initialization
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca double, align 8, !noelle.pdg.inst.id !97 can be cloned
MemoryCloningAnalysis:     The private copies need to be initialized with the original object.
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8, !noelle.pdg.inst.id !96
ClonableMemoryObject:   It is clonable
ClonableMemoryObject:   It requires initialization
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca double, align 8, !noelle.pdg.inst.id !96 can be cloned
MemoryCloningAnalysis:     The private copies need to be initialized with the original object.
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16, !noelle.pdg.inst.id !172
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2097152 x i32], align 16, !noelle.pdg.inst.id !172
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "full_verify"
Parallelizer: parallelizerLoop:   Loop 4 = "  %exitcond = icmp eq i64 %indvars.iv, 33554432, !noelle.pdg.inst.id !85"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-out 0 =   %.01 = phi i32 [ %spec.select, %12 ], [ 0, %.preheader.preheader ], !noelle.pdg.inst.id !84
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "full_verify"
Parallelizer: parallelizerLoop:   Loop 3 = "  %exitcond5 = icmp eq i64 %indvars.iv3, 33554432, !noelle.pdg.inst.id !67"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %1 = load i32*, i32** @key_buff_ptr_global, align 8, !tbaa !61, !noelle.pdg.inst.id !33
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "create_seq"
Parallelizer: parallelizerLoop:   Loop 2 = "  %exitcond = icmp eq i64 %indvars.iv, 33554432, !noelle.pdg.inst.id !104"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %3 = alloca double, align 8, !noelle.pdg.inst.id !96
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %4 = alloca double, align 8, !noelle.pdg.inst.id !97
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "rank"
Parallelizer: parallelizerLoop:   Loop 8 = "  %exitcond15 = icmp eq i64 %indvars.iv13, 33554432, !noelle.pdg.inst.id !216"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %2 = alloca [2097152 x i32], align 16, !noelle.pdg.inst.id !172
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc is.B.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/is.B'
