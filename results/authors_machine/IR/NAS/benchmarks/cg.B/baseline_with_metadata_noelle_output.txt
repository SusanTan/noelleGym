make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/cg.B'
./runEnablers.sh cg.B cg.B.bc simlarge "-lm -lstdc++ -lpthread " -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/cg.B /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/cg.B
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/cg.B

opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs cg.B.bc -o baseline.bc
Running: ./baseline_prof in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/cg.B


 NAS Parallel Benchmarks 3.0 structured OpenMP C version - CG Benchmark
 Size:      75000
 Iterations:    75
   iteration           ||r||                 zeta
        1       3.03548598614517e-13 5.9999475157875e+01
        2       1.11864354882675e-15 2.1762784614254e+01
        3       1.13122585119279e-15 2.2287661704322e+01
        4       1.12221605852839e-15 2.2523073818835e+01
        5       1.12442341772191e-15 2.2627539065389e+01
        6       1.13304348193841e-15 2.2674025918953e+01
        7       1.13342596230503e-15 2.2694905682625e+01
        8       1.13748393136469e-15 2.2704402316687e+01
        9       1.14248774430387e-15 2.2708783434562e+01
       10       1.13294751905663e-15 2.2710835139718e+01
       11       1.13373640934822e-15 2.2711810712134e+01
       12       1.13799283088636e-15 2.2712281624097e+01
       13       1.13694536817940e-15 2.2712512266324e+01
       14       1.14303903370149e-15 2.2712626800759e+01
       15       1.14003188863999e-15 2.2712684416182e+01
       16       1.13520913311971e-15 2.2712713746175e+01
       17       1.13509234391242e-15 2.2712728840200e+01
       18       1.14753788645647e-15 2.2712736684830e+01
       19       1.13667779290275e-15 2.2712740798122e+01
       20       1.12742433125044e-15 2.2712742972136e+01
       21       1.13539307928559e-15 2.2712744129403e+01
       22       1.12996858002779e-15 2.2712744749390e+01
       23       1.12964050411701e-15 2.2712745083453e+01
       24       1.13819755978870e-15 2.2712745264388e+01
       25       1.13281273016627e-15 2.2712745362845e+01
       26       1.13673326589385e-15 2.2712745416652e+01
       27       1.12833721786049e-15 2.2712745446170e+01
       28       1.13847341588629e-15 2.2712745462421e+01
       29       1.13940119897194e-15 2.2712745471397e+01
       30       1.13542940676399e-15 2.2712745476370e+01
       31       1.14129880291034e-15 2.2712745479134e+01
       32       1.13580884077166e-15 2.2712745480674e+01
       33       1.12632661525154e-15 2.2712745481532e+01
       34       1.12751830802856e-15 2.2712745482013e+01
       35       1.13283069514087e-15 2.2712745482284e+01
       36       1.13578803148906e-15 2.2712745482435e+01
       37       1.13326877904882e-15 2.2712745482520e+01
       38       1.13241088181371e-15 2.2712745482568e+01
       39       1.13650655237769e-15 2.2712745482597e+01
       40       1.13611853613215e-15 2.2712745482612e+01
       41       1.12765198207156e-15 2.2712745482620e+01
       42       1.13171834248783e-15 2.2712745482625e+01
       43       1.12360074817697e-15 2.2712745482628e+01
       44       1.13040655646838e-15 2.2712745482630e+01
       45       1.12877913564305e-15 2.2712745482631e+01
       46       1.12970280001327e-15 2.2712745482631e+01
       47       1.12812368696656e-15 2.2712745482631e+01
       48       1.12772540755482e-15 2.2712745482632e+01
       49       1.13203272898469e-15 2.2712745482631e+01
       50       1.12876552855629e-15 2.2712745482632e+01
       51       1.12305034223996e-15 2.2712745482632e+01
       52       1.12920890949443e-15 2.2712745482631e+01
       53       1.13667283964080e-15 2.2712745482631e+01
       54       1.12226184669682e-15 2.2712745482631e+01
       55       1.12781932765157e-15 2.2712745482631e+01
       56       1.12446248960298e-15 2.2712745482632e+01
       57       1.12645088726848e-15 2.2712745482632e+01
       58       1.12555837747598e-15 2.2712745482631e+01
       59       1.12271291467232e-15 2.2712745482631e+01
       60       1.11894808001733e-15 2.2712745482632e+01
       61       1.11632414726784e-15 2.2712745482631e+01
       62       1.12788394242185e-15 2.2712745482632e+01
       63       1.12268041330082e-15 2.2712745482631e+01
       64       1.12224566013613e-15 2.2712745482632e+01
       65       1.12708795243098e-15 2.2712745482631e+01
       66       1.13037713900055e-15 2.2712745482632e+01
       67       1.12401013572871e-15 2.2712745482632e+01
       68       1.12402788843906e-15 2.2712745482632e+01
       69       1.12077480677183e-15 2.2712745482632e+01
       70       1.11787551875706e-15 2.2712745482633e+01
       71       1.11959352456491e-15 2.2712745482631e+01
       72       1.12607151263365e-15 2.2712745482632e+01
       73       1.12816779649967e-15 2.2712745482632e+01
       74       1.11623400348146e-15 2.2712745482632e+01
       75       1.12087092039207e-15 2.2712745482631e+01
 Benchmark completed
 VERIFICATION SUCCESSFUL
 Zeta is      2.271274548263e+01
 Error is     7.105427357601e-15


 CG Benchmark Completed
 Class           =                        B
 Size            =                    75000
 Iterations      =                       75
 Threads         =                        1
 Time in seconds =                   165.51
 Mop/s total     =                   330.56
 Operation type  =           floating point
 Verification    =               SUCCESSFUL
 Version         =           3.0 structured
 Compile date    =              20 Jan 2023

 Compile options:
    CC           = gclang
    CLINK        = gclang
    C_LIB        = (none)
    C_INC        = -I../common
    CFLAGS       = -g -O1 -Xclang -disable-llvm-passes
    CLINKFLAGS   = -lm -mcmodel=large
    RAND         = randdp
--------------------------------------------------------------------------------------
DONE
opt -pgo-test-profile-file=/tmp/tmp.p2PFk3FD06 -block-freq -pgo-instr-use baseline.bc -o baseline_pre.bc
opt --strip-debug --strip-debug-declare baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.06mrlQxgZ1 (.ll version is /tmp/tmp.Et12PTDEG6)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.c9gA9fNhID (.ll version is /tmp/tmp.o0CRoimnCz)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.06mrlQxgZ1 -o /tmp/tmp.c9gA9fNhID
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.06mrlQxgZ1 -o /tmp/tmp.c9gA9fNhID
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.06mrlQxgZ1 -o /tmp/tmp.c9gA9fNhID
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.06mrlQxgZ1 -o /tmp/tmp.c9gA9fNhID
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       main
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       makea
DeadFunctionEliminator:       puts
DeadFunctionEliminator:       conj_grad
DeadFunctionEliminator:       sqrt
DeadFunctionEliminator:       llvm.fabs.f64
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       pow
DeadFunctionEliminator:       sprnvc
DeadFunctionEliminator:       vecset
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       sparse
DeadFunctionEliminator:       icnvrt
DeadFunctionEliminator:       c_print_results
DeadFunctionEliminator:       randlc
DeadFunctionEliminator:       elapsed_time
DeadFunctionEliminator:       timer_clear
DeadFunctionEliminator:       timer_start
DeadFunctionEliminator:       timer_stop
DeadFunctionEliminator:       timer_read
DeadFunctionEliminator:       wtime_
DeadFunctionEliminator:       gettimeofday
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:     Loop "  %31 = icmp sgt i64 %indvars.iv56, %28" (3.304367e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv54, %38" (3.282849e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255277e-04%)
Noelle:     Loop "  %55 = icmp sgt i64 %indvars.iv49, %53" (2.331130e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308787e+00%)
Noelle:     Loop "  %76 = icmp sgt i64 %indvars.iv44, %74" (1.793181e-04%)
Noelle:     Loop "  %90 = icmp sgt i64 %indvars.iv46, %88" (1.793179e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255277e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.816577e+01%)
Noelle:     Loop "  %117 = icmp sgt i64 %indvars.iv, %115" (2.017335e-02%)
Noelle:     Loop "  %144 = icmp sgt i64 %indvars.iv39, %142" (1.344889e-02%)
Noelle:  Function "conj_grad"
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (2.453158e-02%)
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv35, %26" (1.362822e-02%)
Noelle:     Loop "  %39 = select i1 %.b16.pre, i32 75000, i32 0, !prof !40" (9.562249e+01%)
Noelle:     Loop "  %46 = icmp sgt i64 %indvars.iv27, %43" (9.405523e+01%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv25, %53" (9.354418e+01%)
Noelle:     Loop "  %69 = icmp sgt i64 %indvars.iv29, %35" (4.088466e-01%)
Noelle:     Loop "  %80 = icmp sgt i64 %indvars.iv31, %36" (7.495505e-01%)
Noelle:     Loop "  %99 = icmp sgt i64 %indvars.iv33, %37" (4.088461e-01%)
Noelle:     Loop "  %112 = icmp sgt i64 %indvars.iv23, %44" (3.762209e+00%)
Noelle:     Loop "  %122 = icmp slt i64 %indvars.iv21, %120" (3.741767e+00%)
Noelle:     Loop "  %136 = icmp sgt i64 %indvars.iv, %113" (1.771667e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv41, %23" (1.434544e-04%)
Noelle:     Loop "  %34 = icmp sgt i32 %.03, %0" (1.435824e-01%)
Noelle:     Loop "  %45 = icmp sgt i64 %indvars.iv39, %43" (1.003502e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (9.528987e-02%)
Noelle:     Loop "  %85 = icmp sgt i32 %.16, %7" (3.919949e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614227e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958527e-02%)
Noelle:     Loop "  %42 = icmp sgt i64 %indvars.iv35, %40" (2.152301e-04%)
Noelle:     Loop "  %53 = icmp sgt i64 %indvars.iv33, %44" (2.500112e-02%)
Noelle:     Loop "  %63 = icmp slt i64 %indvars.iv31, %61" (2.478589e-02%)
Noelle:     Loop "  %67 = icmp sgt i64 %indvars.iv29, %54" (8.854513e-02%)
Noelle:     Loop "  %90 = icmp sgt i64 %indvars.iv27, 0" (1.793585e-04%)
Noelle:     Loop "  %100 = icmp sgt i64 %indvars.iv25, %98" (1.614227e-04%)
Noelle:     Loop "  %107 = icmp sgt i64 %indvars.iv23, %105" (1.839181e-01%)
Noelle:     Loop "  %112 = load i32, i32* %109, align 4, !tbaa !34" (1.048289e-01%)
Noelle:     Loop "  %136 = icmp sgt i64 %indvars.iv21, %134" (7.874849e-02%)
Noelle:  Function "sprnvc"
Noelle:     Loop "  %8 = shl nsw i32 %.04, 1" (1.506446e-03%)
Noelle:     Loop "  %11 = icmp slt i32 %.01.ph, 13" (3.451447e-02%)
Noelle:     Loop "  %14 = load double, double* @amult, align 8, !tbaa !35" (2.791443e-02%)
Noelle:     Loop "  %35 = icmp sgt i64 %indvars.iv, %12" (2.385206e-03%)
Noelle:  Function "randlc"
Noelle:  Function "vecset"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv, %8" (2.869193e-03%)
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "wtime_"
Noelle:  Function "c_print_results"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_read"
Noelle:  Function "timer_clear"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %31 = icmp sgt i64 %indvars.iv56, %28" (3.304367e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv54, %38" (3.282849e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255277e-04%)
Noelle:     Loop "  %55 = icmp sgt i64 %indvars.iv49, %53" (2.331130e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308787e+00%)
Noelle:     Loop "  %76 = icmp sgt i64 %indvars.iv44, %74" (1.793181e-04%)
Noelle:     Loop "  %90 = icmp sgt i64 %indvars.iv46, %88" (1.793179e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255277e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.816577e+01%)
Noelle:     Loop "  %117 = icmp sgt i64 %indvars.iv, %115" (2.017335e-02%)
Noelle:     Loop "  %144 = icmp sgt i64 %indvars.iv39, %142" (1.344889e-02%)
Noelle:  Function "conj_grad"
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (2.453158e-02%)
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv35, %26" (1.362822e-02%)
Noelle:     Loop "  %39 = select i1 %.b16.pre, i32 75000, i32 0, !prof !40" (9.562249e+01%)
Noelle:     Loop "  %46 = icmp sgt i64 %indvars.iv27, %43" (9.405523e+01%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv25, %53" (9.354418e+01%)
Noelle:     Loop "  %69 = icmp sgt i64 %indvars.iv29, %35" (4.088466e-01%)
Noelle:     Loop "  %80 = icmp sgt i64 %indvars.iv31, %36" (7.495505e-01%)
Noelle:     Loop "  %99 = icmp sgt i64 %indvars.iv33, %37" (4.088461e-01%)
Noelle:     Loop "  %112 = icmp sgt i64 %indvars.iv23, %44" (3.762209e+00%)
Noelle:     Loop "  %122 = icmp slt i64 %indvars.iv21, %120" (3.741767e+00%)
Noelle:     Loop "  %136 = icmp sgt i64 %indvars.iv, %113" (1.771667e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv41, %23" (1.434544e-04%)
Noelle:     Loop "  %34 = icmp sgt i32 %.03, %0" (1.435824e-01%)
Noelle:     Loop "  %45 = icmp sgt i64 %indvars.iv39, %43" (1.003502e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (9.528987e-02%)
Noelle:     Loop "  %85 = icmp sgt i32 %.16, %7" (3.919949e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614227e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958527e-02%)
Noelle:     Loop "  %42 = icmp sgt i64 %indvars.iv35, %40" (2.152301e-04%)
Noelle:     Loop "  %53 = icmp sgt i64 %indvars.iv33, %44" (2.500112e-02%)
Noelle:     Loop "  %63 = icmp slt i64 %indvars.iv31, %61" (2.478589e-02%)
Noelle:     Loop "  %67 = icmp sgt i64 %indvars.iv29, %54" (8.854513e-02%)
Noelle:     Loop "  %90 = icmp sgt i64 %indvars.iv27, 0" (1.793585e-04%)
Noelle:     Loop "  %100 = icmp sgt i64 %indvars.iv25, %98" (1.614227e-04%)
Noelle:     Loop "  %107 = icmp sgt i64 %indvars.iv23, %105" (1.839181e-01%)
Noelle:     Loop "  %112 = load i32, i32* %109, align 4, !tbaa !34" (1.048289e-01%)
Noelle:     Loop "  %136 = icmp sgt i64 %indvars.iv21, %134" (7.874849e-02%)
Noelle:  Function "sprnvc"
Noelle:     Loop "  %8 = shl nsw i32 %.04, 1" (1.506446e-03%)
Noelle:     Loop "  %11 = icmp slt i32 %.01.ph, 13" (3.451447e-02%)
Noelle:     Loop "  %14 = load double, double* @amult, align 8, !tbaa !35" (2.791443e-02%)
Noelle:     Loop "  %35 = icmp sgt i64 %indvars.iv, %12" (2.385206e-03%)
Noelle:  Function "randlc"
Noelle:  Function "vecset"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv, %8" (2.869193e-03%)
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "wtime_"
Noelle:  Function "c_print_results"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_read"
Noelle:  Function "timer_clear"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-inline baseline_pre.bc "-noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier"
NOELLE: Inliner: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.fkajgt7j6S (.ll version is /tmp/tmp.wRXtk9zkyf)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.5Wh0sT4CYZ (.ll version is /tmp/tmp.J9rKuN80Az)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
Inliner: Start
Inliner:   Number of program instructions = 1081
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %145 = load i32, i32* %144, align 4, !tbaa !34
DOALL:     	  %146 = add nsw i32 %.3.lcssa, %145
DOALL:     	  store i32 %146, i32* %103, align 4, !tbaa !34
DOALL:     External nodes: 5
DOALL:     	  br i1 %101, label %147, label %102, !prof !33
DOALL:     	  %103 = getelementptr inbounds [75002 x i32], [75002 x i32]* @rowstr, i64 0, i64 %indvars.iv.next24
DOALL:     	  %106 = load i32, i32* %103, align 4, !tbaa !34
DOALL:     	  %.3.lcssa = phi i32 [ %.3, %128 ]
DOALL:     	  %144 = getelementptr [75002 x i32], [75002 x i32]* @rowstr, i64 0, i64 1
DOALL:     Edges: 10
DOALL:     Loop-carried data dependences
DOALL:         store i32 %146, i32* %103, align 4, !tbaa !34 --->   %145 = load i32, i32* %144, align 4, !tbaa !34 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 46
DOALL:     	  %.25 = phi i32 [ %.3.lcssa, %143 ], [ 0, %98 ]
DOALL:     	  %.0 = phi i32 [ %.1, %._crit_edge ], [ 0, %102 ]
DOALL:     	  %111 = load i32, i32* %110, align 4, !tbaa !34
DOALL:     	  %112 = sext i32 %111 to i64
DOALL:     	  %113 = getelementptr inbounds [75002 x double], [75002 x double]* @v, i64 0, i64 %112
DOALL:     	  %114 = load double, double* %113, align 8, !tbaa !40
DOALL:     	  %116 = load double, double* %115, align 8, !tbaa !40
DOALL:     	  %117 = fadd double %114, %116
DOALL:     	  store double %117, double* %113, align 8, !tbaa !40
DOALL:     	  %118 = getelementptr inbounds [150002 x i32], [150002 x i32]* @iv, i64 0, i64 %112
DOALL:     	  %119 = load i32, i32* %118, align 4, !tbaa !34
DOALL:     	  %120 = icmp eq i32 %119, 0
DOALL:     	  %121 = fcmp une double %117, 0.000000e+00
DOALL:     	  %or.cond = and i1 %120, %121
DOALL:     	  br i1 %or.cond, label %122, label %.._crit_edge_crit_edge, !prof !44
DOALL:     	  store i32 1, i32* %118, align 4, !tbaa !34
DOALL:     	  %123 = add nsw i32 %.0, 1
DOALL:     	  %124 = sext i32 %123 to i64
DOALL:     	  %125 = getelementptr inbounds i32, i32* %11, i64 %124
DOALL:     	  store i32 %111, i32* %125, align 4, !tbaa !34
DOALL:     	  %.1 = phi i32 [ %123, %122 ], [ %.0, %.._crit_edge_crit_edge ]
DOALL:     	  %.0.lcssa = phi i32 [ %.0, %105 ]
DOALL:     	  %127 = sext i32 %.0.lcssa to i64
DOALL:     	  %indvars.iv21 = phi i64 [ %indvars.iv.next22, %._crit_edge41 ], [ 1, %126 ]
DOALL:     	  %.3 = phi i32 [ %.4, %._crit_edge41 ], [ %.25, %126 ]
DOALL:     	  %129 = icmp sgt i64 %indvars.iv21, %127
DOALL:     	  br i1 %129, label %143, label %130, !prof !45
DOALL:     	  %131 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv21
DOALL:     	  %132 = load i32, i32* %131, align 4, !tbaa !34
DOALL:     	  %133 = sext i32 %132 to i64
DOALL:     	  %134 = getelementptr inbounds [150002 x i32], [150002 x i32]* @iv, i64 0, i64 %133
DOALL:     	  store i32 0, i32* %134, align 4, !tbaa !34
DOALL:     	  %135 = getelementptr inbounds [75002 x double], [75002 x double]* @v, i64 0, i64 %133
DOALL:     	  %136 = load double, double* %135, align 8, !tbaa !40
DOALL:     	  store double 0.000000e+00, double* %135, align 8, !tbaa !40
DOALL:     	  %137 = fcmp une double %136, 0.000000e+00
DOALL:     	  br i1 %137, label %138, label %.._crit_edge41_crit_edge, !prof !46
DOALL:     	  %139 = add nsw i32 %.3, 1
DOALL:     	  %140 = sext i32 %139 to i64
DOALL:     	  %141 = getelementptr inbounds [15825001 x double], [15825001 x double]* @a, i64 0, i64 %140
DOALL:     	  store double %136, double* %141, align 8, !tbaa !40
DOALL:     	  %142 = getelementptr inbounds [15825001 x i32], [15825001 x i32]* @colidx, i64 0, i64 %140
DOALL:     	  store i32 %132, i32* %142, align 4, !tbaa !34
DOALL:     	  %.4 = phi i32 [ %139, %138 ], [ %.3, %.._crit_edge41_crit_edge ]
DOALL:     	  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1
DOALL:     	  %.3.lcssa = phi i32 [ %.3, %128 ]
DOALL:     External nodes: 10
DOALL:     	  br i1 %101, label %147, label %102, !prof !33
DOALL:     	  br i1 %108, label %109, label %126, !prof !43
DOALL:     	  %110 = getelementptr inbounds [15825001 x i32], [15825001 x i32]* @colidx, i64 0, i64 %indvars.iv
DOALL:     	  %115 = getelementptr inbounds [15825001 x double], [15825001 x double]* @a, i64 0, i64 %indvars.iv
DOALL:     	  br label %._crit_edge
DOALL:     	  br label %._crit_edge
DOALL:     	  br label %._crit_edge41
DOALL:     	  br label %._crit_edge41
DOALL:     	  br label %128
DOALL:     	  %146 = add nsw i32 %.3.lcssa, %145
DOALL:     Edges: 153
DOALL:     Loop-carried data dependences
DOALL:         store double %136, double* %141, align 8, !tbaa !40 --->   store double %136, double* %141, align 8, !tbaa !40 via memory
DOALL:         store double %136, double* %141, align 8, !tbaa !40 --->   %116 = load double, double* %115, align 8, !tbaa !40 via memory
DOALL:         store i32 %132, i32* %142, align 4, !tbaa !34 --->   store i32 %132, i32* %142, align 4, !tbaa !34 via memory
DOALL:         store i32 %132, i32* %142, align 4, !tbaa !34 --->   %111 = load i32, i32* %110, align 4, !tbaa !34 via memory
DOALL:         %.3.lcssa = phi i32 [ %.3, %128 ] --->   %.25 = phi i32 [ %.3.lcssa, %143 ], [ 0, %98 ] via variable
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   %119 = load i32, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   %132 = load i32, i32* %131, align 4, !tbaa !34 via memory
DOALL:         %119 = load i32, i32* %118, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         %119 = load i32, i32* %118, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         %119 = load i32, i32* %118, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   %132 = load i32, i32* %131, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   %119 = load i32, i32* %118, align 4, !tbaa !34 via memory
DOALL:         %111 = load i32, i32* %110, align 4, !tbaa !34 --->   store i32 %132, i32* %142, align 4, !tbaa !34 via memory
DOALL:         %116 = load double, double* %115, align 8, !tbaa !40 --->   store double %136, double* %141, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   store double 0.000000e+00, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   %136 = load double, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   %114 = load double, double* %113, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   store double %117, double* %113, align 8, !tbaa !40 via memory
DOALL:         %132 = load i32, i32* %131, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         %132 = load i32, i32* %131, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         %132 = load i32, i32* %131, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   %132 = load i32, i32* %131, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   %119 = load i32, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   store double 0.000000e+00, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   %136 = load double, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   %114 = load double, double* %113, align 8, !tbaa !40 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   store double %117, double* %113, align 8, !tbaa !40 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %.06 = phi i32 [ %.lcssa, %143 ], [ 1, %98 ]
DOALL:     	  %104 = sext i32 %.06 to i64
DOALL:     	  %indvars.iv = phi i64 [ %indvars.iv.next, %._crit_edge ], [ %104, %102 ]
DOALL:     	  %106 = load i32, i32* %103, align 4, !tbaa !34
DOALL:     	  %107 = sext i32 %106 to i64
DOALL:     	  %108 = icmp slt i64 %indvars.iv, %107
DOALL:     	  br i1 %108, label %109, label %126, !prof !43
DOALL:     	  %indvars.iv.next = add nsw i64 %indvars.iv, 1
DOALL:     	  %.lcssa = phi i32 [ %106, %105 ]
DOALL:     External nodes: 21
DOALL:     	  br i1 %101, label %147, label %102, !prof !33
DOALL:     	  %103 = getelementptr inbounds [75002 x i32], [75002 x i32]* @rowstr, i64 0, i64 %indvars.iv.next24
DOALL:     	  %.0 = phi i32 [ %.1, %._crit_edge ], [ 0, %102 ]
DOALL:     	  %110 = getelementptr inbounds [15825001 x i32], [15825001 x i32]* @colidx, i64 0, i64 %indvars.iv
DOALL:     	  %111 = load i32, i32* %110, align 4, !tbaa !34
DOALL:     	  %112 = sext i32 %111 to i64
DOALL:     	  %113 = getelementptr inbounds [75002 x double], [75002 x double]* @v, i64 0, i64 %112
DOALL:     	  %114 = load double, double* %113, align 8, !tbaa !40
DOALL:     	  %115 = getelementptr inbounds [15825001 x double], [15825001 x double]* @a, i64 0, i64 %indvars.iv
DOALL:     	  %116 = load double, double* %115, align 8, !tbaa !40
DOALL:     	  %117 = fadd double %114, %116
DOALL:     	  store double %117, double* %113, align 8, !tbaa !40
DOALL:     	  %118 = getelementptr inbounds [150002 x i32], [150002 x i32]* @iv, i64 0, i64 %112
DOALL:     	  %119 = load i32, i32* %118, align 4, !tbaa !34
DOALL:     	  %120 = icmp eq i32 %119, 0
DOALL:     	  %121 = fcmp une double %117, 0.000000e+00
DOALL:     	  %or.cond = and i1 %120, %121
DOALL:     	  br i1 %or.cond, label %122, label %.._crit_edge_crit_edge, !prof !44
DOALL:     	  %.1 = phi i32 [ %123, %122 ], [ %.0, %.._crit_edge_crit_edge ]
DOALL:     	  br label %105
DOALL:     	  store i32 %146, i32* %103, align 4, !tbaa !34
DOALL:     Edges: 46
DOALL:     Loop-carried data dependences
DOALL:         %.lcssa = phi i32 [ %106, %105 ] --->   %.06 = phi i32 [ %.lcssa, %143 ], [ 1, %98 ] via variable
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 30
DOALL:     	  %.15 = phi double [ %.04.lcssa, %33 ], [ %.26.lcssa, %100 ]
DOALL:     	  %.07 = phi double [ %59, %50 ], [ 0.000000e+00, %41 ]
DOALL:     	  %57 = load double, double* %56, align 8, !tbaa !35
DOALL:     	  %58 = fmul double %52, %57
DOALL:     	  %59 = fadd double %.07, %58
DOALL:     	  %.07.lcssa = phi double [ %.07, %48 ]
DOALL:     	  store double %.07.lcssa, double* %61, align 8, !tbaa !35
DOALL:     	  %.09 = phi double [ %69, %63 ], [ 0.000000e+00, %.preheader14.preheader ]
DOALL:     	  %65 = load double, double* %64, align 8, !tbaa !35
DOALL:     	  %67 = load double, double* %66, align 8, !tbaa !35
DOALL:     	  %68 = fmul double %65, %67
DOALL:     	  %69 = fadd double %.09, %68
DOALL:     	  %.09.lcssa = phi double [ %.09, %.preheader14 ]
DOALL:     	  %71 = fdiv double %.15, %.09.lcssa
DOALL:     	  %.26 = phi double [ %88, %74 ], [ 0.000000e+00, %70 ]
DOALL:     	  %78 = load double, double* %77, align 8, !tbaa !35
DOALL:     	  %82 = load double, double* %81, align 8, !tbaa !35
DOALL:     	  %84 = load double, double* %83, align 8, !tbaa !35
DOALL:     	  %85 = fmul double %71, %84
DOALL:     	  %86 = fsub double %82, %85
DOALL:     	  store double %86, double* %81, align 8, !tbaa !35
DOALL:     	  %87 = fmul double %86, %86
DOALL:     	  %88 = fadd double %.26, %87
DOALL:     	  %.26.lcssa = phi double [ %.26, %72 ]
DOALL:     	  %90 = fdiv double %.26.lcssa, %.15
DOALL:     	  %95 = load double, double* %94, align 8, !tbaa !35
DOALL:     	  %97 = load double, double* %96, align 8, !tbaa !35
DOALL:     	  %98 = fmul double %90, %97
DOALL:     	  %99 = fadd double %95, %98
DOALL:     	  store double %99, double* %96, align 8, !tbaa !35
DOALL:     External nodes: 17
DOALL:     	  br i1 %exitcond, label %.preheader13, label %.preheader15.preheader, !prof !42
DOALL:     	  br i1 %40, label %.preheader14.preheader, label %41, !prof !43
DOALL:     	  br i1 %49, label %50, label %60, !prof !44
DOALL:     	  %52 = load double, double* %51, align 8, !tbaa !35
DOALL:     	  %56 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %55
DOALL:     	  %61 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv27
DOALL:     	  br i1 %62, label %70, label %63, !prof !43
DOALL:     	  %64 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv29
DOALL:     	  %66 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv29
DOALL:     	  br i1 %73, label %89, label %74, !prof !43
DOALL:     	  %77 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv31
DOALL:     	  %79 = fmul double %71, %78
DOALL:     	  %81 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv31
DOALL:     	  %83 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv31
DOALL:     	  br i1 %92, label %100, label %93, !prof !43
DOALL:     	  %94 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv33
DOALL:     	  %96 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv33
DOALL:     Edges: 99
DOALL:     Loop-carried data dependences
DOALL:         %65 = load double, double* %64, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         %67 = load double, double* %66, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL:         %78 = load double, double* %77, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         %84 = load double, double* %83, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   %95 = load double, double* %94, align 8, !tbaa !35 via memory
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   %82 = load double, double* %81, align 8, !tbaa !35 via memory
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   store double %86, double* %81, align 8, !tbaa !35 via memory
DOALL:         %.26.lcssa = phi double [ %.26, %72 ] --->   %.15 = phi double [ %.04.lcssa, %33 ], [ %.26.lcssa, %100 ] via variable
DOALL:         %95 = load double, double* %94, align 8, !tbaa !35 --->   store double %86, double* %81, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %78 = load double, double* %77, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %57 = load double, double* %56, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %97 = load double, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %65 = load double, double* %64, align 8, !tbaa !35 via memory
DOALL:         %57 = load double, double* %56, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %.07.lcssa, double* %61, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca i32, align 4
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 9
DOALL:     Live-out ID = 10
DOALL:     Live-out ID = 11
Inliner:   Inlining in: makea (148 instructions. The inlining will add 31 instructions),   call fastcc void @vecset(i32 %0, double* %37, i32* %38, i32* nonnull %18, i32 %.03, double 5.000000e-01)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %30 = icmp sgt i64 %indvars.iv56, %28" (3.304376e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv54, %37" (3.282858e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255281e-04%)
Noelle:     Loop "  %53 = icmp sgt i64 %indvars.iv49, %51" (2.331136e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308791e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv44, %71" (1.793186e-04%)
Noelle:     Loop "  %87 = icmp sgt i64 %indvars.iv46, %85" (1.793184e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255281e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.816603e+01%)
Noelle:     Loop "  %113 = icmp sgt i64 %indvars.iv, %111" (2.017341e-02%)
Noelle:     Loop "  %139 = icmp sgt i64 %indvars.iv39, %137" (1.344893e-02%)
Noelle:  Function "conj_grad"
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (2.453165e-02%)
Noelle:     Loop "  %27 = icmp sgt i64 %indvars.iv35, %25" (1.362826e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 26" (9.562274e+01%)
Noelle:     Loop "  %40 = icmp sgt i64 %indvars.iv27, %37" (9.405549e+01%)
Noelle:     Loop "  %49 = icmp slt i64 %indvars.iv25, %47" (9.354443e+01%)
Noelle:     Loop "  %62 = icmp sgt i64 %indvars.iv29, %25" (4.088477e-01%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv31, %25" (7.495525e-01%)
Noelle:     Loop "  %92 = icmp sgt i64 %indvars.iv33, %25" (4.088472e-01%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv23, %37" (3.762219e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv21, %110" (3.741777e+00%)
Noelle:     Loop "  %125 = icmp sgt i64 %indvars.iv, %25" (1.771671e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %25 = icmp sgt i64 %indvars.iv41, %23" (1.434548e-04%)
Noelle:     Loop "  %32 = icmp sgt i32 %.03, %0" (1.433511e-01%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv39, %41" (1.001011e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (9.529013e-02%)
Noelle:     Loop "  %80 = icmp sgt i32 %.16, %7" (3.919960e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614232e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958541e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793592e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.500118e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478595e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.854537e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793590e-04%)
Noelle:     Loop "  %94 = icmp sgt i64 %indvars.iv25, %14" (1.614232e-04%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (1.839186e-01%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (1.048292e-01%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (7.874870e-02%)
Noelle:  Function "sprnvc"
Noelle:     Loop "  %7 = shl nsw i32 %.04, 1" (1.506451e-03%)
Noelle:     Loop "  %10 = icmp slt i32 %.01.ph, 13" (3.451457e-02%)
Noelle:     Loop "  %12 = load double, double* @amult, align 8, !tbaa !35" (2.791451e-02%)
Noelle:     Loop "  %32 = icmp sgt i64 %indvars.iv, %11" (2.385213e-03%)
Noelle:  Function "randlc"
Noelle:  Function "vecset"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv, %8" (2.869201e-03%)
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_read"
Noelle:  Function "timer_clear"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %30 = icmp sgt i64 %indvars.iv56, %28" (3.304275e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv54, %37" (3.282758e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255242e-04%)
Noelle:     Loop "  %53 = icmp sgt i64 %indvars.iv49, %51" (2.331065e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308751e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv44, %71" (1.793131e-04%)
Noelle:     Loop "  %87 = icmp sgt i64 %indvars.iv46, %85" (1.793129e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255242e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.816302e+01%)
Noelle:     Loop "  %113 = icmp sgt i64 %indvars.iv, %111" (2.017279e-02%)
Noelle:     Loop "  %139 = icmp sgt i64 %indvars.iv39, %137" (1.344852e-02%)
Noelle:  Function "conj_grad"
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (2.453090e-02%)
Noelle:     Loop "  %27 = icmp sgt i64 %indvars.iv35, %25" (1.362784e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 26" (9.561981e+01%)
Noelle:     Loop "  %40 = icmp sgt i64 %indvars.iv27, %37" (9.405261e+01%)
Noelle:     Loop "  %49 = icmp slt i64 %indvars.iv25, %47" (9.354156e+01%)
Noelle:     Loop "  %62 = icmp sgt i64 %indvars.iv29, %25" (4.088351e-01%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv31, %25" (7.495296e-01%)
Noelle:     Loop "  %92 = icmp sgt i64 %indvars.iv33, %25" (4.088347e-01%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv23, %37" (3.762104e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv21, %110" (3.741662e+00%)
Noelle:     Loop "  %125 = icmp sgt i64 %indvars.iv, %25" (1.771617e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %25 = icmp sgt i64 %indvars.iv41, %23" (1.434504e-04%)
Noelle:     Loop "  %32 = icmp sgt i32 %.03, %0" (1.432912e-01%)
Noelle:     Loop "  %42 = icmp sgt i64 %indvars.iv.i, %40" (2.850896e-03%)
Noelle:     Loop "  %60 = icmp sgt i64 %indvars.iv39, %58" (1.000980e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (9.528721e-02%)
Noelle:     Loop "  %97 = icmp sgt i32 %.16, %7" (3.919840e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614182e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958389e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793537e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.500042e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478519e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.854265e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793535e-04%)
Noelle:     Loop "  %94 = icmp sgt i64 %indvars.iv25, %14" (1.614182e-04%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (1.839130e-01%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (1.048260e-01%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (7.874629e-02%)
Noelle:  Function "sprnvc"
Noelle:     Loop "  %7 = shl nsw i32 %.04, 1" (1.506404e-03%)
Noelle:     Loop "  %10 = icmp slt i32 %.01.ph, 13" (3.451351e-02%)
Noelle:     Loop "  %12 = load double, double* @amult, align 8, !tbaa !35" (2.791365e-02%)
Noelle:     Loop "  %32 = icmp sgt i64 %indvars.iv, %11" (2.385140e-03%)
Noelle:  Function "randlc"
Noelle:  Function "vecset"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv, %8" (2.869113e-03%)
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_read"
Noelle:  Function "timer_clear"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
NOELLE: FixedPoint:       There are 19 different instructions and 28 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.5Wh0sT4CYZ -o /tmp/tmp.5Wh0sT4CYZ
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.5Wh0sT4CYZ -o /tmp/tmp.5Wh0sT4CYZ
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
Inliner: Start
Inliner:   Number of program instructions = 1101
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %145 = load i32, i32* %144, align 4, !tbaa !34
DOALL:     	  %146 = add nsw i32 %.3.lcssa, %145
DOALL:     	  store i32 %146, i32* %103, align 4, !tbaa !34
DOALL:     External nodes: 5
DOALL:     	  br i1 %101, label %147, label %102, !prof !33
DOALL:     	  %103 = getelementptr inbounds [75002 x i32], [75002 x i32]* @rowstr, i64 0, i64 %indvars.iv.next24
DOALL:     	  %106 = load i32, i32* %103, align 4, !tbaa !34
DOALL:     	  %.3.lcssa = phi i32 [ %.3, %128 ]
DOALL:     	  %144 = getelementptr [75002 x i32], [75002 x i32]* @rowstr, i64 0, i64 1
DOALL:     Edges: 10
DOALL:     Loop-carried data dependences
DOALL:         store i32 %146, i32* %103, align 4, !tbaa !34 --->   %145 = load i32, i32* %144, align 4, !tbaa !34 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 46
DOALL:     	  %.25 = phi i32 [ %.3.lcssa, %143 ], [ 0, %97 ]
DOALL:     	  %.0 = phi i32 [ %.1, %._crit_edge ], [ 0, %102 ]
DOALL:     	  %111 = load i32, i32* %110, align 4, !tbaa !34
DOALL:     	  %112 = sext i32 %111 to i64
DOALL:     	  %113 = getelementptr inbounds [75002 x double], [75002 x double]* @v, i64 0, i64 %112
DOALL:     	  %114 = load double, double* %113, align 8, !tbaa !40
DOALL:     	  %116 = load double, double* %115, align 8, !tbaa !40
DOALL:     	  %117 = fadd double %114, %116
DOALL:     	  store double %117, double* %113, align 8, !tbaa !40
DOALL:     	  %118 = getelementptr inbounds [150002 x i32], [150002 x i32]* @iv, i64 0, i64 %112
DOALL:     	  %119 = load i32, i32* %118, align 4, !tbaa !34
DOALL:     	  %120 = icmp eq i32 %119, 0
DOALL:     	  %121 = fcmp une double %117, 0.000000e+00
DOALL:     	  %or.cond = and i1 %120, %121
DOALL:     	  br i1 %or.cond, label %122, label %.._crit_edge_crit_edge, !prof !44
DOALL:     	  store i32 1, i32* %118, align 4, !tbaa !34
DOALL:     	  %123 = add nsw i32 %.0, 1
DOALL:     	  %124 = sext i32 %123 to i64
DOALL:     	  %125 = getelementptr inbounds i32, i32* %11, i64 %124
DOALL:     	  store i32 %111, i32* %125, align 4, !tbaa !34
DOALL:     	  %.1 = phi i32 [ %123, %122 ], [ %.0, %.._crit_edge_crit_edge ]
DOALL:     	  %.0.lcssa = phi i32 [ %.0, %105 ]
DOALL:     	  %127 = sext i32 %.0.lcssa to i64
DOALL:     	  %indvars.iv21 = phi i64 [ %indvars.iv.next22, %._crit_edge41 ], [ 1, %126 ]
DOALL:     	  %.3 = phi i32 [ %.4, %._crit_edge41 ], [ %.25, %126 ]
DOALL:     	  %129 = icmp sgt i64 %indvars.iv21, %127
DOALL:     	  br i1 %129, label %143, label %130, !prof !45
DOALL:     	  %131 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv21
DOALL:     	  %132 = load i32, i32* %131, align 4, !tbaa !34
DOALL:     	  %133 = sext i32 %132 to i64
DOALL:     	  %134 = getelementptr inbounds [150002 x i32], [150002 x i32]* @iv, i64 0, i64 %133
DOALL:     	  store i32 0, i32* %134, align 4, !tbaa !34
DOALL:     	  %135 = getelementptr inbounds [75002 x double], [75002 x double]* @v, i64 0, i64 %133
DOALL:     	  %136 = load double, double* %135, align 8, !tbaa !40
DOALL:     	  store double 0.000000e+00, double* %135, align 8, !tbaa !40
DOALL:     	  %137 = fcmp une double %136, 0.000000e+00
DOALL:     	  br i1 %137, label %138, label %.._crit_edge41_crit_edge, !prof !46
DOALL:     	  %139 = add nsw i32 %.3, 1
DOALL:     	  %140 = sext i32 %139 to i64
DOALL:     	  %141 = getelementptr inbounds [15825001 x double], [15825001 x double]* @a, i64 0, i64 %140
DOALL:     	  store double %136, double* %141, align 8, !tbaa !40
DOALL:     	  %142 = getelementptr inbounds [15825001 x i32], [15825001 x i32]* @colidx, i64 0, i64 %140
DOALL:     	  store i32 %132, i32* %142, align 4, !tbaa !34
DOALL:     	  %.4 = phi i32 [ %139, %138 ], [ %.3, %.._crit_edge41_crit_edge ]
DOALL:     	  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1
DOALL:     	  %.3.lcssa = phi i32 [ %.3, %128 ]
DOALL:     External nodes: 10
DOALL:     	  br i1 %101, label %147, label %102, !prof !33
DOALL:     	  br i1 %108, label %109, label %126, !prof !43
DOALL:     	  %110 = getelementptr inbounds [15825001 x i32], [15825001 x i32]* @colidx, i64 0, i64 %indvars.iv
DOALL:     	  %115 = getelementptr inbounds [15825001 x double], [15825001 x double]* @a, i64 0, i64 %indvars.iv
DOALL:     	  br label %._crit_edge
DOALL:     	  br label %._crit_edge
DOALL:     	  br label %._crit_edge41
DOALL:     	  br label %._crit_edge41
DOALL:     	  br label %128
DOALL:     	  %146 = add nsw i32 %.3.lcssa, %145
DOALL:     Edges: 153
DOALL:     Loop-carried data dependences
DOALL:         %111 = load i32, i32* %110, align 4, !tbaa !34 --->   store i32 %132, i32* %142, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   store double 0.000000e+00, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   %114 = load double, double* %113, align 8, !tbaa !40 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   %136 = load double, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   store double %117, double* %113, align 8, !tbaa !40 via memory
DOALL:         store double %136, double* %141, align 8, !tbaa !40 --->   store double %136, double* %141, align 8, !tbaa !40 via memory
DOALL:         store double %136, double* %141, align 8, !tbaa !40 --->   %116 = load double, double* %115, align 8, !tbaa !40 via memory
DOALL:         store i32 %132, i32* %142, align 4, !tbaa !34 --->   store i32 %132, i32* %142, align 4, !tbaa !34 via memory
DOALL:         store i32 %132, i32* %142, align 4, !tbaa !34 --->   %111 = load i32, i32* %110, align 4, !tbaa !34 via memory
DOALL:         %.3.lcssa = phi i32 [ %.3, %128 ] --->   %.25 = phi i32 [ %.3.lcssa, %143 ], [ 0, %97 ] via variable
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   %119 = load i32, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   %132 = load i32, i32* %131, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         %132 = load i32, i32* %131, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         %132 = load i32, i32* %131, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         %132 = load i32, i32* %131, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   %119 = load i32, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   %132 = load i32, i32* %131, align 4, !tbaa !34 via memory
DOALL:         %116 = load double, double* %115, align 8, !tbaa !40 --->   store double %136, double* %141, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   %114 = load double, double* %113, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   store double 0.000000e+00, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   store double %117, double* %113, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   %136 = load double, double* %135, align 8, !tbaa !40 via memory
DOALL:         %119 = load i32, i32* %118, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         %119 = load i32, i32* %118, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         %119 = load i32, i32* %118, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   %132 = load i32, i32* %131, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   %119 = load i32, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %.06 = phi i32 [ %.lcssa, %143 ], [ 1, %97 ]
DOALL:     	  %104 = sext i32 %.06 to i64
DOALL:     	  %indvars.iv = phi i64 [ %indvars.iv.next, %._crit_edge ], [ %104, %102 ]
DOALL:     	  %106 = load i32, i32* %103, align 4, !tbaa !34
DOALL:     	  %107 = sext i32 %106 to i64
DOALL:     	  %108 = icmp slt i64 %indvars.iv, %107
DOALL:     	  br i1 %108, label %109, label %126, !prof !43
DOALL:     	  %indvars.iv.next = add nsw i64 %indvars.iv, 1
DOALL:     	  %.lcssa = phi i32 [ %106, %105 ]
DOALL:     External nodes: 21
DOALL:     	  br i1 %101, label %147, label %102, !prof !33
DOALL:     	  %103 = getelementptr inbounds [75002 x i32], [75002 x i32]* @rowstr, i64 0, i64 %indvars.iv.next24
DOALL:     	  %.0 = phi i32 [ %.1, %._crit_edge ], [ 0, %102 ]
DOALL:     	  %110 = getelementptr inbounds [15825001 x i32], [15825001 x i32]* @colidx, i64 0, i64 %indvars.iv
DOALL:     	  %111 = load i32, i32* %110, align 4, !tbaa !34
DOALL:     	  %112 = sext i32 %111 to i64
DOALL:     	  %113 = getelementptr inbounds [75002 x double], [75002 x double]* @v, i64 0, i64 %112
DOALL:     	  %114 = load double, double* %113, align 8, !tbaa !40
DOALL:     	  %115 = getelementptr inbounds [15825001 x double], [15825001 x double]* @a, i64 0, i64 %indvars.iv
DOALL:     	  %116 = load double, double* %115, align 8, !tbaa !40
DOALL:     	  %117 = fadd double %114, %116
DOALL:     	  store double %117, double* %113, align 8, !tbaa !40
DOALL:     	  %118 = getelementptr inbounds [150002 x i32], [150002 x i32]* @iv, i64 0, i64 %112
DOALL:     	  %119 = load i32, i32* %118, align 4, !tbaa !34
DOALL:     	  %120 = icmp eq i32 %119, 0
DOALL:     	  %121 = fcmp une double %117, 0.000000e+00
DOALL:     	  %or.cond = and i1 %120, %121
DOALL:     	  br i1 %or.cond, label %122, label %.._crit_edge_crit_edge, !prof !44
DOALL:     	  %.1 = phi i32 [ %123, %122 ], [ %.0, %.._crit_edge_crit_edge ]
DOALL:     	  br label %105
DOALL:     	  store i32 %146, i32* %103, align 4, !tbaa !34
DOALL:     Edges: 46
DOALL:     Loop-carried data dependences
DOALL:         %.lcssa = phi i32 [ %106, %105 ] --->   %.06 = phi i32 [ %.lcssa, %143 ], [ 1, %97 ] via variable
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 30
DOALL:     	  %.15 = phi double [ %.04.lcssa, %33 ], [ %.26.lcssa, %100 ]
DOALL:     	  %.07 = phi double [ %59, %50 ], [ 0.000000e+00, %41 ]
DOALL:     	  %57 = load double, double* %56, align 8, !tbaa !35
DOALL:     	  %58 = fmul double %52, %57
DOALL:     	  %59 = fadd double %.07, %58
DOALL:     	  %.07.lcssa = phi double [ %.07, %48 ]
DOALL:     	  store double %.07.lcssa, double* %61, align 8, !tbaa !35
DOALL:     	  %.09 = phi double [ %69, %63 ], [ 0.000000e+00, %.preheader14.preheader ]
DOALL:     	  %65 = load double, double* %64, align 8, !tbaa !35
DOALL:     	  %67 = load double, double* %66, align 8, !tbaa !35
DOALL:     	  %68 = fmul double %65, %67
DOALL:     	  %69 = fadd double %.09, %68
DOALL:     	  %.09.lcssa = phi double [ %.09, %.preheader14 ]
DOALL:     	  %71 = fdiv double %.15, %.09.lcssa
DOALL:     	  %.26 = phi double [ %88, %74 ], [ 0.000000e+00, %70 ]
DOALL:     	  %78 = load double, double* %77, align 8, !tbaa !35
DOALL:     	  %82 = load double, double* %81, align 8, !tbaa !35
DOALL:     	  %84 = load double, double* %83, align 8, !tbaa !35
DOALL:     	  %85 = fmul double %71, %84
DOALL:     	  %86 = fsub double %82, %85
DOALL:     	  store double %86, double* %81, align 8, !tbaa !35
DOALL:     	  %87 = fmul double %86, %86
DOALL:     	  %88 = fadd double %.26, %87
DOALL:     	  %.26.lcssa = phi double [ %.26, %72 ]
DOALL:     	  %90 = fdiv double %.26.lcssa, %.15
DOALL:     	  %95 = load double, double* %94, align 8, !tbaa !35
DOALL:     	  %97 = load double, double* %96, align 8, !tbaa !35
DOALL:     	  %98 = fmul double %90, %97
DOALL:     	  %99 = fadd double %95, %98
DOALL:     	  store double %99, double* %96, align 8, !tbaa !35
DOALL:     External nodes: 17
DOALL:     	  br i1 %exitcond, label %.preheader13, label %.preheader15.preheader, !prof !42
DOALL:     	  br i1 %40, label %.preheader14.preheader, label %41, !prof !43
DOALL:     	  br i1 %49, label %50, label %60, !prof !44
DOALL:     	  %52 = load double, double* %51, align 8, !tbaa !35
DOALL:     	  %56 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %55
DOALL:     	  %61 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv27
DOALL:     	  br i1 %62, label %70, label %63, !prof !43
DOALL:     	  %64 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv29
DOALL:     	  %66 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv29
DOALL:     	  br i1 %73, label %89, label %74, !prof !43
DOALL:     	  %77 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv31
DOALL:     	  %79 = fmul double %71, %78
DOALL:     	  %81 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv31
DOALL:     	  %83 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv31
DOALL:     	  br i1 %92, label %100, label %93, !prof !43
DOALL:     	  %94 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv33
DOALL:     	  %96 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv33
DOALL:     Edges: 99
DOALL:     Loop-carried data dependences
DOALL:         %57 = load double, double* %56, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %.07.lcssa, double* %61, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL:         %65 = load double, double* %64, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         %67 = load double, double* %66, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL:         %78 = load double, double* %77, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         %84 = load double, double* %83, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   %95 = load double, double* %94, align 8, !tbaa !35 via memory
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   %82 = load double, double* %81, align 8, !tbaa !35 via memory
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   store double %86, double* %81, align 8, !tbaa !35 via memory
DOALL:         %.26.lcssa = phi double [ %.26, %72 ] --->   %.15 = phi double [ %.04.lcssa, %33 ], [ %.26.lcssa, %100 ] via variable
DOALL:         %95 = load double, double* %94, align 8, !tbaa !35 --->   store double %86, double* %81, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %97 = load double, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %78 = load double, double* %77, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %57 = load double, double* %56, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %65 = load double, double* %64, align 8, !tbaa !35 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 8
DOALL:     Live-out ID = 9
DOALL:     Live-out ID = 10
Inliner:   Inlining in: makea (168 instructions. The inlining will add 59 instructions),   tail call fastcc void @sprnvc(i32 %0, i32 13, double* %32, i32* %33, i32* %34, i32* nonnull %28)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %30 = icmp sgt i64 %indvars.iv56, %28" (3.304277e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv54, %37" (3.282760e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255243e-04%)
Noelle:     Loop "  %53 = icmp sgt i64 %indvars.iv49, %51" (2.331067e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308752e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv44, %71" (1.793132e-04%)
Noelle:     Loop "  %87 = icmp sgt i64 %indvars.iv46, %85" (1.793130e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255243e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.816309e+01%)
Noelle:     Loop "  %113 = icmp sgt i64 %indvars.iv, %111" (2.017280e-02%)
Noelle:     Loop "  %139 = icmp sgt i64 %indvars.iv39, %137" (1.344853e-02%)
Noelle:  Function "conj_grad"
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (2.453092e-02%)
Noelle:     Loop "  %27 = icmp sgt i64 %indvars.iv35, %25" (1.362785e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 26" (9.561988e+01%)
Noelle:     Loop "  %40 = icmp sgt i64 %indvars.iv27, %37" (9.405267e+01%)
Noelle:     Loop "  %49 = icmp slt i64 %indvars.iv25, %47" (9.354163e+01%)
Noelle:     Loop "  %62 = icmp sgt i64 %indvars.iv29, %25" (4.088354e-01%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv31, %25" (7.495301e-01%)
Noelle:     Loop "  %92 = icmp sgt i64 %indvars.iv33, %25" (4.088350e-01%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv23, %37" (3.762107e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv21, %110" (3.741665e+00%)
Noelle:     Loop "  %125 = icmp sgt i64 %indvars.iv, %25" (1.771618e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434505e-04%)
Noelle:     Loop "  %30 = icmp sgt i32 %.03, %0" (1.432200e-01%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850898e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %wide.trip.count" (1.000981e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (9.528728e-02%)
Noelle:     Loop "  %89 = icmp sgt i32 %.16, %7" (3.919842e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614183e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958392e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793539e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.500044e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478521e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.854272e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793536e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.614183e-04%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (1.839131e-01%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (1.048260e-01%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (7.874634e-02%)
Noelle:  Function "sprnvc"
Noelle:     Loop "  %7 = shl nsw i32 %.04, 1" (1.506405e-03%)
Noelle:     Loop "  %10 = icmp slt i32 %.01.ph, 13" (3.451353e-02%)
Noelle:     Loop "  %12 = load double, double* @amult, align 8, !tbaa !35" (2.791367e-02%)
Noelle:     Loop "  %32 = icmp sgt i64 %indvars.iv, %11" (2.385142e-03%)
Noelle:  Function "randlc"
Noelle:  Function "vecset"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv, %8" (2.869115e-03%)
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_read"
Noelle:  Function "timer_clear"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %30 = icmp sgt i64 %indvars.iv56, %28" (3.303847e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv54, %37" (3.282332e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255080e-04%)
Noelle:     Loop "  %53 = icmp sgt i64 %indvars.iv49, %51" (2.330763e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308581e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv44, %71" (1.792899e-04%)
Noelle:     Loop "  %87 = icmp sgt i64 %indvars.iv46, %85" (1.792896e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255080e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.815031e+01%)
Noelle:     Loop "  %113 = icmp sgt i64 %indvars.iv, %111" (2.017018e-02%)
Noelle:     Loop "  %139 = icmp sgt i64 %indvars.iv39, %137" (1.344678e-02%)
Noelle:  Function "conj_grad"
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (2.452772e-02%)
Noelle:     Loop "  %27 = icmp sgt i64 %indvars.iv35, %25" (1.362608e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 26" (9.560743e+01%)
Noelle:     Loop "  %40 = icmp sgt i64 %indvars.iv27, %37" (9.404042e+01%)
Noelle:     Loop "  %49 = icmp slt i64 %indvars.iv25, %47" (9.352945e+01%)
Noelle:     Loop "  %62 = icmp sgt i64 %indvars.iv29, %25" (4.087822e-01%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv31, %25" (7.494325e-01%)
Noelle:     Loop "  %92 = icmp sgt i64 %indvars.iv33, %25" (4.087817e-01%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv23, %37" (3.761617e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv21, %110" (3.741178e+00%)
Noelle:     Loop "  %125 = icmp sgt i64 %indvars.iv, %25" (1.771388e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434318e-04%)
Noelle:     Loop "  %30 = icmp sgt i32 %.03, %0" (1.412134e-01%)
Noelle:     Loop "  %35 = shl nsw i32 %.04.i, 1" (1.496522e-03%)
Noelle:     Loop "  %38 = icmp slt i32 %.01.ph.i, 13" (3.382396e-02%)
Noelle:     Loop "  %40 = load double, double* @amult, align 8, !tbaa !40" (2.773066e-02%)
Noelle:     Loop "  %60 = icmp sgt i64 %indvars.iv.i3, %39" (2.369492e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850527e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %wide.trip.count" (1.000850e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (9.527487e-02%)
Noelle:     Loop "  %120 = icmp sgt i32 %.16, %7" (3.919332e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.613973e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.957746e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793305e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499718e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478198e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853119e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793303e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.613973e-04%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (1.838892e-01%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (1.048124e-01%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (7.873609e-02%)
Noelle:  Function "sprnvc"
Noelle:     Loop "  %7 = shl nsw i32 %.04, 1" (1.506209e-03%)
Noelle:     Loop "  %10 = icmp slt i32 %.01.ph, 13" (3.288804e-02%)
Noelle:     Loop "  %12 = load double, double* @amult, align 8, !tbaa !35" (2.628904e-02%)
Noelle:     Loop "  %32 = icmp sgt i64 %indvars.iv, %11" (2.384831e-03%)
Noelle:  Function "randlc"
Noelle:  Function "vecset"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv, %8" (2.868742e-03%)
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_read"
Noelle:  Function "timer_clear"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
NOELLE: FixedPoint:       There are 37 different instructions and 81 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.5Wh0sT4CYZ -o /tmp/tmp.5Wh0sT4CYZ
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.5Wh0sT4CYZ -o /tmp/tmp.5Wh0sT4CYZ
NOELLE: FixedPoint:     Invocation 2
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
Inliner: Start
Inliner:   Number of program instructions = 1158
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %145 = load i32, i32* %144, align 4, !tbaa !34
DOALL:     	  %146 = add nsw i32 %.3.lcssa, %145
DOALL:     	  store i32 %146, i32* %103, align 4, !tbaa !34
DOALL:     External nodes: 5
DOALL:     	  br i1 %101, label %147, label %102, !prof !33
DOALL:     	  %103 = getelementptr inbounds [75002 x i32], [75002 x i32]* @rowstr, i64 0, i64 %indvars.iv.next24
DOALL:     	  %106 = load i32, i32* %103, align 4, !tbaa !34
DOALL:     	  %.3.lcssa = phi i32 [ %.3, %128 ]
DOALL:     	  %144 = getelementptr [75002 x i32], [75002 x i32]* @rowstr, i64 0, i64 1
DOALL:     Edges: 10
DOALL:     Loop-carried data dependences
DOALL:         store i32 %146, i32* %103, align 4, !tbaa !34 --->   %145 = load i32, i32* %144, align 4, !tbaa !34 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 46
DOALL:     	  %.25 = phi i32 [ %.3.lcssa, %143 ], [ 0, %97 ]
DOALL:     	  %.0 = phi i32 [ %.1, %._crit_edge ], [ 0, %102 ]
DOALL:     	  %111 = load i32, i32* %110, align 4, !tbaa !34
DOALL:     	  %112 = sext i32 %111 to i64
DOALL:     	  %113 = getelementptr inbounds [75002 x double], [75002 x double]* @v, i64 0, i64 %112
DOALL:     	  %114 = load double, double* %113, align 8, !tbaa !40
DOALL:     	  %116 = load double, double* %115, align 8, !tbaa !40
DOALL:     	  %117 = fadd double %114, %116
DOALL:     	  store double %117, double* %113, align 8, !tbaa !40
DOALL:     	  %118 = getelementptr inbounds [150002 x i32], [150002 x i32]* @iv, i64 0, i64 %112
DOALL:     	  %119 = load i32, i32* %118, align 4, !tbaa !34
DOALL:     	  %120 = icmp eq i32 %119, 0
DOALL:     	  %121 = fcmp une double %117, 0.000000e+00
DOALL:     	  %or.cond = and i1 %120, %121
DOALL:     	  br i1 %or.cond, label %122, label %.._crit_edge_crit_edge, !prof !44
DOALL:     	  store i32 1, i32* %118, align 4, !tbaa !34
DOALL:     	  %123 = add nsw i32 %.0, 1
DOALL:     	  %124 = sext i32 %123 to i64
DOALL:     	  %125 = getelementptr inbounds i32, i32* %11, i64 %124
DOALL:     	  store i32 %111, i32* %125, align 4, !tbaa !34
DOALL:     	  %.1 = phi i32 [ %123, %122 ], [ %.0, %.._crit_edge_crit_edge ]
DOALL:     	  %.0.lcssa = phi i32 [ %.0, %105 ]
DOALL:     	  %127 = sext i32 %.0.lcssa to i64
DOALL:     	  %indvars.iv21 = phi i64 [ %indvars.iv.next22, %._crit_edge41 ], [ 1, %126 ]
DOALL:     	  %.3 = phi i32 [ %.4, %._crit_edge41 ], [ %.25, %126 ]
DOALL:     	  %129 = icmp sgt i64 %indvars.iv21, %127
DOALL:     	  br i1 %129, label %143, label %130, !prof !45
DOALL:     	  %131 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv21
DOALL:     	  %132 = load i32, i32* %131, align 4, !tbaa !34
DOALL:     	  %133 = sext i32 %132 to i64
DOALL:     	  %134 = getelementptr inbounds [150002 x i32], [150002 x i32]* @iv, i64 0, i64 %133
DOALL:     	  store i32 0, i32* %134, align 4, !tbaa !34
DOALL:     	  %135 = getelementptr inbounds [75002 x double], [75002 x double]* @v, i64 0, i64 %133
DOALL:     	  %136 = load double, double* %135, align 8, !tbaa !40
DOALL:     	  store double 0.000000e+00, double* %135, align 8, !tbaa !40
DOALL:     	  %137 = fcmp une double %136, 0.000000e+00
DOALL:     	  br i1 %137, label %138, label %.._crit_edge41_crit_edge, !prof !46
DOALL:     	  %139 = add nsw i32 %.3, 1
DOALL:     	  %140 = sext i32 %139 to i64
DOALL:     	  %141 = getelementptr inbounds [15825001 x double], [15825001 x double]* @a, i64 0, i64 %140
DOALL:     	  store double %136, double* %141, align 8, !tbaa !40
DOALL:     	  %142 = getelementptr inbounds [15825001 x i32], [15825001 x i32]* @colidx, i64 0, i64 %140
DOALL:     	  store i32 %132, i32* %142, align 4, !tbaa !34
DOALL:     	  %.4 = phi i32 [ %139, %138 ], [ %.3, %.._crit_edge41_crit_edge ]
DOALL:     	  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1
DOALL:     	  %.3.lcssa = phi i32 [ %.3, %128 ]
DOALL:     External nodes: 10
DOALL:     	  br i1 %101, label %147, label %102, !prof !33
DOALL:     	  br i1 %108, label %109, label %126, !prof !43
DOALL:     	  %110 = getelementptr inbounds [15825001 x i32], [15825001 x i32]* @colidx, i64 0, i64 %indvars.iv
DOALL:     	  %115 = getelementptr inbounds [15825001 x double], [15825001 x double]* @a, i64 0, i64 %indvars.iv
DOALL:     	  br label %._crit_edge
DOALL:     	  br label %._crit_edge
DOALL:     	  br label %._crit_edge41
DOALL:     	  br label %._crit_edge41
DOALL:     	  br label %128
DOALL:     	  %146 = add nsw i32 %.3.lcssa, %145
DOALL:     Edges: 153
DOALL:     Loop-carried data dependences
DOALL:         %132 = load i32, i32* %131, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         %132 = load i32, i32* %131, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         %132 = load i32, i32* %131, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   %132 = load i32, i32* %131, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   %119 = load i32, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   store double 0.000000e+00, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   %136 = load double, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   %114 = load double, double* %113, align 8, !tbaa !40 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   store double %117, double* %113, align 8, !tbaa !40 via memory
DOALL:         store double %136, double* %141, align 8, !tbaa !40 --->   store double %136, double* %141, align 8, !tbaa !40 via memory
DOALL:         store double %136, double* %141, align 8, !tbaa !40 --->   %116 = load double, double* %115, align 8, !tbaa !40 via memory
DOALL:         store i32 %132, i32* %142, align 4, !tbaa !34 --->   store i32 %132, i32* %142, align 4, !tbaa !34 via memory
DOALL:         store i32 %132, i32* %142, align 4, !tbaa !34 --->   %111 = load i32, i32* %110, align 4, !tbaa !34 via memory
DOALL:         %.3.lcssa = phi i32 [ %.3, %128 ] --->   %.25 = phi i32 [ %.3.lcssa, %143 ], [ 0, %97 ] via variable
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   %132 = load i32, i32* %131, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   %119 = load i32, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   %119 = load i32, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   %132 = load i32, i32* %131, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         %111 = load i32, i32* %110, align 4, !tbaa !34 --->   store i32 %132, i32* %142, align 4, !tbaa !34 via memory
DOALL:         %116 = load double, double* %115, align 8, !tbaa !40 --->   store double %136, double* %141, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   store double 0.000000e+00, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   %136 = load double, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   %114 = load double, double* %113, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   store double %117, double* %113, align 8, !tbaa !40 via memory
DOALL:         %119 = load i32, i32* %118, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         %119 = load i32, i32* %118, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         %119 = load i32, i32* %118, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %.06 = phi i32 [ %.lcssa, %143 ], [ 1, %97 ]
DOALL:     	  %104 = sext i32 %.06 to i64
DOALL:     	  %indvars.iv = phi i64 [ %indvars.iv.next, %._crit_edge ], [ %104, %102 ]
DOALL:     	  %106 = load i32, i32* %103, align 4, !tbaa !34
DOALL:     	  %107 = sext i32 %106 to i64
DOALL:     	  %108 = icmp slt i64 %indvars.iv, %107
DOALL:     	  br i1 %108, label %109, label %126, !prof !43
DOALL:     	  %indvars.iv.next = add nsw i64 %indvars.iv, 1
DOALL:     	  %.lcssa = phi i32 [ %106, %105 ]
DOALL:     External nodes: 21
DOALL:     	  br i1 %101, label %147, label %102, !prof !33
DOALL:     	  %103 = getelementptr inbounds [75002 x i32], [75002 x i32]* @rowstr, i64 0, i64 %indvars.iv.next24
DOALL:     	  %.0 = phi i32 [ %.1, %._crit_edge ], [ 0, %102 ]
DOALL:     	  %110 = getelementptr inbounds [15825001 x i32], [15825001 x i32]* @colidx, i64 0, i64 %indvars.iv
DOALL:     	  %111 = load i32, i32* %110, align 4, !tbaa !34
DOALL:     	  %112 = sext i32 %111 to i64
DOALL:     	  %113 = getelementptr inbounds [75002 x double], [75002 x double]* @v, i64 0, i64 %112
DOALL:     	  %114 = load double, double* %113, align 8, !tbaa !40
DOALL:     	  %115 = getelementptr inbounds [15825001 x double], [15825001 x double]* @a, i64 0, i64 %indvars.iv
DOALL:     	  %116 = load double, double* %115, align 8, !tbaa !40
DOALL:     	  %117 = fadd double %114, %116
DOALL:     	  store double %117, double* %113, align 8, !tbaa !40
DOALL:     	  %118 = getelementptr inbounds [150002 x i32], [150002 x i32]* @iv, i64 0, i64 %112
DOALL:     	  %119 = load i32, i32* %118, align 4, !tbaa !34
DOALL:     	  %120 = icmp eq i32 %119, 0
DOALL:     	  %121 = fcmp une double %117, 0.000000e+00
DOALL:     	  %or.cond = and i1 %120, %121
DOALL:     	  br i1 %or.cond, label %122, label %.._crit_edge_crit_edge, !prof !44
DOALL:     	  %.1 = phi i32 [ %123, %122 ], [ %.0, %.._crit_edge_crit_edge ]
DOALL:     	  br label %105
DOALL:     	  store i32 %146, i32* %103, align 4, !tbaa !34
DOALL:     Edges: 46
DOALL:     Loop-carried data dependences
DOALL:         %.lcssa = phi i32 [ %106, %105 ] --->   %.06 = phi i32 [ %.lcssa, %143 ], [ 1, %97 ] via variable
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 30
DOALL:     	  %.15 = phi double [ %.04.lcssa, %33 ], [ %.26.lcssa, %100 ]
DOALL:     	  %.07 = phi double [ %59, %50 ], [ 0.000000e+00, %41 ]
DOALL:     	  %57 = load double, double* %56, align 8, !tbaa !35
DOALL:     	  %58 = fmul double %52, %57
DOALL:     	  %59 = fadd double %.07, %58
DOALL:     	  %.07.lcssa = phi double [ %.07, %48 ]
DOALL:     	  store double %.07.lcssa, double* %61, align 8, !tbaa !35
DOALL:     	  %.09 = phi double [ %69, %63 ], [ 0.000000e+00, %.preheader14.preheader ]
DOALL:     	  %65 = load double, double* %64, align 8, !tbaa !35
DOALL:     	  %67 = load double, double* %66, align 8, !tbaa !35
DOALL:     	  %68 = fmul double %65, %67
DOALL:     	  %69 = fadd double %.09, %68
DOALL:     	  %.09.lcssa = phi double [ %.09, %.preheader14 ]
DOALL:     	  %71 = fdiv double %.15, %.09.lcssa
DOALL:     	  %.26 = phi double [ %88, %74 ], [ 0.000000e+00, %70 ]
DOALL:     	  %78 = load double, double* %77, align 8, !tbaa !35
DOALL:     	  %82 = load double, double* %81, align 8, !tbaa !35
DOALL:     	  %84 = load double, double* %83, align 8, !tbaa !35
DOALL:     	  %85 = fmul double %71, %84
DOALL:     	  %86 = fsub double %82, %85
DOALL:     	  store double %86, double* %81, align 8, !tbaa !35
DOALL:     	  %87 = fmul double %86, %86
DOALL:     	  %88 = fadd double %.26, %87
DOALL:     	  %.26.lcssa = phi double [ %.26, %72 ]
DOALL:     	  %90 = fdiv double %.26.lcssa, %.15
DOALL:     	  %95 = load double, double* %94, align 8, !tbaa !35
DOALL:     	  %97 = load double, double* %96, align 8, !tbaa !35
DOALL:     	  %98 = fmul double %90, %97
DOALL:     	  %99 = fadd double %95, %98
DOALL:     	  store double %99, double* %96, align 8, !tbaa !35
DOALL:     External nodes: 17
DOALL:     	  br i1 %exitcond, label %.preheader13, label %.preheader15.preheader, !prof !42
DOALL:     	  br i1 %40, label %.preheader14.preheader, label %41, !prof !43
DOALL:     	  br i1 %49, label %50, label %60, !prof !44
DOALL:     	  %52 = load double, double* %51, align 8, !tbaa !35
DOALL:     	  %56 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %55
DOALL:     	  %61 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv27
DOALL:     	  br i1 %62, label %70, label %63, !prof !43
DOALL:     	  %64 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv29
DOALL:     	  %66 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv29
DOALL:     	  br i1 %73, label %89, label %74, !prof !43
DOALL:     	  %77 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv31
DOALL:     	  %79 = fmul double %71, %78
DOALL:     	  %81 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv31
DOALL:     	  %83 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv31
DOALL:     	  br i1 %92, label %100, label %93, !prof !43
DOALL:     	  %94 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv33
DOALL:     	  %96 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv33
DOALL:     Edges: 99
DOALL:     Loop-carried data dependences
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   store double %86, double* %81, align 8, !tbaa !35 via memory
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   %95 = load double, double* %94, align 8, !tbaa !35 via memory
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   %82 = load double, double* %81, align 8, !tbaa !35 via memory
DOALL:         %.26.lcssa = phi double [ %.26, %72 ] --->   %.15 = phi double [ %.04.lcssa, %33 ], [ %.26.lcssa, %100 ] via variable
DOALL:         %95 = load double, double* %94, align 8, !tbaa !35 --->   store double %86, double* %81, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %78 = load double, double* %77, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %97 = load double, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %57 = load double, double* %56, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %65 = load double, double* %64, align 8, !tbaa !35 via memory
DOALL:         %57 = load double, double* %56, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %.07.lcssa, double* %61, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL:         %65 = load double, double* %64, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         %67 = load double, double* %66, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL:         %78 = load double, double* %77, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         %84 = load double, double* %83, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 8
DOALL:     Live-out ID = 9
DOALL:     Live-out ID = 10
Inliner:   Inlining in: makea (225 instructions. The inlining will add 30 instructions),   %40 = tail call double @randlc(double* nonnull @tran, double %39) #13
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %30 = icmp sgt i64 %indvars.iv56, %28" (3.303831e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv54, %37" (3.282316e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255074e-04%)
Noelle:     Loop "  %53 = icmp sgt i64 %indvars.iv49, %51" (2.330751e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308575e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv44, %71" (1.792890e-04%)
Noelle:     Loop "  %87 = icmp sgt i64 %indvars.iv46, %85" (1.792887e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255074e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.814982e+01%)
Noelle:     Loop "  %113 = icmp sgt i64 %indvars.iv, %111" (2.017007e-02%)
Noelle:     Loop "  %139 = icmp sgt i64 %indvars.iv39, %137" (1.344671e-02%)
Noelle:  Function "conj_grad"
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (2.452760e-02%)
Noelle:     Loop "  %27 = icmp sgt i64 %indvars.iv35, %25" (1.362601e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 26" (9.560695e+01%)
Noelle:     Loop "  %40 = icmp sgt i64 %indvars.iv27, %37" (9.403996e+01%)
Noelle:     Loop "  %49 = icmp slt i64 %indvars.iv25, %47" (9.352898e+01%)
Noelle:     Loop "  %62 = icmp sgt i64 %indvars.iv29, %25" (4.087801e-01%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv31, %25" (7.494287e-01%)
Noelle:     Loop "  %92 = icmp sgt i64 %indvars.iv33, %25" (4.087797e-01%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv23, %37" (3.761598e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv21, %110" (3.741159e+00%)
Noelle:     Loop "  %125 = icmp sgt i64 %indvars.iv, %25" (1.771379e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434311e-04%)
Noelle:     Loop "  %30 = icmp sgt i32 %.03, %0" (1.417116e-01%)
Noelle:     Loop "  %33 = shl nsw i32 %.04.i, 1" (1.496514e-03%)
Noelle:     Loop "  %37 = icmp slt i32 %.01.ph.i, 13" (3.428705e-02%)
Noelle:     Loop "  %39 = load double, double* @amult, align 8, !tbaa !40" (2.773052e-02%)
Noelle:     Loop "  %59 = icmp sgt i64 %indvars.iv.i3, %38" (2.369480e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850512e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %wide.trip.count" (1.000845e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (9.527439e-02%)
Noelle:     Loop "  %120 = icmp sgt i32 %.16, %7" (3.919312e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.613965e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.957722e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793296e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499706e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478186e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853074e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793294e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.613965e-04%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (1.838883e-01%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (1.048119e-01%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (7.873570e-02%)
Noelle:  Function "sprnvc"
Noelle:     Loop "  %7 = shl nsw i32 %.04, 1" (1.506202e-03%)
Noelle:     Loop "  %10 = icmp slt i32 %.01.ph, 13" (3.288787e-02%)
Noelle:     Loop "  %12 = load double, double* @amult, align 8, !tbaa !35" (2.628891e-02%)
Noelle:     Loop "  %32 = icmp sgt i64 %indvars.iv, %11" (2.384819e-03%)
Noelle:  Function "randlc"
Noelle:  Function "vecset"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv, %8" (2.868727e-03%)
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_read"
Noelle:  Function "timer_clear"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %30 = icmp sgt i64 %indvars.iv56, %28" (3.303456e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv54, %37" (3.281944e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.254931e-04%)
Noelle:     Loop "  %53 = icmp sgt i64 %indvars.iv49, %51" (2.330487e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308426e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv44, %71" (1.792686e-04%)
Noelle:     Loop "  %87 = icmp sgt i64 %indvars.iv46, %85" (1.792684e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.254931e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.813868e+01%)
Noelle:     Loop "  %113 = icmp sgt i64 %indvars.iv, %111" (2.016779e-02%)
Noelle:     Loop "  %139 = icmp sgt i64 %indvars.iv39, %137" (1.344518e-02%)
Noelle:  Function "conj_grad"
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (2.452482e-02%)
Noelle:     Loop "  %27 = icmp sgt i64 %indvars.iv35, %25" (1.362446e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 26" (9.559610e+01%)
Noelle:     Loop "  %40 = icmp sgt i64 %indvars.iv27, %37" (9.402929e+01%)
Noelle:     Loop "  %49 = icmp slt i64 %indvars.iv25, %47" (9.351837e+01%)
Noelle:     Loop "  %62 = icmp sgt i64 %indvars.iv29, %25" (4.087338e-01%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv31, %25" (7.493437e-01%)
Noelle:     Loop "  %92 = icmp sgt i64 %indvars.iv33, %25" (4.087333e-01%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv23, %37" (3.761171e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv21, %110" (3.740734e+00%)
Noelle:     Loop "  %125 = icmp sgt i64 %indvars.iv, %25" (1.771178e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434149e-04%)
Noelle:     Loop "  %30 = icmp sgt i32 %.03, %0" (1.412903e-01%)
Noelle:     Loop "  %33 = shl nsw i32 %.04.i, 1" (1.496344e-03%)
Noelle:     Loop "  %37 = icmp slt i32 %.01.ph.i, 13" (3.387795e-02%)
Noelle:     Loop "  %39 = load double, double* @amult, align 8, !tbaa !40" (2.732217e-02%)
Noelle:     Loop "  %86 = icmp sgt i64 %indvars.iv.i3, %38" (2.369211e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850189e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %wide.trip.count" (1.000732e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (9.526358e-02%)
Noelle:     Loop "  %147 = icmp sgt i32 %.16, %7" (3.918868e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.613782e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.957159e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793093e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499422e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.477905e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.852070e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793090e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.613782e-04%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (1.838674e-01%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (1.048000e-01%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (7.872676e-02%)
Noelle:  Function "sprnvc"
Noelle:     Loop "  %7 = shl nsw i32 %.04, 1" (1.506031e-03%)
Noelle:     Loop "  %10 = icmp slt i32 %.01.ph, 13" (3.288414e-02%)
Noelle:     Loop "  %12 = load double, double* @amult, align 8, !tbaa !35" (2.628592e-02%)
Noelle:     Loop "  %32 = icmp sgt i64 %indvars.iv, %11" (2.384548e-03%)
Noelle:  Function "randlc"
Noelle:  Function "vecset"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv, %8" (2.868402e-03%)
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_read"
Noelle:  Function "timer_clear"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
NOELLE: FixedPoint:       There are 28 different instructions and 84 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.5Wh0sT4CYZ -o /tmp/tmp.5Wh0sT4CYZ
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.5Wh0sT4CYZ -o /tmp/tmp.5Wh0sT4CYZ
NOELLE: FixedPoint:     Invocation 3
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
Inliner: Start
Inliner:   Number of program instructions = 1186
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %145 = load i32, i32* %144, align 4, !tbaa !34
DOALL:     	  %146 = add nsw i32 %.3.lcssa, %145
DOALL:     	  store i32 %146, i32* %103, align 4, !tbaa !34
DOALL:     External nodes: 5
DOALL:     	  br i1 %101, label %147, label %102, !prof !33
DOALL:     	  %103 = getelementptr inbounds [75002 x i32], [75002 x i32]* @rowstr, i64 0, i64 %indvars.iv.next24
DOALL:     	  %106 = load i32, i32* %103, align 4, !tbaa !34
DOALL:     	  %.3.lcssa = phi i32 [ %.3, %128 ]
DOALL:     	  %144 = getelementptr [75002 x i32], [75002 x i32]* @rowstr, i64 0, i64 1
DOALL:     Edges: 10
DOALL:     Loop-carried data dependences
DOALL:         store i32 %146, i32* %103, align 4, !tbaa !34 --->   %145 = load i32, i32* %144, align 4, !tbaa !34 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 46
DOALL:     	  %.25 = phi i32 [ %.3.lcssa, %143 ], [ 0, %97 ]
DOALL:     	  %.0 = phi i32 [ %.1, %._crit_edge ], [ 0, %102 ]
DOALL:     	  %111 = load i32, i32* %110, align 4, !tbaa !34
DOALL:     	  %112 = sext i32 %111 to i64
DOALL:     	  %113 = getelementptr inbounds [75002 x double], [75002 x double]* @v, i64 0, i64 %112
DOALL:     	  %114 = load double, double* %113, align 8, !tbaa !40
DOALL:     	  %116 = load double, double* %115, align 8, !tbaa !40
DOALL:     	  %117 = fadd double %114, %116
DOALL:     	  store double %117, double* %113, align 8, !tbaa !40
DOALL:     	  %118 = getelementptr inbounds [150002 x i32], [150002 x i32]* @iv, i64 0, i64 %112
DOALL:     	  %119 = load i32, i32* %118, align 4, !tbaa !34
DOALL:     	  %120 = icmp eq i32 %119, 0
DOALL:     	  %121 = fcmp une double %117, 0.000000e+00
DOALL:     	  %or.cond = and i1 %120, %121
DOALL:     	  br i1 %or.cond, label %122, label %.._crit_edge_crit_edge, !prof !44
DOALL:     	  store i32 1, i32* %118, align 4, !tbaa !34
DOALL:     	  %123 = add nsw i32 %.0, 1
DOALL:     	  %124 = sext i32 %123 to i64
DOALL:     	  %125 = getelementptr inbounds i32, i32* %11, i64 %124
DOALL:     	  store i32 %111, i32* %125, align 4, !tbaa !34
DOALL:     	  %.1 = phi i32 [ %123, %122 ], [ %.0, %.._crit_edge_crit_edge ]
DOALL:     	  %.0.lcssa = phi i32 [ %.0, %105 ]
DOALL:     	  %127 = sext i32 %.0.lcssa to i64
DOALL:     	  %indvars.iv21 = phi i64 [ %indvars.iv.next22, %._crit_edge41 ], [ 1, %126 ]
DOALL:     	  %.3 = phi i32 [ %.4, %._crit_edge41 ], [ %.25, %126 ]
DOALL:     	  %129 = icmp sgt i64 %indvars.iv21, %127
DOALL:     	  br i1 %129, label %143, label %130, !prof !45
DOALL:     	  %131 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv21
DOALL:     	  %132 = load i32, i32* %131, align 4, !tbaa !34
DOALL:     	  %133 = sext i32 %132 to i64
DOALL:     	  %134 = getelementptr inbounds [150002 x i32], [150002 x i32]* @iv, i64 0, i64 %133
DOALL:     	  store i32 0, i32* %134, align 4, !tbaa !34
DOALL:     	  %135 = getelementptr inbounds [75002 x double], [75002 x double]* @v, i64 0, i64 %133
DOALL:     	  %136 = load double, double* %135, align 8, !tbaa !40
DOALL:     	  store double 0.000000e+00, double* %135, align 8, !tbaa !40
DOALL:     	  %137 = fcmp une double %136, 0.000000e+00
DOALL:     	  br i1 %137, label %138, label %.._crit_edge41_crit_edge, !prof !46
DOALL:     	  %139 = add nsw i32 %.3, 1
DOALL:     	  %140 = sext i32 %139 to i64
DOALL:     	  %141 = getelementptr inbounds [15825001 x double], [15825001 x double]* @a, i64 0, i64 %140
DOALL:     	  store double %136, double* %141, align 8, !tbaa !40
DOALL:     	  %142 = getelementptr inbounds [15825001 x i32], [15825001 x i32]* @colidx, i64 0, i64 %140
DOALL:     	  store i32 %132, i32* %142, align 4, !tbaa !34
DOALL:     	  %.4 = phi i32 [ %139, %138 ], [ %.3, %.._crit_edge41_crit_edge ]
DOALL:     	  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1
DOALL:     	  %.3.lcssa = phi i32 [ %.3, %128 ]
DOALL:     External nodes: 10
DOALL:     	  br i1 %101, label %147, label %102, !prof !33
DOALL:     	  br i1 %108, label %109, label %126, !prof !43
DOALL:     	  %110 = getelementptr inbounds [15825001 x i32], [15825001 x i32]* @colidx, i64 0, i64 %indvars.iv
DOALL:     	  %115 = getelementptr inbounds [15825001 x double], [15825001 x double]* @a, i64 0, i64 %indvars.iv
DOALL:     	  br label %._crit_edge
DOALL:     	  br label %._crit_edge
DOALL:     	  br label %._crit_edge41
DOALL:     	  br label %._crit_edge41
DOALL:     	  br label %128
DOALL:     	  %146 = add nsw i32 %.3.lcssa, %145
DOALL:     Edges: 153
DOALL:     Loop-carried data dependences
DOALL:         store double %136, double* %141, align 8, !tbaa !40 --->   store double %136, double* %141, align 8, !tbaa !40 via memory
DOALL:         store double %136, double* %141, align 8, !tbaa !40 --->   %116 = load double, double* %115, align 8, !tbaa !40 via memory
DOALL:         store i32 %132, i32* %142, align 4, !tbaa !34 --->   store i32 %132, i32* %142, align 4, !tbaa !34 via memory
DOALL:         store i32 %132, i32* %142, align 4, !tbaa !34 --->   %111 = load i32, i32* %110, align 4, !tbaa !34 via memory
DOALL:         %.3.lcssa = phi i32 [ %.3, %128 ] --->   %.25 = phi i32 [ %.3.lcssa, %143 ], [ 0, %97 ] via variable
DOALL:         %132 = load i32, i32* %131, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         %132 = load i32, i32* %131, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         %132 = load i32, i32* %131, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   store double 0.000000e+00, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   %136 = load double, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   %114 = load double, double* %113, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   store double %117, double* %113, align 8, !tbaa !40 via memory
DOALL:         %119 = load i32, i32* %118, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         %119 = load i32, i32* %118, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         %119 = load i32, i32* %118, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   %119 = load i32, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   %132 = load i32, i32* %131, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   %119 = load i32, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   %132 = load i32, i32* %131, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   %132 = load i32, i32* %131, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   %119 = load i32, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   store double 0.000000e+00, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   %136 = load double, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   %114 = load double, double* %113, align 8, !tbaa !40 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   store double %117, double* %113, align 8, !tbaa !40 via memory
DOALL:         %111 = load i32, i32* %110, align 4, !tbaa !34 --->   store i32 %132, i32* %142, align 4, !tbaa !34 via memory
DOALL:         %116 = load double, double* %115, align 8, !tbaa !40 --->   store double %136, double* %141, align 8, !tbaa !40 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %.06 = phi i32 [ %.lcssa, %143 ], [ 1, %97 ]
DOALL:     	  %104 = sext i32 %.06 to i64
DOALL:     	  %indvars.iv = phi i64 [ %indvars.iv.next, %._crit_edge ], [ %104, %102 ]
DOALL:     	  %106 = load i32, i32* %103, align 4, !tbaa !34
DOALL:     	  %107 = sext i32 %106 to i64
DOALL:     	  %108 = icmp slt i64 %indvars.iv, %107
DOALL:     	  br i1 %108, label %109, label %126, !prof !43
DOALL:     	  %indvars.iv.next = add nsw i64 %indvars.iv, 1
DOALL:     	  %.lcssa = phi i32 [ %106, %105 ]
DOALL:     External nodes: 21
DOALL:     	  br i1 %101, label %147, label %102, !prof !33
DOALL:     	  %103 = getelementptr inbounds [75002 x i32], [75002 x i32]* @rowstr, i64 0, i64 %indvars.iv.next24
DOALL:     	  %.0 = phi i32 [ %.1, %._crit_edge ], [ 0, %102 ]
DOALL:     	  %110 = getelementptr inbounds [15825001 x i32], [15825001 x i32]* @colidx, i64 0, i64 %indvars.iv
DOALL:     	  %111 = load i32, i32* %110, align 4, !tbaa !34
DOALL:     	  %112 = sext i32 %111 to i64
DOALL:     	  %113 = getelementptr inbounds [75002 x double], [75002 x double]* @v, i64 0, i64 %112
DOALL:     	  %114 = load double, double* %113, align 8, !tbaa !40
DOALL:     	  %115 = getelementptr inbounds [15825001 x double], [15825001 x double]* @a, i64 0, i64 %indvars.iv
DOALL:     	  %116 = load double, double* %115, align 8, !tbaa !40
DOALL:     	  %117 = fadd double %114, %116
DOALL:     	  store double %117, double* %113, align 8, !tbaa !40
DOALL:     	  %118 = getelementptr inbounds [150002 x i32], [150002 x i32]* @iv, i64 0, i64 %112
DOALL:     	  %119 = load i32, i32* %118, align 4, !tbaa !34
DOALL:     	  %120 = icmp eq i32 %119, 0
DOALL:     	  %121 = fcmp une double %117, 0.000000e+00
DOALL:     	  %or.cond = and i1 %120, %121
DOALL:     	  br i1 %or.cond, label %122, label %.._crit_edge_crit_edge, !prof !44
DOALL:     	  %.1 = phi i32 [ %123, %122 ], [ %.0, %.._crit_edge_crit_edge ]
DOALL:     	  br label %105
DOALL:     	  store i32 %146, i32* %103, align 4, !tbaa !34
DOALL:     Edges: 46
DOALL:     Loop-carried data dependences
DOALL:         %.lcssa = phi i32 [ %106, %105 ] --->   %.06 = phi i32 [ %.lcssa, %143 ], [ 1, %97 ] via variable
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 30
DOALL:     	  %.15 = phi double [ %.04.lcssa, %33 ], [ %.26.lcssa, %100 ]
DOALL:     	  %.07 = phi double [ %59, %50 ], [ 0.000000e+00, %41 ]
DOALL:     	  %57 = load double, double* %56, align 8, !tbaa !35
DOALL:     	  %58 = fmul double %52, %57
DOALL:     	  %59 = fadd double %.07, %58
DOALL:     	  %.07.lcssa = phi double [ %.07, %48 ]
DOALL:     	  store double %.07.lcssa, double* %61, align 8, !tbaa !35
DOALL:     	  %.09 = phi double [ %69, %63 ], [ 0.000000e+00, %.preheader14.preheader ]
DOALL:     	  %65 = load double, double* %64, align 8, !tbaa !35
DOALL:     	  %67 = load double, double* %66, align 8, !tbaa !35
DOALL:     	  %68 = fmul double %65, %67
DOALL:     	  %69 = fadd double %.09, %68
DOALL:     	  %.09.lcssa = phi double [ %.09, %.preheader14 ]
DOALL:     	  %71 = fdiv double %.15, %.09.lcssa
DOALL:     	  %.26 = phi double [ %88, %74 ], [ 0.000000e+00, %70 ]
DOALL:     	  %78 = load double, double* %77, align 8, !tbaa !35
DOALL:     	  %82 = load double, double* %81, align 8, !tbaa !35
DOALL:     	  %84 = load double, double* %83, align 8, !tbaa !35
DOALL:     	  %85 = fmul double %71, %84
DOALL:     	  %86 = fsub double %82, %85
DOALL:     	  store double %86, double* %81, align 8, !tbaa !35
DOALL:     	  %87 = fmul double %86, %86
DOALL:     	  %88 = fadd double %.26, %87
DOALL:     	  %.26.lcssa = phi double [ %.26, %72 ]
DOALL:     	  %90 = fdiv double %.26.lcssa, %.15
DOALL:     	  %95 = load double, double* %94, align 8, !tbaa !35
DOALL:     	  %97 = load double, double* %96, align 8, !tbaa !35
DOALL:     	  %98 = fmul double %90, %97
DOALL:     	  %99 = fadd double %95, %98
DOALL:     	  store double %99, double* %96, align 8, !tbaa !35
DOALL:     External nodes: 17
DOALL:     	  br i1 %exitcond, label %.preheader13, label %.preheader15.preheader, !prof !42
DOALL:     	  br i1 %40, label %.preheader14.preheader, label %41, !prof !43
DOALL:     	  br i1 %49, label %50, label %60, !prof !44
DOALL:     	  %52 = load double, double* %51, align 8, !tbaa !35
DOALL:     	  %56 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %55
DOALL:     	  %61 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv27
DOALL:     	  br i1 %62, label %70, label %63, !prof !43
DOALL:     	  %64 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv29
DOALL:     	  %66 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv29
DOALL:     	  br i1 %73, label %89, label %74, !prof !43
DOALL:     	  %77 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv31
DOALL:     	  %79 = fmul double %71, %78
DOALL:     	  %81 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv31
DOALL:     	  %83 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv31
DOALL:     	  br i1 %92, label %100, label %93, !prof !43
DOALL:     	  %94 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv33
DOALL:     	  %96 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv33
DOALL:     Edges: 99
DOALL:     Loop-carried data dependences
DOALL:         %65 = load double, double* %64, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         %67 = load double, double* %66, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL:         %78 = load double, double* %77, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         %84 = load double, double* %83, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   %95 = load double, double* %94, align 8, !tbaa !35 via memory
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   %82 = load double, double* %81, align 8, !tbaa !35 via memory
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   store double %86, double* %81, align 8, !tbaa !35 via memory
DOALL:         %.26.lcssa = phi double [ %.26, %72 ] --->   %.15 = phi double [ %.04.lcssa, %33 ], [ %.26.lcssa, %100 ] via variable
DOALL:         %95 = load double, double* %94, align 8, !tbaa !35 --->   store double %86, double* %81, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %97 = load double, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %78 = load double, double* %77, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %57 = load double, double* %56, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %65 = load double, double* %64, align 8, !tbaa !35 via memory
DOALL:         %57 = load double, double* %56, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %.07.lcssa, double* %61, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 8
DOALL:     Live-out ID = 9
DOALL:     Live-out ID = 10
Inliner:   Inlining in: makea (253 instructions. The inlining will add 30 instructions),   %68 = tail call double @randlc(double* nonnull @tran, double %67) #13
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %30 = icmp sgt i64 %indvars.iv56, %28" (3.303456e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv54, %37" (3.281944e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.254931e-04%)
Noelle:     Loop "  %53 = icmp sgt i64 %indvars.iv49, %51" (2.330487e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308426e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv44, %71" (1.792686e-04%)
Noelle:     Loop "  %87 = icmp sgt i64 %indvars.iv46, %85" (1.792684e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.254931e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.813868e+01%)
Noelle:     Loop "  %113 = icmp sgt i64 %indvars.iv, %111" (2.016779e-02%)
Noelle:     Loop "  %139 = icmp sgt i64 %indvars.iv39, %137" (1.344518e-02%)
Noelle:  Function "conj_grad"
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (2.452482e-02%)
Noelle:     Loop "  %27 = icmp sgt i64 %indvars.iv35, %25" (1.362446e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 26" (9.559610e+01%)
Noelle:     Loop "  %40 = icmp sgt i64 %indvars.iv27, %37" (9.402929e+01%)
Noelle:     Loop "  %49 = icmp slt i64 %indvars.iv25, %47" (9.351837e+01%)
Noelle:     Loop "  %62 = icmp sgt i64 %indvars.iv29, %25" (4.087338e-01%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv31, %25" (7.493437e-01%)
Noelle:     Loop "  %92 = icmp sgt i64 %indvars.iv33, %25" (4.087333e-01%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv23, %37" (3.761171e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv21, %110" (3.740734e+00%)
Noelle:     Loop "  %125 = icmp sgt i64 %indvars.iv, %25" (1.771178e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434149e-04%)
Noelle:     Loop "  %30 = icmp sgt i32 %.03, %0" (1.412903e-01%)
Noelle:     Loop "  %32 = shl nsw i32 %.04.i, 1" (1.496344e-03%)
Noelle:     Loop "  %36 = icmp slt i32 %.01.ph.i, 13" (3.387795e-02%)
Noelle:     Loop "  %38 = load double, double* @amult, align 8, !tbaa !40" (2.732217e-02%)
Noelle:     Loop "  %85 = icmp sgt i64 %indvars.iv.i3, %37" (2.369211e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850189e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %wide.trip.count" (1.000732e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (9.526358e-02%)
Noelle:     Loop "  %147 = icmp sgt i32 %.16, %7" (3.918868e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.613782e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.957159e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793093e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499422e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.477905e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.852070e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793090e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.613782e-04%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (1.838674e-01%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (1.048000e-01%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (7.872676e-02%)
Noelle:  Function "sprnvc"
Noelle:     Loop "  %7 = shl nsw i32 %.04, 1" (1.506031e-03%)
Noelle:     Loop "  %10 = icmp slt i32 %.01.ph, 13" (3.288414e-02%)
Noelle:     Loop "  %12 = load double, double* @amult, align 8, !tbaa !35" (2.628592e-02%)
Noelle:     Loop "  %32 = icmp sgt i64 %indvars.iv, %11" (2.384548e-03%)
Noelle:  Function "randlc"
Noelle:  Function "vecset"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv, %8" (2.868402e-03%)
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_read"
Noelle:  Function "timer_clear"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %30 = icmp sgt i64 %indvars.iv56, %28" (3.303081e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv54, %37" (3.281571e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.254789e-04%)
Noelle:     Loop "  %53 = icmp sgt i64 %indvars.iv49, %51" (2.330223e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308278e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv44, %71" (1.792483e-04%)
Noelle:     Loop "  %87 = icmp sgt i64 %indvars.iv46, %85" (1.792481e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.254789e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.812755e+01%)
Noelle:     Loop "  %113 = icmp sgt i64 %indvars.iv, %111" (2.016550e-02%)
Noelle:     Loop "  %139 = icmp sgt i64 %indvars.iv39, %137" (1.344366e-02%)
Noelle:  Function "conj_grad"
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (2.452203e-02%)
Noelle:     Loop "  %27 = icmp sgt i64 %indvars.iv35, %25" (1.362292e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 26" (9.558526e+01%)
Noelle:     Loop "  %40 = icmp sgt i64 %indvars.iv27, %37" (9.401862e+01%)
Noelle:     Loop "  %49 = icmp slt i64 %indvars.iv25, %47" (9.350776e+01%)
Noelle:     Loop "  %62 = icmp sgt i64 %indvars.iv29, %25" (4.086874e-01%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv31, %25" (7.492587e-01%)
Noelle:     Loop "  %92 = icmp sgt i64 %indvars.iv33, %25" (4.086869e-01%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv23, %37" (3.760744e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv21, %110" (3.740310e+00%)
Noelle:     Loop "  %125 = icmp sgt i64 %indvars.iv, %25" (1.770977e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.433986e-04%)
Noelle:     Loop "  %30 = icmp sgt i32 %.03, %0" (1.408691e-01%)
Noelle:     Loop "  %32 = shl nsw i32 %.04.i, 1" (1.496175e-03%)
Noelle:     Loop "  %36 = icmp slt i32 %.01.ph.i, 13" (3.346895e-02%)
Noelle:     Loop "  %38 = load double, double* @amult, align 8, !tbaa !40" (2.691391e-02%)
Noelle:     Loop "  %112 = icmp sgt i64 %indvars.iv.i3, %37" (2.368942e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.849866e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %wide.trip.count" (1.000618e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (9.525278e-02%)
Noelle:     Loop "  %174 = icmp sgt i32 %.16, %7" (3.918423e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.613599e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.956597e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.792889e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499138e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.477624e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.851066e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.792887e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.613599e-04%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (1.838466e-01%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (1.047881e-01%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (7.871783e-02%)
Noelle:  Function "sprnvc"
Noelle:     Loop "  %7 = shl nsw i32 %.04, 1" (1.505860e-03%)
Noelle:     Loop "  %10 = icmp slt i32 %.01.ph, 13" (3.288041e-02%)
Noelle:     Loop "  %12 = load double, double* @amult, align 8, !tbaa !35" (2.628294e-02%)
Noelle:     Loop "  %32 = icmp sgt i64 %indvars.iv, %11" (2.384278e-03%)
Noelle:  Function "randlc"
Noelle:  Function "vecset"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv, %8" (2.868077e-03%)
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_read"
Noelle:  Function "timer_clear"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
NOELLE: FixedPoint:       There are 28 different instructions and 84 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.5Wh0sT4CYZ -o /tmp/tmp.5Wh0sT4CYZ
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.5Wh0sT4CYZ -o /tmp/tmp.5Wh0sT4CYZ
NOELLE: FixedPoint:     Invocation 4
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
Inliner: Start
Inliner:   Number of program instructions = 1214
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %145 = load i32, i32* %144, align 4, !tbaa !34
DOALL:     	  %146 = add nsw i32 %.3.lcssa, %145
DOALL:     	  store i32 %146, i32* %103, align 4, !tbaa !34
DOALL:     External nodes: 5
DOALL:     	  br i1 %101, label %147, label %102, !prof !33
DOALL:     	  %103 = getelementptr inbounds [75002 x i32], [75002 x i32]* @rowstr, i64 0, i64 %indvars.iv.next24
DOALL:     	  %106 = load i32, i32* %103, align 4, !tbaa !34
DOALL:     	  %.3.lcssa = phi i32 [ %.3, %128 ]
DOALL:     	  %144 = getelementptr [75002 x i32], [75002 x i32]* @rowstr, i64 0, i64 1
DOALL:     Edges: 10
DOALL:     Loop-carried data dependences
DOALL:         store i32 %146, i32* %103, align 4, !tbaa !34 --->   %145 = load i32, i32* %144, align 4, !tbaa !34 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 46
DOALL:     	  %.25 = phi i32 [ %.3.lcssa, %143 ], [ 0, %97 ]
DOALL:     	  %.0 = phi i32 [ %.1, %._crit_edge ], [ 0, %102 ]
DOALL:     	  %111 = load i32, i32* %110, align 4, !tbaa !34
DOALL:     	  %112 = sext i32 %111 to i64
DOALL:     	  %113 = getelementptr inbounds [75002 x double], [75002 x double]* @v, i64 0, i64 %112
DOALL:     	  %114 = load double, double* %113, align 8, !tbaa !40
DOALL:     	  %116 = load double, double* %115, align 8, !tbaa !40
DOALL:     	  %117 = fadd double %114, %116
DOALL:     	  store double %117, double* %113, align 8, !tbaa !40
DOALL:     	  %118 = getelementptr inbounds [150002 x i32], [150002 x i32]* @iv, i64 0, i64 %112
DOALL:     	  %119 = load i32, i32* %118, align 4, !tbaa !34
DOALL:     	  %120 = icmp eq i32 %119, 0
DOALL:     	  %121 = fcmp une double %117, 0.000000e+00
DOALL:     	  %or.cond = and i1 %120, %121
DOALL:     	  br i1 %or.cond, label %122, label %.._crit_edge_crit_edge, !prof !44
DOALL:     	  store i32 1, i32* %118, align 4, !tbaa !34
DOALL:     	  %123 = add nsw i32 %.0, 1
DOALL:     	  %124 = sext i32 %123 to i64
DOALL:     	  %125 = getelementptr inbounds i32, i32* %11, i64 %124
DOALL:     	  store i32 %111, i32* %125, align 4, !tbaa !34
DOALL:     	  %.1 = phi i32 [ %123, %122 ], [ %.0, %.._crit_edge_crit_edge ]
DOALL:     	  %.0.lcssa = phi i32 [ %.0, %105 ]
DOALL:     	  %127 = sext i32 %.0.lcssa to i64
DOALL:     	  %indvars.iv21 = phi i64 [ %indvars.iv.next22, %._crit_edge41 ], [ 1, %126 ]
DOALL:     	  %.3 = phi i32 [ %.4, %._crit_edge41 ], [ %.25, %126 ]
DOALL:     	  %129 = icmp sgt i64 %indvars.iv21, %127
DOALL:     	  br i1 %129, label %143, label %130, !prof !45
DOALL:     	  %131 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv21
DOALL:     	  %132 = load i32, i32* %131, align 4, !tbaa !34
DOALL:     	  %133 = sext i32 %132 to i64
DOALL:     	  %134 = getelementptr inbounds [150002 x i32], [150002 x i32]* @iv, i64 0, i64 %133
DOALL:     	  store i32 0, i32* %134, align 4, !tbaa !34
DOALL:     	  %135 = getelementptr inbounds [75002 x double], [75002 x double]* @v, i64 0, i64 %133
DOALL:     	  %136 = load double, double* %135, align 8, !tbaa !40
DOALL:     	  store double 0.000000e+00, double* %135, align 8, !tbaa !40
DOALL:     	  %137 = fcmp une double %136, 0.000000e+00
DOALL:     	  br i1 %137, label %138, label %.._crit_edge41_crit_edge, !prof !46
DOALL:     	  %139 = add nsw i32 %.3, 1
DOALL:     	  %140 = sext i32 %139 to i64
DOALL:     	  %141 = getelementptr inbounds [15825001 x double], [15825001 x double]* @a, i64 0, i64 %140
DOALL:     	  store double %136, double* %141, align 8, !tbaa !40
DOALL:     	  %142 = getelementptr inbounds [15825001 x i32], [15825001 x i32]* @colidx, i64 0, i64 %140
DOALL:     	  store i32 %132, i32* %142, align 4, !tbaa !34
DOALL:     	  %.4 = phi i32 [ %139, %138 ], [ %.3, %.._crit_edge41_crit_edge ]
DOALL:     	  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1
DOALL:     	  %.3.lcssa = phi i32 [ %.3, %128 ]
DOALL:     External nodes: 10
DOALL:     	  br i1 %101, label %147, label %102, !prof !33
DOALL:     	  br i1 %108, label %109, label %126, !prof !43
DOALL:     	  %110 = getelementptr inbounds [15825001 x i32], [15825001 x i32]* @colidx, i64 0, i64 %indvars.iv
DOALL:     	  %115 = getelementptr inbounds [15825001 x double], [15825001 x double]* @a, i64 0, i64 %indvars.iv
DOALL:     	  br label %._crit_edge
DOALL:     	  br label %._crit_edge
DOALL:     	  br label %._crit_edge41
DOALL:     	  br label %._crit_edge41
DOALL:     	  br label %128
DOALL:     	  %146 = add nsw i32 %.3.lcssa, %145
DOALL:     Edges: 153
DOALL:     Loop-carried data dependences
DOALL:         %132 = load i32, i32* %131, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         %132 = load i32, i32* %131, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         %132 = load i32, i32* %131, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   %132 = load i32, i32* %131, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   %119 = load i32, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 0, i32* %134, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   %136 = load double, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   %114 = load double, double* %113, align 8, !tbaa !40 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   store double 0.000000e+00, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double 0.000000e+00, double* %135, align 8, !tbaa !40 --->   store double %117, double* %113, align 8, !tbaa !40 via memory
DOALL:         store double %136, double* %141, align 8, !tbaa !40 --->   store double %136, double* %141, align 8, !tbaa !40 via memory
DOALL:         store double %136, double* %141, align 8, !tbaa !40 --->   %116 = load double, double* %115, align 8, !tbaa !40 via memory
DOALL:         store i32 %132, i32* %142, align 4, !tbaa !34 --->   store i32 %132, i32* %142, align 4, !tbaa !34 via memory
DOALL:         store i32 %132, i32* %142, align 4, !tbaa !34 --->   %111 = load i32, i32* %110, align 4, !tbaa !34 via memory
DOALL:         %119 = load i32, i32* %118, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         %119 = load i32, i32* %118, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         %119 = load i32, i32* %118, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   %132 = load i32, i32* %131, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   %119 = load i32, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 1, i32* %118, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   store i32 0, i32* %134, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   %132 = load i32, i32* %131, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   store i32 %111, i32* %125, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   %119 = load i32, i32* %118, align 4, !tbaa !34 via memory
DOALL:         store i32 %111, i32* %125, align 4, !tbaa !34 --->   store i32 1, i32* %118, align 4, !tbaa !34 via memory
DOALL:         %111 = load i32, i32* %110, align 4, !tbaa !34 --->   store i32 %132, i32* %142, align 4, !tbaa !34 via memory
DOALL:         %116 = load double, double* %115, align 8, !tbaa !40 --->   store double %136, double* %141, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   store double 0.000000e+00, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   %136 = load double, double* %135, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   %114 = load double, double* %113, align 8, !tbaa !40 via memory
DOALL:         store double %117, double* %113, align 8, !tbaa !40 --->   store double %117, double* %113, align 8, !tbaa !40 via memory
DOALL:         %.3.lcssa = phi i32 [ %.3, %128 ] --->   %.25 = phi i32 [ %.3.lcssa, %143 ], [ 0, %97 ] via variable
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %.06 = phi i32 [ %.lcssa, %143 ], [ 1, %97 ]
DOALL:     	  %104 = sext i32 %.06 to i64
DOALL:     	  %indvars.iv = phi i64 [ %indvars.iv.next, %._crit_edge ], [ %104, %102 ]
DOALL:     	  %106 = load i32, i32* %103, align 4, !tbaa !34
DOALL:     	  %107 = sext i32 %106 to i64
DOALL:     	  %108 = icmp slt i64 %indvars.iv, %107
DOALL:     	  br i1 %108, label %109, label %126, !prof !43
DOALL:     	  %indvars.iv.next = add nsw i64 %indvars.iv, 1
DOALL:     	  %.lcssa = phi i32 [ %106, %105 ]
DOALL:     External nodes: 21
DOALL:     	  br i1 %101, label %147, label %102, !prof !33
DOALL:     	  %103 = getelementptr inbounds [75002 x i32], [75002 x i32]* @rowstr, i64 0, i64 %indvars.iv.next24
DOALL:     	  %.0 = phi i32 [ %.1, %._crit_edge ], [ 0, %102 ]
DOALL:     	  %110 = getelementptr inbounds [15825001 x i32], [15825001 x i32]* @colidx, i64 0, i64 %indvars.iv
DOALL:     	  %111 = load i32, i32* %110, align 4, !tbaa !34
DOALL:     	  %112 = sext i32 %111 to i64
DOALL:     	  %113 = getelementptr inbounds [75002 x double], [75002 x double]* @v, i64 0, i64 %112
DOALL:     	  %114 = load double, double* %113, align 8, !tbaa !40
DOALL:     	  %115 = getelementptr inbounds [15825001 x double], [15825001 x double]* @a, i64 0, i64 %indvars.iv
DOALL:     	  %116 = load double, double* %115, align 8, !tbaa !40
DOALL:     	  %117 = fadd double %114, %116
DOALL:     	  store double %117, double* %113, align 8, !tbaa !40
DOALL:     	  %118 = getelementptr inbounds [150002 x i32], [150002 x i32]* @iv, i64 0, i64 %112
DOALL:     	  %119 = load i32, i32* %118, align 4, !tbaa !34
DOALL:     	  %120 = icmp eq i32 %119, 0
DOALL:     	  %121 = fcmp une double %117, 0.000000e+00
DOALL:     	  %or.cond = and i1 %120, %121
DOALL:     	  br i1 %or.cond, label %122, label %.._crit_edge_crit_edge, !prof !44
DOALL:     	  %.1 = phi i32 [ %123, %122 ], [ %.0, %.._crit_edge_crit_edge ]
DOALL:     	  br label %105
DOALL:     	  store i32 %146, i32* %103, align 4, !tbaa !34
DOALL:     Edges: 46
DOALL:     Loop-carried data dependences
DOALL:         %.lcssa = phi i32 [ %106, %105 ] --->   %.06 = phi i32 [ %.lcssa, %143 ], [ 1, %97 ] via variable
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 30
DOALL:     	  %.15 = phi double [ %.04.lcssa, %33 ], [ %.26.lcssa, %100 ]
DOALL:     	  %.07 = phi double [ %59, %50 ], [ 0.000000e+00, %41 ]
DOALL:     	  %57 = load double, double* %56, align 8, !tbaa !35
DOALL:     	  %58 = fmul double %52, %57
DOALL:     	  %59 = fadd double %.07, %58
DOALL:     	  %.07.lcssa = phi double [ %.07, %48 ]
DOALL:     	  store double %.07.lcssa, double* %61, align 8, !tbaa !35
DOALL:     	  %.09 = phi double [ %69, %63 ], [ 0.000000e+00, %.preheader14.preheader ]
DOALL:     	  %65 = load double, double* %64, align 8, !tbaa !35
DOALL:     	  %67 = load double, double* %66, align 8, !tbaa !35
DOALL:     	  %68 = fmul double %65, %67
DOALL:     	  %69 = fadd double %.09, %68
DOALL:     	  %.09.lcssa = phi double [ %.09, %.preheader14 ]
DOALL:     	  %71 = fdiv double %.15, %.09.lcssa
DOALL:     	  %.26 = phi double [ %88, %74 ], [ 0.000000e+00, %70 ]
DOALL:     	  %78 = load double, double* %77, align 8, !tbaa !35
DOALL:     	  %82 = load double, double* %81, align 8, !tbaa !35
DOALL:     	  %84 = load double, double* %83, align 8, !tbaa !35
DOALL:     	  %85 = fmul double %71, %84
DOALL:     	  %86 = fsub double %82, %85
DOALL:     	  store double %86, double* %81, align 8, !tbaa !35
DOALL:     	  %87 = fmul double %86, %86
DOALL:     	  %88 = fadd double %.26, %87
DOALL:     	  %.26.lcssa = phi double [ %.26, %72 ]
DOALL:     	  %90 = fdiv double %.26.lcssa, %.15
DOALL:     	  %95 = load double, double* %94, align 8, !tbaa !35
DOALL:     	  %97 = load double, double* %96, align 8, !tbaa !35
DOALL:     	  %98 = fmul double %90, %97
DOALL:     	  %99 = fadd double %95, %98
DOALL:     	  store double %99, double* %96, align 8, !tbaa !35
DOALL:     External nodes: 17
DOALL:     	  br i1 %exitcond, label %.preheader13, label %.preheader15.preheader, !prof !42
DOALL:     	  br i1 %40, label %.preheader14.preheader, label %41, !prof !43
DOALL:     	  br i1 %49, label %50, label %60, !prof !44
DOALL:     	  %52 = load double, double* %51, align 8, !tbaa !35
DOALL:     	  %56 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %55
DOALL:     	  %61 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv27
DOALL:     	  br i1 %62, label %70, label %63, !prof !43
DOALL:     	  %64 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv29
DOALL:     	  %66 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv29
DOALL:     	  br i1 %73, label %89, label %74, !prof !43
DOALL:     	  %77 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv31
DOALL:     	  %79 = fmul double %71, %78
DOALL:     	  %81 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv31
DOALL:     	  %83 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv31
DOALL:     	  br i1 %92, label %100, label %93, !prof !43
DOALL:     	  %94 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv33
DOALL:     	  %96 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv33
DOALL:     Edges: 99
DOALL:     Loop-carried data dependences
DOALL:         %57 = load double, double* %56, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %.07.lcssa, double* %61, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL:         %65 = load double, double* %64, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         %67 = load double, double* %66, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL:         %78 = load double, double* %77, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         %84 = load double, double* %83, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   %95 = load double, double* %94, align 8, !tbaa !35 via memory
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   %82 = load double, double* %81, align 8, !tbaa !35 via memory
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   store double %86, double* %81, align 8, !tbaa !35 via memory
DOALL:         %.26.lcssa = phi double [ %.26, %72 ] --->   %.15 = phi double [ %.04.lcssa, %33 ], [ %.26.lcssa, %100 ] via variable
DOALL:         %95 = load double, double* %94, align 8, !tbaa !35 --->   store double %86, double* %81, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %78 = load double, double* %77, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %57 = load double, double* %56, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %97 = load double, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %65 = load double, double* %64, align 8, !tbaa !35 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 8
DOALL:     Live-out ID = 9
DOALL:     Live-out ID = 10
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: main (273 instructions. The inlining will add 188 instructions),   call fastcc void @conj_grad(i32* %100, i32* %101, double* %102, double* %103, double* %104, double* %105, double* %106, double* %107, double* nonnull %3)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %30 = icmp sgt i64 %indvars.iv56, %28" (3.303081e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv54, %37" (3.281571e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.254789e-04%)
Noelle:     Loop "  %53 = icmp sgt i64 %indvars.iv49, %51" (2.330223e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308278e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv44, %71" (1.792483e-04%)
Noelle:     Loop "  %87 = icmp sgt i64 %indvars.iv46, %85" (1.792481e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.254789e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.812755e+01%)
Noelle:     Loop "  %113 = icmp sgt i64 %indvars.iv, %111" (2.016550e-02%)
Noelle:     Loop "  %139 = icmp sgt i64 %indvars.iv39, %137" (1.344366e-02%)
Noelle:  Function "conj_grad"
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (2.452203e-02%)
Noelle:     Loop "  %27 = icmp sgt i64 %indvars.iv35, %25" (1.362292e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 26" (9.558526e+01%)
Noelle:     Loop "  %40 = icmp sgt i64 %indvars.iv27, %37" (9.401862e+01%)
Noelle:     Loop "  %49 = icmp slt i64 %indvars.iv25, %47" (9.350776e+01%)
Noelle:     Loop "  %62 = icmp sgt i64 %indvars.iv29, %25" (4.086874e-01%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv31, %25" (7.492587e-01%)
Noelle:     Loop "  %92 = icmp sgt i64 %indvars.iv33, %25" (4.086869e-01%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv23, %37" (3.760744e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv21, %110" (3.740310e+00%)
Noelle:     Loop "  %125 = icmp sgt i64 %indvars.iv, %25" (1.770977e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.433986e-04%)
Noelle:     Loop "  %30 = icmp sgt i32 %.03, %0" (1.408691e-01%)
Noelle:     Loop "  %32 = shl nsw i32 %.04.i, 1" (1.496175e-03%)
Noelle:     Loop "  %35 = icmp slt i32 %.01.ph.i, 13" (3.346895e-02%)
Noelle:     Loop "  %37 = load double, double* @amult, align 8, !tbaa !40" (2.691391e-02%)
Noelle:     Loop "  %111 = icmp sgt i64 %indvars.iv.i3, %36" (2.368942e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.849866e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %wide.trip.count" (1.000618e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (9.525278e-02%)
Noelle:     Loop "  %174 = icmp sgt i32 %.16, %7" (3.918423e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.613599e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.956597e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.792889e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499138e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.477624e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.851066e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.792887e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.613599e-04%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (1.838466e-01%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (1.047881e-01%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (7.871783e-02%)
Noelle:  Function "sprnvc"
Noelle:     Loop "  %7 = shl nsw i32 %.04, 1" (1.505860e-03%)
Noelle:     Loop "  %10 = icmp slt i32 %.01.ph, 13" (3.288041e-02%)
Noelle:     Loop "  %12 = load double, double* @amult, align 8, !tbaa !35" (2.628294e-02%)
Noelle:     Loop "  %32 = icmp sgt i64 %indvars.iv, %11" (2.384278e-03%)
Noelle:  Function "randlc"
Noelle:  Function "vecset"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv, %8" (2.868077e-03%)
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_read"
Noelle:  Function "timer_clear"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %30 = icmp sgt i64 %indvars.iv56, %28" (1.667726e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv54, %37" (1.656866e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (6.335430e-05%)
Noelle:     Loop "  %53 = icmp sgt i64 %indvars.iv49, %51" (1.176530e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (5.018819e+01%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv44, %71" (9.050248e-05%)
Noelle:     Loop "  %87 = icmp sgt i64 %indvars.iv46, %85" (9.050236e-05%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (6.335430e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (4.952696e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %wide.trip.count.i" (1.221827e-02%)
Noelle:     Loop "  %125 = icmp sgt i64 %indvars.iv35.i, %123" (6.787714e-03%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (4.760902e+01%)
Noelle:     Loop "  %138 = icmp sgt i64 %indvars.iv27.i, %135" (4.682843e+01%)
Noelle:     Loop "  %147 = icmp slt i64 %indvars.iv25.i, %145" (4.659087e+01%)
Noelle:     Loop "  %160 = icmp sgt i64 %indvars.iv29.i, %123" (2.036312e-01%)
Noelle:     Loop "  %171 = icmp sgt i64 %indvars.iv31.i, %123" (3.733232e-01%)
Noelle:     Loop "  %190 = icmp sgt i64 %indvars.iv33.i, %123" (2.036310e-01%)
Noelle:     Loop "  %201 = icmp sgt i64 %indvars.iv23.i, %135" (1.873137e+00%)
Noelle:     Loop "  %210 = icmp slt i64 %indvars.iv21.i, %208" (1.863634e+00%)
Noelle:     Loop "  %223 = icmp sgt i64 %indvars.iv.i, %123" (8.824017e-03%)
Noelle:     Loop "  %238 = icmp sgt i64 %indvars.iv, %236" (1.018156e-02%)
Noelle:     Loop "  %264 = icmp sgt i64 %indvars.iv39, %262" (6.787705e-03%)
Noelle:  Function "conj_grad"
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (1.238118e-02%)
Noelle:     Loop "  %27 = icmp sgt i64 %indvars.iv35, %25" (6.878212e-03%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 26" (4.826101e+01%)
Noelle:     Loop "  %40 = icmp sgt i64 %indvars.iv27, %37" (4.747001e+01%)
Noelle:     Loop "  %49 = icmp slt i64 %indvars.iv25, %47" (4.721208e+01%)
Noelle:     Loop "  %62 = icmp sgt i64 %indvars.iv29, %25" (2.063463e-01%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv31, %25" (3.783008e-01%)
Noelle:     Loop "  %92 = icmp sgt i64 %indvars.iv33, %25" (2.063461e-01%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv23, %37" (1.898800e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv21, %110" (1.888483e+00%)
Noelle:     Loop "  %125 = icmp sgt i64 %indvars.iv, %25" (8.941664e-03%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (7.240196e-05%)
Noelle:     Loop "  %30 = icmp sgt i32 %.03, %0" (7.112484e-02%)
Noelle:     Loop "  %32 = shl nsw i32 %.04.i, 1" (7.554187e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.01.ph.i, 13" (1.689848e-02%)
Noelle:     Loop "  %37 = load double, double* @amult, align 8, !tbaa !40" (1.358884e-02%)
Noelle:     Loop "  %111 = icmp sgt i64 %indvars.iv.i3, %36" (1.196079e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (1.438897e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %wide.trip.count" (5.052122e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (4.809314e-02%)
Noelle:     Loop "  %174 = icmp sgt i32 %.16, %7" (1.978412e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (8.147063e-05%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (2.502586e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (9.052300e-05%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (1.261815e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (1.250952e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (4.468904e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (9.052288e-05%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (8.147063e-05%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (9.282414e-02%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (5.290751e-02%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (3.974464e-02%)
Noelle:  Function "sprnvc"
Noelle:     Loop "  %7 = shl nsw i32 %.04, 1" (7.603089e-04%)
Noelle:     Loop "  %10 = icmp slt i32 %.01.ph, 13" (1.660132e-02%)
Noelle:     Loop "  %12 = load double, double* @amult, align 8, !tbaa !35" (1.327026e-02%)
Noelle:     Loop "  %32 = icmp sgt i64 %indvars.iv, %11" (1.203822e-03%)
Noelle:  Function "randlc"
Noelle:  Function "vecset"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv, %8" (1.448092e-03%)
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_read"
Noelle:  Function "timer_clear"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
NOELLE: FixedPoint:       There are 140 different instructions and 347 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.5Wh0sT4CYZ -o /tmp/tmp.5Wh0sT4CYZ
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.5Wh0sT4CYZ -o /tmp/tmp.5Wh0sT4CYZ
NOELLE: FixedPoint:     Invocation 5
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
Inliner: Start
Inliner:   Number of program instructions = 1400
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 30
DOALL:     	  %.15 = phi double [ %.04.lcssa, %33 ], [ %.26.lcssa, %100 ]
DOALL:     	  %.07 = phi double [ %59, %50 ], [ 0.000000e+00, %41 ]
DOALL:     	  %57 = load double, double* %56, align 8, !tbaa !35
DOALL:     	  %58 = fmul double %52, %57
DOALL:     	  %59 = fadd double %.07, %58
DOALL:     	  %.07.lcssa = phi double [ %.07, %48 ]
DOALL:     	  store double %.07.lcssa, double* %61, align 8, !tbaa !35
DOALL:     	  %.09 = phi double [ %69, %63 ], [ 0.000000e+00, %.preheader14.preheader ]
DOALL:     	  %65 = load double, double* %64, align 8, !tbaa !35
DOALL:     	  %67 = load double, double* %66, align 8, !tbaa !35
DOALL:     	  %68 = fmul double %65, %67
DOALL:     	  %69 = fadd double %.09, %68
DOALL:     	  %.09.lcssa = phi double [ %.09, %.preheader14 ]
DOALL:     	  %71 = fdiv double %.15, %.09.lcssa
DOALL:     	  %.26 = phi double [ %88, %74 ], [ 0.000000e+00, %70 ]
DOALL:     	  %78 = load double, double* %77, align 8, !tbaa !35
DOALL:     	  %82 = load double, double* %81, align 8, !tbaa !35
DOALL:     	  %84 = load double, double* %83, align 8, !tbaa !35
DOALL:     	  %85 = fmul double %71, %84
DOALL:     	  %86 = fsub double %82, %85
DOALL:     	  store double %86, double* %81, align 8, !tbaa !35
DOALL:     	  %87 = fmul double %86, %86
DOALL:     	  %88 = fadd double %.26, %87
DOALL:     	  %.26.lcssa = phi double [ %.26, %72 ]
DOALL:     	  %90 = fdiv double %.26.lcssa, %.15
DOALL:     	  %95 = load double, double* %94, align 8, !tbaa !35
DOALL:     	  %97 = load double, double* %96, align 8, !tbaa !35
DOALL:     	  %98 = fmul double %90, %97
DOALL:     	  %99 = fadd double %95, %98
DOALL:     	  store double %99, double* %96, align 8, !tbaa !35
DOALL:     External nodes: 17
DOALL:     	  br i1 %exitcond, label %.preheader13, label %.preheader15.preheader, !prof !42
DOALL:     	  br i1 %40, label %.preheader14.preheader, label %41, !prof !43
DOALL:     	  br i1 %49, label %50, label %60, !prof !44
DOALL:     	  %52 = load double, double* %51, align 8, !tbaa !35
DOALL:     	  %56 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %55
DOALL:     	  %61 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv27
DOALL:     	  br i1 %62, label %70, label %63, !prof !43
DOALL:     	  %64 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv29
DOALL:     	  %66 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv29
DOALL:     	  br i1 %73, label %89, label %74, !prof !43
DOALL:     	  %77 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv31
DOALL:     	  %79 = fmul double %71, %78
DOALL:     	  %81 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv31
DOALL:     	  %83 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv31
DOALL:     	  br i1 %92, label %100, label %93, !prof !43
DOALL:     	  %94 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv33
DOALL:     	  %96 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv33
DOALL:     Edges: 99
DOALL:     Loop-carried data dependences
DOALL:         %57 = load double, double* %56, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %.07.lcssa, double* %61, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL:         %65 = load double, double* %64, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         %67 = load double, double* %66, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL:         %78 = load double, double* %77, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         %84 = load double, double* %83, align 8, !tbaa !35 --->   store double %.07.lcssa, double* %61, align 8, !tbaa !35 via memory
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   %95 = load double, double* %94, align 8, !tbaa !35 via memory
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   %82 = load double, double* %81, align 8, !tbaa !35 via memory
DOALL:         store double %86, double* %81, align 8, !tbaa !35 --->   store double %86, double* %81, align 8, !tbaa !35 via memory
DOALL:         %.26.lcssa = phi double [ %.26, %72 ] --->   %.15 = phi double [ %.04.lcssa, %33 ], [ %.26.lcssa, %100 ] via variable
DOALL:         %95 = load double, double* %94, align 8, !tbaa !35 --->   store double %86, double* %81, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %97 = load double, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %78 = load double, double* %77, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %57 = load double, double* %56, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   store double %99, double* %96, align 8, !tbaa !35 via memory
DOALL:         store double %99, double* %96, align 8, !tbaa !35 --->   %65 = load double, double* %64, align 8, !tbaa !35 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca double, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 1
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 30
DOALL:     	  %154 = load double, double* %153, align 8, !tbaa !32
DOALL:     	  %155 = fmul double %149, %154
DOALL:     	  %156 = fadd double %.07.i, %155
DOALL:     	  %.07.i.lcssa = phi double [ %.07.i, %145 ]
DOALL:     	  store double %.07.i.lcssa, double* %158, align 8, !tbaa !32
DOALL:     	  %.09.i = phi double [ %166, %160 ], [ 0.000000e+00, %.preheader14.preheader.i ]
DOALL:     	  %162 = load double, double* %161, align 8, !tbaa !32
DOALL:     	  %164 = load double, double* %163, align 8, !tbaa !32
DOALL:     	  %165 = fmul double %162, %164
DOALL:     	  %166 = fadd double %.09.i, %165
DOALL:     	  %.09.i.lcssa = phi double [ %.09.i, %.preheader14.i ]
DOALL:     	  %168 = fdiv double %.15.i, %.09.i.lcssa
DOALL:     	  %.26.i = phi double [ %185, %171 ], [ 0.000000e+00, %167 ]
DOALL:     	  %.15.i = phi double [ %.04.i.lcssa, %129 ], [ %.26.i.lcssa, %197 ]
DOALL:     	  %.07.i = phi double [ %156, %147 ], [ 0.000000e+00, %138 ]
DOALL:     	  %175 = load double, double* %174, align 8, !tbaa !32
DOALL:     	  %179 = load double, double* %178, align 8, !tbaa !32
DOALL:     	  %181 = load double, double* %180, align 8, !tbaa !32
DOALL:     	  %182 = fmul double %168, %181
DOALL:     	  %183 = fsub double %179, %182
DOALL:     	  store double %183, double* %178, align 8, !tbaa !32
DOALL:     	  %184 = fmul double %183, %183
DOALL:     	  %185 = fadd double %.26.i, %184
DOALL:     	  %.26.i.lcssa = phi double [ %.26.i, %169 ]
DOALL:     	  %187 = fdiv double %.26.i.lcssa, %.15.i
DOALL:     	  %192 = load double, double* %191, align 8, !tbaa !32
DOALL:     	  %194 = load double, double* %193, align 8, !tbaa !32
DOALL:     	  %195 = fmul double %187, %194
DOALL:     	  %196 = fadd double %192, %195
DOALL:     	  store double %196, double* %193, align 8, !tbaa !32
DOALL:     External nodes: 17
DOALL:     	  %153 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %152
DOALL:     	  %158 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv27.i
DOALL:     	  br i1 %159, label %167, label %160, !prof !48
DOALL:     	  %161 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv29.i
DOALL:     	  %163 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv29.i
DOALL:     	  br i1 %170, label %186, label %171, !prof !48
DOALL:     	  br i1 %exitcond.i, label %.preheader13.i, label %.preheader15.preheader.i, !prof !47
DOALL:     	  br i1 %137, label %.preheader14.preheader.i, label %138, !prof !48
DOALL:     	  br i1 %146, label %147, label %157, !prof !49
DOALL:     	  %149 = load double, double* %148, align 8, !tbaa !32
DOALL:     	  %174 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv31.i
DOALL:     	  %176 = fmul double %168, %175
DOALL:     	  %178 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv31.i
DOALL:     	  %180 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv31.i
DOALL:     	  br i1 %189, label %197, label %190, !prof !48
DOALL:     	  %191 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv33.i
DOALL:     	  %193 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv33.i
DOALL:     Edges: 99
DOALL:     Loop-carried data dependences
DOALL:         %175 = load double, double* %174, align 8, !tbaa !32 --->   store double %196, double* %193, align 8, !tbaa !32 via memory
DOALL:         %181 = load double, double* %180, align 8, !tbaa !32 --->   store double %.07.i.lcssa, double* %158, align 8, !tbaa !32 via memory
DOALL:         store double %183, double* %178, align 8, !tbaa !32 --->   %192 = load double, double* %191, align 8, !tbaa !32 via memory
DOALL:         store double %183, double* %178, align 8, !tbaa !32 --->   %179 = load double, double* %178, align 8, !tbaa !32 via memory
DOALL:         store double %.07.i.lcssa, double* %158, align 8, !tbaa !32 --->   store double %.07.i.lcssa, double* %158, align 8, !tbaa !32 via memory
DOALL:         %162 = load double, double* %161, align 8, !tbaa !32 --->   store double %196, double* %193, align 8, !tbaa !32 via memory
DOALL:         %164 = load double, double* %163, align 8, !tbaa !32 --->   store double %.07.i.lcssa, double* %158, align 8, !tbaa !32 via memory
DOALL:         store double %183, double* %178, align 8, !tbaa !32 --->   store double %183, double* %178, align 8, !tbaa !32 via memory
DOALL:         %.26.i.lcssa = phi double [ %.26.i, %169 ] --->   %.15.i = phi double [ %.04.i.lcssa, %129 ], [ %.26.i.lcssa, %197 ] via variable
DOALL:         %192 = load double, double* %191, align 8, !tbaa !32 --->   store double %183, double* %178, align 8, !tbaa !32 via memory
DOALL:         store double %196, double* %193, align 8, !tbaa !32 --->   store double %196, double* %193, align 8, !tbaa !32 via memory
DOALL:         store double %196, double* %193, align 8, !tbaa !32 --->   %194 = load double, double* %193, align 8, !tbaa !32 via memory
DOALL:         store double %196, double* %193, align 8, !tbaa !32 --->   %175 = load double, double* %174, align 8, !tbaa !32 via memory
DOALL:         store double %196, double* %193, align 8, !tbaa !32 --->   %154 = load double, double* %153, align 8, !tbaa !32 via memory
DOALL:         store double %196, double* %193, align 8, !tbaa !32 --->   %162 = load double, double* %161, align 8, !tbaa !32 via memory
DOALL:         %154 = load double, double* %153, align 8, !tbaa !32 --->   store double %196, double* %193, align 8, !tbaa !32 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: main (459 instructions. The inlining will add 188 instructions),   call fastcc void @conj_grad(i32* %60, i32* %61, double* %62, double* %63, double* %64, double* %65, double* %66, double* %67, double* nonnull %3)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %30 = icmp sgt i64 %indvars.iv56, %28" (1.667432e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv54, %37" (1.656573e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (6.334312e-05%)
Noelle:     Loop "  %53 = icmp sgt i64 %indvars.iv49, %51" (1.176322e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (5.017933e+01%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv44, %71" (9.048651e-05%)
Noelle:     Loop "  %87 = icmp sgt i64 %indvars.iv46, %85" (9.048639e-05%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (6.334312e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (4.953587e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %wide.trip.count.i" (1.221612e-02%)
Noelle:     Loop "  %123 = icmp sgt i64 %indvars.iv35.i, %121" (6.786516e-03%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (4.761759e+01%)
Noelle:     Loop "  %137 = icmp sgt i64 %indvars.iv27.i, %134" (4.683714e+01%)
Noelle:     Loop "  %146 = icmp slt i64 %indvars.iv25.i, %144" (4.658264e+01%)
Noelle:     Loop "  %159 = icmp sgt i64 %indvars.iv29.i, %121" (2.035953e-01%)
Noelle:     Loop "  %170 = icmp sgt i64 %indvars.iv31.i, %121" (3.732573e-01%)
Noelle:     Loop "  %189 = icmp sgt i64 %indvars.iv33.i, %121" (2.035951e-01%)
Noelle:     Loop "  %200 = icmp sgt i64 %indvars.iv23.i, %134" (1.873485e+00%)
Noelle:     Loop "  %209 = icmp slt i64 %indvars.iv21.i, %207" (1.863306e+00%)
Noelle:     Loop "  %222 = icmp sgt i64 %indvars.iv.i, %121" (8.822460e-03%)
Noelle:     Loop "  %237 = icmp sgt i64 %indvars.iv, %235" (1.017977e-02%)
Noelle:     Loop "  %264 = icmp sgt i64 %indvars.iv39, %262" (6.786507e-03%)
Noelle:  Function "conj_grad"
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (1.237899e-02%)
Noelle:     Loop "  %27 = icmp sgt i64 %indvars.iv35, %25" (6.876998e-03%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 26" (4.825249e+01%)
Noelle:     Loop "  %40 = icmp sgt i64 %indvars.iv27, %37" (4.746163e+01%)
Noelle:     Loop "  %49 = icmp slt i64 %indvars.iv25, %47" (4.720375e+01%)
Noelle:     Loop "  %62 = icmp sgt i64 %indvars.iv29, %25" (2.063099e-01%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv31, %25" (3.782340e-01%)
Noelle:     Loop "  %92 = icmp sgt i64 %indvars.iv33, %25" (2.063097e-01%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv23, %37" (1.898465e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv21, %110" (1.888150e+00%)
Noelle:     Loop "  %125 = icmp sgt i64 %indvars.iv, %25" (8.940086e-03%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (7.238919e-05%)
Noelle:     Loop "  %30 = icmp sgt i32 %.03, %0" (7.111229e-02%)
Noelle:     Loop "  %32 = shl nsw i32 %.04.i, 1" (7.552854e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.01.ph.i, 13" (1.689550e-02%)
Noelle:     Loop "  %37 = load double, double* @amult, align 8, !tbaa !40" (1.358644e-02%)
Noelle:     Loop "  %111 = icmp sgt i64 %indvars.iv.i3, %36" (1.195868e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (1.438644e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %wide.trip.count" (5.051230e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (4.808465e-02%)
Noelle:     Loop "  %174 = icmp sgt i32 %.16, %7" (1.978063e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (8.145625e-05%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (2.502145e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (9.050702e-05%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (1.261593e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (1.250732e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (4.468115e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (9.050690e-05%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (8.145625e-05%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (9.280776e-02%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (5.289817e-02%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (3.973763e-02%)
Noelle:  Function "sprnvc"
Noelle:     Loop "  %7 = shl nsw i32 %.04, 1" (7.601747e-04%)
Noelle:     Loop "  %10 = icmp slt i32 %.01.ph, 13" (1.659839e-02%)
Noelle:     Loop "  %12 = load double, double* @amult, align 8, !tbaa !35" (1.326792e-02%)
Noelle:     Loop "  %32 = icmp sgt i64 %indvars.iv, %11" (1.203610e-03%)
Noelle:  Function "randlc"
Noelle:  Function "vecset"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv, %8" (1.447837e-03%)
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_read"
Noelle:  Function "timer_clear"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %30 = icmp sgt i64 %indvars.iv56, %28" (1.656498e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv54, %37" (1.645711e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (6.292778e-05%)
Noelle:     Loop "  %53 = icmp sgt i64 %indvars.iv49, %51" (1.168609e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (6.558689e-01%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %wide.trip.count.i2" (1.618137e-04%)
Noelle:     Loop "  %85 = icmp sgt i64 %indvars.iv35.i8, %83" (8.989320e-05%)
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (6.305135e-01%)
Noelle:     Loop "  %98 = icmp sgt i64 %indvars.iv27.i19, %95" (6.201757e-01%)
Noelle:     Loop "  %107 = icmp slt i64 %indvars.iv25.i23, %105" (6.170294e-01%)
Noelle:     Loop "  %120 = icmp sgt i64 %indvars.iv29.i26, %83" (2.696805e-03%)
Noelle:     Loop "  %131 = icmp sgt i64 %indvars.iv31.i30, %83" (4.944133e-03%)
Noelle:     Loop "  %150 = icmp sgt i64 %indvars.iv33.i33, %83" (2.696802e-03%)
Noelle:     Loop "  %161 = icmp sgt i64 %indvars.iv23.i35, %95" (2.480703e-02%)
Noelle:     Loop "  %170 = icmp slt i64 %indvars.iv21.i38, %168" (2.468117e-02%)
Noelle:     Loop "  %183 = icmp sgt i64 %indvars.iv.i41, %83" (1.168610e-04%)
Noelle:     Loop "  %198 = icmp sgt i64 %indvars.iv44, %196" (8.989320e-05%)
Noelle:     Loop "  %212 = icmp sgt i64 %indvars.iv46, %210" (8.989308e-05%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (6.292778e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (4.921106e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %wide.trip.count.i" (1.213602e-02%)
Noelle:     Loop "  %248 = icmp sgt i64 %indvars.iv35.i, %246" (6.742018e-03%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (4.730537e+01%)
Noelle:     Loop "  %262 = icmp sgt i64 %indvars.iv27.i, %259" (4.653003e+01%)
Noelle:     Loop "  %271 = icmp slt i64 %indvars.iv25.i, %269" (4.627721e+01%)
Noelle:     Loop "  %284 = icmp sgt i64 %indvars.iv29.i, %246" (2.022603e-01%)
Noelle:     Loop "  %295 = icmp sgt i64 %indvars.iv31.i, %246" (3.708099e-01%)
Noelle:     Loop "  %314 = icmp sgt i64 %indvars.iv33.i, %246" (2.022601e-01%)
Noelle:     Loop "  %325 = icmp sgt i64 %indvars.iv23.i, %259" (1.861201e+00%)
Noelle:     Loop "  %334 = icmp slt i64 %indvars.iv21.i, %332" (1.851088e+00%)
Noelle:     Loop "  %347 = icmp sgt i64 %indvars.iv.i, %246" (8.764612e-03%)
Noelle:     Loop "  %362 = icmp sgt i64 %indvars.iv, %360" (1.011302e-02%)
Noelle:     Loop "  %389 = icmp sgt i64 %indvars.iv39, %387" (6.742009e-03%)
Noelle:  Function "conj_grad"
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (1.229782e-02%)
Noelle:     Loop "  %27 = icmp sgt i64 %indvars.iv35, %25" (6.831906e-03%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 26" (4.793610e+01%)
Noelle:     Loop "  %40 = icmp sgt i64 %indvars.iv27, %37" (4.715043e+01%)
Noelle:     Loop "  %49 = icmp slt i64 %indvars.iv25, %47" (4.689424e+01%)
Noelle:     Loop "  %62 = icmp sgt i64 %indvars.iv29, %25" (2.049571e-01%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv31, %25" (3.757540e-01%)
Noelle:     Loop "  %92 = icmp sgt i64 %indvars.iv33, %25" (2.049569e-01%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv23, %37" (1.886017e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv21, %110" (1.875769e+00%)
Noelle:     Loop "  %125 = icmp sgt i64 %indvars.iv, %25" (8.881467e-03%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (7.191454e-05%)
Noelle:     Loop "  %30 = icmp sgt i32 %.03, %0" (7.064601e-02%)
Noelle:     Loop "  %32 = shl nsw i32 %.04.i, 1" (7.503331e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.01.ph.i, 13" (1.678471e-02%)
Noelle:     Loop "  %37 = load double, double* @amult, align 8, !tbaa !40" (1.349735e-02%)
Noelle:     Loop "  %111 = icmp sgt i64 %indvars.iv.i3, %36" (1.188027e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (1.429211e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %wide.trip.count" (5.018110e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (4.776936e-02%)
Noelle:     Loop "  %174 = icmp sgt i32 %.16, %7" (1.965093e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (8.092215e-05%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (2.485738e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (8.991358e-05%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (1.253320e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (1.242531e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (4.438818e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (8.991346e-05%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (8.092215e-05%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (9.219923e-02%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (5.255132e-02%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (3.947707e-02%)
Noelle:  Function "sprnvc"
Noelle:     Loop "  %7 = shl nsw i32 %.04, 1" (7.551903e-04%)
Noelle:     Loop "  %10 = icmp slt i32 %.01.ph, 13" (1.648956e-02%)
Noelle:     Loop "  %12 = load double, double* @amult, align 8, !tbaa !35" (1.318092e-02%)
Noelle:     Loop "  %32 = icmp sgt i64 %indvars.iv, %11" (1.195718e-03%)
Noelle:  Function "randlc"
Noelle:  Function "vecset"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv, %8" (1.438343e-03%)
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_read"
Noelle:  Function "timer_clear"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
NOELLE: FixedPoint:       There are 140 different instructions and 347 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.5Wh0sT4CYZ -o /tmp/tmp.5Wh0sT4CYZ
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.5Wh0sT4CYZ -o /tmp/tmp.5Wh0sT4CYZ
NOELLE: FixedPoint:     Invocation 6
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.fkajgt7j6S -o /tmp/tmp.5Wh0sT4CYZ
Inliner: Start
Inliner:   Number of program instructions = 1579
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 0
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 62
DOALL:     	  %.07.i24.lcssa = phi double [ %.07.i24, %103 ]
DOALL:     	  store double %.07.i24.lcssa, double* %116, align 8, !tbaa !32
DOALL:     	  %.09.i27 = phi double [ %124, %118 ], [ 0.000000e+00, %.preheader14.preheader.i21 ]
DOALL:     	  %120 = load double, double* %119, align 8, !tbaa !32
DOALL:     	  %122 = load double, double* %121, align 8, !tbaa !32
DOALL:     	  %123 = fmul double %120, %122
DOALL:     	  %124 = fadd double %.09.i27, %123
DOALL:     	  %.09.i27.lcssa = phi double [ %.09.i27, %.preheader14.i28 ]
DOALL:     	  %126 = fdiv double %.15.i14, %.09.i27.lcssa
DOALL:     	  %.26.i31 = phi double [ %143, %129 ], [ 0.000000e+00, %125 ]
DOALL:     	  %131 = load double, double* %130, align 8, !tbaa !32
DOALL:     	  %133 = load double, double* %132, align 8, !tbaa !32
DOALL:     	  %134 = fmul double %126, %133
DOALL:     	  %135 = fadd double %131, %134
DOALL:     	  store double %135, double* %130, align 8, !tbaa !32
DOALL:     	  %137 = load double, double* %136, align 8, !tbaa !32
DOALL:     	  %139 = load double, double* %138, align 8, !tbaa !32
DOALL:     	  %140 = fmul double %126, %139
DOALL:     	  %141 = fsub double %137, %140
DOALL:     	  store double %141, double* %136, align 8, !tbaa !32
DOALL:     	  %142 = fmul double %141, %141
DOALL:     	  %143 = fadd double %.26.i31, %142
DOALL:     	  %.26.i31.lcssa = phi double [ %.26.i31, %127 ]
DOALL:     	  %145 = fdiv double %.26.i31.lcssa, %.15.i14
DOALL:     	  %150 = load double, double* %149, align 8, !tbaa !32
DOALL:     	  %152 = load double, double* %151, align 8, !tbaa !32
DOALL:     	  %153 = fmul double %145, %152
DOALL:     	  %154 = fadd double %150, %153
DOALL:     	  store double %154, double* %151, align 8, !tbaa !32
DOALL:     	  store double 0.000000e+00, double* %64, align 8, !tbaa !32
DOALL:     	  store double 0.000000e+00, double* %65, align 8, !tbaa !32
DOALL:     	  %68 = load i64, i64* %67, align 8, !tbaa !32
DOALL:     	  store i64 %68, i64* %70, align 8, !tbaa !32
DOALL:     	  store i64 %68, i64* %72, align 8, !tbaa !32
DOALL:     	  %175 = load double, double* %174, align 8, !tbaa !32
DOALL:     	  %176 = fmul double %170, %175
DOALL:     	  %177 = fadd double %.110.i39, %176
DOALL:     	  %.110.i39.lcssa = phi double [ %.110.i39, %166 ]
DOALL:     	  store double %.110.i39.lcssa, double* %179, align 8, !tbaa !32
DOALL:     	  %.04.i9 = phi double [ %86, %82 ], [ 0.000000e+00, %73 ]
DOALL:     	  %84 = load double, double* %83, align 8, !tbaa !32
DOALL:     	  %85 = fmul double %84, %84
DOALL:     	  %86 = fadd double %.04.i9, %85
DOALL:     	  %.04.i9.lcssa = phi double [ %.04.i9, %80 ]
DOALL:     	  %.15.i14 = phi double [ %.04.i9.lcssa, %87 ], [ %.26.i31.lcssa, %155 ]
DOALL:     	  %.07.i24 = phi double [ %114, %105 ], [ 0.000000e+00, %96 ]
DOALL:     	  %112 = load double, double* %111, align 8, !tbaa !32
DOALL:     	  %113 = fmul double %107, %112
DOALL:     	  %114 = fadd double %.07.i24, %113
DOALL:     	  %.110.i39 = phi double [ %177, %168 ], [ 0.000000e+00, %159 ]
DOALL:     	  %183 = load double, double* %182, align 8, !tbaa !32
DOALL:     	  %185 = load double, double* %184, align 8, !tbaa !32
DOALL:     	  %.02 = phi double [ %200, %196 ], [ 0.000000e+00, %conj_grad.exit45 ]
DOALL:     	  %198 = load double, double* %197, align 8, !tbaa !32
DOALL:     	  %199 = fmul double %198, %198
DOALL:     	  %200 = fadd double %.02, %199
DOALL:     	  %.02.lcssa = phi double [ %.02, %194 ]
DOALL:     	  %202 = tail call double @sqrt(double %.02.lcssa) #13
DOALL:     	  %203 = fdiv double 1.000000e+00, %202
DOALL:     	  %212 = load double, double* %211, align 8, !tbaa !32
DOALL:     	  %213 = fmul double %203, %212
DOALL:     	  store double %213, double* %214, align 8, !tbaa !32
DOALL:     External nodes: 40
DOALL:     	  %116 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv27.i19
DOALL:     	  br i1 %117, label %125, label %118, !prof !47
DOALL:     	  %119 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv29.i26
DOALL:     	  %121 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv29.i26
DOALL:     	  br i1 %128, label %144, label %129, !prof !47
DOALL:     	  %130 = getelementptr inbounds [75003 x double], [75003 x double]* @z, i64 0, i64 %indvars.iv31.i30
DOALL:     	  %132 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv31.i30
DOALL:     	  %136 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv31.i30
DOALL:     	  %138 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv31.i30
DOALL:     	  br i1 %147, label %155, label %148, !prof !47
DOALL:     	  %149 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv33.i33
DOALL:     	  %151 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv33.i33
DOALL:     	  br i1 %158, label %.preheader.preheader.i36, label %159, !prof !45
DOALL:     	  br i1 %exitcond48, label %.preheader.preheader, label %57, !prof !42
DOALL:     	  br i1 %exitcond39.i4, label %73, label %63, !prof !44
DOALL:     	  %64 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv37.i3
DOALL:     	  %65 = getelementptr inbounds [75003 x double], [75003 x double]* @z, i64 0, i64 %indvars.iv37.i3
DOALL:     	  %67 = bitcast double* %66 to i64*
DOALL:     	  %70 = bitcast double* %69 to i64*
DOALL:     	  %72 = bitcast double* %71 to i64*
DOALL:     	  br i1 %167, label %168, label %178, !prof !49
DOALL:     	  %170 = load double, double* %169, align 8, !tbaa !32
DOALL:     	  %174 = getelementptr inbounds [75003 x double], [75003 x double]* @z, i64 0, i64 %173
DOALL:     	  %179 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv23.i35
DOALL:     	  br i1 %81, label %87, label %82, !prof !45
DOALL:     	  %83 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv35.i8
DOALL:     	  br i1 %exitcond.i16, label %.preheader13.i18, label %.preheader15.preheader.i17, !prof !46
DOALL:     	  br i1 %95, label %.preheader14.preheader.i21, label %96, !prof !47
DOALL:     	  br i1 %104, label %105, label %115, !prof !48
DOALL:     	  %107 = load double, double* %106, align 8, !tbaa !32
DOALL:     	  %111 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %110
DOALL:     	  br i1 %180, label %conj_grad.exit45, label %181, !prof !45
DOALL:     	  %182 = getelementptr inbounds [75003 x double], [75003 x double]* @x, i64 0, i64 %indvars.iv.i41
DOALL:     	  %184 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv.i41
DOALL:     	  %186 = fsub double %183, %185
DOALL:     	  br i1 %195, label %201, label %196, !prof !37
DOALL:     	  %197 = getelementptr inbounds [75003 x double], [75003 x double]* @z, i64 0, i64 %indvars.iv44
DOALL:     	  br i1 %209, label %215, label %210, !prof !37
DOALL:     	  %211 = getelementptr inbounds [75003 x double], [75003 x double]* @z, i64 0, i64 %indvars.iv46
DOALL:     	  %214 = getelementptr inbounds [75003 x double], [75003 x double]* @x, i64 0, i64 %indvars.iv46
DOALL:     Edges: 241
DOALL:     Loop-carried data dependences
DOALL:         store double %.07.i24.lcssa, double* %116, align 8, !tbaa !32 --->   store double 0.000000e+00, double* %64, align 8, !tbaa !32 via memory
DOALL:         %120 = load double, double* %119, align 8, !tbaa !32 --->   store i64 %68, i64* %72, align 8, !tbaa !32 via memory
DOALL:         %120 = load double, double* %119, align 8, !tbaa !32 --->   store double %154, double* %151, align 8, !tbaa !32 via memory
DOALL:         store double %.110.i39.lcssa, double* %179, align 8, !tbaa !32 --->   store i64 %68, i64* %70, align 8, !tbaa !32 via memory
DOALL:         store double %.110.i39.lcssa, double* %179, align 8, !tbaa !32 --->   %84 = load double, double* %83, align 8, !tbaa !32 via memory
DOALL:         %112 = load double, double* %111, align 8, !tbaa !32 --->   store double %154, double* %151, align 8, !tbaa !32 via memory
DOALL:         %112 = load double, double* %111, align 8, !tbaa !32 --->   store i64 %68, i64* %72, align 8, !tbaa !32 via memory
DOALL:         store double %154, double* %151, align 8, !tbaa !32 --->   %152 = load double, double* %151, align 8, !tbaa !32 via memory
DOALL:         store double %154, double* %151, align 8, !tbaa !32 --->   %120 = load double, double* %119, align 8, !tbaa !32 via memory
DOALL:         store double %154, double* %151, align 8, !tbaa !32 --->   %133 = load double, double* %132, align 8, !tbaa !32 via memory
DOALL:         store double %154, double* %151, align 8, !tbaa !32 --->   store double %154, double* %151, align 8, !tbaa !32 via memory
DOALL:         store double %154, double* %151, align 8, !tbaa !32 --->   %112 = load double, double* %111, align 8, !tbaa !32 via memory
DOALL:         store double %154, double* %151, align 8, !tbaa !32 --->   store i64 %68, i64* %72, align 8, !tbaa !32 via memory
DOALL:         store double 0.000000e+00, double* %64, align 8, !tbaa !32 --->   store double 0.000000e+00, double* %64, align 8, !tbaa !32 via memory
DOALL:         store double 0.000000e+00, double* %65, align 8, !tbaa !32 --->   %175 = load double, double* %174, align 8, !tbaa !32 via memory
DOALL:         store double 0.000000e+00, double* %65, align 8, !tbaa !32 --->   store double 0.000000e+00, double* %65, align 8, !tbaa !32 via memory
DOALL:         %185 = load double, double* %184, align 8, !tbaa !32 --->   store double %.110.i39.lcssa, double* %179, align 8, !tbaa !32 via memory
DOALL:         %185 = load double, double* %184, align 8, !tbaa !32 --->   store i64 %68, i64* %70, align 8, !tbaa !32 via memory
DOALL:         %185 = load double, double* %184, align 8, !tbaa !32 --->   store double %141, double* %136, align 8, !tbaa !32 via memory
DOALL:         %198 = load double, double* %197, align 8, !tbaa !32 --->   store double 0.000000e+00, double* %65, align 8, !tbaa !32 via memory
DOALL:         %212 = load double, double* %211, align 8, !tbaa !32 --->   store double 0.000000e+00, double* %65, align 8, !tbaa !32 via memory
DOALL:         store double %213, double* %214, align 8, !tbaa !32 --->   store double %213, double* %214, align 8, !tbaa !32 via memory
DOALL:         store i64 %68, i64* %72, align 8, !tbaa !32 --->   store double %154, double* %151, align 8, !tbaa !32 via memory
DOALL:         store i64 %68, i64* %72, align 8, !tbaa !32 --->   %152 = load double, double* %151, align 8, !tbaa !32 via memory
DOALL:         store i64 %68, i64* %72, align 8, !tbaa !32 --->   %112 = load double, double* %111, align 8, !tbaa !32 via memory
DOALL:         store i64 %68, i64* %72, align 8, !tbaa !32 --->   %120 = load double, double* %119, align 8, !tbaa !32 via memory
DOALL:         store i64 %68, i64* %72, align 8, !tbaa !32 --->   store i64 %68, i64* %72, align 8, !tbaa !32 via memory
DOALL:         store i64 %68, i64* %72, align 8, !tbaa !32 --->   %133 = load double, double* %132, align 8, !tbaa !32 via memory
DOALL:         %175 = load double, double* %174, align 8, !tbaa !32 --->   store double 0.000000e+00, double* %65, align 8, !tbaa !32 via memory
DOALL:         store double %.110.i39.lcssa, double* %179, align 8, !tbaa !32 --->   store double %141, double* %136, align 8, !tbaa !32 via memory
DOALL:         store double %.110.i39.lcssa, double* %179, align 8, !tbaa !32 --->   %137 = load double, double* %136, align 8, !tbaa !32 via memory
DOALL:         store double %.110.i39.lcssa, double* %179, align 8, !tbaa !32 --->   store double %.110.i39.lcssa, double* %179, align 8, !tbaa !32 via memory
DOALL:         store double %.110.i39.lcssa, double* %179, align 8, !tbaa !32 --->   %150 = load double, double* %149, align 8, !tbaa !32 via memory
DOALL:         store double %213, double* %214, align 8, !tbaa !32 --->   %68 = load i64, i64* %67, align 8, !tbaa !32 via memory
DOALL:         store double %213, double* %214, align 8, !tbaa !32 --->   %183 = load double, double* %182, align 8, !tbaa !32 via memory
DOALL:         %122 = load double, double* %121, align 8, !tbaa !32 --->   store double 0.000000e+00, double* %64, align 8, !tbaa !32 via memory
DOALL:         %133 = load double, double* %132, align 8, !tbaa !32 --->   store double %154, double* %151, align 8, !tbaa !32 via memory
DOALL:         %133 = load double, double* %132, align 8, !tbaa !32 --->   store i64 %68, i64* %72, align 8, !tbaa !32 via memory
DOALL:         store double %135, double* %130, align 8, !tbaa !32 --->   %175 = load double, double* %174, align 8, !tbaa !32 via memory
DOALL:         store double %135, double* %130, align 8, !tbaa !32 --->   store double 0.000000e+00, double* %65, align 8, !tbaa !32 via memory
DOALL:         %139 = load double, double* %138, align 8, !tbaa !32 --->   store double 0.000000e+00, double* %64, align 8, !tbaa !32 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %conj_grad.callcount.promoted.i13 = load i32, i32* @conj_grad.callcount, align 4, !tbaa !38
DOALL:     	  %94 = add i32 %conj_grad.callcount.promoted.i13, 25
DOALL:     	  store i32 %94, i32* @conj_grad.callcount, align 4, !tbaa !38
DOALL:     External nodes: 1
DOALL:     	  br i1 %exitcond48, label %.preheader.preheader, label %57, !prof !42
DOALL:     Edges: 8
DOALL:     Loop-carried data dependences
DOALL:         store i32 %94, i32* @conj_grad.callcount, align 4, !tbaa !38 --->   store i32 %94, i32* @conj_grad.callcount, align 4, !tbaa !38 via memory
DOALL:         store i32 %94, i32* @conj_grad.callcount, align 4, !tbaa !38 --->   %conj_grad.callcount.promoted.i13 = load i32, i32* @conj_grad.callcount, align 4, !tbaa !38 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 30
DOALL:     	  %.15.i = phi double [ %.04.i.lcssa, %250 ], [ %.26.i.lcssa, %319 ]
DOALL:     	  %.07.i = phi double [ %278, %269 ], [ 0.000000e+00, %260 ]
DOALL:     	  %276 = load double, double* %275, align 8, !tbaa !32
DOALL:     	  %277 = fmul double %271, %276
DOALL:     	  %278 = fadd double %.07.i, %277
DOALL:     	  %.07.i.lcssa = phi double [ %.07.i, %267 ]
DOALL:     	  store double %.07.i.lcssa, double* %280, align 8, !tbaa !32
DOALL:     	  %.09.i = phi double [ %288, %282 ], [ 0.000000e+00, %.preheader14.preheader.i ]
DOALL:     	  %284 = load double, double* %283, align 8, !tbaa !32
DOALL:     	  %286 = load double, double* %285, align 8, !tbaa !32
DOALL:     	  %287 = fmul double %284, %286
DOALL:     	  %288 = fadd double %.09.i, %287
DOALL:     	  %.09.i.lcssa = phi double [ %.09.i, %.preheader14.i ]
DOALL:     	  %290 = fdiv double %.15.i, %.09.i.lcssa
DOALL:     	  %.26.i = phi double [ %307, %293 ], [ 0.000000e+00, %289 ]
DOALL:     	  %297 = load double, double* %296, align 8, !tbaa !32
DOALL:     	  %301 = load double, double* %300, align 8, !tbaa !32
DOALL:     	  %303 = load double, double* %302, align 8, !tbaa !32
DOALL:     	  %304 = fmul double %290, %303
DOALL:     	  %305 = fsub double %301, %304
DOALL:     	  store double %305, double* %300, align 8, !tbaa !32
DOALL:     	  %306 = fmul double %305, %305
DOALL:     	  %307 = fadd double %.26.i, %306
DOALL:     	  %.26.i.lcssa = phi double [ %.26.i, %291 ]
DOALL:     	  %309 = fdiv double %.26.i.lcssa, %.15.i
DOALL:     	  %314 = load double, double* %313, align 8, !tbaa !32
DOALL:     	  %316 = load double, double* %315, align 8, !tbaa !32
DOALL:     	  %317 = fmul double %309, %316
DOALL:     	  %318 = fadd double %314, %317
DOALL:     	  store double %318, double* %315, align 8, !tbaa !32
DOALL:     External nodes: 17
DOALL:     	  br i1 %exitcond.i, label %.preheader13.i, label %.preheader15.preheader.i, !prof !46
DOALL:     	  br i1 %259, label %.preheader14.preheader.i, label %260, !prof !47
DOALL:     	  br i1 %268, label %269, label %279, !prof !48
DOALL:     	  %271 = load double, double* %270, align 8, !tbaa !32
DOALL:     	  %275 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %274
DOALL:     	  %280 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv27.i
DOALL:     	  br i1 %281, label %289, label %282, !prof !47
DOALL:     	  %283 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv29.i
DOALL:     	  %285 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv29.i
DOALL:     	  br i1 %292, label %308, label %293, !prof !47
DOALL:     	  %296 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv31.i
DOALL:     	  %298 = fmul double %290, %297
DOALL:     	  %300 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv31.i
DOALL:     	  %302 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv31.i
DOALL:     	  br i1 %311, label %319, label %312, !prof !47
DOALL:     	  %313 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv33.i
DOALL:     	  %315 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv33.i
DOALL:     Edges: 99
DOALL:     Loop-carried data dependences
DOALL:         %276 = load double, double* %275, align 8, !tbaa !32 --->   store double %318, double* %315, align 8, !tbaa !32 via memory
DOALL:         store double %.07.i.lcssa, double* %280, align 8, !tbaa !32 --->   store double %.07.i.lcssa, double* %280, align 8, !tbaa !32 via memory
DOALL:         %284 = load double, double* %283, align 8, !tbaa !32 --->   store double %318, double* %315, align 8, !tbaa !32 via memory
DOALL:         %286 = load double, double* %285, align 8, !tbaa !32 --->   store double %.07.i.lcssa, double* %280, align 8, !tbaa !32 via memory
DOALL:         %297 = load double, double* %296, align 8, !tbaa !32 --->   store double %318, double* %315, align 8, !tbaa !32 via memory
DOALL:         %303 = load double, double* %302, align 8, !tbaa !32 --->   store double %.07.i.lcssa, double* %280, align 8, !tbaa !32 via memory
DOALL:         store double %305, double* %300, align 8, !tbaa !32 --->   %314 = load double, double* %313, align 8, !tbaa !32 via memory
DOALL:         store double %305, double* %300, align 8, !tbaa !32 --->   %301 = load double, double* %300, align 8, !tbaa !32 via memory
DOALL:         store double %305, double* %300, align 8, !tbaa !32 --->   store double %305, double* %300, align 8, !tbaa !32 via memory
DOALL:         store double %318, double* %315, align 8, !tbaa !32 --->   %297 = load double, double* %296, align 8, !tbaa !32 via memory
DOALL:         store double %318, double* %315, align 8, !tbaa !32 --->   %276 = load double, double* %275, align 8, !tbaa !32 via memory
DOALL:         store double %318, double* %315, align 8, !tbaa !32 --->   %284 = load double, double* %283, align 8, !tbaa !32 via memory
DOALL:         %.26.i.lcssa = phi double [ %.26.i, %291 ] --->   %.15.i = phi double [ %.04.i.lcssa, %250 ], [ %.26.i.lcssa, %319 ] via variable
DOALL:         %314 = load double, double* %313, align 8, !tbaa !32 --->   store double %305, double* %300, align 8, !tbaa !32 via memory
DOALL:         store double %318, double* %315, align 8, !tbaa !32 --->   %316 = load double, double* %315, align 8, !tbaa !32 via memory
DOALL:         store double %318, double* %315, align 8, !tbaa !32 --->   store double %318, double* %315, align 8, !tbaa !32 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 30
DOALL:     	  %.07.i24.lcssa = phi double [ %.07.i24, %103 ]
DOALL:     	  store double %.07.i24.lcssa, double* %116, align 8, !tbaa !32
DOALL:     	  %.09.i27 = phi double [ %124, %118 ], [ 0.000000e+00, %.preheader14.preheader.i21 ]
DOALL:     	  %120 = load double, double* %119, align 8, !tbaa !32
DOALL:     	  %122 = load double, double* %121, align 8, !tbaa !32
DOALL:     	  %123 = fmul double %120, %122
DOALL:     	  %124 = fadd double %.09.i27, %123
DOALL:     	  %.09.i27.lcssa = phi double [ %.09.i27, %.preheader14.i28 ]
DOALL:     	  %126 = fdiv double %.15.i14, %.09.i27.lcssa
DOALL:     	  %.26.i31 = phi double [ %143, %129 ], [ 0.000000e+00, %125 ]
DOALL:     	  %133 = load double, double* %132, align 8, !tbaa !32
DOALL:     	  %137 = load double, double* %136, align 8, !tbaa !32
DOALL:     	  %139 = load double, double* %138, align 8, !tbaa !32
DOALL:     	  %140 = fmul double %126, %139
DOALL:     	  %141 = fsub double %137, %140
DOALL:     	  store double %141, double* %136, align 8, !tbaa !32
DOALL:     	  %142 = fmul double %141, %141
DOALL:     	  %143 = fadd double %.26.i31, %142
DOALL:     	  %.26.i31.lcssa = phi double [ %.26.i31, %127 ]
DOALL:     	  %145 = fdiv double %.26.i31.lcssa, %.15.i14
DOALL:     	  %150 = load double, double* %149, align 8, !tbaa !32
DOALL:     	  %152 = load double, double* %151, align 8, !tbaa !32
DOALL:     	  %153 = fmul double %145, %152
DOALL:     	  %154 = fadd double %150, %153
DOALL:     	  store double %154, double* %151, align 8, !tbaa !32
DOALL:     	  %.15.i14 = phi double [ %.04.i9.lcssa, %87 ], [ %.26.i31.lcssa, %155 ]
DOALL:     	  %.07.i24 = phi double [ %114, %105 ], [ 0.000000e+00, %96 ]
DOALL:     	  %112 = load double, double* %111, align 8, !tbaa !32
DOALL:     	  %113 = fmul double %107, %112
DOALL:     	  %114 = fadd double %.07.i24, %113
DOALL:     External nodes: 17
DOALL:     	  %116 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv27.i19
DOALL:     	  br i1 %117, label %125, label %118, !prof !47
DOALL:     	  %119 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv29.i26
DOALL:     	  %121 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv29.i26
DOALL:     	  br i1 %128, label %144, label %129, !prof !47
DOALL:     	  %132 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv31.i30
DOALL:     	  %134 = fmul double %126, %133
DOALL:     	  %136 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv31.i30
DOALL:     	  %138 = getelementptr inbounds [75003 x double], [75003 x double]* @q, i64 0, i64 %indvars.iv31.i30
DOALL:     	  br i1 %147, label %155, label %148, !prof !47
DOALL:     	  %149 = getelementptr inbounds [75003 x double], [75003 x double]* @r, i64 0, i64 %indvars.iv33.i33
DOALL:     	  %151 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %indvars.iv33.i33
DOALL:     	  br i1 %exitcond.i16, label %.preheader13.i18, label %.preheader15.preheader.i17, !prof !46
DOALL:     	  br i1 %95, label %.preheader14.preheader.i21, label %96, !prof !47
DOALL:     	  br i1 %104, label %105, label %115, !prof !48
DOALL:     	  %107 = load double, double* %106, align 8, !tbaa !32
DOALL:     	  %111 = getelementptr inbounds [75003 x double], [75003 x double]* @p, i64 0, i64 %110
DOALL:     Edges: 99
DOALL:     Loop-carried data dependences
DOALL:         %112 = load double, double* %111, align 8, !tbaa !32 --->   store double %154, double* %151, align 8, !tbaa !32 via memory
DOALL:         store double %141, double* %136, align 8, !tbaa !32 --->   %150 = load double, double* %149, align 8, !tbaa !32 via memory
DOALL:         store double %141, double* %136, align 8, !tbaa !32 --->   %137 = load double, double* %136, align 8, !tbaa !32 via memory
DOALL:         store double %141, double* %136, align 8, !tbaa !32 --->   store double %141, double* %136, align 8, !tbaa !32 via memory
DOALL:         %.26.i31.lcssa = phi double [ %.26.i31, %127 ] --->   %.15.i14 = phi double [ %.04.i9.lcssa, %87 ], [ %.26.i31.lcssa, %155 ] via variable
DOALL:         %150 = load double, double* %149, align 8, !tbaa !32 --->   store double %141, double* %136, align 8, !tbaa !32 via memory
DOALL:         %133 = load double, double* %132, align 8, !tbaa !32 --->   store double %154, double* %151, align 8, !tbaa !32 via memory
DOALL:         %139 = load double, double* %138, align 8, !tbaa !32 --->   store double %.07.i24.lcssa, double* %116, align 8, !tbaa !32 via memory
DOALL:         store double %.07.i24.lcssa, double* %116, align 8, !tbaa !32 --->   store double %.07.i24.lcssa, double* %116, align 8, !tbaa !32 via memory
DOALL:         %120 = load double, double* %119, align 8, !tbaa !32 --->   store double %154, double* %151, align 8, !tbaa !32 via memory
DOALL:         %122 = load double, double* %121, align 8, !tbaa !32 --->   store double %.07.i24.lcssa, double* %116, align 8, !tbaa !32 via memory
DOALL:         store double %154, double* %151, align 8, !tbaa !32 --->   %133 = load double, double* %132, align 8, !tbaa !32 via memory
DOALL:         store double %154, double* %151, align 8, !tbaa !32 --->   %120 = load double, double* %119, align 8, !tbaa !32 via memory
DOALL:         store double %154, double* %151, align 8, !tbaa !32 --->   %112 = load double, double* %111, align 8, !tbaa !32 via memory
DOALL:         store double %154, double* %151, align 8, !tbaa !32 --->   %152 = load double, double* %151, align 8, !tbaa !32 via memory
DOALL:         store double %154, double* %151, align 8, !tbaa !32 --->   store double %154, double* %151, align 8, !tbaa !32 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The loop can be parallelized with DOALL
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   No remaining calls need to be inlined due to loop-carried data dependences
Inliner:   The code has not been modified
Inliner: Exit
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (1.656495e-02%)
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (1.645707e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (6.292764e-05%)
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (1.168606e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (6.561011e-01%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %wide.trip.count.i2" (1.618134e-04%)
Noelle:     Loop "  %81 = icmp sgt i64 %indvars.iv35.i8, %79" (8.989299e-05%)
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (6.307367e-01%)
Noelle:     Loop "  %95 = icmp sgt i64 %indvars.iv27.i19, %92" (6.203990e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv25.i23, %102" (6.170280e-01%)
Noelle:     Loop "  %117 = icmp sgt i64 %indvars.iv29.i26, %79" (2.696799e-03%)
Noelle:     Loop "  %128 = icmp sgt i64 %indvars.iv31.i30, %79" (4.944121e-03%)
Noelle:     Loop "  %147 = icmp sgt i64 %indvars.iv33.i33, %79" (2.696796e-03%)
Noelle:     Loop "  %158 = icmp sgt i64 %indvars.iv23.i35, %92" (2.481596e-02%)
Noelle:     Loop "  %167 = icmp slt i64 %indvars.iv21.i38, %165" (2.468112e-02%)
Noelle:     Loop "  %180 = icmp sgt i64 %indvars.iv.i41, %79" (1.168607e-04%)
Noelle:     Loop "  %195 = icmp sgt i64 %indvars.iv44, %193" (8.989299e-05%)
Noelle:     Loop "  %209 = icmp sgt i64 %indvars.iv46, %207" (8.989287e-05%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (6.292764e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (4.921095e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %wide.trip.count.i" (1.213599e-02%)
Noelle:     Loop "  %244 = icmp sgt i64 %indvars.iv35.i, %242" (6.742002e-03%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (4.730525e+01%)
Noelle:     Loop "  %259 = icmp sgt i64 %indvars.iv27.i, %255" (4.652992e+01%)
Noelle:     Loop "  %268 = icmp slt i64 %indvars.iv25.i, %266" (4.627710e+01%)
Noelle:     Loop "  %281 = icmp sgt i64 %indvars.iv29.i, %242" (2.022599e-01%)
Noelle:     Loop "  %292 = icmp sgt i64 %indvars.iv31.i, %242" (3.708090e-01%)
Noelle:     Loop "  %311 = icmp sgt i64 %indvars.iv33.i, %242" (2.022596e-01%)
Noelle:     Loop "  %322 = icmp sgt i64 %indvars.iv23.i, %255" (1.861197e+00%)
Noelle:     Loop "  %331 = icmp slt i64 %indvars.iv21.i, %329" (1.851084e+00%)
Noelle:     Loop "  %344 = icmp sgt i64 %indvars.iv.i, %242" (8.764592e-03%)
Noelle:     Loop "  %359 = icmp sgt i64 %indvars.iv, %357" (1.011299e-02%)
Noelle:     Loop "  %386 = icmp sgt i64 %indvars.iv39, %384" (6.741993e-03%)
Noelle:  Function "conj_grad"
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (1.229780e-02%)
Noelle:     Loop "  %27 = icmp sgt i64 %indvars.iv35, %25" (6.831890e-03%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 26" (4.793599e+01%)
Noelle:     Loop "  %40 = icmp sgt i64 %indvars.iv27, %37" (4.715032e+01%)
Noelle:     Loop "  %49 = icmp slt i64 %indvars.iv25, %47" (4.689413e+01%)
Noelle:     Loop "  %62 = icmp sgt i64 %indvars.iv29, %25" (2.049567e-01%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv31, %25" (3.757531e-01%)
Noelle:     Loop "  %92 = icmp sgt i64 %indvars.iv33, %25" (2.049564e-01%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv23, %37" (1.886013e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv21, %110" (1.875765e+00%)
Noelle:     Loop "  %125 = icmp sgt i64 %indvars.iv, %25" (8.881446e-03%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (7.191437e-05%)
Noelle:     Loop "  %30 = icmp sgt i32 %.03, %0" (7.064585e-02%)
Noelle:     Loop "  %32 = shl nsw i32 %.04.i, 1" (7.503313e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.01.ph.i, 13" (1.678467e-02%)
Noelle:     Loop "  %37 = load double, double* @amult, align 8, !tbaa !40" (1.349732e-02%)
Noelle:     Loop "  %111 = icmp sgt i64 %indvars.iv.i3, %36" (1.188024e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (1.429207e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %wide.trip.count" (5.018098e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (4.776925e-02%)
Noelle:     Loop "  %174 = icmp sgt i32 %.16, %7" (1.965089e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (8.092196e-05%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (2.485733e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (8.991337e-05%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (1.253318e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (1.242528e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (4.438808e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (8.991325e-05%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (8.092196e-05%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (9.219902e-02%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (5.255120e-02%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (3.947698e-02%)
Noelle:  Function "sprnvc"
Noelle:     Loop "  %7 = shl nsw i32 %.04, 1" (7.551886e-04%)
Noelle:     Loop "  %10 = icmp slt i32 %.01.ph, 13" (1.648952e-02%)
Noelle:     Loop "  %12 = load double, double* @amult, align 8, !tbaa !35" (1.318089e-02%)
Noelle:     Loop "  %32 = icmp sgt i64 %indvars.iv, %11" (1.195715e-03%)
Noelle:  Function "randlc"
Noelle:  Function "vecset"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv, %8" (1.438340e-03%)
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_read"
Noelle:  Function "timer_clear"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (1.656495e-02%)
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (1.645707e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (6.292764e-05%)
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (1.168606e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (6.561011e-01%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %wide.trip.count.i2" (1.618134e-04%)
Noelle:     Loop "  %81 = icmp sgt i64 %indvars.iv35.i8, %79" (8.989299e-05%)
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (6.307367e-01%)
Noelle:     Loop "  %95 = icmp sgt i64 %indvars.iv27.i19, %92" (6.203990e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv25.i23, %102" (6.170280e-01%)
Noelle:     Loop "  %117 = icmp sgt i64 %indvars.iv29.i26, %79" (2.696799e-03%)
Noelle:     Loop "  %128 = icmp sgt i64 %indvars.iv31.i30, %79" (4.944121e-03%)
Noelle:     Loop "  %147 = icmp sgt i64 %indvars.iv33.i33, %79" (2.696796e-03%)
Noelle:     Loop "  %158 = icmp sgt i64 %indvars.iv23.i35, %92" (2.481596e-02%)
Noelle:     Loop "  %167 = icmp slt i64 %indvars.iv21.i38, %165" (2.468112e-02%)
Noelle:     Loop "  %180 = icmp sgt i64 %indvars.iv.i41, %79" (1.168607e-04%)
Noelle:     Loop "  %195 = icmp sgt i64 %indvars.iv44, %193" (8.989299e-05%)
Noelle:     Loop "  %209 = icmp sgt i64 %indvars.iv46, %207" (8.989287e-05%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (6.292764e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (4.921095e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %wide.trip.count.i" (1.213599e-02%)
Noelle:     Loop "  %244 = icmp sgt i64 %indvars.iv35.i, %242" (6.742002e-03%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (4.730525e+01%)
Noelle:     Loop "  %259 = icmp sgt i64 %indvars.iv27.i, %255" (4.652992e+01%)
Noelle:     Loop "  %268 = icmp slt i64 %indvars.iv25.i, %266" (4.627710e+01%)
Noelle:     Loop "  %281 = icmp sgt i64 %indvars.iv29.i, %242" (2.022599e-01%)
Noelle:     Loop "  %292 = icmp sgt i64 %indvars.iv31.i, %242" (3.708090e-01%)
Noelle:     Loop "  %311 = icmp sgt i64 %indvars.iv33.i, %242" (2.022596e-01%)
Noelle:     Loop "  %322 = icmp sgt i64 %indvars.iv23.i, %255" (1.861197e+00%)
Noelle:     Loop "  %331 = icmp slt i64 %indvars.iv21.i, %329" (1.851084e+00%)
Noelle:     Loop "  %344 = icmp sgt i64 %indvars.iv.i, %242" (8.764592e-03%)
Noelle:     Loop "  %359 = icmp sgt i64 %indvars.iv, %357" (1.011299e-02%)
Noelle:     Loop "  %386 = icmp sgt i64 %indvars.iv39, %384" (6.741993e-03%)
Noelle:  Function "conj_grad"
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (1.229780e-02%)
Noelle:     Loop "  %27 = icmp sgt i64 %indvars.iv35, %25" (6.831890e-03%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.0, 26" (4.793599e+01%)
Noelle:     Loop "  %40 = icmp sgt i64 %indvars.iv27, %37" (4.715032e+01%)
Noelle:     Loop "  %49 = icmp slt i64 %indvars.iv25, %47" (4.689413e+01%)
Noelle:     Loop "  %62 = icmp sgt i64 %indvars.iv29, %25" (2.049567e-01%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv31, %25" (3.757531e-01%)
Noelle:     Loop "  %92 = icmp sgt i64 %indvars.iv33, %25" (2.049564e-01%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv23, %37" (1.886013e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv21, %110" (1.875765e+00%)
Noelle:     Loop "  %125 = icmp sgt i64 %indvars.iv, %25" (8.881446e-03%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (7.191437e-05%)
Noelle:     Loop "  %30 = icmp sgt i32 %.03, %0" (7.064585e-02%)
Noelle:     Loop "  %32 = shl nsw i32 %.04.i, 1" (7.503313e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.01.ph.i, 13" (1.678467e-02%)
Noelle:     Loop "  %37 = load double, double* @amult, align 8, !tbaa !40" (1.349732e-02%)
Noelle:     Loop "  %111 = icmp sgt i64 %indvars.iv.i3, %36" (1.188024e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (1.429207e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %wide.trip.count" (5.018098e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (4.776925e-02%)
Noelle:     Loop "  %174 = icmp sgt i32 %.16, %7" (1.965089e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (8.092196e-05%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (2.485733e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (8.991337e-05%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (1.253318e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (1.242528e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (4.438808e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (8.991325e-05%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (8.092196e-05%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (9.219902e-02%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (5.255120e-02%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (3.947698e-02%)
Noelle:  Function "sprnvc"
Noelle:     Loop "  %7 = shl nsw i32 %.04, 1" (7.551886e-04%)
Noelle:     Loop "  %10 = icmp slt i32 %.01.ph, 13" (1.648952e-02%)
Noelle:     Loop "  %12 = load double, double* @amult, align 8, !tbaa !35" (1.318089e-02%)
Noelle:     Loop "  %32 = icmp sgt i64 %indvars.iv, %11" (1.195715e-03%)
Noelle:  Function "randlc"
Noelle:  Function "vecset"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv, %8" (1.438340e-03%)
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_read"
Noelle:  Function "timer_clear"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: Inliner: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.F7vOeJa86l (.ll version is /tmp/tmp.QPUyFKjhef)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.lMDgR5K6jW (.ll version is /tmp/tmp.8hxPGnKWz2)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.F7vOeJa86l -o /tmp/tmp.lMDgR5K6jW
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.F7vOeJa86l -o /tmp/tmp.lMDgR5K6jW
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.F7vOeJa86l -o /tmp/tmp.lMDgR5K6jW
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.F7vOeJa86l -o /tmp/tmp.lMDgR5K6jW
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       main
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       makea
DeadFunctionEliminator:       sqrt
DeadFunctionEliminator:       llvm.fabs.f64
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       pow
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       sparse
DeadFunctionEliminator:       icnvrt
DeadFunctionEliminator:       c_print_results
DeadFunctionEliminator:       randlc
DeadFunctionEliminator:       elapsed_time
DeadFunctionEliminator:       timer_clear
DeadFunctionEliminator:       timer_start
DeadFunctionEliminator:       timer_stop
DeadFunctionEliminator:       timer_read
DeadFunctionEliminator:       wtime_
DeadFunctionEliminator:       gettimeofday
DeadFunctionEliminator:       puts
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.303830e-02%)
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282315e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255073e-04%)
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330751e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308574e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %wide.trip.count.i2" (3.227320e-04%)
Noelle:     Loop "  %75 = icmp sgt i64 %indvars.iv35.i8, %73" (1.792889e-04%)
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.257986e+00%)
Noelle:     Loop "  %88 = icmp sgt i64 %indvars.iv27.i19, %85" (1.237367e+00%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv25.i23, %95" (1.230644e+00%)
Noelle:     Loop "  %110 = icmp sgt i64 %indvars.iv29.i26, %73" (5.378686e-03%)
Noelle:     Loop "  %121 = icmp sgt i64 %indvars.iv31.i30, %73" (9.860904e-03%)
Noelle:     Loop "  %140 = icmp sgt i64 %indvars.iv33.i33, %73" (5.378680e-03%)
Noelle:     Loop "  %151 = icmp sgt i64 %indvars.iv23.i35, %85" (4.949469e-02%)
Noelle:     Loop "  %160 = icmp slt i64 %indvars.iv21.i38, %158" (4.922576e-02%)
Noelle:     Loop "  %173 = icmp sgt i64 %indvars.iv.i41, %73" (2.330753e-04%)
Noelle:     Loop "  %188 = icmp sgt i64 %indvars.iv44, %186" (1.792889e-04%)
Noelle:     Loop "  %202 = icmp sgt i64 %indvars.iv46, %200" (1.792887e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255073e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.814979e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %wide.trip.count.i" (2.420487e-02%)
Noelle:     Loop "  %232 = icmp sgt i64 %indvars.iv35.i, %230" (1.344672e-02%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.434893e+01%)
Noelle:     Loop "  %245 = icmp sgt i64 %indvars.iv27.i, %242" (9.280256e+01%)
Noelle:     Loop "  %254 = icmp slt i64 %indvars.iv25.i, %252" (9.229831e+01%)
Noelle:     Loop "  %267 = icmp sgt i64 %indvars.iv29.i, %230" (4.034013e-01%)
Noelle:     Loop "  %278 = icmp sgt i64 %indvars.iv31.i, %230" (7.395676e-01%)
Noelle:     Loop "  %297 = icmp sgt i64 %indvars.iv33.i, %230" (4.034009e-01%)
Noelle:     Loop "  %308 = icmp sgt i64 %indvars.iv23.i, %242" (3.712102e+00%)
Noelle:     Loop "  %317 = icmp slt i64 %indvars.iv21.i, %315" (3.691932e+00%)
Noelle:     Loop "  %330 = icmp sgt i64 %indvars.iv.i, %230" (1.748072e-02%)
Noelle:     Loop "  %345 = icmp sgt i64 %indvars.iv, %343" (2.017007e-02%)
Noelle:     Loop "  %370 = icmp sgt i64 %indvars.iv39, %368" (1.344671e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434311e-04%)
Noelle:     Loop "  %36 = icmp sgt i32 %.03, %0" (1.350332e-01%)
Noelle:     Loop "  %37 = shl nsw i32 %.04.i, 1" (1.496514e-03%)
Noelle:     Loop "  %40 = icmp slt i32 %.01.ph.i, 13" (2.771555e-02%)
Noelle:     Loop "  %43 = fmul double %42, 0x3E80000000000000" (2.044636e-02%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv.i3, %41" (2.369479e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850512e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000845e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.527436e-02%)
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919311e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.613965e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.957720e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793296e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499705e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478185e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853072e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793293e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.613965e-04%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (1.838882e-01%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (1.048118e-01%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (7.873567e-02%)
Noelle:  Function "randlc"
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.303830e-02%)
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282315e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255073e-04%)
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330751e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308574e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %wide.trip.count.i2" (3.227320e-04%)
Noelle:     Loop "  %75 = icmp sgt i64 %indvars.iv35.i8, %73" (1.792889e-04%)
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.257986e+00%)
Noelle:     Loop "  %88 = icmp sgt i64 %indvars.iv27.i19, %85" (1.237367e+00%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv25.i23, %95" (1.230644e+00%)
Noelle:     Loop "  %110 = icmp sgt i64 %indvars.iv29.i26, %73" (5.378686e-03%)
Noelle:     Loop "  %121 = icmp sgt i64 %indvars.iv31.i30, %73" (9.860904e-03%)
Noelle:     Loop "  %140 = icmp sgt i64 %indvars.iv33.i33, %73" (5.378680e-03%)
Noelle:     Loop "  %151 = icmp sgt i64 %indvars.iv23.i35, %85" (4.949469e-02%)
Noelle:     Loop "  %160 = icmp slt i64 %indvars.iv21.i38, %158" (4.922576e-02%)
Noelle:     Loop "  %173 = icmp sgt i64 %indvars.iv.i41, %73" (2.330753e-04%)
Noelle:     Loop "  %188 = icmp sgt i64 %indvars.iv44, %186" (1.792889e-04%)
Noelle:     Loop "  %202 = icmp sgt i64 %indvars.iv46, %200" (1.792887e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255073e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.814979e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %wide.trip.count.i" (2.420487e-02%)
Noelle:     Loop "  %232 = icmp sgt i64 %indvars.iv35.i, %230" (1.344672e-02%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.434893e+01%)
Noelle:     Loop "  %245 = icmp sgt i64 %indvars.iv27.i, %242" (9.280256e+01%)
Noelle:     Loop "  %254 = icmp slt i64 %indvars.iv25.i, %252" (9.229831e+01%)
Noelle:     Loop "  %267 = icmp sgt i64 %indvars.iv29.i, %230" (4.034013e-01%)
Noelle:     Loop "  %278 = icmp sgt i64 %indvars.iv31.i, %230" (7.395676e-01%)
Noelle:     Loop "  %297 = icmp sgt i64 %indvars.iv33.i, %230" (4.034009e-01%)
Noelle:     Loop "  %308 = icmp sgt i64 %indvars.iv23.i, %242" (3.712102e+00%)
Noelle:     Loop "  %317 = icmp slt i64 %indvars.iv21.i, %315" (3.691932e+00%)
Noelle:     Loop "  %330 = icmp sgt i64 %indvars.iv.i, %230" (1.748072e-02%)
Noelle:     Loop "  %345 = icmp sgt i64 %indvars.iv, %343" (2.017007e-02%)
Noelle:     Loop "  %370 = icmp sgt i64 %indvars.iv39, %368" (1.344671e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434311e-04%)
Noelle:     Loop "  %36 = icmp sgt i32 %.03, %0" (1.350332e-01%)
Noelle:     Loop "  %37 = shl nsw i32 %.04.i, 1" (1.496514e-03%)
Noelle:     Loop "  %40 = icmp slt i32 %.01.ph.i, 13" (2.771555e-02%)
Noelle:     Loop "  %43 = fmul double %42, 0x3E80000000000000" (2.044636e-02%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv.i3, %41" (2.369479e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850512e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000845e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.527436e-02%)
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919311e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.613965e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.957720e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793296e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499705e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478185e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853072e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793293e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.613965e-04%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (1.838882e-01%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (1.048118e-01%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (7.873567e-02%)
Noelle:  Function "randlc"
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-enable baseline_pre.bc baseline_pre.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: Enablers: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.oUDypcauUs (.ll version is /tmp/tmp.Pf9XlfM9Zb)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.wswtMGVlli (.ll version is /tmp/tmp.WFKMvmWZey)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.303830e-02%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282315e-02%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255073e-04%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330751e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308574e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %wide.trip.count.i2" (3.227320e-04%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %75 = icmp sgt i64 %indvars.iv35.i8, %73" (1.792889e-04%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.257986e+00%)
Noelle:     Loop "  %88 = icmp sgt i64 %indvars.iv27.i19, %85" (1.237367e+00%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv25.i23, %95" (1.230644e+00%)
Noelle:     Loop "  %110 = icmp sgt i64 %indvars.iv29.i26, %73" (5.378686e-03%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %121 = icmp sgt i64 %indvars.iv31.i30, %73" (9.860904e-03%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %140 = icmp sgt i64 %indvars.iv33.i33, %73" (5.378680e-03%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %151 = icmp sgt i64 %indvars.iv23.i35, %85" (4.949469e-02%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %160 = icmp slt i64 %indvars.iv21.i38, %158" (4.922576e-02%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %173 = icmp sgt i64 %indvars.iv.i41, %73" (2.330753e-04%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %188 = icmp sgt i64 %indvars.iv44, %186" (1.792889e-04%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %202 = icmp sgt i64 %indvars.iv46, %200" (1.792887e-04%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255073e-04%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.814979e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %wide.trip.count.i" (2.420487e-02%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %232 = icmp sgt i64 %indvars.iv35.i, %230" (1.344672e-02%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.434893e+01%)
Noelle:     Loop "  %245 = icmp sgt i64 %indvars.iv27.i, %242" (9.280256e+01%)
Noelle:     Loop "  %254 = icmp slt i64 %indvars.iv25.i, %252" (9.229831e+01%)
Noelle:     Loop "  %267 = icmp sgt i64 %indvars.iv29.i, %230" (4.034013e-01%)
Noelle:     Loop "  %278 = icmp sgt i64 %indvars.iv31.i, %230" (7.395676e-01%)
Noelle:     Loop "  %297 = icmp sgt i64 %indvars.iv33.i, %230" (4.034009e-01%)
Noelle:     Loop "  %308 = icmp sgt i64 %indvars.iv23.i, %242" (3.712102e+00%)
Noelle:     Loop "  %317 = icmp slt i64 %indvars.iv21.i, %315" (3.691932e+00%)
Noelle:     Loop "  %330 = icmp sgt i64 %indvars.iv.i, %230" (1.748072e-02%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  %345 = icmp sgt i64 %indvars.iv, %343" (2.017007e-02%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %370 = icmp sgt i64 %indvars.iv39, %368" (1.344671e-02%)
Noelle:  Disable loop "32" as cold code
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434311e-04%)
Noelle:  Disable loop "33" as cold code
Noelle:     Loop "  %36 = icmp sgt i32 %.03, %0" (1.350332e-01%)
Noelle:     Loop "  %37 = shl nsw i32 %.04.i, 1" (1.496514e-03%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %40 = icmp slt i32 %.01.ph.i, 13" (2.771555e-02%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %43 = fmul double %42, 0x3E80000000000000" (2.044636e-02%)
Noelle:  Disable loop "37" as cold code
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv.i3, %41" (2.369479e-03%)
Noelle:  Disable loop "38" as cold code
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850512e-03%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000845e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.527436e-02%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919311e-04%)
Noelle:  Disable loop "42" as cold code
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.613965e-04%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.957720e-02%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793296e-04%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499705e-02%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478185e-02%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853072e-02%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793293e-04%)
Noelle:  Disable loop "49" as cold code
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.613965e-04%)
Noelle:  Disable loop "50" as cold code
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (1.838882e-01%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (1.048118e-01%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (7.873567e-02%)
Noelle:  Disable loop "53" as cold code
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "icnvrt"
Noelle:  Disable "icnvrt" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
EnablersManager:   Try to improve all 17 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %254 = icmp slt i64 %indvars.iv25.i, %252
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %254 = icmp slt i64 %indvars.iv25.i, %252"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %254, label %255, label %265, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %245 = icmp sgt i64 %indvars.iv27.i, %242
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %245 = icmp sgt i64 %indvars.iv27.i, %242"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %245, label %.preheader14.i.preheader, label %246, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %267 = icmp sgt i64 %indvars.iv29.i, %230
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %267 = icmp sgt i64 %indvars.iv29.i, %230"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %267, label %275, label %268, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %297 = icmp sgt i64 %indvars.iv33.i, %230
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %297 = icmp sgt i64 %indvars.iv33.i, %230"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %297, label %305, label %298, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %278 = icmp sgt i64 %indvars.iv31.i, %230
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %278 = icmp sgt i64 %indvars.iv31.i, %230"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %278, label %294, label %279, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond.i = icmp eq i32 %.0.i, 26
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond.i = icmp eq i32 %.0.i, 26"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond.i, label %.preheader13.i, label %.preheader15.i.preheader, !prof !46
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %317 = icmp slt i64 %indvars.iv21.i, %315
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %317 = icmp slt i64 %indvars.iv21.i, %315"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %317, label %318, label %328, !prof !49
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %308 = icmp sgt i64 %indvars.iv23.i, %242
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %308 = icmp sgt i64 %indvars.iv23.i, %242"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %308, label %.preheader.i.preheader, label %309, !prof !45
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i32 %.110, 76
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i32 %.110, 76"
LICM:     Invariant = "  %363 = getelementptr [30 x i8], [30 x i8]* @.str.4, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %.b30 = load i1, i1* @lastcol, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %365 = select i1 %.b30, i64 75000, i64 0, !prof !51
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b30 = load i1, i1* @lastcol, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b30 = load i1, i1* @lastcol, align 4
LICM:     Invariant = "  %.b23 = load i1, i1* @firstcol, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %366 = zext i1 %.b23 to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b23 = load i1, i1* @firstcol, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b23 = load i1, i1* @firstcol, align 4
LICM:     Invariant = "  %367 = sub nsw i64 %365, %366
LICM:       Checking dependences
LICM:         Dependent instruction = "  %365 = select i1 %.b30, i64 75000, i64 0, !prof !51
LICM:         Dependent instruction = "  %366 = zext i1 %.b23 to i64
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %365 = select i1 %.b30, i64 75000, i64 0, !prof !51
LICM:         %366 = zext i1 %.b23 to i64
LICM:     Invariant = "  %368 = add nsw i64 %367, 1
LICM:       Checking dependences
LICM:         Dependent instruction = "  %367 = sub nsw i64 %365, %366
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %367 = sub nsw i64 %365, %366
LICM:     Invariant = "  %362 = getelementptr [50 x i8], [50 x i8]* @str.4, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %.b16.pre.i = load i1, i1* @lastrow, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %.b.pre.i = load i1, i1* @firstrow, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %239 = select i1 %.b16.pre.i, i64 75000, i64 0
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b16.pre.i = load i1, i1* @lastrow, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b16.pre.i = load i1, i1* @lastrow, align 4
LICM:     Invariant = "  %240 = zext i1 %.b.pre.i to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b.pre.i = load i1, i1* @firstrow, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b.pre.i = load i1, i1* @firstrow, align 4
LICM:     Invariant = "  %241 = sub nsw i64 %239, %240
LICM:       Checking dependences
LICM:         Dependent instruction = "  %239 = select i1 %.b16.pre.i, i64 75000, i64 0
LICM:         Dependent instruction = "  %240 = zext i1 %.b.pre.i to i64
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %239 = select i1 %.b16.pre.i, i64 75000, i64 0
LICM:         %240 = zext i1 %.b.pre.i to i64
LICM:     Invariant = "  %242 = add nsw i64 %241, 1
LICM:       Checking dependences
LICM:         Dependent instruction = "  %241 = sub nsw i64 %239, %240
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %241 = sub nsw i64 %239, %240
LICM:     Invariant = "  %.b19.i = load i1, i1* @naa, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %wide.trip.count.i = select i1 %.b19.i, i64 75002, i64 2, !prof !43
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b19.i = load i1, i1* @naa, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b19.i = load i1, i1* @naa, align 4
LICM:     Invariant = "  %.b18.i = load i1, i1* @lastcol, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %227 = select i1 %.b18.i, i64 75000, i64 0
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b18.i = load i1, i1* @lastcol, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b18.i = load i1, i1* @lastcol, align 4
LICM:     Invariant = "  %.b17.i = load i1, i1* @firstcol, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %228 = zext i1 %.b17.i to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b17.i = load i1, i1* @firstcol, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b17.i = load i1, i1* @firstcol, align 4
LICM:     Invariant = "  %229 = sub nsw i64 %227, %228
LICM:       Checking dependences
LICM:         Dependent instruction = "  %228 = zext i1 %.b17.i to i64
LICM:         Dependent instruction = "  %227 = select i1 %.b18.i, i64 75000, i64 0
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %227 = select i1 %.b18.i, i64 75000, i64 0
LICM:         %228 = zext i1 %.b17.i to i64
LICM:     Invariant = "  %230 = add nsw i64 %229, 1
LICM:       Checking dependences
LICM:         Dependent instruction = "  %229 = sub nsw i64 %227, %228
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %229 = sub nsw i64 %227, %228
LICM:     Invariant = "  %.b31 = load i1, i1* @lastcol, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %340 = select i1 %.b31, i64 75000, i64 0, !prof !51
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b31 = load i1, i1* @lastcol, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b31 = load i1, i1* @lastcol, align 4
LICM:     Invariant = "  %.b24 = load i1, i1* @firstcol, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %341 = zext i1 %.b24 to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b24 = load i1, i1* @firstcol, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b24 = load i1, i1* @firstcol, align 4
LICM:     Invariant = "  %342 = sub nsw i64 %340, %341
LICM:       Checking dependences
LICM:         Dependent instruction = "  %341 = zext i1 %.b24 to i64
LICM:         Dependent instruction = "  %340 = select i1 %.b31, i64 75000, i64 0, !prof !51
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %340 = select i1 %.b31, i64 75000, i64 0, !prof !51
LICM:         %341 = zext i1 %.b24 to i64
LICM:     Invariant = "  %343 = add nsw i64 %342, 1
LICM:       Checking dependences
LICM:         Dependent instruction = "  %342 = sub nsw i64 %340, %341
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %342 = sub nsw i64 %340, %341
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %wide.trip.count.i = select i1 %.b19.i, i64 75002, i64 2, !prof !43
LICM:           It can be hoisted
LICM:         Invariant   %227 = select i1 %.b18.i, i64 75000, i64 0
LICM:           It can be hoisted
LICM:         Invariant   %228 = zext i1 %.b17.i to i64
LICM:           It can be hoisted
LICM:         Invariant   %229 = sub nsw i64 %227, %228
LICM:           It can be hoisted
LICM:         Invariant   %230 = add nsw i64 %229, 1
LICM:           It can be hoisted
LICM:         Invariant   %239 = select i1 %.b16.pre.i, i64 75000, i64 0
LICM:           It can be hoisted
LICM:         Invariant   %240 = zext i1 %.b.pre.i to i64
LICM:           It can be hoisted
LICM:         Invariant   %241 = sub nsw i64 %239, %240
LICM:           It can be hoisted
LICM:         Invariant   %242 = add nsw i64 %241, 1
LICM:           It can be hoisted
LICM:         Invariant   %340 = select i1 %.b31, i64 75000, i64 0, !prof !51
LICM:           It can be hoisted
LICM:         Invariant   %341 = zext i1 %.b24 to i64
LICM:           It can be hoisted
LICM:         Invariant   %342 = sub nsw i64 %340, %341
LICM:           It can be hoisted
LICM:         Invariant   %343 = add nsw i64 %342, 1
LICM:           It can be hoisted
LICM:         Invariant   %365 = select i1 %.b30, i64 75000, i64 0, !prof !51
LICM:           It can be hoisted
LICM:         Invariant   %366 = zext i1 %.b23 to i64
LICM:           It can be hoisted
LICM:         Invariant   %367 = sub nsw i64 %365, %366
LICM:           It can be hoisted
LICM:         Invariant   %368 = add nsw i64 %367, 1
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %97 = icmp slt i64 %indvars.iv25.i23, %95
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %88 = icmp sgt i64 %indvars.iv27.i19, %85
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond.i16 = icmp eq i32 %.0.i15, 26
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond48 = icmp eq i32 %.09, 2
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "sparse"
EnablersManager:     Entry instruction =   %106 = load i32, i32* %103, align 4, !tbaa !34
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34"
LICM:     Invariant = "  %106 = load i32, i32* %103, align 4, !tbaa !34
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %107 = sext i32 %106 to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %106 = load i32, i32* %103, align 4, !tbaa !34
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %106 = load i32, i32* %103, align 4, !tbaa !34
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %107 = sext i32 %106 to i64
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "sparse"
EnablersManager:     Entry instruction =   %101 = icmp sgt i64 %indvars.iv23, %99
EnablersManager:     The current loop belongs to the function sparse , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "makea"
EnablersManager:     Entry instruction =   %exitcond3 = icmp eq i64 %indvars.iv39, %.01
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond3, label %153, label %121, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "makea"
EnablersManager:     Entry instruction =   %36 = icmp sgt i32 %.03, %0
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %36 = icmp sgt i32 %.03, %0"
LICM:     Invariant = "  %118 = getelementptr [75002 x double], [75002 x double]* @v, i64 0, i64 14
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %119 = getelementptr [150002 x i32], [150002 x i32]* @iv, i64 0, i64 14
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.303830e-02%)
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282315e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255073e-04%)
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330751e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308574e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %wide.trip.count.i2" (3.227320e-04%)
Noelle:     Loop "  %75 = icmp sgt i64 %indvars.iv35.i8, %73" (1.792889e-04%)
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.257986e+00%)
Noelle:     Loop "  %88 = icmp sgt i64 %indvars.iv27.i19, %85" (1.237367e+00%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv25.i23, %95" (1.230644e+00%)
Noelle:     Loop "  %110 = icmp sgt i64 %indvars.iv29.i26, %73" (5.378686e-03%)
Noelle:     Loop "  %121 = icmp sgt i64 %indvars.iv31.i30, %73" (9.860904e-03%)
Noelle:     Loop "  %140 = icmp sgt i64 %indvars.iv33.i33, %73" (5.378680e-03%)
Noelle:     Loop "  %151 = icmp sgt i64 %indvars.iv23.i35, %85" (4.949469e-02%)
Noelle:     Loop "  %160 = icmp slt i64 %indvars.iv21.i38, %158" (4.922576e-02%)
Noelle:     Loop "  %173 = icmp sgt i64 %indvars.iv.i41, %73" (2.330753e-04%)
Noelle:     Loop "  %188 = icmp sgt i64 %indvars.iv44, %186" (1.792889e-04%)
Noelle:     Loop "  %202 = icmp sgt i64 %indvars.iv46, %200" (1.792887e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255073e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.814979e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %wide.trip.count.i" (2.420487e-02%)
Noelle:     Loop "  %232 = icmp sgt i64 %indvars.iv35.i, %230" (1.344672e-02%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.434893e+01%)
Noelle:     Loop "  %245 = icmp sgt i64 %indvars.iv27.i, %242" (9.280256e+01%)
Noelle:     Loop "  %254 = icmp slt i64 %indvars.iv25.i, %252" (9.229831e+01%)
Noelle:     Loop "  %267 = icmp sgt i64 %indvars.iv29.i, %230" (4.034013e-01%)
Noelle:     Loop "  %278 = icmp sgt i64 %indvars.iv31.i, %230" (7.395676e-01%)
Noelle:     Loop "  %297 = icmp sgt i64 %indvars.iv33.i, %230" (4.034009e-01%)
Noelle:     Loop "  %308 = icmp sgt i64 %indvars.iv23.i, %242" (3.712102e+00%)
Noelle:     Loop "  %317 = icmp slt i64 %indvars.iv21.i, %315" (3.691932e+00%)
Noelle:     Loop "  %330 = icmp sgt i64 %indvars.iv.i, %230" (1.748072e-02%)
Noelle:     Loop "  %345 = icmp sgt i64 %indvars.iv, %343" (2.017007e-02%)
Noelle:     Loop "  %370 = icmp sgt i64 %indvars.iv39, %368" (1.344671e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434311e-04%)
Noelle:     Loop "  %36 = icmp sgt i32 %.03, %0" (1.350332e-01%)
Noelle:     Loop "  %37 = shl nsw i32 %.04.i, 1" (1.496514e-03%)
Noelle:     Loop "  %40 = icmp slt i32 %.01.ph.i, 13" (2.771555e-02%)
Noelle:     Loop "  %43 = fmul double %42, 0x3E80000000000000" (2.044636e-02%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv.i3, %41" (2.369479e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850512e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000845e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.527436e-02%)
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919311e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.613965e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.957720e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793296e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499705e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478185e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853072e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793293e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.613965e-04%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (1.838882e-01%)
Noelle:     Loop "  %106 = load i32, i32* %103, align 4, !tbaa !34" (1.048118e-01%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (7.873567e-02%)
Noelle:  Function "randlc"
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.304064e-02%)
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282548e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255162e-04%)
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330916e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308667e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %wide.trip.count.i2" (3.227549e-04%)
Noelle:     Loop "  %75 = icmp sgt i64 %indvars.iv35.i8, %73" (1.793017e-04%)
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.258075e+00%)
Noelle:     Loop "  %88 = icmp sgt i64 %indvars.iv27.i19, %85" (1.237455e+00%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv25.i23, %95" (1.230731e+00%)
Noelle:     Loop "  %110 = icmp sgt i64 %indvars.iv29.i26, %73" (5.379068e-03%)
Noelle:     Loop "  %121 = icmp sgt i64 %indvars.iv31.i30, %73" (9.861604e-03%)
Noelle:     Loop "  %140 = icmp sgt i64 %indvars.iv33.i33, %73" (5.379062e-03%)
Noelle:     Loop "  %151 = icmp sgt i64 %indvars.iv23.i35, %85" (4.949821e-02%)
Noelle:     Loop "  %160 = icmp slt i64 %indvars.iv21.i38, %158" (4.922925e-02%)
Noelle:     Loop "  %173 = icmp sgt i64 %indvars.iv.i41, %73" (2.330919e-04%)
Noelle:     Loop "  %188 = icmp sgt i64 %indvars.iv44, %186" (1.793017e-04%)
Noelle:     Loop "  %202 = icmp sgt i64 %indvars.iv46, %200" (1.793014e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255162e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.815676e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %214" (2.420659e-02%)
Noelle:     Loop "  %256 = icmp sgt i64 %indvars.iv35.i, %220" (1.344768e-02%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.435563e+01%)
Noelle:     Loop "  %265 = icmp sgt i64 %indvars.iv27.i, %226" (9.280915e+01%)
Noelle:     Loop "  %274 = icmp slt i64 %indvars.iv25.i, %272" (9.230486e+01%)
Noelle:     Loop "  %287 = icmp sgt i64 %indvars.iv29.i, %220" (4.034300e-01%)
Noelle:     Loop "  %298 = icmp sgt i64 %indvars.iv31.i, %220" (7.396201e-01%)
Noelle:     Loop "  %317 = icmp sgt i64 %indvars.iv33.i, %220" (4.034295e-01%)
Noelle:     Loop "  %328 = icmp sgt i64 %indvars.iv23.i, %226" (3.712366e+00%)
Noelle:     Loop "  %337 = icmp slt i64 %indvars.iv21.i, %335" (3.692194e+00%)
Noelle:     Loop "  %350 = icmp sgt i64 %indvars.iv.i, %220" (1.748196e-02%)
Noelle:     Loop "  %361 = icmp sgt i64 %indvars.iv, %232" (2.017150e-02%)
Noelle:     Loop "  %380 = icmp sgt i64 %indvars.iv39, %240" (1.344766e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434413e-04%)
Noelle:     Loop "  %38 = icmp sgt i32 %.03, %0" (1.350071e-01%)
Noelle:     Loop "  %39 = shl nsw i32 %.04.i, 1" (1.496620e-03%)
Noelle:     Loop "  %42 = icmp slt i32 %.01.ph.i, 13" (2.771752e-02%)
Noelle:     Loop "  %45 = fmul double %44, 0x3E80000000000000" (2.044781e-02%)
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv.i3, %43" (2.369648e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850714e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000916e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.528113e-02%)
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919589e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614079e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958072e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793423e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499882e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478361e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853700e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793421e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.614079e-04%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (1.768355e-01%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv, %106" (9.771762e-02%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (7.874126e-02%)
Noelle:  Function "randlc"
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
NOELLE: FixedPoint:       There are 0 different instructions and -32 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.wswtMGVlli -o /tmp/tmp.wswtMGVlli
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.wswtMGVlli -o /tmp/tmp.wswtMGVlli
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.304064e-02%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282548e-02%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255162e-04%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330916e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308667e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %wide.trip.count.i2" (3.227549e-04%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %75 = icmp sgt i64 %indvars.iv35.i8, %73" (1.793017e-04%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.258075e+00%)
Noelle:     Loop "  %88 = icmp sgt i64 %indvars.iv27.i19, %85" (1.237455e+00%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv25.i23, %95" (1.230731e+00%)
Noelle:     Loop "  %110 = icmp sgt i64 %indvars.iv29.i26, %73" (5.379068e-03%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %121 = icmp sgt i64 %indvars.iv31.i30, %73" (9.861604e-03%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %140 = icmp sgt i64 %indvars.iv33.i33, %73" (5.379062e-03%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %151 = icmp sgt i64 %indvars.iv23.i35, %85" (4.949821e-02%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %160 = icmp slt i64 %indvars.iv21.i38, %158" (4.922925e-02%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %173 = icmp sgt i64 %indvars.iv.i41, %73" (2.330919e-04%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %188 = icmp sgt i64 %indvars.iv44, %186" (1.793017e-04%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %202 = icmp sgt i64 %indvars.iv46, %200" (1.793014e-04%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255162e-04%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.815676e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %214" (2.420659e-02%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %256 = icmp sgt i64 %indvars.iv35.i, %220" (1.344768e-02%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.435563e+01%)
Noelle:     Loop "  %265 = icmp sgt i64 %indvars.iv27.i, %226" (9.280915e+01%)
Noelle:     Loop "  %274 = icmp slt i64 %indvars.iv25.i, %272" (9.230486e+01%)
Noelle:     Loop "  %287 = icmp sgt i64 %indvars.iv29.i, %220" (4.034300e-01%)
Noelle:     Loop "  %298 = icmp sgt i64 %indvars.iv31.i, %220" (7.396201e-01%)
Noelle:     Loop "  %317 = icmp sgt i64 %indvars.iv33.i, %220" (4.034295e-01%)
Noelle:     Loop "  %328 = icmp sgt i64 %indvars.iv23.i, %226" (3.712366e+00%)
Noelle:     Loop "  %337 = icmp slt i64 %indvars.iv21.i, %335" (3.692194e+00%)
Noelle:     Loop "  %350 = icmp sgt i64 %indvars.iv.i, %220" (1.748196e-02%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  %361 = icmp sgt i64 %indvars.iv, %232" (2.017150e-02%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %380 = icmp sgt i64 %indvars.iv39, %240" (1.344766e-02%)
Noelle:  Disable loop "32" as cold code
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434413e-04%)
Noelle:  Disable loop "33" as cold code
Noelle:     Loop "  %38 = icmp sgt i32 %.03, %0" (1.350071e-01%)
Noelle:     Loop "  %39 = shl nsw i32 %.04.i, 1" (1.496620e-03%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %42 = icmp slt i32 %.01.ph.i, 13" (2.771752e-02%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %45 = fmul double %44, 0x3E80000000000000" (2.044781e-02%)
Noelle:  Disable loop "37" as cold code
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv.i3, %43" (2.369648e-03%)
Noelle:  Disable loop "38" as cold code
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850714e-03%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000916e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.528113e-02%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919589e-04%)
Noelle:  Disable loop "42" as cold code
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614079e-04%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958072e-02%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793423e-04%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499882e-02%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478361e-02%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853700e-02%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793421e-04%)
Noelle:  Disable loop "49" as cold code
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.614079e-04%)
Noelle:  Disable loop "50" as cold code
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (1.768355e-01%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv, %106" (9.771762e-02%)
Noelle:  Disable loop "52" as cold code
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (7.874126e-02%)
Noelle:  Disable loop "53" as cold code
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "icnvrt"
Noelle:  Disable "icnvrt" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
EnablersManager:   Try to improve all 16 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %317 = icmp sgt i64 %indvars.iv33.i, %220
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %317 = icmp sgt i64 %indvars.iv33.i, %220"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %317, label %325, label %318, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %274 = icmp slt i64 %indvars.iv25.i, %272
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %274 = icmp slt i64 %indvars.iv25.i, %272"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %274, label %275, label %285, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %265 = icmp sgt i64 %indvars.iv27.i, %226
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %265 = icmp sgt i64 %indvars.iv27.i, %226"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %265, label %.preheader14.i.preheader, label %266, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %298 = icmp sgt i64 %indvars.iv31.i, %220
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %298 = icmp sgt i64 %indvars.iv31.i, %220"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %298, label %314, label %299, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %287 = icmp sgt i64 %indvars.iv29.i, %220
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %287 = icmp sgt i64 %indvars.iv29.i, %220"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %287, label %295, label %288, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond.i = icmp eq i32 %.0.i, 26
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond.i = icmp eq i32 %.0.i, 26"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond.i, label %.preheader13.i, label %.preheader15.i.preheader, !prof !46
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %337 = icmp slt i64 %indvars.iv21.i, %335
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %337 = icmp slt i64 %indvars.iv21.i, %335"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %337, label %338, label %348, !prof !49
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %328 = icmp sgt i64 %indvars.iv23.i, %226
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %328 = icmp sgt i64 %indvars.iv23.i, %226"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %328, label %.preheader.i.preheader, label %329, !prof !45
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i32 %.110, 76
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i32 %.110, 76"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %388, label %242, !prof !51
Mem2Reg:   The loop has 1SCCs that each one access the same memory location
Mem2Reg:     Loop invariant memory location: @conj_grad.callcount = internal unnamed_addr global i32 0, align 4
Mem2Reg:     SCC:
Internal nodes: 3
	  %conj_grad.callcount.promoted.i = load i32, i32* @conj_grad.callcount, align 4, !tbaa !38
	  %264 = add i32 %conj_grad.callcount.promoted.i, 25
	  store i32 %264, i32* @conj_grad.callcount, align 4, !tbaa !38
External nodes: 1
	  br i1 %exitcond, label %388, label %242, !prof !51
Edges: 8

Mem2Reg:  Collecting and ordering memory loads/stores by basic block
Mem2Reg: Iterating basic blocks to determine last stored values
Mem2Reg: placeholder PHI required: label %242
Mem2Reg:  checking for last value entering block: label %242
Mem2Reg:  Last value entering block: label %242	  %243 = phi i32 
Mem2Reg:  checking for last value entering block: label %244
Mem2Reg:  Last value entering block: label %244	  %243 = phi i32 
Mem2Reg: placeholder PHI required: label %245
Mem2Reg:  checking for last value entering block: label %245
Mem2Reg:  Last value entering block: label %245	  %246 = phi i32 
Mem2Reg:  checking for last value entering block: label %257
Mem2Reg:  Last value entering block: label %257	  %246 = phi i32 
Mem2Reg:  checking for last value entering block: label %247
Mem2Reg:  Last value entering block: label %247	  %246 = phi i32 
Mem2Reg: placeholder PHI required: label %258
Mem2Reg:  checking for last value entering block: label %258
Mem2Reg:  Last value entering block: label %258	  %259 = phi i32 
Mem2Reg:  checking for last value entering block: label %266
Mem2Reg:  Last value entering block: label %266	  %259 = phi i32 
Mem2Reg:  checking for last value entering block: label %261
Mem2Reg:  Last value entering block: label %261	  %259 = phi i32 
Mem2Reg: placeholder PHI required: label %267
Mem2Reg:  checking for last value entering block: label %267
Mem2Reg:  Last value entering block: label %267	  %268 = phi i32 
Mem2Reg:  checking for last value entering block: label %.preheader13.i
Mem2Reg:  Last value entering block: label %.preheader13.i	  %268 = phi i32 
Mem2Reg:  Value updated:   %269 = add i32 %259, 25
Mem2Reg:  checking for last value entering block: label %.preheader15.i.preheader
Mem2Reg:  Last value entering block: label %.preheader15.i.preheader	  %268 = phi i32 
Mem2Reg: placeholder PHI required: label %332
Mem2Reg:  checking for last value entering block: label %332
Mem2Reg:  Last value entering block: label %332	  %333 = phi i32 
Mem2Reg: placeholder PHI required: label %.preheader15.i
Mem2Reg:  checking for last value entering block: label %.preheader15.i
Mem2Reg:  Last value entering block: label %.preheader15.i	  %270 = phi i32 
Mem2Reg:  checking for last value entering block: label %.preheader.i.preheader
Mem2Reg:  Last value entering block: label %.preheader.i.preheader	  %334 = phi i32 
Mem2Reg:  checking for last value entering block: label %336
Mem2Reg:  Last value entering block: label %336	  %334 = phi i32 
Mem2Reg:  checking for last value entering block: label %.preheader14.i.preheader
Mem2Reg:  Last value entering block: label %.preheader14.i.preheader	  %270 = phi i32 
Mem2Reg:  checking for last value entering block: label %272
Mem2Reg:  Last value entering block: label %272	  %270 = phi i32 
Mem2Reg: placeholder PHI required: label %.preheader.i
Mem2Reg:  checking for last value entering block: label %.preheader.i
Mem2Reg:  Last value entering block: label %.preheader.i	  %357 = phi i32 
Mem2Reg: placeholder PHI required: label %343
Mem2Reg:  checking for last value entering block: label %343
Mem2Reg:  Last value entering block: label %343	  %344 = phi i32 
Mem2Reg: placeholder PHI required: label %.preheader14.i
Mem2Reg:  checking for last value entering block: label %.preheader14.i
Mem2Reg:  Last value entering block: label %.preheader14.i	  %293 = phi i32 
Mem2Reg: placeholder PHI required: label %279
Mem2Reg:  checking for last value entering block: label %279
Mem2Reg:  Last value entering block: label %279	  %280 = phi i32 
Mem2Reg:  checking for last value entering block: label %conj_grad.exit
Mem2Reg:  Last value entering block: label %conj_grad.exit	  %360 = phi i32 
Mem2Reg:  checking for last value entering block: label %362
Mem2Reg:  Last value entering block: label %362	  %360 = phi i32 
Mem2Reg:  checking for last value entering block: label %348
Mem2Reg:  Last value entering block: label %348	  %346 = phi i32 
Mem2Reg:  checking for last value entering block: label %358
Mem2Reg:  Last value entering block: label %358	  %346 = phi i32 
Mem2Reg:  checking for last value entering block: label %303
Mem2Reg:  Last value entering block: label %303	  %294 = phi i32 
Mem2Reg:  checking for last value entering block: label %296
Mem2Reg:  Last value entering block: label %296	  %294 = phi i32 
Mem2Reg:  checking for last value entering block: label %282
Mem2Reg:  Last value entering block: label %282	  %280 = phi i32 
Mem2Reg:  checking for last value entering block: label %292
Mem2Reg:  Last value entering block: label %292	  %280 = phi i32 
Mem2Reg: placeholder PHI required: label %371
Mem2Reg:  checking for last value entering block: label %371
Mem2Reg:  Last value entering block: label %371	  %372 = phi i32 
Mem2Reg: placeholder PHI required: label %305
Mem2Reg:  checking for last value entering block: label %305
Mem2Reg:  Last value entering block: label %305	  %306 = phi i32 
Mem2Reg:  checking for last value entering block: label %384
Mem2Reg:  Last value entering block: label %384	  %373 = phi i32 
Mem2Reg:  checking for last value entering block: label %375
Mem2Reg:  Last value entering block: label %375	  %373 = phi i32 
Mem2Reg:  checking for last value entering block: label %323
Mem2Reg:  Last value entering block: label %323	  %306 = phi i32 
Mem2Reg:  checking for last value entering block: label %308
Mem2Reg:  Last value entering block: label %308	  %306 = phi i32 
Mem2Reg:  checking for last value entering block: label %390
Mem2Reg:  Last value entering block: label %390	  %373 = phi i32 
Mem2Reg:  checking for last value entering block: label %.._crit_edge_crit_edge
Mem2Reg:  Last value entering block: label %.._crit_edge_crit_edge	  %373 = phi i32 
Mem2Reg: placeholder PHI required: label %325
Mem2Reg:  checking for last value entering block: label %325
Mem2Reg:  Last value entering block: label %325	  %326 = phi i32 
Mem2Reg:  checking for last value entering block: label %._crit_edge
Mem2Reg:  Last value entering block: label %._crit_edge	  %392 = phi i32 [ %374, %.._crit_edge_crit_edge ], [ %374, %391 ]
Mem2Reg:  checking for last value entering block: label %335
Mem2Reg:  Last value entering block: label %335	  %326 = phi i32 
Mem2Reg:  checking for last value entering block: label %328
Mem2Reg:  Last value entering block: label %328	  %326 = phi i32 
Mem2Reg: placeholder PHI required: label %394
Mem2Reg:  checking for last value entering block: label %394
Mem2Reg:  Last value entering block: label %394	  %395 = phi i32 
Mem2Reg:  checking for last value entering block: label %402
Mem2Reg:  Last value entering block: label %402	  %395 = phi i32 
Mem2Reg:  checking for last value entering block: label %397
Mem2Reg:  Last value entering block: label %397	  %395 = phi i32 
Mem2Reg:  Removing
  %conj_grad.callcount.promoted.i = load i32, i32* @conj_grad.callcount, align 4, !tbaa !38
Mem2Reg:  Removing
  store i32 %271, i32* @conj_grad.callcount, align 4, !tbaa !38
Mem2Reg:       The memory location has been promoted
Mem2Reg: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %97 = icmp slt i64 %indvars.iv25.i23, %95
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %88 = icmp sgt i64 %indvars.iv27.i19, %85
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond.i16 = icmp eq i32 %.0.i15, 26
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond48 = icmp eq i32 %.09, 2
EnablersManager:     The current loop belongs to the function main , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "sparse"
EnablersManager:     Entry instruction =   %101 = icmp sgt i64 %indvars.iv23, %99
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %101 = icmp sgt i64 %indvars.iv23, %99"
LICM:     Invariant = "  %144 = getelementptr [75002 x i32], [75002 x i32]* @rowstr, i64 0, i64 1
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "makea"
EnablersManager:     Entry instruction =   %exitcond3 = icmp eq i64 %indvars.iv39, %.01
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond3, label %153, label %121, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "makea"
EnablersManager:     Entry instruction =   %38 = icmp sgt i32 %.03, %0
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %38 = icmp sgt i32 %.03, %0"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %38, label %.preheader.preheader, label %._crit_edge.i1.preheader, !prof !33
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.304064e-02%)
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282548e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255162e-04%)
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330916e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308667e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %wide.trip.count.i2" (3.227549e-04%)
Noelle:     Loop "  %75 = icmp sgt i64 %indvars.iv35.i8, %73" (1.793017e-04%)
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.258075e+00%)
Noelle:     Loop "  %88 = icmp sgt i64 %indvars.iv27.i19, %85" (1.237455e+00%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv25.i23, %95" (1.230731e+00%)
Noelle:     Loop "  %110 = icmp sgt i64 %indvars.iv29.i26, %73" (5.379068e-03%)
Noelle:     Loop "  %121 = icmp sgt i64 %indvars.iv31.i30, %73" (9.861604e-03%)
Noelle:     Loop "  %140 = icmp sgt i64 %indvars.iv33.i33, %73" (5.379062e-03%)
Noelle:     Loop "  %151 = icmp sgt i64 %indvars.iv23.i35, %85" (4.949821e-02%)
Noelle:     Loop "  %160 = icmp slt i64 %indvars.iv21.i38, %158" (4.922925e-02%)
Noelle:     Loop "  %173 = icmp sgt i64 %indvars.iv.i41, %73" (2.330919e-04%)
Noelle:     Loop "  %188 = icmp sgt i64 %indvars.iv44, %186" (1.793017e-04%)
Noelle:     Loop "  %202 = icmp sgt i64 %indvars.iv46, %200" (1.793014e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255162e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.815676e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %214" (2.420659e-02%)
Noelle:     Loop "  %256 = icmp sgt i64 %indvars.iv35.i, %220" (1.344768e-02%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.435563e+01%)
Noelle:     Loop "  %265 = icmp sgt i64 %indvars.iv27.i, %226" (9.280915e+01%)
Noelle:     Loop "  %274 = icmp slt i64 %indvars.iv25.i, %272" (9.230486e+01%)
Noelle:     Loop "  %287 = icmp sgt i64 %indvars.iv29.i, %220" (4.034300e-01%)
Noelle:     Loop "  %298 = icmp sgt i64 %indvars.iv31.i, %220" (7.396201e-01%)
Noelle:     Loop "  %317 = icmp sgt i64 %indvars.iv33.i, %220" (4.034295e-01%)
Noelle:     Loop "  %328 = icmp sgt i64 %indvars.iv23.i, %226" (3.712366e+00%)
Noelle:     Loop "  %337 = icmp slt i64 %indvars.iv21.i, %335" (3.692194e+00%)
Noelle:     Loop "  %350 = icmp sgt i64 %indvars.iv.i, %220" (1.748196e-02%)
Noelle:     Loop "  %361 = icmp sgt i64 %indvars.iv, %232" (2.017150e-02%)
Noelle:     Loop "  %380 = icmp sgt i64 %indvars.iv39, %240" (1.344766e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434413e-04%)
Noelle:     Loop "  %38 = icmp sgt i32 %.03, %0" (1.350071e-01%)
Noelle:     Loop "  %39 = shl nsw i32 %.04.i, 1" (1.496620e-03%)
Noelle:     Loop "  %42 = icmp slt i32 %.01.ph.i, 13" (2.771752e-02%)
Noelle:     Loop "  %45 = fmul double %44, 0x3E80000000000000" (2.044781e-02%)
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv.i3, %43" (2.369648e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850714e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000916e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.528113e-02%)
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919589e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614079e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958072e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793423e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499882e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478361e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853700e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793421e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.614079e-04%)
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99" (1.768355e-01%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv, %106" (9.771762e-02%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127" (7.874126e-02%)
Noelle:  Function "randlc"
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (2.922243e-02%)
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (2.903213e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.110114e-04%)
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.061553e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.157436e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %wide.trip.count.i2" (2.854570e-04%)
Noelle:     Loop "  %75 = icmp sgt i64 %indvars.iv35.i8, %73" (1.585814e-04%)
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.112691e+00%)
Noelle:     Loop "  %88 = icmp sgt i64 %indvars.iv27.i19, %85" (1.094454e+00%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv25.i23, %95" (1.088507e+00%)
Noelle:     Loop "  %110 = icmp sgt i64 %indvars.iv29.i26, %73" (4.757457e-03%)
Noelle:     Loop "  %121 = icmp sgt i64 %indvars.iv31.i30, %73" (8.721987e-03%)
Noelle:     Loop "  %140 = icmp sgt i64 %indvars.iv33.i33, %73" (4.757452e-03%)
Noelle:     Loop "  %151 = icmp sgt i64 %indvars.iv23.i35, %85" (4.377814e-02%)
Noelle:     Loop "  %160 = icmp slt i64 %indvars.iv21.i38, %158" (4.354027e-02%)
Noelle:     Loop "  %173 = icmp sgt i64 %indvars.iv.i41, %73" (2.061555e-04%)
Noelle:     Loop "  %188 = icmp sgt i64 %indvars.iv44, %186" (1.585814e-04%)
Noelle:     Loop "  %202 = icmp sgt i64 %indvars.iv46, %200" (1.585811e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.110114e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.836978e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %214" (2.378807e-02%)
Noelle:     Loop "  %261 = icmp sgt i64 %indvars.iv35.i, %220" (1.427238e-02%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.455888e+01%)
Noelle:     Loop "  %273 = icmp sgt i64 %indvars.iv27.i, %226" (9.301270e+01%)
Noelle:     Loop "  %283 = icmp slt i64 %indvars.iv25.i, %280" (9.253696e+01%)
Noelle:     Loop "  %298 = icmp sgt i64 %indvars.iv29.i, %220" (4.162775e-01%)
Noelle:     Loop "  %311 = icmp sgt i64 %indvars.iv31.i, %220" (7.136172e-01%)
Noelle:     Loop "  %332 = icmp sgt i64 %indvars.iv33.i, %220" (4.162771e-01%)
Noelle:     Loop "  %345 = icmp sgt i64 %indvars.iv23.i, %226" (3.720508e+00%)
Noelle:     Loop "  %355 = icmp slt i64 %indvars.iv21.i, %352" (3.701478e+00%)
Noelle:     Loop "  %370 = icmp sgt i64 %indvars.iv.i, %220" (1.784046e-02%)
Noelle:     Loop "  %383 = icmp sgt i64 %indvars.iv, %232" (2.021919e-02%)
Noelle:     Loop "  %405 = icmp sgt i64 %indvars.iv39, %240" (1.427237e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.268650e-04%)
Noelle:     Loop "  %38 = icmp sgt i32 %.03, %0" (1.194056e-01%)
Noelle:     Loop "  %39 = shl nsw i32 %.04.i, 1" (1.323669e-03%)
Noelle:     Loop "  %42 = icmp slt i32 %.01.ph.i, 13" (2.451445e-02%)
Noelle:     Loop "  %45 = fmul double %44, 0x3E80000000000000" (1.808484e-02%)
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv.i3, %43" (2.095809e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.521282e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (8.852490e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (8.427034e-02%)
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.466637e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.427554e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.385112e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.586173e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.210993e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.191959e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (7.830557e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.586171e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.427554e-04%)
Noelle:     Loop "  %102 = icmp sgt i64 %indvars.iv23, %99" (1.563843e-01%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv, %107" (8.642527e-02%)
Noelle:     Loop "  %130 = icmp sgt i64 %indvars.iv21, %128" (6.964184e-02%)
Noelle:  Function "randlc"
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
NOELLE: FixedPoint:       There are 0 different instructions and -3 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.wswtMGVlli -o /tmp/tmp.wswtMGVlli
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.wswtMGVlli -o /tmp/tmp.wswtMGVlli
NOELLE: FixedPoint:     Invocation 2
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.304065e-02%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282549e-02%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255162e-04%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330917e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308667e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %wide.trip.count.i2" (3.227549e-04%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %75 = icmp sgt i64 %indvars.iv35.i8, %73" (1.793017e-04%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.258075e+00%)
Noelle:     Loop "  %88 = icmp sgt i64 %indvars.iv27.i19, %85" (1.237456e+00%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv25.i23, %95" (1.230732e+00%)
Noelle:     Loop "  %110 = icmp sgt i64 %indvars.iv29.i26, %73" (5.379069e-03%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %121 = icmp sgt i64 %indvars.iv31.i30, %73" (9.861606e-03%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %140 = icmp sgt i64 %indvars.iv33.i33, %73" (5.379063e-03%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %151 = icmp sgt i64 %indvars.iv23.i35, %85" (4.949822e-02%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %160 = icmp slt i64 %indvars.iv21.i38, %158" (4.922926e-02%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %173 = icmp sgt i64 %indvars.iv.i41, %73" (2.330919e-04%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %188 = icmp sgt i64 %indvars.iv44, %186" (1.793017e-04%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %202 = icmp sgt i64 %indvars.iv46, %200" (1.793014e-04%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255162e-04%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.815677e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %214" (2.420659e-02%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %258 = icmp sgt i64 %indvars.iv35.i, %220" (1.344768e-02%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.435565e+01%)
Noelle:     Loop "  %266 = icmp sgt i64 %indvars.iv27.i, %226" (9.280916e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %indvars.iv25.i, %273" (9.230488e+01%)
Noelle:     Loop "  %288 = icmp sgt i64 %indvars.iv29.i, %220" (4.034301e-01%)
Noelle:     Loop "  %299 = icmp sgt i64 %indvars.iv31.i, %220" (7.396203e-01%)
Noelle:     Loop "  %318 = icmp sgt i64 %indvars.iv33.i, %220" (4.034296e-01%)
Noelle:     Loop "  %329 = icmp sgt i64 %indvars.iv23.i, %226" (3.712366e+00%)
Noelle:     Loop "  %338 = icmp slt i64 %indvars.iv21.i, %336" (3.692195e+00%)
Noelle:     Loop "  %351 = icmp sgt i64 %indvars.iv.i, %220" (1.748196e-02%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  %362 = icmp sgt i64 %indvars.iv, %232" (2.017150e-02%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %383 = icmp sgt i64 %indvars.iv39, %240" (1.344766e-02%)
Noelle:  Disable loop "32" as cold code
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434413e-04%)
Noelle:  Disable loop "33" as cold code
Noelle:     Loop "  %38 = icmp sgt i32 %.03, %0" (1.350072e-01%)
Noelle:     Loop "  %39 = shl nsw i32 %.04.i, 1" (1.496620e-03%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %42 = icmp slt i32 %.01.ph.i, 13" (2.771752e-02%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %45 = fmul double %44, 0x3E80000000000000" (2.044781e-02%)
Noelle:  Disable loop "37" as cold code
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv.i3, %43" (2.369648e-03%)
Noelle:  Disable loop "38" as cold code
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850714e-03%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000916e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.528115e-02%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919590e-04%)
Noelle:  Disable loop "42" as cold code
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614080e-04%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958073e-02%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793423e-04%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499883e-02%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478362e-02%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853702e-02%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793421e-04%)
Noelle:  Disable loop "49" as cold code
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.614080e-04%)
Noelle:  Disable loop "50" as cold code
Noelle:     Loop "  %102 = icmp sgt i64 %indvars.iv23, %99" (1.768176e-01%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv, %107" (9.771764e-02%)
Noelle:  Disable loop "52" as cold code
Noelle:     Loop "  %130 = icmp sgt i64 %indvars.iv21, %128" (7.874128e-02%)
Noelle:  Disable loop "53" as cold code
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "icnvrt"
Noelle:  Disable "icnvrt" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
EnablersManager:   Try to improve all 16 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %299 = icmp sgt i64 %indvars.iv31.i, %220
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %299 = icmp sgt i64 %indvars.iv31.i, %220"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %299, label %315, label %300, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %275 = icmp slt i64 %indvars.iv25.i, %273
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %275 = icmp slt i64 %indvars.iv25.i, %273"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %275, label %276, label %286, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %266 = icmp sgt i64 %indvars.iv27.i, %226
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %266 = icmp sgt i64 %indvars.iv27.i, %226"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %266, label %.preheader14.i.preheader, label %267, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %318 = icmp sgt i64 %indvars.iv33.i, %220
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %318 = icmp sgt i64 %indvars.iv33.i, %220"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %318, label %326, label %319, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %288 = icmp sgt i64 %indvars.iv29.i, %220
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %288 = icmp sgt i64 %indvars.iv29.i, %220"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %288, label %296, label %289, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond.i = icmp eq i32 %.0.i, 26
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond.i = icmp eq i32 %.0.i, 26"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond.i, label %.preheader13.i, label %.preheader15.i.preheader, !prof !46
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %338 = icmp slt i64 %indvars.iv21.i, %336
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %338 = icmp slt i64 %indvars.iv21.i, %336"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %338, label %339, label %349, !prof !49
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %329 = icmp sgt i64 %indvars.iv23.i, %226
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %329 = icmp sgt i64 %indvars.iv23.i, %226"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %329, label %.preheader.i.preheader, label %330, !prof !45
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i32 %.110, 76
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i32 %.110, 76"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %391, label %244, !prof !51
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %97 = icmp slt i64 %indvars.iv25.i23, %95
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %97 = icmp slt i64 %indvars.iv25.i23, %95"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %97, label %98, label %108, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %88 = icmp sgt i64 %indvars.iv27.i19, %85
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %88 = icmp sgt i64 %indvars.iv27.i19, %85"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %88, label %.preheader14.i28.preheader, label %89, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond.i16 = icmp eq i32 %.0.i15, 26
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond.i16, label %.preheader13.i18, label %.preheader15.i20.preheader, !prof !46
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond48 = icmp eq i32 %.09, 2
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond48 = icmp eq i32 %.09, 2"
LICM:     Invariant = "  %.b32 = load i1, i1* @lastcol, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %197 = select i1 %.b32, i64 75000, i64 0, !prof !36
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b32 = load i1, i1* @lastcol, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b32 = load i1, i1* @lastcol, align 4
LICM:     Invariant = "  %.b25 = load i1, i1* @firstcol, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %198 = zext i1 %.b25 to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b25 = load i1, i1* @firstcol, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b25 = load i1, i1* @firstcol, align 4
LICM:     Invariant = "  %199 = sub nsw i64 %197, %198
LICM:       Checking dependences
LICM:         Dependent instruction = "  %197 = select i1 %.b32, i64 75000, i64 0, !prof !36
LICM:         Dependent instruction = "  %198 = zext i1 %.b25 to i64
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %197 = select i1 %.b32, i64 75000, i64 0, !prof !36
LICM:         %198 = zext i1 %.b25 to i64
LICM:     Invariant = "  %200 = add nsw i64 %199, 1
LICM:       Checking dependences
LICM:         Dependent instruction = "  %199 = sub nsw i64 %197, %198
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %199 = sub nsw i64 %197, %198
LICM:     Invariant = "  %.b16.pre.i11 = load i1, i1* @lastrow, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %.b.pre.i12 = load i1, i1* @firstrow, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %82 = select i1 %.b16.pre.i11, i64 75000, i64 0
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b16.pre.i11 = load i1, i1* @lastrow, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b16.pre.i11 = load i1, i1* @lastrow, align 4
LICM:     Invariant = "  %83 = zext i1 %.b.pre.i12 to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b.pre.i12 = load i1, i1* @firstrow, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b.pre.i12 = load i1, i1* @firstrow, align 4
LICM:     Invariant = "  %84 = sub nsw i64 %82, %83
LICM:       Checking dependences
LICM:         Dependent instruction = "  %82 = select i1 %.b16.pre.i11, i64 75000, i64 0
LICM:         Dependent instruction = "  %83 = zext i1 %.b.pre.i12 to i64
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %82 = select i1 %.b16.pre.i11, i64 75000, i64 0
LICM:         %83 = zext i1 %.b.pre.i12 to i64
LICM:     Invariant = "  %85 = add nsw i64 %84, 1
LICM:       Checking dependences
LICM:         Dependent instruction = "  %84 = sub nsw i64 %82, %83
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %84 = sub nsw i64 %82, %83
LICM:     Invariant = "  %.b19.i1 = load i1, i1* @naa, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %wide.trip.count.i2 = select i1 %.b19.i1, i64 75002, i64 2, !prof !43
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b19.i1 = load i1, i1* @naa, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b19.i1 = load i1, i1* @naa, align 4
LICM:     Invariant = "  %.b17.i7 = phi i1 [ %.b25, %208 ], [ %.b28, %.preheader18.preheader ]
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b25 = load i1, i1* @firstcol, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b25 = load i1, i1* @firstcol, align 4
LICM:     Invariant = "  %.b18.i6 = phi i1 [ %.b32, %208 ], [ %.b34, %.preheader18.preheader ]
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b32 = load i1, i1* @lastcol, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b32 = load i1, i1* @lastcol, align 4
LICM:     Invariant = "  %70 = select i1 %.b34, i64 75000, i64 0
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b18.i6 = phi i1 [ %.b32, %208 ], [ %.b34, %.preheader18.preheader ]
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b18.i6 = phi i1 [ %.b32, %208 ], [ %.b34, %.preheader18.preheader ]
LICM:     Invariant = "  %71 = zext i1 %.b28 to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b17.i7 = phi i1 [ %.b25, %208 ], [ %.b28, %.preheader18.preheader ]
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b17.i7 = phi i1 [ %.b25, %208 ], [ %.b28, %.preheader18.preheader ]
LICM:     Invariant = "  %72 = sub nsw i64 %70, %71
LICM:       Checking dependences
LICM:         Dependent instruction = "  %70 = select i1 %.b34, i64 75000, i64 0
LICM:         Dependent instruction = "  %71 = zext i1 %.b28 to i64
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %70 = select i1 %.b34, i64 75000, i64 0
LICM:         %71 = zext i1 %.b28 to i64
LICM:     Invariant = "  %73 = add nsw i64 %72, 1
LICM:       Checking dependences
LICM:         Dependent instruction = "  %72 = sub nsw i64 %70, %71
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %72 = sub nsw i64 %70, %71
LICM:     Invariant = "  %.b33 = load i1, i1* @lastcol, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %183 = select i1 %.b33, i64 75000, i64 0, !prof !36
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b33 = load i1, i1* @lastcol, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b33 = load i1, i1* @lastcol, align 4
LICM:     Invariant = "  %.b26 = load i1, i1* @firstcol, align 4
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %184 = zext i1 %.b26 to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %.b26 = load i1, i1* @firstcol, align 4
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %.b26 = load i1, i1* @firstcol, align 4
LICM:     Invariant = "  %185 = sub nsw i64 %183, %184
LICM:       Checking dependences
LICM:         Dependent instruction = "  %184 = zext i1 %.b26 to i64
LICM:         Dependent instruction = "  %183 = select i1 %.b33, i64 75000, i64 0, !prof !36
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %183 = select i1 %.b33, i64 75000, i64 0, !prof !36
LICM:         %184 = zext i1 %.b26 to i64
LICM:     Invariant = "  %186 = add nsw i64 %185, 1
LICM:       Checking dependences
LICM:         Dependent instruction = "  %185 = sub nsw i64 %183, %184
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %185 = sub nsw i64 %183, %184
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %wide.trip.count.i2 = select i1 %.b19.i1, i64 75002, i64 2, !prof !43
LICM:           It can be hoisted
LICM:         Invariant   %70 = select i1 %.b34, i64 75000, i64 0
LICM:           It cannot be hoisted
LICM:       Check the invariants
LICM:         Invariant   %71 = zext i1 %.b28 to i64
LICM:           It cannot be hoisted
LICM:       Check the invariants
LICM:         Invariant   %73 = add nsw i64 %72, 1
LICM:           It cannot be hoisted
LICM:       Check the invariants
LICM:         Invariant   %82 = select i1 %.b16.pre.i11, i64 75000, i64 0
LICM:           It can be hoisted
LICM:         Invariant   %83 = zext i1 %.b.pre.i12 to i64
LICM:           It can be hoisted
LICM:         Invariant   %84 = sub nsw i64 %82, %83
LICM:           It can be hoisted
LICM:         Invariant   %85 = add nsw i64 %84, 1
LICM:           It can be hoisted
LICM:         Invariant   %183 = select i1 %.b33, i64 75000, i64 0, !prof !36
LICM:           It can be hoisted
LICM:         Invariant   %184 = zext i1 %.b26 to i64
LICM:           It can be hoisted
LICM:         Invariant   %185 = sub nsw i64 %183, %184
LICM:           It can be hoisted
LICM:         Invariant   %186 = add nsw i64 %185, 1
LICM:           It can be hoisted
LICM:         Invariant   %197 = select i1 %.b32, i64 75000, i64 0, !prof !36
LICM:           It can be hoisted
LICM:         Invariant   %198 = zext i1 %.b25 to i64
LICM:           It can be hoisted
LICM:         Invariant   %199 = sub nsw i64 %197, %198
LICM:           It can be hoisted
LICM:         Invariant   %200 = add nsw i64 %199, 1
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "sparse"
EnablersManager:     Entry instruction =   %102 = icmp sgt i64 %indvars.iv23, %99
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %102 = icmp sgt i64 %indvars.iv23, %99"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %102, label %147, label %103, !prof !33
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "makea"
EnablersManager:     Entry instruction =   %exitcond3 = icmp eq i64 %indvars.iv39, %.01
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond3, label %153, label %121, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "makea"
EnablersManager:     Entry instruction =   %38 = icmp sgt i32 %.03, %0
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %38 = icmp sgt i32 %.03, %0"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %38, label %.preheader.preheader, label %._crit_edge.i1.preheader, !prof !33
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.304065e-02%)
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282549e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255162e-04%)
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330917e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308667e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %wide.trip.count.i2" (3.227549e-04%)
Noelle:     Loop "  %75 = icmp sgt i64 %indvars.iv35.i8, %73" (1.793017e-04%)
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.258075e+00%)
Noelle:     Loop "  %88 = icmp sgt i64 %indvars.iv27.i19, %85" (1.237456e+00%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv25.i23, %95" (1.230732e+00%)
Noelle:     Loop "  %110 = icmp sgt i64 %indvars.iv29.i26, %73" (5.379069e-03%)
Noelle:     Loop "  %121 = icmp sgt i64 %indvars.iv31.i30, %73" (9.861606e-03%)
Noelle:     Loop "  %140 = icmp sgt i64 %indvars.iv33.i33, %73" (5.379063e-03%)
Noelle:     Loop "  %151 = icmp sgt i64 %indvars.iv23.i35, %85" (4.949822e-02%)
Noelle:     Loop "  %160 = icmp slt i64 %indvars.iv21.i38, %158" (4.922926e-02%)
Noelle:     Loop "  %173 = icmp sgt i64 %indvars.iv.i41, %73" (2.330919e-04%)
Noelle:     Loop "  %188 = icmp sgt i64 %indvars.iv44, %186" (1.793017e-04%)
Noelle:     Loop "  %202 = icmp sgt i64 %indvars.iv46, %200" (1.793014e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255162e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.815677e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %214" (2.420659e-02%)
Noelle:     Loop "  %258 = icmp sgt i64 %indvars.iv35.i, %220" (1.344768e-02%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.435565e+01%)
Noelle:     Loop "  %266 = icmp sgt i64 %indvars.iv27.i, %226" (9.280916e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %indvars.iv25.i, %273" (9.230488e+01%)
Noelle:     Loop "  %288 = icmp sgt i64 %indvars.iv29.i, %220" (4.034301e-01%)
Noelle:     Loop "  %299 = icmp sgt i64 %indvars.iv31.i, %220" (7.396203e-01%)
Noelle:     Loop "  %318 = icmp sgt i64 %indvars.iv33.i, %220" (4.034296e-01%)
Noelle:     Loop "  %329 = icmp sgt i64 %indvars.iv23.i, %226" (3.712366e+00%)
Noelle:     Loop "  %338 = icmp slt i64 %indvars.iv21.i, %336" (3.692195e+00%)
Noelle:     Loop "  %351 = icmp sgt i64 %indvars.iv.i, %220" (1.748196e-02%)
Noelle:     Loop "  %362 = icmp sgt i64 %indvars.iv, %232" (2.017150e-02%)
Noelle:     Loop "  %383 = icmp sgt i64 %indvars.iv39, %240" (1.344766e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434413e-04%)
Noelle:     Loop "  %38 = icmp sgt i32 %.03, %0" (1.350072e-01%)
Noelle:     Loop "  %39 = shl nsw i32 %.04.i, 1" (1.496620e-03%)
Noelle:     Loop "  %42 = icmp slt i32 %.01.ph.i, 13" (2.771752e-02%)
Noelle:     Loop "  %45 = fmul double %44, 0x3E80000000000000" (2.044781e-02%)
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv.i3, %43" (2.369648e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850714e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000916e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.528115e-02%)
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919590e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614080e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958073e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793423e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499883e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478362e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853702e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793421e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.614080e-04%)
Noelle:     Loop "  %102 = icmp sgt i64 %indvars.iv23, %99" (1.768176e-01%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv, %107" (9.771764e-02%)
Noelle:     Loop "  %130 = icmp sgt i64 %indvars.iv21, %128" (7.874128e-02%)
Noelle:  Function "randlc"
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.304065e-02%)
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282549e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255162e-04%)
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330917e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308667e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %53" (3.227549e-04%)
Noelle:     Loop "  %95 = icmp sgt i64 %indvars.iv35.i8, %93" (1.793017e-04%)
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.258075e+00%)
Noelle:     Loop "  %104 = icmp sgt i64 %indvars.iv27.i19, %59" (1.237456e+00%)
Noelle:     Loop "  %113 = icmp slt i64 %indvars.iv25.i23, %111" (1.230732e+00%)
Noelle:     Loop "  %126 = icmp sgt i64 %indvars.iv29.i26, %93" (5.379069e-03%)
Noelle:     Loop "  %137 = icmp sgt i64 %indvars.iv31.i30, %93" (9.861606e-03%)
Noelle:     Loop "  %156 = icmp sgt i64 %indvars.iv33.i33, %93" (5.379063e-03%)
Noelle:     Loop "  %167 = icmp sgt i64 %indvars.iv23.i35, %59" (4.949822e-02%)
Noelle:     Loop "  %176 = icmp slt i64 %indvars.iv21.i38, %174" (4.922926e-02%)
Noelle:     Loop "  %189 = icmp sgt i64 %indvars.iv.i41, %93" (2.330919e-04%)
Noelle:     Loop "  %200 = icmp sgt i64 %indvars.iv44, %65" (1.793017e-04%)
Noelle:     Loop "  %210 = icmp sgt i64 %indvars.iv46, %71" (1.793014e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255162e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.815677e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %222" (2.420659e-02%)
Noelle:     Loop "  %266 = icmp sgt i64 %indvars.iv35.i, %228" (1.344768e-02%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.435565e+01%)
Noelle:     Loop "  %274 = icmp sgt i64 %indvars.iv27.i, %234" (9.280916e+01%)
Noelle:     Loop "  %283 = icmp slt i64 %indvars.iv25.i, %281" (9.230488e+01%)
Noelle:     Loop "  %296 = icmp sgt i64 %indvars.iv29.i, %228" (4.034301e-01%)
Noelle:     Loop "  %307 = icmp sgt i64 %indvars.iv31.i, %228" (7.396203e-01%)
Noelle:     Loop "  %326 = icmp sgt i64 %indvars.iv33.i, %228" (4.034296e-01%)
Noelle:     Loop "  %337 = icmp sgt i64 %indvars.iv23.i, %234" (3.712366e+00%)
Noelle:     Loop "  %346 = icmp slt i64 %indvars.iv21.i, %344" (3.692195e+00%)
Noelle:     Loop "  %359 = icmp sgt i64 %indvars.iv.i, %228" (1.748196e-02%)
Noelle:     Loop "  %370 = icmp sgt i64 %indvars.iv, %240" (2.017150e-02%)
Noelle:     Loop "  %391 = icmp sgt i64 %indvars.iv39, %248" (1.344766e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434413e-04%)
Noelle:     Loop "  %38 = icmp sgt i32 %.03, %0" (1.350072e-01%)
Noelle:     Loop "  %39 = shl nsw i32 %.04.i, 1" (1.496620e-03%)
Noelle:     Loop "  %42 = icmp slt i32 %.01.ph.i, 13" (2.771752e-02%)
Noelle:     Loop "  %45 = fmul double %44, 0x3E80000000000000" (2.044781e-02%)
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv.i3, %43" (2.369648e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850714e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000916e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.528115e-02%)
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919590e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614080e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958073e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793423e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499883e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478362e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853702e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793421e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.614080e-04%)
Noelle:     Loop "  %102 = icmp sgt i64 %indvars.iv23, %99" (1.768176e-01%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv, %107" (9.771764e-02%)
Noelle:     Loop "  %130 = icmp sgt i64 %indvars.iv21, %128" (7.874128e-02%)
Noelle:  Function "randlc"
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
NOELLE: FixedPoint:       There are 0 different instructions and -20 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.wswtMGVlli -o /tmp/tmp.wswtMGVlli
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.wswtMGVlli -o /tmp/tmp.wswtMGVlli
NOELLE: FixedPoint:     Invocation 3
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.304065e-02%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282549e-02%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255162e-04%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330917e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308667e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %53" (3.227549e-04%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %95 = icmp sgt i64 %indvars.iv35.i8, %93" (1.793017e-04%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.258075e+00%)
Noelle:     Loop "  %104 = icmp sgt i64 %indvars.iv27.i19, %59" (1.237456e+00%)
Noelle:     Loop "  %113 = icmp slt i64 %indvars.iv25.i23, %111" (1.230732e+00%)
Noelle:     Loop "  %126 = icmp sgt i64 %indvars.iv29.i26, %93" (5.379069e-03%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %137 = icmp sgt i64 %indvars.iv31.i30, %93" (9.861606e-03%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %156 = icmp sgt i64 %indvars.iv33.i33, %93" (5.379063e-03%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %167 = icmp sgt i64 %indvars.iv23.i35, %59" (4.949822e-02%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %176 = icmp slt i64 %indvars.iv21.i38, %174" (4.922926e-02%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %189 = icmp sgt i64 %indvars.iv.i41, %93" (2.330919e-04%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %200 = icmp sgt i64 %indvars.iv44, %65" (1.793017e-04%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %210 = icmp sgt i64 %indvars.iv46, %71" (1.793014e-04%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255162e-04%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.815677e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %222" (2.420659e-02%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %266 = icmp sgt i64 %indvars.iv35.i, %228" (1.344768e-02%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.435565e+01%)
Noelle:     Loop "  %274 = icmp sgt i64 %indvars.iv27.i, %234" (9.280916e+01%)
Noelle:     Loop "  %283 = icmp slt i64 %indvars.iv25.i, %281" (9.230488e+01%)
Noelle:     Loop "  %296 = icmp sgt i64 %indvars.iv29.i, %228" (4.034301e-01%)
Noelle:     Loop "  %307 = icmp sgt i64 %indvars.iv31.i, %228" (7.396203e-01%)
Noelle:     Loop "  %326 = icmp sgt i64 %indvars.iv33.i, %228" (4.034296e-01%)
Noelle:     Loop "  %337 = icmp sgt i64 %indvars.iv23.i, %234" (3.712366e+00%)
Noelle:     Loop "  %346 = icmp slt i64 %indvars.iv21.i, %344" (3.692195e+00%)
Noelle:     Loop "  %359 = icmp sgt i64 %indvars.iv.i, %228" (1.748196e-02%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  %370 = icmp sgt i64 %indvars.iv, %240" (2.017150e-02%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %391 = icmp sgt i64 %indvars.iv39, %248" (1.344766e-02%)
Noelle:  Disable loop "32" as cold code
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434413e-04%)
Noelle:  Disable loop "33" as cold code
Noelle:     Loop "  %38 = icmp sgt i32 %.03, %0" (1.350072e-01%)
Noelle:     Loop "  %39 = shl nsw i32 %.04.i, 1" (1.496620e-03%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %42 = icmp slt i32 %.01.ph.i, 13" (2.771752e-02%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %45 = fmul double %44, 0x3E80000000000000" (2.044781e-02%)
Noelle:  Disable loop "37" as cold code
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv.i3, %43" (2.369648e-03%)
Noelle:  Disable loop "38" as cold code
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850714e-03%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000916e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.528115e-02%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919590e-04%)
Noelle:  Disable loop "42" as cold code
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614080e-04%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958073e-02%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793423e-04%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499883e-02%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478362e-02%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853702e-02%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793421e-04%)
Noelle:  Disable loop "49" as cold code
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.614080e-04%)
Noelle:  Disable loop "50" as cold code
Noelle:     Loop "  %102 = icmp sgt i64 %indvars.iv23, %99" (1.768176e-01%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv, %107" (9.771764e-02%)
Noelle:  Disable loop "52" as cold code
Noelle:     Loop "  %130 = icmp sgt i64 %indvars.iv21, %128" (7.874128e-02%)
Noelle:  Disable loop "53" as cold code
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "icnvrt"
Noelle:  Disable "icnvrt" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
EnablersManager:   Try to improve all 16 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %307 = icmp sgt i64 %indvars.iv31.i, %228
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %307 = icmp sgt i64 %indvars.iv31.i, %228"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %307, label %323, label %308, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %326 = icmp sgt i64 %indvars.iv33.i, %228
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %326 = icmp sgt i64 %indvars.iv33.i, %228"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %326, label %334, label %327, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %283 = icmp slt i64 %indvars.iv25.i, %281
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %283 = icmp slt i64 %indvars.iv25.i, %281"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %283, label %284, label %294, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %274 = icmp sgt i64 %indvars.iv27.i, %234
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %274 = icmp sgt i64 %indvars.iv27.i, %234"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %274, label %.preheader14.i.preheader, label %275, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %296 = icmp sgt i64 %indvars.iv29.i, %228
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %296 = icmp sgt i64 %indvars.iv29.i, %228"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %296, label %304, label %297, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond.i = icmp eq i32 %.0.i, 26
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond.i = icmp eq i32 %.0.i, 26"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond.i, label %.preheader13.i, label %.preheader15.i.preheader, !prof !46
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %346 = icmp slt i64 %indvars.iv21.i, %344
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %346 = icmp slt i64 %indvars.iv21.i, %344"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %346, label %347, label %357, !prof !49
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %337 = icmp sgt i64 %indvars.iv23.i, %234
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %337 = icmp sgt i64 %indvars.iv23.i, %234"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %337, label %.preheader.i.preheader, label %338, !prof !45
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i32 %.110, 76
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i32 %.110, 76"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %399, label %252, !prof !51
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %113 = icmp slt i64 %indvars.iv25.i23, %111
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %113 = icmp slt i64 %indvars.iv25.i23, %111"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %113, label %114, label %124, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %104 = icmp sgt i64 %indvars.iv27.i19, %59
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %104 = icmp sgt i64 %indvars.iv27.i19, %59"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %104, label %.preheader14.i28.preheader, label %105, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond.i16 = icmp eq i32 %.0.i15, 26
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond.i16, label %.preheader13.i18, label %.preheader15.i20.preheader, !prof !46
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond48 = icmp eq i32 %.09, 2
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond48 = icmp eq i32 %.09, 2"
LICM:     Invariant = "  %90 = select i1 %.b34, i64 75000, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %91 = zext i1 %.b28 to i64
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %92 = sub nsw i64 %90, %91
LICM:       Checking dependences
LICM:         Dependent instruction = "  %90 = select i1 %.b34, i64 75000, i64 0
LICM:         Dependent instruction = "  %91 = zext i1 %.b28 to i64
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %90 = select i1 %.b34, i64 75000, i64 0
LICM:         %91 = zext i1 %.b28 to i64
LICM:     Invariant = "  %93 = add nsw i64 %92, 1
LICM:       Checking dependences
LICM:         Dependent instruction = "  %92 = sub nsw i64 %90, %91
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %92 = sub nsw i64 %90, %91
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %92 = sub nsw i64 %90, %91
LICM:           It can be hoisted
LICM:         Invariant   %93 = add nsw i64 %92, 1
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "sparse"
EnablersManager:     Entry instruction =   %102 = icmp sgt i64 %indvars.iv23, %99
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %102 = icmp sgt i64 %indvars.iv23, %99"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %102, label %147, label %103, !prof !33
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "makea"
EnablersManager:     Entry instruction =   %exitcond3 = icmp eq i64 %indvars.iv39, %.01
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond3, label %153, label %121, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "makea"
EnablersManager:     Entry instruction =   %38 = icmp sgt i32 %.03, %0
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %38 = icmp sgt i32 %.03, %0"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %38, label %.preheader.preheader, label %._crit_edge.i1.preheader, !prof !33
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.304065e-02%)
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282549e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255162e-04%)
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330917e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308667e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %53" (3.227549e-04%)
Noelle:     Loop "  %95 = icmp sgt i64 %indvars.iv35.i8, %93" (1.793017e-04%)
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.258075e+00%)
Noelle:     Loop "  %104 = icmp sgt i64 %indvars.iv27.i19, %59" (1.237456e+00%)
Noelle:     Loop "  %113 = icmp slt i64 %indvars.iv25.i23, %111" (1.230732e+00%)
Noelle:     Loop "  %126 = icmp sgt i64 %indvars.iv29.i26, %93" (5.379069e-03%)
Noelle:     Loop "  %137 = icmp sgt i64 %indvars.iv31.i30, %93" (9.861606e-03%)
Noelle:     Loop "  %156 = icmp sgt i64 %indvars.iv33.i33, %93" (5.379063e-03%)
Noelle:     Loop "  %167 = icmp sgt i64 %indvars.iv23.i35, %59" (4.949822e-02%)
Noelle:     Loop "  %176 = icmp slt i64 %indvars.iv21.i38, %174" (4.922926e-02%)
Noelle:     Loop "  %189 = icmp sgt i64 %indvars.iv.i41, %93" (2.330919e-04%)
Noelle:     Loop "  %200 = icmp sgt i64 %indvars.iv44, %65" (1.793017e-04%)
Noelle:     Loop "  %210 = icmp sgt i64 %indvars.iv46, %71" (1.793014e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255162e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.815677e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %222" (2.420659e-02%)
Noelle:     Loop "  %266 = icmp sgt i64 %indvars.iv35.i, %228" (1.344768e-02%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.435565e+01%)
Noelle:     Loop "  %274 = icmp sgt i64 %indvars.iv27.i, %234" (9.280916e+01%)
Noelle:     Loop "  %283 = icmp slt i64 %indvars.iv25.i, %281" (9.230488e+01%)
Noelle:     Loop "  %296 = icmp sgt i64 %indvars.iv29.i, %228" (4.034301e-01%)
Noelle:     Loop "  %307 = icmp sgt i64 %indvars.iv31.i, %228" (7.396203e-01%)
Noelle:     Loop "  %326 = icmp sgt i64 %indvars.iv33.i, %228" (4.034296e-01%)
Noelle:     Loop "  %337 = icmp sgt i64 %indvars.iv23.i, %234" (3.712366e+00%)
Noelle:     Loop "  %346 = icmp slt i64 %indvars.iv21.i, %344" (3.692195e+00%)
Noelle:     Loop "  %359 = icmp sgt i64 %indvars.iv.i, %228" (1.748196e-02%)
Noelle:     Loop "  %370 = icmp sgt i64 %indvars.iv, %240" (2.017150e-02%)
Noelle:     Loop "  %391 = icmp sgt i64 %indvars.iv39, %248" (1.344766e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434413e-04%)
Noelle:     Loop "  %38 = icmp sgt i32 %.03, %0" (1.350072e-01%)
Noelle:     Loop "  %39 = shl nsw i32 %.04.i, 1" (1.496620e-03%)
Noelle:     Loop "  %42 = icmp slt i32 %.01.ph.i, 13" (2.771752e-02%)
Noelle:     Loop "  %45 = fmul double %44, 0x3E80000000000000" (2.044781e-02%)
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv.i3, %43" (2.369648e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850714e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000916e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.528115e-02%)
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919590e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614080e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958073e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793423e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499883e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478362e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853702e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793421e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.614080e-04%)
Noelle:     Loop "  %102 = icmp sgt i64 %indvars.iv23, %99" (1.768176e-01%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv, %107" (9.771764e-02%)
Noelle:     Loop "  %130 = icmp sgt i64 %indvars.iv21, %128" (7.874128e-02%)
Noelle:  Function "randlc"
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.304065e-02%)
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282549e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255162e-04%)
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330917e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308667e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %53" (3.227549e-04%)
Noelle:     Loop "  %95 = icmp sgt i64 %indvars.iv35.i8, %75" (1.793017e-04%)
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.258075e+00%)
Noelle:     Loop "  %104 = icmp sgt i64 %indvars.iv27.i19, %59" (1.237456e+00%)
Noelle:     Loop "  %113 = icmp slt i64 %indvars.iv25.i23, %111" (1.230732e+00%)
Noelle:     Loop "  %126 = icmp sgt i64 %indvars.iv29.i26, %75" (5.379069e-03%)
Noelle:     Loop "  %137 = icmp sgt i64 %indvars.iv31.i30, %75" (9.861606e-03%)
Noelle:     Loop "  %156 = icmp sgt i64 %indvars.iv33.i33, %75" (5.379063e-03%)
Noelle:     Loop "  %167 = icmp sgt i64 %indvars.iv23.i35, %59" (4.949822e-02%)
Noelle:     Loop "  %176 = icmp slt i64 %indvars.iv21.i38, %174" (4.922926e-02%)
Noelle:     Loop "  %189 = icmp sgt i64 %indvars.iv.i41, %75" (2.330919e-04%)
Noelle:     Loop "  %200 = icmp sgt i64 %indvars.iv44, %65" (1.793017e-04%)
Noelle:     Loop "  %210 = icmp sgt i64 %indvars.iv46, %71" (1.793014e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255162e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.815677e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %222" (2.420659e-02%)
Noelle:     Loop "  %266 = icmp sgt i64 %indvars.iv35.i, %228" (1.344768e-02%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.435565e+01%)
Noelle:     Loop "  %274 = icmp sgt i64 %indvars.iv27.i, %234" (9.280916e+01%)
Noelle:     Loop "  %283 = icmp slt i64 %indvars.iv25.i, %281" (9.230488e+01%)
Noelle:     Loop "  %296 = icmp sgt i64 %indvars.iv29.i, %228" (4.034301e-01%)
Noelle:     Loop "  %307 = icmp sgt i64 %indvars.iv31.i, %228" (7.396203e-01%)
Noelle:     Loop "  %326 = icmp sgt i64 %indvars.iv33.i, %228" (4.034296e-01%)
Noelle:     Loop "  %337 = icmp sgt i64 %indvars.iv23.i, %234" (3.712366e+00%)
Noelle:     Loop "  %346 = icmp slt i64 %indvars.iv21.i, %344" (3.692195e+00%)
Noelle:     Loop "  %359 = icmp sgt i64 %indvars.iv.i, %228" (1.748196e-02%)
Noelle:     Loop "  %370 = icmp sgt i64 %indvars.iv, %240" (2.017150e-02%)
Noelle:     Loop "  %391 = icmp sgt i64 %indvars.iv39, %248" (1.344766e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434413e-04%)
Noelle:     Loop "  %38 = icmp sgt i32 %.03, %0" (1.350072e-01%)
Noelle:     Loop "  %39 = shl nsw i32 %.04.i, 1" (1.496620e-03%)
Noelle:     Loop "  %42 = icmp slt i32 %.01.ph.i, 13" (2.771752e-02%)
Noelle:     Loop "  %45 = fmul double %44, 0x3E80000000000000" (2.044781e-02%)
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv.i3, %43" (2.369648e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850714e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000916e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.528115e-02%)
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919590e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614080e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958073e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793423e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499883e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478362e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853702e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793421e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.614080e-04%)
Noelle:     Loop "  %102 = icmp sgt i64 %indvars.iv23, %99" (1.768176e-01%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv, %107" (9.771764e-02%)
Noelle:     Loop "  %130 = icmp sgt i64 %indvars.iv21, %128" (7.874128e-02%)
Noelle:  Function "randlc"
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
NOELLE: FixedPoint:       There are 0 different instructions and -4 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.wswtMGVlli -o /tmp/tmp.wswtMGVlli
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.wswtMGVlli -o /tmp/tmp.wswtMGVlli
NOELLE: FixedPoint:     Invocation 4
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.304065e-02%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282549e-02%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255162e-04%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330917e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308667e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %53" (3.227549e-04%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %95 = icmp sgt i64 %indvars.iv35.i8, %75" (1.793017e-04%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.258075e+00%)
Noelle:     Loop "  %104 = icmp sgt i64 %indvars.iv27.i19, %59" (1.237456e+00%)
Noelle:     Loop "  %113 = icmp slt i64 %indvars.iv25.i23, %111" (1.230732e+00%)
Noelle:     Loop "  %126 = icmp sgt i64 %indvars.iv29.i26, %75" (5.379069e-03%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %137 = icmp sgt i64 %indvars.iv31.i30, %75" (9.861606e-03%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %156 = icmp sgt i64 %indvars.iv33.i33, %75" (5.379063e-03%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %167 = icmp sgt i64 %indvars.iv23.i35, %59" (4.949822e-02%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %176 = icmp slt i64 %indvars.iv21.i38, %174" (4.922926e-02%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %189 = icmp sgt i64 %indvars.iv.i41, %75" (2.330919e-04%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %200 = icmp sgt i64 %indvars.iv44, %65" (1.793017e-04%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %210 = icmp sgt i64 %indvars.iv46, %71" (1.793014e-04%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255162e-04%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.815677e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %222" (2.420659e-02%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %266 = icmp sgt i64 %indvars.iv35.i, %228" (1.344768e-02%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.435565e+01%)
Noelle:     Loop "  %274 = icmp sgt i64 %indvars.iv27.i, %234" (9.280916e+01%)
Noelle:     Loop "  %283 = icmp slt i64 %indvars.iv25.i, %281" (9.230488e+01%)
Noelle:     Loop "  %296 = icmp sgt i64 %indvars.iv29.i, %228" (4.034301e-01%)
Noelle:     Loop "  %307 = icmp sgt i64 %indvars.iv31.i, %228" (7.396203e-01%)
Noelle:     Loop "  %326 = icmp sgt i64 %indvars.iv33.i, %228" (4.034296e-01%)
Noelle:     Loop "  %337 = icmp sgt i64 %indvars.iv23.i, %234" (3.712366e+00%)
Noelle:     Loop "  %346 = icmp slt i64 %indvars.iv21.i, %344" (3.692195e+00%)
Noelle:     Loop "  %359 = icmp sgt i64 %indvars.iv.i, %228" (1.748196e-02%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  %370 = icmp sgt i64 %indvars.iv, %240" (2.017150e-02%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %391 = icmp sgt i64 %indvars.iv39, %248" (1.344766e-02%)
Noelle:  Disable loop "32" as cold code
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434413e-04%)
Noelle:  Disable loop "33" as cold code
Noelle:     Loop "  %38 = icmp sgt i32 %.03, %0" (1.350072e-01%)
Noelle:     Loop "  %39 = shl nsw i32 %.04.i, 1" (1.496620e-03%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %42 = icmp slt i32 %.01.ph.i, 13" (2.771752e-02%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %45 = fmul double %44, 0x3E80000000000000" (2.044781e-02%)
Noelle:  Disable loop "37" as cold code
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv.i3, %43" (2.369648e-03%)
Noelle:  Disable loop "38" as cold code
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850714e-03%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000916e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.528115e-02%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919590e-04%)
Noelle:  Disable loop "42" as cold code
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614080e-04%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958073e-02%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793423e-04%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499883e-02%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478362e-02%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853702e-02%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793421e-04%)
Noelle:  Disable loop "49" as cold code
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.614080e-04%)
Noelle:  Disable loop "50" as cold code
Noelle:     Loop "  %102 = icmp sgt i64 %indvars.iv23, %99" (1.768176e-01%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv, %107" (9.771764e-02%)
Noelle:  Disable loop "52" as cold code
Noelle:     Loop "  %130 = icmp sgt i64 %indvars.iv21, %128" (7.874128e-02%)
Noelle:  Disable loop "53" as cold code
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "icnvrt"
Noelle:  Disable "icnvrt" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
EnablersManager:   Try to improve all 16 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %283 = icmp slt i64 %indvars.iv25.i, %281
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %283 = icmp slt i64 %indvars.iv25.i, %281"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %283, label %284, label %294, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %274 = icmp sgt i64 %indvars.iv27.i, %234
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %274 = icmp sgt i64 %indvars.iv27.i, %234"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %274, label %.preheader14.i.preheader, label %275, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %296 = icmp sgt i64 %indvars.iv29.i, %228
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %296 = icmp sgt i64 %indvars.iv29.i, %228"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %296, label %304, label %297, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %326 = icmp sgt i64 %indvars.iv33.i, %228
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %326 = icmp sgt i64 %indvars.iv33.i, %228"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %326, label %334, label %327, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %307 = icmp sgt i64 %indvars.iv31.i, %228
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %307 = icmp sgt i64 %indvars.iv31.i, %228"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %307, label %323, label %308, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond.i = icmp eq i32 %.0.i, 26
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond.i = icmp eq i32 %.0.i, 26"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond.i, label %.preheader13.i, label %.preheader15.i.preheader, !prof !46
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %346 = icmp slt i64 %indvars.iv21.i, %344
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %346 = icmp slt i64 %indvars.iv21.i, %344"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %346, label %347, label %357, !prof !49
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %337 = icmp sgt i64 %indvars.iv23.i, %234
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %337 = icmp sgt i64 %indvars.iv23.i, %234"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %337, label %.preheader.i.preheader, label %338, !prof !45
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i32 %.110, 76
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i32 %.110, 76"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %399, label %252, !prof !51
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %113 = icmp slt i64 %indvars.iv25.i23, %111
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %113 = icmp slt i64 %indvars.iv25.i23, %111"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %113, label %114, label %124, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %104 = icmp sgt i64 %indvars.iv27.i19, %59
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %104 = icmp sgt i64 %indvars.iv27.i19, %59"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %104, label %.preheader14.i28.preheader, label %105, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond.i16 = icmp eq i32 %.0.i15, 26
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond.i16, label %.preheader13.i18, label %.preheader15.i20.preheader, !prof !46
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond48 = icmp eq i32 %.09, 2
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond48 = icmp eq i32 %.09, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond48, label %.preheader.preheader, label %81, !prof !43
Mem2Reg:   The loop has 1SCCs that each one access the same memory location
Mem2Reg:     Loop invariant memory location: @conj_grad.callcount = internal unnamed_addr global i32 0, align 4
Mem2Reg:     SCC:
Internal nodes: 3
	  %conj_grad.callcount.promoted.i13 = load i32, i32* @conj_grad.callcount, align 4, !tbaa !38
	  %103 = add i32 %conj_grad.callcount.promoted.i13, 25
	  store i32 %103, i32* @conj_grad.callcount, align 4, !tbaa !38
External nodes: 1
	  br i1 %exitcond48, label %.preheader.preheader, label %81, !prof !43
Edges: 8

Mem2Reg:  Collecting and ordering memory loads/stores by basic block
Mem2Reg: Iterating basic blocks to determine last stored values
Mem2Reg: placeholder PHI required: label %.preheader18
Mem2Reg:  checking for last value entering block: label %.preheader18
Mem2Reg:  Last value entering block: label %.preheader18	  %82 = phi i32 
Mem2Reg:  checking for last value entering block: label %83
Mem2Reg:  Last value entering block: label %83	  %82 = phi i32 
Mem2Reg: placeholder PHI required: label %84
Mem2Reg:  checking for last value entering block: label %84
Mem2Reg:  Last value entering block: label %84	  %85 = phi i32 
Mem2Reg:  checking for last value entering block: label %96
Mem2Reg:  Last value entering block: label %96	  %85 = phi i32 
Mem2Reg:  checking for last value entering block: label %86
Mem2Reg:  Last value entering block: label %86	  %85 = phi i32 
Mem2Reg: placeholder PHI required: label %97
Mem2Reg:  checking for last value entering block: label %97
Mem2Reg:  Last value entering block: label %97	  %98 = phi i32 
Mem2Reg:  checking for last value entering block: label %105
Mem2Reg:  Last value entering block: label %105	  %98 = phi i32 
Mem2Reg:  checking for last value entering block: label %100
Mem2Reg:  Last value entering block: label %100	  %98 = phi i32 
Mem2Reg: placeholder PHI required: label %106
Mem2Reg:  checking for last value entering block: label %106
Mem2Reg:  Last value entering block: label %106	  %107 = phi i32 
Mem2Reg:  checking for last value entering block: label %.preheader13.i18
Mem2Reg:  Last value entering block: label %.preheader13.i18	  %107 = phi i32 
Mem2Reg:  Value updated:   %108 = add i32 %98, 25
Mem2Reg:  checking for last value entering block: label %.preheader15.i20.preheader
Mem2Reg:  Last value entering block: label %.preheader15.i20.preheader	  %107 = phi i32 
Mem2Reg: placeholder PHI required: label %171
Mem2Reg:  checking for last value entering block: label %171
Mem2Reg:  Last value entering block: label %171	  %172 = phi i32 
Mem2Reg: placeholder PHI required: label %.preheader15.i20
Mem2Reg:  checking for last value entering block: label %.preheader15.i20
Mem2Reg:  Last value entering block: label %.preheader15.i20	  %109 = phi i32 
Mem2Reg:  checking for last value entering block: label %.preheader.i43.preheader
Mem2Reg:  Last value entering block: label %.preheader.i43.preheader	  %173 = phi i32 
Mem2Reg:  checking for last value entering block: label %175
Mem2Reg:  Last value entering block: label %175	  %173 = phi i32 
Mem2Reg:  checking for last value entering block: label %.preheader14.i28.preheader
Mem2Reg:  Last value entering block: label %.preheader14.i28.preheader	  %109 = phi i32 
Mem2Reg:  checking for last value entering block: label %111
Mem2Reg:  Last value entering block: label %111	  %109 = phi i32 
Mem2Reg: placeholder PHI required: label %.preheader.i43
Mem2Reg:  checking for last value entering block: label %.preheader.i43
Mem2Reg:  Last value entering block: label %.preheader.i43	  %196 = phi i32 
Mem2Reg: placeholder PHI required: label %182
Mem2Reg:  checking for last value entering block: label %182
Mem2Reg:  Last value entering block: label %182	  %183 = phi i32 
Mem2Reg: placeholder PHI required: label %.preheader14.i28
Mem2Reg:  checking for last value entering block: label %.preheader14.i28
Mem2Reg:  Last value entering block: label %.preheader14.i28	  %132 = phi i32 
Mem2Reg: placeholder PHI required: label %118
Mem2Reg:  checking for last value entering block: label %118
Mem2Reg:  Last value entering block: label %118	  %119 = phi i32 
Mem2Reg:  checking for last value entering block: label %conj_grad.exit45
Mem2Reg:  Last value entering block: label %conj_grad.exit45	  %199 = phi i32 
Mem2Reg:  checking for last value entering block: label %201
Mem2Reg:  Last value entering block: label %201	  %199 = phi i32 
Mem2Reg:  checking for last value entering block: label %187
Mem2Reg:  Last value entering block: label %187	  %185 = phi i32 
Mem2Reg:  checking for last value entering block: label %197
Mem2Reg:  Last value entering block: label %197	  %185 = phi i32 
Mem2Reg:  checking for last value entering block: label %142
Mem2Reg:  Last value entering block: label %142	  %133 = phi i32 
Mem2Reg:  checking for last value entering block: label %135
Mem2Reg:  Last value entering block: label %135	  %133 = phi i32 
Mem2Reg:  checking for last value entering block: label %121
Mem2Reg:  Last value entering block: label %121	  %119 = phi i32 
Mem2Reg:  checking for last value entering block: label %131
Mem2Reg:  Last value entering block: label %131	  %119 = phi i32 
Mem2Reg: placeholder PHI required: label %210
Mem2Reg:  checking for last value entering block: label %210
Mem2Reg:  Last value entering block: label %210	  %211 = phi i32 
Mem2Reg: placeholder PHI required: label %144
Mem2Reg:  checking for last value entering block: label %144
Mem2Reg:  Last value entering block: label %144	  %145 = phi i32 
Mem2Reg:  checking for last value entering block: label %219
Mem2Reg:  Last value entering block: label %219	  %212 = phi i32 
Mem2Reg:  checking for last value entering block: label %214
Mem2Reg:  Last value entering block: label %214	  %212 = phi i32 
Mem2Reg:  checking for last value entering block: label %162
Mem2Reg:  Last value entering block: label %162	  %145 = phi i32 
Mem2Reg:  checking for last value entering block: label %147
Mem2Reg:  Last value entering block: label %147	  %145 = phi i32 
Mem2Reg: placeholder PHI required: label %222
Mem2Reg:  checking for last value entering block: label %222
Mem2Reg:  Last value entering block: label %222	  %223 = phi i32 
Mem2Reg: placeholder PHI required: label %164
Mem2Reg:  checking for last value entering block: label %164
Mem2Reg:  Last value entering block: label %164	  %165 = phi i32 
Mem2Reg:  checking for last value entering block: label %231
Mem2Reg:  Last value entering block: label %231	  %224 = phi i32 
Mem2Reg:  checking for last value entering block: label %226
Mem2Reg:  Last value entering block: label %226	  %224 = phi i32 
Mem2Reg:  checking for last value entering block: label %174
Mem2Reg:  Last value entering block: label %174	  %165 = phi i32 
Mem2Reg:  checking for last value entering block: label %167
Mem2Reg:  Last value entering block: label %167	  %165 = phi i32 
Mem2Reg:  Removing
  %conj_grad.callcount.promoted.i13 = load i32, i32* @conj_grad.callcount, align 4, !tbaa !38
Mem2Reg:  Removing
  store i32 %110, i32* @conj_grad.callcount, align 4, !tbaa !38
Mem2Reg:       The memory location has been promoted
Mem2Reg: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "sparse"
EnablersManager:     Entry instruction =   %102 = icmp sgt i64 %indvars.iv23, %99
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %102 = icmp sgt i64 %indvars.iv23, %99"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %102, label %147, label %103, !prof !33
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "makea"
EnablersManager:     Entry instruction =   %exitcond3 = icmp eq i64 %indvars.iv39, %.01
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond3, label %153, label %121, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "makea"
EnablersManager:     Entry instruction =   %38 = icmp sgt i32 %.03, %0
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %38 = icmp sgt i32 %.03, %0"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %38, label %.preheader.preheader, label %._crit_edge.i1.preheader, !prof !33
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.304065e-02%)
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282549e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255162e-04%)
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330917e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308667e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %53" (3.227549e-04%)
Noelle:     Loop "  %95 = icmp sgt i64 %indvars.iv35.i8, %75" (1.793017e-04%)
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.258075e+00%)
Noelle:     Loop "  %104 = icmp sgt i64 %indvars.iv27.i19, %59" (1.237456e+00%)
Noelle:     Loop "  %113 = icmp slt i64 %indvars.iv25.i23, %111" (1.230732e+00%)
Noelle:     Loop "  %126 = icmp sgt i64 %indvars.iv29.i26, %75" (5.379069e-03%)
Noelle:     Loop "  %137 = icmp sgt i64 %indvars.iv31.i30, %75" (9.861606e-03%)
Noelle:     Loop "  %156 = icmp sgt i64 %indvars.iv33.i33, %75" (5.379063e-03%)
Noelle:     Loop "  %167 = icmp sgt i64 %indvars.iv23.i35, %59" (4.949822e-02%)
Noelle:     Loop "  %176 = icmp slt i64 %indvars.iv21.i38, %174" (4.922926e-02%)
Noelle:     Loop "  %189 = icmp sgt i64 %indvars.iv.i41, %75" (2.330919e-04%)
Noelle:     Loop "  %200 = icmp sgt i64 %indvars.iv44, %65" (1.793017e-04%)
Noelle:     Loop "  %210 = icmp sgt i64 %indvars.iv46, %71" (1.793014e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255162e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.815677e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %222" (2.420659e-02%)
Noelle:     Loop "  %266 = icmp sgt i64 %indvars.iv35.i, %228" (1.344768e-02%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.435565e+01%)
Noelle:     Loop "  %274 = icmp sgt i64 %indvars.iv27.i, %234" (9.280916e+01%)
Noelle:     Loop "  %283 = icmp slt i64 %indvars.iv25.i, %281" (9.230488e+01%)
Noelle:     Loop "  %296 = icmp sgt i64 %indvars.iv29.i, %228" (4.034301e-01%)
Noelle:     Loop "  %307 = icmp sgt i64 %indvars.iv31.i, %228" (7.396203e-01%)
Noelle:     Loop "  %326 = icmp sgt i64 %indvars.iv33.i, %228" (4.034296e-01%)
Noelle:     Loop "  %337 = icmp sgt i64 %indvars.iv23.i, %234" (3.712366e+00%)
Noelle:     Loop "  %346 = icmp slt i64 %indvars.iv21.i, %344" (3.692195e+00%)
Noelle:     Loop "  %359 = icmp sgt i64 %indvars.iv.i, %228" (1.748196e-02%)
Noelle:     Loop "  %370 = icmp sgt i64 %indvars.iv, %240" (2.017150e-02%)
Noelle:     Loop "  %391 = icmp sgt i64 %indvars.iv39, %248" (1.344766e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434413e-04%)
Noelle:     Loop "  %38 = icmp sgt i32 %.03, %0" (1.350072e-01%)
Noelle:     Loop "  %39 = shl nsw i32 %.04.i, 1" (1.496620e-03%)
Noelle:     Loop "  %42 = icmp slt i32 %.01.ph.i, 13" (2.771752e-02%)
Noelle:     Loop "  %45 = fmul double %44, 0x3E80000000000000" (2.044781e-02%)
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv.i3, %43" (2.369648e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850714e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000916e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.528115e-02%)
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919590e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614080e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958073e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793423e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499883e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478362e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853702e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793421e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.614080e-04%)
Noelle:     Loop "  %102 = icmp sgt i64 %indvars.iv23, %99" (1.768176e-01%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv, %107" (9.771764e-02%)
Noelle:     Loop "  %130 = icmp sgt i64 %indvars.iv21, %128" (7.874128e-02%)
Noelle:  Function "randlc"
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.298319e-02%)
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.276840e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.252980e-04%)
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.326863e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.480302e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %53" (3.579931e-04%)
Noelle:     Loop "  %100 = icmp sgt i64 %indvars.iv35.i8, %75" (2.147879e-04%)
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.423041e+00%)
Noelle:     Loop "  %112 = icmp sgt i64 %indvars.iv27.i19, %59" (1.399772e+00%)
Noelle:     Loop "  %122 = icmp slt i64 %indvars.iv25.i23, %119" (1.392612e+00%)
Noelle:     Loop "  %137 = icmp sgt i64 %indvars.iv29.i26, %75" (6.264668e-03%)
Noelle:     Loop "  %150 = icmp sgt i64 %indvars.iv31.i30, %75" (1.073941e-02%)
Noelle:     Loop "  %171 = icmp sgt i64 %indvars.iv33.i33, %75" (6.264662e-03%)
Noelle:     Loop "  %184 = icmp sgt i64 %indvars.iv23.i35, %59" (5.599087e-02%)
Noelle:     Loop "  %194 = icmp slt i64 %indvars.iv21.i38, %191" (5.570449e-02%)
Noelle:     Loop "  %209 = icmp sgt i64 %indvars.iv.i41, %75" (2.684846e-04%)
Noelle:     Loop "  %222 = icmp sgt i64 %indvars.iv44, %65" (2.147879e-04%)
Noelle:     Loop "  %234 = icmp sgt i64 %indvars.iv46, %71" (2.147876e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.252980e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.798607e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %247" (2.416450e-02%)
Noelle:     Loop "  %291 = icmp sgt i64 %indvars.iv35.i, %253" (1.342429e-02%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.419156e+01%)
Noelle:     Loop "  %299 = icmp sgt i64 %indvars.iv27.i, %259" (9.264776e+01%)
Noelle:     Loop "  %308 = icmp slt i64 %indvars.iv25.i, %306" (9.214435e+01%)
Noelle:     Loop "  %321 = icmp sgt i64 %indvars.iv29.i, %253" (4.027284e-01%)
Noelle:     Loop "  %332 = icmp sgt i64 %indvars.iv31.i, %253" (7.383340e-01%)
Noelle:     Loop "  %351 = icmp sgt i64 %indvars.iv33.i, %253" (4.027280e-01%)
Noelle:     Loop "  %362 = icmp sgt i64 %indvars.iv23.i, %259" (3.705910e+00%)
Noelle:     Loop "  %371 = icmp slt i64 %indvars.iv21.i, %369" (3.685774e+00%)
Noelle:     Loop "  %384 = icmp sgt i64 %indvars.iv.i, %253" (1.745156e-02%)
Noelle:     Loop "  %395 = icmp sgt i64 %indvars.iv, %265" (2.013642e-02%)
Noelle:     Loop "  %416 = icmp sgt i64 %indvars.iv39, %273" (1.342428e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.431918e-04%)
Noelle:     Loop "  %38 = icmp sgt i32 %.03, %0" (1.347724e-01%)
Noelle:     Loop "  %39 = shl nsw i32 %.04.i, 1" (1.494017e-03%)
Noelle:     Loop "  %42 = icmp slt i32 %.01.ph.i, 13" (2.766932e-02%)
Noelle:     Loop "  %45 = fmul double %44, 0x3E80000000000000" (2.041225e-02%)
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv.i3, %43" (2.365527e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.845757e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (9.991754e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.511544e-02%)
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.912774e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.611272e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.949450e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.790304e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.495535e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.474052e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.838304e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.790302e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.611272e-04%)
Noelle:     Loop "  %102 = icmp sgt i64 %indvars.iv23, %99" (1.765101e-01%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv, %107" (9.754770e-02%)
Noelle:     Loop "  %130 = icmp sgt i64 %indvars.iv21, %128" (7.860434e-02%)
Noelle:  Function "randlc"
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
NOELLE: FixedPoint:       There are 0 different instructions and -2 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.wswtMGVlli -o /tmp/tmp.wswtMGVlli
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.wswtMGVlli -o /tmp/tmp.wswtMGVlli
NOELLE: FixedPoint:     Invocation 5
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.oUDypcauUs -o /tmp/tmp.wswtMGVlli
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.304065e-02%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282549e-02%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255162e-04%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330917e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308667e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %53" (3.227549e-04%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %97 = icmp sgt i64 %indvars.iv35.i8, %75" (1.793017e-04%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.258075e+00%)
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv27.i19, %59" (1.237456e+00%)
Noelle:     Loop "  %114 = icmp slt i64 %indvars.iv25.i23, %112" (1.230732e+00%)
Noelle:     Loop "  %127 = icmp sgt i64 %indvars.iv29.i26, %75" (5.379069e-03%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %138 = icmp sgt i64 %indvars.iv31.i30, %75" (9.861606e-03%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %157 = icmp sgt i64 %indvars.iv33.i33, %75" (5.379063e-03%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %168 = icmp sgt i64 %indvars.iv23.i35, %59" (4.949822e-02%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %177 = icmp slt i64 %indvars.iv21.i38, %175" (4.922926e-02%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %190 = icmp sgt i64 %indvars.iv.i41, %75" (2.330919e-04%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %201 = icmp sgt i64 %indvars.iv44, %65" (1.793017e-04%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %211 = icmp sgt i64 %indvars.iv46, %71" (1.793014e-04%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255162e-04%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.815677e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %223" (2.420659e-02%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %267 = icmp sgt i64 %indvars.iv35.i, %229" (1.344768e-02%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.435565e+01%)
Noelle:     Loop "  %275 = icmp sgt i64 %indvars.iv27.i, %235" (9.280916e+01%)
Noelle:     Loop "  %284 = icmp slt i64 %indvars.iv25.i, %282" (9.230488e+01%)
Noelle:     Loop "  %297 = icmp sgt i64 %indvars.iv29.i, %229" (4.034301e-01%)
Noelle:     Loop "  %308 = icmp sgt i64 %indvars.iv31.i, %229" (7.396203e-01%)
Noelle:     Loop "  %327 = icmp sgt i64 %indvars.iv33.i, %229" (4.034296e-01%)
Noelle:     Loop "  %338 = icmp sgt i64 %indvars.iv23.i, %235" (3.712366e+00%)
Noelle:     Loop "  %347 = icmp slt i64 %indvars.iv21.i, %345" (3.692195e+00%)
Noelle:     Loop "  %360 = icmp sgt i64 %indvars.iv.i, %229" (1.748196e-02%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  %371 = icmp sgt i64 %indvars.iv, %241" (2.017150e-02%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %392 = icmp sgt i64 %indvars.iv39, %249" (1.344766e-02%)
Noelle:  Disable loop "32" as cold code
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434413e-04%)
Noelle:  Disable loop "33" as cold code
Noelle:     Loop "  %38 = icmp sgt i32 %.03, %0" (1.350072e-01%)
Noelle:     Loop "  %39 = shl nsw i32 %.04.i, 1" (1.496620e-03%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %42 = icmp slt i32 %.01.ph.i, 13" (2.771752e-02%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %45 = fmul double %44, 0x3E80000000000000" (2.044781e-02%)
Noelle:  Disable loop "37" as cold code
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv.i3, %43" (2.369648e-03%)
Noelle:  Disable loop "38" as cold code
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850714e-03%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000916e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.528115e-02%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919590e-04%)
Noelle:  Disable loop "42" as cold code
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614080e-04%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958073e-02%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793423e-04%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499883e-02%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478362e-02%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853702e-02%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793421e-04%)
Noelle:  Disable loop "49" as cold code
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.614080e-04%)
Noelle:  Disable loop "50" as cold code
Noelle:     Loop "  %102 = icmp sgt i64 %indvars.iv23, %99" (1.768176e-01%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv, %107" (9.771764e-02%)
Noelle:  Disable loop "52" as cold code
Noelle:     Loop "  %130 = icmp sgt i64 %indvars.iv21, %128" (7.874128e-02%)
Noelle:  Disable loop "53" as cold code
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "icnvrt"
Noelle:  Disable "icnvrt" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
EnablersManager:   Try to improve all 16 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %308 = icmp sgt i64 %indvars.iv31.i, %229
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %308 = icmp sgt i64 %indvars.iv31.i, %229"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %308, label %324, label %309, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %297 = icmp sgt i64 %indvars.iv29.i, %229
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %297 = icmp sgt i64 %indvars.iv29.i, %229"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %297, label %305, label %298, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %327 = icmp sgt i64 %indvars.iv33.i, %229
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %327 = icmp sgt i64 %indvars.iv33.i, %229"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %327, label %335, label %328, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %284 = icmp slt i64 %indvars.iv25.i, %282
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %284 = icmp slt i64 %indvars.iv25.i, %282"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %284, label %285, label %295, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %275 = icmp sgt i64 %indvars.iv27.i, %235
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %275 = icmp sgt i64 %indvars.iv27.i, %235"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %275, label %.preheader14.i.preheader, label %276, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond.i = icmp eq i32 %.0.i, 26
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond.i = icmp eq i32 %.0.i, 26"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond.i, label %.preheader13.i, label %.preheader15.i.preheader, !prof !46
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %347 = icmp slt i64 %indvars.iv21.i, %345
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %347 = icmp slt i64 %indvars.iv21.i, %345"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %347, label %348, label %358, !prof !49
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %338 = icmp sgt i64 %indvars.iv23.i, %235
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %338 = icmp sgt i64 %indvars.iv23.i, %235"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %338, label %.preheader.i.preheader, label %339, !prof !45
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i32 %.110, 76
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i32 %.110, 76"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %400, label %253, !prof !51
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %114 = icmp slt i64 %indvars.iv25.i23, %112
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %114 = icmp slt i64 %indvars.iv25.i23, %112"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %114, label %115, label %125, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %105 = icmp sgt i64 %indvars.iv27.i19, %59
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %105 = icmp sgt i64 %indvars.iv27.i19, %59"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %105, label %.preheader14.i28.preheader, label %106, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond.i16 = icmp eq i32 %.0.i15, 26
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond.i16, label %.preheader13.i18, label %.preheader15.i20.preheader, !prof !46
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "main"
EnablersManager:     Entry instruction =   %exitcond48 = icmp eq i32 %.09, 2
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond48 = icmp eq i32 %.09, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond48, label %.preheader.preheader, label %83, !prof !43
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "sparse"
EnablersManager:     Entry instruction =   %102 = icmp sgt i64 %indvars.iv23, %99
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %102 = icmp sgt i64 %indvars.iv23, %99"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %102, label %147, label %103, !prof !33
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "makea"
EnablersManager:     Entry instruction =   %exitcond3 = icmp eq i64 %indvars.iv39, %.01
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond3, label %153, label %121, !prof !47
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "makea"
EnablersManager:     Entry instruction =   %38 = icmp sgt i32 %.03, %0
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %38 = icmp sgt i32 %.03, %0"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %38, label %.preheader.preheader, label %._crit_edge.i1.preheader, !prof !33
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.304065e-02%)
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282549e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255162e-04%)
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330917e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308667e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %53" (3.227549e-04%)
Noelle:     Loop "  %97 = icmp sgt i64 %indvars.iv35.i8, %75" (1.793017e-04%)
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.258075e+00%)
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv27.i19, %59" (1.237456e+00%)
Noelle:     Loop "  %114 = icmp slt i64 %indvars.iv25.i23, %112" (1.230732e+00%)
Noelle:     Loop "  %127 = icmp sgt i64 %indvars.iv29.i26, %75" (5.379069e-03%)
Noelle:     Loop "  %138 = icmp sgt i64 %indvars.iv31.i30, %75" (9.861606e-03%)
Noelle:     Loop "  %157 = icmp sgt i64 %indvars.iv33.i33, %75" (5.379063e-03%)
Noelle:     Loop "  %168 = icmp sgt i64 %indvars.iv23.i35, %59" (4.949822e-02%)
Noelle:     Loop "  %177 = icmp slt i64 %indvars.iv21.i38, %175" (4.922926e-02%)
Noelle:     Loop "  %190 = icmp sgt i64 %indvars.iv.i41, %75" (2.330919e-04%)
Noelle:     Loop "  %201 = icmp sgt i64 %indvars.iv44, %65" (1.793017e-04%)
Noelle:     Loop "  %211 = icmp sgt i64 %indvars.iv46, %71" (1.793014e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255162e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.815677e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %223" (2.420659e-02%)
Noelle:     Loop "  %267 = icmp sgt i64 %indvars.iv35.i, %229" (1.344768e-02%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.435565e+01%)
Noelle:     Loop "  %275 = icmp sgt i64 %indvars.iv27.i, %235" (9.280916e+01%)
Noelle:     Loop "  %284 = icmp slt i64 %indvars.iv25.i, %282" (9.230488e+01%)
Noelle:     Loop "  %297 = icmp sgt i64 %indvars.iv29.i, %229" (4.034301e-01%)
Noelle:     Loop "  %308 = icmp sgt i64 %indvars.iv31.i, %229" (7.396203e-01%)
Noelle:     Loop "  %327 = icmp sgt i64 %indvars.iv33.i, %229" (4.034296e-01%)
Noelle:     Loop "  %338 = icmp sgt i64 %indvars.iv23.i, %235" (3.712366e+00%)
Noelle:     Loop "  %347 = icmp slt i64 %indvars.iv21.i, %345" (3.692195e+00%)
Noelle:     Loop "  %360 = icmp sgt i64 %indvars.iv.i, %229" (1.748196e-02%)
Noelle:     Loop "  %371 = icmp sgt i64 %indvars.iv, %241" (2.017150e-02%)
Noelle:     Loop "  %392 = icmp sgt i64 %indvars.iv39, %249" (1.344766e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434413e-04%)
Noelle:     Loop "  %38 = icmp sgt i32 %.03, %0" (1.350072e-01%)
Noelle:     Loop "  %39 = shl nsw i32 %.04.i, 1" (1.496620e-03%)
Noelle:     Loop "  %42 = icmp slt i32 %.01.ph.i, 13" (2.771752e-02%)
Noelle:     Loop "  %45 = fmul double %44, 0x3E80000000000000" (2.044781e-02%)
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv.i3, %43" (2.369648e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850714e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000916e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.528115e-02%)
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919590e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614080e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958073e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793423e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499883e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478362e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853702e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793421e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.614080e-04%)
Noelle:     Loop "  %102 = icmp sgt i64 %indvars.iv23, %99" (1.768176e-01%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv, %107" (9.771764e-02%)
Noelle:     Loop "  %130 = icmp sgt i64 %indvars.iv21, %128" (7.874128e-02%)
Noelle:  Function "randlc"
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26" (3.304065e-02%)
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35" (3.282549e-02%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002" (1.255162e-04%)
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49" (2.330917e-04%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2" (1.308667e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %53" (3.227549e-04%)
Noelle:     Loop "  %97 = icmp sgt i64 %indvars.iv35.i8, %75" (1.793017e-04%)
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26" (1.258075e+00%)
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv27.i19, %59" (1.237456e+00%)
Noelle:     Loop "  %114 = icmp slt i64 %indvars.iv25.i23, %112" (1.230732e+00%)
Noelle:     Loop "  %127 = icmp sgt i64 %indvars.iv29.i26, %75" (5.379069e-03%)
Noelle:     Loop "  %138 = icmp sgt i64 %indvars.iv31.i30, %75" (9.861606e-03%)
Noelle:     Loop "  %157 = icmp sgt i64 %indvars.iv33.i33, %75" (5.379063e-03%)
Noelle:     Loop "  %168 = icmp sgt i64 %indvars.iv23.i35, %59" (4.949822e-02%)
Noelle:     Loop "  %177 = icmp slt i64 %indvars.iv21.i38, %175" (4.922926e-02%)
Noelle:     Loop "  %190 = icmp sgt i64 %indvars.iv.i41, %75" (2.330919e-04%)
Noelle:     Loop "  %201 = icmp sgt i64 %indvars.iv44, %65" (1.793017e-04%)
Noelle:     Loop "  %211 = icmp sgt i64 %indvars.iv46, %71" (1.793014e-04%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002" (1.255162e-04%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76" (9.815677e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %223" (2.420659e-02%)
Noelle:     Loop "  %267 = icmp sgt i64 %indvars.iv35.i, %229" (1.344768e-02%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26" (9.435565e+01%)
Noelle:     Loop "  %275 = icmp sgt i64 %indvars.iv27.i, %235" (9.280916e+01%)
Noelle:     Loop "  %284 = icmp slt i64 %indvars.iv25.i, %282" (9.230488e+01%)
Noelle:     Loop "  %297 = icmp sgt i64 %indvars.iv29.i, %229" (4.034301e-01%)
Noelle:     Loop "  %308 = icmp sgt i64 %indvars.iv31.i, %229" (7.396203e-01%)
Noelle:     Loop "  %327 = icmp sgt i64 %indvars.iv33.i, %229" (4.034296e-01%)
Noelle:     Loop "  %338 = icmp sgt i64 %indvars.iv23.i, %235" (3.712366e+00%)
Noelle:     Loop "  %347 = icmp slt i64 %indvars.iv21.i, %345" (3.692195e+00%)
Noelle:     Loop "  %360 = icmp sgt i64 %indvars.iv.i, %229" (1.748196e-02%)
Noelle:     Loop "  %371 = icmp sgt i64 %indvars.iv, %241" (2.017150e-02%)
Noelle:     Loop "  %392 = icmp sgt i64 %indvars.iv39, %249" (1.344766e-02%)
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21" (1.434413e-04%)
Noelle:     Loop "  %38 = icmp sgt i32 %.03, %0" (1.350072e-01%)
Noelle:     Loop "  %39 = shl nsw i32 %.04.i, 1" (1.496620e-03%)
Noelle:     Loop "  %42 = icmp slt i32 %.01.ph.i, 13" (2.771752e-02%)
Noelle:     Loop "  %45 = fmul double %44, 0x3E80000000000000" (2.044781e-02%)
Noelle:     Loop "  %105 = icmp sgt i64 %indvars.iv.i3, %43" (2.369648e-03%)
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14" (2.850714e-03%)
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01" (1.000916e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01" (9.528115e-02%)
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7" (3.919590e-04%)
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14" (1.614080e-04%)
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24" (4.958073e-02%)
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40" (1.793423e-04%)
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44" (2.499883e-02%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56" (2.478362e-02%)
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24" (8.853702e-02%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0" (1.793421e-04%)
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14" (1.614080e-04%)
Noelle:     Loop "  %102 = icmp sgt i64 %indvars.iv23, %99" (1.768176e-01%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv, %107" (9.771764e-02%)
Noelle:     Loop "  %130 = icmp sgt i64 %indvars.iv21, %128" (7.874128e-02%)
Noelle:  Function "randlc"
Noelle:  Function "icnvrt"
Noelle:  Function "elapsed_time"
Noelle:  Function "c_print_results"
Noelle:  Function "wtime_"
Noelle:  Function "timer_stop"
Noelle:  Function "timer_start"
Noelle:  Function "timer_clear"
Noelle:  Function "timer_read"
Noelle:  Function "vranlc"
Noelle:     Loop "  %13 = icmp sgt i64 %indvars.iv, %11" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: Enablers: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true baseline_pre.bc -o baseline_pre.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata baseline_pre.bc -o baseline_pre.bc
Running: ./baseline_pre_prof in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/cg.B


 NAS Parallel Benchmarks 3.0 structured OpenMP C version - CG Benchmark
 Size:      75000
 Iterations:    75
   iteration           ||r||                 zeta
        1       3.03548598614517e-13 5.9999475157875e+01
        2       1.11864354882675e-15 2.1762784614254e+01
        3       1.13122585119279e-15 2.2287661704322e+01
        4       1.12221605852839e-15 2.2523073818835e+01
        5       1.12442341772191e-15 2.2627539065389e+01
        6       1.13304348193841e-15 2.2674025918953e+01
        7       1.13342596230503e-15 2.2694905682625e+01
        8       1.13748393136469e-15 2.2704402316687e+01
        9       1.14248774430387e-15 2.2708783434562e+01
       10       1.13294751905663e-15 2.2710835139718e+01
       11       1.13373640934822e-15 2.2711810712134e+01
       12       1.13799283088636e-15 2.2712281624097e+01
       13       1.13694536817940e-15 2.2712512266324e+01
       14       1.14303903370149e-15 2.2712626800759e+01
       15       1.14003188863999e-15 2.2712684416182e+01
       16       1.13520913311971e-15 2.2712713746175e+01
       17       1.13509234391242e-15 2.2712728840200e+01
       18       1.14753788645647e-15 2.2712736684830e+01
       19       1.13667779290275e-15 2.2712740798122e+01
       20       1.12742433125044e-15 2.2712742972136e+01
       21       1.13539307928559e-15 2.2712744129403e+01
       22       1.12996858002779e-15 2.2712744749390e+01
       23       1.12964050411701e-15 2.2712745083453e+01
       24       1.13819755978870e-15 2.2712745264388e+01
       25       1.13281273016627e-15 2.2712745362845e+01
       26       1.13673326589385e-15 2.2712745416652e+01
       27       1.12833721786049e-15 2.2712745446170e+01
       28       1.13847341588629e-15 2.2712745462421e+01
       29       1.13940119897194e-15 2.2712745471397e+01
       30       1.13542940676399e-15 2.2712745476370e+01
       31       1.14129880291034e-15 2.2712745479134e+01
       32       1.13580884077166e-15 2.2712745480674e+01
       33       1.12632661525154e-15 2.2712745481532e+01
       34       1.12751830802856e-15 2.2712745482013e+01
       35       1.13283069514087e-15 2.2712745482284e+01
       36       1.13578803148906e-15 2.2712745482435e+01
       37       1.13326877904882e-15 2.2712745482520e+01
       38       1.13241088181371e-15 2.2712745482568e+01
       39       1.13650655237769e-15 2.2712745482597e+01
       40       1.13611853613215e-15 2.2712745482612e+01
       41       1.12765198207156e-15 2.2712745482620e+01
       42       1.13171834248783e-15 2.2712745482625e+01
       43       1.12360074817697e-15 2.2712745482628e+01
       44       1.13040655646838e-15 2.2712745482630e+01
       45       1.12877913564305e-15 2.2712745482631e+01
       46       1.12970280001327e-15 2.2712745482631e+01
       47       1.12812368696656e-15 2.2712745482631e+01
       48       1.12772540755482e-15 2.2712745482632e+01
       49       1.13203272898469e-15 2.2712745482631e+01
       50       1.12876552855629e-15 2.2712745482632e+01
       51       1.12305034223996e-15 2.2712745482632e+01
       52       1.12920890949443e-15 2.2712745482631e+01
       53       1.13667283964080e-15 2.2712745482631e+01
       54       1.12226184669682e-15 2.2712745482631e+01
       55       1.12781932765157e-15 2.2712745482631e+01
       56       1.12446248960298e-15 2.2712745482632e+01
       57       1.12645088726848e-15 2.2712745482632e+01
       58       1.12555837747598e-15 2.2712745482631e+01
       59       1.12271291467232e-15 2.2712745482631e+01
       60       1.11894808001733e-15 2.2712745482632e+01
       61       1.11632414726784e-15 2.2712745482631e+01
       62       1.12788394242185e-15 2.2712745482632e+01
       63       1.12268041330082e-15 2.2712745482631e+01
       64       1.12224566013613e-15 2.2712745482632e+01
       65       1.12708795243098e-15 2.2712745482631e+01
       66       1.13037713900055e-15 2.2712745482632e+01
       67       1.12401013572871e-15 2.2712745482632e+01
       68       1.12402788843906e-15 2.2712745482632e+01
       69       1.12077480677183e-15 2.2712745482632e+01
       70       1.11787551875706e-15 2.2712745482633e+01
       71       1.11959352456491e-15 2.2712745482631e+01
       72       1.12607151263365e-15 2.2712745482632e+01
       73       1.12816779649967e-15 2.2712745482632e+01
       74       1.11623400348146e-15 2.2712745482632e+01
       75       1.12087092039207e-15 2.2712745482631e+01
 Benchmark completed
 VERIFICATION SUCCESSFUL
 Zeta is      2.271274548263e+01
 Error is     7.105427357601e-15


 CG Benchmark Completed
 Class           =                        B
 Size            =                    75000
 Iterations      =                       75
 Threads         =                        1
 Time in seconds =                   161.27
 Mop/s total     =                   339.23
 Operation type  =           floating point
 Verification    =               SUCCESSFUL
 Version         =           3.0 structured
 Compile date    =              20 Jan 2023

 Compile options:
    CC           = gclang
    CLINK        = gclang
    C_LIB        = (none)
    C_INC        = -I../common
    CFLAGS       = -g -O1 -Xclang -disable-llvm-passes
    CLINKFLAGS   = -lm -mcmodel=large
    RAND         = randdp
--------------------------------------------------------------------------------------
DONE
opt -pgo-test-profile-file=/tmp/tmp.Ad9ZID4czn -block-freq -pgo-instr-use baseline_pre.bc -o baseline_with_metadata.bc
noelle-load -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
PDGAnalysis: Construct PDG from Analysis
Embed PDG as metadata
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26, !noelle.pdg.inst.id !2990" (3.304873e-02%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35, !noelle.pdg.inst.id !3004" (3.283351e-02%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002, !noelle.pdg.inst.id !3014" (1.255469e-04%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49, !noelle.pdg.inst.id !3027" (2.331487e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2, !noelle.pdg.inst.id !3043" (1.308987e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %53, !noelle.pdg.inst.id !3051" (3.228339e-04%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %77 = icmp sgt i64 %indvars.iv35.i8, %57, !noelle.pdg.inst.id !3067" (1.793455e-04%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26, !noelle.pdg.inst.id !3079" (1.258383e+00%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27.i19, %26, !noelle.pdg.inst.id !3086" (1.237758e+00%)
Noelle:     Loop "  %93 = icmp slt i64 %indvars.iv25.i23, %91, !noelle.pdg.inst.id !3099" (1.231033e+00%)
Noelle:     Loop "  %106 = icmp sgt i64 %indvars.iv29.i26, %57, !noelle.pdg.inst.id !3116" (5.380384e-03%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %117 = icmp sgt i64 %indvars.iv31.i30, %57, !noelle.pdg.inst.id !3130" (9.864017e-03%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %136 = icmp sgt i64 %indvars.iv33.i33, %57, !noelle.pdg.inst.id !3149" (5.380378e-03%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %146 = icmp sgt i64 %indvars.iv23.i35, %26, !noelle.pdg.inst.id !3161" (4.951032e-02%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %155 = icmp slt i64 %indvars.iv21.i38, %153, !noelle.pdg.inst.id !3173" (4.924130e-02%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %168 = icmp sgt i64 %indvars.iv.i41, %57, !noelle.pdg.inst.id !3189" (2.331489e-04%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %179 = icmp sgt i64 %indvars.iv44, %57, !noelle.pdg.inst.id !3204" (1.793455e-04%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %189 = icmp sgt i64 %indvars.iv46, %57, !noelle.pdg.inst.id !3217" (1.793453e-04%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002, !noelle.pdg.inst.id !3228" (1.255469e-04%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76, !noelle.pdg.inst.id !3246" (9.818076e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %201, !noelle.pdg.inst.id !3252" (2.421251e-02%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %228 = icmp sgt i64 %indvars.iv35.i, %207, !noelle.pdg.inst.id !3269" (1.345097e-02%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26, !noelle.pdg.inst.id !3282" (9.437871e+01%)
Noelle:     Loop "  %235 = icmp sgt i64 %indvars.iv27.i, %213, !noelle.pdg.inst.id !3289" (9.283185e+01%)
Noelle:     Loop "  %244 = icmp slt i64 %indvars.iv25.i, %242, !noelle.pdg.inst.id !3302" (9.232744e+01%)
Noelle:     Loop "  %257 = icmp sgt i64 %indvars.iv29.i, %207, !noelle.pdg.inst.id !3319" (4.035287e-01%)
Noelle:     Loop "  %268 = icmp sgt i64 %indvars.iv31.i, %207, !noelle.pdg.inst.id !3333" (7.398011e-01%)
Noelle:     Loop "  %287 = icmp sgt i64 %indvars.iv33.i, %207, !noelle.pdg.inst.id !3352" (4.035282e-01%)
Noelle:     Loop "  %297 = icmp sgt i64 %indvars.iv23.i, %213, !noelle.pdg.inst.id !3364" (3.713274e+00%)
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv21.i, %304, !noelle.pdg.inst.id !3376" (3.693098e+00%)
Noelle:     Loop "  %319 = icmp sgt i64 %indvars.iv.i, %207, !noelle.pdg.inst.id !3393" (1.748624e-02%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  %330 = icmp sgt i64 %indvars.iv, %207, !noelle.pdg.inst.id !3409" (2.017644e-02%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %351 = icmp sgt i64 %indvars.iv39, %207, !noelle.pdg.inst.id !3435" (1.345095e-02%)
Noelle:  Disable loop "32" as cold code
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21, !noelle.pdg.inst.id !339" (1.434764e-04%)
Noelle:  Disable loop "33" as cold code
Noelle:     Loop "  %36 = icmp sgt i32 %.03, %0, !noelle.pdg.inst.id !361" (1.350758e-01%)
Noelle:     Loop "  %37 = shl nsw i32 %.04.i, 1, !noelle.pdg.inst.id !368" (1.496986e-03%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %40 = icmp slt i32 %.01.ph.i, 13, !noelle.pdg.inst.id !381" (2.772430e-02%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %43 = fmul double %42, 0x3E80000000000000, !noelle.pdg.inst.id !391" (2.045281e-02%)
Noelle:  Disable loop "37" as cold code
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv.i3, %41, !noelle.pdg.inst.id !463" (2.370227e-03%)
Noelle:  Disable loop "38" as cold code
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14, !noelle.pdg.inst.id !475" (2.851411e-03%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01, !noelle.pdg.inst.id !500" (1.001161e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01, !noelle.pdg.inst.id !516" (9.530444e-02%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7, !noelle.pdg.inst.id !558" (3.920548e-04%)
Noelle:  Disable loop "42" as cold code
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14, !noelle.pdg.inst.id !276" (1.614474e-04%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24, !noelle.pdg.inst.id !294" (4.959285e-02%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40, !noelle.pdg.inst.id !314" (1.793862e-04%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44, !noelle.pdg.inst.id !325" (2.500494e-02%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56, !noelle.pdg.inst.id !336" (2.478968e-02%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24, !noelle.pdg.inst.id !346" (8.855867e-02%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0, !noelle.pdg.inst.id !372" (1.793859e-04%)
Noelle:  Disable loop "49" as cold code
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14, !noelle.pdg.inst.id !384" (1.614474e-04%)
Noelle:  Disable loop "50" as cold code
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99, !noelle.pdg.inst.id !397" (1.768608e-01%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv, %106, !noelle.pdg.inst.id !407" (9.774153e-02%)
Noelle:  Disable loop "52" as cold code
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127, !noelle.pdg.inst.id !435" (7.876053e-02%)
Noelle:  Disable loop "53" as cold code
Noelle:  Function "icnvrt"
Noelle:  Disable "icnvrt" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
Noelle:  Function "vranlc"
Noelle:  Disable "vranlc" as cold function
Planner:    There are 16 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:    Loop 4 has 1.000000e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:  There are 4 loop nesting trees in the program
Planner:    ID: 7 (1)
Planner:      Function: "main"
Planner:      Loop: "  %exitcond.i16 = icmp eq i32 %.0.i15, 26, !noelle.pdg.inst.id !3079"
Planner:      Loop nesting level: 2
Planner:      Hotness = 1.258383e+00 %
Planner:      Average instructions per invocation = 5.262354e+09 %
Planner:      Average iterations per invocation = 2.500000e+01 %
Planner:    
Planner:      ID: 8 (2)
Planner:        Function: "main"
Planner:        Loop: "  %84 = icmp sgt i64 %indvars.iv27.i19, %26, !noelle.pdg.inst.id !3086"
Planner:        Loop nesting level: 3
Planner:        Hotness = 1.237758e+00 %
Planner:        Average instructions per invocation = 2.070442e+08 %
Planner:        Average iterations per invocation = 7.500028e+04 %
Planner:      
Planner:        ID: 9 (3)
Planner:          Function: "main"
Planner:          Loop: "  %93 = icmp slt i64 %indvars.iv25.i23, %91, !noelle.pdg.inst.id !3099"
Planner:          Loop nesting level: 4
Planner:          Hotness = 1.231033e+00 %
Planner:          Average instructions per invocation = 2.745614e+03 %
Planner:          Average iterations per invocation = 1.837742e+02 %
Planner:        
Planner:    ID: 51 (1)
Planner:      Function: "sparse"
Planner:      Loop: "  %101 = icmp sgt i64 %indvars.iv23, %99, !noelle.pdg.inst.id !397"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.768608e-01 %
Planner:      Average instructions per invocation = 7.396034e+08 %
Planner:      Average iterations per invocation = 7.501600e+04 %
Planner:    
Planner:    ID: 34 (1)
Planner:      Function: "makea"
Planner:      Loop: "  %36 = icmp sgt i32 %.03, %0, !noelle.pdg.inst.id !361"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.350758e-01 %
Planner:      Average instructions per invocation = 5.648652e+08 %
Planner:      Average iterations per invocation = 7.452600e+04 %
Planner:    
Planner:      ID: 40 (2)
Planner:        Function: "makea"
Planner:        Loop: "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01, !noelle.pdg.inst.id !500"
Planner:        Loop nesting level: 2
Planner:        Hotness = 1.001161e-01 %
Planner:        Average instructions per invocation = 5.617762e+03 %
Planner:        Average iterations per invocation = 1.499964e+01 %
Planner:      
Planner:    ID: 19 (1)
Planner:      Function: "main"
Planner:      Loop: "  %exitcond = icmp eq i32 %.110, 76, !noelle.pdg.inst.id !3246"
Planner:      Loop nesting level: 1
Planner:      Hotness = 9.818076e+01 %
Planner:      Average instructions per invocation = 4.105761e+11 %
Planner:      Average iterations per invocation = 7.500000e+01 %
Planner:    
Planner:      ID: 22 (2)
Planner:        Function: "main"
Planner:        Loop: "  %exitcond.i = icmp eq i32 %.0.i, 26, !noelle.pdg.inst.id !3282"
Planner:        Loop nesting level: 2
Planner:        Hotness = 9.437871e+01 %
Planner:        Average instructions per invocation = 5.262354e+09 %
Planner:        Average iterations per invocation = 2.598667e+01 %
Planner:      
Planner:        ID: 25 (3)
Planner:          Function: "main"
Planner:          Loop: "  %257 = icmp sgt i64 %indvars.iv29.i, %207, !noelle.pdg.inst.id !3319"
Planner:          Loop nesting level: 3
Planner:          Hotness = 4.035287e-01 %
Planner:          Average instructions per invocation = 8.999956e+05 %
Planner:          Average iterations per invocation = 7.500030e+04 %
Planner:        
Planner:        ID: 27 (3)
Planner:          Function: "main"
Planner:          Loop: "  %287 = icmp sgt i64 %indvars.iv33.i, %207, !noelle.pdg.inst.id !3352"
Planner:          Loop nesting level: 3
Planner:          Hotness = 4.035282e-01 %
Planner:          Average instructions per invocation = 8.999946e+05 %
Planner:          Average iterations per invocation = 7.500030e+04 %
Planner:        
Planner:        ID: 23 (3)
Planner:          Function: "main"
Planner:          Loop: "  %235 = icmp sgt i64 %indvars.iv27.i, %213, !noelle.pdg.inst.id !3289"
Planner:          Loop nesting level: 3
Planner:          Hotness = 9.283185e+01 %
Planner:          Average instructions per invocation = 2.070442e+08 %
Planner:          Average iterations per invocation = 7.500030e+04 %
Planner:        
Planner:          ID: 24 (4)
Planner:            Function: "main"
Planner:            Loop: "  %244 = icmp slt i64 %indvars.iv25.i, %242, !noelle.pdg.inst.id !3302"
Planner:            Loop nesting level: 4
Planner:            Hotness = 9.232744e+01 %
Planner:            Average instructions per invocation = 2.745614e+03 %
Planner:            Average iterations per invocation = 1.837743e+02 %
Planner:          
Planner:        ID: 26 (3)
Planner:          Function: "main"
Planner:          Loop: "  %268 = icmp sgt i64 %indvars.iv31.i, %207, !noelle.pdg.inst.id !3333"
Planner:          Loop nesting level: 3
Planner:          Hotness = 7.398011e-01 %
Planner:          Average instructions per invocation = 1.649989e+06 %
Planner:          Average iterations per invocation = 7.500030e+04 %
Planner:        
Planner:      ID: 28 (2)
Planner:        Function: "main"
Planner:        Loop: "  %297 = icmp sgt i64 %indvars.iv23.i, %213, !noelle.pdg.inst.id !3364"
Planner:        Loop nesting level: 2
Planner:        Hotness = 3.713274e+00 %
Planner:        Average instructions per invocation = 2.070442e+08 %
Planner:        Average iterations per invocation = 7.500029e+04 %
Planner:      
Planner:        ID: 29 (3)
Planner:          Function: "main"
Planner:          Loop: "  %306 = icmp slt i64 %indvars.iv21.i, %304, !noelle.pdg.inst.id !3376"
Planner:          Loop nesting level: 3
Planner:          Hotness = 3.693098e+00 %
Planner:          Average instructions per invocation = 2.745614e+03 %
Planner:          Average iterations per invocation = 1.837743e+02 %
Planner:        
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 7 saves only 9.207217e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 8 saves only 1.237758e+00 when parallelized. Skip it
Planner: LoopSelector:  Loop 9 saves only 1.231033e+00 when parallelized. Skip it
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 51 saves only 3.516824e-02 when parallelized. Skip it
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 34 saves only 4.638265e-02 when parallelized. Skip it
Planner: LoopSelector:  Loop 40 saves only 4.341094e-02 when parallelized. Skip it
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 26 saves only 7.398011e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 25 saves only 4.035287e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 27 saves only 4.035282e-01 when parallelized. Skip it
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 23
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %235 = icmp sgt i64 %indvars.iv27.i, %213, !noelle.pdg.inst.id !3289"
Planner: LoopSelector:      Coverage: 9.283185e+01%
Planner: LoopSelector:      Whole-program savings = 9.283185e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 24
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 4
Planner: LoopSelector:      "  %244 = icmp slt i64 %indvars.iv25.i, %242, !noelle.pdg.inst.id !3302"
Planner: LoopSelector:      Coverage: 9.232744e+01%
Planner: LoopSelector:      Whole-program savings = 9.232744e+01%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 19
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %exitcond = icmp eq i32 %.110, 76, !noelle.pdg.inst.id !3246"
Planner: LoopSelector:      Coverage: 9.818076e+01%
Planner: LoopSelector:      Whole-program savings = 7.170869e+01%
Planner: LoopSelector:      Loop savings = 7.303741e+01%
Planner: LoopSelector:    Loop 22
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %exitcond.i = icmp eq i32 %.0.i, 26, !noelle.pdg.inst.id !3282"
Planner: LoopSelector:      Coverage: 9.437871e+01%
Planner: LoopSelector:      Whole-program savings = 6.905413e+01%
Planner: LoopSelector:      Loop savings = 7.316706e+01%
Planner: LoopSelector:    Loop 28
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %297 = icmp sgt i64 %indvars.iv23.i, %213, !noelle.pdg.inst.id !3364"
Planner: LoopSelector:      Coverage: 3.713274e+00%
Planner: LoopSelector:      Whole-program savings = 3.713274e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector:    Loop 29
Planner: LoopSelector:      Function: "main"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %306 = icmp slt i64 %indvars.iv21.i, %304, !noelle.pdg.inst.id !3376"
Planner: LoopSelector:      Coverage: 3.693098e+00%
Planner: LoopSelector:      Whole-program savings = 3.693098e+00%
Planner: LoopSelector:      Loop savings = 1.000000e+02%
Planner: LoopSelector: End
Planner:   Maximum time saved = 9.809198e+01% (410204809012)
Planner:   Maximum time saved with DOALL only = 0.000000e+00% (0)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %28 = icmp sgt i64 %indvars.iv56, %26, !noelle.pdg.inst.id !2992" (3.304873e-02%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %37 = icmp slt i64 %indvars.iv54, %35, !noelle.pdg.inst.id !3006" (3.283351e-02%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 75002, !noelle.pdg.inst.id !3016" (1.255469e-04%)
Noelle:  Disable loop "2" as cold code
Noelle:     Loop "  %51 = icmp sgt i64 %indvars.iv49, %49, !noelle.pdg.inst.id !3029" (2.331487e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.09, 2, !noelle.pdg.inst.id !3045" (1.308987e+00%)
Noelle:     Loop "  %exitcond39.i4 = icmp eq i64 %indvars.iv37.i3, %53, !noelle.pdg.inst.id !3053" (3.228339e-04%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %77 = icmp sgt i64 %indvars.iv35.i8, %57, !noelle.pdg.inst.id !3069" (1.793455e-04%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %exitcond.i16 = icmp eq i32 %.0.i15, 26, !noelle.pdg.inst.id !3081" (1.258383e+00%)
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27.i19, %26, !noelle.pdg.inst.id !3088" (1.237758e+00%)
Noelle:     Loop "  %93 = icmp slt i64 %indvars.iv25.i23, %91, !noelle.pdg.inst.id !3101" (1.231033e+00%)
Noelle:     Loop "  %106 = icmp sgt i64 %indvars.iv29.i26, %57, !noelle.pdg.inst.id !3118" (5.380384e-03%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %117 = icmp sgt i64 %indvars.iv31.i30, %57, !noelle.pdg.inst.id !3132" (9.864017e-03%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %136 = icmp sgt i64 %indvars.iv33.i33, %57, !noelle.pdg.inst.id !3151" (5.380378e-03%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %146 = icmp sgt i64 %indvars.iv23.i35, %26, !noelle.pdg.inst.id !3163" (4.951032e-02%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %155 = icmp slt i64 %indvars.iv21.i38, %153, !noelle.pdg.inst.id !3175" (4.924130e-02%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %168 = icmp sgt i64 %indvars.iv.i41, %57, !noelle.pdg.inst.id !3191" (2.331489e-04%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %179 = icmp sgt i64 %indvars.iv44, %57, !noelle.pdg.inst.id !3206" (1.793455e-04%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %189 = icmp sgt i64 %indvars.iv46, %57, !noelle.pdg.inst.id !3219" (1.793453e-04%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 75002, !noelle.pdg.inst.id !3230" (1.255469e-04%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond = icmp eq i32 %.110, 76, !noelle.pdg.inst.id !3248" (9.818076e+01%)
Noelle:     Loop "  %exitcond39.i = icmp eq i64 %indvars.iv37.i, %201, !noelle.pdg.inst.id !3254" (2.421251e-02%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %228 = icmp sgt i64 %indvars.iv35.i, %207, !noelle.pdg.inst.id !3271" (1.345097e-02%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, 26, !noelle.pdg.inst.id !3284" (9.437871e+01%)
Noelle:     Loop "  %235 = icmp sgt i64 %indvars.iv27.i, %213, !noelle.pdg.inst.id !3291" (9.283185e+01%)
Noelle:     Loop "  %244 = icmp slt i64 %indvars.iv25.i, %242, !noelle.pdg.inst.id !3304" (9.232744e+01%)
Noelle:     Loop "  %257 = icmp sgt i64 %indvars.iv29.i, %207, !noelle.pdg.inst.id !3321" (4.035287e-01%)
Noelle:     Loop "  %268 = icmp sgt i64 %indvars.iv31.i, %207, !noelle.pdg.inst.id !3335" (7.398011e-01%)
Noelle:     Loop "  %287 = icmp sgt i64 %indvars.iv33.i, %207, !noelle.pdg.inst.id !3354" (4.035282e-01%)
Noelle:     Loop "  %297 = icmp sgt i64 %indvars.iv23.i, %213, !noelle.pdg.inst.id !3366" (3.713274e+00%)
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv21.i, %304, !noelle.pdg.inst.id !3378" (3.693098e+00%)
Noelle:     Loop "  %319 = icmp sgt i64 %indvars.iv.i, %207, !noelle.pdg.inst.id !3395" (1.748624e-02%)
Noelle:  Disable loop "30" as cold code
Noelle:     Loop "  %330 = icmp sgt i64 %indvars.iv, %207, !noelle.pdg.inst.id !3411" (2.017644e-02%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %351 = icmp sgt i64 %indvars.iv39, %207, !noelle.pdg.inst.id !3437" (1.345095e-02%)
Noelle:  Disable loop "32" as cold code
Noelle:  Function "makea"
Noelle:     Loop "  %23 = icmp sgt i64 %indvars.iv41, %21, !noelle.pdg.inst.id !341" (1.434764e-04%)
Noelle:  Disable loop "33" as cold code
Noelle:     Loop "  %36 = icmp sgt i32 %.03, %0, !noelle.pdg.inst.id !363" (1.350758e-01%)
Noelle:     Loop "  %37 = shl nsw i32 %.04.i, 1, !noelle.pdg.inst.id !370" (1.496986e-03%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %40 = icmp slt i32 %.01.ph.i, 13, !noelle.pdg.inst.id !383" (2.772430e-02%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %43 = fmul double %42, 0x3E80000000000000, !noelle.pdg.inst.id !393" (2.045281e-02%)
Noelle:  Disable loop "37" as cold code
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv.i3, %41, !noelle.pdg.inst.id !465" (2.370227e-03%)
Noelle:  Disable loop "38" as cold code
Noelle:     Loop "  %exitcond2 = icmp eq i64 %indvars.iv.i, 14, !noelle.pdg.inst.id !477" (2.851411e-03%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv39, %.01, !noelle.pdg.inst.id !502" (1.001161e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %.01, !noelle.pdg.inst.id !518" (9.530444e-02%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %156 = icmp sgt i32 %.16, %7, !noelle.pdg.inst.id !560" (3.920548e-04%)
Noelle:  Disable loop "42" as cold code
Noelle:  Function "sparse"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv39, %14, !noelle.pdg.inst.id !278" (1.614474e-04%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv37, %24, !noelle.pdg.inst.id !296" (4.959285e-02%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  %43 = icmp sgt i64 %indvars.iv35, %40, !noelle.pdg.inst.id !316" (1.793862e-04%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %49 = icmp sgt i64 %indvars.iv33, %44, !noelle.pdg.inst.id !327" (2.500494e-02%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %56, !noelle.pdg.inst.id !338" (2.478968e-02%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %61 = icmp sgt i64 %indvars.iv29, %24, !noelle.pdg.inst.id !348" (8.855867e-02%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %84 = icmp sgt i64 %indvars.iv27, 0, !noelle.pdg.inst.id !374" (1.793859e-04%)
Noelle:  Disable loop "49" as cold code
Noelle:     Loop "  %93 = icmp sgt i64 %indvars.iv25, %14, !noelle.pdg.inst.id !386" (1.614474e-04%)
Noelle:  Disable loop "50" as cold code
Noelle:     Loop "  %101 = icmp sgt i64 %indvars.iv23, %99, !noelle.pdg.inst.id !399" (1.768608e-01%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv, %106, !noelle.pdg.inst.id !409" (9.774153e-02%)
Noelle:  Disable loop "52" as cold code
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv21, %127, !noelle.pdg.inst.id !437" (7.876053e-02%)
Noelle:  Disable loop "53" as cold code
Noelle:  Function "icnvrt"
Noelle:  Disable "icnvrt" as cold function
Noelle:  Function "elapsed_time"
Noelle:  Disable "elapsed_time" as cold function
Noelle:  Function "c_print_results"
Noelle:  Disable "c_print_results" as cold function
Noelle:  Function "wtime_"
Noelle:  Disable "wtime_" as cold function
Noelle:  Function "timer_stop"
Noelle:  Disable "timer_stop" as cold function
Noelle:  Function "timer_start"
Noelle:  Disable "timer_start" as cold function
Noelle:  Function "randlc"
Noelle:  Disable "randlc" as cold function
Noelle:  Function "timer_read"
Noelle:  Disable "timer_read" as cold function
Noelle:  Function "timer_clear"
Noelle:  Disable "timer_clear" as cold function
Noelle:  Function "vranlc"
Noelle:  Disable "vranlc" as cold function
Parallelizer:    There are 16 loops in the program we are going to consider
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 23 = "  %235 = icmp sgt i64 %indvars.iv27.i, %213, !noelle.pdg.inst.id !3291"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %213 = add nsw i64 %212, 1, !noelle.pdg.inst.id !3244
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 24 = "  %244 = icmp slt i64 %indvars.iv25.i, %242, !noelle.pdg.inst.id !3304"
Parallelizer: parallelizerLoop:   Nesting level = 4
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %241 = sext i32 %238 to i64, !noelle.pdg.inst.id !3299
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %242 = sext i32 %240 to i64, !noelle.pdg.inst.id !3300
Parallelizer: parallelizerLoop:   Environment:   Live-out 2 =   %.07.i = phi double [ %254, %245 ], [ 0.000000e+00, %236 ], !noelle.pdg.inst.id !3303
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 19 = "  %exitcond = icmp eq i32 %.110, 76, !noelle.pdg.inst.id !3248"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %201 = select i1 %200, i64 75002, i64 2, !prof !2969, !noelle.pdg.inst.id !3236
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %207 = add nsw i64 %206, 1, !noelle.pdg.inst.id !3240
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %213 = add nsw i64 %212, 1, !noelle.pdg.inst.id !3244
Parallelizer: parallelizerLoop:   Environment:   Live-out 0 =   %.013 = phi double [ 0.000000e+00, %199 ], [ %344, %357 ], !noelle.pdg.inst.id !3246
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 22 = "  %exitcond.i = icmp eq i32 %.0.i, 26, !noelle.pdg.inst.id !3284"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %207 = add nsw i64 %206, 1, !noelle.pdg.inst.id !3240
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %213 = add nsw i64 %212, 1, !noelle.pdg.inst.id !3244
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %.04.i.lcssa = phi double [ %.04.i, %227 ], !noelle.pdg.inst.id !3275
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 28 = "  %297 = icmp sgt i64 %indvars.iv23.i, %213, !noelle.pdg.inst.id !3366"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %213 = add nsw i64 %212, 1, !noelle.pdg.inst.id !3244
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "main"
Parallelizer: parallelizerLoop:   Loop 29 = "  %306 = icmp slt i64 %indvars.iv21.i, %304, !noelle.pdg.inst.id !3378"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %303 = sext i32 %300 to i64, !noelle.pdg.inst.id !3373
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %304 = sext i32 %302 to i64, !noelle.pdg.inst.id !3374
Parallelizer: parallelizerLoop:   Environment:   Live-out 2 =   %.110.i = phi double [ %316, %307 ], [ 0.000000e+00, %298 ], !noelle.pdg.inst.id !3377
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc cg.B.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/NAS/benchmarks/cg.B'
