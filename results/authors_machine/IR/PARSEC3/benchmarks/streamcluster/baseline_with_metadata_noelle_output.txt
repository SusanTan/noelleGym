make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/streamcluster'
./runEnablers.sh streamcluster streamcluster.bc simlarge "-lm -lstdc++ -lpthread -L../../parsec-3.0/pkgs/apps/x264/inst/amd64-linux.gclang/lib -lx264 -L/usr/lib64 -L/usr/lib" -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/streamcluster /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/streamcluster
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/streamcluster

opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs streamcluster.bc -o baseline.bc
Running: ./baseline_prof 10 20 128 16384 16384 1000 none output.txt 1 in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/streamcluster
PARSEC Benchmark Suite Version 3.0-beta-20150206
read 16384 points
--------------------------------------------------------------------------------------
DONE
opt -pgo-test-profile-file=/tmp/tmp.ivgCM5vNye -block-freq -pgo-instr-use baseline.bc -o baseline_pre.bc
opt --strip-debug --strip-debug-declare baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.g0L2TsYmrB (.ll version is /tmp/tmp.E0Isdt0RfT)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.3Vg84dLRus (.ll version is /tmp/tmp.dxtCDp3RUk)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.g0L2TsYmrB -o /tmp/tmp.3Vg84dLRus
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.g0L2TsYmrB -o /tmp/tmp.3Vg84dLRus
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.g0L2TsYmrB -o /tmp/tmp.3Vg84dLRus
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.g0L2TsYmrB -o /tmp/tmp.3Vg84dLRus
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       __cxx_global_var_init
DeadFunctionEliminator:       _GLOBAL__sub_I_streamcluster.cpp
DeadFunctionEliminator:       _ZNSt8ios_base4InitC1Ev
DeadFunctionEliminator:       __cxa_atexit
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       _Z10intshufflePii
DeadFunctionEliminator:       _Z4distRK5PointS1_i
DeadFunctionEliminator:       _ZN9SimStreamC2El
DeadFunctionEliminator:       _ZN10FileStreamC2EPc
DeadFunctionEliminator:       _ZN7PStreamC2Ev
DeadFunctionEliminator:       _ZN10FileStream6ferrorEv
DeadFunctionEliminator:       _ZN10FileStream4feofEv
DeadFunctionEliminator:       _ZN10FileStreamD2Ev
DeadFunctionEliminator:       _ZN10FileStreamD0Ev
DeadFunctionEliminator:       _ZdlPv
DeadFunctionEliminator:       _ZN7PStreamD2Ev
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       _Z7shuffleP6Points
DeadFunctionEliminator:       lrand48
DeadFunctionEliminator:       llvm.memcpy.p0i8.p0i8.i64
DeadFunctionEliminator:       _Z7pspeedyP6PointsfPliP17pthread_barrier_t
DeadFunctionEliminator:       malloc
DeadFunctionEliminator:       free
DeadFunctionEliminator:       _Z5pgainlP6PointsdPliP17pthread_barrier_t
DeadFunctionEliminator:       llvm.memset.p0i8.i64
DeadFunctionEliminator:       _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t
DeadFunctionEliminator:       main
DeadFunctionEliminator:       _Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t
DeadFunctionEliminator:       log
DeadFunctionEliminator:       _Z8pkmedianP6PointsllPliP17pthread_barrier_t
DeadFunctionEliminator:       calloc
DeadFunctionEliminator:       _Z11contcentersP6Points
DeadFunctionEliminator:       _Z11copycentersP6PointsS0_Pll
DeadFunctionEliminator:       _Z14localSearchSubPv
DeadFunctionEliminator:       _Z11localSearchP6PointsllPl
DeadFunctionEliminator:       llvm.umul.with.overflow.i64
DeadFunctionEliminator:       _Znam
DeadFunctionEliminator:       _ZdaPv
DeadFunctionEliminator:       _Z12outcenterIDsP6PointsPlPc
DeadFunctionEliminator:       fopen
DeadFunctionEliminator:       fprintf
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       fclose
DeadFunctionEliminator:       _Z13streamClusterP7PStreamllillPc
DeadFunctionEliminator:       fflush
DeadFunctionEliminator:       atoi
DeadFunctionEliminator:       strcpy
DeadFunctionEliminator:       srand48
DeadFunctionEliminator:       _Znwm
DeadFunctionEliminator:       feof
DeadFunctionEliminator:       ferror
DeadFunctionEliminator:       _ZN7PStreamD0Ev
DeadFunctionEliminator:       llvm.trap
DeadFunctionEliminator:       _ZN9SimStream4readEPfii
DeadFunctionEliminator:       _ZN9SimStream6ferrorEv
DeadFunctionEliminator:       _ZN9SimStream4feofEv
DeadFunctionEliminator:       _ZN9SimStreamD0Ev
DeadFunctionEliminator:       strtol
DeadFunctionEliminator:       fwrite
DeadFunctionEliminator:       fputc
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.834063e-04%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv10, %5" (2.114703e-05%)
Noelle:     Loop "  %68 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %64, align 8, !tbaa !47" (4.997791e+01%)
Noelle:     Loop "  %94 = icmp sgt i64 %70, %indvars.iv" (2.204284e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.988033e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %26 = icmp slt i64 %.04, %spec.select" (5.326181e-02%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv42, %42" (4.997025e-08%)
Noelle:     Loop "  %56 = icmp slt i64 %.02, %spec.select" (2.748364e-07%)
Noelle:     Loop "  %72 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.816155e-01%)
Noelle:     Loop "  %91 = icmp slt i64 %90, %1" (0.000000e+00%)
Noelle:     Loop "  %77 = icmp slt i64 %76, %1" (5.646795e-01%)
Noelle:     Loop "  %108 = icmp sgt i64 %105, %indvars.iv" (3.148952e-04%)
Noelle:     Loop "  %124 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.869765e+01%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %32 = fdiv double %.0, %.02" (7.726170e-07%)
Noelle:     Loop "  %36 = icmp slt i64 %.01, %6" (7.726170e-07%)
Noelle:     Loop "  %16 = fdiv double %.0.us, %.02.us" (9.869764e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.01.us, %6" (9.869762e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %40 = icmp sgt i64 %spec.select, %indvars.iv44" (6.764556e-01%)
Noelle:     Loop "  %60 = icmp slt i64 %indvars.iv42, %57" (5.848441e-05%)
Noelle:     Loop "  %73 = icmp sgt i64 %spec.select, %indvars.iv40" (5.637811e-01%)
Noelle:     Loop "  %109 = icmp sgt i64 %spec.select, %indvars.iv38" (9.633763e+01%)
Noelle:     Loop "  %150 = icmp sgt i64 %spec.select, %indvars.iv36" (7.897629e-01%)
Noelle:     Loop "  %161 = icmp slt i32 %.03, %156" (3.361383e-04%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv34, %190" (7.912597e-05%)
Noelle:     Loop "  %214 = icmp sgt i64 %spec.select, %indvars.iv32" (2.675180e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select, %indvars.iv" (5.354670e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.542522e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.131172e-01%)
Noelle:     Loop "  %43 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp sgt i64 %spec.select, %indvars.iv18" (0.000000e+00%)
Noelle:     Loop "  %73 = sext i32 %72 to i64" (9.112974e-01%)
Noelle:     Loop "  %92 = icmp sgt i64 %spec.select, %indvars.iv16" (9.086522e-01%)
Noelle:     Loop "  %120 = icmp sgt i64 %spec.select, %indvars.iv14" (1.385544e-03%)
Noelle:     Loop "  %139 = icmp slt i64 %indvars.iv, %136" (1.076282e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (7.346453e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (7.258299e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %10 = icmp slt i64 %.02, %7" (4.483997e-02%)
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv, %6" (4.443061e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.172633e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (3.148952e-04%)
Noelle:     Loop "  %24 = icmp slt i64 %.12, %23" (4.730184e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %26, %indvars.iv16" (4.093371e-04%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv14, %21" (2.944593e-05%)
Noelle:     Loop "  %72 = add nsw i32 %.06, 1" (2.665529e-05%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %21" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.748364e-07%)
Noelle:     Loop "  %28 = icmp sgt i64 %27, %indvars.iv8" (5.253219e-05%)
Noelle:     Loop "  %45 = load i32, i32* %25, align 8, !tbaa !48" (5.179609e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.992083e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.834063e-04%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv10, %5" (2.114703e-05%)
Noelle:     Loop "  %68 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %64, align 8, !tbaa !47" (4.997791e+01%)
Noelle:     Loop "  %94 = icmp sgt i64 %70, %indvars.iv" (2.204284e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.988033e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %26 = icmp slt i64 %.04, %spec.select" (5.326181e-02%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv42, %42" (4.997025e-08%)
Noelle:     Loop "  %56 = icmp slt i64 %.02, %spec.select" (2.748364e-07%)
Noelle:     Loop "  %72 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.816155e-01%)
Noelle:     Loop "  %91 = icmp slt i64 %90, %1" (0.000000e+00%)
Noelle:     Loop "  %77 = icmp slt i64 %76, %1" (5.646795e-01%)
Noelle:     Loop "  %108 = icmp sgt i64 %105, %indvars.iv" (3.148952e-04%)
Noelle:     Loop "  %124 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.869765e+01%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %32 = fdiv double %.0, %.02" (7.726170e-07%)
Noelle:     Loop "  %36 = icmp slt i64 %.01, %6" (7.726170e-07%)
Noelle:     Loop "  %16 = fdiv double %.0.us, %.02.us" (9.869764e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.01.us, %6" (9.869762e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %40 = icmp sgt i64 %spec.select, %indvars.iv44" (6.764556e-01%)
Noelle:     Loop "  %60 = icmp slt i64 %indvars.iv42, %57" (5.848441e-05%)
Noelle:     Loop "  %73 = icmp sgt i64 %spec.select, %indvars.iv40" (5.637811e-01%)
Noelle:     Loop "  %109 = icmp sgt i64 %spec.select, %indvars.iv38" (9.633763e+01%)
Noelle:     Loop "  %150 = icmp sgt i64 %spec.select, %indvars.iv36" (7.897629e-01%)
Noelle:     Loop "  %161 = icmp slt i32 %.03, %156" (3.361383e-04%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv34, %190" (7.912597e-05%)
Noelle:     Loop "  %214 = icmp sgt i64 %spec.select, %indvars.iv32" (2.675180e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select, %indvars.iv" (5.354670e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.542522e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.131172e-01%)
Noelle:     Loop "  %43 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp sgt i64 %spec.select, %indvars.iv18" (0.000000e+00%)
Noelle:     Loop "  %73 = sext i32 %72 to i64" (9.112974e-01%)
Noelle:     Loop "  %92 = icmp sgt i64 %spec.select, %indvars.iv16" (9.086522e-01%)
Noelle:     Loop "  %120 = icmp sgt i64 %spec.select, %indvars.iv14" (1.385544e-03%)
Noelle:     Loop "  %139 = icmp slt i64 %indvars.iv, %136" (1.076282e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (7.346453e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (7.258299e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %10 = icmp slt i64 %.02, %7" (4.483997e-02%)
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv, %6" (4.443061e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.172633e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (3.148952e-04%)
Noelle:     Loop "  %24 = icmp slt i64 %.12, %23" (4.730184e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %26, %indvars.iv16" (4.093371e-04%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv14, %21" (2.944593e-05%)
Noelle:     Loop "  %72 = add nsw i32 %.06, 1" (2.665529e-05%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %21" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.748364e-07%)
Noelle:     Loop "  %28 = icmp sgt i64 %27, %indvars.iv8" (5.253219e-05%)
Noelle:     Loop "  %45 = load i32, i32* %25, align 8, !tbaa !48" (5.179609e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.992083e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-inline baseline_pre.bc "-noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier"
NOELLE: Inliner: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.0JeGAgYVjW (.ll version is /tmp/tmp.DRDbjDY3Ee)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.VoNJfbgnnE (.ll version is /tmp/tmp.XByFMnI0U2)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
Inliner: Start
Inliner:   Number of program instructions = 1655
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: _Z5pgainlP6PointsdPliP17pthread_barrier_t (353 instructions. The inlining will add 21 instructions),   %222 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %204, %struct.Point* dereferenceable(32) %220, i32 %221)
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %storemerge = phi i32 [ 1, %._crit_edge ], [ %87, %._crit_edge26 ]
DOALL:     	  %54 = phi i32 [ 1, %._crit_edge ], [ %87, %._crit_edge26 ]
DOALL:     	  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     	  %55 = sext i32 %54 to i64
DOALL:     	  %56 = load i64, i64* %6, align 8, !tbaa !30
DOALL:     	  %57 = icmp sgt i64 %56, %55
DOALL:     	  br i1 %57, label %58, label %.loopexit7.loopexit, !prof !49
DOALL:     	  %63 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     	  %87 = add nsw i32 %63, 1
DOALL:     External nodes: 11
DOALL:     	  %59 = tail call i64 @lrand48() #3
DOALL:     	  %60 = sitofp i64 %59 to float
DOALL:     	  %61 = fmul float %60, 0x3E00000000000000
DOALL:     	  %62 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %64 = sext i32 %63 to i64
DOALL:     	  %65 = getelementptr inbounds %struct.Point, %struct.Point* %62, i64 %64, i32 3
DOALL:     	  %66 = load float, float* %65, align 8, !tbaa !45
DOALL:     	  %67 = fdiv float %66, %1
DOALL:     	  %68 = fcmp olt float %61, %67
DOALL:     	  br i1 %68, label %69, label %.._crit_edge26_crit_edge, !prof !50
DOALL:     	  br label %53
DOALL:     Edges: 31
DOALL:     Loop-carried data dependences
DOALL:         store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 --->   store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 via memory
DOALL:         %87 = add nsw i32 %63, 1 --->   %storemerge = phi i32 [ 1, %._crit_edge ], [ %87, %._crit_edge26 ] via variable
DOALL:         %87 = add nsw i32 %63, 1 --->   %54 = phi i32 [ 1, %._crit_edge ], [ %87, %._crit_edge26 ] via variable
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %70 = load i64, i64* %2, align 8, !tbaa !47
DOALL:     	  %71 = add nsw i64 %70, 1
DOALL:     	  store i64 %71, i64* %2, align 8, !tbaa !47
DOALL:     External nodes: 1
DOALL:     	  br i1 %68, label %69, label %.._crit_edge26_crit_edge, !prof !50
DOALL:     Edges: 8
DOALL:     Loop-carried data dependences
DOALL:         store i64 %71, i64* %2, align 8, !tbaa !47 --->   store i64 %71, i64* %2, align 8, !tbaa !47 via memory
DOALL:         store i64 %71, i64* %2, align 8, !tbaa !47 --->   %70 = load i64, i64* %2, align 8, !tbaa !47 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 25
DOALL:     	  %59 = tail call i64 @lrand48() #3
DOALL:     	  %60 = sitofp i64 %59 to float
DOALL:     	  %61 = fmul float %60, 0x3E00000000000000
DOALL:     	  %66 = load float, float* %65, align 8, !tbaa !45
DOALL:     	  %67 = fdiv float %66, %1
DOALL:     	  %68 = fcmp olt float %61, %67
DOALL:     	  br i1 %68, label %69, label %.._crit_edge26_crit_edge, !prof !50
DOALL:     	  %72 = getelementptr inbounds %struct.Point, %struct.Point* %62, i64 %64
DOALL:     	  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge27 ], [ %18, %69 ]
DOALL:     	  %74 = icmp sgt i64 %spec.select, %indvars.iv16
DOALL:     	  br i1 %74, label %75, label %._crit_edge26.loopexit, !prof !51
DOALL:     	  %76 = getelementptr inbounds %struct.Point, %struct.Point* %62, i64 %indvars.iv16
DOALL:     	  %77 = load i32, i32* %17, align 8, !tbaa !41
DOALL:     	  %78 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %72, %struct.Point* dereferenceable(32) %76, i32 %77)
DOALL:     	  %79 = getelementptr inbounds %struct.Point, %struct.Point* %62, i64 %indvars.iv16, i32 0
DOALL:     	  %80 = load float, float* %79, align 8, !tbaa !42
DOALL:     	  %81 = fmul float %78, %80
DOALL:     	  %82 = getelementptr inbounds %struct.Point, %struct.Point* %62, i64 %indvars.iv16, i32 3
DOALL:     	  %83 = load float, float* %82, align 8, !tbaa !45
DOALL:     	  %84 = fcmp olt float %81, %83
DOALL:     	  br i1 %84, label %85, label %.._crit_edge27_crit_edge, !prof !52
DOALL:     	  store float %81, float* %82, align 8, !tbaa !45
DOALL:     	  %86 = getelementptr inbounds %struct.Point, %struct.Point* %62, i64 %indvars.iv16, i32 2
DOALL:     	  store i64 %64, i64* %86, align 8, !tbaa !46
DOALL:     	  %indvars.iv.next17 = add i64 %indvars.iv16, 1
DOALL:     External nodes: 13
DOALL:     	  br i1 %57, label %58, label %.loopexit7.loopexit, !prof !49
DOALL:     	  %62 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %64 = sext i32 %63 to i64
DOALL:     	  %65 = getelementptr inbounds %struct.Point, %struct.Point* %62, i64 %64, i32 3
DOALL:     	  br label %._crit_edge26
DOALL:     	  %70 = load i64, i64* %2, align 8, !tbaa !47
DOALL:     	  %71 = add nsw i64 %70, 1
DOALL:     	  store i64 %71, i64* %2, align 8, !tbaa !47
DOALL:     	  br label %73
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %73
DOALL:     	  br label %._crit_edge26
DOALL:     Edges: 86
DOALL:     Loop-carried data dependences
DOALL:         %59 = tail call i64 @lrand48() #3 --->   %59 = tail call i64 @lrand48() #3 via memory
DOALL:         %59 = tail call i64 @lrand48() #3 --->   %59 = tail call i64 @lrand48() #3 via memory
DOALL:         %59 = tail call i64 @lrand48() #3 --->   %59 = tail call i64 @lrand48() #3 via memory
DOALL:         %66 = load float, float* %65, align 8, !tbaa !45 --->   store float %81, float* %82, align 8, !tbaa !45 via memory
DOALL:         %78 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %72, %struct.Point* dereferenceable(32) %76, i32 %77) --->   store i64 %64, i64* %86, align 8, !tbaa !46 via memory
DOALL:         %78 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %72, %struct.Point* dereferenceable(32) %76, i32 %77) --->   %59 = tail call i64 @lrand48() #3 via memory
DOALL:         %78 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %72, %struct.Point* dereferenceable(32) %76, i32 %77) --->   store float %81, float* %82, align 8, !tbaa !45 via memory
DOALL:         %83 = load float, float* %82, align 8, !tbaa !45 --->   store float %81, float* %82, align 8, !tbaa !45 via memory
DOALL:         store float %81, float* %82, align 8, !tbaa !45 --->   %78 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %72, %struct.Point* dereferenceable(32) %76, i32 %77) via memory
DOALL:         store float %81, float* %82, align 8, !tbaa !45 --->   %66 = load float, float* %65, align 8, !tbaa !45 via memory
DOALL:         store float %81, float* %82, align 8, !tbaa !45 --->   %83 = load float, float* %82, align 8, !tbaa !45 via memory
DOALL:         store float %81, float* %82, align 8, !tbaa !45 --->   store float %81, float* %82, align 8, !tbaa !45 via memory
DOALL:         store i64 %64, i64* %86, align 8, !tbaa !46 --->   store i64 %64, i64* %86, align 8, !tbaa !46 via memory
DOALL:         store i64 %64, i64* %86, align 8, !tbaa !46 --->   %78 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %72, %struct.Point* dereferenceable(32) %76, i32 %77) via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: _Z7pspeedyP6PointsfPliP17pthread_barrier_t (159 instructions. The inlining will add 21 instructions),   %78 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %72, %struct.Point* dereferenceable(32) %76, i32 %77)
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: _Z11localSearchP6PointsllPl (41 instructions. The inlining will add 19 instructions),   %27 = call i8* @_Z14localSearchSubPv(i8* %13)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv12, %4" (2.832567e-04%)
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv10, %5" (2.113586e-05%)
Noelle:     Loop "  %65 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %62, align 8, !tbaa !47" (4.997790e+01%)
Noelle:     Loop "  %89 = icmp sgt i64 %67, %indvars.iv" (2.203120e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.988042e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %24 = icmp slt i64 %.04, %spec.select" (5.320220e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv42, %9" (4.994388e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.746913e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.806903e-01%)
Noelle:     Loop "  %78 = icmp slt i64 %77, %1" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp slt i64 %67, %1" (5.628284e-01%)
Noelle:     Loop "  %91 = icmp sgt i64 %88, %indvars.iv" (3.147290e-04%)
Noelle:     Loop "  %105 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.870157e+01%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %30 = fdiv double %.0, %.02" (6.166148e-07%)
Noelle:     Loop "  %33 = icmp slt i64 %.01, %6" (6.166148e-07%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.870156e+01%)
Noelle:     Loop "  %19 = icmp slt i64 %.01.us, %6" (9.870154e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.760986e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.845354e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.634835e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.623044e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (9.020204e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.359609e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.908421e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.670742e-01%)
Noelle:     Loop "  %229 = icmp sgt i64 %spec.select, %indvars.iv" (5.351844e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.537485e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.128788e-01%)
Noelle:     Loop "  %35 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (0.000000e+00%)
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv18" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (9.078362e-01%)
Noelle:     Loop "  %74 = icmp sgt i64 %spec.select, %indvars.iv16" (9.051925e-01%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select, %indvars.iv14" (1.384813e-03%)
Noelle:     Loop "  %108 = icmp slt i64 %indvars.iv, %105" (1.075714e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (7.342576e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (7.254468e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.481630e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.440715e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.171487e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (3.147290e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.412945e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.461821e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.943039e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.664122e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.746913e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (5.247565e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (5.176875e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.991032e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv12, %4" (2.800412e-04%)
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv10, %5" (2.089593e-05%)
Noelle:     Loop "  %65 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %62, align 8, !tbaa !47" (4.940955e+01%)
Noelle:     Loop "  %89 = icmp sgt i64 %67, %indvars.iv" (2.178111e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.874457e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %24 = icmp slt i64 %.04, %spec.select" (5.259826e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv42, %9" (4.937692e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.715731e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.771073e-01%)
Noelle:     Loop "  %78 = icmp slt i64 %77, %1" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp slt i64 %67, %1" (5.556459e-01%)
Noelle:     Loop "  %91 = icmp sgt i64 %88, %indvars.iv" (3.111563e-04%)
Noelle:     Loop "  %105 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.758068e+01%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %30 = fdiv double %.0, %.02" (6.210098e-07%)
Noelle:     Loop "  %33 = icmp slt i64 %.01, %6" (6.210098e-07%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.758068e+01%)
Noelle:     Loop "  %19 = icmp slt i64 %.01.us, %6" (9.758066e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.684237e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.778999e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.570870e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.513806e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.917809e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.321472e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.818646e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.637433e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i, %226" (2.494833e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select, %indvars.iv" (5.291091e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.429218e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (1.347672e+00%)
Noelle:     Loop "  %35 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (0.000000e+00%)
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv18" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.964728e-01%)
Noelle:     Loop "  %74 = icmp sgt i64 %spec.select, %indvars.iv16" (8.938591e-01%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv.i, %82" (8.822986e-01%)
Noelle:     Loop "  %103 = icmp sgt i64 %spec.select, %indvars.iv14" (1.369093e-03%)
Noelle:     Loop "  %122 = icmp slt i64 %indvars.iv, %119" (1.063503e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (7.259225e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (7.172117e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.430756e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.390306e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.146837e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (3.111563e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.362850e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.422524e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.909630e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.633879e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.715731e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (5.187996e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (5.118108e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.968430e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint:       There are 45 different instructions and 79 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.VoNJfbgnnE -o /tmp/tmp.VoNJfbgnnE
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.VoNJfbgnnE -o /tmp/tmp.VoNJfbgnnE
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
Inliner: Start
Inliner:   Number of program instructions = 1710
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 15
DOALL:     	  %219 = load float, float* %218, align 8, !tbaa !54
DOALL:     	  %223 = load float*, float** %222, align 8
DOALL:     	  %225 = load float*, float** %224, align 8
DOALL:     	  %.0.i = phi float [ %236, %229 ], [ 0.000000e+00, %217 ]
DOALL:     	  %230 = getelementptr inbounds float, float* %223, i64 %indvars.iv.i
DOALL:     	  %231 = load float, float* %230, align 4, !tbaa !66
DOALL:     	  %232 = getelementptr inbounds float, float* %225, i64 %indvars.iv.i
DOALL:     	  %233 = load float, float* %232, align 4, !tbaa !66
DOALL:     	  %234 = fsub float %231, %233
DOALL:     	  %235 = fmul float %234, %234
DOALL:     	  %236 = fadd float %.0.i, %235
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %227 ]
DOALL:     	  %237 = fmul float %219, %.0.i.lcssa
DOALL:     	  store float %237, float* %238, align 8, !tbaa !57
DOALL:     	  store i64 %0, i64* %205, align 8, !tbaa !59
DOALL:     External nodes: 9
DOALL:     	  br i1 %brmerge, label %217, label %.._crit_edge59_crit_edge, !prof !64
DOALL:     	  %218 = getelementptr inbounds %struct.Point, %struct.Point* %204, i64 0, i32 0
DOALL:     	  %222 = getelementptr inbounds %struct.Point, %struct.Point* %204, i64 0, i32 1
DOALL:     	  %224 = getelementptr inbounds %struct.Point, %struct.Point* %220, i64 0, i32 1
DOALL:     	  br i1 %228, label %229, label %_Z4distRK5PointS1_i.exit, !prof !65
DOALL:     	  %205 = getelementptr inbounds %struct.Point, %struct.Point* %203, i64 %indvars.iv32, i32 2
DOALL:     	  %206 = load i64, i64* %205, align 8, !tbaa !59
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %229 ], [ 0, %217 ]
DOALL:     	  %238 = getelementptr inbounds %struct.Point, %struct.Point* %203, i64 %indvars.iv32, i32 3
DOALL:     Edges: 51
DOALL:     Loop-carried data dependences
DOALL:         %219 = load float, float* %218, align 8, !tbaa !54 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %219 = load float, float* %218, align 8, !tbaa !54 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %223 = load float*, float** %222, align 8 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %223 = load float*, float** %222, align 8 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %225 = load float*, float** %224, align 8 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %225 = load float*, float** %224, align 8 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %225 = load float*, float** %224, align 8 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %219 = load float, float* %218, align 8, !tbaa !54 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %223 = load float*, float** %222, align 8 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %225 = load float*, float** %224, align 8 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %219 = load float, float* %218, align 8, !tbaa !54 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %223 = load float*, float** %222, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 10
Inliner:   Inlining in: _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t (57 instructions. The inlining will add 18 instructions),   tail call void @_Z10intshufflePii(i32* %1, i32 %2)
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %59 = tail call i64 @lrand48() #3
DOALL:     External nodes: 2
DOALL:     	  br i1 %57, label %58, label %.loopexit7.loopexit, !prof !49
DOALL:     	  %60 = sitofp i64 %59 to float
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %59 = tail call i64 @lrand48() #3 --->   %59 = tail call i64 @lrand48() #3 via memory
DOALL:         %59 = tail call i64 @lrand48() #3 --->   %59 = tail call i64 @lrand48() #3 via memory
DOALL:         %59 = tail call i64 @lrand48() #3 --->   %59 = tail call i64 @lrand48() #3 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %70 = load i64, i64* %2, align 8, !tbaa !47
DOALL:     	  %71 = add nsw i64 %70, 1
DOALL:     	  store i64 %71, i64* %2, align 8, !tbaa !47
DOALL:     External nodes: 1
DOALL:     	  br i1 %68, label %69, label %.._crit_edge26_crit_edge, !prof !50
DOALL:     Edges: 8
DOALL:     Loop-carried data dependences
DOALL:         store i64 %71, i64* %2, align 8, !tbaa !47 --->   store i64 %71, i64* %2, align 8, !tbaa !47 via memory
DOALL:         store i64 %71, i64* %2, align 8, !tbaa !47 --->   %70 = load i64, i64* %2, align 8, !tbaa !47 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %101 = add nsw i32 %63, 1
DOALL:     	  %storemerge = phi i32 [ 1, %._crit_edge ], [ %101, %._crit_edge26 ]
DOALL:     	  %54 = phi i32 [ 1, %._crit_edge ], [ %101, %._crit_edge26 ]
DOALL:     	  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     	  %55 = sext i32 %54 to i64
DOALL:     	  %56 = load i64, i64* %6, align 8, !tbaa !30
DOALL:     	  %57 = icmp sgt i64 %56, %55
DOALL:     	  br i1 %57, label %58, label %.loopexit7.loopexit, !prof !49
DOALL:     	  %63 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     External nodes: 11
DOALL:     	  br label %53
DOALL:     	  %59 = tail call i64 @lrand48() #3
DOALL:     	  %60 = sitofp i64 %59 to float
DOALL:     	  %61 = fmul float %60, 0x3E00000000000000
DOALL:     	  %62 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %64 = sext i32 %63 to i64
DOALL:     	  %65 = getelementptr inbounds %struct.Point, %struct.Point* %62, i64 %64, i32 3
DOALL:     	  %66 = load float, float* %65, align 8, !tbaa !45
DOALL:     	  %67 = fdiv float %66, %1
DOALL:     	  %68 = fcmp olt float %61, %67
DOALL:     	  br i1 %68, label %69, label %.._crit_edge26_crit_edge, !prof !50
DOALL:     Edges: 31
DOALL:     Loop-carried data dependences
DOALL:         %101 = add nsw i32 %63, 1 --->   %54 = phi i32 [ 1, %._crit_edge ], [ %101, %._crit_edge26 ] via variable
DOALL:         %101 = add nsw i32 %63, 1 --->   %storemerge = phi i32 [ 1, %._crit_edge ], [ %101, %._crit_edge26 ] via variable
DOALL:         store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 --->   store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 39
DOALL:     	  %91 = fmul float %90, %90
DOALL:     	  %92 = fadd float %.0.i, %91
DOALL:     	  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %83 ]
DOALL:     	  %93 = getelementptr inbounds %struct.Point, %struct.Point* %62, i64 %indvars.iv16, i32 0
DOALL:     	  %94 = load float, float* %93, align 8, !tbaa !42
DOALL:     	  %95 = fmul float %.0.i.lcssa, %94
DOALL:     	  %96 = getelementptr inbounds %struct.Point, %struct.Point* %62, i64 %indvars.iv16, i32 3
DOALL:     	  %97 = load float, float* %96, align 8, !tbaa !45
DOALL:     	  %98 = fcmp olt float %95, %97
DOALL:     	  br i1 %98, label %99, label %.._crit_edge27_crit_edge, !prof !54
DOALL:     	  store float %95, float* %96, align 8, !tbaa !45
DOALL:     	  %100 = getelementptr inbounds %struct.Point, %struct.Point* %62, i64 %indvars.iv16, i32 2
DOALL:     	  store i64 %64, i64* %100, align 8, !tbaa !46
DOALL:     	  %indvars.iv.next17 = add i64 %indvars.iv16, 1
DOALL:     	  %66 = load float, float* %65, align 8, !tbaa !45
DOALL:     	  %67 = fdiv float %66, %1
DOALL:     	  %68 = fcmp olt float %61, %67
DOALL:     	  br i1 %68, label %69, label %.._crit_edge26_crit_edge, !prof !50
DOALL:     	  %72 = getelementptr inbounds %struct.Point, %struct.Point* %62, i64 %64
DOALL:     	  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge27 ], [ %18, %69 ]
DOALL:     	  %74 = icmp sgt i64 %spec.select, %indvars.iv16
DOALL:     	  br i1 %74, label %75, label %._crit_edge26.loopexit, !prof !51
DOALL:     	  %76 = getelementptr inbounds %struct.Point, %struct.Point* %62, i64 %indvars.iv16
DOALL:     	  %77 = load i32, i32* %17, align 8, !tbaa !41
DOALL:     	  %78 = getelementptr inbounds %struct.Point, %struct.Point* %72, i64 0, i32 1
DOALL:     	  %79 = load float*, float** %78, align 8
DOALL:     	  %80 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 0, i32 1
DOALL:     	  %81 = load float*, float** %80, align 8
DOALL:     	  %82 = sext i32 %77 to i64
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %85 ], [ 0, %75 ]
DOALL:     	  %.0.i = phi float [ %92, %85 ], [ 0.000000e+00, %75 ]
DOALL:     	  %84 = icmp slt i64 %indvars.iv.i, %82
DOALL:     	  br i1 %84, label %85, label %_Z4distRK5PointS1_i.exit, !prof !52
DOALL:     	  %86 = getelementptr inbounds float, float* %79, i64 %indvars.iv.i
DOALL:     	  %87 = load float, float* %86, align 4, !tbaa !53
DOALL:     	  %88 = getelementptr inbounds float, float* %81, i64 %indvars.iv.i
DOALL:     	  %89 = load float, float* %88, align 4, !tbaa !53
DOALL:     	  %90 = fsub float %87, %89
DOALL:     External nodes: 16
DOALL:     	  br label %83
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %73
DOALL:     	  br label %._crit_edge26
DOALL:     	  br i1 %57, label %58, label %.loopexit7.loopexit, !prof !49
DOALL:     	  %61 = fmul float %60, 0x3E00000000000000
DOALL:     	  %62 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %64 = sext i32 %63 to i64
DOALL:     	  %65 = getelementptr inbounds %struct.Point, %struct.Point* %62, i64 %64, i32 3
DOALL:     	  br label %._crit_edge26
DOALL:     	  %70 = load i64, i64* %2, align 8, !tbaa !47
DOALL:     	  %71 = add nsw i64 %70, 1
DOALL:     	  store i64 %71, i64* %2, align 8, !tbaa !47
DOALL:     	  br label %73
DOALL:     	  br label %83
DOALL:     Edges: 125
DOALL:     Loop-carried data dependences
DOALL:         %79 = load float*, float** %78, align 8 --->   store float %95, float* %96, align 8, !tbaa !45 via memory
DOALL:         %79 = load float*, float** %78, align 8 --->   store i64 %64, i64* %100, align 8, !tbaa !46 via memory
DOALL:         %81 = load float*, float** %80, align 8 --->   store float %95, float* %96, align 8, !tbaa !45 via memory
DOALL:         %81 = load float*, float** %80, align 8 --->   store i64 %64, i64* %100, align 8, !tbaa !46 via memory
DOALL:         %97 = load float, float* %96, align 8, !tbaa !45 --->   store float %95, float* %96, align 8, !tbaa !45 via memory
DOALL:         %66 = load float, float* %65, align 8, !tbaa !45 --->   store float %95, float* %96, align 8, !tbaa !45 via memory
DOALL:         store float %95, float* %96, align 8, !tbaa !45 --->   %79 = load float*, float** %78, align 8 via memory
DOALL:         store float %95, float* %96, align 8, !tbaa !45 --->   %66 = load float, float* %65, align 8, !tbaa !45 via memory
DOALL:         store float %95, float* %96, align 8, !tbaa !45 --->   %97 = load float, float* %96, align 8, !tbaa !45 via memory
DOALL:         store float %95, float* %96, align 8, !tbaa !45 --->   %81 = load float*, float** %80, align 8 via memory
DOALL:         store float %95, float* %96, align 8, !tbaa !45 --->   store float %95, float* %96, align 8, !tbaa !45 via memory
DOALL:         store i64 %64, i64* %100, align 8, !tbaa !46 --->   %81 = load float*, float** %80, align 8 via memory
DOALL:         store i64 %64, i64* %100, align 8, !tbaa !46 --->   store i64 %64, i64* %100, align 8, !tbaa !46 via memory
DOALL:         store i64 %64, i64* %100, align 8, !tbaa !46 --->   %79 = load float*, float** %78, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 14
DOALL:     	  %91 = fmul float %90, %90
DOALL:     	  %92 = fadd float %.0.i, %91
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %83 ]
DOALL:     	  %95 = fmul float %.0.i.lcssa, %94
DOALL:     	  %98 = fcmp olt float %95, %97
DOALL:     	  br i1 %98, label %99, label %.._crit_edge27_crit_edge, !prof !54
DOALL:     	  store float %95, float* %96, align 8, !tbaa !45
DOALL:     	  %100 = getelementptr inbounds %struct.Point, %struct.Point* %62, i64 %indvars.iv16, i32 2
DOALL:     	  store i64 %64, i64* %100, align 8, !tbaa !46
DOALL:     	  %79 = load float*, float** %78, align 8
DOALL:     	  %.0.i = phi float [ %92, %85 ], [ 0.000000e+00, %75 ]
DOALL:     	  %86 = getelementptr inbounds float, float* %79, i64 %indvars.iv.i
DOALL:     	  %87 = load float, float* %86, align 4, !tbaa !53
DOALL:     	  %90 = fsub float %87, %89
DOALL:     External nodes: 11
DOALL:     	  %94 = load float, float* %93, align 8, !tbaa !42
DOALL:     	  %96 = getelementptr inbounds %struct.Point, %struct.Point* %62, i64 %indvars.iv16, i32 3
DOALL:     	  %97 = load float, float* %96, align 8, !tbaa !45
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %._crit_edge27
DOALL:     	  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge27 ], [ %18, %69 ]
DOALL:     	  br i1 %74, label %75, label %._crit_edge26.loopexit, !prof !51
DOALL:     	  %78 = getelementptr inbounds %struct.Point, %struct.Point* %72, i64 0, i32 1
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %85 ], [ 0, %75 ]
DOALL:     	  br i1 %84, label %85, label %_Z4distRK5PointS1_i.exit, !prof !52
DOALL:     	  %89 = load float, float* %88, align 4, !tbaa !53
DOALL:     Edges: 43
DOALL:     Loop-carried data dependences
DOALL:         store float %95, float* %96, align 8, !tbaa !45 --->   %79 = load float*, float** %78, align 8 via memory
DOALL:         store i64 %64, i64* %100, align 8, !tbaa !46 --->   %79 = load float*, float** %78, align 8 via memory
DOALL:         %79 = load float*, float** %78, align 8 --->   store i64 %64, i64* %100, align 8, !tbaa !46 via memory
DOALL:         %79 = load float*, float** %78, align 8 --->   store float %95, float* %96, align 8, !tbaa !45 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: _Z7pspeedyP6PointsfPliP17pthread_barrier_t (178 instructions. The inlining will add 21 instructions),   %25 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %23, %struct.Point* dereferenceable(32) %22, i32 %24)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv12, %4" (2.800393e-04%)
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv10, %5" (2.089579e-05%)
Noelle:     Loop "  %65 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %62, align 8, !tbaa !47" (4.940955e+01%)
Noelle:     Loop "  %89 = icmp sgt i64 %67, %indvars.iv" (2.178096e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.874458e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %24 = icmp slt i64 %.04, %spec.select" (5.259790e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv42, %9" (4.937659e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.715712e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.772376e-01%)
Noelle:     Loop "  %78 = icmp slt i64 %77, %1" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp slt i64 %67, %1" (5.559066e-01%)
Noelle:     Loop "  %91 = icmp sgt i64 %88, %indvars.iv" (3.111542e-04%)
Noelle:     Loop "  %105 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.758017e+01%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %30 = fdiv double %.0, %.02" (6.172074e-07%)
Noelle:     Loop "  %33 = icmp slt i64 %.01, %6" (6.172074e-07%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.758016e+01%)
Noelle:     Loop "  %19 = icmp slt i64 %.01.us, %6" (9.758014e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.684191e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.778960e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.570832e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.513741e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.917749e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.321449e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.818593e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.638911e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i, %226" (2.494816e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select, %indvars.iv" (5.291055e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.429154e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (1.347663e+00%)
Noelle:     Loop "  %35 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (0.000000e+00%)
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv18" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.969956e-01%)
Noelle:     Loop "  %74 = icmp sgt i64 %spec.select, %indvars.iv16" (8.943819e-01%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv.i, %82" (8.822926e-01%)
Noelle:     Loop "  %103 = icmp sgt i64 %spec.select, %indvars.iv14" (1.369084e-03%)
Noelle:     Loop "  %122 = icmp slt i64 %indvars.iv, %119" (1.063496e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (7.259175e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (7.172069e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.430726e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.390276e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.146822e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (3.111542e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.362821e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.422500e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.909611e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.633861e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.715712e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (5.187960e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (5.118073e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.968417e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv12, %4" (2.794574e-04%)
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv10, %5" (2.085237e-05%)
Noelle:     Loop "  %65 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %62, align 8, !tbaa !47" (4.930669e+01%)
Noelle:     Loop "  %89 = icmp sgt i64 %67, %indvars.iv" (2.173570e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.853901e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %24 = icmp slt i64 %.04, %spec.select" (5.248860e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv42, %9" (4.927398e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.710069e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.765684e-01%)
Noelle:     Loop "  %78 = icmp slt i64 %77, %1" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp slt i64 %67, %1" (5.545650e-01%)
Noelle:     Loop "  %91 = icmp sgt i64 %88, %indvars.iv" (3.105076e-04%)
Noelle:     Loop "  %105 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.737739e+01%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %43 = fdiv double %.0, %.02" (6.159248e-07%)
Noelle:     Loop "  %46 = icmp slt i64 %.01, %6" (6.159248e-07%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.737739e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %18" (1.967169e-05%)
Noelle:     Loop "  %32 = icmp slt i64 %.01.us, %6" (9.737737e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.670301e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.766951e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.559255e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.493971e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.899217e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.314547e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.802345e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.633427e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i, %226" (2.489631e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select, %indvars.iv" (5.280060e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.409560e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.097751e-01%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv.i1, %29" (2.071669e-01%)
Noelle:     Loop "  %49 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (1.343000e+00%)
Noelle:     Loop "  %52 = icmp sgt i64 %spec.select, %indvars.iv18" (1.343000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.951316e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.925233e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv.i, %96" (8.804592e-01%)
Noelle:     Loop "  %117 = icmp sgt i64 %spec.select, %indvars.iv14" (1.366239e-03%)
Noelle:     Loop "  %136 = icmp slt i64 %indvars.iv, %133" (1.061286e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (7.244090e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (7.157164e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.421518e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.381152e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.142361e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (3.105076e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.353754e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.415388e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.903564e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.628388e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.710069e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (5.177179e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (5.107438e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.964326e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint:       There are 27 different instructions and 50 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.VoNJfbgnnE -o /tmp/tmp.VoNJfbgnnE
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.VoNJfbgnnE -o /tmp/tmp.VoNJfbgnnE
NOELLE: FixedPoint:     Invocation 2
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
Inliner: Start
Inliner:   Number of program instructions = 1745
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 15
DOALL:     	  %219 = load float, float* %218, align 8, !tbaa !54
DOALL:     	  %223 = load float*, float** %222, align 8
DOALL:     	  %225 = load float*, float** %224, align 8
DOALL:     	  %.0.i = phi float [ %236, %229 ], [ 0.000000e+00, %217 ]
DOALL:     	  %230 = getelementptr inbounds float, float* %223, i64 %indvars.iv.i
DOALL:     	  %231 = load float, float* %230, align 4, !tbaa !66
DOALL:     	  %232 = getelementptr inbounds float, float* %225, i64 %indvars.iv.i
DOALL:     	  %233 = load float, float* %232, align 4, !tbaa !66
DOALL:     	  %234 = fsub float %231, %233
DOALL:     	  %235 = fmul float %234, %234
DOALL:     	  %236 = fadd float %.0.i, %235
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %227 ]
DOALL:     	  %237 = fmul float %219, %.0.i.lcssa
DOALL:     	  store float %237, float* %238, align 8, !tbaa !57
DOALL:     	  store i64 %0, i64* %205, align 8, !tbaa !59
DOALL:     External nodes: 9
DOALL:     	  br i1 %brmerge, label %217, label %.._crit_edge59_crit_edge, !prof !64
DOALL:     	  %218 = getelementptr inbounds %struct.Point, %struct.Point* %204, i64 0, i32 0
DOALL:     	  %222 = getelementptr inbounds %struct.Point, %struct.Point* %204, i64 0, i32 1
DOALL:     	  %224 = getelementptr inbounds %struct.Point, %struct.Point* %220, i64 0, i32 1
DOALL:     	  br i1 %228, label %229, label %_Z4distRK5PointS1_i.exit, !prof !65
DOALL:     	  %205 = getelementptr inbounds %struct.Point, %struct.Point* %203, i64 %indvars.iv32, i32 2
DOALL:     	  %206 = load i64, i64* %205, align 8, !tbaa !59
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %229 ], [ 0, %217 ]
DOALL:     	  %238 = getelementptr inbounds %struct.Point, %struct.Point* %203, i64 %indvars.iv32, i32 3
DOALL:     Edges: 51
DOALL:     Loop-carried data dependences
DOALL:         %219 = load float, float* %218, align 8, !tbaa !54 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %219 = load float, float* %218, align 8, !tbaa !54 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %223 = load float*, float** %222, align 8 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %223 = load float*, float** %222, align 8 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %225 = load float*, float** %224, align 8 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %225 = load float*, float** %224, align 8 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %219 = load float, float* %218, align 8, !tbaa !54 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %225 = load float*, float** %224, align 8 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %223 = load float*, float** %222, align 8 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %219 = load float, float* %218, align 8, !tbaa !54 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %223 = load float*, float** %222, align 8 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %225 = load float*, float** %224, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 10
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t (73 instructions. The inlining will add 372 instructions),   %40 = tail call double @_Z5pgainlP6PointsdPliP17pthread_barrier_t(i64 %39, %struct.Points* %0, double %14, i64* %4, i32 0, %union.pthread_barrier_t* %9)
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %73 = tail call i64 @lrand48() #3
DOALL:     External nodes: 2
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %74 = sitofp i64 %73 to float
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %115 = add nsw i32 %77, 1
DOALL:     	  %storemerge = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ]
DOALL:     	  %68 = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ]
DOALL:     	  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     	  %69 = sext i32 %68 to i64
DOALL:     	  %70 = load i64, i64* %6, align 8, !tbaa !30
DOALL:     	  %71 = icmp sgt i64 %70, %69
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %77 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     External nodes: 11
DOALL:     	  br label %67
DOALL:     	  %73 = tail call i64 @lrand48() #3
DOALL:     	  %74 = sitofp i64 %73 to float
DOALL:     	  %75 = fmul float %74, 0x3E00000000000000
DOALL:     	  %76 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %78 = sext i32 %77 to i64
DOALL:     	  %79 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78, i32 3
DOALL:     	  %80 = load float, float* %79, align 8, !tbaa !47
DOALL:     	  %81 = fdiv float %80, %1
DOALL:     	  %82 = fcmp olt float %75, %81
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     Edges: 31
DOALL:     Loop-carried data dependences
DOALL:         %115 = add nsw i32 %77, 1 --->   %storemerge = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ] via variable
DOALL:         %115 = add nsw i32 %77, 1 --->   %68 = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ] via variable
DOALL:         store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 --->   store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %84 = load i64, i64* %2, align 8, !tbaa !49
DOALL:     	  %85 = add nsw i64 %84, 1
DOALL:     	  store i64 %85, i64* %2, align 8, !tbaa !49
DOALL:     External nodes: 1
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     Edges: 8
DOALL:     Loop-carried data dependences
DOALL:         store i64 %85, i64* %2, align 8, !tbaa !49 --->   store i64 %85, i64* %2, align 8, !tbaa !49 via memory
DOALL:         store i64 %85, i64* %2, align 8, !tbaa !49 --->   %84 = load i64, i64* %2, align 8, !tbaa !49 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 39
DOALL:     	  %91 = load i32, i32* %17, align 8, !tbaa !41
DOALL:     	  %92 = getelementptr inbounds %struct.Point, %struct.Point* %86, i64 0, i32 1
DOALL:     	  %93 = load float*, float** %92, align 8
DOALL:     	  %94 = getelementptr inbounds %struct.Point, %struct.Point* %90, i64 0, i32 1
DOALL:     	  %95 = load float*, float** %94, align 8
DOALL:     	  %96 = sext i32 %91 to i64
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %99 ], [ 0, %89 ]
DOALL:     	  %.0.i = phi float [ %106, %99 ], [ 0.000000e+00, %89 ]
DOALL:     	  %98 = icmp slt i64 %indvars.iv.i, %96
DOALL:     	  br i1 %98, label %99, label %_Z4distRK5PointS1_i.exit, !prof !42
DOALL:     	  %100 = getelementptr inbounds float, float* %93, i64 %indvars.iv.i
DOALL:     	  %101 = load float, float* %100, align 4, !tbaa !43
DOALL:     	  %102 = getelementptr inbounds float, float* %95, i64 %indvars.iv.i
DOALL:     	  %103 = load float, float* %102, align 4, !tbaa !43
DOALL:     	  %104 = fsub float %101, %103
DOALL:     	  %105 = fmul float %104, %104
DOALL:     	  %106 = fadd float %.0.i, %105
DOALL:     	  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %97 ]
DOALL:     	  %107 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 0
DOALL:     	  %108 = load float, float* %107, align 8, !tbaa !45
DOALL:     	  %109 = fmul float %.0.i.lcssa, %108
DOALL:     	  %110 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 3
DOALL:     	  %111 = load float, float* %110, align 8, !tbaa !47
DOALL:     	  %112 = fcmp olt float %109, %111
DOALL:     	  br i1 %112, label %113, label %.._crit_edge27_crit_edge, !prof !54
DOALL:     	  store float %109, float* %110, align 8, !tbaa !47
DOALL:     	  %114 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 2
DOALL:     	  store i64 %78, i64* %114, align 8, !tbaa !48
DOALL:     	  %indvars.iv.next17 = add i64 %indvars.iv16, 1
DOALL:     	  %80 = load float, float* %79, align 8, !tbaa !47
DOALL:     	  %81 = fdiv float %80, %1
DOALL:     	  %82 = fcmp olt float %75, %81
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     	  %86 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78
DOALL:     	  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge27 ], [ %18, %83 ]
DOALL:     	  %88 = icmp sgt i64 %spec.select, %indvars.iv16
DOALL:     	  br i1 %88, label %89, label %._crit_edge26.loopexit, !prof !53
DOALL:     	  %90 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16
DOALL:     External nodes: 16
DOALL:     	  br label %97
DOALL:     	  br label %97
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %87
DOALL:     	  br label %._crit_edge26
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %75 = fmul float %74, 0x3E00000000000000
DOALL:     	  %76 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %78 = sext i32 %77 to i64
DOALL:     	  %79 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78, i32 3
DOALL:     	  br label %._crit_edge26
DOALL:     	  %84 = load i64, i64* %2, align 8, !tbaa !49
DOALL:     	  %85 = add nsw i64 %84, 1
DOALL:     	  store i64 %85, i64* %2, align 8, !tbaa !49
DOALL:     	  br label %87
DOALL:     Edges: 125
DOALL:     Loop-carried data dependences
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %111 = load float, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %95 = load float*, float** %94, align 8 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %95 = load float*, float** %94, align 8 via memory
DOALL:         %80 = load float, float* %79, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         %95 = load float*, float** %94, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %95 = load float*, float** %94, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         %111 = load float, float* %110, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %80 = load float, float* %79, align 8, !tbaa !47 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 14
DOALL:     	  %93 = load float*, float** %92, align 8
DOALL:     	  %.0.i = phi float [ %106, %99 ], [ 0.000000e+00, %89 ]
DOALL:     	  %100 = getelementptr inbounds float, float* %93, i64 %indvars.iv.i
DOALL:     	  %101 = load float, float* %100, align 4, !tbaa !43
DOALL:     	  %104 = fsub float %101, %103
DOALL:     	  %105 = fmul float %104, %104
DOALL:     	  %106 = fadd float %.0.i, %105
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %97 ]
DOALL:     	  %109 = fmul float %.0.i.lcssa, %108
DOALL:     	  %112 = fcmp olt float %109, %111
DOALL:     	  br i1 %112, label %113, label %.._crit_edge27_crit_edge, !prof !54
DOALL:     	  store float %109, float* %110, align 8, !tbaa !47
DOALL:     	  %114 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 2
DOALL:     	  store i64 %78, i64* %114, align 8, !tbaa !48
DOALL:     External nodes: 11
DOALL:     	  %92 = getelementptr inbounds %struct.Point, %struct.Point* %86, i64 0, i32 1
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %99 ], [ 0, %89 ]
DOALL:     	  br i1 %98, label %99, label %_Z4distRK5PointS1_i.exit, !prof !42
DOALL:     	  %103 = load float, float* %102, align 4, !tbaa !43
DOALL:     	  %108 = load float, float* %107, align 8, !tbaa !45
DOALL:     	  %110 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 3
DOALL:     	  %111 = load float, float* %110, align 8, !tbaa !47
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %._crit_edge27
DOALL:     	  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge27 ], [ %18, %83 ]
DOALL:     	  br i1 %88, label %89, label %._crit_edge26.loopexit, !prof !53
DOALL:     Edges: 43
DOALL:     Loop-carried data dependences
DOALL:         %93 = load float*, float** %92, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %93 = load float*, float** %92, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 11
DOALL:     	  %26 = load float*, float** %25, align 8
DOALL:     	  %.0.i2 = phi float [ %39, %32 ], [ 0.000000e+00, %21 ]
DOALL:     	  %33 = getelementptr inbounds float, float* %26, i64 %indvars.iv.i1
DOALL:     	  %34 = load float, float* %33, align 4, !tbaa !43
DOALL:     	  %37 = fsub float %34, %36
DOALL:     	  %38 = fmul float %37, %37
DOALL:     	  %39 = fadd float %.0.i2, %38
DOALL:     	  %.0.i2.lcssa = phi float [ %.0.i2, %30 ]
DOALL:     	  %42 = fmul float %.0.i2.lcssa, %41
DOALL:     	  store float %42, float* %43, align 8, !tbaa !47
DOALL:     	  store i64 0, i64* %44, align 8, !tbaa !48
DOALL:     External nodes: 8
DOALL:     	  br i1 %20, label %21, label %45, !prof !39
DOALL:     	  %25 = getelementptr inbounds %struct.Point, %struct.Point* %23, i64 0, i32 1
DOALL:     	  %indvars.iv.i1 = phi i64 [ %indvars.iv.next.i3, %32 ], [ 0, %21 ]
DOALL:     	  br i1 %31, label %32, label %_Z4distRK5PointS1_i.exit4, !prof !42
DOALL:     	  %36 = load float, float* %35, align 4, !tbaa !43
DOALL:     	  %41 = load float, float* %40, align 8, !tbaa !45
DOALL:     	  %43 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 %indvars.iv20, i32 3
DOALL:     	  %44 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 %indvars.iv20, i32 2
DOALL:     Edges: 33
DOALL:     Loop-carried data dependences
DOALL:         %26 = load float*, float** %25, align 8 --->   store i64 0, i64* %44, align 8, !tbaa !48 via memory
DOALL:         %26 = load float*, float** %25, align 8 --->   store float %42, float* %43, align 8, !tbaa !47 via memory
DOALL:         store float %42, float* %43, align 8, !tbaa !47 --->   %26 = load float*, float** %25, align 8 via memory
DOALL:         store i64 0, i64* %44, align 8, !tbaa !48 --->   %26 = load float*, float** %25, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 8
DOALL:     	  %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57)
DOALL:     	  %61 = fmul float %58, %60
DOALL:     	  %63 = load float, float* %62, align 8, !tbaa !47
DOALL:     	  %64 = fcmp olt float %61, %63
DOALL:     	  br i1 %64, label %65, label %.._crit_edge25_crit_edge
DOALL:     	  store float %61, float* %62, align 8, !tbaa !47
DOALL:     	  %66 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18, i32 2
DOALL:     	  store i64 %50, i64* %66, align 8, !tbaa !48
DOALL:     External nodes: 11
DOALL:     	  %50 = sext i32 %49 to i64
DOALL:     	  %indvars.iv18 = phi i64 [ %indvars.iv.next19, %._crit_edge25 ], [ %18, %.preheader.preheader ]
DOALL:     	  br i1 %52, label %53, label %.loopexit.loopexit
DOALL:     	  %54 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %55 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %50
DOALL:     	  %56 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18
DOALL:     	  %57 = load i32, i32* %17, align 8, !tbaa !41
DOALL:     	  %60 = load float, float* %59, align 8, !tbaa !45
DOALL:     	  %62 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18, i32 3
DOALL:     	  br label %._crit_edge25
DOALL:     	  br label %._crit_edge25
DOALL:     Edges: 33
DOALL:     Loop-carried data dependences
DOALL:         %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) --->   store i64 %50, i64* %66, align 8, !tbaa !48 via memory
DOALL:         %63 = load float, float* %62, align 8, !tbaa !47 --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   %63 = load float, float* %62, align 8, !tbaa !47 via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         store i64 %50, i64* %66, align 8, !tbaa !48 --->   %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) via memory
DOALL:         store i64 %50, i64* %66, align 8, !tbaa !48 --->   store i64 %50, i64* %66, align 8, !tbaa !48 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv12, %4" (2.794570e-04%)
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv10, %5" (2.085234e-05%)
Noelle:     Loop "  %65 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %62, align 8, !tbaa !47" (4.930669e+01%)
Noelle:     Loop "  %89 = icmp sgt i64 %67, %indvars.iv" (2.173567e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.853901e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %24 = icmp slt i64 %.04, %spec.select" (5.248853e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv42, %9" (4.927392e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.710066e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.765991e-01%)
Noelle:     Loop "  %78 = icmp slt i64 %77, %1" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp slt i64 %67, %1" (5.546265e-01%)
Noelle:     Loop "  %91 = icmp sgt i64 %88, %indvars.iv" (3.105072e-04%)
Noelle:     Loop "  %105 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.737727e+01%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %43 = fdiv double %.0, %.02" (6.159240e-07%)
Noelle:     Loop "  %46 = icmp slt i64 %.01, %6" (6.159240e-07%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.737727e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %18" (1.967167e-05%)
Noelle:     Loop "  %32 = icmp slt i64 %.01.us, %6" (9.737725e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.670293e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.766944e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.559249e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.493959e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.899206e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.314543e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.802336e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.633424e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i, %226" (2.489628e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select, %indvars.iv" (5.280053e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.409548e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.098990e-01%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv.i1, %29" (2.071666e-01%)
Noelle:     Loop "  %49 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (1.342998e+00%)
Noelle:     Loop "  %52 = icmp sgt i64 %spec.select, %indvars.iv18" (1.342998e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.951305e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.925222e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv.i, %96" (8.804581e-01%)
Noelle:     Loop "  %117 = icmp sgt i64 %spec.select, %indvars.iv14" (1.366237e-03%)
Noelle:     Loop "  %136 = icmp slt i64 %indvars.iv, %133" (1.061284e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (7.244081e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (7.157156e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.421513e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.381147e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.142358e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (3.105072e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.353749e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.415384e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.903561e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.628385e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.710066e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (5.177173e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (5.107431e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.964324e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv12, %4" (2.681280e-04%)
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv10, %5" (2.000700e-05%)
Noelle:     Loop "  %65 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %62, align 8, !tbaa !47" (4.730769e+01%)
Noelle:     Loop "  %89 = icmp sgt i64 %67, %indvars.iv" (2.085452e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.454402e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %24 = icmp slt i64 %.04, %spec.select" (5.036068e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv42, %9" (4.727639e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.600201e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.653859e-01%)
Noelle:     Loop "  %78 = icmp slt i64 %77, %1" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp slt i64 %67, %1" (5.321422e-01%)
Noelle:     Loop "  %91 = icmp sgt i64 %88, %indvars.iv" (2.979194e-04%)
Noelle:     Loop "  %105 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.342938e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.399883e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.533155e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.333880e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.109080e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.538437e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.180173e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.486034e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.526667e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i, %226" (2.388700e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select, %indvars.iv" (5.066003e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %286 = fdiv double %.0, %.02" (9.342960e+01%)
Noelle:     Loop "  %289 = icmp slt i64 %.01, %6" (9.342960e+01%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.337605e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %18" (1.887419e-05%)
Noelle:     Loop "  %32 = icmp slt i64 %.01.us, %6" (9.337603e+01%)
Noelle:     Loop "  %65 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.399883e-01%)
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv42.i, %77" (5.533155e-05%)
Noelle:     Loop "  %91 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.333880e-01%)
Noelle:     Loop "  %119 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.109079e+01%)
Noelle:     Loop "  %160 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.538250e-01%)
Noelle:     Loop "  %170 = icmp slt i32 %.03.i, %115" (3.180173e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %indvars.iv34.i, %196" (7.486034e-05%)
Noelle:     Loop "  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.525235e-01%)
Noelle:     Loop "  %243 = icmp slt i64 %indvars.iv.i.i, %241" (2.388700e-01%)
Noelle:     Loop "  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.066003e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.028091e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.013899e-01%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv.i1, %29" (1.987682e-01%)
Noelle:     Loop "  %49 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.354213e+10%)
Noelle:     Loop "  %52 = icmp sgt i64 %spec.select, %indvars.iv18" (3.354213e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.588425e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.563399e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv.i, %96" (8.447648e-01%)
Noelle:     Loop "  %117 = icmp sgt i64 %spec.select, %indvars.iv14" (1.310851e-03%)
Noelle:     Loop "  %136 = icmp slt i64 %indvars.iv, %133" (1.018261e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.950411e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.867009e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.242267e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.203538e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.055508e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.979194e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.177251e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.276926e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.785852e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.521832e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.600201e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.967293e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.900379e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.884691e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint:       There are 261 different instructions and 714 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.VoNJfbgnnE -o /tmp/tmp.VoNJfbgnnE
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.VoNJfbgnnE -o /tmp/tmp.VoNJfbgnnE
NOELLE: FixedPoint:     Invocation 3
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
Inliner: Start
Inliner:   Number of program instructions = 2079
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 15
DOALL:     	  %219 = load float, float* %218, align 8, !tbaa !54
DOALL:     	  %223 = load float*, float** %222, align 8
DOALL:     	  %225 = load float*, float** %224, align 8
DOALL:     	  %.0.i = phi float [ %236, %229 ], [ 0.000000e+00, %217 ]
DOALL:     	  %230 = getelementptr inbounds float, float* %223, i64 %indvars.iv.i
DOALL:     	  %231 = load float, float* %230, align 4, !tbaa !66
DOALL:     	  %232 = getelementptr inbounds float, float* %225, i64 %indvars.iv.i
DOALL:     	  %233 = load float, float* %232, align 4, !tbaa !66
DOALL:     	  %234 = fsub float %231, %233
DOALL:     	  %235 = fmul float %234, %234
DOALL:     	  %236 = fadd float %.0.i, %235
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %227 ]
DOALL:     	  %237 = fmul float %219, %.0.i.lcssa
DOALL:     	  store float %237, float* %238, align 8, !tbaa !57
DOALL:     	  store i64 %0, i64* %205, align 8, !tbaa !59
DOALL:     External nodes: 9
DOALL:     	  br i1 %brmerge, label %217, label %.._crit_edge59_crit_edge, !prof !64
DOALL:     	  %218 = getelementptr inbounds %struct.Point, %struct.Point* %204, i64 0, i32 0
DOALL:     	  %222 = getelementptr inbounds %struct.Point, %struct.Point* %204, i64 0, i32 1
DOALL:     	  %224 = getelementptr inbounds %struct.Point, %struct.Point* %220, i64 0, i32 1
DOALL:     	  br i1 %228, label %229, label %_Z4distRK5PointS1_i.exit, !prof !65
DOALL:     	  %205 = getelementptr inbounds %struct.Point, %struct.Point* %203, i64 %indvars.iv32, i32 2
DOALL:     	  %206 = load i64, i64* %205, align 8, !tbaa !59
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %229 ], [ 0, %217 ]
DOALL:     	  %238 = getelementptr inbounds %struct.Point, %struct.Point* %203, i64 %indvars.iv32, i32 3
DOALL:     Edges: 51
DOALL:     Loop-carried data dependences
DOALL:         %219 = load float, float* %218, align 8, !tbaa !54 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %219 = load float, float* %218, align 8, !tbaa !54 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %223 = load float*, float** %222, align 8 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %223 = load float*, float** %222, align 8 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %225 = load float*, float** %224, align 8 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %225 = load float*, float** %224, align 8 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %225 = load float*, float** %224, align 8 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %219 = load float, float* %218, align 8, !tbaa !54 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %223 = load float*, float** %222, align 8 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %225 = load float*, float** %224, align 8 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %219 = load float, float* %218, align 8, !tbaa !54 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %223 = load float*, float** %222, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 9
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 5
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  %.pre7.i = load double, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     External nodes: 6
DOALL:     	  br i1 %32, label %35, label %33, !prof !37
DOALL:     	  %60 = tail call noalias i8* @malloc(i64 %59) #3
DOALL:     	  br i1 %200, label %201, label %.loopexit.loopexit.i, !prof !53
DOALL:     	  %212 = fadd double %199, %211
DOALL:     	  br i1 %213, label %.preheader.i, label %281, !prof !66
DOALL:     	  %283 = fsub double -0.000000e+00, %.pre7.i
DOALL:     Edges: 24
DOALL:     Loop-carried data dependences
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %.pre7.i = load double, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 288
DOALL:     	  %38 = load i32, i32* %37, align 4, !tbaa !33
DOALL:     	  %39 = sext i32 %38 to i64
DOALL:     	  %41 = load i64, i64* %40, align 8, !tbaa !38
DOALL:     	  %42 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %43 = sext i32 %42 to i64
DOALL:     	  %44 = sdiv i64 %41, %43
DOALL:     	  %45 = add nsw i32 %42, -1
DOALL:     	  %46 = icmp eq i32 %45, 0
DOALL:     	  %spec.select.i = select i1 %46, i64 %41, i64 %44, !prof !42
DOALL:     	  %47 = load i64, i64* %4, align 8, !tbaa !43
DOALL:     	  %48 = trunc i64 %47 to i32
DOALL:     	  %49 = add i32 %48, 2
DOALL:     	  %50 = and i32 %49, 3
DOALL:     	  %51 = icmp eq i32 %50, 0
DOALL:     	  br i1 %51, label %.._crit_edge52_crit_edge.i, label %52, !prof !44
DOALL:     	  %53 = sdiv i32 %49, 4
DOALL:     	  %54 = shl nsw i32 %53, 2
DOALL:     	  %55 = add i32 %54, 4
DOALL:     	  %.010.i = phi i32 [ %55, %52 ], [ %49, %.._crit_edge52_crit_edge.i ]
DOALL:     	  %56 = add nsw i32 %42, 1
DOALL:     	  %57 = mul nsw i32 %.010.i, %56
DOALL:     	  %58 = sext i32 %57 to i64
DOALL:     	  %59 = shl nsw i64 %58, 3
DOALL:     	  %60 = tail call noalias i8* @malloc(i64 %59) #3
DOALL:     	  store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45
DOALL:     	  store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %61 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %62 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv44.i = phi i64 [ %indvars.iv.next45.i, %._crit_edge54.i ], [ 0, %._crit_edge52.i ]
DOALL:     	  %.016.i = phi i32 [ %.117.i, %._crit_edge54.i ], [ 0, %._crit_edge52.i ]
DOALL:     	  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i
DOALL:     	  br i1 %64, label %65, label %72, !prof !48
DOALL:     	  %66 = getelementptr inbounds i8, i8* %61, i64 %indvars.iv44.i
DOALL:     	  %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51
DOALL:     	  %68 = icmp eq i8 %67, 0
DOALL:     	  br i1 %68, label %.._crit_edge54_crit_edge.i, label %69, !prof !52
DOALL:     	  %70 = add nsw i32 %.016.i, 1
DOALL:     	  %71 = getelementptr inbounds i32, i32* %62, i64 %indvars.iv44.i
DOALL:     	  store i32 %.016.i, i32* %71, align 4, !tbaa !33
DOALL:     	  %.117.i = phi i32 [ %70, %69 ], [ %.016.i, %.._crit_edge54_crit_edge.i ]
DOALL:     	  %indvars.iv.next45.i = add nuw i64 %indvars.iv44.i, 1
DOALL:     	  %.016.i.lcssa = phi i32 [ %.016.i, %63 ]
DOALL:     	  %73 = sitofp i32 %.016.i.lcssa to double
DOALL:     	  %74 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  store double %73, double* %74, align 8, !tbaa !46
DOALL:     	  %75 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %76 = sext i32 %75 to i64
DOALL:     	  %77 = sext i32 %.010.i to i64
DOALL:     	  %indvars.iv42.i = phi i64 [ %indvars.iv.next43.i, %80 ], [ 0, %72 ]
DOALL:     	  %.012.i = phi i32 [ %86, %80 ], [ 0, %72 ]
DOALL:     	  %79 = icmp slt i64 %indvars.iv42.i, %76
DOALL:     	  br i1 %79, label %80, label %._crit_edge55.loopexit.i, !prof !53
DOALL:     	  %81 = mul nsw i64 %indvars.iv42.i, %77
DOALL:     	  %82 = getelementptr inbounds double, double* %74, i64 %81
DOALL:     	  %83 = load double, double* %82, align 8, !tbaa !46
DOALL:     	  %84 = fptosi double %83 to i32
DOALL:     	  %85 = sitofp i32 %.012.i to double
DOALL:     	  store double %85, double* %82, align 8, !tbaa !46
DOALL:     	  %86 = add nsw i32 %.012.i, %84
DOALL:     	  %indvars.iv.next43.i = add nuw nsw i64 %indvars.iv42.i, 1
DOALL:     	  %87 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %88 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv40.i = phi i64 [ %indvars.iv.next41.i, %._crit_edge56.i ], [ 0, %._crit_edge55.loopexit.i ]
DOALL:     	  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i
DOALL:     	  br i1 %90, label %91, label %101, !prof !48
DOALL:     	  %92 = getelementptr inbounds i8, i8* %87, i64 %indvars.iv40.i
DOALL:     	  %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51
DOALL:     	  %94 = icmp eq i8 %93, 0
DOALL:     	  br i1 %94, label %.._crit_edge56_crit_edge.i, label %95, !prof !52
DOALL:     	  %96 = load double, double* %74, align 8, !tbaa !46
DOALL:     	  %97 = fptosi double %96 to i32
DOALL:     	  %98 = getelementptr inbounds i32, i32* %88, i64 %indvars.iv40.i
DOALL:     	  %99 = load i32, i32* %98, align 4, !tbaa !33
DOALL:     	  %100 = add nsw i32 %99, %97
DOALL:     	  store i32 %100, i32* %98, align 4, !tbaa !33
DOALL:     	  %indvars.iv.next41.i = add nuw i64 %indvars.iv40.i, 1
DOALL:     	  %102 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54
DOALL:     	  %103 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %104 = bitcast double* %103 to i8*
DOALL:     	  %105 = sext i32 %.010.i to i64
DOALL:     	  %106 = shl nsw i64 %105, 3
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55
DOALL:     	  %107 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %108 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %109 = mul nsw i32 %108, %.010.i
DOALL:     	  %110 = sext i32 %109 to i64
DOALL:     	  %111 = getelementptr inbounds double, double* %107, i64 %110
DOALL:     	  %112 = bitcast double* %111 to i8*
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55
DOALL:     	  %113 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %114 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %indvars.iv38.i = phi i64 [ %indvars.iv.next39.i, %150 ], [ 0, %101 ]
DOALL:     	  %.013.i = phi double [ %.114.i, %150 ], [ 0.000000e+00, %101 ]
DOALL:     	  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i
DOALL:     	  br i1 %118, label %119, label %151, !prof !48
DOALL:     	  %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56
DOALL:     	  %121 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i
DOALL:     	  %122 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %39
DOALL:     	  %123 = load i32, i32* %116, align 8, !tbaa !57
DOALL:     	  %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3
DOALL:     	  %125 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 0
DOALL:     	  %126 = load float, float* %125, align 8, !tbaa !58
DOALL:     	  %127 = fmul float %124, %126
DOALL:     	  %128 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 3
DOALL:     	  %129 = load float, float* %128, align 8, !tbaa !61
DOALL:     	  %130 = fcmp olt float %127, %129
DOALL:     	  br i1 %130, label %131, label %137, !prof !62
DOALL:     	  %132 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  %133 = getelementptr inbounds i8, i8* %132, i64 %indvars.iv38.i
DOALL:     	  store i8 1, i8* %133, align 1, !tbaa !49
DOALL:     	  %134 = fsub float %127, %129
DOALL:     	  %135 = fpext float %134 to double
DOALL:     	  %136 = fadd double %.013.i, %135
DOALL:     	  %138 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 2
DOALL:     	  %139 = load i64, i64* %138, align 8, !tbaa !63
DOALL:     	  %140 = fsub float %129, %127
DOALL:     	  %141 = fpext float %140 to double
DOALL:     	  %142 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45
DOALL:     	  %sext.i = shl i64 %139, 32
DOALL:     	  %143 = ashr exact i64 %sext.i, 32
DOALL:     	  %144 = getelementptr inbounds i32, i32* %142, i64 %143
DOALL:     	  %145 = load i32, i32* %144, align 4, !tbaa !33
DOALL:     	  %146 = sext i32 %145 to i64
DOALL:     	  %147 = getelementptr inbounds double, double* %113, i64 %146
DOALL:     	  %148 = load double, double* %147, align 8, !tbaa !46
DOALL:     	  %149 = fadd double %148, %141
DOALL:     	  store double %149, double* %147, align 8, !tbaa !46
DOALL:     	  %.114.i = phi double [ %136, %131 ], [ %.013.i, %137 ]
DOALL:     	  %indvars.iv.next39.i = add nuw i64 %indvars.iv38.i, 1
DOALL:     	  %.013.i.lcssa = phi double [ %.013.i, %117 ]
DOALL:     	  %152 = bitcast double* %113 to i8*
DOALL:     	  %153 = mul nsw i32 %114, %.010.i
DOALL:     	  %154 = sext i32 %153 to i64
DOALL:     	  %155 = getelementptr inbounds double, double* %113, i64 %154
DOALL:     	  %156 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %158 = phi i8* [ %187, %._crit_edge58.i ], [ %152, %151 ]
DOALL:     	  %indvars.iv36.i = phi i64 [ %indvars.iv.next37.i, %._crit_edge58.i ], [ 0, %151 ]
DOALL:     	  %.215.i = phi double [ %.4.i, %._crit_edge58.i ], [ %.013.i.lcssa, %151 ]
DOALL:     	  %.09.i = phi i32 [ %.2.i, %._crit_edge58.i ], [ 0, %151 ]
DOALL:     	  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i
DOALL:     	  br i1 %159, label %160, label %188, !prof !48
DOALL:     	  %161 = getelementptr inbounds i8, i8* %156, i64 %indvars.iv36.i
DOALL:     	  %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51
DOALL:     	  %163 = icmp eq i8 %162, 0
DOALL:     	  br i1 %163, label %.._crit_edge58_crit_edge.i, label %164, !prof !52
DOALL:     	  %165 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8
DOALL:     	  %166 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %167 = getelementptr inbounds i32, i32* %166, i64 %indvars.iv36.i
DOALL:     	  %.04.i = phi double [ %14, %164 ], [ %177, %170 ]
DOALL:     	  %.03.i = phi i32 [ 0, %164 ], [ %178, %170 ]
DOALL:     	  %169 = icmp slt i32 %.03.i, %114
DOALL:     	  br i1 %169, label %170, label %179, !prof !64
DOALL:     	  %171 = load i32, i32* %167, align 4, !tbaa !33
DOALL:     	  %172 = mul nsw i32 %.03.i, %.010.i
DOALL:     	  %173 = add nsw i32 %171, %172
DOALL:     	  %174 = sext i32 %173 to i64
DOALL:     	  %175 = getelementptr inbounds double, double* %165, i64 %174
DOALL:     	  %176 = load double, double* %175, align 8, !tbaa !46
DOALL:     	  %177 = fadd double %.04.i, %176
DOALL:     	  %178 = add nuw nsw i32 %.03.i, 1
DOALL:     	  %.04.i.lcssa = phi double [ %.04.i, %168 ]
DOALL:     	  %180 = bitcast double* %165 to i8*
DOALL:     	  %181 = load i32, i32* %167, align 4, !tbaa !33
DOALL:     	  %182 = sext i32 %181 to i64
DOALL:     	  %183 = getelementptr inbounds double, double* %155, i64 %182
DOALL:     	  store double %.04.i.lcssa, double* %183, align 8, !tbaa !46
DOALL:     	  %184 = fcmp ogt double %.04.i.lcssa, 0.000000e+00
DOALL:     	  %185 = fsub double %.215.i, %.04.i.lcssa
DOALL:     	  %.3.i = select i1 %184, double %185, double %.215.i, !prof !65
DOALL:     	  %186 = zext i1 %184 to i32
DOALL:     	  %.1.i = add nsw i32 %.09.i, %186
DOALL:     	  %187 = phi i8* [ %180, %179 ], [ %158, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %.4.i = phi double [ %.3.i, %179 ], [ %.215.i, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %.2.i = phi i32 [ %.1.i, %179 ], [ %.09.i, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %indvars.iv.next37.i = add nuw i64 %indvars.iv36.i, 1
DOALL:     	  %.lcssa = phi i8* [ %158, %157 ]
DOALL:     	  %.215.i.lcssa = phi double [ %.215.i, %157 ]
DOALL:     	  %.09.i.lcssa = phi i32 [ %.09.i, %157 ]
DOALL:     	  %189 = add nsw i32 %.010.i, -2
DOALL:     	  %190 = sitofp i32 %.09.i.lcssa to double
DOALL:     	  %191 = sext i32 %189 to i64
DOALL:     	  %192 = getelementptr inbounds double, double* %113, i64 %191
DOALL:     	  store double %190, double* %192, align 8, !tbaa !46
DOALL:     	  %193 = add nsw i32 %189, 1
DOALL:     	  %194 = sext i32 %193 to i64
DOALL:     	  %195 = getelementptr inbounds double, double* %113, i64 %194
DOALL:     	  store double %.215.i.lcssa, double* %195, align 8, !tbaa !46
DOALL:     	  %196 = sext i32 %114 to i64
DOALL:     	  %197 = sext i32 %189 to i64
DOALL:     	  %indvars.iv34.i = phi i64 [ %indvars.iv.next35.i, %201 ], [ 0, %188 ]
DOALL:     	  %199 = phi double [ %212, %201 ], [ %14, %188 ]
DOALL:     	  %200 = icmp slt i64 %indvars.iv34.i, %196
DOALL:     	  br i1 %200, label %201, label %.loopexit.loopexit.i, !prof !53
DOALL:     	  %202 = mul nsw i64 %indvars.iv34.i, %105
DOALL:     	  %203 = add nsw i64 %202, %197
DOALL:     	  %204 = getelementptr inbounds double, double* %113, i64 %203
DOALL:     	  %205 = load double, double* %204, align 8, !tbaa !46
DOALL:     	  %206 = fptosi double %205 to i32
DOALL:     	  %207 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %208 = add nsw i32 %207, %206
DOALL:     	  store i32 %208, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %209 = add nsw i64 %203, 1
DOALL:     	  %210 = getelementptr inbounds double, double* %113, i64 %209
DOALL:     	  %211 = load double, double* %210, align 8, !tbaa !46
DOALL:     	  %212 = fadd double %199, %211
DOALL:     	  %indvars.iv.next35.i = add nuw nsw i64 %indvars.iv34.i, 1
DOALL:     	  %.lcssa1 = phi double [ %199, %198 ]
DOALL:     	  %213 = fcmp olt double %.lcssa1, 0.000000e+00
DOALL:     	  br i1 %213, label %.preheader.i, label %281, !prof !66
DOALL:     	  %indvars.iv32.i = phi i64 [ %indvars.iv.next33.i, %._crit_edge59.i ], [ 0, %.preheader.i ]
DOALL:     	  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i
DOALL:     	  br i1 %215, label %216, label %254, !prof !67
DOALL:     	  %217 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45
DOALL:     	  %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56
DOALL:     	  %219 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i
DOALL:     	  %220 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 2
DOALL:     	  %221 = load i64, i64* %220, align 8, !tbaa !63
DOALL:     	  %222 = getelementptr inbounds i32, i32* %217, i64 %221
DOALL:     	  %223 = load i32, i32* %222, align 4, !tbaa !33
DOALL:     	  %224 = sext i32 %223 to i64
DOALL:     	  %225 = getelementptr inbounds double, double* %155, i64 %224
DOALL:     	  %226 = load double, double* %225, align 8, !tbaa !46
DOALL:     	  %227 = fcmp ogt double %226, 0.000000e+00
DOALL:     	  %228 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  %229 = getelementptr inbounds i8, i8* %228, i64 %indvars.iv32.i
DOALL:     	  %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51
DOALL:     	  %231 = icmp ne i8 %230, 0
DOALL:     	  %brmerge.i = or i1 %231, %227
DOALL:     	  br i1 %brmerge.i, label %232, label %.._crit_edge59_crit_edge.i, !prof !68
DOALL:     	  %233 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 0
DOALL:     	  %234 = load float, float* %233, align 8, !tbaa !58
DOALL:     	  %235 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %39
DOALL:     	  %236 = load i32, i32* %116, align 8, !tbaa !57
DOALL:     	  %237 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 1
DOALL:     	  %238 = load float*, float** %237, align 8
DOALL:     	  %239 = getelementptr inbounds %struct.Point, %struct.Point* %235, i64 0, i32 1
DOALL:     	  %240 = load float*, float** %239, align 8
DOALL:     	  %241 = sext i32 %236 to i64
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %244 ], [ 0, %232 ]
DOALL:     	  %.0.i.i = phi float [ %251, %244 ], [ 0.000000e+00, %232 ]
DOALL:     	  %243 = icmp slt i64 %indvars.iv.i.i, %241
DOALL:     	  br i1 %243, label %244, label %_Z4distRK5PointS1_i.exit.i, !prof !69
DOALL:     	  %245 = getelementptr inbounds float, float* %238, i64 %indvars.iv.i.i
DOALL:     	  %246 = load float, float* %245, align 4, !tbaa !70
DOALL:     	  %247 = getelementptr inbounds float, float* %240, i64 %indvars.iv.i.i
DOALL:     	  %248 = load float, float* %247, align 4, !tbaa !70
DOALL:     	  %249 = fsub float %246, %248
DOALL:     	  %250 = fmul float %249, %249
DOALL:     	  %251 = fadd float %.0.i.i, %250
DOALL:     	  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %242 ]
DOALL:     	  %252 = fmul float %234, %.0.i.i.lcssa
DOALL:     	  %253 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 3
DOALL:     	  store float %252, float* %253, align 8, !tbaa !61
DOALL:     	  store i64 %39, i64* %220, align 8, !tbaa !63
DOALL:     	  %indvars.iv.next33.i = add nuw i64 %indvars.iv32.i, 1
DOALL:     	  %255 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %256 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %._crit_edge60.i ], [ 0, %254 ]
DOALL:     	  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i
DOALL:     	  br i1 %258, label %259, label %271, !prof !67
DOALL:     	  %260 = getelementptr inbounds i8, i8* %255, i64 %indvars.iv.i
DOALL:     	  %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51
DOALL:     	  %262 = icmp eq i8 %261, 0
DOALL:     	  br i1 %262, label %.._crit_edge60_crit_edge.i, label %263, !prof !71
DOALL:     	  %264 = getelementptr inbounds i32, i32* %256, i64 %indvars.iv.i
DOALL:     	  %265 = load i32, i32* %264, align 4, !tbaa !33
DOALL:     	  %266 = sext i32 %265 to i64
DOALL:     	  %267 = getelementptr inbounds double, double* %155, i64 %266
DOALL:     	  %268 = load double, double* %267, align 8, !tbaa !46
DOALL:     	  %269 = fcmp ogt double %268, 0.000000e+00
DOALL:     	  br i1 %269, label %270, label %.._crit_edge60_crit_edge10.i, !prof !72
DOALL:     	  store i8 0, i8* %260, align 1, !tbaa !49
DOALL:     	  %indvars.iv.next.i = add nuw i64 %indvars.iv.i, 1
DOALL:     	  %272 = icmp sle i64 0, %39
DOALL:     	  %273 = icmp sgt i64 %spec.select.i, %39
DOALL:     	  %or.cond.i = and i1 %272, %273
DOALL:     	  br i1 %or.cond.i, label %274, label %.._crit_edge62_crit_edge.i, !prof !73
DOALL:     	  %275 = getelementptr inbounds i8, i8* %255, i64 %39
DOALL:     	  store i8 1, i8* %275, align 1, !tbaa !49
DOALL:     	  %276 = load i64, i64* %4, align 8, !tbaa !43
DOALL:     	  %277 = add nsw i64 %276, 1
DOALL:     	  %278 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %279 = sext i32 %278 to i64
DOALL:     	  %280 = sub nsw i64 %277, %279
DOALL:     	  store i64 %280, i64* %4, align 8, !tbaa !43
DOALL:     	  tail call void @free(i8* %.lcssa) #3
DOALL:     External nodes: 43
DOALL:     	  br i1 %32, label %35, label %33, !prof !37
DOALL:     	  %37 = getelementptr inbounds i32, i32* %1, i64 %36
DOALL:     	  %40 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 0
DOALL:     	  br label %._crit_edge52.i
DOALL:     	  br label %._crit_edge52.i
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %._crit_edge54.i
DOALL:     	  br label %._crit_edge54.i
DOALL:     	  br label %63
DOALL:     	  br label %78
DOALL:     	  br label %._crit_edge56.i
DOALL:     	  br label %._crit_edge56.i
DOALL:     	  br label %89
DOALL:     	  %115 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 2
DOALL:     	  %116 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 1
DOALL:     	  br label %150
DOALL:     	  br label %150
DOALL:     	  br label %117
DOALL:     	  br label %._crit_edge58.i
DOALL:     	  br label %168
DOALL:     	  br label %168
DOALL:     	  br label %._crit_edge58.i
DOALL:     	  br label %157
DOALL:     	  store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %198
DOALL:     	  br label %214
DOALL:     	  br label %._crit_edge59.i
DOALL:     	  br label %242
DOALL:     	  br label %242
DOALL:     	  br label %._crit_edge59.i
DOALL:     	  br label %214
DOALL:     	  br label %257
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %257
DOALL:     	  br label %._crit_edge62.i
DOALL:     	  br label %._crit_edge62.i
DOALL:     	  br label %_Z5pgainlP6PointsdPliP17pthread_barrier_t.exit
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %_Z5pgainlP6PointsdPliP17pthread_barrier_t.exit
DOALL:     	  %282 = phi double [ 0.000000e+00, %281 ], [ %.lcssa1, %._crit_edge62.i ]
DOALL:     Edges: 1248
DOALL:     Loop-carried data dependences
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         %113 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %145 = load i32, i32* %144, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %145 = load i32, i32* %144, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %165 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %171 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %171 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %181 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %181 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store i32 %208, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %223 = load i32, i32* %222, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %223 = load i32, i32* %222, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %265 = load i32, i32* %264, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %265 = load i32, i32* %264, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         %278 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   %47 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   %276 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %47 = load i64, i64* %4, align 8, !tbaa !43 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %88 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %87 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %75 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %61 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %217 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %256 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %276 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %228 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %166 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %156 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %102 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %142 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %62 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %38 = load i32, i32* %37, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %42 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %108 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %132 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %255 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %47 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %114 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         %74 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         %103 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         %107 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 15
DOALL:     	  %234 = load float, float* %233, align 8, !tbaa !58
DOALL:     	  %238 = load float*, float** %237, align 8
DOALL:     	  %240 = load float*, float** %239, align 8
DOALL:     	  %.0.i.i = phi float [ %251, %244 ], [ 0.000000e+00, %232 ]
DOALL:     	  %245 = getelementptr inbounds float, float* %238, i64 %indvars.iv.i.i
DOALL:     	  %246 = load float, float* %245, align 4, !tbaa !70
DOALL:     	  %247 = getelementptr inbounds float, float* %240, i64 %indvars.iv.i.i
DOALL:     	  %248 = load float, float* %247, align 4, !tbaa !70
DOALL:     	  %249 = fsub float %246, %248
DOALL:     	  %250 = fmul float %249, %249
DOALL:     	  %251 = fadd float %.0.i.i, %250
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %242 ]
DOALL:     	  %252 = fmul float %234, %.0.i.i.lcssa
DOALL:     	  store float %252, float* %253, align 8, !tbaa !61
DOALL:     	  store i64 %39, i64* %220, align 8, !tbaa !63
DOALL:     External nodes: 9
DOALL:     	  %220 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 2
DOALL:     	  %221 = load i64, i64* %220, align 8, !tbaa !63
DOALL:     	  br i1 %brmerge.i, label %232, label %.._crit_edge59_crit_edge.i, !prof !68
DOALL:     	  %233 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 0
DOALL:     	  %237 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 1
DOALL:     	  %239 = getelementptr inbounds %struct.Point, %struct.Point* %235, i64 0, i32 1
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %244 ], [ 0, %232 ]
DOALL:     	  br i1 %243, label %244, label %_Z4distRK5PointS1_i.exit.i, !prof !69
DOALL:     	  %253 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 3
DOALL:     Edges: 51
DOALL:     Loop-carried data dependences
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 10
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %115 = add nsw i32 %77, 1
DOALL:     	  %storemerge = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ]
DOALL:     	  %68 = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ]
DOALL:     	  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     	  %69 = sext i32 %68 to i64
DOALL:     	  %70 = load i64, i64* %6, align 8, !tbaa !30
DOALL:     	  %71 = icmp sgt i64 %70, %69
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %77 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     External nodes: 11
DOALL:     	  br label %67
DOALL:     	  %73 = tail call i64 @lrand48() #3
DOALL:     	  %74 = sitofp i64 %73 to float
DOALL:     	  %75 = fmul float %74, 0x3E00000000000000
DOALL:     	  %76 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %78 = sext i32 %77 to i64
DOALL:     	  %79 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78, i32 3
DOALL:     	  %80 = load float, float* %79, align 8, !tbaa !47
DOALL:     	  %81 = fdiv float %80, %1
DOALL:     	  %82 = fcmp olt float %75, %81
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     Edges: 31
DOALL:     Loop-carried data dependences
DOALL:         %115 = add nsw i32 %77, 1 --->   %68 = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ] via variable
DOALL:         %115 = add nsw i32 %77, 1 --->   %storemerge = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ] via variable
DOALL:         store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 --->   store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %73 = tail call i64 @lrand48() #3
DOALL:     External nodes: 2
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %74 = sitofp i64 %73 to float
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %84 = load i64, i64* %2, align 8, !tbaa !49
DOALL:     	  %85 = add nsw i64 %84, 1
DOALL:     	  store i64 %85, i64* %2, align 8, !tbaa !49
DOALL:     External nodes: 1
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     Edges: 8
DOALL:     Loop-carried data dependences
DOALL:         store i64 %85, i64* %2, align 8, !tbaa !49 --->   store i64 %85, i64* %2, align 8, !tbaa !49 via memory
DOALL:         store i64 %85, i64* %2, align 8, !tbaa !49 --->   %84 = load i64, i64* %2, align 8, !tbaa !49 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 39
DOALL:     	  %91 = load i32, i32* %17, align 8, !tbaa !41
DOALL:     	  %92 = getelementptr inbounds %struct.Point, %struct.Point* %86, i64 0, i32 1
DOALL:     	  %93 = load float*, float** %92, align 8
DOALL:     	  %94 = getelementptr inbounds %struct.Point, %struct.Point* %90, i64 0, i32 1
DOALL:     	  %95 = load float*, float** %94, align 8
DOALL:     	  %96 = sext i32 %91 to i64
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %99 ], [ 0, %89 ]
DOALL:     	  %.0.i = phi float [ %106, %99 ], [ 0.000000e+00, %89 ]
DOALL:     	  %98 = icmp slt i64 %indvars.iv.i, %96
DOALL:     	  br i1 %98, label %99, label %_Z4distRK5PointS1_i.exit, !prof !42
DOALL:     	  %100 = getelementptr inbounds float, float* %93, i64 %indvars.iv.i
DOALL:     	  %101 = load float, float* %100, align 4, !tbaa !43
DOALL:     	  %102 = getelementptr inbounds float, float* %95, i64 %indvars.iv.i
DOALL:     	  %103 = load float, float* %102, align 4, !tbaa !43
DOALL:     	  %104 = fsub float %101, %103
DOALL:     	  %105 = fmul float %104, %104
DOALL:     	  %106 = fadd float %.0.i, %105
DOALL:     	  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %97 ]
DOALL:     	  %107 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 0
DOALL:     	  %108 = load float, float* %107, align 8, !tbaa !45
DOALL:     	  %109 = fmul float %.0.i.lcssa, %108
DOALL:     	  %110 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 3
DOALL:     	  %111 = load float, float* %110, align 8, !tbaa !47
DOALL:     	  %112 = fcmp olt float %109, %111
DOALL:     	  br i1 %112, label %113, label %.._crit_edge27_crit_edge, !prof !54
DOALL:     	  store float %109, float* %110, align 8, !tbaa !47
DOALL:     	  %114 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 2
DOALL:     	  store i64 %78, i64* %114, align 8, !tbaa !48
DOALL:     	  %indvars.iv.next17 = add i64 %indvars.iv16, 1
DOALL:     	  %80 = load float, float* %79, align 8, !tbaa !47
DOALL:     	  %81 = fdiv float %80, %1
DOALL:     	  %82 = fcmp olt float %75, %81
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     	  %86 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78
DOALL:     	  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge27 ], [ %18, %83 ]
DOALL:     	  %88 = icmp sgt i64 %spec.select, %indvars.iv16
DOALL:     	  br i1 %88, label %89, label %._crit_edge26.loopexit, !prof !53
DOALL:     	  %90 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16
DOALL:     External nodes: 16
DOALL:     	  br label %97
DOALL:     	  br label %97
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %87
DOALL:     	  br label %._crit_edge26
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %75 = fmul float %74, 0x3E00000000000000
DOALL:     	  %76 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %78 = sext i32 %77 to i64
DOALL:     	  %79 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78, i32 3
DOALL:     	  br label %._crit_edge26
DOALL:     	  %84 = load i64, i64* %2, align 8, !tbaa !49
DOALL:     	  %85 = add nsw i64 %84, 1
DOALL:     	  store i64 %85, i64* %2, align 8, !tbaa !49
DOALL:     	  br label %87
DOALL:     Edges: 125
DOALL:     Loop-carried data dependences
DOALL:         %111 = load float, float* %110, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         %95 = load float*, float** %94, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         %95 = load float*, float** %94, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %111 = load float, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %80 = load float, float* %79, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %95 = load float*, float** %94, align 8 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %95 = load float*, float** %94, align 8 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         %80 = load float, float* %79, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 14
DOALL:     	  %93 = load float*, float** %92, align 8
DOALL:     	  %.0.i = phi float [ %106, %99 ], [ 0.000000e+00, %89 ]
DOALL:     	  %100 = getelementptr inbounds float, float* %93, i64 %indvars.iv.i
DOALL:     	  %101 = load float, float* %100, align 4, !tbaa !43
DOALL:     	  %104 = fsub float %101, %103
DOALL:     	  %105 = fmul float %104, %104
DOALL:     	  %106 = fadd float %.0.i, %105
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %97 ]
DOALL:     	  %109 = fmul float %.0.i.lcssa, %108
DOALL:     	  %112 = fcmp olt float %109, %111
DOALL:     	  br i1 %112, label %113, label %.._crit_edge27_crit_edge, !prof !54
DOALL:     	  store float %109, float* %110, align 8, !tbaa !47
DOALL:     	  %114 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 2
DOALL:     	  store i64 %78, i64* %114, align 8, !tbaa !48
DOALL:     External nodes: 11
DOALL:     	  %92 = getelementptr inbounds %struct.Point, %struct.Point* %86, i64 0, i32 1
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %99 ], [ 0, %89 ]
DOALL:     	  br i1 %98, label %99, label %_Z4distRK5PointS1_i.exit, !prof !42
DOALL:     	  %103 = load float, float* %102, align 4, !tbaa !43
DOALL:     	  %108 = load float, float* %107, align 8, !tbaa !45
DOALL:     	  %110 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 3
DOALL:     	  %111 = load float, float* %110, align 8, !tbaa !47
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %._crit_edge27
DOALL:     	  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge27 ], [ %18, %83 ]
DOALL:     	  br i1 %88, label %89, label %._crit_edge26.loopexit, !prof !53
DOALL:     Edges: 43
DOALL:     Loop-carried data dependences
DOALL:         %93 = load float*, float** %92, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %93 = load float*, float** %92, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 11
DOALL:     	  %26 = load float*, float** %25, align 8
DOALL:     	  %.0.i2 = phi float [ %39, %32 ], [ 0.000000e+00, %21 ]
DOALL:     	  %33 = getelementptr inbounds float, float* %26, i64 %indvars.iv.i1
DOALL:     	  %34 = load float, float* %33, align 4, !tbaa !43
DOALL:     	  %37 = fsub float %34, %36
DOALL:     	  %38 = fmul float %37, %37
DOALL:     	  %39 = fadd float %.0.i2, %38
DOALL:     	  %.0.i2.lcssa = phi float [ %.0.i2, %30 ]
DOALL:     	  %42 = fmul float %.0.i2.lcssa, %41
DOALL:     	  store float %42, float* %43, align 8, !tbaa !47
DOALL:     	  store i64 0, i64* %44, align 8, !tbaa !48
DOALL:     External nodes: 8
DOALL:     	  br i1 %20, label %21, label %45, !prof !39
DOALL:     	  %25 = getelementptr inbounds %struct.Point, %struct.Point* %23, i64 0, i32 1
DOALL:     	  %indvars.iv.i1 = phi i64 [ %indvars.iv.next.i3, %32 ], [ 0, %21 ]
DOALL:     	  br i1 %31, label %32, label %_Z4distRK5PointS1_i.exit4, !prof !42
DOALL:     	  %36 = load float, float* %35, align 4, !tbaa !43
DOALL:     	  %41 = load float, float* %40, align 8, !tbaa !45
DOALL:     	  %43 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 %indvars.iv20, i32 3
DOALL:     	  %44 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 %indvars.iv20, i32 2
DOALL:     Edges: 33
DOALL:     Loop-carried data dependences
DOALL:         %26 = load float*, float** %25, align 8 --->   store float %42, float* %43, align 8, !tbaa !47 via memory
DOALL:         %26 = load float*, float** %25, align 8 --->   store i64 0, i64* %44, align 8, !tbaa !48 via memory
DOALL:         store float %42, float* %43, align 8, !tbaa !47 --->   %26 = load float*, float** %25, align 8 via memory
DOALL:         store i64 0, i64* %44, align 8, !tbaa !48 --->   %26 = load float*, float** %25, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 8
DOALL:     	  %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57)
DOALL:     	  %61 = fmul float %58, %60
DOALL:     	  %63 = load float, float* %62, align 8, !tbaa !47
DOALL:     	  %64 = fcmp olt float %61, %63
DOALL:     	  br i1 %64, label %65, label %.._crit_edge25_crit_edge
DOALL:     	  store float %61, float* %62, align 8, !tbaa !47
DOALL:     	  %66 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18, i32 2
DOALL:     	  store i64 %50, i64* %66, align 8, !tbaa !48
DOALL:     External nodes: 11
DOALL:     	  %50 = sext i32 %49 to i64
DOALL:     	  %indvars.iv18 = phi i64 [ %indvars.iv.next19, %._crit_edge25 ], [ %18, %.preheader.preheader ]
DOALL:     	  br i1 %52, label %53, label %.loopexit.loopexit
DOALL:     	  %54 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %55 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %50
DOALL:     	  %56 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18
DOALL:     	  %57 = load i32, i32* %17, align 8, !tbaa !41
DOALL:     	  %60 = load float, float* %59, align 8, !tbaa !45
DOALL:     	  %62 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18, i32 3
DOALL:     	  br label %._crit_edge25
DOALL:     	  br label %._crit_edge25
DOALL:     Edges: 33
DOALL:     Loop-carried data dependences
DOALL:         %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) --->   store i64 %50, i64* %66, align 8, !tbaa !48 via memory
DOALL:         %63 = load float, float* %62, align 8, !tbaa !47 --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   %63 = load float, float* %62, align 8, !tbaa !47 via memory
DOALL:         store i64 %50, i64* %66, align 8, !tbaa !48 --->   store i64 %50, i64* %66, align 8, !tbaa !48 via memory
DOALL:         store i64 %50, i64* %66, align 8, !tbaa !48 --->   %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: _Z8pkmedianP6PointsllPliP17pthread_barrier_t (255 instructions. The inlining will add 31 instructions),   tail call void @_Z7shuffleP6Points(%struct.Points* %0)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv12, %4" (2.681275e-04%)
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv10, %5" (2.000697e-05%)
Noelle:     Loop "  %65 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %62, align 8, !tbaa !47" (4.730769e+01%)
Noelle:     Loop "  %89 = icmp sgt i64 %67, %indvars.iv" (2.085449e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.454403e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %24 = icmp slt i64 %.04, %spec.select" (5.036059e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv42, %9" (4.727630e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.600196e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.653854e-01%)
Noelle:     Loop "  %78 = icmp slt i64 %77, %1" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp slt i64 %67, %1" (5.321413e-01%)
Noelle:     Loop "  %91 = icmp sgt i64 %88, %indvars.iv" (2.979189e-04%)
Noelle:     Loop "  %105 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.342939e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.399872e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.533145e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.333870e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.109063e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.538422e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.180168e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.486020e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.526662e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i, %226" (2.388696e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select, %indvars.iv" (5.065994e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %286 = fdiv double %.0, %.02" (9.342943e+01%)
Noelle:     Loop "  %289 = icmp slt i64 %.01, %6" (9.342943e+01%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.337606e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %18" (1.887415e-05%)
Noelle:     Loop "  %32 = icmp slt i64 %.01.us, %6" (9.337604e+01%)
Noelle:     Loop "  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.399871e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv42.i, %76" (5.533145e-05%)
Noelle:     Loop "  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.333870e-01%)
Noelle:     Loop "  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.109063e+01%)
Noelle:     Loop "  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.538422e-01%)
Noelle:     Loop "  %169 = icmp slt i32 %.03.i, %114" (3.180168e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %indvars.iv34.i, %196" (7.486020e-05%)
Noelle:     Loop "  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.526662e-01%)
Noelle:     Loop "  %243 = icmp slt i64 %indvars.iv.i.i, %241" (2.388696e-01%)
Noelle:     Loop "  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.065994e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.028074e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.013895e-01%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv.i1, %29" (1.987678e-01%)
Noelle:     Loop "  %49 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.354207e+10%)
Noelle:     Loop "  %52 = icmp sgt i64 %spec.select, %indvars.iv18" (3.354207e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.588409e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.563384e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv.i, %96" (8.447633e-01%)
Noelle:     Loop "  %117 = icmp sgt i64 %spec.select, %indvars.iv14" (1.310848e-03%)
Noelle:     Loop "  %136 = icmp slt i64 %indvars.iv, %133" (1.018259e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.950398e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.866996e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.242260e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.203530e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.055504e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.979189e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.177243e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.276920e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.785847e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.521827e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.600196e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.967284e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.900370e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.884688e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv12, %4" (2.681239e-04%)
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv10, %5" (2.000669e-05%)
Noelle:     Loop "  %65 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %62, align 8, !tbaa !47" (4.730704e+01%)
Noelle:     Loop "  %89 = icmp sgt i64 %67, %indvars.iv" (2.085420e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.454273e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.035990e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.727565e-08%)
Noelle:     Loop "  %50 = icmp slt i64 %.02, %spec.select" (2.600161e-07%)
Noelle:     Loop "  %65 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.653818e-01%)
Noelle:     Loop "  %101 = icmp slt i64 %100, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.321340e-01%)
Noelle:     Loop "  %77 = load i64, i64* %74, align 8, !tbaa !40" (1.370318e-03%)
Noelle:     Loop "  %114 = icmp sgt i64 %111, %indvars.iv" (2.979148e-04%)
Noelle:     Loop "  %128 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.342811e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.399784e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.533070e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.333797e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.108938e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.538305e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.180124e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.485918e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.526627e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i, %226" (2.388663e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select, %indvars.iv" (5.065924e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %286 = fdiv double %.0, %.02" (9.342815e+01%)
Noelle:     Loop "  %289 = icmp slt i64 %.01, %6" (9.342815e+01%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.337478e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %18" (1.887389e-05%)
Noelle:     Loop "  %32 = icmp slt i64 %.01.us, %6" (9.337476e+01%)
Noelle:     Loop "  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.399784e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv42.i, %76" (5.533070e-05%)
Noelle:     Loop "  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.333797e-01%)
Noelle:     Loop "  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.108938e+01%)
Noelle:     Loop "  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.538305e-01%)
Noelle:     Loop "  %169 = icmp slt i32 %.03.i, %114" (3.180124e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %indvars.iv34.i, %196" (7.485918e-05%)
Noelle:     Loop "  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.526627e-01%)
Noelle:     Loop "  %243 = icmp slt i64 %indvars.iv.i.i, %241" (2.388663e-01%)
Noelle:     Loop "  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.065924e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.027950e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.013867e-01%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv.i1, %29" (1.987651e-01%)
Noelle:     Loop "  %49 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.354161e+10%)
Noelle:     Loop "  %52 = icmp sgt i64 %spec.select, %indvars.iv18" (3.354161e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.588291e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.563266e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv.i, %96" (8.447517e-01%)
Noelle:     Loop "  %117 = icmp sgt i64 %spec.select, %indvars.iv14" (1.310830e-03%)
Noelle:     Loop "  %136 = icmp slt i64 %indvars.iv, %133" (1.018245e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.950303e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.866902e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.242202e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.203473e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.055476e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.979148e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.177186e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.276875e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.785809e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.521792e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.600161e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.967216e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.900303e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.884662e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint:       There are 26 different instructions and 46 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.VoNJfbgnnE -o /tmp/tmp.VoNJfbgnnE
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.VoNJfbgnnE -o /tmp/tmp.VoNJfbgnnE
NOELLE: FixedPoint:     Invocation 4
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
Inliner: Start
Inliner:   Number of program instructions = 2108
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 15
DOALL:     	  %219 = load float, float* %218, align 8, !tbaa !54
DOALL:     	  %223 = load float*, float** %222, align 8
DOALL:     	  %225 = load float*, float** %224, align 8
DOALL:     	  %.0.i = phi float [ %236, %229 ], [ 0.000000e+00, %217 ]
DOALL:     	  %230 = getelementptr inbounds float, float* %223, i64 %indvars.iv.i
DOALL:     	  %231 = load float, float* %230, align 4, !tbaa !66
DOALL:     	  %232 = getelementptr inbounds float, float* %225, i64 %indvars.iv.i
DOALL:     	  %233 = load float, float* %232, align 4, !tbaa !66
DOALL:     	  %234 = fsub float %231, %233
DOALL:     	  %235 = fmul float %234, %234
DOALL:     	  %236 = fadd float %.0.i, %235
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %227 ]
DOALL:     	  %237 = fmul float %219, %.0.i.lcssa
DOALL:     	  store float %237, float* %238, align 8, !tbaa !57
DOALL:     	  store i64 %0, i64* %205, align 8, !tbaa !59
DOALL:     External nodes: 9
DOALL:     	  br i1 %brmerge, label %217, label %.._crit_edge59_crit_edge, !prof !64
DOALL:     	  %218 = getelementptr inbounds %struct.Point, %struct.Point* %204, i64 0, i32 0
DOALL:     	  %222 = getelementptr inbounds %struct.Point, %struct.Point* %204, i64 0, i32 1
DOALL:     	  %224 = getelementptr inbounds %struct.Point, %struct.Point* %220, i64 0, i32 1
DOALL:     	  br i1 %228, label %229, label %_Z4distRK5PointS1_i.exit, !prof !65
DOALL:     	  %205 = getelementptr inbounds %struct.Point, %struct.Point* %203, i64 %indvars.iv32, i32 2
DOALL:     	  %206 = load i64, i64* %205, align 8, !tbaa !59
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %229 ], [ 0, %217 ]
DOALL:     	  %238 = getelementptr inbounds %struct.Point, %struct.Point* %203, i64 %indvars.iv32, i32 3
DOALL:     Edges: 51
DOALL:     Loop-carried data dependences
DOALL:         %219 = load float, float* %218, align 8, !tbaa !54 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %219 = load float, float* %218, align 8, !tbaa !54 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %223 = load float*, float** %222, align 8 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %223 = load float*, float** %222, align 8 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %225 = load float*, float** %224, align 8 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %225 = load float*, float** %224, align 8 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %225 = load float*, float** %224, align 8 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %219 = load float, float* %218, align 8, !tbaa !54 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %223 = load float*, float** %222, align 8 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %225 = load float*, float** %224, align 8 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %219 = load float, float* %218, align 8, !tbaa !54 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %223 = load float*, float** %222, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 9
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 288
DOALL:     	  %38 = load i32, i32* %37, align 4, !tbaa !33
DOALL:     	  %39 = sext i32 %38 to i64
DOALL:     	  %41 = load i64, i64* %40, align 8, !tbaa !38
DOALL:     	  %42 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %43 = sext i32 %42 to i64
DOALL:     	  %44 = sdiv i64 %41, %43
DOALL:     	  %45 = add nsw i32 %42, -1
DOALL:     	  %46 = icmp eq i32 %45, 0
DOALL:     	  %spec.select.i = select i1 %46, i64 %41, i64 %44, !prof !42
DOALL:     	  %47 = load i64, i64* %4, align 8, !tbaa !43
DOALL:     	  %48 = trunc i64 %47 to i32
DOALL:     	  %49 = add i32 %48, 2
DOALL:     	  %50 = and i32 %49, 3
DOALL:     	  %51 = icmp eq i32 %50, 0
DOALL:     	  br i1 %51, label %.._crit_edge52_crit_edge.i, label %52, !prof !44
DOALL:     	  %53 = sdiv i32 %49, 4
DOALL:     	  %54 = shl nsw i32 %53, 2
DOALL:     	  %55 = add i32 %54, 4
DOALL:     	  %.010.i = phi i32 [ %55, %52 ], [ %49, %.._crit_edge52_crit_edge.i ]
DOALL:     	  %56 = add nsw i32 %42, 1
DOALL:     	  %57 = mul nsw i32 %.010.i, %56
DOALL:     	  %58 = sext i32 %57 to i64
DOALL:     	  %59 = shl nsw i64 %58, 3
DOALL:     	  %60 = tail call noalias i8* @malloc(i64 %59) #3
DOALL:     	  store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45
DOALL:     	  store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %61 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %62 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv44.i = phi i64 [ %indvars.iv.next45.i, %._crit_edge54.i ], [ 0, %._crit_edge52.i ]
DOALL:     	  %.016.i = phi i32 [ %.117.i, %._crit_edge54.i ], [ 0, %._crit_edge52.i ]
DOALL:     	  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i
DOALL:     	  br i1 %64, label %65, label %72, !prof !48
DOALL:     	  %66 = getelementptr inbounds i8, i8* %61, i64 %indvars.iv44.i
DOALL:     	  %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51
DOALL:     	  %68 = icmp eq i8 %67, 0
DOALL:     	  br i1 %68, label %.._crit_edge54_crit_edge.i, label %69, !prof !52
DOALL:     	  %70 = add nsw i32 %.016.i, 1
DOALL:     	  %71 = getelementptr inbounds i32, i32* %62, i64 %indvars.iv44.i
DOALL:     	  store i32 %.016.i, i32* %71, align 4, !tbaa !33
DOALL:     	  %.117.i = phi i32 [ %70, %69 ], [ %.016.i, %.._crit_edge54_crit_edge.i ]
DOALL:     	  %indvars.iv.next45.i = add nuw i64 %indvars.iv44.i, 1
DOALL:     	  %.016.i.lcssa = phi i32 [ %.016.i, %63 ]
DOALL:     	  %73 = sitofp i32 %.016.i.lcssa to double
DOALL:     	  %74 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  store double %73, double* %74, align 8, !tbaa !46
DOALL:     	  %75 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %76 = sext i32 %75 to i64
DOALL:     	  %77 = sext i32 %.010.i to i64
DOALL:     	  %indvars.iv42.i = phi i64 [ %indvars.iv.next43.i, %80 ], [ 0, %72 ]
DOALL:     	  %.012.i = phi i32 [ %86, %80 ], [ 0, %72 ]
DOALL:     	  %79 = icmp slt i64 %indvars.iv42.i, %76
DOALL:     	  br i1 %79, label %80, label %._crit_edge55.loopexit.i, !prof !53
DOALL:     	  %81 = mul nsw i64 %indvars.iv42.i, %77
DOALL:     	  %82 = getelementptr inbounds double, double* %74, i64 %81
DOALL:     	  %83 = load double, double* %82, align 8, !tbaa !46
DOALL:     	  %84 = fptosi double %83 to i32
DOALL:     	  %85 = sitofp i32 %.012.i to double
DOALL:     	  store double %85, double* %82, align 8, !tbaa !46
DOALL:     	  %86 = add nsw i32 %.012.i, %84
DOALL:     	  %indvars.iv.next43.i = add nuw nsw i64 %indvars.iv42.i, 1
DOALL:     	  %87 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %88 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv40.i = phi i64 [ %indvars.iv.next41.i, %._crit_edge56.i ], [ 0, %._crit_edge55.loopexit.i ]
DOALL:     	  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i
DOALL:     	  br i1 %90, label %91, label %101, !prof !48
DOALL:     	  %92 = getelementptr inbounds i8, i8* %87, i64 %indvars.iv40.i
DOALL:     	  %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51
DOALL:     	  %94 = icmp eq i8 %93, 0
DOALL:     	  br i1 %94, label %.._crit_edge56_crit_edge.i, label %95, !prof !52
DOALL:     	  %96 = load double, double* %74, align 8, !tbaa !46
DOALL:     	  %97 = fptosi double %96 to i32
DOALL:     	  %98 = getelementptr inbounds i32, i32* %88, i64 %indvars.iv40.i
DOALL:     	  %99 = load i32, i32* %98, align 4, !tbaa !33
DOALL:     	  %100 = add nsw i32 %99, %97
DOALL:     	  store i32 %100, i32* %98, align 4, !tbaa !33
DOALL:     	  %indvars.iv.next41.i = add nuw i64 %indvars.iv40.i, 1
DOALL:     	  %102 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54
DOALL:     	  %103 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %104 = bitcast double* %103 to i8*
DOALL:     	  %105 = sext i32 %.010.i to i64
DOALL:     	  %106 = shl nsw i64 %105, 3
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55
DOALL:     	  %107 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %108 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %109 = mul nsw i32 %108, %.010.i
DOALL:     	  %110 = sext i32 %109 to i64
DOALL:     	  %111 = getelementptr inbounds double, double* %107, i64 %110
DOALL:     	  %112 = bitcast double* %111 to i8*
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55
DOALL:     	  %113 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %114 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %indvars.iv38.i = phi i64 [ %indvars.iv.next39.i, %150 ], [ 0, %101 ]
DOALL:     	  %.013.i = phi double [ %.114.i, %150 ], [ 0.000000e+00, %101 ]
DOALL:     	  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i
DOALL:     	  br i1 %118, label %119, label %151, !prof !48
DOALL:     	  %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56
DOALL:     	  %121 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i
DOALL:     	  %122 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %39
DOALL:     	  %123 = load i32, i32* %116, align 8, !tbaa !57
DOALL:     	  %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3
DOALL:     	  %125 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 0
DOALL:     	  %126 = load float, float* %125, align 8, !tbaa !58
DOALL:     	  %127 = fmul float %124, %126
DOALL:     	  %128 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 3
DOALL:     	  %129 = load float, float* %128, align 8, !tbaa !61
DOALL:     	  %130 = fcmp olt float %127, %129
DOALL:     	  br i1 %130, label %131, label %137, !prof !62
DOALL:     	  %132 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  %133 = getelementptr inbounds i8, i8* %132, i64 %indvars.iv38.i
DOALL:     	  store i8 1, i8* %133, align 1, !tbaa !49
DOALL:     	  %134 = fsub float %127, %129
DOALL:     	  %135 = fpext float %134 to double
DOALL:     	  %136 = fadd double %.013.i, %135
DOALL:     	  %138 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 2
DOALL:     	  %139 = load i64, i64* %138, align 8, !tbaa !63
DOALL:     	  %140 = fsub float %129, %127
DOALL:     	  %141 = fpext float %140 to double
DOALL:     	  %142 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45
DOALL:     	  %sext.i = shl i64 %139, 32
DOALL:     	  %143 = ashr exact i64 %sext.i, 32
DOALL:     	  %144 = getelementptr inbounds i32, i32* %142, i64 %143
DOALL:     	  %145 = load i32, i32* %144, align 4, !tbaa !33
DOALL:     	  %146 = sext i32 %145 to i64
DOALL:     	  %147 = getelementptr inbounds double, double* %113, i64 %146
DOALL:     	  %148 = load double, double* %147, align 8, !tbaa !46
DOALL:     	  %149 = fadd double %148, %141
DOALL:     	  store double %149, double* %147, align 8, !tbaa !46
DOALL:     	  %.114.i = phi double [ %136, %131 ], [ %.013.i, %137 ]
DOALL:     	  %indvars.iv.next39.i = add nuw i64 %indvars.iv38.i, 1
DOALL:     	  %.013.i.lcssa = phi double [ %.013.i, %117 ]
DOALL:     	  %152 = bitcast double* %113 to i8*
DOALL:     	  %153 = mul nsw i32 %114, %.010.i
DOALL:     	  %154 = sext i32 %153 to i64
DOALL:     	  %155 = getelementptr inbounds double, double* %113, i64 %154
DOALL:     	  %156 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %158 = phi i8* [ %187, %._crit_edge58.i ], [ %152, %151 ]
DOALL:     	  %indvars.iv36.i = phi i64 [ %indvars.iv.next37.i, %._crit_edge58.i ], [ 0, %151 ]
DOALL:     	  %.215.i = phi double [ %.4.i, %._crit_edge58.i ], [ %.013.i.lcssa, %151 ]
DOALL:     	  %.09.i = phi i32 [ %.2.i, %._crit_edge58.i ], [ 0, %151 ]
DOALL:     	  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i
DOALL:     	  br i1 %159, label %160, label %188, !prof !48
DOALL:     	  %161 = getelementptr inbounds i8, i8* %156, i64 %indvars.iv36.i
DOALL:     	  %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51
DOALL:     	  %163 = icmp eq i8 %162, 0
DOALL:     	  br i1 %163, label %.._crit_edge58_crit_edge.i, label %164, !prof !52
DOALL:     	  %165 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8
DOALL:     	  %166 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %167 = getelementptr inbounds i32, i32* %166, i64 %indvars.iv36.i
DOALL:     	  %.04.i = phi double [ %14, %164 ], [ %177, %170 ]
DOALL:     	  %.03.i = phi i32 [ 0, %164 ], [ %178, %170 ]
DOALL:     	  %169 = icmp slt i32 %.03.i, %114
DOALL:     	  br i1 %169, label %170, label %179, !prof !64
DOALL:     	  %171 = load i32, i32* %167, align 4, !tbaa !33
DOALL:     	  %172 = mul nsw i32 %.03.i, %.010.i
DOALL:     	  %173 = add nsw i32 %171, %172
DOALL:     	  %174 = sext i32 %173 to i64
DOALL:     	  %175 = getelementptr inbounds double, double* %165, i64 %174
DOALL:     	  %176 = load double, double* %175, align 8, !tbaa !46
DOALL:     	  %177 = fadd double %.04.i, %176
DOALL:     	  %178 = add nuw nsw i32 %.03.i, 1
DOALL:     	  %.04.i.lcssa = phi double [ %.04.i, %168 ]
DOALL:     	  %180 = bitcast double* %165 to i8*
DOALL:     	  %181 = load i32, i32* %167, align 4, !tbaa !33
DOALL:     	  %182 = sext i32 %181 to i64
DOALL:     	  %183 = getelementptr inbounds double, double* %155, i64 %182
DOALL:     	  store double %.04.i.lcssa, double* %183, align 8, !tbaa !46
DOALL:     	  %184 = fcmp ogt double %.04.i.lcssa, 0.000000e+00
DOALL:     	  %185 = fsub double %.215.i, %.04.i.lcssa
DOALL:     	  %.3.i = select i1 %184, double %185, double %.215.i, !prof !65
DOALL:     	  %186 = zext i1 %184 to i32
DOALL:     	  %.1.i = add nsw i32 %.09.i, %186
DOALL:     	  %187 = phi i8* [ %180, %179 ], [ %158, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %.4.i = phi double [ %.3.i, %179 ], [ %.215.i, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %.2.i = phi i32 [ %.1.i, %179 ], [ %.09.i, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %indvars.iv.next37.i = add nuw i64 %indvars.iv36.i, 1
DOALL:     	  %.lcssa = phi i8* [ %158, %157 ]
DOALL:     	  %.215.i.lcssa = phi double [ %.215.i, %157 ]
DOALL:     	  %.09.i.lcssa = phi i32 [ %.09.i, %157 ]
DOALL:     	  %189 = add nsw i32 %.010.i, -2
DOALL:     	  %190 = sitofp i32 %.09.i.lcssa to double
DOALL:     	  %191 = sext i32 %189 to i64
DOALL:     	  %192 = getelementptr inbounds double, double* %113, i64 %191
DOALL:     	  store double %190, double* %192, align 8, !tbaa !46
DOALL:     	  %193 = add nsw i32 %189, 1
DOALL:     	  %194 = sext i32 %193 to i64
DOALL:     	  %195 = getelementptr inbounds double, double* %113, i64 %194
DOALL:     	  store double %.215.i.lcssa, double* %195, align 8, !tbaa !46
DOALL:     	  %196 = sext i32 %114 to i64
DOALL:     	  %197 = sext i32 %189 to i64
DOALL:     	  %indvars.iv34.i = phi i64 [ %indvars.iv.next35.i, %201 ], [ 0, %188 ]
DOALL:     	  %199 = phi double [ %212, %201 ], [ %14, %188 ]
DOALL:     	  %200 = icmp slt i64 %indvars.iv34.i, %196
DOALL:     	  br i1 %200, label %201, label %.loopexit.loopexit.i, !prof !53
DOALL:     	  %202 = mul nsw i64 %indvars.iv34.i, %105
DOALL:     	  %203 = add nsw i64 %202, %197
DOALL:     	  %204 = getelementptr inbounds double, double* %113, i64 %203
DOALL:     	  %205 = load double, double* %204, align 8, !tbaa !46
DOALL:     	  %206 = fptosi double %205 to i32
DOALL:     	  %207 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %208 = add nsw i32 %207, %206
DOALL:     	  store i32 %208, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %209 = add nsw i64 %203, 1
DOALL:     	  %210 = getelementptr inbounds double, double* %113, i64 %209
DOALL:     	  %211 = load double, double* %210, align 8, !tbaa !46
DOALL:     	  %212 = fadd double %199, %211
DOALL:     	  %indvars.iv.next35.i = add nuw nsw i64 %indvars.iv34.i, 1
DOALL:     	  %.lcssa1 = phi double [ %199, %198 ]
DOALL:     	  %213 = fcmp olt double %.lcssa1, 0.000000e+00
DOALL:     	  br i1 %213, label %.preheader.i, label %281, !prof !66
DOALL:     	  %indvars.iv32.i = phi i64 [ %indvars.iv.next33.i, %._crit_edge59.i ], [ 0, %.preheader.i ]
DOALL:     	  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i
DOALL:     	  br i1 %215, label %216, label %254, !prof !67
DOALL:     	  %217 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45
DOALL:     	  %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56
DOALL:     	  %219 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i
DOALL:     	  %220 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 2
DOALL:     	  %221 = load i64, i64* %220, align 8, !tbaa !63
DOALL:     	  %222 = getelementptr inbounds i32, i32* %217, i64 %221
DOALL:     	  %223 = load i32, i32* %222, align 4, !tbaa !33
DOALL:     	  %224 = sext i32 %223 to i64
DOALL:     	  %225 = getelementptr inbounds double, double* %155, i64 %224
DOALL:     	  %226 = load double, double* %225, align 8, !tbaa !46
DOALL:     	  %227 = fcmp ogt double %226, 0.000000e+00
DOALL:     	  %228 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  %229 = getelementptr inbounds i8, i8* %228, i64 %indvars.iv32.i
DOALL:     	  %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51
DOALL:     	  %231 = icmp ne i8 %230, 0
DOALL:     	  %brmerge.i = or i1 %231, %227
DOALL:     	  br i1 %brmerge.i, label %232, label %.._crit_edge59_crit_edge.i, !prof !68
DOALL:     	  %233 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 0
DOALL:     	  %234 = load float, float* %233, align 8, !tbaa !58
DOALL:     	  %235 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %39
DOALL:     	  %236 = load i32, i32* %116, align 8, !tbaa !57
DOALL:     	  %237 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 1
DOALL:     	  %238 = load float*, float** %237, align 8
DOALL:     	  %239 = getelementptr inbounds %struct.Point, %struct.Point* %235, i64 0, i32 1
DOALL:     	  %240 = load float*, float** %239, align 8
DOALL:     	  %241 = sext i32 %236 to i64
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %244 ], [ 0, %232 ]
DOALL:     	  %.0.i.i = phi float [ %251, %244 ], [ 0.000000e+00, %232 ]
DOALL:     	  %243 = icmp slt i64 %indvars.iv.i.i, %241
DOALL:     	  br i1 %243, label %244, label %_Z4distRK5PointS1_i.exit.i, !prof !69
DOALL:     	  %245 = getelementptr inbounds float, float* %238, i64 %indvars.iv.i.i
DOALL:     	  %246 = load float, float* %245, align 4, !tbaa !70
DOALL:     	  %247 = getelementptr inbounds float, float* %240, i64 %indvars.iv.i.i
DOALL:     	  %248 = load float, float* %247, align 4, !tbaa !70
DOALL:     	  %249 = fsub float %246, %248
DOALL:     	  %250 = fmul float %249, %249
DOALL:     	  %251 = fadd float %.0.i.i, %250
DOALL:     	  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %242 ]
DOALL:     	  %252 = fmul float %234, %.0.i.i.lcssa
DOALL:     	  %253 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 3
DOALL:     	  store float %252, float* %253, align 8, !tbaa !61
DOALL:     	  store i64 %39, i64* %220, align 8, !tbaa !63
DOALL:     	  %indvars.iv.next33.i = add nuw i64 %indvars.iv32.i, 1
DOALL:     	  %255 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %256 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %._crit_edge60.i ], [ 0, %254 ]
DOALL:     	  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i
DOALL:     	  br i1 %258, label %259, label %271, !prof !67
DOALL:     	  %260 = getelementptr inbounds i8, i8* %255, i64 %indvars.iv.i
DOALL:     	  %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51
DOALL:     	  %262 = icmp eq i8 %261, 0
DOALL:     	  br i1 %262, label %.._crit_edge60_crit_edge.i, label %263, !prof !71
DOALL:     	  %264 = getelementptr inbounds i32, i32* %256, i64 %indvars.iv.i
DOALL:     	  %265 = load i32, i32* %264, align 4, !tbaa !33
DOALL:     	  %266 = sext i32 %265 to i64
DOALL:     	  %267 = getelementptr inbounds double, double* %155, i64 %266
DOALL:     	  %268 = load double, double* %267, align 8, !tbaa !46
DOALL:     	  %269 = fcmp ogt double %268, 0.000000e+00
DOALL:     	  br i1 %269, label %270, label %.._crit_edge60_crit_edge10.i, !prof !72
DOALL:     	  store i8 0, i8* %260, align 1, !tbaa !49
DOALL:     	  %indvars.iv.next.i = add nuw i64 %indvars.iv.i, 1
DOALL:     	  %272 = icmp sle i64 0, %39
DOALL:     	  %273 = icmp sgt i64 %spec.select.i, %39
DOALL:     	  %or.cond.i = and i1 %272, %273
DOALL:     	  br i1 %or.cond.i, label %274, label %.._crit_edge62_crit_edge.i, !prof !73
DOALL:     	  %275 = getelementptr inbounds i8, i8* %255, i64 %39
DOALL:     	  store i8 1, i8* %275, align 1, !tbaa !49
DOALL:     	  %276 = load i64, i64* %4, align 8, !tbaa !43
DOALL:     	  %277 = add nsw i64 %276, 1
DOALL:     	  %278 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %279 = sext i32 %278 to i64
DOALL:     	  %280 = sub nsw i64 %277, %279
DOALL:     	  store i64 %280, i64* %4, align 8, !tbaa !43
DOALL:     	  tail call void @free(i8* %.lcssa) #3
DOALL:     External nodes: 43
DOALL:     	  br i1 %32, label %35, label %33, !prof !37
DOALL:     	  %37 = getelementptr inbounds i32, i32* %1, i64 %36
DOALL:     	  %40 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 0
DOALL:     	  br label %._crit_edge52.i
DOALL:     	  br label %._crit_edge52.i
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %._crit_edge54.i
DOALL:     	  br label %._crit_edge54.i
DOALL:     	  br label %63
DOALL:     	  br label %78
DOALL:     	  br label %._crit_edge56.i
DOALL:     	  br label %._crit_edge56.i
DOALL:     	  br label %89
DOALL:     	  %115 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 2
DOALL:     	  %116 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 1
DOALL:     	  br label %150
DOALL:     	  br label %150
DOALL:     	  br label %117
DOALL:     	  br label %._crit_edge58.i
DOALL:     	  br label %168
DOALL:     	  br label %168
DOALL:     	  br label %._crit_edge58.i
DOALL:     	  br label %157
DOALL:     	  store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %198
DOALL:     	  br label %214
DOALL:     	  br label %._crit_edge59.i
DOALL:     	  br label %242
DOALL:     	  br label %242
DOALL:     	  br label %._crit_edge59.i
DOALL:     	  br label %214
DOALL:     	  br label %257
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %257
DOALL:     	  br label %._crit_edge62.i
DOALL:     	  br label %._crit_edge62.i
DOALL:     	  br label %_Z5pgainlP6PointsdPliP17pthread_barrier_t.exit
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %_Z5pgainlP6PointsdPliP17pthread_barrier_t.exit
DOALL:     	  %282 = phi double [ 0.000000e+00, %281 ], [ %.lcssa1, %._crit_edge62.i ]
DOALL:     Edges: 1248
DOALL:     Loop-carried data dependences
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store i32 %208, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   %47 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   %276 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %223 = load i32, i32* %222, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %223 = load i32, i32* %222, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         %265 = load i32, i32* %264, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %265 = load i32, i32* %264, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %278 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %47 = load i64, i64* %4, align 8, !tbaa !43 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %256 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %255 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %142 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %61 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %132 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %114 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %87 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %108 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %102 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %166 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %88 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %156 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %75 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %42 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %47 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %62 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %276 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %38 = load i32, i32* %37, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %217 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %228 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         %74 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         %103 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         %107 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         %113 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %145 = load i32, i32* %144, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %145 = load i32, i32* %144, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %165 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %171 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %171 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %181 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %181 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 5
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  %.pre7.i = load double, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     External nodes: 6
DOALL:     	  br i1 %32, label %35, label %33, !prof !37
DOALL:     	  %60 = tail call noalias i8* @malloc(i64 %59) #3
DOALL:     	  br i1 %200, label %201, label %.loopexit.loopexit.i, !prof !53
DOALL:     	  %212 = fadd double %199, %211
DOALL:     	  br i1 %213, label %.preheader.i, label %281, !prof !66
DOALL:     	  %283 = fsub double -0.000000e+00, %.pre7.i
DOALL:     Edges: 24
DOALL:     Loop-carried data dependences
DOALL:         store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %.pre7.i = load double, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 15
DOALL:     	  %234 = load float, float* %233, align 8, !tbaa !58
DOALL:     	  %238 = load float*, float** %237, align 8
DOALL:     	  %240 = load float*, float** %239, align 8
DOALL:     	  %.0.i.i = phi float [ %251, %244 ], [ 0.000000e+00, %232 ]
DOALL:     	  %245 = getelementptr inbounds float, float* %238, i64 %indvars.iv.i.i
DOALL:     	  %246 = load float, float* %245, align 4, !tbaa !70
DOALL:     	  %247 = getelementptr inbounds float, float* %240, i64 %indvars.iv.i.i
DOALL:     	  %248 = load float, float* %247, align 4, !tbaa !70
DOALL:     	  %249 = fsub float %246, %248
DOALL:     	  %250 = fmul float %249, %249
DOALL:     	  %251 = fadd float %.0.i.i, %250
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %242 ]
DOALL:     	  %252 = fmul float %234, %.0.i.i.lcssa
DOALL:     	  store float %252, float* %253, align 8, !tbaa !61
DOALL:     	  store i64 %39, i64* %220, align 8, !tbaa !63
DOALL:     External nodes: 9
DOALL:     	  %220 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 2
DOALL:     	  %221 = load i64, i64* %220, align 8, !tbaa !63
DOALL:     	  br i1 %brmerge.i, label %232, label %.._crit_edge59_crit_edge.i, !prof !68
DOALL:     	  %233 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 0
DOALL:     	  %237 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 1
DOALL:     	  %239 = getelementptr inbounds %struct.Point, %struct.Point* %235, i64 0, i32 1
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %244 ], [ 0, %232 ]
DOALL:     	  br i1 %243, label %244, label %_Z4distRK5PointS1_i.exit.i, !prof !69
DOALL:     	  %253 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 3
DOALL:     Edges: 51
DOALL:     Loop-carried data dependences
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 10
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 39
DOALL:     	  %91 = load i32, i32* %17, align 8, !tbaa !41
DOALL:     	  %92 = getelementptr inbounds %struct.Point, %struct.Point* %86, i64 0, i32 1
DOALL:     	  %93 = load float*, float** %92, align 8
DOALL:     	  %94 = getelementptr inbounds %struct.Point, %struct.Point* %90, i64 0, i32 1
DOALL:     	  %95 = load float*, float** %94, align 8
DOALL:     	  %96 = sext i32 %91 to i64
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %99 ], [ 0, %89 ]
DOALL:     	  %.0.i = phi float [ %106, %99 ], [ 0.000000e+00, %89 ]
DOALL:     	  %98 = icmp slt i64 %indvars.iv.i, %96
DOALL:     	  br i1 %98, label %99, label %_Z4distRK5PointS1_i.exit, !prof !42
DOALL:     	  %100 = getelementptr inbounds float, float* %93, i64 %indvars.iv.i
DOALL:     	  %101 = load float, float* %100, align 4, !tbaa !43
DOALL:     	  %102 = getelementptr inbounds float, float* %95, i64 %indvars.iv.i
DOALL:     	  %103 = load float, float* %102, align 4, !tbaa !43
DOALL:     	  %104 = fsub float %101, %103
DOALL:     	  %105 = fmul float %104, %104
DOALL:     	  %106 = fadd float %.0.i, %105
DOALL:     	  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %97 ]
DOALL:     	  %107 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 0
DOALL:     	  %108 = load float, float* %107, align 8, !tbaa !45
DOALL:     	  %109 = fmul float %.0.i.lcssa, %108
DOALL:     	  %110 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 3
DOALL:     	  %111 = load float, float* %110, align 8, !tbaa !47
DOALL:     	  %112 = fcmp olt float %109, %111
DOALL:     	  br i1 %112, label %113, label %.._crit_edge27_crit_edge, !prof !54
DOALL:     	  store float %109, float* %110, align 8, !tbaa !47
DOALL:     	  %114 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 2
DOALL:     	  store i64 %78, i64* %114, align 8, !tbaa !48
DOALL:     	  %indvars.iv.next17 = add i64 %indvars.iv16, 1
DOALL:     	  %80 = load float, float* %79, align 8, !tbaa !47
DOALL:     	  %81 = fdiv float %80, %1
DOALL:     	  %82 = fcmp olt float %75, %81
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     	  %86 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78
DOALL:     	  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge27 ], [ %18, %83 ]
DOALL:     	  %88 = icmp sgt i64 %spec.select, %indvars.iv16
DOALL:     	  br i1 %88, label %89, label %._crit_edge26.loopexit, !prof !53
DOALL:     	  %90 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16
DOALL:     External nodes: 16
DOALL:     	  br label %97
DOALL:     	  br label %97
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %87
DOALL:     	  br label %._crit_edge26
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %75 = fmul float %74, 0x3E00000000000000
DOALL:     	  %76 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %78 = sext i32 %77 to i64
DOALL:     	  %79 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78, i32 3
DOALL:     	  br label %._crit_edge26
DOALL:     	  %84 = load i64, i64* %2, align 8, !tbaa !49
DOALL:     	  %85 = add nsw i64 %84, 1
DOALL:     	  store i64 %85, i64* %2, align 8, !tbaa !49
DOALL:     	  br label %87
DOALL:     Edges: 125
DOALL:     Loop-carried data dependences
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %95 = load float*, float** %94, align 8 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %111 = load float, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %80 = load float, float* %79, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %111 = load float, float* %110, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %95 = load float*, float** %94, align 8 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         %95 = load float*, float** %94, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %95 = load float*, float** %94, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         %80 = load float, float* %79, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %73 = tail call i64 @lrand48() #3
DOALL:     External nodes: 2
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %74 = sitofp i64 %73 to float
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %115 = add nsw i32 %77, 1
DOALL:     	  %storemerge = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ]
DOALL:     	  %68 = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ]
DOALL:     	  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     	  %69 = sext i32 %68 to i64
DOALL:     	  %70 = load i64, i64* %6, align 8, !tbaa !30
DOALL:     	  %71 = icmp sgt i64 %70, %69
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %77 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     External nodes: 11
DOALL:     	  br label %67
DOALL:     	  %73 = tail call i64 @lrand48() #3
DOALL:     	  %74 = sitofp i64 %73 to float
DOALL:     	  %75 = fmul float %74, 0x3E00000000000000
DOALL:     	  %76 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %78 = sext i32 %77 to i64
DOALL:     	  %79 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78, i32 3
DOALL:     	  %80 = load float, float* %79, align 8, !tbaa !47
DOALL:     	  %81 = fdiv float %80, %1
DOALL:     	  %82 = fcmp olt float %75, %81
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     Edges: 31
DOALL:     Loop-carried data dependences
DOALL:         %115 = add nsw i32 %77, 1 --->   %storemerge = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ] via variable
DOALL:         %115 = add nsw i32 %77, 1 --->   %68 = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ] via variable
DOALL:         store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 --->   store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %84 = load i64, i64* %2, align 8, !tbaa !49
DOALL:     	  %85 = add nsw i64 %84, 1
DOALL:     	  store i64 %85, i64* %2, align 8, !tbaa !49
DOALL:     External nodes: 1
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     Edges: 8
DOALL:     Loop-carried data dependences
DOALL:         store i64 %85, i64* %2, align 8, !tbaa !49 --->   store i64 %85, i64* %2, align 8, !tbaa !49 via memory
DOALL:         store i64 %85, i64* %2, align 8, !tbaa !49 --->   %84 = load i64, i64* %2, align 8, !tbaa !49 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 14
DOALL:     	  %93 = load float*, float** %92, align 8
DOALL:     	  %.0.i = phi float [ %106, %99 ], [ 0.000000e+00, %89 ]
DOALL:     	  %100 = getelementptr inbounds float, float* %93, i64 %indvars.iv.i
DOALL:     	  %101 = load float, float* %100, align 4, !tbaa !43
DOALL:     	  %104 = fsub float %101, %103
DOALL:     	  %105 = fmul float %104, %104
DOALL:     	  %106 = fadd float %.0.i, %105
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %97 ]
DOALL:     	  %109 = fmul float %.0.i.lcssa, %108
DOALL:     	  %112 = fcmp olt float %109, %111
DOALL:     	  br i1 %112, label %113, label %.._crit_edge27_crit_edge, !prof !54
DOALL:     	  store float %109, float* %110, align 8, !tbaa !47
DOALL:     	  %114 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 2
DOALL:     	  store i64 %78, i64* %114, align 8, !tbaa !48
DOALL:     External nodes: 11
DOALL:     	  %92 = getelementptr inbounds %struct.Point, %struct.Point* %86, i64 0, i32 1
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %99 ], [ 0, %89 ]
DOALL:     	  br i1 %98, label %99, label %_Z4distRK5PointS1_i.exit, !prof !42
DOALL:     	  %103 = load float, float* %102, align 4, !tbaa !43
DOALL:     	  %108 = load float, float* %107, align 8, !tbaa !45
DOALL:     	  %110 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 3
DOALL:     	  %111 = load float, float* %110, align 8, !tbaa !47
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %._crit_edge27
DOALL:     	  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge27 ], [ %18, %83 ]
DOALL:     	  br i1 %88, label %89, label %._crit_edge26.loopexit, !prof !53
DOALL:     Edges: 43
DOALL:     Loop-carried data dependences
DOALL:         %93 = load float*, float** %92, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %93 = load float*, float** %92, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 11
DOALL:     	  %26 = load float*, float** %25, align 8
DOALL:     	  %.0.i2 = phi float [ %39, %32 ], [ 0.000000e+00, %21 ]
DOALL:     	  %33 = getelementptr inbounds float, float* %26, i64 %indvars.iv.i1
DOALL:     	  %34 = load float, float* %33, align 4, !tbaa !43
DOALL:     	  %37 = fsub float %34, %36
DOALL:     	  %38 = fmul float %37, %37
DOALL:     	  %39 = fadd float %.0.i2, %38
DOALL:     	  %.0.i2.lcssa = phi float [ %.0.i2, %30 ]
DOALL:     	  %42 = fmul float %.0.i2.lcssa, %41
DOALL:     	  store float %42, float* %43, align 8, !tbaa !47
DOALL:     	  store i64 0, i64* %44, align 8, !tbaa !48
DOALL:     External nodes: 8
DOALL:     	  br i1 %20, label %21, label %45, !prof !39
DOALL:     	  %25 = getelementptr inbounds %struct.Point, %struct.Point* %23, i64 0, i32 1
DOALL:     	  %indvars.iv.i1 = phi i64 [ %indvars.iv.next.i3, %32 ], [ 0, %21 ]
DOALL:     	  br i1 %31, label %32, label %_Z4distRK5PointS1_i.exit4, !prof !42
DOALL:     	  %36 = load float, float* %35, align 4, !tbaa !43
DOALL:     	  %41 = load float, float* %40, align 8, !tbaa !45
DOALL:     	  %43 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 %indvars.iv20, i32 3
DOALL:     	  %44 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 %indvars.iv20, i32 2
DOALL:     Edges: 33
DOALL:     Loop-carried data dependences
DOALL:         %26 = load float*, float** %25, align 8 --->   store i64 0, i64* %44, align 8, !tbaa !48 via memory
DOALL:         %26 = load float*, float** %25, align 8 --->   store float %42, float* %43, align 8, !tbaa !47 via memory
DOALL:         store float %42, float* %43, align 8, !tbaa !47 --->   %26 = load float*, float** %25, align 8 via memory
DOALL:         store i64 0, i64* %44, align 8, !tbaa !48 --->   %26 = load float*, float** %25, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 8
DOALL:     	  %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57)
DOALL:     	  %61 = fmul float %58, %60
DOALL:     	  %63 = load float, float* %62, align 8, !tbaa !47
DOALL:     	  %64 = fcmp olt float %61, %63
DOALL:     	  br i1 %64, label %65, label %.._crit_edge25_crit_edge
DOALL:     	  store float %61, float* %62, align 8, !tbaa !47
DOALL:     	  %66 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18, i32 2
DOALL:     	  store i64 %50, i64* %66, align 8, !tbaa !48
DOALL:     External nodes: 11
DOALL:     	  %50 = sext i32 %49 to i64
DOALL:     	  %indvars.iv18 = phi i64 [ %indvars.iv.next19, %._crit_edge25 ], [ %18, %.preheader.preheader ]
DOALL:     	  br i1 %52, label %53, label %.loopexit.loopexit
DOALL:     	  %54 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %55 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %50
DOALL:     	  %56 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18
DOALL:     	  %57 = load i32, i32* %17, align 8, !tbaa !41
DOALL:     	  %60 = load float, float* %59, align 8, !tbaa !45
DOALL:     	  %62 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18, i32 3
DOALL:     	  br label %._crit_edge25
DOALL:     	  br label %._crit_edge25
DOALL:     Edges: 33
DOALL:     Loop-carried data dependences
DOALL:         %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) --->   store i64 %50, i64* %66, align 8, !tbaa !48 via memory
DOALL:         %63 = load float, float* %62, align 8, !tbaa !47 --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   %63 = load float, float* %62, align 8, !tbaa !47 via memory
DOALL:         store i64 %50, i64* %66, align 8, !tbaa !48 --->   store i64 %50, i64* %66, align 8, !tbaa !48 via memory
DOALL:         store i64 %50, i64* %66, align 8, !tbaa !48 --->   %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: _Z8pkmedianP6PointsllPliP17pthread_barrier_t (284 instructions. The inlining will add 197 instructions),   %96 = tail call float @_Z7pspeedyP6PointsfPliP17pthread_barrier_t(%struct.Points* %0, float %95, i64* nonnull @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, i32 0, %union.pthread_barrier_t* %5)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv12, %4" (2.681239e-04%)
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv10, %5" (2.000669e-05%)
Noelle:     Loop "  %65 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %62, align 8, !tbaa !47" (4.730704e+01%)
Noelle:     Loop "  %89 = icmp sgt i64 %67, %indvars.iv" (2.085420e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.454273e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.035990e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.727565e-08%)
Noelle:     Loop "  %50 = icmp slt i64 %.02, %spec.select" (2.600161e-07%)
Noelle:     Loop "  %65 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.653818e-01%)
Noelle:     Loop "  %101 = icmp slt i64 %100, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.321340e-01%)
Noelle:     Loop "  %77 = load i64, i64* %74, align 8, !tbaa !40" (1.370318e-03%)
Noelle:     Loop "  %114 = icmp sgt i64 %111, %indvars.iv" (2.979148e-04%)
Noelle:     Loop "  %128 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.342811e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.399784e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.533070e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.333797e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.108938e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.538305e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.180124e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.485918e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.526627e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i, %226" (2.388663e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select, %indvars.iv" (5.065924e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %286 = fdiv double %.0, %.02" (9.342815e+01%)
Noelle:     Loop "  %289 = icmp slt i64 %.01, %6" (9.342815e+01%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.337478e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %18" (1.887389e-05%)
Noelle:     Loop "  %32 = icmp slt i64 %.01.us, %6" (9.337476e+01%)
Noelle:     Loop "  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.399784e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv42.i, %76" (5.533070e-05%)
Noelle:     Loop "  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.333797e-01%)
Noelle:     Loop "  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.108938e+01%)
Noelle:     Loop "  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.538305e-01%)
Noelle:     Loop "  %169 = icmp slt i32 %.03.i, %114" (3.180124e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %indvars.iv34.i, %196" (7.485918e-05%)
Noelle:     Loop "  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.526627e-01%)
Noelle:     Loop "  %243 = icmp slt i64 %indvars.iv.i.i, %241" (2.388663e-01%)
Noelle:     Loop "  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.065924e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.027950e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.013867e-01%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv.i1, %29" (1.987651e-01%)
Noelle:     Loop "  %49 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.354161e+10%)
Noelle:     Loop "  %52 = icmp sgt i64 %spec.select, %indvars.iv18" (3.354161e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.588291e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.563266e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv.i, %96" (8.447517e-01%)
Noelle:     Loop "  %117 = icmp sgt i64 %spec.select, %indvars.iv14" (1.310830e-03%)
Noelle:     Loop "  %136 = icmp slt i64 %indvars.iv, %133" (1.018245e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.950303e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.866902e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.242202e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.203473e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.055476e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.979148e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.177186e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.276875e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.785809e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.521792e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.600161e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.967216e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.900303e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.884662e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv12, %4" (2.667091e-04%)
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv10, %5" (1.990113e-05%)
Noelle:     Loop "  %65 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %62, align 8, !tbaa !47" (4.705727e+01%)
Noelle:     Loop "  %89 = icmp sgt i64 %67, %indvars.iv" (2.074416e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.404357e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.009417e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.702620e-08%)
Noelle:     Loop "  %50 = icmp slt i64 %.02, %spec.select" (2.586441e-07%)
Noelle:     Loop "  %65 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.639815e-01%)
Noelle:     Loop "  %213 = icmp slt i64 %212, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.290149e-01%)
Noelle:     Loop "  %77 = load i64, i64* %74, align 8, !tbaa !40" (1.363087e-03%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.001028e-01%)
Noelle:     Loop "  %117 = icmp slt i64 %indvars.iv.i1.i, %115" (9.885816e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.268969e-01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.256522e-01%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv.i.i, %163" (4.201472e-01%)
Noelle:     Loop "  %184 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.519568e-04%)
Noelle:     Loop "  %201 = icmp slt i64 %indvars.iv.i, %198" (5.064360e-08%)
Noelle:     Loop "  %226 = icmp sgt i64 %223, %indvars.iv" (2.963428e-04%)
Noelle:     Loop "  %240 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.293513e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.366015e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.503874e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.305653e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.060875e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.493252e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.163344e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.446418e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.513296e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i, %226" (2.376059e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select, %indvars.iv" (5.039194e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %286 = fdiv double %.0, %.02" (9.293517e+01%)
Noelle:     Loop "  %289 = icmp slt i64 %.01, %6" (9.293517e+01%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.288209e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %18" (1.877431e-05%)
Noelle:     Loop "  %32 = icmp slt i64 %.01.us, %6" (9.288207e+01%)
Noelle:     Loop "  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.366015e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv42.i, %76" (5.503874e-05%)
Noelle:     Loop "  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.305653e-01%)
Noelle:     Loop "  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.060875e+01%)
Noelle:     Loop "  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.493252e-01%)
Noelle:     Loop "  %169 = icmp slt i32 %.03.i, %114" (3.163344e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %indvars.iv34.i, %196" (7.446418e-05%)
Noelle:     Loop "  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.513296e-01%)
Noelle:     Loop "  %243 = icmp slt i64 %indvars.iv.i.i, %241" (2.376059e-01%)
Noelle:     Loop "  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.039194e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (8.980314e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.003241e-01%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv.i1, %29" (1.977163e-01%)
Noelle:     Loop "  %49 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.336463e+10%)
Noelle:     Loop "  %52 = icmp sgt i64 %spec.select, %indvars.iv18" (3.336463e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.542975e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.518082e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv.i, %96" (8.402944e-01%)
Noelle:     Loop "  %117 = icmp sgt i64 %spec.select, %indvars.iv14" (1.303914e-03%)
Noelle:     Loop "  %136 = icmp slt i64 %indvars.iv, %133" (1.012872e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.913629e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.830669e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.219817e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.181293e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.044630e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.963428e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.155145e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.259585e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.771109e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.508486e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.586441e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.941007e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.874447e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.874718e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint:       There are 120 different instructions and 264 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.VoNJfbgnnE -o /tmp/tmp.VoNJfbgnnE
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.VoNJfbgnnE -o /tmp/tmp.VoNJfbgnnE
NOELLE: FixedPoint:     Invocation 5
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
Inliner: Start
Inliner:   Number of program instructions = 2261
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 15
DOALL:     	  %219 = load float, float* %218, align 8, !tbaa !54
DOALL:     	  %223 = load float*, float** %222, align 8
DOALL:     	  %225 = load float*, float** %224, align 8
DOALL:     	  %.0.i = phi float [ %236, %229 ], [ 0.000000e+00, %217 ]
DOALL:     	  %230 = getelementptr inbounds float, float* %223, i64 %indvars.iv.i
DOALL:     	  %231 = load float, float* %230, align 4, !tbaa !66
DOALL:     	  %232 = getelementptr inbounds float, float* %225, i64 %indvars.iv.i
DOALL:     	  %233 = load float, float* %232, align 4, !tbaa !66
DOALL:     	  %234 = fsub float %231, %233
DOALL:     	  %235 = fmul float %234, %234
DOALL:     	  %236 = fadd float %.0.i, %235
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %227 ]
DOALL:     	  %237 = fmul float %219, %.0.i.lcssa
DOALL:     	  store float %237, float* %238, align 8, !tbaa !57
DOALL:     	  store i64 %0, i64* %205, align 8, !tbaa !59
DOALL:     External nodes: 9
DOALL:     	  br i1 %brmerge, label %217, label %.._crit_edge59_crit_edge, !prof !64
DOALL:     	  %218 = getelementptr inbounds %struct.Point, %struct.Point* %204, i64 0, i32 0
DOALL:     	  %222 = getelementptr inbounds %struct.Point, %struct.Point* %204, i64 0, i32 1
DOALL:     	  %224 = getelementptr inbounds %struct.Point, %struct.Point* %220, i64 0, i32 1
DOALL:     	  br i1 %228, label %229, label %_Z4distRK5PointS1_i.exit, !prof !65
DOALL:     	  %205 = getelementptr inbounds %struct.Point, %struct.Point* %203, i64 %indvars.iv32, i32 2
DOALL:     	  %206 = load i64, i64* %205, align 8, !tbaa !59
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %229 ], [ 0, %217 ]
DOALL:     	  %238 = getelementptr inbounds %struct.Point, %struct.Point* %203, i64 %indvars.iv32, i32 3
DOALL:     Edges: 51
DOALL:     Loop-carried data dependences
DOALL:         %219 = load float, float* %218, align 8, !tbaa !54 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %219 = load float, float* %218, align 8, !tbaa !54 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %223 = load float*, float** %222, align 8 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %223 = load float*, float** %222, align 8 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %225 = load float*, float** %224, align 8 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %225 = load float*, float** %224, align 8 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %219 = load float, float* %218, align 8, !tbaa !54 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %223 = load float*, float** %222, align 8 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %225 = load float*, float** %224, align 8 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %225 = load float*, float** %224, align 8 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %219 = load float, float* %218, align 8, !tbaa !54 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %223 = load float*, float** %222, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 9
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 5
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  %.pre7.i = load double, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     External nodes: 6
DOALL:     	  br i1 %32, label %35, label %33, !prof !37
DOALL:     	  %60 = tail call noalias i8* @malloc(i64 %59) #3
DOALL:     	  br i1 %200, label %201, label %.loopexit.loopexit.i, !prof !53
DOALL:     	  %212 = fadd double %199, %211
DOALL:     	  br i1 %213, label %.preheader.i, label %281, !prof !66
DOALL:     	  %283 = fsub double -0.000000e+00, %.pre7.i
DOALL:     Edges: 24
DOALL:     Loop-carried data dependences
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %.pre7.i = load double, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 288
DOALL:     	  %38 = load i32, i32* %37, align 4, !tbaa !33
DOALL:     	  %39 = sext i32 %38 to i64
DOALL:     	  %41 = load i64, i64* %40, align 8, !tbaa !38
DOALL:     	  %42 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %43 = sext i32 %42 to i64
DOALL:     	  %44 = sdiv i64 %41, %43
DOALL:     	  %45 = add nsw i32 %42, -1
DOALL:     	  %46 = icmp eq i32 %45, 0
DOALL:     	  %spec.select.i = select i1 %46, i64 %41, i64 %44, !prof !42
DOALL:     	  %47 = load i64, i64* %4, align 8, !tbaa !43
DOALL:     	  %48 = trunc i64 %47 to i32
DOALL:     	  %49 = add i32 %48, 2
DOALL:     	  %50 = and i32 %49, 3
DOALL:     	  %51 = icmp eq i32 %50, 0
DOALL:     	  br i1 %51, label %.._crit_edge52_crit_edge.i, label %52, !prof !44
DOALL:     	  %53 = sdiv i32 %49, 4
DOALL:     	  %54 = shl nsw i32 %53, 2
DOALL:     	  %55 = add i32 %54, 4
DOALL:     	  %.010.i = phi i32 [ %55, %52 ], [ %49, %.._crit_edge52_crit_edge.i ]
DOALL:     	  %56 = add nsw i32 %42, 1
DOALL:     	  %57 = mul nsw i32 %.010.i, %56
DOALL:     	  %58 = sext i32 %57 to i64
DOALL:     	  %59 = shl nsw i64 %58, 3
DOALL:     	  %60 = tail call noalias i8* @malloc(i64 %59) #3
DOALL:     	  store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45
DOALL:     	  store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %61 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %62 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv44.i = phi i64 [ %indvars.iv.next45.i, %._crit_edge54.i ], [ 0, %._crit_edge52.i ]
DOALL:     	  %.016.i = phi i32 [ %.117.i, %._crit_edge54.i ], [ 0, %._crit_edge52.i ]
DOALL:     	  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i
DOALL:     	  br i1 %64, label %65, label %72, !prof !48
DOALL:     	  %66 = getelementptr inbounds i8, i8* %61, i64 %indvars.iv44.i
DOALL:     	  %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51
DOALL:     	  %68 = icmp eq i8 %67, 0
DOALL:     	  br i1 %68, label %.._crit_edge54_crit_edge.i, label %69, !prof !52
DOALL:     	  %70 = add nsw i32 %.016.i, 1
DOALL:     	  %71 = getelementptr inbounds i32, i32* %62, i64 %indvars.iv44.i
DOALL:     	  store i32 %.016.i, i32* %71, align 4, !tbaa !33
DOALL:     	  %.117.i = phi i32 [ %70, %69 ], [ %.016.i, %.._crit_edge54_crit_edge.i ]
DOALL:     	  %indvars.iv.next45.i = add nuw i64 %indvars.iv44.i, 1
DOALL:     	  %.016.i.lcssa = phi i32 [ %.016.i, %63 ]
DOALL:     	  %73 = sitofp i32 %.016.i.lcssa to double
DOALL:     	  %74 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  store double %73, double* %74, align 8, !tbaa !46
DOALL:     	  %75 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %76 = sext i32 %75 to i64
DOALL:     	  %77 = sext i32 %.010.i to i64
DOALL:     	  %indvars.iv42.i = phi i64 [ %indvars.iv.next43.i, %80 ], [ 0, %72 ]
DOALL:     	  %.012.i = phi i32 [ %86, %80 ], [ 0, %72 ]
DOALL:     	  %79 = icmp slt i64 %indvars.iv42.i, %76
DOALL:     	  br i1 %79, label %80, label %._crit_edge55.loopexit.i, !prof !53
DOALL:     	  %81 = mul nsw i64 %indvars.iv42.i, %77
DOALL:     	  %82 = getelementptr inbounds double, double* %74, i64 %81
DOALL:     	  %83 = load double, double* %82, align 8, !tbaa !46
DOALL:     	  %84 = fptosi double %83 to i32
DOALL:     	  %85 = sitofp i32 %.012.i to double
DOALL:     	  store double %85, double* %82, align 8, !tbaa !46
DOALL:     	  %86 = add nsw i32 %.012.i, %84
DOALL:     	  %indvars.iv.next43.i = add nuw nsw i64 %indvars.iv42.i, 1
DOALL:     	  %87 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %88 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv40.i = phi i64 [ %indvars.iv.next41.i, %._crit_edge56.i ], [ 0, %._crit_edge55.loopexit.i ]
DOALL:     	  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i
DOALL:     	  br i1 %90, label %91, label %101, !prof !48
DOALL:     	  %92 = getelementptr inbounds i8, i8* %87, i64 %indvars.iv40.i
DOALL:     	  %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51
DOALL:     	  %94 = icmp eq i8 %93, 0
DOALL:     	  br i1 %94, label %.._crit_edge56_crit_edge.i, label %95, !prof !52
DOALL:     	  %96 = load double, double* %74, align 8, !tbaa !46
DOALL:     	  %97 = fptosi double %96 to i32
DOALL:     	  %98 = getelementptr inbounds i32, i32* %88, i64 %indvars.iv40.i
DOALL:     	  %99 = load i32, i32* %98, align 4, !tbaa !33
DOALL:     	  %100 = add nsw i32 %99, %97
DOALL:     	  store i32 %100, i32* %98, align 4, !tbaa !33
DOALL:     	  %indvars.iv.next41.i = add nuw i64 %indvars.iv40.i, 1
DOALL:     	  %102 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54
DOALL:     	  %103 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %104 = bitcast double* %103 to i8*
DOALL:     	  %105 = sext i32 %.010.i to i64
DOALL:     	  %106 = shl nsw i64 %105, 3
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55
DOALL:     	  %107 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %108 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %109 = mul nsw i32 %108, %.010.i
DOALL:     	  %110 = sext i32 %109 to i64
DOALL:     	  %111 = getelementptr inbounds double, double* %107, i64 %110
DOALL:     	  %112 = bitcast double* %111 to i8*
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55
DOALL:     	  %113 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %114 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %indvars.iv38.i = phi i64 [ %indvars.iv.next39.i, %150 ], [ 0, %101 ]
DOALL:     	  %.013.i = phi double [ %.114.i, %150 ], [ 0.000000e+00, %101 ]
DOALL:     	  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i
DOALL:     	  br i1 %118, label %119, label %151, !prof !48
DOALL:     	  %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56
DOALL:     	  %121 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i
DOALL:     	  %122 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %39
DOALL:     	  %123 = load i32, i32* %116, align 8, !tbaa !57
DOALL:     	  %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3
DOALL:     	  %125 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 0
DOALL:     	  %126 = load float, float* %125, align 8, !tbaa !58
DOALL:     	  %127 = fmul float %124, %126
DOALL:     	  %128 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 3
DOALL:     	  %129 = load float, float* %128, align 8, !tbaa !61
DOALL:     	  %130 = fcmp olt float %127, %129
DOALL:     	  br i1 %130, label %131, label %137, !prof !62
DOALL:     	  %132 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  %133 = getelementptr inbounds i8, i8* %132, i64 %indvars.iv38.i
DOALL:     	  store i8 1, i8* %133, align 1, !tbaa !49
DOALL:     	  %134 = fsub float %127, %129
DOALL:     	  %135 = fpext float %134 to double
DOALL:     	  %136 = fadd double %.013.i, %135
DOALL:     	  %138 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 2
DOALL:     	  %139 = load i64, i64* %138, align 8, !tbaa !63
DOALL:     	  %140 = fsub float %129, %127
DOALL:     	  %141 = fpext float %140 to double
DOALL:     	  %142 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45
DOALL:     	  %sext.i = shl i64 %139, 32
DOALL:     	  %143 = ashr exact i64 %sext.i, 32
DOALL:     	  %144 = getelementptr inbounds i32, i32* %142, i64 %143
DOALL:     	  %145 = load i32, i32* %144, align 4, !tbaa !33
DOALL:     	  %146 = sext i32 %145 to i64
DOALL:     	  %147 = getelementptr inbounds double, double* %113, i64 %146
DOALL:     	  %148 = load double, double* %147, align 8, !tbaa !46
DOALL:     	  %149 = fadd double %148, %141
DOALL:     	  store double %149, double* %147, align 8, !tbaa !46
DOALL:     	  %.114.i = phi double [ %136, %131 ], [ %.013.i, %137 ]
DOALL:     	  %indvars.iv.next39.i = add nuw i64 %indvars.iv38.i, 1
DOALL:     	  %.013.i.lcssa = phi double [ %.013.i, %117 ]
DOALL:     	  %152 = bitcast double* %113 to i8*
DOALL:     	  %153 = mul nsw i32 %114, %.010.i
DOALL:     	  %154 = sext i32 %153 to i64
DOALL:     	  %155 = getelementptr inbounds double, double* %113, i64 %154
DOALL:     	  %156 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %158 = phi i8* [ %187, %._crit_edge58.i ], [ %152, %151 ]
DOALL:     	  %indvars.iv36.i = phi i64 [ %indvars.iv.next37.i, %._crit_edge58.i ], [ 0, %151 ]
DOALL:     	  %.215.i = phi double [ %.4.i, %._crit_edge58.i ], [ %.013.i.lcssa, %151 ]
DOALL:     	  %.09.i = phi i32 [ %.2.i, %._crit_edge58.i ], [ 0, %151 ]
DOALL:     	  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i
DOALL:     	  br i1 %159, label %160, label %188, !prof !48
DOALL:     	  %161 = getelementptr inbounds i8, i8* %156, i64 %indvars.iv36.i
DOALL:     	  %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51
DOALL:     	  %163 = icmp eq i8 %162, 0
DOALL:     	  br i1 %163, label %.._crit_edge58_crit_edge.i, label %164, !prof !52
DOALL:     	  %165 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8
DOALL:     	  %166 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %167 = getelementptr inbounds i32, i32* %166, i64 %indvars.iv36.i
DOALL:     	  %.04.i = phi double [ %14, %164 ], [ %177, %170 ]
DOALL:     	  %.03.i = phi i32 [ 0, %164 ], [ %178, %170 ]
DOALL:     	  %169 = icmp slt i32 %.03.i, %114
DOALL:     	  br i1 %169, label %170, label %179, !prof !64
DOALL:     	  %171 = load i32, i32* %167, align 4, !tbaa !33
DOALL:     	  %172 = mul nsw i32 %.03.i, %.010.i
DOALL:     	  %173 = add nsw i32 %171, %172
DOALL:     	  %174 = sext i32 %173 to i64
DOALL:     	  %175 = getelementptr inbounds double, double* %165, i64 %174
DOALL:     	  %176 = load double, double* %175, align 8, !tbaa !46
DOALL:     	  %177 = fadd double %.04.i, %176
DOALL:     	  %178 = add nuw nsw i32 %.03.i, 1
DOALL:     	  %.04.i.lcssa = phi double [ %.04.i, %168 ]
DOALL:     	  %180 = bitcast double* %165 to i8*
DOALL:     	  %181 = load i32, i32* %167, align 4, !tbaa !33
DOALL:     	  %182 = sext i32 %181 to i64
DOALL:     	  %183 = getelementptr inbounds double, double* %155, i64 %182
DOALL:     	  store double %.04.i.lcssa, double* %183, align 8, !tbaa !46
DOALL:     	  %184 = fcmp ogt double %.04.i.lcssa, 0.000000e+00
DOALL:     	  %185 = fsub double %.215.i, %.04.i.lcssa
DOALL:     	  %.3.i = select i1 %184, double %185, double %.215.i, !prof !65
DOALL:     	  %186 = zext i1 %184 to i32
DOALL:     	  %.1.i = add nsw i32 %.09.i, %186
DOALL:     	  %187 = phi i8* [ %180, %179 ], [ %158, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %.4.i = phi double [ %.3.i, %179 ], [ %.215.i, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %.2.i = phi i32 [ %.1.i, %179 ], [ %.09.i, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %indvars.iv.next37.i = add nuw i64 %indvars.iv36.i, 1
DOALL:     	  %.lcssa = phi i8* [ %158, %157 ]
DOALL:     	  %.215.i.lcssa = phi double [ %.215.i, %157 ]
DOALL:     	  %.09.i.lcssa = phi i32 [ %.09.i, %157 ]
DOALL:     	  %189 = add nsw i32 %.010.i, -2
DOALL:     	  %190 = sitofp i32 %.09.i.lcssa to double
DOALL:     	  %191 = sext i32 %189 to i64
DOALL:     	  %192 = getelementptr inbounds double, double* %113, i64 %191
DOALL:     	  store double %190, double* %192, align 8, !tbaa !46
DOALL:     	  %193 = add nsw i32 %189, 1
DOALL:     	  %194 = sext i32 %193 to i64
DOALL:     	  %195 = getelementptr inbounds double, double* %113, i64 %194
DOALL:     	  store double %.215.i.lcssa, double* %195, align 8, !tbaa !46
DOALL:     	  %196 = sext i32 %114 to i64
DOALL:     	  %197 = sext i32 %189 to i64
DOALL:     	  %indvars.iv34.i = phi i64 [ %indvars.iv.next35.i, %201 ], [ 0, %188 ]
DOALL:     	  %199 = phi double [ %212, %201 ], [ %14, %188 ]
DOALL:     	  %200 = icmp slt i64 %indvars.iv34.i, %196
DOALL:     	  br i1 %200, label %201, label %.loopexit.loopexit.i, !prof !53
DOALL:     	  %202 = mul nsw i64 %indvars.iv34.i, %105
DOALL:     	  %203 = add nsw i64 %202, %197
DOALL:     	  %204 = getelementptr inbounds double, double* %113, i64 %203
DOALL:     	  %205 = load double, double* %204, align 8, !tbaa !46
DOALL:     	  %206 = fptosi double %205 to i32
DOALL:     	  %207 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %208 = add nsw i32 %207, %206
DOALL:     	  store i32 %208, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %209 = add nsw i64 %203, 1
DOALL:     	  %210 = getelementptr inbounds double, double* %113, i64 %209
DOALL:     	  %211 = load double, double* %210, align 8, !tbaa !46
DOALL:     	  %212 = fadd double %199, %211
DOALL:     	  %indvars.iv.next35.i = add nuw nsw i64 %indvars.iv34.i, 1
DOALL:     	  %.lcssa1 = phi double [ %199, %198 ]
DOALL:     	  %213 = fcmp olt double %.lcssa1, 0.000000e+00
DOALL:     	  br i1 %213, label %.preheader.i, label %281, !prof !66
DOALL:     	  %indvars.iv32.i = phi i64 [ %indvars.iv.next33.i, %._crit_edge59.i ], [ 0, %.preheader.i ]
DOALL:     	  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i
DOALL:     	  br i1 %215, label %216, label %254, !prof !67
DOALL:     	  %217 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45
DOALL:     	  %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56
DOALL:     	  %219 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i
DOALL:     	  %220 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 2
DOALL:     	  %221 = load i64, i64* %220, align 8, !tbaa !63
DOALL:     	  %222 = getelementptr inbounds i32, i32* %217, i64 %221
DOALL:     	  %223 = load i32, i32* %222, align 4, !tbaa !33
DOALL:     	  %224 = sext i32 %223 to i64
DOALL:     	  %225 = getelementptr inbounds double, double* %155, i64 %224
DOALL:     	  %226 = load double, double* %225, align 8, !tbaa !46
DOALL:     	  %227 = fcmp ogt double %226, 0.000000e+00
DOALL:     	  %228 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  %229 = getelementptr inbounds i8, i8* %228, i64 %indvars.iv32.i
DOALL:     	  %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51
DOALL:     	  %231 = icmp ne i8 %230, 0
DOALL:     	  %brmerge.i = or i1 %231, %227
DOALL:     	  br i1 %brmerge.i, label %232, label %.._crit_edge59_crit_edge.i, !prof !68
DOALL:     	  %233 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 0
DOALL:     	  %234 = load float, float* %233, align 8, !tbaa !58
DOALL:     	  %235 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %39
DOALL:     	  %236 = load i32, i32* %116, align 8, !tbaa !57
DOALL:     	  %237 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 1
DOALL:     	  %238 = load float*, float** %237, align 8
DOALL:     	  %239 = getelementptr inbounds %struct.Point, %struct.Point* %235, i64 0, i32 1
DOALL:     	  %240 = load float*, float** %239, align 8
DOALL:     	  %241 = sext i32 %236 to i64
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %244 ], [ 0, %232 ]
DOALL:     	  %.0.i.i = phi float [ %251, %244 ], [ 0.000000e+00, %232 ]
DOALL:     	  %243 = icmp slt i64 %indvars.iv.i.i, %241
DOALL:     	  br i1 %243, label %244, label %_Z4distRK5PointS1_i.exit.i, !prof !69
DOALL:     	  %245 = getelementptr inbounds float, float* %238, i64 %indvars.iv.i.i
DOALL:     	  %246 = load float, float* %245, align 4, !tbaa !70
DOALL:     	  %247 = getelementptr inbounds float, float* %240, i64 %indvars.iv.i.i
DOALL:     	  %248 = load float, float* %247, align 4, !tbaa !70
DOALL:     	  %249 = fsub float %246, %248
DOALL:     	  %250 = fmul float %249, %249
DOALL:     	  %251 = fadd float %.0.i.i, %250
DOALL:     	  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %242 ]
DOALL:     	  %252 = fmul float %234, %.0.i.i.lcssa
DOALL:     	  %253 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 3
DOALL:     	  store float %252, float* %253, align 8, !tbaa !61
DOALL:     	  store i64 %39, i64* %220, align 8, !tbaa !63
DOALL:     	  %indvars.iv.next33.i = add nuw i64 %indvars.iv32.i, 1
DOALL:     	  %255 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %256 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %._crit_edge60.i ], [ 0, %254 ]
DOALL:     	  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i
DOALL:     	  br i1 %258, label %259, label %271, !prof !67
DOALL:     	  %260 = getelementptr inbounds i8, i8* %255, i64 %indvars.iv.i
DOALL:     	  %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51
DOALL:     	  %262 = icmp eq i8 %261, 0
DOALL:     	  br i1 %262, label %.._crit_edge60_crit_edge.i, label %263, !prof !71
DOALL:     	  %264 = getelementptr inbounds i32, i32* %256, i64 %indvars.iv.i
DOALL:     	  %265 = load i32, i32* %264, align 4, !tbaa !33
DOALL:     	  %266 = sext i32 %265 to i64
DOALL:     	  %267 = getelementptr inbounds double, double* %155, i64 %266
DOALL:     	  %268 = load double, double* %267, align 8, !tbaa !46
DOALL:     	  %269 = fcmp ogt double %268, 0.000000e+00
DOALL:     	  br i1 %269, label %270, label %.._crit_edge60_crit_edge10.i, !prof !72
DOALL:     	  store i8 0, i8* %260, align 1, !tbaa !49
DOALL:     	  %indvars.iv.next.i = add nuw i64 %indvars.iv.i, 1
DOALL:     	  %272 = icmp sle i64 0, %39
DOALL:     	  %273 = icmp sgt i64 %spec.select.i, %39
DOALL:     	  %or.cond.i = and i1 %272, %273
DOALL:     	  br i1 %or.cond.i, label %274, label %.._crit_edge62_crit_edge.i, !prof !73
DOALL:     	  %275 = getelementptr inbounds i8, i8* %255, i64 %39
DOALL:     	  store i8 1, i8* %275, align 1, !tbaa !49
DOALL:     	  %276 = load i64, i64* %4, align 8, !tbaa !43
DOALL:     	  %277 = add nsw i64 %276, 1
DOALL:     	  %278 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %279 = sext i32 %278 to i64
DOALL:     	  %280 = sub nsw i64 %277, %279
DOALL:     	  store i64 %280, i64* %4, align 8, !tbaa !43
DOALL:     	  tail call void @free(i8* %.lcssa) #3
DOALL:     External nodes: 43
DOALL:     	  br i1 %32, label %35, label %33, !prof !37
DOALL:     	  %37 = getelementptr inbounds i32, i32* %1, i64 %36
DOALL:     	  %40 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 0
DOALL:     	  br label %._crit_edge52.i
DOALL:     	  br label %._crit_edge52.i
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %._crit_edge54.i
DOALL:     	  br label %._crit_edge54.i
DOALL:     	  br label %63
DOALL:     	  br label %78
DOALL:     	  br label %._crit_edge56.i
DOALL:     	  br label %._crit_edge56.i
DOALL:     	  br label %89
DOALL:     	  %115 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 2
DOALL:     	  %116 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 1
DOALL:     	  br label %150
DOALL:     	  br label %150
DOALL:     	  br label %117
DOALL:     	  br label %._crit_edge58.i
DOALL:     	  br label %168
DOALL:     	  br label %168
DOALL:     	  br label %._crit_edge58.i
DOALL:     	  br label %157
DOALL:     	  store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %198
DOALL:     	  br label %214
DOALL:     	  br label %._crit_edge59.i
DOALL:     	  br label %242
DOALL:     	  br label %242
DOALL:     	  br label %._crit_edge59.i
DOALL:     	  br label %214
DOALL:     	  br label %257
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %257
DOALL:     	  br label %._crit_edge62.i
DOALL:     	  br label %._crit_edge62.i
DOALL:     	  br label %_Z5pgainlP6PointsdPliP17pthread_barrier_t.exit
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %_Z5pgainlP6PointsdPliP17pthread_barrier_t.exit
DOALL:     	  %282 = phi double [ 0.000000e+00, %281 ], [ %.lcssa1, %._crit_edge62.i ]
DOALL:     Edges: 1248
DOALL:     Loop-carried data dependences
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %47 = load i64, i64* %4, align 8, !tbaa !43 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %166 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %142 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %132 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %114 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %156 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %276 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %108 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %228 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %75 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %42 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %61 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %217 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %62 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %38 = load i32, i32* %37, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %47 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %87 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %88 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %255 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %256 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %102 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         %74 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %103 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %107 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %113 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %145 = load i32, i32* %144, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %145 = load i32, i32* %144, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %165 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %171 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %171 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %181 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %181 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store i32 %208, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %223 = load i32, i32* %222, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %223 = load i32, i32* %222, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %265 = load i32, i32* %264, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %265 = load i32, i32* %264, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         %278 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   %47 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   %276 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 15
DOALL:     	  %234 = load float, float* %233, align 8, !tbaa !58
DOALL:     	  %238 = load float*, float** %237, align 8
DOALL:     	  %240 = load float*, float** %239, align 8
DOALL:     	  %.0.i.i = phi float [ %251, %244 ], [ 0.000000e+00, %232 ]
DOALL:     	  %245 = getelementptr inbounds float, float* %238, i64 %indvars.iv.i.i
DOALL:     	  %246 = load float, float* %245, align 4, !tbaa !70
DOALL:     	  %247 = getelementptr inbounds float, float* %240, i64 %indvars.iv.i.i
DOALL:     	  %248 = load float, float* %247, align 4, !tbaa !70
DOALL:     	  %249 = fsub float %246, %248
DOALL:     	  %250 = fmul float %249, %249
DOALL:     	  %251 = fadd float %.0.i.i, %250
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %242 ]
DOALL:     	  %252 = fmul float %234, %.0.i.i.lcssa
DOALL:     	  store float %252, float* %253, align 8, !tbaa !61
DOALL:     	  store i64 %39, i64* %220, align 8, !tbaa !63
DOALL:     External nodes: 9
DOALL:     	  %220 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 2
DOALL:     	  %221 = load i64, i64* %220, align 8, !tbaa !63
DOALL:     	  br i1 %brmerge.i, label %232, label %.._crit_edge59_crit_edge.i, !prof !68
DOALL:     	  %233 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 0
DOALL:     	  %237 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 1
DOALL:     	  %239 = getelementptr inbounds %struct.Point, %struct.Point* %235, i64 0, i32 1
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %244 ], [ 0, %232 ]
DOALL:     	  br i1 %243, label %244, label %_Z4distRK5PointS1_i.exit.i, !prof !69
DOALL:     	  %253 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 3
DOALL:     Edges: 51
DOALL:     Loop-carried data dependences
DOALL:         %238 = load float*, float** %237, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 10
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %73 = tail call i64 @lrand48() #3
DOALL:     External nodes: 2
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %74 = sitofp i64 %73 to float
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %84 = load i64, i64* %2, align 8, !tbaa !49
DOALL:     	  %85 = add nsw i64 %84, 1
DOALL:     	  store i64 %85, i64* %2, align 8, !tbaa !49
DOALL:     External nodes: 1
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     Edges: 8
DOALL:     Loop-carried data dependences
DOALL:         store i64 %85, i64* %2, align 8, !tbaa !49 --->   store i64 %85, i64* %2, align 8, !tbaa !49 via memory
DOALL:         store i64 %85, i64* %2, align 8, !tbaa !49 --->   %84 = load i64, i64* %2, align 8, !tbaa !49 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 39
DOALL:     	  %91 = load i32, i32* %17, align 8, !tbaa !41
DOALL:     	  %92 = getelementptr inbounds %struct.Point, %struct.Point* %86, i64 0, i32 1
DOALL:     	  %93 = load float*, float** %92, align 8
DOALL:     	  %94 = getelementptr inbounds %struct.Point, %struct.Point* %90, i64 0, i32 1
DOALL:     	  %95 = load float*, float** %94, align 8
DOALL:     	  %96 = sext i32 %91 to i64
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %99 ], [ 0, %89 ]
DOALL:     	  %.0.i = phi float [ %106, %99 ], [ 0.000000e+00, %89 ]
DOALL:     	  %98 = icmp slt i64 %indvars.iv.i, %96
DOALL:     	  br i1 %98, label %99, label %_Z4distRK5PointS1_i.exit, !prof !42
DOALL:     	  %100 = getelementptr inbounds float, float* %93, i64 %indvars.iv.i
DOALL:     	  %101 = load float, float* %100, align 4, !tbaa !43
DOALL:     	  %102 = getelementptr inbounds float, float* %95, i64 %indvars.iv.i
DOALL:     	  %103 = load float, float* %102, align 4, !tbaa !43
DOALL:     	  %104 = fsub float %101, %103
DOALL:     	  %105 = fmul float %104, %104
DOALL:     	  %106 = fadd float %.0.i, %105
DOALL:     	  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %97 ]
DOALL:     	  %107 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 0
DOALL:     	  %108 = load float, float* %107, align 8, !tbaa !45
DOALL:     	  %109 = fmul float %.0.i.lcssa, %108
DOALL:     	  %110 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 3
DOALL:     	  %111 = load float, float* %110, align 8, !tbaa !47
DOALL:     	  %112 = fcmp olt float %109, %111
DOALL:     	  br i1 %112, label %113, label %.._crit_edge27_crit_edge, !prof !54
DOALL:     	  store float %109, float* %110, align 8, !tbaa !47
DOALL:     	  %114 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 2
DOALL:     	  store i64 %78, i64* %114, align 8, !tbaa !48
DOALL:     	  %indvars.iv.next17 = add i64 %indvars.iv16, 1
DOALL:     	  %80 = load float, float* %79, align 8, !tbaa !47
DOALL:     	  %81 = fdiv float %80, %1
DOALL:     	  %82 = fcmp olt float %75, %81
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     	  %86 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78
DOALL:     	  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge27 ], [ %18, %83 ]
DOALL:     	  %88 = icmp sgt i64 %spec.select, %indvars.iv16
DOALL:     	  br i1 %88, label %89, label %._crit_edge26.loopexit, !prof !53
DOALL:     	  %90 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16
DOALL:     External nodes: 16
DOALL:     	  br label %97
DOALL:     	  br label %97
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %87
DOALL:     	  br label %._crit_edge26
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %75 = fmul float %74, 0x3E00000000000000
DOALL:     	  %76 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %78 = sext i32 %77 to i64
DOALL:     	  %79 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78, i32 3
DOALL:     	  br label %._crit_edge26
DOALL:     	  %84 = load i64, i64* %2, align 8, !tbaa !49
DOALL:     	  %85 = add nsw i64 %84, 1
DOALL:     	  store i64 %85, i64* %2, align 8, !tbaa !49
DOALL:     	  br label %87
DOALL:     Edges: 125
DOALL:     Loop-carried data dependences
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %80 = load float, float* %79, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %111 = load float, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %95 = load float*, float** %94, align 8 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %95 = load float*, float** %94, align 8 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         %111 = load float, float* %110, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         %95 = load float*, float** %94, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %95 = load float*, float** %94, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         %80 = load float, float* %79, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %115 = add nsw i32 %77, 1
DOALL:     	  %storemerge = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ]
DOALL:     	  %68 = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ]
DOALL:     	  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     	  %69 = sext i32 %68 to i64
DOALL:     	  %70 = load i64, i64* %6, align 8, !tbaa !30
DOALL:     	  %71 = icmp sgt i64 %70, %69
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %77 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     External nodes: 11
DOALL:     	  br label %67
DOALL:     	  %73 = tail call i64 @lrand48() #3
DOALL:     	  %74 = sitofp i64 %73 to float
DOALL:     	  %75 = fmul float %74, 0x3E00000000000000
DOALL:     	  %76 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %78 = sext i32 %77 to i64
DOALL:     	  %79 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78, i32 3
DOALL:     	  %80 = load float, float* %79, align 8, !tbaa !47
DOALL:     	  %81 = fdiv float %80, %1
DOALL:     	  %82 = fcmp olt float %75, %81
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     Edges: 31
DOALL:     Loop-carried data dependences
DOALL:         store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 --->   store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 via memory
DOALL:         %115 = add nsw i32 %77, 1 --->   %68 = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ] via variable
DOALL:         %115 = add nsw i32 %77, 1 --->   %storemerge = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ] via variable
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 14
DOALL:     	  %93 = load float*, float** %92, align 8
DOALL:     	  %.0.i = phi float [ %106, %99 ], [ 0.000000e+00, %89 ]
DOALL:     	  %100 = getelementptr inbounds float, float* %93, i64 %indvars.iv.i
DOALL:     	  %101 = load float, float* %100, align 4, !tbaa !43
DOALL:     	  %104 = fsub float %101, %103
DOALL:     	  %105 = fmul float %104, %104
DOALL:     	  %106 = fadd float %.0.i, %105
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %97 ]
DOALL:     	  %109 = fmul float %.0.i.lcssa, %108
DOALL:     	  %112 = fcmp olt float %109, %111
DOALL:     	  br i1 %112, label %113, label %.._crit_edge27_crit_edge, !prof !54
DOALL:     	  store float %109, float* %110, align 8, !tbaa !47
DOALL:     	  %114 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 2
DOALL:     	  store i64 %78, i64* %114, align 8, !tbaa !48
DOALL:     External nodes: 11
DOALL:     	  %92 = getelementptr inbounds %struct.Point, %struct.Point* %86, i64 0, i32 1
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %99 ], [ 0, %89 ]
DOALL:     	  br i1 %98, label %99, label %_Z4distRK5PointS1_i.exit, !prof !42
DOALL:     	  %103 = load float, float* %102, align 4, !tbaa !43
DOALL:     	  %108 = load float, float* %107, align 8, !tbaa !45
DOALL:     	  %110 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 3
DOALL:     	  %111 = load float, float* %110, align 8, !tbaa !47
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %._crit_edge27
DOALL:     	  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge27 ], [ %18, %83 ]
DOALL:     	  br i1 %88, label %89, label %._crit_edge26.loopexit, !prof !53
DOALL:     Edges: 43
DOALL:     Loop-carried data dependences
DOALL:         %93 = load float*, float** %92, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %93 = load float*, float** %92, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 11
DOALL:     	  %26 = load float*, float** %25, align 8
DOALL:     	  %.0.i2 = phi float [ %39, %32 ], [ 0.000000e+00, %21 ]
DOALL:     	  %33 = getelementptr inbounds float, float* %26, i64 %indvars.iv.i1
DOALL:     	  %34 = load float, float* %33, align 4, !tbaa !43
DOALL:     	  %37 = fsub float %34, %36
DOALL:     	  %38 = fmul float %37, %37
DOALL:     	  %39 = fadd float %.0.i2, %38
DOALL:     	  %.0.i2.lcssa = phi float [ %.0.i2, %30 ]
DOALL:     	  %42 = fmul float %.0.i2.lcssa, %41
DOALL:     	  store float %42, float* %43, align 8, !tbaa !47
DOALL:     	  store i64 0, i64* %44, align 8, !tbaa !48
DOALL:     External nodes: 8
DOALL:     	  br i1 %20, label %21, label %45, !prof !39
DOALL:     	  %25 = getelementptr inbounds %struct.Point, %struct.Point* %23, i64 0, i32 1
DOALL:     	  %indvars.iv.i1 = phi i64 [ %indvars.iv.next.i3, %32 ], [ 0, %21 ]
DOALL:     	  br i1 %31, label %32, label %_Z4distRK5PointS1_i.exit4, !prof !42
DOALL:     	  %36 = load float, float* %35, align 4, !tbaa !43
DOALL:     	  %41 = load float, float* %40, align 8, !tbaa !45
DOALL:     	  %43 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 %indvars.iv20, i32 3
DOALL:     	  %44 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 %indvars.iv20, i32 2
DOALL:     Edges: 33
DOALL:     Loop-carried data dependences
DOALL:         %26 = load float*, float** %25, align 8 --->   store i64 0, i64* %44, align 8, !tbaa !48 via memory
DOALL:         %26 = load float*, float** %25, align 8 --->   store float %42, float* %43, align 8, !tbaa !47 via memory
DOALL:         store float %42, float* %43, align 8, !tbaa !47 --->   %26 = load float*, float** %25, align 8 via memory
DOALL:         store i64 0, i64* %44, align 8, !tbaa !48 --->   %26 = load float*, float** %25, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 8
DOALL:     	  %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57)
DOALL:     	  %61 = fmul float %58, %60
DOALL:     	  %63 = load float, float* %62, align 8, !tbaa !47
DOALL:     	  %64 = fcmp olt float %61, %63
DOALL:     	  br i1 %64, label %65, label %.._crit_edge25_crit_edge
DOALL:     	  store float %61, float* %62, align 8, !tbaa !47
DOALL:     	  %66 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18, i32 2
DOALL:     	  store i64 %50, i64* %66, align 8, !tbaa !48
DOALL:     External nodes: 11
DOALL:     	  %50 = sext i32 %49 to i64
DOALL:     	  %indvars.iv18 = phi i64 [ %indvars.iv.next19, %._crit_edge25 ], [ %18, %.preheader.preheader ]
DOALL:     	  br i1 %52, label %53, label %.loopexit.loopexit
DOALL:     	  %54 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %55 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %50
DOALL:     	  %56 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18
DOALL:     	  %57 = load i32, i32* %17, align 8, !tbaa !41
DOALL:     	  %60 = load float, float* %59, align 8, !tbaa !45
DOALL:     	  %62 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18, i32 3
DOALL:     	  br label %._crit_edge25
DOALL:     	  br label %._crit_edge25
DOALL:     Edges: 33
DOALL:     Loop-carried data dependences
DOALL:         %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) --->   store i64 %50, i64* %66, align 8, !tbaa !48 via memory
DOALL:         %63 = load float, float* %62, align 8, !tbaa !47 --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   %63 = load float, float* %62, align 8, !tbaa !47 via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) via memory
DOALL:         store i64 %50, i64* %66, align 8, !tbaa !48 --->   store i64 %50, i64* %66, align 8, !tbaa !48 via memory
DOALL:         store i64 %50, i64* %66, align 8, !tbaa !48 --->   %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 8
DOALL:     Live-out ID = 9
DOALL:     Live-out ID = 10
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 39
DOALL:     	  %147 = load float, float* %146, align 8, !tbaa !52
DOALL:     	  %148 = fdiv float %147, %131
DOALL:     	  %149 = fcmp olt float %142, %148
DOALL:     	  br i1 %149, label %150, label %.._crit_edge26_crit_edge.i, !prof !63
DOALL:     	  %153 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %145
DOALL:     	  %indvars.iv16.i = phi i64 [ %indvars.iv.next17.i, %._crit_edge27.i ], [ 0, %150 ]
DOALL:     	  %155 = icmp sgt i64 %spec.select.i, %indvars.iv16.i
DOALL:     	  br i1 %155, label %156, label %._crit_edge26.loopexit.i, !prof !64
DOALL:     	  %157 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i
DOALL:     	  %158 = load i32, i32* %103, align 8, !tbaa !37
DOALL:     	  %159 = getelementptr inbounds %struct.Point, %struct.Point* %153, i64 0, i32 1
DOALL:     	  %160 = load float*, float** %159, align 8
DOALL:     	  %161 = getelementptr inbounds %struct.Point, %struct.Point* %157, i64 0, i32 1
DOALL:     	  %162 = load float*, float** %161, align 8
DOALL:     	  %163 = sext i32 %158 to i64
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %166 ], [ 0, %156 ]
DOALL:     	  %.0.i.i = phi float [ %173, %166 ], [ 0.000000e+00, %156 ]
DOALL:     	  %165 = icmp slt i64 %indvars.iv.i.i, %163
DOALL:     	  br i1 %165, label %166, label %_Z4distRK5PointS1_i.exit.i, !prof !61
DOALL:     	  %167 = getelementptr inbounds float, float* %160, i64 %indvars.iv.i.i
DOALL:     	  %168 = load float, float* %167, align 4, !tbaa !58
DOALL:     	  %169 = getelementptr inbounds float, float* %162, i64 %indvars.iv.i.i
DOALL:     	  %170 = load float, float* %169, align 4, !tbaa !58
DOALL:     	  %171 = fsub float %168, %170
DOALL:     	  %172 = fmul float %171, %171
DOALL:     	  %173 = fadd float %.0.i.i, %172
DOALL:     	  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %164 ]
DOALL:     	  %174 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 0
DOALL:     	  %175 = load float, float* %174, align 8, !tbaa !43
DOALL:     	  %176 = fmul float %.0.i.i.lcssa, %175
DOALL:     	  %177 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 3
DOALL:     	  %178 = load float, float* %177, align 8, !tbaa !52
DOALL:     	  %179 = fcmp olt float %176, %178
DOALL:     	  br i1 %179, label %180, label %.._crit_edge27_crit_edge.i, !prof !65
DOALL:     	  store float %176, float* %177, align 8, !tbaa !52
DOALL:     	  %181 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 2
DOALL:     	  store i64 %145, i64* %181, align 8, !tbaa !51
DOALL:     	  %indvars.iv.next17.i = add nuw i64 %indvars.iv16.i, 1
DOALL:     External nodes: 16
DOALL:     	  br i1 %138, label %139, label %.loopexit7.loopexit.i, !prof !62
DOALL:     	  %142 = fmul float %141, 0x3E00000000000000
DOALL:     	  %143 = load %struct.Point*, %struct.Point** %102, align 8, !tbaa !42
DOALL:     	  %145 = sext i32 %144 to i64
DOALL:     	  %146 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %145, i32 3
DOALL:     	  br label %._crit_edge26.i
DOALL:     	  %151 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
DOALL:     	  %152 = add nsw i64 %151, 1
DOALL:     	  store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
DOALL:     	  br label %154
DOALL:     	  br label %164
DOALL:     	  br label %164
DOALL:     	  br label %._crit_edge27.i
DOALL:     	  br label %._crit_edge27.i
DOALL:     	  br label %154
DOALL:     	  br label %._crit_edge26.i
DOALL:     Edges: 125
DOALL:     Loop-carried data dependences
DOALL:         %147 = load float, float* %146, align 8, !tbaa !52 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         %160 = load float*, float** %159, align 8 --->   store i64 %145, i64* %181, align 8, !tbaa !51 via memory
DOALL:         %178 = load float, float* %177, align 8, !tbaa !52 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         %160 = load float*, float** %159, align 8 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         %162 = load float*, float** %161, align 8 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         %162 = load float*, float** %161, align 8 --->   store i64 %145, i64* %181, align 8, !tbaa !51 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %178 = load float, float* %177, align 8, !tbaa !52 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %162 = load float*, float** %161, align 8 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %147 = load float, float* %146, align 8, !tbaa !52 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %160 = load float*, float** %159, align 8 via memory
DOALL:         store i64 %145, i64* %181, align 8, !tbaa !51 --->   %160 = load float*, float** %159, align 8 via memory
DOALL:         store i64 %145, i64* %181, align 8, !tbaa !51 --->   %162 = load float*, float** %161, align 8 via memory
DOALL:         store i64 %145, i64* %181, align 8, !tbaa !51 --->   store i64 %145, i64* %181, align 8, !tbaa !51 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %140 = tail call i64 @lrand48() #3
DOALL:     External nodes: 2
DOALL:     	  br i1 %138, label %139, label %.loopexit7.loopexit.i, !prof !62
DOALL:     	  %141 = sitofp i64 %140 to float
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %140 = tail call i64 @lrand48() #3 --->   %140 = tail call i64 @lrand48() #3 via memory
DOALL:         %140 = tail call i64 @lrand48() #3 --->   %140 = tail call i64 @lrand48() #3 via memory
DOALL:         %140 = tail call i64 @lrand48() #3 --->   %140 = tail call i64 @lrand48() #3 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %storemerge.i = phi i32 [ 1, %130 ], [ %182, %._crit_edge26.i ]
DOALL:     	  %135 = phi i32 [ 1, %130 ], [ %182, %._crit_edge26.i ]
DOALL:     	  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30
DOALL:     	  %136 = sext i32 %135 to i64
DOALL:     	  %137 = load i64, i64* %95, align 8, !tbaa !40
DOALL:     	  %138 = icmp sgt i64 %137, %136
DOALL:     	  br i1 %138, label %139, label %.loopexit7.loopexit.i, !prof !62
DOALL:     	  %144 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30
DOALL:     	  %182 = add nsw i32 %144, 1
DOALL:     External nodes: 11
DOALL:     	  %140 = tail call i64 @lrand48() #3
DOALL:     	  %141 = sitofp i64 %140 to float
DOALL:     	  %142 = fmul float %141, 0x3E00000000000000
DOALL:     	  %143 = load %struct.Point*, %struct.Point** %102, align 8, !tbaa !42
DOALL:     	  %145 = sext i32 %144 to i64
DOALL:     	  %146 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %145, i32 3
DOALL:     	  %147 = load float, float* %146, align 8, !tbaa !52
DOALL:     	  %148 = fdiv float %147, %131
DOALL:     	  %149 = fcmp olt float %142, %148
DOALL:     	  br i1 %149, label %150, label %.._crit_edge26_crit_edge.i, !prof !63
DOALL:     	  br label %134
DOALL:     Edges: 31
DOALL:     Loop-carried data dependences
DOALL:         store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30 --->   store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30 via memory
DOALL:         %182 = add nsw i32 %144, 1 --->   %storemerge.i = phi i32 [ 1, %130 ], [ %182, %._crit_edge26.i ] via variable
DOALL:         %182 = add nsw i32 %144, 1 --->   %135 = phi i32 [ 1, %130 ], [ %182, %._crit_edge26.i ] via variable
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %151 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
DOALL:     	  %152 = add nsw i64 %151, 1
DOALL:     	  store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
DOALL:     External nodes: 1
DOALL:     	  br i1 %149, label %150, label %.._crit_edge26_crit_edge.i, !prof !63
DOALL:     Edges: 8
DOALL:     Loop-carried data dependences
DOALL:         store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54 --->   store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54 via memory
DOALL:         store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54 --->   %151 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 14
DOALL:     	  %160 = load float*, float** %159, align 8
DOALL:     	  %.0.i.i = phi float [ %173, %166 ], [ 0.000000e+00, %156 ]
DOALL:     	  %167 = getelementptr inbounds float, float* %160, i64 %indvars.iv.i.i
DOALL:     	  %168 = load float, float* %167, align 4, !tbaa !58
DOALL:     	  %171 = fsub float %168, %170
DOALL:     	  %172 = fmul float %171, %171
DOALL:     	  %173 = fadd float %.0.i.i, %172
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %164 ]
DOALL:     	  %176 = fmul float %.0.i.i.lcssa, %175
DOALL:     	  %179 = fcmp olt float %176, %178
DOALL:     	  br i1 %179, label %180, label %.._crit_edge27_crit_edge.i, !prof !65
DOALL:     	  store float %176, float* %177, align 8, !tbaa !52
DOALL:     	  %181 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 2
DOALL:     	  store i64 %145, i64* %181, align 8, !tbaa !51
DOALL:     External nodes: 11
DOALL:     	  %indvars.iv16.i = phi i64 [ %indvars.iv.next17.i, %._crit_edge27.i ], [ 0, %150 ]
DOALL:     	  br i1 %155, label %156, label %._crit_edge26.loopexit.i, !prof !64
DOALL:     	  %159 = getelementptr inbounds %struct.Point, %struct.Point* %153, i64 0, i32 1
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %166 ], [ 0, %156 ]
DOALL:     	  br i1 %165, label %166, label %_Z4distRK5PointS1_i.exit.i, !prof !61
DOALL:     	  %170 = load float, float* %169, align 4, !tbaa !58
DOALL:     	  %175 = load float, float* %174, align 8, !tbaa !43
DOALL:     	  %177 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 3
DOALL:     	  %178 = load float, float* %177, align 8, !tbaa !52
DOALL:     	  br label %._crit_edge27.i
DOALL:     	  br label %._crit_edge27.i
DOALL:     Edges: 43
DOALL:     Loop-carried data dependences
DOALL:         store i64 %145, i64* %181, align 8, !tbaa !51 --->   %160 = load float*, float** %159, align 8 via memory
DOALL:         %160 = load float*, float** %159, align 8 --->   store i64 %145, i64* %181, align 8, !tbaa !51 via memory
DOALL:         %160 = load float*, float** %159, align 8 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %160 = load float*, float** %159, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %struct.Points, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: _Z13streamClusterP7PStreamllillPc (165 instructions. The inlining will add 64 instructions),   call void @_Z11copycentersP6PointsS0_Pll(%struct.Points* nonnull %8, %struct.Points* nonnull %9, i64* %22, i64 %.02)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv12, %4" (2.667083e-04%)
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv10, %5" (1.990106e-05%)
Noelle:     Loop "  %65 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %62, align 8, !tbaa !47" (4.705728e+01%)
Noelle:     Loop "  %89 = icmp sgt i64 %67, %indvars.iv" (2.074410e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.404358e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.009402e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.702605e-08%)
Noelle:     Loop "  %50 = icmp slt i64 %.02, %spec.select" (2.586433e-07%)
Noelle:     Loop "  %65 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.639807e-01%)
Noelle:     Loop "  %213 = icmp slt i64 %212, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.293245e-01%)
Noelle:     Loop "  %76 = load i64, i64* %73, align 8, !tbaa !40" (1.363083e-03%)
Noelle:     Loop "  %105 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.001617e-01%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv.i1.i, %114" (9.885785e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.271474e-01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.259028e-01%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv.i.i, %163" (4.201459e-01%)
Noelle:     Loop "  %184 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.519548e-04%)
Noelle:     Loop "  %201 = icmp slt i64 %indvars.iv.i, %198" (5.064344e-08%)
Noelle:     Loop "  %226 = icmp sgt i64 %223, %indvars.iv" (2.963419e-04%)
Noelle:     Loop "  %240 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.293484e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.365996e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.503857e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.305637e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.060847e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.493226e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.163334e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.446395e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.513288e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i, %226" (2.376052e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select, %indvars.iv" (5.039178e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %286 = fdiv double %.0, %.02" (9.293488e+01%)
Noelle:     Loop "  %289 = icmp slt i64 %.01, %6" (9.293488e+01%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.288180e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %18" (1.877425e-05%)
Noelle:     Loop "  %32 = icmp slt i64 %.01.us, %6" (9.288178e+01%)
Noelle:     Loop "  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.365995e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv42.i, %76" (5.503857e-05%)
Noelle:     Loop "  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.305637e-01%)
Noelle:     Loop "  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.060846e+01%)
Noelle:     Loop "  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.493226e-01%)
Noelle:     Loop "  %169 = icmp slt i32 %.03.i, %114" (3.163334e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %indvars.iv34.i, %196" (7.446395e-05%)
Noelle:     Loop "  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.513288e-01%)
Noelle:     Loop "  %243 = icmp slt i64 %indvars.iv.i.i, %241" (2.376052e-01%)
Noelle:     Loop "  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.039178e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (8.980286e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.003235e-01%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv.i1, %29" (1.977157e-01%)
Noelle:     Loop "  %49 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.336452e+10%)
Noelle:     Loop "  %52 = icmp sgt i64 %spec.select, %indvars.iv18" (3.336452e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.542948e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.518056e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv.i, %96" (8.402918e-01%)
Noelle:     Loop "  %117 = icmp sgt i64 %spec.select, %indvars.iv14" (1.303910e-03%)
Noelle:     Loop "  %136 = icmp slt i64 %indvars.iv, %133" (1.012869e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.913608e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.830648e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.219804e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.181280e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.044624e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.963419e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.155132e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.259575e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.771101e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.508478e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.586433e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.940991e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.874431e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.874712e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv12, %4" (2.667064e-04%)
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv10, %5" (1.990092e-05%)
Noelle:     Loop "  %65 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %62, align 8, !tbaa !47" (4.705694e+01%)
Noelle:     Loop "  %89 = icmp sgt i64 %67, %indvars.iv" (2.074395e-04%)
Noelle:     Loop "  %112 = icmp slt i64 %.01.i, %108" (2.963398e-04%)
Noelle:     Loop "  %125 = icmp slt i64 %.12.i, %.pre3.i" (4.155102e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.404292e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.009366e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.702572e-08%)
Noelle:     Loop "  %50 = icmp slt i64 %.02, %spec.select" (2.586415e-07%)
Noelle:     Loop "  %65 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.639788e-01%)
Noelle:     Loop "  %213 = icmp slt i64 %212, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.293207e-01%)
Noelle:     Loop "  %76 = load i64, i64* %73, align 8, !tbaa !40" (1.363073e-03%)
Noelle:     Loop "  %105 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.001610e-01%)
Noelle:     Loop "  %116 = icmp slt i64 %indvars.iv.i1.i, %114" (9.885715e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.271444e-01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.258997e-01%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv.i.i, %163" (4.201429e-01%)
Noelle:     Loop "  %184 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.519501e-04%)
Noelle:     Loop "  %201 = icmp slt i64 %indvars.iv.i, %198" (5.064308e-08%)
Noelle:     Loop "  %226 = icmp sgt i64 %223, %indvars.iv" (2.963398e-04%)
Noelle:     Loop "  %240 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.293418e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.365950e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.503818e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.305599e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.060782e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.493165e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.163312e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.446342e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.513270e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i, %226" (2.376035e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select, %indvars.iv" (5.039142e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %286 = fdiv double %.0, %.02" (9.293422e+01%)
Noelle:     Loop "  %289 = icmp slt i64 %.01, %6" (9.293422e+01%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.288114e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %18" (1.877411e-05%)
Noelle:     Loop "  %32 = icmp slt i64 %.01.us, %6" (9.288112e+01%)
Noelle:     Loop "  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.365950e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv42.i, %76" (5.503818e-05%)
Noelle:     Loop "  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.305599e-01%)
Noelle:     Loop "  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.060782e+01%)
Noelle:     Loop "  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.493165e-01%)
Noelle:     Loop "  %169 = icmp slt i32 %.03.i, %114" (3.163312e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %indvars.iv34.i, %196" (7.446342e-05%)
Noelle:     Loop "  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.513270e-01%)
Noelle:     Loop "  %243 = icmp slt i64 %indvars.iv.i.i, %241" (2.376035e-01%)
Noelle:     Loop "  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.039142e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (8.980222e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.003221e-01%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv.i1, %29" (1.977143e-01%)
Noelle:     Loop "  %49 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.336429e+10%)
Noelle:     Loop "  %52 = icmp sgt i64 %spec.select, %indvars.iv18" (3.336429e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.542888e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.517995e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv.i, %96" (8.402858e-01%)
Noelle:     Loop "  %117 = icmp sgt i64 %spec.select, %indvars.iv14" (1.303900e-03%)
Noelle:     Loop "  %136 = icmp slt i64 %indvars.iv, %133" (1.012862e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.913559e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.830599e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.219774e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.181250e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.044610e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.963398e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.155102e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.259552e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.771081e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.508460e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.586415e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.940956e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.874397e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.874698e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint:       There are 49 different instructions and 89 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.VoNJfbgnnE -o /tmp/tmp.VoNJfbgnnE
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.VoNJfbgnnE -o /tmp/tmp.VoNJfbgnnE
NOELLE: FixedPoint:     Invocation 6
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
Inliner: Start
Inliner:   Number of program instructions = 2323
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 15
DOALL:     	  %219 = load float, float* %218, align 8, !tbaa !54
DOALL:     	  %223 = load float*, float** %222, align 8
DOALL:     	  %225 = load float*, float** %224, align 8
DOALL:     	  %.0.i = phi float [ %236, %229 ], [ 0.000000e+00, %217 ]
DOALL:     	  %230 = getelementptr inbounds float, float* %223, i64 %indvars.iv.i
DOALL:     	  %231 = load float, float* %230, align 4, !tbaa !66
DOALL:     	  %232 = getelementptr inbounds float, float* %225, i64 %indvars.iv.i
DOALL:     	  %233 = load float, float* %232, align 4, !tbaa !66
DOALL:     	  %234 = fsub float %231, %233
DOALL:     	  %235 = fmul float %234, %234
DOALL:     	  %236 = fadd float %.0.i, %235
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %227 ]
DOALL:     	  %237 = fmul float %219, %.0.i.lcssa
DOALL:     	  store float %237, float* %238, align 8, !tbaa !57
DOALL:     	  store i64 %0, i64* %205, align 8, !tbaa !59
DOALL:     External nodes: 9
DOALL:     	  br i1 %brmerge, label %217, label %.._crit_edge59_crit_edge, !prof !64
DOALL:     	  %218 = getelementptr inbounds %struct.Point, %struct.Point* %204, i64 0, i32 0
DOALL:     	  %222 = getelementptr inbounds %struct.Point, %struct.Point* %204, i64 0, i32 1
DOALL:     	  %224 = getelementptr inbounds %struct.Point, %struct.Point* %220, i64 0, i32 1
DOALL:     	  br i1 %228, label %229, label %_Z4distRK5PointS1_i.exit, !prof !65
DOALL:     	  %205 = getelementptr inbounds %struct.Point, %struct.Point* %203, i64 %indvars.iv32, i32 2
DOALL:     	  %206 = load i64, i64* %205, align 8, !tbaa !59
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %229 ], [ 0, %217 ]
DOALL:     	  %238 = getelementptr inbounds %struct.Point, %struct.Point* %203, i64 %indvars.iv32, i32 3
DOALL:     Edges: 51
DOALL:     Loop-carried data dependences
DOALL:         %219 = load float, float* %218, align 8, !tbaa !54 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %219 = load float, float* %218, align 8, !tbaa !54 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %223 = load float*, float** %222, align 8 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %223 = load float*, float** %222, align 8 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %225 = load float*, float** %224, align 8 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %225 = load float*, float** %224, align 8 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %225 = load float*, float** %224, align 8 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %219 = load float, float* %218, align 8, !tbaa !54 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %223 = load float*, float** %222, align 8 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %223 = load float*, float** %222, align 8 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %225 = load float*, float** %224, align 8 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %219 = load float, float* %218, align 8, !tbaa !54 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 9
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 5
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  %.pre7.i = load double, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     External nodes: 6
DOALL:     	  br i1 %32, label %35, label %33, !prof !37
DOALL:     	  %60 = tail call noalias i8* @malloc(i64 %59) #3
DOALL:     	  br i1 %200, label %201, label %.loopexit.loopexit.i, !prof !53
DOALL:     	  %212 = fadd double %199, %211
DOALL:     	  br i1 %213, label %.preheader.i, label %281, !prof !66
DOALL:     	  %283 = fsub double -0.000000e+00, %.pre7.i
DOALL:     Edges: 24
DOALL:     Loop-carried data dependences
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %.pre7.i = load double, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 288
DOALL:     	  %38 = load i32, i32* %37, align 4, !tbaa !33
DOALL:     	  %39 = sext i32 %38 to i64
DOALL:     	  %41 = load i64, i64* %40, align 8, !tbaa !38
DOALL:     	  %42 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %43 = sext i32 %42 to i64
DOALL:     	  %44 = sdiv i64 %41, %43
DOALL:     	  %45 = add nsw i32 %42, -1
DOALL:     	  %46 = icmp eq i32 %45, 0
DOALL:     	  %spec.select.i = select i1 %46, i64 %41, i64 %44, !prof !42
DOALL:     	  %47 = load i64, i64* %4, align 8, !tbaa !43
DOALL:     	  %48 = trunc i64 %47 to i32
DOALL:     	  %49 = add i32 %48, 2
DOALL:     	  %50 = and i32 %49, 3
DOALL:     	  %51 = icmp eq i32 %50, 0
DOALL:     	  br i1 %51, label %.._crit_edge52_crit_edge.i, label %52, !prof !44
DOALL:     	  %53 = sdiv i32 %49, 4
DOALL:     	  %54 = shl nsw i32 %53, 2
DOALL:     	  %55 = add i32 %54, 4
DOALL:     	  %.010.i = phi i32 [ %55, %52 ], [ %49, %.._crit_edge52_crit_edge.i ]
DOALL:     	  %56 = add nsw i32 %42, 1
DOALL:     	  %57 = mul nsw i32 %.010.i, %56
DOALL:     	  %58 = sext i32 %57 to i64
DOALL:     	  %59 = shl nsw i64 %58, 3
DOALL:     	  %60 = tail call noalias i8* @malloc(i64 %59) #3
DOALL:     	  store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45
DOALL:     	  store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %61 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %62 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv44.i = phi i64 [ %indvars.iv.next45.i, %._crit_edge54.i ], [ 0, %._crit_edge52.i ]
DOALL:     	  %.016.i = phi i32 [ %.117.i, %._crit_edge54.i ], [ 0, %._crit_edge52.i ]
DOALL:     	  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i
DOALL:     	  br i1 %64, label %65, label %72, !prof !48
DOALL:     	  %66 = getelementptr inbounds i8, i8* %61, i64 %indvars.iv44.i
DOALL:     	  %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51
DOALL:     	  %68 = icmp eq i8 %67, 0
DOALL:     	  br i1 %68, label %.._crit_edge54_crit_edge.i, label %69, !prof !52
DOALL:     	  %70 = add nsw i32 %.016.i, 1
DOALL:     	  %71 = getelementptr inbounds i32, i32* %62, i64 %indvars.iv44.i
DOALL:     	  store i32 %.016.i, i32* %71, align 4, !tbaa !33
DOALL:     	  %.117.i = phi i32 [ %70, %69 ], [ %.016.i, %.._crit_edge54_crit_edge.i ]
DOALL:     	  %indvars.iv.next45.i = add nuw i64 %indvars.iv44.i, 1
DOALL:     	  %.016.i.lcssa = phi i32 [ %.016.i, %63 ]
DOALL:     	  %73 = sitofp i32 %.016.i.lcssa to double
DOALL:     	  %74 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  store double %73, double* %74, align 8, !tbaa !46
DOALL:     	  %75 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %76 = sext i32 %75 to i64
DOALL:     	  %77 = sext i32 %.010.i to i64
DOALL:     	  %indvars.iv42.i = phi i64 [ %indvars.iv.next43.i, %80 ], [ 0, %72 ]
DOALL:     	  %.012.i = phi i32 [ %86, %80 ], [ 0, %72 ]
DOALL:     	  %79 = icmp slt i64 %indvars.iv42.i, %76
DOALL:     	  br i1 %79, label %80, label %._crit_edge55.loopexit.i, !prof !53
DOALL:     	  %81 = mul nsw i64 %indvars.iv42.i, %77
DOALL:     	  %82 = getelementptr inbounds double, double* %74, i64 %81
DOALL:     	  %83 = load double, double* %82, align 8, !tbaa !46
DOALL:     	  %84 = fptosi double %83 to i32
DOALL:     	  %85 = sitofp i32 %.012.i to double
DOALL:     	  store double %85, double* %82, align 8, !tbaa !46
DOALL:     	  %86 = add nsw i32 %.012.i, %84
DOALL:     	  %indvars.iv.next43.i = add nuw nsw i64 %indvars.iv42.i, 1
DOALL:     	  %87 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %88 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv40.i = phi i64 [ %indvars.iv.next41.i, %._crit_edge56.i ], [ 0, %._crit_edge55.loopexit.i ]
DOALL:     	  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i
DOALL:     	  br i1 %90, label %91, label %101, !prof !48
DOALL:     	  %92 = getelementptr inbounds i8, i8* %87, i64 %indvars.iv40.i
DOALL:     	  %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51
DOALL:     	  %94 = icmp eq i8 %93, 0
DOALL:     	  br i1 %94, label %.._crit_edge56_crit_edge.i, label %95, !prof !52
DOALL:     	  %96 = load double, double* %74, align 8, !tbaa !46
DOALL:     	  %97 = fptosi double %96 to i32
DOALL:     	  %98 = getelementptr inbounds i32, i32* %88, i64 %indvars.iv40.i
DOALL:     	  %99 = load i32, i32* %98, align 4, !tbaa !33
DOALL:     	  %100 = add nsw i32 %99, %97
DOALL:     	  store i32 %100, i32* %98, align 4, !tbaa !33
DOALL:     	  %indvars.iv.next41.i = add nuw i64 %indvars.iv40.i, 1
DOALL:     	  %102 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54
DOALL:     	  %103 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %104 = bitcast double* %103 to i8*
DOALL:     	  %105 = sext i32 %.010.i to i64
DOALL:     	  %106 = shl nsw i64 %105, 3
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55
DOALL:     	  %107 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %108 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %109 = mul nsw i32 %108, %.010.i
DOALL:     	  %110 = sext i32 %109 to i64
DOALL:     	  %111 = getelementptr inbounds double, double* %107, i64 %110
DOALL:     	  %112 = bitcast double* %111 to i8*
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55
DOALL:     	  %113 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %114 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %indvars.iv38.i = phi i64 [ %indvars.iv.next39.i, %150 ], [ 0, %101 ]
DOALL:     	  %.013.i = phi double [ %.114.i, %150 ], [ 0.000000e+00, %101 ]
DOALL:     	  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i
DOALL:     	  br i1 %118, label %119, label %151, !prof !48
DOALL:     	  %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56
DOALL:     	  %121 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i
DOALL:     	  %122 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %39
DOALL:     	  %123 = load i32, i32* %116, align 8, !tbaa !57
DOALL:     	  %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3
DOALL:     	  %125 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 0
DOALL:     	  %126 = load float, float* %125, align 8, !tbaa !58
DOALL:     	  %127 = fmul float %124, %126
DOALL:     	  %128 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 3
DOALL:     	  %129 = load float, float* %128, align 8, !tbaa !61
DOALL:     	  %130 = fcmp olt float %127, %129
DOALL:     	  br i1 %130, label %131, label %137, !prof !62
DOALL:     	  %132 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  %133 = getelementptr inbounds i8, i8* %132, i64 %indvars.iv38.i
DOALL:     	  store i8 1, i8* %133, align 1, !tbaa !49
DOALL:     	  %134 = fsub float %127, %129
DOALL:     	  %135 = fpext float %134 to double
DOALL:     	  %136 = fadd double %.013.i, %135
DOALL:     	  %138 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 2
DOALL:     	  %139 = load i64, i64* %138, align 8, !tbaa !63
DOALL:     	  %140 = fsub float %129, %127
DOALL:     	  %141 = fpext float %140 to double
DOALL:     	  %142 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45
DOALL:     	  %sext.i = shl i64 %139, 32
DOALL:     	  %143 = ashr exact i64 %sext.i, 32
DOALL:     	  %144 = getelementptr inbounds i32, i32* %142, i64 %143
DOALL:     	  %145 = load i32, i32* %144, align 4, !tbaa !33
DOALL:     	  %146 = sext i32 %145 to i64
DOALL:     	  %147 = getelementptr inbounds double, double* %113, i64 %146
DOALL:     	  %148 = load double, double* %147, align 8, !tbaa !46
DOALL:     	  %149 = fadd double %148, %141
DOALL:     	  store double %149, double* %147, align 8, !tbaa !46
DOALL:     	  %.114.i = phi double [ %136, %131 ], [ %.013.i, %137 ]
DOALL:     	  %indvars.iv.next39.i = add nuw i64 %indvars.iv38.i, 1
DOALL:     	  %.013.i.lcssa = phi double [ %.013.i, %117 ]
DOALL:     	  %152 = bitcast double* %113 to i8*
DOALL:     	  %153 = mul nsw i32 %114, %.010.i
DOALL:     	  %154 = sext i32 %153 to i64
DOALL:     	  %155 = getelementptr inbounds double, double* %113, i64 %154
DOALL:     	  %156 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %158 = phi i8* [ %187, %._crit_edge58.i ], [ %152, %151 ]
DOALL:     	  %indvars.iv36.i = phi i64 [ %indvars.iv.next37.i, %._crit_edge58.i ], [ 0, %151 ]
DOALL:     	  %.215.i = phi double [ %.4.i, %._crit_edge58.i ], [ %.013.i.lcssa, %151 ]
DOALL:     	  %.09.i = phi i32 [ %.2.i, %._crit_edge58.i ], [ 0, %151 ]
DOALL:     	  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i
DOALL:     	  br i1 %159, label %160, label %188, !prof !48
DOALL:     	  %161 = getelementptr inbounds i8, i8* %156, i64 %indvars.iv36.i
DOALL:     	  %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51
DOALL:     	  %163 = icmp eq i8 %162, 0
DOALL:     	  br i1 %163, label %.._crit_edge58_crit_edge.i, label %164, !prof !52
DOALL:     	  %165 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8
DOALL:     	  %166 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %167 = getelementptr inbounds i32, i32* %166, i64 %indvars.iv36.i
DOALL:     	  %.04.i = phi double [ %14, %164 ], [ %177, %170 ]
DOALL:     	  %.03.i = phi i32 [ 0, %164 ], [ %178, %170 ]
DOALL:     	  %169 = icmp slt i32 %.03.i, %114
DOALL:     	  br i1 %169, label %170, label %179, !prof !64
DOALL:     	  %171 = load i32, i32* %167, align 4, !tbaa !33
DOALL:     	  %172 = mul nsw i32 %.03.i, %.010.i
DOALL:     	  %173 = add nsw i32 %171, %172
DOALL:     	  %174 = sext i32 %173 to i64
DOALL:     	  %175 = getelementptr inbounds double, double* %165, i64 %174
DOALL:     	  %176 = load double, double* %175, align 8, !tbaa !46
DOALL:     	  %177 = fadd double %.04.i, %176
DOALL:     	  %178 = add nuw nsw i32 %.03.i, 1
DOALL:     	  %.04.i.lcssa = phi double [ %.04.i, %168 ]
DOALL:     	  %180 = bitcast double* %165 to i8*
DOALL:     	  %181 = load i32, i32* %167, align 4, !tbaa !33
DOALL:     	  %182 = sext i32 %181 to i64
DOALL:     	  %183 = getelementptr inbounds double, double* %155, i64 %182
DOALL:     	  store double %.04.i.lcssa, double* %183, align 8, !tbaa !46
DOALL:     	  %184 = fcmp ogt double %.04.i.lcssa, 0.000000e+00
DOALL:     	  %185 = fsub double %.215.i, %.04.i.lcssa
DOALL:     	  %.3.i = select i1 %184, double %185, double %.215.i, !prof !65
DOALL:     	  %186 = zext i1 %184 to i32
DOALL:     	  %.1.i = add nsw i32 %.09.i, %186
DOALL:     	  %187 = phi i8* [ %180, %179 ], [ %158, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %.4.i = phi double [ %.3.i, %179 ], [ %.215.i, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %.2.i = phi i32 [ %.1.i, %179 ], [ %.09.i, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %indvars.iv.next37.i = add nuw i64 %indvars.iv36.i, 1
DOALL:     	  %.lcssa = phi i8* [ %158, %157 ]
DOALL:     	  %.215.i.lcssa = phi double [ %.215.i, %157 ]
DOALL:     	  %.09.i.lcssa = phi i32 [ %.09.i, %157 ]
DOALL:     	  %189 = add nsw i32 %.010.i, -2
DOALL:     	  %190 = sitofp i32 %.09.i.lcssa to double
DOALL:     	  %191 = sext i32 %189 to i64
DOALL:     	  %192 = getelementptr inbounds double, double* %113, i64 %191
DOALL:     	  store double %190, double* %192, align 8, !tbaa !46
DOALL:     	  %193 = add nsw i32 %189, 1
DOALL:     	  %194 = sext i32 %193 to i64
DOALL:     	  %195 = getelementptr inbounds double, double* %113, i64 %194
DOALL:     	  store double %.215.i.lcssa, double* %195, align 8, !tbaa !46
DOALL:     	  %196 = sext i32 %114 to i64
DOALL:     	  %197 = sext i32 %189 to i64
DOALL:     	  %indvars.iv34.i = phi i64 [ %indvars.iv.next35.i, %201 ], [ 0, %188 ]
DOALL:     	  %199 = phi double [ %212, %201 ], [ %14, %188 ]
DOALL:     	  %200 = icmp slt i64 %indvars.iv34.i, %196
DOALL:     	  br i1 %200, label %201, label %.loopexit.loopexit.i, !prof !53
DOALL:     	  %202 = mul nsw i64 %indvars.iv34.i, %105
DOALL:     	  %203 = add nsw i64 %202, %197
DOALL:     	  %204 = getelementptr inbounds double, double* %113, i64 %203
DOALL:     	  %205 = load double, double* %204, align 8, !tbaa !46
DOALL:     	  %206 = fptosi double %205 to i32
DOALL:     	  %207 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %208 = add nsw i32 %207, %206
DOALL:     	  store i32 %208, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %209 = add nsw i64 %203, 1
DOALL:     	  %210 = getelementptr inbounds double, double* %113, i64 %209
DOALL:     	  %211 = load double, double* %210, align 8, !tbaa !46
DOALL:     	  %212 = fadd double %199, %211
DOALL:     	  %indvars.iv.next35.i = add nuw nsw i64 %indvars.iv34.i, 1
DOALL:     	  %.lcssa1 = phi double [ %199, %198 ]
DOALL:     	  %213 = fcmp olt double %.lcssa1, 0.000000e+00
DOALL:     	  br i1 %213, label %.preheader.i, label %281, !prof !66
DOALL:     	  %indvars.iv32.i = phi i64 [ %indvars.iv.next33.i, %._crit_edge59.i ], [ 0, %.preheader.i ]
DOALL:     	  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i
DOALL:     	  br i1 %215, label %216, label %254, !prof !67
DOALL:     	  %217 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45
DOALL:     	  %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56
DOALL:     	  %219 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i
DOALL:     	  %220 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 2
DOALL:     	  %221 = load i64, i64* %220, align 8, !tbaa !63
DOALL:     	  %222 = getelementptr inbounds i32, i32* %217, i64 %221
DOALL:     	  %223 = load i32, i32* %222, align 4, !tbaa !33
DOALL:     	  %224 = sext i32 %223 to i64
DOALL:     	  %225 = getelementptr inbounds double, double* %155, i64 %224
DOALL:     	  %226 = load double, double* %225, align 8, !tbaa !46
DOALL:     	  %227 = fcmp ogt double %226, 0.000000e+00
DOALL:     	  %228 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  %229 = getelementptr inbounds i8, i8* %228, i64 %indvars.iv32.i
DOALL:     	  %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51
DOALL:     	  %231 = icmp ne i8 %230, 0
DOALL:     	  %brmerge.i = or i1 %231, %227
DOALL:     	  br i1 %brmerge.i, label %232, label %.._crit_edge59_crit_edge.i, !prof !68
DOALL:     	  %233 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 0
DOALL:     	  %234 = load float, float* %233, align 8, !tbaa !58
DOALL:     	  %235 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %39
DOALL:     	  %236 = load i32, i32* %116, align 8, !tbaa !57
DOALL:     	  %237 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 1
DOALL:     	  %238 = load float*, float** %237, align 8
DOALL:     	  %239 = getelementptr inbounds %struct.Point, %struct.Point* %235, i64 0, i32 1
DOALL:     	  %240 = load float*, float** %239, align 8
DOALL:     	  %241 = sext i32 %236 to i64
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %244 ], [ 0, %232 ]
DOALL:     	  %.0.i.i = phi float [ %251, %244 ], [ 0.000000e+00, %232 ]
DOALL:     	  %243 = icmp slt i64 %indvars.iv.i.i, %241
DOALL:     	  br i1 %243, label %244, label %_Z4distRK5PointS1_i.exit.i, !prof !69
DOALL:     	  %245 = getelementptr inbounds float, float* %238, i64 %indvars.iv.i.i
DOALL:     	  %246 = load float, float* %245, align 4, !tbaa !70
DOALL:     	  %247 = getelementptr inbounds float, float* %240, i64 %indvars.iv.i.i
DOALL:     	  %248 = load float, float* %247, align 4, !tbaa !70
DOALL:     	  %249 = fsub float %246, %248
DOALL:     	  %250 = fmul float %249, %249
DOALL:     	  %251 = fadd float %.0.i.i, %250
DOALL:     	  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %242 ]
DOALL:     	  %252 = fmul float %234, %.0.i.i.lcssa
DOALL:     	  %253 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 3
DOALL:     	  store float %252, float* %253, align 8, !tbaa !61
DOALL:     	  store i64 %39, i64* %220, align 8, !tbaa !63
DOALL:     	  %indvars.iv.next33.i = add nuw i64 %indvars.iv32.i, 1
DOALL:     	  %255 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %256 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %._crit_edge60.i ], [ 0, %254 ]
DOALL:     	  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i
DOALL:     	  br i1 %258, label %259, label %271, !prof !67
DOALL:     	  %260 = getelementptr inbounds i8, i8* %255, i64 %indvars.iv.i
DOALL:     	  %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51
DOALL:     	  %262 = icmp eq i8 %261, 0
DOALL:     	  br i1 %262, label %.._crit_edge60_crit_edge.i, label %263, !prof !71
DOALL:     	  %264 = getelementptr inbounds i32, i32* %256, i64 %indvars.iv.i
DOALL:     	  %265 = load i32, i32* %264, align 4, !tbaa !33
DOALL:     	  %266 = sext i32 %265 to i64
DOALL:     	  %267 = getelementptr inbounds double, double* %155, i64 %266
DOALL:     	  %268 = load double, double* %267, align 8, !tbaa !46
DOALL:     	  %269 = fcmp ogt double %268, 0.000000e+00
DOALL:     	  br i1 %269, label %270, label %.._crit_edge60_crit_edge10.i, !prof !72
DOALL:     	  store i8 0, i8* %260, align 1, !tbaa !49
DOALL:     	  %indvars.iv.next.i = add nuw i64 %indvars.iv.i, 1
DOALL:     	  %272 = icmp sle i64 0, %39
DOALL:     	  %273 = icmp sgt i64 %spec.select.i, %39
DOALL:     	  %or.cond.i = and i1 %272, %273
DOALL:     	  br i1 %or.cond.i, label %274, label %.._crit_edge62_crit_edge.i, !prof !73
DOALL:     	  %275 = getelementptr inbounds i8, i8* %255, i64 %39
DOALL:     	  store i8 1, i8* %275, align 1, !tbaa !49
DOALL:     	  %276 = load i64, i64* %4, align 8, !tbaa !43
DOALL:     	  %277 = add nsw i64 %276, 1
DOALL:     	  %278 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %279 = sext i32 %278 to i64
DOALL:     	  %280 = sub nsw i64 %277, %279
DOALL:     	  store i64 %280, i64* %4, align 8, !tbaa !43
DOALL:     	  tail call void @free(i8* %.lcssa) #3
DOALL:     External nodes: 43
DOALL:     	  br i1 %32, label %35, label %33, !prof !37
DOALL:     	  %37 = getelementptr inbounds i32, i32* %1, i64 %36
DOALL:     	  %40 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 0
DOALL:     	  br label %._crit_edge52.i
DOALL:     	  br label %._crit_edge52.i
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %._crit_edge54.i
DOALL:     	  br label %._crit_edge54.i
DOALL:     	  br label %63
DOALL:     	  br label %78
DOALL:     	  br label %._crit_edge56.i
DOALL:     	  br label %._crit_edge56.i
DOALL:     	  br label %89
DOALL:     	  %115 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 2
DOALL:     	  %116 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 1
DOALL:     	  br label %150
DOALL:     	  br label %150
DOALL:     	  br label %117
DOALL:     	  br label %._crit_edge58.i
DOALL:     	  br label %168
DOALL:     	  br label %168
DOALL:     	  br label %._crit_edge58.i
DOALL:     	  br label %157
DOALL:     	  store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %198
DOALL:     	  br label %214
DOALL:     	  br label %._crit_edge59.i
DOALL:     	  br label %242
DOALL:     	  br label %242
DOALL:     	  br label %._crit_edge59.i
DOALL:     	  br label %214
DOALL:     	  br label %257
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %257
DOALL:     	  br label %._crit_edge62.i
DOALL:     	  br label %._crit_edge62.i
DOALL:     	  br label %_Z5pgainlP6PointsdPliP17pthread_barrier_t.exit
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %_Z5pgainlP6PointsdPliP17pthread_barrier_t.exit
DOALL:     	  %282 = phi double [ 0.000000e+00, %281 ], [ %.lcssa1, %._crit_edge62.i ]
DOALL:     Edges: 1248
DOALL:     Loop-carried data dependences
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %47 = load i64, i64* %4, align 8, !tbaa !43 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %228 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %88 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %87 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %102 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %255 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %256 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %132 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %156 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %276 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %75 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %62 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %108 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %166 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %217 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %47 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %61 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %142 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %114 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %38 = load i32, i32* %37, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %42 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         %74 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         %103 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         %107 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         %113 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %145 = load i32, i32* %144, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %145 = load i32, i32* %144, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %165 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %171 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %171 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %181 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %181 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store i32 %208, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %223 = load i32, i32* %222, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %223 = load i32, i32* %222, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %265 = load i32, i32* %264, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %265 = load i32, i32* %264, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         %278 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   %47 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   %276 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 15
DOALL:     	  %234 = load float, float* %233, align 8, !tbaa !58
DOALL:     	  %238 = load float*, float** %237, align 8
DOALL:     	  %240 = load float*, float** %239, align 8
DOALL:     	  %.0.i.i = phi float [ %251, %244 ], [ 0.000000e+00, %232 ]
DOALL:     	  %245 = getelementptr inbounds float, float* %238, i64 %indvars.iv.i.i
DOALL:     	  %246 = load float, float* %245, align 4, !tbaa !70
DOALL:     	  %247 = getelementptr inbounds float, float* %240, i64 %indvars.iv.i.i
DOALL:     	  %248 = load float, float* %247, align 4, !tbaa !70
DOALL:     	  %249 = fsub float %246, %248
DOALL:     	  %250 = fmul float %249, %249
DOALL:     	  %251 = fadd float %.0.i.i, %250
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %242 ]
DOALL:     	  %252 = fmul float %234, %.0.i.i.lcssa
DOALL:     	  store float %252, float* %253, align 8, !tbaa !61
DOALL:     	  store i64 %39, i64* %220, align 8, !tbaa !63
DOALL:     External nodes: 9
DOALL:     	  %220 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 2
DOALL:     	  %221 = load i64, i64* %220, align 8, !tbaa !63
DOALL:     	  br i1 %brmerge.i, label %232, label %.._crit_edge59_crit_edge.i, !prof !68
DOALL:     	  %233 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 0
DOALL:     	  %237 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 1
DOALL:     	  %239 = getelementptr inbounds %struct.Point, %struct.Point* %235, i64 0, i32 1
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %244 ], [ 0, %232 ]
DOALL:     	  br i1 %243, label %244, label %_Z4distRK5PointS1_i.exit.i, !prof !69
DOALL:     	  %253 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 3
DOALL:     Edges: 51
DOALL:     Loop-carried data dependences
DOALL:         %240 = load float*, float** %239, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %238 = load float*, float** %237, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 10
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %115 = add nsw i32 %77, 1
DOALL:     	  %storemerge = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ]
DOALL:     	  %68 = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ]
DOALL:     	  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     	  %69 = sext i32 %68 to i64
DOALL:     	  %70 = load i64, i64* %6, align 8, !tbaa !30
DOALL:     	  %71 = icmp sgt i64 %70, %69
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %77 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     External nodes: 11
DOALL:     	  br label %67
DOALL:     	  %73 = tail call i64 @lrand48() #3
DOALL:     	  %74 = sitofp i64 %73 to float
DOALL:     	  %75 = fmul float %74, 0x3E00000000000000
DOALL:     	  %76 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %78 = sext i32 %77 to i64
DOALL:     	  %79 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78, i32 3
DOALL:     	  %80 = load float, float* %79, align 8, !tbaa !47
DOALL:     	  %81 = fdiv float %80, %1
DOALL:     	  %82 = fcmp olt float %75, %81
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     Edges: 31
DOALL:     Loop-carried data dependences
DOALL:         store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 --->   store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 via memory
DOALL:         %115 = add nsw i32 %77, 1 --->   %68 = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ] via variable
DOALL:         %115 = add nsw i32 %77, 1 --->   %storemerge = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ] via variable
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %73 = tail call i64 @lrand48() #3
DOALL:     External nodes: 2
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %74 = sitofp i64 %73 to float
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %84 = load i64, i64* %2, align 8, !tbaa !49
DOALL:     	  %85 = add nsw i64 %84, 1
DOALL:     	  store i64 %85, i64* %2, align 8, !tbaa !49
DOALL:     External nodes: 1
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     Edges: 8
DOALL:     Loop-carried data dependences
DOALL:         store i64 %85, i64* %2, align 8, !tbaa !49 --->   store i64 %85, i64* %2, align 8, !tbaa !49 via memory
DOALL:         store i64 %85, i64* %2, align 8, !tbaa !49 --->   %84 = load i64, i64* %2, align 8, !tbaa !49 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 39
DOALL:     	  %91 = load i32, i32* %17, align 8, !tbaa !41
DOALL:     	  %92 = getelementptr inbounds %struct.Point, %struct.Point* %86, i64 0, i32 1
DOALL:     	  %93 = load float*, float** %92, align 8
DOALL:     	  %94 = getelementptr inbounds %struct.Point, %struct.Point* %90, i64 0, i32 1
DOALL:     	  %95 = load float*, float** %94, align 8
DOALL:     	  %96 = sext i32 %91 to i64
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %99 ], [ 0, %89 ]
DOALL:     	  %.0.i = phi float [ %106, %99 ], [ 0.000000e+00, %89 ]
DOALL:     	  %98 = icmp slt i64 %indvars.iv.i, %96
DOALL:     	  br i1 %98, label %99, label %_Z4distRK5PointS1_i.exit, !prof !42
DOALL:     	  %100 = getelementptr inbounds float, float* %93, i64 %indvars.iv.i
DOALL:     	  %101 = load float, float* %100, align 4, !tbaa !43
DOALL:     	  %102 = getelementptr inbounds float, float* %95, i64 %indvars.iv.i
DOALL:     	  %103 = load float, float* %102, align 4, !tbaa !43
DOALL:     	  %104 = fsub float %101, %103
DOALL:     	  %105 = fmul float %104, %104
DOALL:     	  %106 = fadd float %.0.i, %105
DOALL:     	  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %97 ]
DOALL:     	  %107 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 0
DOALL:     	  %108 = load float, float* %107, align 8, !tbaa !45
DOALL:     	  %109 = fmul float %.0.i.lcssa, %108
DOALL:     	  %110 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 3
DOALL:     	  %111 = load float, float* %110, align 8, !tbaa !47
DOALL:     	  %112 = fcmp olt float %109, %111
DOALL:     	  br i1 %112, label %113, label %.._crit_edge27_crit_edge, !prof !54
DOALL:     	  store float %109, float* %110, align 8, !tbaa !47
DOALL:     	  %114 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 2
DOALL:     	  store i64 %78, i64* %114, align 8, !tbaa !48
DOALL:     	  %indvars.iv.next17 = add i64 %indvars.iv16, 1
DOALL:     	  %80 = load float, float* %79, align 8, !tbaa !47
DOALL:     	  %81 = fdiv float %80, %1
DOALL:     	  %82 = fcmp olt float %75, %81
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     	  %86 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78
DOALL:     	  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge27 ], [ %18, %83 ]
DOALL:     	  %88 = icmp sgt i64 %spec.select, %indvars.iv16
DOALL:     	  br i1 %88, label %89, label %._crit_edge26.loopexit, !prof !53
DOALL:     	  %90 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16
DOALL:     External nodes: 16
DOALL:     	  br label %97
DOALL:     	  br label %97
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %87
DOALL:     	  br label %._crit_edge26
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %75 = fmul float %74, 0x3E00000000000000
DOALL:     	  %76 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %78 = sext i32 %77 to i64
DOALL:     	  %79 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78, i32 3
DOALL:     	  br label %._crit_edge26
DOALL:     	  %84 = load i64, i64* %2, align 8, !tbaa !49
DOALL:     	  %85 = add nsw i64 %84, 1
DOALL:     	  store i64 %85, i64* %2, align 8, !tbaa !49
DOALL:     	  br label %87
DOALL:     Edges: 125
DOALL:     Loop-carried data dependences
DOALL:         %93 = load float*, float** %92, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %95 = load float*, float** %94, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         %95 = load float*, float** %94, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %111 = load float, float* %110, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %80 = load float, float* %79, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %95 = load float*, float** %94, align 8 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %111 = load float, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %95 = load float*, float** %94, align 8 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         %80 = load float, float* %79, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 14
DOALL:     	  %93 = load float*, float** %92, align 8
DOALL:     	  %.0.i = phi float [ %106, %99 ], [ 0.000000e+00, %89 ]
DOALL:     	  %100 = getelementptr inbounds float, float* %93, i64 %indvars.iv.i
DOALL:     	  %101 = load float, float* %100, align 4, !tbaa !43
DOALL:     	  %104 = fsub float %101, %103
DOALL:     	  %105 = fmul float %104, %104
DOALL:     	  %106 = fadd float %.0.i, %105
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %97 ]
DOALL:     	  %109 = fmul float %.0.i.lcssa, %108
DOALL:     	  %112 = fcmp olt float %109, %111
DOALL:     	  br i1 %112, label %113, label %.._crit_edge27_crit_edge, !prof !54
DOALL:     	  store float %109, float* %110, align 8, !tbaa !47
DOALL:     	  %114 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 2
DOALL:     	  store i64 %78, i64* %114, align 8, !tbaa !48
DOALL:     External nodes: 11
DOALL:     	  %92 = getelementptr inbounds %struct.Point, %struct.Point* %86, i64 0, i32 1
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %99 ], [ 0, %89 ]
DOALL:     	  br i1 %98, label %99, label %_Z4distRK5PointS1_i.exit, !prof !42
DOALL:     	  %103 = load float, float* %102, align 4, !tbaa !43
DOALL:     	  %108 = load float, float* %107, align 8, !tbaa !45
DOALL:     	  %110 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 3
DOALL:     	  %111 = load float, float* %110, align 8, !tbaa !47
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %._crit_edge27
DOALL:     	  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge27 ], [ %18, %83 ]
DOALL:     	  br i1 %88, label %89, label %._crit_edge26.loopexit, !prof !53
DOALL:     Edges: 43
DOALL:     Loop-carried data dependences
DOALL:         %93 = load float*, float** %92, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %93 = load float*, float** %92, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 11
DOALL:     	  %26 = load float*, float** %25, align 8
DOALL:     	  %.0.i2 = phi float [ %39, %32 ], [ 0.000000e+00, %21 ]
DOALL:     	  %33 = getelementptr inbounds float, float* %26, i64 %indvars.iv.i1
DOALL:     	  %34 = load float, float* %33, align 4, !tbaa !43
DOALL:     	  %37 = fsub float %34, %36
DOALL:     	  %38 = fmul float %37, %37
DOALL:     	  %39 = fadd float %.0.i2, %38
DOALL:     	  %.0.i2.lcssa = phi float [ %.0.i2, %30 ]
DOALL:     	  %42 = fmul float %.0.i2.lcssa, %41
DOALL:     	  store float %42, float* %43, align 8, !tbaa !47
DOALL:     	  store i64 0, i64* %44, align 8, !tbaa !48
DOALL:     External nodes: 8
DOALL:     	  br i1 %20, label %21, label %45, !prof !39
DOALL:     	  %25 = getelementptr inbounds %struct.Point, %struct.Point* %23, i64 0, i32 1
DOALL:     	  %indvars.iv.i1 = phi i64 [ %indvars.iv.next.i3, %32 ], [ 0, %21 ]
DOALL:     	  br i1 %31, label %32, label %_Z4distRK5PointS1_i.exit4, !prof !42
DOALL:     	  %36 = load float, float* %35, align 4, !tbaa !43
DOALL:     	  %41 = load float, float* %40, align 8, !tbaa !45
DOALL:     	  %43 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 %indvars.iv20, i32 3
DOALL:     	  %44 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 %indvars.iv20, i32 2
DOALL:     Edges: 33
DOALL:     Loop-carried data dependences
DOALL:         %26 = load float*, float** %25, align 8 --->   store i64 0, i64* %44, align 8, !tbaa !48 via memory
DOALL:         %26 = load float*, float** %25, align 8 --->   store float %42, float* %43, align 8, !tbaa !47 via memory
DOALL:         store float %42, float* %43, align 8, !tbaa !47 --->   %26 = load float*, float** %25, align 8 via memory
DOALL:         store i64 0, i64* %44, align 8, !tbaa !48 --->   %26 = load float*, float** %25, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 8
DOALL:     	  %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57)
DOALL:     	  %61 = fmul float %58, %60
DOALL:     	  %63 = load float, float* %62, align 8, !tbaa !47
DOALL:     	  %64 = fcmp olt float %61, %63
DOALL:     	  br i1 %64, label %65, label %.._crit_edge25_crit_edge
DOALL:     	  store float %61, float* %62, align 8, !tbaa !47
DOALL:     	  %66 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18, i32 2
DOALL:     	  store i64 %50, i64* %66, align 8, !tbaa !48
DOALL:     External nodes: 11
DOALL:     	  %50 = sext i32 %49 to i64
DOALL:     	  %indvars.iv18 = phi i64 [ %indvars.iv.next19, %._crit_edge25 ], [ %18, %.preheader.preheader ]
DOALL:     	  br i1 %52, label %53, label %.loopexit.loopexit
DOALL:     	  %54 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %55 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %50
DOALL:     	  %56 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18
DOALL:     	  %57 = load i32, i32* %17, align 8, !tbaa !41
DOALL:     	  %60 = load float, float* %59, align 8, !tbaa !45
DOALL:     	  %62 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18, i32 3
DOALL:     	  br label %._crit_edge25
DOALL:     	  br label %._crit_edge25
DOALL:     Edges: 33
DOALL:     Loop-carried data dependences
DOALL:         %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) --->   store i64 %50, i64* %66, align 8, !tbaa !48 via memory
DOALL:         %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         %63 = load float, float* %62, align 8, !tbaa !47 --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   %63 = load float, float* %62, align 8, !tbaa !47 via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         store i64 %50, i64* %66, align 8, !tbaa !48 --->   store i64 %50, i64* %66, align 8, !tbaa !48 via memory
DOALL:         store i64 %50, i64* %66, align 8, !tbaa !48 --->   %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 0
DOALL:     Live-out ID = 1
DOALL:     Live-out ID = 2
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 39
DOALL:     	  %147 = load float, float* %146, align 8, !tbaa !52
DOALL:     	  %148 = fdiv float %147, %131
DOALL:     	  %149 = fcmp olt float %142, %148
DOALL:     	  br i1 %149, label %150, label %.._crit_edge26_crit_edge.i, !prof !63
DOALL:     	  %153 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %145
DOALL:     	  %indvars.iv16.i = phi i64 [ %indvars.iv.next17.i, %._crit_edge27.i ], [ 0, %150 ]
DOALL:     	  %155 = icmp sgt i64 %spec.select.i, %indvars.iv16.i
DOALL:     	  br i1 %155, label %156, label %._crit_edge26.loopexit.i, !prof !64
DOALL:     	  %157 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i
DOALL:     	  %158 = load i32, i32* %102, align 8, !tbaa !37
DOALL:     	  %159 = getelementptr inbounds %struct.Point, %struct.Point* %153, i64 0, i32 1
DOALL:     	  %160 = load float*, float** %159, align 8
DOALL:     	  %161 = getelementptr inbounds %struct.Point, %struct.Point* %157, i64 0, i32 1
DOALL:     	  %162 = load float*, float** %161, align 8
DOALL:     	  %163 = sext i32 %158 to i64
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %166 ], [ 0, %156 ]
DOALL:     	  %.0.i.i = phi float [ %173, %166 ], [ 0.000000e+00, %156 ]
DOALL:     	  %165 = icmp slt i64 %indvars.iv.i.i, %163
DOALL:     	  br i1 %165, label %166, label %_Z4distRK5PointS1_i.exit.i, !prof !61
DOALL:     	  %167 = getelementptr inbounds float, float* %160, i64 %indvars.iv.i.i
DOALL:     	  %168 = load float, float* %167, align 4, !tbaa !58
DOALL:     	  %169 = getelementptr inbounds float, float* %162, i64 %indvars.iv.i.i
DOALL:     	  %170 = load float, float* %169, align 4, !tbaa !58
DOALL:     	  %171 = fsub float %168, %170
DOALL:     	  %172 = fmul float %171, %171
DOALL:     	  %173 = fadd float %.0.i.i, %172
DOALL:     	  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %164 ]
DOALL:     	  %174 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 0
DOALL:     	  %175 = load float, float* %174, align 8, !tbaa !43
DOALL:     	  %176 = fmul float %.0.i.i.lcssa, %175
DOALL:     	  %177 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 3
DOALL:     	  %178 = load float, float* %177, align 8, !tbaa !52
DOALL:     	  %179 = fcmp olt float %176, %178
DOALL:     	  br i1 %179, label %180, label %.._crit_edge27_crit_edge.i, !prof !65
DOALL:     	  store float %176, float* %177, align 8, !tbaa !52
DOALL:     	  %181 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 2
DOALL:     	  store i64 %145, i64* %181, align 8, !tbaa !51
DOALL:     	  %indvars.iv.next17.i = add nuw i64 %indvars.iv16.i, 1
DOALL:     External nodes: 16
DOALL:     	  br i1 %138, label %139, label %.loopexit7.loopexit.i, !prof !62
DOALL:     	  %142 = fmul float %141, 0x3E00000000000000
DOALL:     	  %143 = load %struct.Point*, %struct.Point** %101, align 8, !tbaa !42
DOALL:     	  %145 = sext i32 %144 to i64
DOALL:     	  %146 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %145, i32 3
DOALL:     	  br label %._crit_edge26.i
DOALL:     	  %151 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
DOALL:     	  %152 = add nsw i64 %151, 1
DOALL:     	  store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
DOALL:     	  br label %154
DOALL:     	  br label %164
DOALL:     	  br label %164
DOALL:     	  br label %._crit_edge27.i
DOALL:     	  br label %._crit_edge27.i
DOALL:     	  br label %154
DOALL:     	  br label %._crit_edge26.i
DOALL:     Edges: 125
DOALL:     Loop-carried data dependences
DOALL:         %162 = load float*, float** %161, align 8 --->   store i64 %145, i64* %181, align 8, !tbaa !51 via memory
DOALL:         %162 = load float*, float** %161, align 8 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         %147 = load float, float* %146, align 8, !tbaa !52 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         %178 = load float, float* %177, align 8, !tbaa !52 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %178 = load float, float* %177, align 8, !tbaa !52 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %162 = load float*, float** %161, align 8 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %147 = load float, float* %146, align 8, !tbaa !52 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %160 = load float*, float** %159, align 8 via memory
DOALL:         store i64 %145, i64* %181, align 8, !tbaa !51 --->   store i64 %145, i64* %181, align 8, !tbaa !51 via memory
DOALL:         store i64 %145, i64* %181, align 8, !tbaa !51 --->   %160 = load float*, float** %159, align 8 via memory
DOALL:         store i64 %145, i64* %181, align 8, !tbaa !51 --->   %162 = load float*, float** %161, align 8 via memory
DOALL:         %160 = load float*, float** %159, align 8 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         %160 = load float*, float** %159, align 8 --->   store i64 %145, i64* %181, align 8, !tbaa !51 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %140 = tail call i64 @lrand48() #3
DOALL:     External nodes: 2
DOALL:     	  br i1 %138, label %139, label %.loopexit7.loopexit.i, !prof !62
DOALL:     	  %141 = sitofp i64 %140 to float
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %140 = tail call i64 @lrand48() #3 --->   %140 = tail call i64 @lrand48() #3 via memory
DOALL:         %140 = tail call i64 @lrand48() #3 --->   %140 = tail call i64 @lrand48() #3 via memory
DOALL:         %140 = tail call i64 @lrand48() #3 --->   %140 = tail call i64 @lrand48() #3 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %storemerge.i = phi i32 [ 1, %129 ], [ %182, %._crit_edge26.i ]
DOALL:     	  %135 = phi i32 [ 1, %129 ], [ %182, %._crit_edge26.i ]
DOALL:     	  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30
DOALL:     	  %136 = sext i32 %135 to i64
DOALL:     	  %137 = load i64, i64* %94, align 8, !tbaa !40
DOALL:     	  %138 = icmp sgt i64 %137, %136
DOALL:     	  br i1 %138, label %139, label %.loopexit7.loopexit.i, !prof !62
DOALL:     	  %144 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30
DOALL:     	  %182 = add nsw i32 %144, 1
DOALL:     External nodes: 11
DOALL:     	  %140 = tail call i64 @lrand48() #3
DOALL:     	  %141 = sitofp i64 %140 to float
DOALL:     	  %142 = fmul float %141, 0x3E00000000000000
DOALL:     	  %143 = load %struct.Point*, %struct.Point** %101, align 8, !tbaa !42
DOALL:     	  %145 = sext i32 %144 to i64
DOALL:     	  %146 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %145, i32 3
DOALL:     	  %147 = load float, float* %146, align 8, !tbaa !52
DOALL:     	  %148 = fdiv float %147, %131
DOALL:     	  %149 = fcmp olt float %142, %148
DOALL:     	  br i1 %149, label %150, label %.._crit_edge26_crit_edge.i, !prof !63
DOALL:     	  br label %134
DOALL:     Edges: 31
DOALL:     Loop-carried data dependences
DOALL:         %182 = add nsw i32 %144, 1 --->   %storemerge.i = phi i32 [ 1, %129 ], [ %182, %._crit_edge26.i ] via variable
DOALL:         %182 = add nsw i32 %144, 1 --->   %135 = phi i32 [ 1, %129 ], [ %182, %._crit_edge26.i ] via variable
DOALL:         store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30 --->   store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %151 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
DOALL:     	  %152 = add nsw i64 %151, 1
DOALL:     	  store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
DOALL:     External nodes: 1
DOALL:     	  br i1 %149, label %150, label %.._crit_edge26_crit_edge.i, !prof !63
DOALL:     Edges: 8
DOALL:     Loop-carried data dependences
DOALL:         store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54 --->   %151 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54 via memory
DOALL:         store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54 --->   store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 14
DOALL:     	  %160 = load float*, float** %159, align 8
DOALL:     	  %.0.i.i = phi float [ %173, %166 ], [ 0.000000e+00, %156 ]
DOALL:     	  %167 = getelementptr inbounds float, float* %160, i64 %indvars.iv.i.i
DOALL:     	  %168 = load float, float* %167, align 4, !tbaa !58
DOALL:     	  %171 = fsub float %168, %170
DOALL:     	  %172 = fmul float %171, %171
DOALL:     	  %173 = fadd float %.0.i.i, %172
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %164 ]
DOALL:     	  %176 = fmul float %.0.i.i.lcssa, %175
DOALL:     	  %179 = fcmp olt float %176, %178
DOALL:     	  br i1 %179, label %180, label %.._crit_edge27_crit_edge.i, !prof !65
DOALL:     	  store float %176, float* %177, align 8, !tbaa !52
DOALL:     	  %181 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 2
DOALL:     	  store i64 %145, i64* %181, align 8, !tbaa !51
DOALL:     External nodes: 11
DOALL:     	  %indvars.iv16.i = phi i64 [ %indvars.iv.next17.i, %._crit_edge27.i ], [ 0, %150 ]
DOALL:     	  br i1 %155, label %156, label %._crit_edge26.loopexit.i, !prof !64
DOALL:     	  %159 = getelementptr inbounds %struct.Point, %struct.Point* %153, i64 0, i32 1
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %166 ], [ 0, %156 ]
DOALL:     	  br i1 %165, label %166, label %_Z4distRK5PointS1_i.exit.i, !prof !61
DOALL:     	  %170 = load float, float* %169, align 4, !tbaa !58
DOALL:     	  %175 = load float, float* %174, align 8, !tbaa !43
DOALL:     	  %177 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 3
DOALL:     	  %178 = load float, float* %177, align 8, !tbaa !52
DOALL:     	  br label %._crit_edge27.i
DOALL:     	  br label %._crit_edge27.i
DOALL:     Edges: 43
DOALL:     Loop-carried data dependences
DOALL:         store i64 %145, i64* %181, align 8, !tbaa !51 --->   %160 = load float*, float** %159, align 8 via memory
DOALL:         %160 = load float*, float** %159, align 8 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         %160 = load float*, float** %159, align 8 --->   store i64 %145, i64* %181, align 8, !tbaa !51 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %160 = load float*, float** %159, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %struct.Points, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   Inlining in: _Z13streamClusterP7PStreamllillPc (227 instructions. The inlining will add 58 instructions),   call void @_Z11localSearchP6PointsllPl(%struct.Points* nonnull %8, i64 %1, i64 %2, i64* nonnull %10)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv12, %4" (2.667064e-04%)
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv10, %5" (1.990092e-05%)
Noelle:     Loop "  %65 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %62, align 8, !tbaa !47" (4.705694e+01%)
Noelle:     Loop "  %89 = icmp sgt i64 %67, %indvars.iv" (2.074395e-04%)
Noelle:     Loop "  %112 = icmp slt i64 %.01.i, %108" (2.963398e-04%)
Noelle:     Loop "  %125 = icmp slt i64 %.12.i, %.pre3.i" (4.155102e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.404292e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.009366e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.702572e-08%)
Noelle:     Loop "  %50 = icmp slt i64 %.02, %spec.select" (2.586415e-07%)
Noelle:     Loop "  %65 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.639788e-01%)
Noelle:     Loop "  %213 = icmp slt i64 %212, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.293207e-01%)
Noelle:     Loop "  %75 = load i64, i64* %72, align 8, !tbaa !40" (1.363073e-03%)
Noelle:     Loop "  %104 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.001610e-01%)
Noelle:     Loop "  %115 = icmp slt i64 %indvars.iv.i1.i, %113" (9.885715e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.271444e-01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.258997e-01%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv.i.i, %163" (4.201429e-01%)
Noelle:     Loop "  %184 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.519501e-04%)
Noelle:     Loop "  %201 = icmp slt i64 %indvars.iv.i, %198" (5.064308e-08%)
Noelle:     Loop "  %226 = icmp sgt i64 %223, %indvars.iv" (2.963398e-04%)
Noelle:     Loop "  %240 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.293418e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.365950e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.503818e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.305599e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.060782e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.493165e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.163312e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.446342e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.513270e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i, %226" (2.376035e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select, %indvars.iv" (5.039142e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %286 = fdiv double %.0, %.02" (9.293422e+01%)
Noelle:     Loop "  %289 = icmp slt i64 %.01, %6" (9.293422e+01%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.288114e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %18" (1.877411e-05%)
Noelle:     Loop "  %32 = icmp slt i64 %.01.us, %6" (9.288112e+01%)
Noelle:     Loop "  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.365950e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv42.i, %76" (5.503818e-05%)
Noelle:     Loop "  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.305599e-01%)
Noelle:     Loop "  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.060782e+01%)
Noelle:     Loop "  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.493165e-01%)
Noelle:     Loop "  %169 = icmp slt i32 %.03.i, %114" (3.163312e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %indvars.iv34.i, %196" (7.446342e-05%)
Noelle:     Loop "  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.513270e-01%)
Noelle:     Loop "  %243 = icmp slt i64 %indvars.iv.i.i, %241" (2.376035e-01%)
Noelle:     Loop "  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.039142e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (8.980222e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.003221e-01%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv.i1, %29" (1.977143e-01%)
Noelle:     Loop "  %49 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.336429e+10%)
Noelle:     Loop "  %52 = icmp sgt i64 %spec.select, %indvars.iv18" (3.336429e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.542888e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.517995e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv.i, %96" (8.402858e-01%)
Noelle:     Loop "  %117 = icmp sgt i64 %spec.select, %indvars.iv14" (1.303900e-03%)
Noelle:     Loop "  %136 = icmp slt i64 %indvars.iv, %133" (1.012862e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.913559e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.830599e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.219774e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.181250e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.044610e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.963398e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.155102e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.259552e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.771081e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.508460e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.586415e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.940956e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.874397e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.874698e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.667064e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.990092e-05%)
Noelle:     Loop "  %66 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.705694e+01%)
Noelle:     Loop "  %90 = icmp sgt i64 %68, %indvars.iv" (2.074395e-04%)
Noelle:     Loop "  %109 = sext i32 %108 to i64" (4.702146e+01%)
Noelle:     Loop "  %155 = icmp slt i64 %.01.i, %151" (2.963398e-04%)
Noelle:     Loop "  %168 = icmp slt i64 %.12.i, %.pre3.i" (4.155102e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.404292e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.009366e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.702572e-08%)
Noelle:     Loop "  %50 = icmp slt i64 %.02, %spec.select" (2.586415e-07%)
Noelle:     Loop "  %65 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.639788e-01%)
Noelle:     Loop "  %213 = icmp slt i64 %212, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.293207e-01%)
Noelle:     Loop "  %75 = load i64, i64* %72, align 8, !tbaa !40" (1.363073e-03%)
Noelle:     Loop "  %104 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.001610e-01%)
Noelle:     Loop "  %115 = icmp slt i64 %indvars.iv.i1.i, %113" (9.885715e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.271444e-01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.258997e-01%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv.i.i, %163" (4.201429e-01%)
Noelle:     Loop "  %184 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.519501e-04%)
Noelle:     Loop "  %201 = icmp slt i64 %indvars.iv.i, %198" (5.064308e-08%)
Noelle:     Loop "  %226 = icmp sgt i64 %223, %indvars.iv" (2.963398e-04%)
Noelle:     Loop "  %240 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.293418e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.365950e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.503818e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.305599e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.060782e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.493165e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.163312e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.446342e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.513270e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i, %226" (2.376035e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select, %indvars.iv" (5.039142e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %286 = fdiv double %.0, %.02" (9.293422e+01%)
Noelle:     Loop "  %289 = icmp slt i64 %.01, %6" (9.293422e+01%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.288114e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %18" (1.877411e-05%)
Noelle:     Loop "  %32 = icmp slt i64 %.01.us, %6" (9.288112e+01%)
Noelle:     Loop "  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.365950e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv42.i, %76" (5.503818e-05%)
Noelle:     Loop "  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.305599e-01%)
Noelle:     Loop "  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.060782e+01%)
Noelle:     Loop "  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.493165e-01%)
Noelle:     Loop "  %169 = icmp slt i32 %.03.i, %114" (3.163312e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %indvars.iv34.i, %196" (7.446342e-05%)
Noelle:     Loop "  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.513270e-01%)
Noelle:     Loop "  %243 = icmp slt i64 %indvars.iv.i.i, %241" (2.376035e-01%)
Noelle:     Loop "  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.039142e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (8.980222e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.003221e-01%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv.i1, %29" (1.977143e-01%)
Noelle:     Loop "  %49 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.336429e+10%)
Noelle:     Loop "  %52 = icmp sgt i64 %spec.select, %indvars.iv18" (3.336429e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.542888e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.517995e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv.i, %96" (8.402858e-01%)
Noelle:     Loop "  %117 = icmp sgt i64 %spec.select, %indvars.iv14" (1.303900e-03%)
Noelle:     Loop "  %136 = icmp slt i64 %indvars.iv, %133" (1.012862e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.913559e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.830599e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.219774e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.181250e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.044610e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.963398e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.155102e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.259552e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.771081e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.508460e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.586415e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.940956e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.874397e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.874698e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint:       There are 50 different instructions and 85 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.VoNJfbgnnE -o /tmp/tmp.VoNJfbgnnE
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.VoNJfbgnnE -o /tmp/tmp.VoNJfbgnnE
NOELLE: FixedPoint:     Invocation 7
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
Inliner: Start
Inliner:   Number of program instructions = 2379
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 15
DOALL:     	  %219 = load float, float* %218, align 8, !tbaa !54
DOALL:     	  %223 = load float*, float** %222, align 8
DOALL:     	  %225 = load float*, float** %224, align 8
DOALL:     	  %.0.i = phi float [ %236, %229 ], [ 0.000000e+00, %217 ]
DOALL:     	  %230 = getelementptr inbounds float, float* %223, i64 %indvars.iv.i
DOALL:     	  %231 = load float, float* %230, align 4, !tbaa !66
DOALL:     	  %232 = getelementptr inbounds float, float* %225, i64 %indvars.iv.i
DOALL:     	  %233 = load float, float* %232, align 4, !tbaa !66
DOALL:     	  %234 = fsub float %231, %233
DOALL:     	  %235 = fmul float %234, %234
DOALL:     	  %236 = fadd float %.0.i, %235
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %227 ]
DOALL:     	  %237 = fmul float %219, %.0.i.lcssa
DOALL:     	  store float %237, float* %238, align 8, !tbaa !57
DOALL:     	  store i64 %0, i64* %205, align 8, !tbaa !59
DOALL:     External nodes: 9
DOALL:     	  br i1 %brmerge, label %217, label %.._crit_edge59_crit_edge, !prof !64
DOALL:     	  %218 = getelementptr inbounds %struct.Point, %struct.Point* %204, i64 0, i32 0
DOALL:     	  %222 = getelementptr inbounds %struct.Point, %struct.Point* %204, i64 0, i32 1
DOALL:     	  %224 = getelementptr inbounds %struct.Point, %struct.Point* %220, i64 0, i32 1
DOALL:     	  br i1 %228, label %229, label %_Z4distRK5PointS1_i.exit, !prof !65
DOALL:     	  %205 = getelementptr inbounds %struct.Point, %struct.Point* %203, i64 %indvars.iv32, i32 2
DOALL:     	  %206 = load i64, i64* %205, align 8, !tbaa !59
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %229 ], [ 0, %217 ]
DOALL:     	  %238 = getelementptr inbounds %struct.Point, %struct.Point* %203, i64 %indvars.iv32, i32 3
DOALL:     Edges: 51
DOALL:     Loop-carried data dependences
DOALL:         %219 = load float, float* %218, align 8, !tbaa !54 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %219 = load float, float* %218, align 8, !tbaa !54 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %223 = load float*, float** %222, align 8 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %223 = load float*, float** %222, align 8 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %225 = load float*, float** %224, align 8 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %225 = load float*, float** %224, align 8 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %219 = load float, float* %218, align 8, !tbaa !54 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %223 = load float*, float** %222, align 8 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %225 = load float*, float** %224, align 8 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %225 = load float*, float** %224, align 8 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %219 = load float, float* %218, align 8, !tbaa !54 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %223 = load float*, float** %222, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 9
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 5
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  %.pre7.i = load double, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     External nodes: 6
DOALL:     	  br i1 %32, label %35, label %33, !prof !37
DOALL:     	  %60 = tail call noalias i8* @malloc(i64 %59) #3
DOALL:     	  br i1 %200, label %201, label %.loopexit.loopexit.i, !prof !53
DOALL:     	  %212 = fadd double %199, %211
DOALL:     	  br i1 %213, label %.preheader.i, label %281, !prof !66
DOALL:     	  %283 = fsub double -0.000000e+00, %.pre7.i
DOALL:     Edges: 24
DOALL:     Loop-carried data dependences
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %.pre7.i = load double, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 288
DOALL:     	  %38 = load i32, i32* %37, align 4, !tbaa !33
DOALL:     	  %39 = sext i32 %38 to i64
DOALL:     	  %41 = load i64, i64* %40, align 8, !tbaa !38
DOALL:     	  %42 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %43 = sext i32 %42 to i64
DOALL:     	  %44 = sdiv i64 %41, %43
DOALL:     	  %45 = add nsw i32 %42, -1
DOALL:     	  %46 = icmp eq i32 %45, 0
DOALL:     	  %spec.select.i = select i1 %46, i64 %41, i64 %44, !prof !42
DOALL:     	  %47 = load i64, i64* %4, align 8, !tbaa !43
DOALL:     	  %48 = trunc i64 %47 to i32
DOALL:     	  %49 = add i32 %48, 2
DOALL:     	  %50 = and i32 %49, 3
DOALL:     	  %51 = icmp eq i32 %50, 0
DOALL:     	  br i1 %51, label %.._crit_edge52_crit_edge.i, label %52, !prof !44
DOALL:     	  %53 = sdiv i32 %49, 4
DOALL:     	  %54 = shl nsw i32 %53, 2
DOALL:     	  %55 = add i32 %54, 4
DOALL:     	  %.010.i = phi i32 [ %55, %52 ], [ %49, %.._crit_edge52_crit_edge.i ]
DOALL:     	  %56 = add nsw i32 %42, 1
DOALL:     	  %57 = mul nsw i32 %.010.i, %56
DOALL:     	  %58 = sext i32 %57 to i64
DOALL:     	  %59 = shl nsw i64 %58, 3
DOALL:     	  %60 = tail call noalias i8* @malloc(i64 %59) #3
DOALL:     	  store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45
DOALL:     	  store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %61 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %62 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv44.i = phi i64 [ %indvars.iv.next45.i, %._crit_edge54.i ], [ 0, %._crit_edge52.i ]
DOALL:     	  %.016.i = phi i32 [ %.117.i, %._crit_edge54.i ], [ 0, %._crit_edge52.i ]
DOALL:     	  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i
DOALL:     	  br i1 %64, label %65, label %72, !prof !48
DOALL:     	  %66 = getelementptr inbounds i8, i8* %61, i64 %indvars.iv44.i
DOALL:     	  %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51
DOALL:     	  %68 = icmp eq i8 %67, 0
DOALL:     	  br i1 %68, label %.._crit_edge54_crit_edge.i, label %69, !prof !52
DOALL:     	  %70 = add nsw i32 %.016.i, 1
DOALL:     	  %71 = getelementptr inbounds i32, i32* %62, i64 %indvars.iv44.i
DOALL:     	  store i32 %.016.i, i32* %71, align 4, !tbaa !33
DOALL:     	  %.117.i = phi i32 [ %70, %69 ], [ %.016.i, %.._crit_edge54_crit_edge.i ]
DOALL:     	  %indvars.iv.next45.i = add nuw i64 %indvars.iv44.i, 1
DOALL:     	  %.016.i.lcssa = phi i32 [ %.016.i, %63 ]
DOALL:     	  %73 = sitofp i32 %.016.i.lcssa to double
DOALL:     	  %74 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  store double %73, double* %74, align 8, !tbaa !46
DOALL:     	  %75 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %76 = sext i32 %75 to i64
DOALL:     	  %77 = sext i32 %.010.i to i64
DOALL:     	  %indvars.iv42.i = phi i64 [ %indvars.iv.next43.i, %80 ], [ 0, %72 ]
DOALL:     	  %.012.i = phi i32 [ %86, %80 ], [ 0, %72 ]
DOALL:     	  %79 = icmp slt i64 %indvars.iv42.i, %76
DOALL:     	  br i1 %79, label %80, label %._crit_edge55.loopexit.i, !prof !53
DOALL:     	  %81 = mul nsw i64 %indvars.iv42.i, %77
DOALL:     	  %82 = getelementptr inbounds double, double* %74, i64 %81
DOALL:     	  %83 = load double, double* %82, align 8, !tbaa !46
DOALL:     	  %84 = fptosi double %83 to i32
DOALL:     	  %85 = sitofp i32 %.012.i to double
DOALL:     	  store double %85, double* %82, align 8, !tbaa !46
DOALL:     	  %86 = add nsw i32 %.012.i, %84
DOALL:     	  %indvars.iv.next43.i = add nuw nsw i64 %indvars.iv42.i, 1
DOALL:     	  %87 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %88 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv40.i = phi i64 [ %indvars.iv.next41.i, %._crit_edge56.i ], [ 0, %._crit_edge55.loopexit.i ]
DOALL:     	  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i
DOALL:     	  br i1 %90, label %91, label %101, !prof !48
DOALL:     	  %92 = getelementptr inbounds i8, i8* %87, i64 %indvars.iv40.i
DOALL:     	  %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51
DOALL:     	  %94 = icmp eq i8 %93, 0
DOALL:     	  br i1 %94, label %.._crit_edge56_crit_edge.i, label %95, !prof !52
DOALL:     	  %96 = load double, double* %74, align 8, !tbaa !46
DOALL:     	  %97 = fptosi double %96 to i32
DOALL:     	  %98 = getelementptr inbounds i32, i32* %88, i64 %indvars.iv40.i
DOALL:     	  %99 = load i32, i32* %98, align 4, !tbaa !33
DOALL:     	  %100 = add nsw i32 %99, %97
DOALL:     	  store i32 %100, i32* %98, align 4, !tbaa !33
DOALL:     	  %indvars.iv.next41.i = add nuw i64 %indvars.iv40.i, 1
DOALL:     	  %102 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54
DOALL:     	  %103 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %104 = bitcast double* %103 to i8*
DOALL:     	  %105 = sext i32 %.010.i to i64
DOALL:     	  %106 = shl nsw i64 %105, 3
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55
DOALL:     	  %107 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %108 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %109 = mul nsw i32 %108, %.010.i
DOALL:     	  %110 = sext i32 %109 to i64
DOALL:     	  %111 = getelementptr inbounds double, double* %107, i64 %110
DOALL:     	  %112 = bitcast double* %111 to i8*
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55
DOALL:     	  %113 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %114 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %indvars.iv38.i = phi i64 [ %indvars.iv.next39.i, %150 ], [ 0, %101 ]
DOALL:     	  %.013.i = phi double [ %.114.i, %150 ], [ 0.000000e+00, %101 ]
DOALL:     	  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i
DOALL:     	  br i1 %118, label %119, label %151, !prof !48
DOALL:     	  %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56
DOALL:     	  %121 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i
DOALL:     	  %122 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %39
DOALL:     	  %123 = load i32, i32* %116, align 8, !tbaa !57
DOALL:     	  %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3
DOALL:     	  %125 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 0
DOALL:     	  %126 = load float, float* %125, align 8, !tbaa !58
DOALL:     	  %127 = fmul float %124, %126
DOALL:     	  %128 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 3
DOALL:     	  %129 = load float, float* %128, align 8, !tbaa !61
DOALL:     	  %130 = fcmp olt float %127, %129
DOALL:     	  br i1 %130, label %131, label %137, !prof !62
DOALL:     	  %132 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  %133 = getelementptr inbounds i8, i8* %132, i64 %indvars.iv38.i
DOALL:     	  store i8 1, i8* %133, align 1, !tbaa !49
DOALL:     	  %134 = fsub float %127, %129
DOALL:     	  %135 = fpext float %134 to double
DOALL:     	  %136 = fadd double %.013.i, %135
DOALL:     	  %138 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 2
DOALL:     	  %139 = load i64, i64* %138, align 8, !tbaa !63
DOALL:     	  %140 = fsub float %129, %127
DOALL:     	  %141 = fpext float %140 to double
DOALL:     	  %142 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45
DOALL:     	  %sext.i = shl i64 %139, 32
DOALL:     	  %143 = ashr exact i64 %sext.i, 32
DOALL:     	  %144 = getelementptr inbounds i32, i32* %142, i64 %143
DOALL:     	  %145 = load i32, i32* %144, align 4, !tbaa !33
DOALL:     	  %146 = sext i32 %145 to i64
DOALL:     	  %147 = getelementptr inbounds double, double* %113, i64 %146
DOALL:     	  %148 = load double, double* %147, align 8, !tbaa !46
DOALL:     	  %149 = fadd double %148, %141
DOALL:     	  store double %149, double* %147, align 8, !tbaa !46
DOALL:     	  %.114.i = phi double [ %136, %131 ], [ %.013.i, %137 ]
DOALL:     	  %indvars.iv.next39.i = add nuw i64 %indvars.iv38.i, 1
DOALL:     	  %.013.i.lcssa = phi double [ %.013.i, %117 ]
DOALL:     	  %152 = bitcast double* %113 to i8*
DOALL:     	  %153 = mul nsw i32 %114, %.010.i
DOALL:     	  %154 = sext i32 %153 to i64
DOALL:     	  %155 = getelementptr inbounds double, double* %113, i64 %154
DOALL:     	  %156 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %158 = phi i8* [ %187, %._crit_edge58.i ], [ %152, %151 ]
DOALL:     	  %indvars.iv36.i = phi i64 [ %indvars.iv.next37.i, %._crit_edge58.i ], [ 0, %151 ]
DOALL:     	  %.215.i = phi double [ %.4.i, %._crit_edge58.i ], [ %.013.i.lcssa, %151 ]
DOALL:     	  %.09.i = phi i32 [ %.2.i, %._crit_edge58.i ], [ 0, %151 ]
DOALL:     	  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i
DOALL:     	  br i1 %159, label %160, label %188, !prof !48
DOALL:     	  %161 = getelementptr inbounds i8, i8* %156, i64 %indvars.iv36.i
DOALL:     	  %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51
DOALL:     	  %163 = icmp eq i8 %162, 0
DOALL:     	  br i1 %163, label %.._crit_edge58_crit_edge.i, label %164, !prof !52
DOALL:     	  %165 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8
DOALL:     	  %166 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %167 = getelementptr inbounds i32, i32* %166, i64 %indvars.iv36.i
DOALL:     	  %.04.i = phi double [ %14, %164 ], [ %177, %170 ]
DOALL:     	  %.03.i = phi i32 [ 0, %164 ], [ %178, %170 ]
DOALL:     	  %169 = icmp slt i32 %.03.i, %114
DOALL:     	  br i1 %169, label %170, label %179, !prof !64
DOALL:     	  %171 = load i32, i32* %167, align 4, !tbaa !33
DOALL:     	  %172 = mul nsw i32 %.03.i, %.010.i
DOALL:     	  %173 = add nsw i32 %171, %172
DOALL:     	  %174 = sext i32 %173 to i64
DOALL:     	  %175 = getelementptr inbounds double, double* %165, i64 %174
DOALL:     	  %176 = load double, double* %175, align 8, !tbaa !46
DOALL:     	  %177 = fadd double %.04.i, %176
DOALL:     	  %178 = add nuw nsw i32 %.03.i, 1
DOALL:     	  %.04.i.lcssa = phi double [ %.04.i, %168 ]
DOALL:     	  %180 = bitcast double* %165 to i8*
DOALL:     	  %181 = load i32, i32* %167, align 4, !tbaa !33
DOALL:     	  %182 = sext i32 %181 to i64
DOALL:     	  %183 = getelementptr inbounds double, double* %155, i64 %182
DOALL:     	  store double %.04.i.lcssa, double* %183, align 8, !tbaa !46
DOALL:     	  %184 = fcmp ogt double %.04.i.lcssa, 0.000000e+00
DOALL:     	  %185 = fsub double %.215.i, %.04.i.lcssa
DOALL:     	  %.3.i = select i1 %184, double %185, double %.215.i, !prof !65
DOALL:     	  %186 = zext i1 %184 to i32
DOALL:     	  %.1.i = add nsw i32 %.09.i, %186
DOALL:     	  %187 = phi i8* [ %180, %179 ], [ %158, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %.4.i = phi double [ %.3.i, %179 ], [ %.215.i, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %.2.i = phi i32 [ %.1.i, %179 ], [ %.09.i, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %indvars.iv.next37.i = add nuw i64 %indvars.iv36.i, 1
DOALL:     	  %.lcssa = phi i8* [ %158, %157 ]
DOALL:     	  %.215.i.lcssa = phi double [ %.215.i, %157 ]
DOALL:     	  %.09.i.lcssa = phi i32 [ %.09.i, %157 ]
DOALL:     	  %189 = add nsw i32 %.010.i, -2
DOALL:     	  %190 = sitofp i32 %.09.i.lcssa to double
DOALL:     	  %191 = sext i32 %189 to i64
DOALL:     	  %192 = getelementptr inbounds double, double* %113, i64 %191
DOALL:     	  store double %190, double* %192, align 8, !tbaa !46
DOALL:     	  %193 = add nsw i32 %189, 1
DOALL:     	  %194 = sext i32 %193 to i64
DOALL:     	  %195 = getelementptr inbounds double, double* %113, i64 %194
DOALL:     	  store double %.215.i.lcssa, double* %195, align 8, !tbaa !46
DOALL:     	  %196 = sext i32 %114 to i64
DOALL:     	  %197 = sext i32 %189 to i64
DOALL:     	  %indvars.iv34.i = phi i64 [ %indvars.iv.next35.i, %201 ], [ 0, %188 ]
DOALL:     	  %199 = phi double [ %212, %201 ], [ %14, %188 ]
DOALL:     	  %200 = icmp slt i64 %indvars.iv34.i, %196
DOALL:     	  br i1 %200, label %201, label %.loopexit.loopexit.i, !prof !53
DOALL:     	  %202 = mul nsw i64 %indvars.iv34.i, %105
DOALL:     	  %203 = add nsw i64 %202, %197
DOALL:     	  %204 = getelementptr inbounds double, double* %113, i64 %203
DOALL:     	  %205 = load double, double* %204, align 8, !tbaa !46
DOALL:     	  %206 = fptosi double %205 to i32
DOALL:     	  %207 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %208 = add nsw i32 %207, %206
DOALL:     	  store i32 %208, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %209 = add nsw i64 %203, 1
DOALL:     	  %210 = getelementptr inbounds double, double* %113, i64 %209
DOALL:     	  %211 = load double, double* %210, align 8, !tbaa !46
DOALL:     	  %212 = fadd double %199, %211
DOALL:     	  %indvars.iv.next35.i = add nuw nsw i64 %indvars.iv34.i, 1
DOALL:     	  %.lcssa1 = phi double [ %199, %198 ]
DOALL:     	  %213 = fcmp olt double %.lcssa1, 0.000000e+00
DOALL:     	  br i1 %213, label %.preheader.i, label %281, !prof !66
DOALL:     	  %indvars.iv32.i = phi i64 [ %indvars.iv.next33.i, %._crit_edge59.i ], [ 0, %.preheader.i ]
DOALL:     	  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i
DOALL:     	  br i1 %215, label %216, label %254, !prof !67
DOALL:     	  %217 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45
DOALL:     	  %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56
DOALL:     	  %219 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i
DOALL:     	  %220 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 2
DOALL:     	  %221 = load i64, i64* %220, align 8, !tbaa !63
DOALL:     	  %222 = getelementptr inbounds i32, i32* %217, i64 %221
DOALL:     	  %223 = load i32, i32* %222, align 4, !tbaa !33
DOALL:     	  %224 = sext i32 %223 to i64
DOALL:     	  %225 = getelementptr inbounds double, double* %155, i64 %224
DOALL:     	  %226 = load double, double* %225, align 8, !tbaa !46
DOALL:     	  %227 = fcmp ogt double %226, 0.000000e+00
DOALL:     	  %228 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  %229 = getelementptr inbounds i8, i8* %228, i64 %indvars.iv32.i
DOALL:     	  %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51
DOALL:     	  %231 = icmp ne i8 %230, 0
DOALL:     	  %brmerge.i = or i1 %231, %227
DOALL:     	  br i1 %brmerge.i, label %232, label %.._crit_edge59_crit_edge.i, !prof !68
DOALL:     	  %233 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 0
DOALL:     	  %234 = load float, float* %233, align 8, !tbaa !58
DOALL:     	  %235 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %39
DOALL:     	  %236 = load i32, i32* %116, align 8, !tbaa !57
DOALL:     	  %237 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 1
DOALL:     	  %238 = load float*, float** %237, align 8
DOALL:     	  %239 = getelementptr inbounds %struct.Point, %struct.Point* %235, i64 0, i32 1
DOALL:     	  %240 = load float*, float** %239, align 8
DOALL:     	  %241 = sext i32 %236 to i64
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %244 ], [ 0, %232 ]
DOALL:     	  %.0.i.i = phi float [ %251, %244 ], [ 0.000000e+00, %232 ]
DOALL:     	  %243 = icmp slt i64 %indvars.iv.i.i, %241
DOALL:     	  br i1 %243, label %244, label %_Z4distRK5PointS1_i.exit.i, !prof !69
DOALL:     	  %245 = getelementptr inbounds float, float* %238, i64 %indvars.iv.i.i
DOALL:     	  %246 = load float, float* %245, align 4, !tbaa !70
DOALL:     	  %247 = getelementptr inbounds float, float* %240, i64 %indvars.iv.i.i
DOALL:     	  %248 = load float, float* %247, align 4, !tbaa !70
DOALL:     	  %249 = fsub float %246, %248
DOALL:     	  %250 = fmul float %249, %249
DOALL:     	  %251 = fadd float %.0.i.i, %250
DOALL:     	  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %242 ]
DOALL:     	  %252 = fmul float %234, %.0.i.i.lcssa
DOALL:     	  %253 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 3
DOALL:     	  store float %252, float* %253, align 8, !tbaa !61
DOALL:     	  store i64 %39, i64* %220, align 8, !tbaa !63
DOALL:     	  %indvars.iv.next33.i = add nuw i64 %indvars.iv32.i, 1
DOALL:     	  %255 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %256 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %._crit_edge60.i ], [ 0, %254 ]
DOALL:     	  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i
DOALL:     	  br i1 %258, label %259, label %271, !prof !67
DOALL:     	  %260 = getelementptr inbounds i8, i8* %255, i64 %indvars.iv.i
DOALL:     	  %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51
DOALL:     	  %262 = icmp eq i8 %261, 0
DOALL:     	  br i1 %262, label %.._crit_edge60_crit_edge.i, label %263, !prof !71
DOALL:     	  %264 = getelementptr inbounds i32, i32* %256, i64 %indvars.iv.i
DOALL:     	  %265 = load i32, i32* %264, align 4, !tbaa !33
DOALL:     	  %266 = sext i32 %265 to i64
DOALL:     	  %267 = getelementptr inbounds double, double* %155, i64 %266
DOALL:     	  %268 = load double, double* %267, align 8, !tbaa !46
DOALL:     	  %269 = fcmp ogt double %268, 0.000000e+00
DOALL:     	  br i1 %269, label %270, label %.._crit_edge60_crit_edge10.i, !prof !72
DOALL:     	  store i8 0, i8* %260, align 1, !tbaa !49
DOALL:     	  %indvars.iv.next.i = add nuw i64 %indvars.iv.i, 1
DOALL:     	  %272 = icmp sle i64 0, %39
DOALL:     	  %273 = icmp sgt i64 %spec.select.i, %39
DOALL:     	  %or.cond.i = and i1 %272, %273
DOALL:     	  br i1 %or.cond.i, label %274, label %.._crit_edge62_crit_edge.i, !prof !73
DOALL:     	  %275 = getelementptr inbounds i8, i8* %255, i64 %39
DOALL:     	  store i8 1, i8* %275, align 1, !tbaa !49
DOALL:     	  %276 = load i64, i64* %4, align 8, !tbaa !43
DOALL:     	  %277 = add nsw i64 %276, 1
DOALL:     	  %278 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %279 = sext i32 %278 to i64
DOALL:     	  %280 = sub nsw i64 %277, %279
DOALL:     	  store i64 %280, i64* %4, align 8, !tbaa !43
DOALL:     	  tail call void @free(i8* %.lcssa) #3
DOALL:     External nodes: 43
DOALL:     	  br i1 %32, label %35, label %33, !prof !37
DOALL:     	  %37 = getelementptr inbounds i32, i32* %1, i64 %36
DOALL:     	  %40 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 0
DOALL:     	  br label %._crit_edge52.i
DOALL:     	  br label %._crit_edge52.i
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %._crit_edge54.i
DOALL:     	  br label %._crit_edge54.i
DOALL:     	  br label %63
DOALL:     	  br label %78
DOALL:     	  br label %._crit_edge56.i
DOALL:     	  br label %._crit_edge56.i
DOALL:     	  br label %89
DOALL:     	  %115 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 2
DOALL:     	  %116 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 1
DOALL:     	  br label %150
DOALL:     	  br label %150
DOALL:     	  br label %117
DOALL:     	  br label %._crit_edge58.i
DOALL:     	  br label %168
DOALL:     	  br label %168
DOALL:     	  br label %._crit_edge58.i
DOALL:     	  br label %157
DOALL:     	  store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %198
DOALL:     	  br label %214
DOALL:     	  br label %._crit_edge59.i
DOALL:     	  br label %242
DOALL:     	  br label %242
DOALL:     	  br label %._crit_edge59.i
DOALL:     	  br label %214
DOALL:     	  br label %257
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %257
DOALL:     	  br label %._crit_edge62.i
DOALL:     	  br label %._crit_edge62.i
DOALL:     	  br label %_Z5pgainlP6PointsdPliP17pthread_barrier_t.exit
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %_Z5pgainlP6PointsdPliP17pthread_barrier_t.exit
DOALL:     	  %282 = phi double [ 0.000000e+00, %281 ], [ %.lcssa1, %._crit_edge62.i ]
DOALL:     Edges: 1248
DOALL:     Loop-carried data dependences
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %47 = load i64, i64* %4, align 8, !tbaa !43 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %61 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %47 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %42 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %217 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %62 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %276 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %108 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %114 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %256 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %38 = load i32, i32* %37, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %166 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %228 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %255 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %87 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %88 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %102 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %75 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %132 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %142 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %156 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %74 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         %103 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         %107 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         %113 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %145 = load i32, i32* %144, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %145 = load i32, i32* %144, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %165 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %171 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %171 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %181 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %181 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store i32 %208, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %223 = load i32, i32* %222, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %223 = load i32, i32* %222, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 via memory
DOALL:         %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %265 = load i32, i32* %264, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %265 = load i32, i32* %264, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         %278 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   %47 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   %276 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 15
DOALL:     	  %234 = load float, float* %233, align 8, !tbaa !58
DOALL:     	  %238 = load float*, float** %237, align 8
DOALL:     	  %240 = load float*, float** %239, align 8
DOALL:     	  %.0.i.i = phi float [ %251, %244 ], [ 0.000000e+00, %232 ]
DOALL:     	  %245 = getelementptr inbounds float, float* %238, i64 %indvars.iv.i.i
DOALL:     	  %246 = load float, float* %245, align 4, !tbaa !70
DOALL:     	  %247 = getelementptr inbounds float, float* %240, i64 %indvars.iv.i.i
DOALL:     	  %248 = load float, float* %247, align 4, !tbaa !70
DOALL:     	  %249 = fsub float %246, %248
DOALL:     	  %250 = fmul float %249, %249
DOALL:     	  %251 = fadd float %.0.i.i, %250
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %242 ]
DOALL:     	  %252 = fmul float %234, %.0.i.i.lcssa
DOALL:     	  store float %252, float* %253, align 8, !tbaa !61
DOALL:     	  store i64 %39, i64* %220, align 8, !tbaa !63
DOALL:     External nodes: 9
DOALL:     	  %220 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 2
DOALL:     	  %221 = load i64, i64* %220, align 8, !tbaa !63
DOALL:     	  br i1 %brmerge.i, label %232, label %.._crit_edge59_crit_edge.i, !prof !68
DOALL:     	  %233 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 0
DOALL:     	  %237 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 1
DOALL:     	  %239 = getelementptr inbounds %struct.Point, %struct.Point* %235, i64 0, i32 1
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %244 ], [ 0, %232 ]
DOALL:     	  br i1 %243, label %244, label %_Z4distRK5PointS1_i.exit.i, !prof !69
DOALL:     	  %253 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 3
DOALL:     Edges: 51
DOALL:     Loop-carried data dependences
DOALL:         %240 = load float*, float** %239, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 10
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %115 = add nsw i32 %77, 1
DOALL:     	  %storemerge = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ]
DOALL:     	  %68 = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ]
DOALL:     	  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     	  %69 = sext i32 %68 to i64
DOALL:     	  %70 = load i64, i64* %6, align 8, !tbaa !30
DOALL:     	  %71 = icmp sgt i64 %70, %69
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %77 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     External nodes: 11
DOALL:     	  br label %67
DOALL:     	  %73 = tail call i64 @lrand48() #3
DOALL:     	  %74 = sitofp i64 %73 to float
DOALL:     	  %75 = fmul float %74, 0x3E00000000000000
DOALL:     	  %76 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %78 = sext i32 %77 to i64
DOALL:     	  %79 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78, i32 3
DOALL:     	  %80 = load float, float* %79, align 8, !tbaa !47
DOALL:     	  %81 = fdiv float %80, %1
DOALL:     	  %82 = fcmp olt float %75, %81
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     Edges: 31
DOALL:     Loop-carried data dependences
DOALL:         %115 = add nsw i32 %77, 1 --->   %68 = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ] via variable
DOALL:         %115 = add nsw i32 %77, 1 --->   %storemerge = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ] via variable
DOALL:         store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 --->   store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 39
DOALL:     	  %91 = load i32, i32* %17, align 8, !tbaa !41
DOALL:     	  %92 = getelementptr inbounds %struct.Point, %struct.Point* %86, i64 0, i32 1
DOALL:     	  %93 = load float*, float** %92, align 8
DOALL:     	  %94 = getelementptr inbounds %struct.Point, %struct.Point* %90, i64 0, i32 1
DOALL:     	  %95 = load float*, float** %94, align 8
DOALL:     	  %96 = sext i32 %91 to i64
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %99 ], [ 0, %89 ]
DOALL:     	  %.0.i = phi float [ %106, %99 ], [ 0.000000e+00, %89 ]
DOALL:     	  %98 = icmp slt i64 %indvars.iv.i, %96
DOALL:     	  br i1 %98, label %99, label %_Z4distRK5PointS1_i.exit, !prof !42
DOALL:     	  %100 = getelementptr inbounds float, float* %93, i64 %indvars.iv.i
DOALL:     	  %101 = load float, float* %100, align 4, !tbaa !43
DOALL:     	  %102 = getelementptr inbounds float, float* %95, i64 %indvars.iv.i
DOALL:     	  %103 = load float, float* %102, align 4, !tbaa !43
DOALL:     	  %104 = fsub float %101, %103
DOALL:     	  %105 = fmul float %104, %104
DOALL:     	  %106 = fadd float %.0.i, %105
DOALL:     	  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %97 ]
DOALL:     	  %107 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 0
DOALL:     	  %108 = load float, float* %107, align 8, !tbaa !45
DOALL:     	  %109 = fmul float %.0.i.lcssa, %108
DOALL:     	  %110 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 3
DOALL:     	  %111 = load float, float* %110, align 8, !tbaa !47
DOALL:     	  %112 = fcmp olt float %109, %111
DOALL:     	  br i1 %112, label %113, label %.._crit_edge27_crit_edge, !prof !54
DOALL:     	  store float %109, float* %110, align 8, !tbaa !47
DOALL:     	  %114 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 2
DOALL:     	  store i64 %78, i64* %114, align 8, !tbaa !48
DOALL:     	  %indvars.iv.next17 = add i64 %indvars.iv16, 1
DOALL:     	  %80 = load float, float* %79, align 8, !tbaa !47
DOALL:     	  %81 = fdiv float %80, %1
DOALL:     	  %82 = fcmp olt float %75, %81
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     	  %86 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78
DOALL:     	  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge27 ], [ %18, %83 ]
DOALL:     	  %88 = icmp sgt i64 %spec.select, %indvars.iv16
DOALL:     	  br i1 %88, label %89, label %._crit_edge26.loopexit, !prof !53
DOALL:     	  %90 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16
DOALL:     External nodes: 16
DOALL:     	  br label %97
DOALL:     	  br label %97
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %87
DOALL:     	  br label %._crit_edge26
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %75 = fmul float %74, 0x3E00000000000000
DOALL:     	  %76 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %78 = sext i32 %77 to i64
DOALL:     	  %79 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78, i32 3
DOALL:     	  br label %._crit_edge26
DOALL:     	  %84 = load i64, i64* %2, align 8, !tbaa !49
DOALL:     	  %85 = add nsw i64 %84, 1
DOALL:     	  store i64 %85, i64* %2, align 8, !tbaa !49
DOALL:     	  br label %87
DOALL:     Edges: 125
DOALL:     Loop-carried data dependences
DOALL:         %93 = load float*, float** %92, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %95 = load float*, float** %94, align 8 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %80 = load float, float* %79, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %111 = load float, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         %95 = load float*, float** %94, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %95 = load float*, float** %94, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         %111 = load float, float* %110, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %95 = load float*, float** %94, align 8 via memory
DOALL:         %80 = load float, float* %79, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %84 = load i64, i64* %2, align 8, !tbaa !49
DOALL:     	  %85 = add nsw i64 %84, 1
DOALL:     	  store i64 %85, i64* %2, align 8, !tbaa !49
DOALL:     External nodes: 1
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     Edges: 8
DOALL:     Loop-carried data dependences
DOALL:         store i64 %85, i64* %2, align 8, !tbaa !49 --->   %84 = load i64, i64* %2, align 8, !tbaa !49 via memory
DOALL:         store i64 %85, i64* %2, align 8, !tbaa !49 --->   store i64 %85, i64* %2, align 8, !tbaa !49 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %73 = tail call i64 @lrand48() #3
DOALL:     External nodes: 2
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %74 = sitofp i64 %73 to float
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 14
DOALL:     	  %93 = load float*, float** %92, align 8
DOALL:     	  %.0.i = phi float [ %106, %99 ], [ 0.000000e+00, %89 ]
DOALL:     	  %100 = getelementptr inbounds float, float* %93, i64 %indvars.iv.i
DOALL:     	  %101 = load float, float* %100, align 4, !tbaa !43
DOALL:     	  %104 = fsub float %101, %103
DOALL:     	  %105 = fmul float %104, %104
DOALL:     	  %106 = fadd float %.0.i, %105
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %97 ]
DOALL:     	  %109 = fmul float %.0.i.lcssa, %108
DOALL:     	  %112 = fcmp olt float %109, %111
DOALL:     	  br i1 %112, label %113, label %.._crit_edge27_crit_edge, !prof !54
DOALL:     	  store float %109, float* %110, align 8, !tbaa !47
DOALL:     	  %114 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 2
DOALL:     	  store i64 %78, i64* %114, align 8, !tbaa !48
DOALL:     External nodes: 11
DOALL:     	  %92 = getelementptr inbounds %struct.Point, %struct.Point* %86, i64 0, i32 1
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %99 ], [ 0, %89 ]
DOALL:     	  br i1 %98, label %99, label %_Z4distRK5PointS1_i.exit, !prof !42
DOALL:     	  %103 = load float, float* %102, align 4, !tbaa !43
DOALL:     	  %108 = load float, float* %107, align 8, !tbaa !45
DOALL:     	  %110 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 3
DOALL:     	  %111 = load float, float* %110, align 8, !tbaa !47
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %._crit_edge27
DOALL:     	  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge27 ], [ %18, %83 ]
DOALL:     	  br i1 %88, label %89, label %._crit_edge26.loopexit, !prof !53
DOALL:     Edges: 43
DOALL:     Loop-carried data dependences
DOALL:         %93 = load float*, float** %92, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %93 = load float*, float** %92, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 11
DOALL:     	  %26 = load float*, float** %25, align 8
DOALL:     	  %.0.i2 = phi float [ %39, %32 ], [ 0.000000e+00, %21 ]
DOALL:     	  %33 = getelementptr inbounds float, float* %26, i64 %indvars.iv.i1
DOALL:     	  %34 = load float, float* %33, align 4, !tbaa !43
DOALL:     	  %37 = fsub float %34, %36
DOALL:     	  %38 = fmul float %37, %37
DOALL:     	  %39 = fadd float %.0.i2, %38
DOALL:     	  %.0.i2.lcssa = phi float [ %.0.i2, %30 ]
DOALL:     	  %42 = fmul float %.0.i2.lcssa, %41
DOALL:     	  store float %42, float* %43, align 8, !tbaa !47
DOALL:     	  store i64 0, i64* %44, align 8, !tbaa !48
DOALL:     External nodes: 8
DOALL:     	  br i1 %20, label %21, label %45, !prof !39
DOALL:     	  %25 = getelementptr inbounds %struct.Point, %struct.Point* %23, i64 0, i32 1
DOALL:     	  %indvars.iv.i1 = phi i64 [ %indvars.iv.next.i3, %32 ], [ 0, %21 ]
DOALL:     	  br i1 %31, label %32, label %_Z4distRK5PointS1_i.exit4, !prof !42
DOALL:     	  %36 = load float, float* %35, align 4, !tbaa !43
DOALL:     	  %41 = load float, float* %40, align 8, !tbaa !45
DOALL:     	  %43 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 %indvars.iv20, i32 3
DOALL:     	  %44 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 %indvars.iv20, i32 2
DOALL:     Edges: 33
DOALL:     Loop-carried data dependences
DOALL:         %26 = load float*, float** %25, align 8 --->   store float %42, float* %43, align 8, !tbaa !47 via memory
DOALL:         %26 = load float*, float** %25, align 8 --->   store i64 0, i64* %44, align 8, !tbaa !48 via memory
DOALL:         store float %42, float* %43, align 8, !tbaa !47 --->   %26 = load float*, float** %25, align 8 via memory
DOALL:         store i64 0, i64* %44, align 8, !tbaa !48 --->   %26 = load float*, float** %25, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 8
DOALL:     	  %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57)
DOALL:     	  %61 = fmul float %58, %60
DOALL:     	  %63 = load float, float* %62, align 8, !tbaa !47
DOALL:     	  %64 = fcmp olt float %61, %63
DOALL:     	  br i1 %64, label %65, label %.._crit_edge25_crit_edge
DOALL:     	  store float %61, float* %62, align 8, !tbaa !47
DOALL:     	  %66 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18, i32 2
DOALL:     	  store i64 %50, i64* %66, align 8, !tbaa !48
DOALL:     External nodes: 11
DOALL:     	  %50 = sext i32 %49 to i64
DOALL:     	  %indvars.iv18 = phi i64 [ %indvars.iv.next19, %._crit_edge25 ], [ %18, %.preheader.preheader ]
DOALL:     	  br i1 %52, label %53, label %.loopexit.loopexit
DOALL:     	  %54 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %55 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %50
DOALL:     	  %56 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18
DOALL:     	  %57 = load i32, i32* %17, align 8, !tbaa !41
DOALL:     	  %60 = load float, float* %59, align 8, !tbaa !45
DOALL:     	  %62 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18, i32 3
DOALL:     	  br label %._crit_edge25
DOALL:     	  br label %._crit_edge25
DOALL:     Edges: 33
DOALL:     Loop-carried data dependences
DOALL:         %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) --->   store i64 %50, i64* %66, align 8, !tbaa !48 via memory
DOALL:         %63 = load float, float* %62, align 8, !tbaa !47 --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   %63 = load float, float* %62, align 8, !tbaa !47 via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) via memory
DOALL:         store i64 %50, i64* %66, align 8, !tbaa !48 --->   store i64 %50, i64* %66, align 8, !tbaa !48 via memory
DOALL:         store i64 %50, i64* %66, align 8, !tbaa !48 --->   %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 8
DOALL:     Live-out ID = 9
DOALL:     Live-out ID = 10
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %151 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
DOALL:     	  %152 = add nsw i64 %151, 1
DOALL:     	  store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
DOALL:     External nodes: 1
DOALL:     	  br i1 %149, label %150, label %.._crit_edge26_crit_edge.i, !prof !63
DOALL:     Edges: 8
DOALL:     Loop-carried data dependences
DOALL:         store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54 --->   store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54 via memory
DOALL:         store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54 --->   %151 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %140 = tail call i64 @lrand48() #3
DOALL:     External nodes: 2
DOALL:     	  br i1 %138, label %139, label %.loopexit7.loopexit.i, !prof !62
DOALL:     	  %141 = sitofp i64 %140 to float
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %140 = tail call i64 @lrand48() #3 --->   %140 = tail call i64 @lrand48() #3 via memory
DOALL:         %140 = tail call i64 @lrand48() #3 --->   %140 = tail call i64 @lrand48() #3 via memory
DOALL:         %140 = tail call i64 @lrand48() #3 --->   %140 = tail call i64 @lrand48() #3 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %storemerge.i = phi i32 [ 1, %128 ], [ %182, %._crit_edge26.i ]
DOALL:     	  %135 = phi i32 [ 1, %128 ], [ %182, %._crit_edge26.i ]
DOALL:     	  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30
DOALL:     	  %136 = sext i32 %135 to i64
DOALL:     	  %137 = load i64, i64* %93, align 8, !tbaa !40
DOALL:     	  %138 = icmp sgt i64 %137, %136
DOALL:     	  br i1 %138, label %139, label %.loopexit7.loopexit.i, !prof !62
DOALL:     	  %144 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30
DOALL:     	  %182 = add nsw i32 %144, 1
DOALL:     External nodes: 11
DOALL:     	  %140 = tail call i64 @lrand48() #3
DOALL:     	  %141 = sitofp i64 %140 to float
DOALL:     	  %142 = fmul float %141, 0x3E00000000000000
DOALL:     	  %143 = load %struct.Point*, %struct.Point** %100, align 8, !tbaa !42
DOALL:     	  %145 = sext i32 %144 to i64
DOALL:     	  %146 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %145, i32 3
DOALL:     	  %147 = load float, float* %146, align 8, !tbaa !52
DOALL:     	  %148 = fdiv float %147, %131
DOALL:     	  %149 = fcmp olt float %142, %148
DOALL:     	  br i1 %149, label %150, label %.._crit_edge26_crit_edge.i, !prof !63
DOALL:     	  br label %134
DOALL:     Edges: 31
DOALL:     Loop-carried data dependences
DOALL:         store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30 --->   store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30 via memory
DOALL:         %182 = add nsw i32 %144, 1 --->   %storemerge.i = phi i32 [ 1, %128 ], [ %182, %._crit_edge26.i ] via variable
DOALL:         %182 = add nsw i32 %144, 1 --->   %135 = phi i32 [ 1, %128 ], [ %182, %._crit_edge26.i ] via variable
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 39
DOALL:     	  %147 = load float, float* %146, align 8, !tbaa !52
DOALL:     	  %148 = fdiv float %147, %131
DOALL:     	  %149 = fcmp olt float %142, %148
DOALL:     	  br i1 %149, label %150, label %.._crit_edge26_crit_edge.i, !prof !63
DOALL:     	  %153 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %145
DOALL:     	  %indvars.iv16.i = phi i64 [ %indvars.iv.next17.i, %._crit_edge27.i ], [ 0, %150 ]
DOALL:     	  %155 = icmp sgt i64 %spec.select.i, %indvars.iv16.i
DOALL:     	  br i1 %155, label %156, label %._crit_edge26.loopexit.i, !prof !64
DOALL:     	  %157 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i
DOALL:     	  %158 = load i32, i32* %101, align 8, !tbaa !37
DOALL:     	  %159 = getelementptr inbounds %struct.Point, %struct.Point* %153, i64 0, i32 1
DOALL:     	  %160 = load float*, float** %159, align 8
DOALL:     	  %161 = getelementptr inbounds %struct.Point, %struct.Point* %157, i64 0, i32 1
DOALL:     	  %162 = load float*, float** %161, align 8
DOALL:     	  %163 = sext i32 %158 to i64
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %166 ], [ 0, %156 ]
DOALL:     	  %.0.i.i = phi float [ %173, %166 ], [ 0.000000e+00, %156 ]
DOALL:     	  %165 = icmp slt i64 %indvars.iv.i.i, %163
DOALL:     	  br i1 %165, label %166, label %_Z4distRK5PointS1_i.exit.i, !prof !61
DOALL:     	  %167 = getelementptr inbounds float, float* %160, i64 %indvars.iv.i.i
DOALL:     	  %168 = load float, float* %167, align 4, !tbaa !58
DOALL:     	  %169 = getelementptr inbounds float, float* %162, i64 %indvars.iv.i.i
DOALL:     	  %170 = load float, float* %169, align 4, !tbaa !58
DOALL:     	  %171 = fsub float %168, %170
DOALL:     	  %172 = fmul float %171, %171
DOALL:     	  %173 = fadd float %.0.i.i, %172
DOALL:     	  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %164 ]
DOALL:     	  %174 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 0
DOALL:     	  %175 = load float, float* %174, align 8, !tbaa !43
DOALL:     	  %176 = fmul float %.0.i.i.lcssa, %175
DOALL:     	  %177 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 3
DOALL:     	  %178 = load float, float* %177, align 8, !tbaa !52
DOALL:     	  %179 = fcmp olt float %176, %178
DOALL:     	  br i1 %179, label %180, label %.._crit_edge27_crit_edge.i, !prof !65
DOALL:     	  store float %176, float* %177, align 8, !tbaa !52
DOALL:     	  %181 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 2
DOALL:     	  store i64 %145, i64* %181, align 8, !tbaa !51
DOALL:     	  %indvars.iv.next17.i = add nuw i64 %indvars.iv16.i, 1
DOALL:     External nodes: 16
DOALL:     	  br i1 %138, label %139, label %.loopexit7.loopexit.i, !prof !62
DOALL:     	  %142 = fmul float %141, 0x3E00000000000000
DOALL:     	  %143 = load %struct.Point*, %struct.Point** %100, align 8, !tbaa !42
DOALL:     	  %145 = sext i32 %144 to i64
DOALL:     	  %146 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %145, i32 3
DOALL:     	  br label %._crit_edge26.i
DOALL:     	  %151 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
DOALL:     	  %152 = add nsw i64 %151, 1
DOALL:     	  store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
DOALL:     	  br label %154
DOALL:     	  br label %164
DOALL:     	  br label %164
DOALL:     	  br label %._crit_edge27.i
DOALL:     	  br label %._crit_edge27.i
DOALL:     	  br label %154
DOALL:     	  br label %._crit_edge26.i
DOALL:     Edges: 125
DOALL:     Loop-carried data dependences
DOALL:         %147 = load float, float* %146, align 8, !tbaa !52 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         store i64 %145, i64* %181, align 8, !tbaa !51 --->   %162 = load float*, float** %161, align 8 via memory
DOALL:         %160 = load float*, float** %159, align 8 --->   store i64 %145, i64* %181, align 8, !tbaa !51 via memory
DOALL:         %160 = load float*, float** %159, align 8 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         %162 = load float*, float** %161, align 8 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         %162 = load float*, float** %161, align 8 --->   store i64 %145, i64* %181, align 8, !tbaa !51 via memory
DOALL:         %178 = load float, float* %177, align 8, !tbaa !52 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %178 = load float, float* %177, align 8, !tbaa !52 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %162 = load float*, float** %161, align 8 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %147 = load float, float* %146, align 8, !tbaa !52 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %160 = load float*, float** %159, align 8 via memory
DOALL:         store i64 %145, i64* %181, align 8, !tbaa !51 --->   store i64 %145, i64* %181, align 8, !tbaa !51 via memory
DOALL:         store i64 %145, i64* %181, align 8, !tbaa !51 --->   %160 = load float*, float** %159, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 14
DOALL:     	  %160 = load float*, float** %159, align 8
DOALL:     	  %.0.i.i = phi float [ %173, %166 ], [ 0.000000e+00, %156 ]
DOALL:     	  %167 = getelementptr inbounds float, float* %160, i64 %indvars.iv.i.i
DOALL:     	  %168 = load float, float* %167, align 4, !tbaa !58
DOALL:     	  %171 = fsub float %168, %170
DOALL:     	  %172 = fmul float %171, %171
DOALL:     	  %173 = fadd float %.0.i.i, %172
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %164 ]
DOALL:     	  %176 = fmul float %.0.i.i.lcssa, %175
DOALL:     	  %179 = fcmp olt float %176, %178
DOALL:     	  br i1 %179, label %180, label %.._crit_edge27_crit_edge.i, !prof !65
DOALL:     	  store float %176, float* %177, align 8, !tbaa !52
DOALL:     	  %181 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 2
DOALL:     	  store i64 %145, i64* %181, align 8, !tbaa !51
DOALL:     External nodes: 11
DOALL:     	  %indvars.iv16.i = phi i64 [ %indvars.iv.next17.i, %._crit_edge27.i ], [ 0, %150 ]
DOALL:     	  br i1 %155, label %156, label %._crit_edge26.loopexit.i, !prof !64
DOALL:     	  %159 = getelementptr inbounds %struct.Point, %struct.Point* %153, i64 0, i32 1
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %166 ], [ 0, %156 ]
DOALL:     	  br i1 %165, label %166, label %_Z4distRK5PointS1_i.exit.i, !prof !61
DOALL:     	  %170 = load float, float* %169, align 4, !tbaa !58
DOALL:     	  %175 = load float, float* %174, align 8, !tbaa !43
DOALL:     	  %177 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 3
DOALL:     	  %178 = load float, float* %177, align 8, !tbaa !52
DOALL:     	  br label %._crit_edge27.i
DOALL:     	  br label %._crit_edge27.i
DOALL:     Edges: 43
DOALL:     Loop-carried data dependences
DOALL:         %160 = load float*, float** %159, align 8 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         store i64 %145, i64* %181, align 8, !tbaa !51 --->   %160 = load float*, float** %159, align 8 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %160 = load float*, float** %159, align 8 via memory
DOALL:         %160 = load float*, float** %159, align 8 --->   store i64 %145, i64* %181, align 8, !tbaa !51 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca %union.pthread_barrier_t, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   More than 1 loop exit blocks
Inliner:   Inlining in: _Z13streamClusterP7PStreamllillPc (283 instructions. The inlining will add 53 instructions),   %140 = call i32 @_Z11contcentersP6Points(%struct.Points* nonnull %9)
Inliner:   Inlined calls due to loop-carried data dependences
Inliner: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.667064e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.990092e-05%)
Noelle:     Loop "  %66 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.705694e+01%)
Noelle:     Loop "  %90 = icmp sgt i64 %68, %indvars.iv" (2.074395e-04%)
Noelle:     Loop "  %109 = sext i32 %108 to i64" (4.702146e+01%)
Noelle:     Loop "  %155 = icmp slt i64 %.01.i, %151" (2.963398e-04%)
Noelle:     Loop "  %168 = icmp slt i64 %.12.i, %.pre3.i" (4.155102e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.404292e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.009366e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.702572e-08%)
Noelle:     Loop "  %50 = icmp slt i64 %.02, %spec.select" (2.586415e-07%)
Noelle:     Loop "  %65 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.639788e-01%)
Noelle:     Loop "  %213 = icmp slt i64 %212, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.293207e-01%)
Noelle:     Loop "  %74 = load i64, i64* %71, align 8, !tbaa !40" (1.363073e-03%)
Noelle:     Loop "  %103 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.001610e-01%)
Noelle:     Loop "  %114 = icmp slt i64 %indvars.iv.i1.i, %112" (9.885715e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.271444e-01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.258997e-01%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv.i.i, %163" (4.201429e-01%)
Noelle:     Loop "  %184 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.519501e-04%)
Noelle:     Loop "  %201 = icmp slt i64 %indvars.iv.i, %198" (5.064308e-08%)
Noelle:     Loop "  %226 = icmp sgt i64 %223, %indvars.iv" (2.963398e-04%)
Noelle:     Loop "  %240 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.293418e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.365950e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.503818e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.305599e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.060782e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.493165e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.163312e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.446342e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.513270e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i, %226" (2.376035e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select, %indvars.iv" (5.039142e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %286 = fdiv double %.0, %.02" (9.293422e+01%)
Noelle:     Loop "  %289 = icmp slt i64 %.01, %6" (9.293422e+01%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.288114e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %18" (1.877411e-05%)
Noelle:     Loop "  %32 = icmp slt i64 %.01.us, %6" (9.288112e+01%)
Noelle:     Loop "  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.365950e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv42.i, %76" (5.503818e-05%)
Noelle:     Loop "  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.305599e-01%)
Noelle:     Loop "  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.060782e+01%)
Noelle:     Loop "  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.493165e-01%)
Noelle:     Loop "  %169 = icmp slt i32 %.03.i, %114" (3.163312e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %indvars.iv34.i, %196" (7.446342e-05%)
Noelle:     Loop "  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.513270e-01%)
Noelle:     Loop "  %243 = icmp slt i64 %indvars.iv.i.i, %241" (2.376035e-01%)
Noelle:     Loop "  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.039142e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (8.980222e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.003221e-01%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv.i1, %29" (1.977143e-01%)
Noelle:     Loop "  %49 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.336429e+10%)
Noelle:     Loop "  %52 = icmp sgt i64 %spec.select, %indvars.iv18" (3.336429e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.542888e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.517995e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv.i, %96" (8.402858e-01%)
Noelle:     Loop "  %117 = icmp sgt i64 %spec.select, %indvars.iv14" (1.303900e-03%)
Noelle:     Loop "  %136 = icmp slt i64 %indvars.iv, %133" (1.012862e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.913559e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.830599e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.219774e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.181250e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.044610e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.963398e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.155102e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.259552e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.771081e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.508460e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.586415e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.940956e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.874397e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.874698e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.666142e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.989405e-05%)
Noelle:     Loop "  %66 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.704068e+01%)
Noelle:     Loop "  %90 = icmp sgt i64 %68, %indvars.iv" (2.073678e-04%)
Noelle:     Loop "  %109 = sext i32 %108 to i64" (4.700521e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %141" (3.455585e-02%)
Noelle:     Loop "  %165 = icmp slt i64 %.01.i4, %159" (3.414119e-02%)
Noelle:     Loop "  %198 = icmp slt i64 %.01.i, %194" (2.962374e-04%)
Noelle:     Loop "  %211 = icmp slt i64 %.12.i, %.pre3.i" (4.153666e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.401042e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.007635e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.700947e-08%)
Noelle:     Loop "  %50 = icmp slt i64 %.02, %spec.select" (2.585521e-07%)
Noelle:     Loop "  %65 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.638876e-01%)
Noelle:     Loop "  %213 = icmp slt i64 %212, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.291378e-01%)
Noelle:     Loop "  %74 = load i64, i64* %71, align 8, !tbaa !40" (1.362602e-03%)
Noelle:     Loop "  %103 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.001264e-01%)
Noelle:     Loop "  %114 = icmp slt i64 %indvars.iv.i1.i, %112" (9.882299e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.269968e-01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.257526e-01%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv.i.i, %163" (4.199977e-01%)
Noelle:     Loop "  %184 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.517248e-04%)
Noelle:     Loop "  %201 = icmp slt i64 %indvars.iv.i, %198" (5.062558e-08%)
Noelle:     Loop "  %226 = icmp sgt i64 %223, %indvars.iv" (2.962374e-04%)
Noelle:     Loop "  %240 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.290207e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.363750e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.501916e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.303766e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.057651e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.490231e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.162219e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.443769e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.512401e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i, %226" (2.375214e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select, %indvars.iv" (5.037401e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %286 = fdiv double %.0, %.02" (9.290211e+01%)
Noelle:     Loop "  %289 = icmp slt i64 %.01, %6" (9.290211e+01%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.284904e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %18" (1.876763e-05%)
Noelle:     Loop "  %32 = icmp slt i64 %.01.us, %6" (9.284902e+01%)
Noelle:     Loop "  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.363750e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv42.i, %76" (5.501916e-05%)
Noelle:     Loop "  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.303765e-01%)
Noelle:     Loop "  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.057651e+01%)
Noelle:     Loop "  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.490230e-01%)
Noelle:     Loop "  %169 = icmp slt i32 %.03.i, %114" (3.162219e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %indvars.iv34.i, %196" (7.443769e-05%)
Noelle:     Loop "  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.512401e-01%)
Noelle:     Loop "  %243 = icmp slt i64 %indvars.iv.i.i, %241" (2.375214e-01%)
Noelle:     Loop "  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.037401e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (8.977119e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.002528e-01%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv.i1, %29" (1.976460e-01%)
Noelle:     Loop "  %49 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.335276e+10%)
Noelle:     Loop "  %52 = icmp sgt i64 %spec.select, %indvars.iv18" (3.335276e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.539936e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.515052e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv.i, %96" (8.399954e-01%)
Noelle:     Loop "  %117 = icmp sgt i64 %spec.select, %indvars.iv14" (1.303450e-03%)
Noelle:     Loop "  %136 = icmp slt i64 %indvars.iv, %133" (1.012512e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.911170e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.828239e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.218316e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.179805e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.043903e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.962374e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.153666e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.258425e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.770123e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.507594e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.585521e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.939249e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.872712e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.874051e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint:       There are 43 different instructions and 99 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.VoNJfbgnnE -o /tmp/tmp.VoNJfbgnnE
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.VoNJfbgnnE -o /tmp/tmp.VoNJfbgnnE
NOELLE: FixedPoint:     Invocation 8
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.0JeGAgYVjW -o /tmp/tmp.VoNJfbgnnE
Inliner: Start
Inliner:   Number of program instructions = 2430
Inliner:   Profiles are available and will be used
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 15
DOALL:     	  %219 = load float, float* %218, align 8, !tbaa !54
DOALL:     	  %223 = load float*, float** %222, align 8
DOALL:     	  %225 = load float*, float** %224, align 8
DOALL:     	  %.0.i = phi float [ %236, %229 ], [ 0.000000e+00, %217 ]
DOALL:     	  %230 = getelementptr inbounds float, float* %223, i64 %indvars.iv.i
DOALL:     	  %231 = load float, float* %230, align 4, !tbaa !66
DOALL:     	  %232 = getelementptr inbounds float, float* %225, i64 %indvars.iv.i
DOALL:     	  %233 = load float, float* %232, align 4, !tbaa !66
DOALL:     	  %234 = fsub float %231, %233
DOALL:     	  %235 = fmul float %234, %234
DOALL:     	  %236 = fadd float %.0.i, %235
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %227 ]
DOALL:     	  %237 = fmul float %219, %.0.i.lcssa
DOALL:     	  store float %237, float* %238, align 8, !tbaa !57
DOALL:     	  store i64 %0, i64* %205, align 8, !tbaa !59
DOALL:     External nodes: 9
DOALL:     	  br i1 %brmerge, label %217, label %.._crit_edge59_crit_edge, !prof !64
DOALL:     	  %218 = getelementptr inbounds %struct.Point, %struct.Point* %204, i64 0, i32 0
DOALL:     	  %222 = getelementptr inbounds %struct.Point, %struct.Point* %204, i64 0, i32 1
DOALL:     	  %224 = getelementptr inbounds %struct.Point, %struct.Point* %220, i64 0, i32 1
DOALL:     	  br i1 %228, label %229, label %_Z4distRK5PointS1_i.exit, !prof !65
DOALL:     	  %205 = getelementptr inbounds %struct.Point, %struct.Point* %203, i64 %indvars.iv32, i32 2
DOALL:     	  %206 = load i64, i64* %205, align 8, !tbaa !59
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %229 ], [ 0, %217 ]
DOALL:     	  %238 = getelementptr inbounds %struct.Point, %struct.Point* %203, i64 %indvars.iv32, i32 3
DOALL:     Edges: 51
DOALL:     Loop-carried data dependences
DOALL:         %219 = load float, float* %218, align 8, !tbaa !54 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %219 = load float, float* %218, align 8, !tbaa !54 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %223 = load float*, float** %222, align 8 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %223 = load float*, float** %222, align 8 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         %225 = load float*, float** %224, align 8 --->   store i64 %0, i64* %205, align 8, !tbaa !59 via memory
DOALL:         %225 = load float*, float** %224, align 8 --->   store float %237, float* %238, align 8, !tbaa !57 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %225 = load float*, float** %224, align 8 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %219 = load float, float* %218, align 8, !tbaa !54 via memory
DOALL:         store float %237, float* %238, align 8, !tbaa !57 --->   %223 = load float*, float** %222, align 8 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %219 = load float, float* %218, align 8, !tbaa !54 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %223 = load float*, float** %222, align 8 via memory
DOALL:         store i64 %0, i64* %205, align 8, !tbaa !59 --->   %225 = load float*, float** %224, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 9
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 5
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  %.pre7.i = load double, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     External nodes: 6
DOALL:     	  br i1 %32, label %35, label %33, !prof !37
DOALL:     	  %60 = tail call noalias i8* @malloc(i64 %59) #3
DOALL:     	  br i1 %200, label %201, label %.loopexit.loopexit.i, !prof !53
DOALL:     	  %212 = fadd double %199, %211
DOALL:     	  br i1 %213, label %.preheader.i, label %281, !prof !66
DOALL:     	  %283 = fsub double -0.000000e+00, %.pre7.i
DOALL:     Edges: 24
DOALL:     Loop-carried data dependences
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %.pre7.i = load double, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 288
DOALL:     	  %38 = load i32, i32* %37, align 4, !tbaa !33
DOALL:     	  %39 = sext i32 %38 to i64
DOALL:     	  %41 = load i64, i64* %40, align 8, !tbaa !38
DOALL:     	  %42 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %43 = sext i32 %42 to i64
DOALL:     	  %44 = sdiv i64 %41, %43
DOALL:     	  %45 = add nsw i32 %42, -1
DOALL:     	  %46 = icmp eq i32 %45, 0
DOALL:     	  %spec.select.i = select i1 %46, i64 %41, i64 %44, !prof !42
DOALL:     	  %47 = load i64, i64* %4, align 8, !tbaa !43
DOALL:     	  %48 = trunc i64 %47 to i32
DOALL:     	  %49 = add i32 %48, 2
DOALL:     	  %50 = and i32 %49, 3
DOALL:     	  %51 = icmp eq i32 %50, 0
DOALL:     	  br i1 %51, label %.._crit_edge52_crit_edge.i, label %52, !prof !44
DOALL:     	  %53 = sdiv i32 %49, 4
DOALL:     	  %54 = shl nsw i32 %53, 2
DOALL:     	  %55 = add i32 %54, 4
DOALL:     	  %.010.i = phi i32 [ %55, %52 ], [ %49, %.._crit_edge52_crit_edge.i ]
DOALL:     	  %56 = add nsw i32 %42, 1
DOALL:     	  %57 = mul nsw i32 %.010.i, %56
DOALL:     	  %58 = sext i32 %57 to i64
DOALL:     	  %59 = shl nsw i64 %58, 3
DOALL:     	  %60 = tail call noalias i8* @malloc(i64 %59) #3
DOALL:     	  store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45
DOALL:     	  store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %61 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %62 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv44.i = phi i64 [ %indvars.iv.next45.i, %._crit_edge54.i ], [ 0, %._crit_edge52.i ]
DOALL:     	  %.016.i = phi i32 [ %.117.i, %._crit_edge54.i ], [ 0, %._crit_edge52.i ]
DOALL:     	  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i
DOALL:     	  br i1 %64, label %65, label %72, !prof !48
DOALL:     	  %66 = getelementptr inbounds i8, i8* %61, i64 %indvars.iv44.i
DOALL:     	  %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51
DOALL:     	  %68 = icmp eq i8 %67, 0
DOALL:     	  br i1 %68, label %.._crit_edge54_crit_edge.i, label %69, !prof !52
DOALL:     	  %70 = add nsw i32 %.016.i, 1
DOALL:     	  %71 = getelementptr inbounds i32, i32* %62, i64 %indvars.iv44.i
DOALL:     	  store i32 %.016.i, i32* %71, align 4, !tbaa !33
DOALL:     	  %.117.i = phi i32 [ %70, %69 ], [ %.016.i, %.._crit_edge54_crit_edge.i ]
DOALL:     	  %indvars.iv.next45.i = add nuw i64 %indvars.iv44.i, 1
DOALL:     	  %.016.i.lcssa = phi i32 [ %.016.i, %63 ]
DOALL:     	  %73 = sitofp i32 %.016.i.lcssa to double
DOALL:     	  %74 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  store double %73, double* %74, align 8, !tbaa !46
DOALL:     	  %75 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %76 = sext i32 %75 to i64
DOALL:     	  %77 = sext i32 %.010.i to i64
DOALL:     	  %indvars.iv42.i = phi i64 [ %indvars.iv.next43.i, %80 ], [ 0, %72 ]
DOALL:     	  %.012.i = phi i32 [ %86, %80 ], [ 0, %72 ]
DOALL:     	  %79 = icmp slt i64 %indvars.iv42.i, %76
DOALL:     	  br i1 %79, label %80, label %._crit_edge55.loopexit.i, !prof !53
DOALL:     	  %81 = mul nsw i64 %indvars.iv42.i, %77
DOALL:     	  %82 = getelementptr inbounds double, double* %74, i64 %81
DOALL:     	  %83 = load double, double* %82, align 8, !tbaa !46
DOALL:     	  %84 = fptosi double %83 to i32
DOALL:     	  %85 = sitofp i32 %.012.i to double
DOALL:     	  store double %85, double* %82, align 8, !tbaa !46
DOALL:     	  %86 = add nsw i32 %.012.i, %84
DOALL:     	  %indvars.iv.next43.i = add nuw nsw i64 %indvars.iv42.i, 1
DOALL:     	  %87 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %88 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv40.i = phi i64 [ %indvars.iv.next41.i, %._crit_edge56.i ], [ 0, %._crit_edge55.loopexit.i ]
DOALL:     	  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i
DOALL:     	  br i1 %90, label %91, label %101, !prof !48
DOALL:     	  %92 = getelementptr inbounds i8, i8* %87, i64 %indvars.iv40.i
DOALL:     	  %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51
DOALL:     	  %94 = icmp eq i8 %93, 0
DOALL:     	  br i1 %94, label %.._crit_edge56_crit_edge.i, label %95, !prof !52
DOALL:     	  %96 = load double, double* %74, align 8, !tbaa !46
DOALL:     	  %97 = fptosi double %96 to i32
DOALL:     	  %98 = getelementptr inbounds i32, i32* %88, i64 %indvars.iv40.i
DOALL:     	  %99 = load i32, i32* %98, align 4, !tbaa !33
DOALL:     	  %100 = add nsw i32 %99, %97
DOALL:     	  store i32 %100, i32* %98, align 4, !tbaa !33
DOALL:     	  %indvars.iv.next41.i = add nuw i64 %indvars.iv40.i, 1
DOALL:     	  %102 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54
DOALL:     	  %103 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %104 = bitcast double* %103 to i8*
DOALL:     	  %105 = sext i32 %.010.i to i64
DOALL:     	  %106 = shl nsw i64 %105, 3
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55
DOALL:     	  %107 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %108 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %109 = mul nsw i32 %108, %.010.i
DOALL:     	  %110 = sext i32 %109 to i64
DOALL:     	  %111 = getelementptr inbounds double, double* %107, i64 %110
DOALL:     	  %112 = bitcast double* %111 to i8*
DOALL:     	  tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55
DOALL:     	  %113 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45
DOALL:     	  %114 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33
DOALL:     	  %indvars.iv38.i = phi i64 [ %indvars.iv.next39.i, %150 ], [ 0, %101 ]
DOALL:     	  %.013.i = phi double [ %.114.i, %150 ], [ 0.000000e+00, %101 ]
DOALL:     	  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i
DOALL:     	  br i1 %118, label %119, label %151, !prof !48
DOALL:     	  %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56
DOALL:     	  %121 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i
DOALL:     	  %122 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %39
DOALL:     	  %123 = load i32, i32* %116, align 8, !tbaa !57
DOALL:     	  %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3
DOALL:     	  %125 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 0
DOALL:     	  %126 = load float, float* %125, align 8, !tbaa !58
DOALL:     	  %127 = fmul float %124, %126
DOALL:     	  %128 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 3
DOALL:     	  %129 = load float, float* %128, align 8, !tbaa !61
DOALL:     	  %130 = fcmp olt float %127, %129
DOALL:     	  br i1 %130, label %131, label %137, !prof !62
DOALL:     	  %132 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  %133 = getelementptr inbounds i8, i8* %132, i64 %indvars.iv38.i
DOALL:     	  store i8 1, i8* %133, align 1, !tbaa !49
DOALL:     	  %134 = fsub float %127, %129
DOALL:     	  %135 = fpext float %134 to double
DOALL:     	  %136 = fadd double %.013.i, %135
DOALL:     	  %138 = getelementptr inbounds %struct.Point, %struct.Point* %120, i64 %indvars.iv38.i, i32 2
DOALL:     	  %139 = load i64, i64* %138, align 8, !tbaa !63
DOALL:     	  %140 = fsub float %129, %127
DOALL:     	  %141 = fpext float %140 to double
DOALL:     	  %142 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45
DOALL:     	  %sext.i = shl i64 %139, 32
DOALL:     	  %143 = ashr exact i64 %sext.i, 32
DOALL:     	  %144 = getelementptr inbounds i32, i32* %142, i64 %143
DOALL:     	  %145 = load i32, i32* %144, align 4, !tbaa !33
DOALL:     	  %146 = sext i32 %145 to i64
DOALL:     	  %147 = getelementptr inbounds double, double* %113, i64 %146
DOALL:     	  %148 = load double, double* %147, align 8, !tbaa !46
DOALL:     	  %149 = fadd double %148, %141
DOALL:     	  store double %149, double* %147, align 8, !tbaa !46
DOALL:     	  %.114.i = phi double [ %136, %131 ], [ %.013.i, %137 ]
DOALL:     	  %indvars.iv.next39.i = add nuw i64 %indvars.iv38.i, 1
DOALL:     	  %.013.i.lcssa = phi double [ %.013.i, %117 ]
DOALL:     	  %152 = bitcast double* %113 to i8*
DOALL:     	  %153 = mul nsw i32 %114, %.010.i
DOALL:     	  %154 = sext i32 %153 to i64
DOALL:     	  %155 = getelementptr inbounds double, double* %113, i64 %154
DOALL:     	  %156 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %158 = phi i8* [ %187, %._crit_edge58.i ], [ %152, %151 ]
DOALL:     	  %indvars.iv36.i = phi i64 [ %indvars.iv.next37.i, %._crit_edge58.i ], [ 0, %151 ]
DOALL:     	  %.215.i = phi double [ %.4.i, %._crit_edge58.i ], [ %.013.i.lcssa, %151 ]
DOALL:     	  %.09.i = phi i32 [ %.2.i, %._crit_edge58.i ], [ 0, %151 ]
DOALL:     	  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i
DOALL:     	  br i1 %159, label %160, label %188, !prof !48
DOALL:     	  %161 = getelementptr inbounds i8, i8* %156, i64 %indvars.iv36.i
DOALL:     	  %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51
DOALL:     	  %163 = icmp eq i8 %162, 0
DOALL:     	  br i1 %163, label %.._crit_edge58_crit_edge.i, label %164, !prof !52
DOALL:     	  %165 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8
DOALL:     	  %166 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %167 = getelementptr inbounds i32, i32* %166, i64 %indvars.iv36.i
DOALL:     	  %.04.i = phi double [ %14, %164 ], [ %177, %170 ]
DOALL:     	  %.03.i = phi i32 [ 0, %164 ], [ %178, %170 ]
DOALL:     	  %169 = icmp slt i32 %.03.i, %114
DOALL:     	  br i1 %169, label %170, label %179, !prof !64
DOALL:     	  %171 = load i32, i32* %167, align 4, !tbaa !33
DOALL:     	  %172 = mul nsw i32 %.03.i, %.010.i
DOALL:     	  %173 = add nsw i32 %171, %172
DOALL:     	  %174 = sext i32 %173 to i64
DOALL:     	  %175 = getelementptr inbounds double, double* %165, i64 %174
DOALL:     	  %176 = load double, double* %175, align 8, !tbaa !46
DOALL:     	  %177 = fadd double %.04.i, %176
DOALL:     	  %178 = add nuw nsw i32 %.03.i, 1
DOALL:     	  %.04.i.lcssa = phi double [ %.04.i, %168 ]
DOALL:     	  %180 = bitcast double* %165 to i8*
DOALL:     	  %181 = load i32, i32* %167, align 4, !tbaa !33
DOALL:     	  %182 = sext i32 %181 to i64
DOALL:     	  %183 = getelementptr inbounds double, double* %155, i64 %182
DOALL:     	  store double %.04.i.lcssa, double* %183, align 8, !tbaa !46
DOALL:     	  %184 = fcmp ogt double %.04.i.lcssa, 0.000000e+00
DOALL:     	  %185 = fsub double %.215.i, %.04.i.lcssa
DOALL:     	  %.3.i = select i1 %184, double %185, double %.215.i, !prof !65
DOALL:     	  %186 = zext i1 %184 to i32
DOALL:     	  %.1.i = add nsw i32 %.09.i, %186
DOALL:     	  %187 = phi i8* [ %180, %179 ], [ %158, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %.4.i = phi double [ %.3.i, %179 ], [ %.215.i, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %.2.i = phi i32 [ %.1.i, %179 ], [ %.09.i, %.._crit_edge58_crit_edge.i ]
DOALL:     	  %indvars.iv.next37.i = add nuw i64 %indvars.iv36.i, 1
DOALL:     	  %.lcssa = phi i8* [ %158, %157 ]
DOALL:     	  %.215.i.lcssa = phi double [ %.215.i, %157 ]
DOALL:     	  %.09.i.lcssa = phi i32 [ %.09.i, %157 ]
DOALL:     	  %189 = add nsw i32 %.010.i, -2
DOALL:     	  %190 = sitofp i32 %.09.i.lcssa to double
DOALL:     	  %191 = sext i32 %189 to i64
DOALL:     	  %192 = getelementptr inbounds double, double* %113, i64 %191
DOALL:     	  store double %190, double* %192, align 8, !tbaa !46
DOALL:     	  %193 = add nsw i32 %189, 1
DOALL:     	  %194 = sext i32 %193 to i64
DOALL:     	  %195 = getelementptr inbounds double, double* %113, i64 %194
DOALL:     	  store double %.215.i.lcssa, double* %195, align 8, !tbaa !46
DOALL:     	  %196 = sext i32 %114 to i64
DOALL:     	  %197 = sext i32 %189 to i64
DOALL:     	  %indvars.iv34.i = phi i64 [ %indvars.iv.next35.i, %201 ], [ 0, %188 ]
DOALL:     	  %199 = phi double [ %212, %201 ], [ %14, %188 ]
DOALL:     	  %200 = icmp slt i64 %indvars.iv34.i, %196
DOALL:     	  br i1 %200, label %201, label %.loopexit.loopexit.i, !prof !53
DOALL:     	  %202 = mul nsw i64 %indvars.iv34.i, %105
DOALL:     	  %203 = add nsw i64 %202, %197
DOALL:     	  %204 = getelementptr inbounds double, double* %113, i64 %203
DOALL:     	  %205 = load double, double* %204, align 8, !tbaa !46
DOALL:     	  %206 = fptosi double %205 to i32
DOALL:     	  %207 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %208 = add nsw i32 %207, %206
DOALL:     	  store i32 %208, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %209 = add nsw i64 %203, 1
DOALL:     	  %210 = getelementptr inbounds double, double* %113, i64 %209
DOALL:     	  %211 = load double, double* %210, align 8, !tbaa !46
DOALL:     	  %212 = fadd double %199, %211
DOALL:     	  %indvars.iv.next35.i = add nuw nsw i64 %indvars.iv34.i, 1
DOALL:     	  %.lcssa1 = phi double [ %199, %198 ]
DOALL:     	  %213 = fcmp olt double %.lcssa1, 0.000000e+00
DOALL:     	  br i1 %213, label %.preheader.i, label %281, !prof !66
DOALL:     	  %indvars.iv32.i = phi i64 [ %indvars.iv.next33.i, %._crit_edge59.i ], [ 0, %.preheader.i ]
DOALL:     	  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i
DOALL:     	  br i1 %215, label %216, label %254, !prof !67
DOALL:     	  %217 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45
DOALL:     	  %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56
DOALL:     	  %219 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i
DOALL:     	  %220 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 2
DOALL:     	  %221 = load i64, i64* %220, align 8, !tbaa !63
DOALL:     	  %222 = getelementptr inbounds i32, i32* %217, i64 %221
DOALL:     	  %223 = load i32, i32* %222, align 4, !tbaa !33
DOALL:     	  %224 = sext i32 %223 to i64
DOALL:     	  %225 = getelementptr inbounds double, double* %155, i64 %224
DOALL:     	  %226 = load double, double* %225, align 8, !tbaa !46
DOALL:     	  %227 = fcmp ogt double %226, 0.000000e+00
DOALL:     	  %228 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
DOALL:     	  %229 = getelementptr inbounds i8, i8* %228, i64 %indvars.iv32.i
DOALL:     	  %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51
DOALL:     	  %231 = icmp ne i8 %230, 0
DOALL:     	  %brmerge.i = or i1 %231, %227
DOALL:     	  br i1 %brmerge.i, label %232, label %.._crit_edge59_crit_edge.i, !prof !68
DOALL:     	  %233 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 0
DOALL:     	  %234 = load float, float* %233, align 8, !tbaa !58
DOALL:     	  %235 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %39
DOALL:     	  %236 = load i32, i32* %116, align 8, !tbaa !57
DOALL:     	  %237 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 1
DOALL:     	  %238 = load float*, float** %237, align 8
DOALL:     	  %239 = getelementptr inbounds %struct.Point, %struct.Point* %235, i64 0, i32 1
DOALL:     	  %240 = load float*, float** %239, align 8
DOALL:     	  %241 = sext i32 %236 to i64
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %244 ], [ 0, %232 ]
DOALL:     	  %.0.i.i = phi float [ %251, %244 ], [ 0.000000e+00, %232 ]
DOALL:     	  %243 = icmp slt i64 %indvars.iv.i.i, %241
DOALL:     	  br i1 %243, label %244, label %_Z4distRK5PointS1_i.exit.i, !prof !69
DOALL:     	  %245 = getelementptr inbounds float, float* %238, i64 %indvars.iv.i.i
DOALL:     	  %246 = load float, float* %245, align 4, !tbaa !70
DOALL:     	  %247 = getelementptr inbounds float, float* %240, i64 %indvars.iv.i.i
DOALL:     	  %248 = load float, float* %247, align 4, !tbaa !70
DOALL:     	  %249 = fsub float %246, %248
DOALL:     	  %250 = fmul float %249, %249
DOALL:     	  %251 = fadd float %.0.i.i, %250
DOALL:     	  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %242 ]
DOALL:     	  %252 = fmul float %234, %.0.i.i.lcssa
DOALL:     	  %253 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 3
DOALL:     	  store float %252, float* %253, align 8, !tbaa !61
DOALL:     	  store i64 %39, i64* %220, align 8, !tbaa !63
DOALL:     	  %indvars.iv.next33.i = add nuw i64 %indvars.iv32.i, 1
DOALL:     	  %255 = load i8*, i8** @_ZL9is_center, align 8
DOALL:     	  %256 = load i32*, i32** @_ZL12center_table, align 8
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %._crit_edge60.i ], [ 0, %254 ]
DOALL:     	  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i
DOALL:     	  br i1 %258, label %259, label %271, !prof !67
DOALL:     	  %260 = getelementptr inbounds i8, i8* %255, i64 %indvars.iv.i
DOALL:     	  %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51
DOALL:     	  %262 = icmp eq i8 %261, 0
DOALL:     	  br i1 %262, label %.._crit_edge60_crit_edge.i, label %263, !prof !71
DOALL:     	  %264 = getelementptr inbounds i32, i32* %256, i64 %indvars.iv.i
DOALL:     	  %265 = load i32, i32* %264, align 4, !tbaa !33
DOALL:     	  %266 = sext i32 %265 to i64
DOALL:     	  %267 = getelementptr inbounds double, double* %155, i64 %266
DOALL:     	  %268 = load double, double* %267, align 8, !tbaa !46
DOALL:     	  %269 = fcmp ogt double %268, 0.000000e+00
DOALL:     	  br i1 %269, label %270, label %.._crit_edge60_crit_edge10.i, !prof !72
DOALL:     	  store i8 0, i8* %260, align 1, !tbaa !49
DOALL:     	  %indvars.iv.next.i = add nuw i64 %indvars.iv.i, 1
DOALL:     	  %272 = icmp sle i64 0, %39
DOALL:     	  %273 = icmp sgt i64 %spec.select.i, %39
DOALL:     	  %or.cond.i = and i1 %272, %273
DOALL:     	  br i1 %or.cond.i, label %274, label %.._crit_edge62_crit_edge.i, !prof !73
DOALL:     	  %275 = getelementptr inbounds i8, i8* %255, i64 %39
DOALL:     	  store i8 1, i8* %275, align 1, !tbaa !49
DOALL:     	  %276 = load i64, i64* %4, align 8, !tbaa !43
DOALL:     	  %277 = add nsw i64 %276, 1
DOALL:     	  %278 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33
DOALL:     	  %279 = sext i32 %278 to i64
DOALL:     	  %280 = sub nsw i64 %277, %279
DOALL:     	  store i64 %280, i64* %4, align 8, !tbaa !43
DOALL:     	  tail call void @free(i8* %.lcssa) #3
DOALL:     External nodes: 43
DOALL:     	  br i1 %32, label %35, label %33, !prof !37
DOALL:     	  %37 = getelementptr inbounds i32, i32* %1, i64 %36
DOALL:     	  %40 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 0
DOALL:     	  br label %._crit_edge52.i
DOALL:     	  br label %._crit_edge52.i
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %._crit_edge54.i
DOALL:     	  br label %._crit_edge54.i
DOALL:     	  br label %63
DOALL:     	  br label %78
DOALL:     	  br label %._crit_edge56.i
DOALL:     	  br label %._crit_edge56.i
DOALL:     	  br label %89
DOALL:     	  %115 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 2
DOALL:     	  %116 = getelementptr inbounds %struct.Points, %struct.Points* %0, i64 0, i32 1
DOALL:     	  br label %150
DOALL:     	  br label %150
DOALL:     	  br label %117
DOALL:     	  br label %._crit_edge58.i
DOALL:     	  br label %168
DOALL:     	  br label %168
DOALL:     	  br label %._crit_edge58.i
DOALL:     	  br label %157
DOALL:     	  store double %14, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  store double %212, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %198
DOALL:     	  br label %214
DOALL:     	  br label %._crit_edge59.i
DOALL:     	  br label %242
DOALL:     	  br label %242
DOALL:     	  br label %._crit_edge59.i
DOALL:     	  br label %214
DOALL:     	  br label %257
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %._crit_edge60.i
DOALL:     	  br label %257
DOALL:     	  br label %._crit_edge62.i
DOALL:     	  br label %._crit_edge62.i
DOALL:     	  br label %_Z5pgainlP6PointsdPliP17pthread_barrier_t.exit
DOALL:     	  store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46
DOALL:     	  br label %_Z5pgainlP6PointsdPliP17pthread_barrier_t.exit
DOALL:     	  %282 = phi double [ 0.000000e+00, %281 ], [ %.lcssa1, %._crit_edge62.i ]
DOALL:     Edges: 1248
DOALL:     Loop-carried data dependences
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         store i8 1, i8* %133, align 1, !tbaa !49 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %139 = load i64, i64* %138, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %145 = load i32, i32* %144, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %145 = load i32, i32* %144, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %149, double* %147, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %165 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %171 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %171 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %176 = load double, double* %175, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %181 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %181 = load i32, i32* %167, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %190, double* %192, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %205 = load double, double* %204, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store i32 %208, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %211 = load double, double* %210, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %221 = load i64, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %223 = load i32, i32* %222, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %223 = load i32, i32* %222, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %226 = load double, double* %225, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %236 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %246 = load float, float* %245, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %248 = load float, float* %247, align 4, !tbaa !70 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %265 = load i32, i32* %264, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %265 = load i32, i32* %264, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %268 = load double, double* %267, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 0, i8* %260, align 1, !tbaa !49 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8 1, i8* %275, align 1, !tbaa !49 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         %278 = load i32, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   %47 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         store i64 %280, i64* %4, align 8, !tbaa !43 --->   %276 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @free(i8* %.lcssa) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double 0.000000e+00, double* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE20gl_cost_of_opening_x, align 8, !tbaa !46 via memory
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %41 = load i64, i64* %40, align 8, !tbaa !38 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %47 = load i64, i64* %4, align 8, !tbaa !43 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %142 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %132 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %108 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %217 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %166 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %228 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %114 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %61 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %42 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %88 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %87 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %156 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %162 = load i8, i8* %161, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %256 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %261 = load i8, i8* %260, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %102 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %47 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %276 = load i64, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i64 %280, i64* %4, align 8, !tbaa !43 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %62 = load i32*, i32** @_ZL12center_table, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %75 = load i32, i32* @_ZL5nproc, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %38 = load i32, i32* %37, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %255 = load i8*, i8** @_ZL9is_center, align 8 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %60 = tail call noalias i8* @malloc(i64 %59) #3 --->   %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 via memory
DOALL:         store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 --->   store i32 0, i32* @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE29gl_number_of_centers_to_close, align 4, !tbaa !33 via memory
DOALL:         %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %67 = load i8, i8* %66, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         store i32 %.016.i, i32* %71, align 4, !tbaa !33 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         %74 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %73, double* %74, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         store double %85, double* %82, align 8, !tbaa !46 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 --->   store i8 1, i8* %275, align 1, !tbaa !49 via memory
DOALL:         %93 = load i8, i8* %92, align 1, !tbaa !49, !range !51 --->   store i8 0, i8* %260, align 1, !tbaa !49 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         %96 = load double, double* %74, align 8, !tbaa !46 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %265 = load i32, i32* %264, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %223 = load i32, i32* %222, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %99 = load i32, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   store i32 %100, i32* %98, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %171 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %181 = load i32, i32* %167, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   %145 = load i32, i32* %144, align 4, !tbaa !33 via memory
DOALL:         store i32 %100, i32* %98, align 4, !tbaa !33 --->   store i32 %.016.i, i32* %71, align 4, !tbaa !33 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store i8 1, i8* %133, align 1, !tbaa !49 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %230 = load i8, i8* %229, align 1, !tbaa !49, !range !51 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %103 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         %107 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %83 = load double, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %73, double* %74, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %236 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %218 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %248 = load float, float* %247, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %126 = load float, float* %125, align 8, !tbaa !58 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %123 = load i32, i32* %116, align 8, !tbaa !57 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %246 = load float, float* %245, align 4, !tbaa !70 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %268 = load double, double* %267, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %221 = load i64, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %176 = load double, double* %175, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %190, double* %192, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %129 = load float, float* %128, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %148 = load double, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %226 = load double, double* %225, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %139 = load i64, i64* %138, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %205 = load double, double* %204, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %149, double* %147, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %41 = load i64, i64* %40, align 8, !tbaa !38 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.215.i.lcssa, double* %195, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %85, double* %82, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   store double %.04.i.lcssa, double* %183, align 8, !tbaa !46 via memory
DOALL:         tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 --->   %211 = load double, double* %210, align 8, !tbaa !46 via memory
DOALL:         %113 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !45 --->   store i8* %60, i8** bitcast (double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem to i8**), align 8, !tbaa !45 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %120 = load %struct.Point*, %struct.Point** %115, align 8, !tbaa !56 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %123 = load i32, i32* %116, align 8, !tbaa !57 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   %60 = tail call noalias i8* @malloc(i64 %59) #3 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @free(i8* %.lcssa) #3 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %124 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %121, %struct.Point* dereferenceable(32) %122, i32 %123) #3 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %126 = load float, float* %125, align 8, !tbaa !58 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 0, i64 %spec.select.i, i1 false) #3, !prof !54 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL:         %129 = load float, float* %128, align 8, !tbaa !61 --->   tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 %106, i1 false) #3, !prof !55 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 15
DOALL:     	  %234 = load float, float* %233, align 8, !tbaa !58
DOALL:     	  %238 = load float*, float** %237, align 8
DOALL:     	  %240 = load float*, float** %239, align 8
DOALL:     	  %.0.i.i = phi float [ %251, %244 ], [ 0.000000e+00, %232 ]
DOALL:     	  %245 = getelementptr inbounds float, float* %238, i64 %indvars.iv.i.i
DOALL:     	  %246 = load float, float* %245, align 4, !tbaa !70
DOALL:     	  %247 = getelementptr inbounds float, float* %240, i64 %indvars.iv.i.i
DOALL:     	  %248 = load float, float* %247, align 4, !tbaa !70
DOALL:     	  %249 = fsub float %246, %248
DOALL:     	  %250 = fmul float %249, %249
DOALL:     	  %251 = fadd float %.0.i.i, %250
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %242 ]
DOALL:     	  %252 = fmul float %234, %.0.i.i.lcssa
DOALL:     	  store float %252, float* %253, align 8, !tbaa !61
DOALL:     	  store i64 %39, i64* %220, align 8, !tbaa !63
DOALL:     External nodes: 9
DOALL:     	  %220 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 2
DOALL:     	  %221 = load i64, i64* %220, align 8, !tbaa !63
DOALL:     	  br i1 %brmerge.i, label %232, label %.._crit_edge59_crit_edge.i, !prof !68
DOALL:     	  %233 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 0
DOALL:     	  %237 = getelementptr inbounds %struct.Point, %struct.Point* %219, i64 0, i32 1
DOALL:     	  %239 = getelementptr inbounds %struct.Point, %struct.Point* %235, i64 0, i32 1
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %244 ], [ 0, %232 ]
DOALL:     	  br i1 %243, label %244, label %_Z4distRK5PointS1_i.exit.i, !prof !69
DOALL:     	  %253 = getelementptr inbounds %struct.Point, %struct.Point* %218, i64 %indvars.iv32.i, i32 3
DOALL:     Edges: 51
DOALL:     Loop-carried data dependences
DOALL:         %238 = load float*, float** %237, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %234 = load float, float* %233, align 8, !tbaa !58 via memory
DOALL:         store i64 %39, i64* %220, align 8, !tbaa !63 --->   %238 = load float*, float** %237, align 8 via memory
DOALL:         store float %252, float* %253, align 8, !tbaa !61 --->   %240 = load float*, float** %239, align 8 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %238 = load float*, float** %237, align 8 --->   store i64 %39, i64* %220, align 8, !tbaa !63 via memory
DOALL:         %240 = load float*, float** %239, align 8 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL:         %234 = load float, float* %233, align 8, !tbaa !58 --->   store float %252, float* %253, align 8, !tbaa !61 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 10
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %73 = tail call i64 @lrand48() #3
DOALL:     External nodes: 2
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %74 = sitofp i64 %73 to float
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:         %73 = tail call i64 @lrand48() #3 --->   %73 = tail call i64 @lrand48() #3 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %84 = load i64, i64* %2, align 8, !tbaa !49
DOALL:     	  %85 = add nsw i64 %84, 1
DOALL:     	  store i64 %85, i64* %2, align 8, !tbaa !49
DOALL:     External nodes: 1
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     Edges: 8
DOALL:     Loop-carried data dependences
DOALL:         store i64 %85, i64* %2, align 8, !tbaa !49 --->   %84 = load i64, i64* %2, align 8, !tbaa !49 via memory
DOALL:         store i64 %85, i64* %2, align 8, !tbaa !49 --->   store i64 %85, i64* %2, align 8, !tbaa !49 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 39
DOALL:     	  %91 = load i32, i32* %17, align 8, !tbaa !41
DOALL:     	  %92 = getelementptr inbounds %struct.Point, %struct.Point* %86, i64 0, i32 1
DOALL:     	  %93 = load float*, float** %92, align 8
DOALL:     	  %94 = getelementptr inbounds %struct.Point, %struct.Point* %90, i64 0, i32 1
DOALL:     	  %95 = load float*, float** %94, align 8
DOALL:     	  %96 = sext i32 %91 to i64
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %99 ], [ 0, %89 ]
DOALL:     	  %.0.i = phi float [ %106, %99 ], [ 0.000000e+00, %89 ]
DOALL:     	  %98 = icmp slt i64 %indvars.iv.i, %96
DOALL:     	  br i1 %98, label %99, label %_Z4distRK5PointS1_i.exit, !prof !42
DOALL:     	  %100 = getelementptr inbounds float, float* %93, i64 %indvars.iv.i
DOALL:     	  %101 = load float, float* %100, align 4, !tbaa !43
DOALL:     	  %102 = getelementptr inbounds float, float* %95, i64 %indvars.iv.i
DOALL:     	  %103 = load float, float* %102, align 4, !tbaa !43
DOALL:     	  %104 = fsub float %101, %103
DOALL:     	  %105 = fmul float %104, %104
DOALL:     	  %106 = fadd float %.0.i, %105
DOALL:     	  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %97 ]
DOALL:     	  %107 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 0
DOALL:     	  %108 = load float, float* %107, align 8, !tbaa !45
DOALL:     	  %109 = fmul float %.0.i.lcssa, %108
DOALL:     	  %110 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 3
DOALL:     	  %111 = load float, float* %110, align 8, !tbaa !47
DOALL:     	  %112 = fcmp olt float %109, %111
DOALL:     	  br i1 %112, label %113, label %.._crit_edge27_crit_edge, !prof !54
DOALL:     	  store float %109, float* %110, align 8, !tbaa !47
DOALL:     	  %114 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 2
DOALL:     	  store i64 %78, i64* %114, align 8, !tbaa !48
DOALL:     	  %indvars.iv.next17 = add i64 %indvars.iv16, 1
DOALL:     	  %80 = load float, float* %79, align 8, !tbaa !47
DOALL:     	  %81 = fdiv float %80, %1
DOALL:     	  %82 = fcmp olt float %75, %81
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     	  %86 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78
DOALL:     	  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge27 ], [ %18, %83 ]
DOALL:     	  %88 = icmp sgt i64 %spec.select, %indvars.iv16
DOALL:     	  br i1 %88, label %89, label %._crit_edge26.loopexit, !prof !53
DOALL:     	  %90 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16
DOALL:     External nodes: 16
DOALL:     	  br label %97
DOALL:     	  br label %97
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %87
DOALL:     	  br label %._crit_edge26
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %75 = fmul float %74, 0x3E00000000000000
DOALL:     	  %76 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %78 = sext i32 %77 to i64
DOALL:     	  %79 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78, i32 3
DOALL:     	  br label %._crit_edge26
DOALL:     	  %84 = load i64, i64* %2, align 8, !tbaa !49
DOALL:     	  %85 = add nsw i64 %84, 1
DOALL:     	  store i64 %85, i64* %2, align 8, !tbaa !49
DOALL:     	  br label %87
DOALL:     Edges: 125
DOALL:     Loop-carried data dependences
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %80 = load float, float* %79, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %111 = load float, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %95 = load float*, float** %94, align 8 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %95 = load float*, float** %94, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %95 = load float*, float** %94, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %95 = load float*, float** %94, align 8 via memory
DOALL:         %80 = load float, float* %79, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %111 = load float, float* %110, align 8, !tbaa !47 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %115 = add nsw i32 %77, 1
DOALL:     	  %storemerge = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ]
DOALL:     	  %68 = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ]
DOALL:     	  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     	  %69 = sext i32 %68 to i64
DOALL:     	  %70 = load i64, i64* %6, align 8, !tbaa !30
DOALL:     	  %71 = icmp sgt i64 %70, %69
DOALL:     	  br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
DOALL:     	  %77 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
DOALL:     External nodes: 11
DOALL:     	  br label %67
DOALL:     	  %73 = tail call i64 @lrand48() #3
DOALL:     	  %74 = sitofp i64 %73 to float
DOALL:     	  %75 = fmul float %74, 0x3E00000000000000
DOALL:     	  %76 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %78 = sext i32 %77 to i64
DOALL:     	  %79 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %78, i32 3
DOALL:     	  %80 = load float, float* %79, align 8, !tbaa !47
DOALL:     	  %81 = fdiv float %80, %1
DOALL:     	  %82 = fcmp olt float %75, %81
DOALL:     	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
DOALL:     Edges: 31
DOALL:     Loop-carried data dependences
DOALL:         %115 = add nsw i32 %77, 1 --->   %68 = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ] via variable
DOALL:         %115 = add nsw i32 %77, 1 --->   %storemerge = phi i32 [ 1, %._crit_edge ], [ %115, %._crit_edge26 ] via variable
DOALL:         store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 --->   store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 14
DOALL:     	  %93 = load float*, float** %92, align 8
DOALL:     	  %.0.i = phi float [ %106, %99 ], [ 0.000000e+00, %89 ]
DOALL:     	  %100 = getelementptr inbounds float, float* %93, i64 %indvars.iv.i
DOALL:     	  %101 = load float, float* %100, align 4, !tbaa !43
DOALL:     	  %104 = fsub float %101, %103
DOALL:     	  %105 = fmul float %104, %104
DOALL:     	  %106 = fadd float %.0.i, %105
DOALL:     	  %.0.i.lcssa = phi float [ %.0.i, %97 ]
DOALL:     	  %109 = fmul float %.0.i.lcssa, %108
DOALL:     	  %112 = fcmp olt float %109, %111
DOALL:     	  br i1 %112, label %113, label %.._crit_edge27_crit_edge, !prof !54
DOALL:     	  store float %109, float* %110, align 8, !tbaa !47
DOALL:     	  %114 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 2
DOALL:     	  store i64 %78, i64* %114, align 8, !tbaa !48
DOALL:     External nodes: 11
DOALL:     	  %92 = getelementptr inbounds %struct.Point, %struct.Point* %86, i64 0, i32 1
DOALL:     	  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %99 ], [ 0, %89 ]
DOALL:     	  br i1 %98, label %99, label %_Z4distRK5PointS1_i.exit, !prof !42
DOALL:     	  %103 = load float, float* %102, align 4, !tbaa !43
DOALL:     	  %108 = load float, float* %107, align 8, !tbaa !45
DOALL:     	  %110 = getelementptr inbounds %struct.Point, %struct.Point* %76, i64 %indvars.iv16, i32 3
DOALL:     	  %111 = load float, float* %110, align 8, !tbaa !47
DOALL:     	  br label %._crit_edge27
DOALL:     	  br label %._crit_edge27
DOALL:     	  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %._crit_edge27 ], [ %18, %83 ]
DOALL:     	  br i1 %88, label %89, label %._crit_edge26.loopexit, !prof !53
DOALL:     Edges: 43
DOALL:     Loop-carried data dependences
DOALL:         %93 = load float*, float** %92, align 8 --->   store float %109, float* %110, align 8, !tbaa !47 via memory
DOALL:         %93 = load float*, float** %92, align 8 --->   store i64 %78, i64* %114, align 8, !tbaa !48 via memory
DOALL:         store float %109, float* %110, align 8, !tbaa !47 --->   %93 = load float*, float** %92, align 8 via memory
DOALL:         store i64 %78, i64* %114, align 8, !tbaa !48 --->   %93 = load float*, float** %92, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 11
DOALL:     	  %26 = load float*, float** %25, align 8
DOALL:     	  %.0.i2 = phi float [ %39, %32 ], [ 0.000000e+00, %21 ]
DOALL:     	  %33 = getelementptr inbounds float, float* %26, i64 %indvars.iv.i1
DOALL:     	  %34 = load float, float* %33, align 4, !tbaa !43
DOALL:     	  %37 = fsub float %34, %36
DOALL:     	  %38 = fmul float %37, %37
DOALL:     	  %39 = fadd float %.0.i2, %38
DOALL:     	  %.0.i2.lcssa = phi float [ %.0.i2, %30 ]
DOALL:     	  %42 = fmul float %.0.i2.lcssa, %41
DOALL:     	  store float %42, float* %43, align 8, !tbaa !47
DOALL:     	  store i64 0, i64* %44, align 8, !tbaa !48
DOALL:     External nodes: 8
DOALL:     	  br i1 %20, label %21, label %45, !prof !39
DOALL:     	  %25 = getelementptr inbounds %struct.Point, %struct.Point* %23, i64 0, i32 1
DOALL:     	  %indvars.iv.i1 = phi i64 [ %indvars.iv.next.i3, %32 ], [ 0, %21 ]
DOALL:     	  br i1 %31, label %32, label %_Z4distRK5PointS1_i.exit4, !prof !42
DOALL:     	  %36 = load float, float* %35, align 4, !tbaa !43
DOALL:     	  %41 = load float, float* %40, align 8, !tbaa !45
DOALL:     	  %43 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 %indvars.iv20, i32 3
DOALL:     	  %44 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 %indvars.iv20, i32 2
DOALL:     Edges: 33
DOALL:     Loop-carried data dependences
DOALL:         %26 = load float*, float** %25, align 8 --->   store i64 0, i64* %44, align 8, !tbaa !48 via memory
DOALL:         %26 = load float*, float** %25, align 8 --->   store float %42, float* %43, align 8, !tbaa !47 via memory
DOALL:         store float %42, float* %43, align 8, !tbaa !47 --->   %26 = load float*, float** %25, align 8 via memory
DOALL:         store i64 0, i64* %44, align 8, !tbaa !48 --->   %26 = load float*, float** %25, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 8
DOALL:     	  %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57)
DOALL:     	  %61 = fmul float %58, %60
DOALL:     	  %63 = load float, float* %62, align 8, !tbaa !47
DOALL:     	  %64 = fcmp olt float %61, %63
DOALL:     	  br i1 %64, label %65, label %.._crit_edge25_crit_edge
DOALL:     	  store float %61, float* %62, align 8, !tbaa !47
DOALL:     	  %66 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18, i32 2
DOALL:     	  store i64 %50, i64* %66, align 8, !tbaa !48
DOALL:     External nodes: 11
DOALL:     	  %50 = sext i32 %49 to i64
DOALL:     	  %indvars.iv18 = phi i64 [ %indvars.iv.next19, %._crit_edge25 ], [ %18, %.preheader.preheader ]
DOALL:     	  br i1 %52, label %53, label %.loopexit.loopexit
DOALL:     	  %54 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
DOALL:     	  %55 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %50
DOALL:     	  %56 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18
DOALL:     	  %57 = load i32, i32* %17, align 8, !tbaa !41
DOALL:     	  %60 = load float, float* %59, align 8, !tbaa !45
DOALL:     	  %62 = getelementptr inbounds %struct.Point, %struct.Point* %54, i64 %indvars.iv18, i32 3
DOALL:     	  br label %._crit_edge25
DOALL:     	  br label %._crit_edge25
DOALL:     Edges: 33
DOALL:     Loop-carried data dependences
DOALL:         %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) --->   store i64 %50, i64* %66, align 8, !tbaa !48 via memory
DOALL:         %63 = load float, float* %62, align 8, !tbaa !47 --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   %63 = load float, float* %62, align 8, !tbaa !47 via memory
DOALL:         store float %61, float* %62, align 8, !tbaa !47 --->   store float %61, float* %62, align 8, !tbaa !47 via memory
DOALL:         store i64 %50, i64* %66, align 8, !tbaa !48 --->   store i64 %50, i64* %66, align 8, !tbaa !48 via memory
DOALL:         store i64 %50, i64* %66, align 8, !tbaa !48 --->   %58 = tail call float @_Z4distRK5PointS1_i(%struct.Point* dereferenceable(32) %55, %struct.Point* dereferenceable(32) %56, i32 %57) via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 0
DOALL:     Live-out ID = 1
DOALL:     Live-out ID = 2
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 1
DOALL:     	  %140 = tail call i64 @lrand48() #3
DOALL:     External nodes: 2
DOALL:     	  br i1 %138, label %139, label %.loopexit7.loopexit.i, !prof !62
DOALL:     	  %141 = sitofp i64 %140 to float
DOALL:     Edges: 5
DOALL:     Loop-carried data dependences
DOALL:         %140 = tail call i64 @lrand48() #3 --->   %140 = tail call i64 @lrand48() #3 via memory
DOALL:         %140 = tail call i64 @lrand48() #3 --->   %140 = tail call i64 @lrand48() #3 via memory
DOALL:         %140 = tail call i64 @lrand48() #3 --->   %140 = tail call i64 @lrand48() #3 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 9
DOALL:     	  %storemerge.i = phi i32 [ 1, %127 ], [ %182, %._crit_edge26.i ]
DOALL:     	  %135 = phi i32 [ 1, %127 ], [ %182, %._crit_edge26.i ]
DOALL:     	  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30
DOALL:     	  %136 = sext i32 %135 to i64
DOALL:     	  %137 = load i64, i64* %92, align 8, !tbaa !40
DOALL:     	  %138 = icmp sgt i64 %137, %136
DOALL:     	  br i1 %138, label %139, label %.loopexit7.loopexit.i, !prof !62
DOALL:     	  %144 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30
DOALL:     	  %182 = add nsw i32 %144, 1
DOALL:     External nodes: 11
DOALL:     	  %140 = tail call i64 @lrand48() #3
DOALL:     	  %141 = sitofp i64 %140 to float
DOALL:     	  %142 = fmul float %141, 0x3E00000000000000
DOALL:     	  %143 = load %struct.Point*, %struct.Point** %99, align 8, !tbaa !42
DOALL:     	  %145 = sext i32 %144 to i64
DOALL:     	  %146 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %145, i32 3
DOALL:     	  %147 = load float, float* %146, align 8, !tbaa !52
DOALL:     	  %148 = fdiv float %147, %131
DOALL:     	  %149 = fcmp olt float %142, %148
DOALL:     	  br i1 %149, label %150, label %.._crit_edge26_crit_edge.i, !prof !63
DOALL:     	  br label %134
DOALL:     Edges: 31
DOALL:     Loop-carried data dependences
DOALL:         store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30 --->   store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30 via memory
DOALL:         %182 = add nsw i32 %144, 1 --->   %storemerge.i = phi i32 [ 1, %127 ], [ %182, %._crit_edge26.i ] via variable
DOALL:         %182 = add nsw i32 %144, 1 --->   %135 = phi i32 [ 1, %127 ], [ %182, %._crit_edge26.i ] via variable
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  %151 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
DOALL:     	  %152 = add nsw i64 %151, 1
DOALL:     	  store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
DOALL:     External nodes: 1
DOALL:     	  br i1 %149, label %150, label %.._crit_edge26_crit_edge.i, !prof !63
DOALL:     Edges: 8
DOALL:     Loop-carried data dependences
DOALL:         store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54 --->   store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54 via memory
DOALL:         store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54 --->   %151 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 39
DOALL:     	  %147 = load float, float* %146, align 8, !tbaa !52
DOALL:     	  %148 = fdiv float %147, %131
DOALL:     	  %149 = fcmp olt float %142, %148
DOALL:     	  br i1 %149, label %150, label %.._crit_edge26_crit_edge.i, !prof !63
DOALL:     	  %153 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %145
DOALL:     	  %indvars.iv16.i = phi i64 [ %indvars.iv.next17.i, %._crit_edge27.i ], [ 0, %150 ]
DOALL:     	  %155 = icmp sgt i64 %spec.select.i, %indvars.iv16.i
DOALL:     	  br i1 %155, label %156, label %._crit_edge26.loopexit.i, !prof !64
DOALL:     	  %157 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i
DOALL:     	  %158 = load i32, i32* %100, align 8, !tbaa !37
DOALL:     	  %159 = getelementptr inbounds %struct.Point, %struct.Point* %153, i64 0, i32 1
DOALL:     	  %160 = load float*, float** %159, align 8
DOALL:     	  %161 = getelementptr inbounds %struct.Point, %struct.Point* %157, i64 0, i32 1
DOALL:     	  %162 = load float*, float** %161, align 8
DOALL:     	  %163 = sext i32 %158 to i64
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %166 ], [ 0, %156 ]
DOALL:     	  %.0.i.i = phi float [ %173, %166 ], [ 0.000000e+00, %156 ]
DOALL:     	  %165 = icmp slt i64 %indvars.iv.i.i, %163
DOALL:     	  br i1 %165, label %166, label %_Z4distRK5PointS1_i.exit.i, !prof !61
DOALL:     	  %167 = getelementptr inbounds float, float* %160, i64 %indvars.iv.i.i
DOALL:     	  %168 = load float, float* %167, align 4, !tbaa !58
DOALL:     	  %169 = getelementptr inbounds float, float* %162, i64 %indvars.iv.i.i
DOALL:     	  %170 = load float, float* %169, align 4, !tbaa !58
DOALL:     	  %171 = fsub float %168, %170
DOALL:     	  %172 = fmul float %171, %171
DOALL:     	  %173 = fadd float %.0.i.i, %172
DOALL:     	  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %164 ]
DOALL:     	  %174 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 0
DOALL:     	  %175 = load float, float* %174, align 8, !tbaa !43
DOALL:     	  %176 = fmul float %.0.i.i.lcssa, %175
DOALL:     	  %177 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 3
DOALL:     	  %178 = load float, float* %177, align 8, !tbaa !52
DOALL:     	  %179 = fcmp olt float %176, %178
DOALL:     	  br i1 %179, label %180, label %.._crit_edge27_crit_edge.i, !prof !65
DOALL:     	  store float %176, float* %177, align 8, !tbaa !52
DOALL:     	  %181 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 2
DOALL:     	  store i64 %145, i64* %181, align 8, !tbaa !51
DOALL:     	  %indvars.iv.next17.i = add nuw i64 %indvars.iv16.i, 1
DOALL:     External nodes: 16
DOALL:     	  br i1 %138, label %139, label %.loopexit7.loopexit.i, !prof !62
DOALL:     	  %142 = fmul float %141, 0x3E00000000000000
DOALL:     	  %143 = load %struct.Point*, %struct.Point** %99, align 8, !tbaa !42
DOALL:     	  %145 = sext i32 %144 to i64
DOALL:     	  %146 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %145, i32 3
DOALL:     	  br label %._crit_edge26.i
DOALL:     	  %151 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
DOALL:     	  %152 = add nsw i64 %151, 1
DOALL:     	  store i64 %152, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
DOALL:     	  br label %154
DOALL:     	  br label %164
DOALL:     	  br label %164
DOALL:     	  br label %._crit_edge27.i
DOALL:     	  br label %._crit_edge27.i
DOALL:     	  br label %154
DOALL:     	  br label %._crit_edge26.i
DOALL:     Edges: 125
DOALL:     Loop-carried data dependences
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %178 = load float, float* %177, align 8, !tbaa !52 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %162 = load float*, float** %161, align 8 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %147 = load float, float* %146, align 8, !tbaa !52 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %160 = load float*, float** %159, align 8 via memory
DOALL:         store i64 %145, i64* %181, align 8, !tbaa !51 --->   store i64 %145, i64* %181, align 8, !tbaa !51 via memory
DOALL:         store i64 %145, i64* %181, align 8, !tbaa !51 --->   %160 = load float*, float** %159, align 8 via memory
DOALL:         store i64 %145, i64* %181, align 8, !tbaa !51 --->   %162 = load float*, float** %161, align 8 via memory
DOALL:         %160 = load float*, float** %159, align 8 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         %160 = load float*, float** %159, align 8 --->   store i64 %145, i64* %181, align 8, !tbaa !51 via memory
DOALL:         %162 = load float*, float** %161, align 8 --->   store i64 %145, i64* %181, align 8, !tbaa !51 via memory
DOALL:         %162 = load float*, float** %161, align 8 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         %178 = load float, float* %177, align 8, !tbaa !52 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         %147 = load float, float* %146, align 8, !tbaa !52 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 14
DOALL:     	  %160 = load float*, float** %159, align 8
DOALL:     	  %.0.i.i = phi float [ %173, %166 ], [ 0.000000e+00, %156 ]
DOALL:     	  %167 = getelementptr inbounds float, float* %160, i64 %indvars.iv.i.i
DOALL:     	  %168 = load float, float* %167, align 4, !tbaa !58
DOALL:     	  %171 = fsub float %168, %170
DOALL:     	  %172 = fmul float %171, %171
DOALL:     	  %173 = fadd float %.0.i.i, %172
DOALL:     	  %.0.i.i.lcssa = phi float [ %.0.i.i, %164 ]
DOALL:     	  %176 = fmul float %.0.i.i.lcssa, %175
DOALL:     	  %179 = fcmp olt float %176, %178
DOALL:     	  br i1 %179, label %180, label %.._crit_edge27_crit_edge.i, !prof !65
DOALL:     	  store float %176, float* %177, align 8, !tbaa !52
DOALL:     	  %181 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 2
DOALL:     	  store i64 %145, i64* %181, align 8, !tbaa !51
DOALL:     External nodes: 11
DOALL:     	  %indvars.iv16.i = phi i64 [ %indvars.iv.next17.i, %._crit_edge27.i ], [ 0, %150 ]
DOALL:     	  br i1 %155, label %156, label %._crit_edge26.loopexit.i, !prof !64
DOALL:     	  %159 = getelementptr inbounds %struct.Point, %struct.Point* %153, i64 0, i32 1
DOALL:     	  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %166 ], [ 0, %156 ]
DOALL:     	  br i1 %165, label %166, label %_Z4distRK5PointS1_i.exit.i, !prof !61
DOALL:     	  %170 = load float, float* %169, align 4, !tbaa !58
DOALL:     	  %175 = load float, float* %174, align 8, !tbaa !43
DOALL:     	  %177 = getelementptr inbounds %struct.Point, %struct.Point* %143, i64 %indvars.iv16.i, i32 3
DOALL:     	  %178 = load float, float* %177, align 8, !tbaa !52
DOALL:     	  br label %._crit_edge27.i
DOALL:     	  br label %._crit_edge27.i
DOALL:     Edges: 43
DOALL:     Loop-carried data dependences
DOALL:         store i64 %145, i64* %181, align 8, !tbaa !51 --->   %160 = load float*, float** %159, align 8 via memory
DOALL:         %160 = load float*, float** %159, align 8 --->   store float %176, float* %177, align 8, !tbaa !52 via memory
DOALL:         %160 = load float*, float** %159, align 8 --->   store i64 %145, i64* %181, align 8, !tbaa !51 via memory
DOALL:         store float %176, float* %177, align 8, !tbaa !52 --->   %160 = load float*, float** %159, align 8 via memory
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca %union.pthread_barrier_t, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
DOALL: Checking if the loop is DOALL
DOALL:   More than 1 loop exit blocks
DOALL: WARNING: function NOELLE_DOALLDispatcher couldn't be found. DOALL is disabled
Inliner:   No remaining calls need to be inlined due to loop-carried data dependences
Inliner:   The code has not been modified
Inliner: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.666142e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.989405e-05%)
Noelle:     Loop "  %66 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.704068e+01%)
Noelle:     Loop "  %90 = icmp sgt i64 %68, %indvars.iv" (2.073678e-04%)
Noelle:     Loop "  %109 = sext i32 %108 to i64" (4.700521e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %141" (3.455585e-02%)
Noelle:     Loop "  %165 = icmp slt i64 %.01.i4, %159" (3.414119e-02%)
Noelle:     Loop "  %198 = icmp slt i64 %.01.i, %194" (2.962374e-04%)
Noelle:     Loop "  %211 = icmp slt i64 %.12.i, %.pre3.i" (4.153666e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.401042e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.007635e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.700947e-08%)
Noelle:     Loop "  %50 = icmp slt i64 %.02, %spec.select" (2.585521e-07%)
Noelle:     Loop "  %65 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.638876e-01%)
Noelle:     Loop "  %213 = icmp slt i64 %212, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.291378e-01%)
Noelle:     Loop "  %74 = load i64, i64* %71, align 8, !tbaa !40" (1.362602e-03%)
Noelle:     Loop "  %102 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.001264e-01%)
Noelle:     Loop "  %113 = icmp slt i64 %indvars.iv.i1.i, %111" (9.882299e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.269968e-01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.257526e-01%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv.i.i, %163" (4.199977e-01%)
Noelle:     Loop "  %184 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.517248e-04%)
Noelle:     Loop "  %201 = icmp slt i64 %indvars.iv.i, %198" (5.062558e-08%)
Noelle:     Loop "  %226 = icmp sgt i64 %223, %indvars.iv" (2.962374e-04%)
Noelle:     Loop "  %240 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.290207e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.363750e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.501916e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.303766e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.057651e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.490231e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.162219e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.443769e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.512401e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i, %226" (2.375214e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select, %indvars.iv" (5.037401e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %286 = fdiv double %.0, %.02" (9.290211e+01%)
Noelle:     Loop "  %289 = icmp slt i64 %.01, %6" (9.290211e+01%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.284904e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %18" (1.876763e-05%)
Noelle:     Loop "  %32 = icmp slt i64 %.01.us, %6" (9.284902e+01%)
Noelle:     Loop "  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.363750e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv42.i, %76" (5.501916e-05%)
Noelle:     Loop "  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.303765e-01%)
Noelle:     Loop "  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.057651e+01%)
Noelle:     Loop "  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.490230e-01%)
Noelle:     Loop "  %169 = icmp slt i32 %.03.i, %114" (3.162219e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %indvars.iv34.i, %196" (7.443769e-05%)
Noelle:     Loop "  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.512401e-01%)
Noelle:     Loop "  %243 = icmp slt i64 %indvars.iv.i.i, %241" (2.375214e-01%)
Noelle:     Loop "  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.037401e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (8.977119e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.002528e-01%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv.i1, %29" (1.976460e-01%)
Noelle:     Loop "  %49 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.335276e+10%)
Noelle:     Loop "  %52 = icmp sgt i64 %spec.select, %indvars.iv18" (3.335276e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.539936e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.515052e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv.i, %96" (8.399954e-01%)
Noelle:     Loop "  %117 = icmp sgt i64 %spec.select, %indvars.iv14" (1.303450e-03%)
Noelle:     Loop "  %136 = icmp slt i64 %indvars.iv, %133" (1.012512e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.911170e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.828239e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.218316e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.179805e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.043903e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.962374e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.153666e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.258425e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.770123e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.507594e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.585521e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.939249e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.872712e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.874051e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.666142e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.989405e-05%)
Noelle:     Loop "  %66 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.704068e+01%)
Noelle:     Loop "  %90 = icmp sgt i64 %68, %indvars.iv" (2.073678e-04%)
Noelle:     Loop "  %109 = sext i32 %108 to i64" (4.700521e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %141" (3.455585e-02%)
Noelle:     Loop "  %165 = icmp slt i64 %.01.i4, %159" (3.414119e-02%)
Noelle:     Loop "  %198 = icmp slt i64 %.01.i, %194" (2.962374e-04%)
Noelle:     Loop "  %211 = icmp slt i64 %.12.i, %.pre3.i" (4.153666e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %17 = sext i32 %16 to i64" (9.401042e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.007635e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.700947e-08%)
Noelle:     Loop "  %50 = icmp slt i64 %.02, %spec.select" (2.585521e-07%)
Noelle:     Loop "  %65 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.638876e-01%)
Noelle:     Loop "  %213 = icmp slt i64 %212, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.291378e-01%)
Noelle:     Loop "  %74 = load i64, i64* %71, align 8, !tbaa !40" (1.362602e-03%)
Noelle:     Loop "  %102 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.001264e-01%)
Noelle:     Loop "  %113 = icmp slt i64 %indvars.iv.i1.i, %111" (9.882299e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.269968e-01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.257526e-01%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv.i.i, %163" (4.199977e-01%)
Noelle:     Loop "  %184 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.517248e-04%)
Noelle:     Loop "  %201 = icmp slt i64 %indvars.iv.i, %198" (5.062558e-08%)
Noelle:     Loop "  %226 = icmp sgt i64 %223, %indvars.iv" (2.962374e-04%)
Noelle:     Loop "  %240 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.290207e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.363750e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.501916e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.303766e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.057651e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.490231e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.162219e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.443769e-05%)
Noelle:     Loop "  %200 = icmp sgt i64 %spec.select, %indvars.iv32" (2.512401e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i, %226" (2.375214e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select, %indvars.iv" (5.037401e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %286 = fdiv double %.0, %.02" (9.290211e+01%)
Noelle:     Loop "  %289 = icmp slt i64 %.01, %6" (9.290211e+01%)
Noelle:     Loop "  %15 = fdiv double %.0.us, %.02.us" (9.284904e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %18" (1.876763e-05%)
Noelle:     Loop "  %32 = icmp slt i64 %.01.us, %6" (9.284902e+01%)
Noelle:     Loop "  %64 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.363750e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv42.i, %76" (5.501916e-05%)
Noelle:     Loop "  %90 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.303765e-01%)
Noelle:     Loop "  %118 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.057651e+01%)
Noelle:     Loop "  %159 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.490230e-01%)
Noelle:     Loop "  %169 = icmp slt i32 %.03.i, %114" (3.162219e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %indvars.iv34.i, %196" (7.443769e-05%)
Noelle:     Loop "  %215 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.512401e-01%)
Noelle:     Loop "  %243 = icmp slt i64 %indvars.iv.i.i, %241" (2.375214e-01%)
Noelle:     Loop "  %258 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.037401e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (8.977119e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.002528e-01%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv.i1, %29" (1.976460e-01%)
Noelle:     Loop "  %49 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.335276e+10%)
Noelle:     Loop "  %52 = icmp sgt i64 %spec.select, %indvars.iv18" (3.335276e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.539936e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.515052e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv.i, %96" (8.399954e-01%)
Noelle:     Loop "  %117 = icmp sgt i64 %spec.select, %indvars.iv14" (1.303450e-03%)
Noelle:     Loop "  %136 = icmp slt i64 %indvars.iv, %133" (1.012512e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.911170e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.828239e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.218316e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.179805e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.043903e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.962374e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.153666e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.258425e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.770123e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.507594e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.585521e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.939249e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.872712e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.874051e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint: Exit
NOELLE: Inliner: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.U8Ij5zL6Yc (.ll version is /tmp/tmp.c5Zndh8e9m)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.C0duA4KD4T (.ll version is /tmp/tmp.g1LepEdr5S)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.U8Ij5zL6Yc -o /tmp/tmp.C0duA4KD4T
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.U8Ij5zL6Yc -o /tmp/tmp.C0duA4KD4T
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.U8Ij5zL6Yc -o /tmp/tmp.C0duA4KD4T
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.U8Ij5zL6Yc -o /tmp/tmp.C0duA4KD4T
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       __cxx_global_var_init
DeadFunctionEliminator:       _GLOBAL__sub_I_streamcluster.cpp
DeadFunctionEliminator:       _ZNSt8ios_base4InitC1Ev
DeadFunctionEliminator:       __cxa_atexit
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       _Z10intshufflePii
DeadFunctionEliminator:       _Z4distRK5PointS1_i
DeadFunctionEliminator:       _ZN9SimStreamC2El
DeadFunctionEliminator:       _ZN10FileStreamC2EPc
DeadFunctionEliminator:       _ZN7PStreamC2Ev
DeadFunctionEliminator:       _ZN10FileStream6ferrorEv
DeadFunctionEliminator:       _ZN10FileStream4feofEv
DeadFunctionEliminator:       _ZN10FileStreamD2Ev
DeadFunctionEliminator:       _ZN10FileStreamD0Ev
DeadFunctionEliminator:       _ZdlPv
DeadFunctionEliminator:       _ZN7PStreamD2Ev
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       _Z7shuffleP6Points
DeadFunctionEliminator:       lrand48
DeadFunctionEliminator:       llvm.memcpy.p0i8.p0i8.i64
DeadFunctionEliminator:       _Z7pspeedyP6PointsfPliP17pthread_barrier_t
DeadFunctionEliminator:       malloc
DeadFunctionEliminator:       free
DeadFunctionEliminator:       _Z5pgainlP6PointsdPliP17pthread_barrier_t
DeadFunctionEliminator:       llvm.memset.p0i8.i64
DeadFunctionEliminator:       _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t
DeadFunctionEliminator:       main
DeadFunctionEliminator:       _Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t
DeadFunctionEliminator:       log
DeadFunctionEliminator:       _Z8pkmedianP6PointsllPliP17pthread_barrier_t
DeadFunctionEliminator:       calloc
DeadFunctionEliminator:       _Z11contcentersP6Points
DeadFunctionEliminator:       _Z11copycentersP6PointsS0_Pll
DeadFunctionEliminator:       _Z14localSearchSubPv
DeadFunctionEliminator:       _Z11localSearchP6PointsllPl
DeadFunctionEliminator:       llvm.umul.with.overflow.i64
DeadFunctionEliminator:       _Znam
DeadFunctionEliminator:       _ZdaPv
DeadFunctionEliminator:       _Z12outcenterIDsP6PointsPlPc
DeadFunctionEliminator:       fopen
DeadFunctionEliminator:       fprintf
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       fclose
DeadFunctionEliminator:       _Z13streamClusterP7PStreamllillPc
DeadFunctionEliminator:       fflush
DeadFunctionEliminator:       atoi
DeadFunctionEliminator:       strcpy
DeadFunctionEliminator:       srand48
DeadFunctionEliminator:       _Znwm
DeadFunctionEliminator:       feof
DeadFunctionEliminator:       ferror
DeadFunctionEliminator:       _ZN7PStreamD0Ev
DeadFunctionEliminator:       llvm.trap
DeadFunctionEliminator:       _ZN9SimStream4readEPfii
DeadFunctionEliminator:       _ZN9SimStream6ferrorEv
DeadFunctionEliminator:       _ZN9SimStream4feofEv
DeadFunctionEliminator:       _ZN9SimStreamD0Ev
DeadFunctionEliminator:       strtol
DeadFunctionEliminator:       fwrite
DeadFunctionEliminator:       fputc
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.666229e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.989469e-05%)
Noelle:     Loop "  %67 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.704118e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %69, %indvars.iv" (2.073746e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.700578e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.451255e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.414231e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.666229e-04%)
Noelle:     Loop "  %201 = icmp slt i64 %.12.i, %.pre3.i" (4.153802e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.401156e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.007798e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.701100e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.585605e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.635851e-01%)
Noelle:     Loop "  %200 = icmp slt i64 %199, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.285329e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.362646e-03%)
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.000704e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.882621e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.264478e-01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.252628e-01%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %151" (4.200114e-01%)
Noelle:     Loop "  %171 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.517461e-04%)
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv.i, %185" (5.062723e-08%)
Noelle:     Loop "  %213 = icmp sgt i64 %210, %indvars.iv" (2.962471e-04%)
Noelle:     Loop "  %227 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.290442e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.363958e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.502095e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.303939e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.057947e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.490507e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.162322e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.444012e-05%)
Noelle:     Loop "  %199 = icmp sgt i64 %spec.select, %indvars.iv32" (2.506023e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %223" (2.375291e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.037565e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %274 = fdiv double %.0, %.02" (9.290449e+01%)
Noelle:     Loop "  %276 = icmp slt i64 %.01, %6" (9.290449e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.285139e+01%)
Noelle:     Loop "  %21 = icmp slt i64 %.0.i, %13" (1.876824e-05%)
Noelle:     Loop "  %32 = icmp slt i64 %.01.us, %6" (9.285137e+01%)
Noelle:     Loop "  %62 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.363958e-01%)
Noelle:     Loop "  %77 = icmp slt i64 %indvars.iv42.i, %74" (5.502095e-05%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.303938e-01%)
Noelle:     Loop "  %112 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.057946e+01%)
Noelle:     Loop "  %153 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.490507e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %110" (3.162322e-04%)
Noelle:     Loop "  %193 = icmp slt i64 %indvars.iv34.i, %190" (7.444012e-05%)
Noelle:     Loop "  %207 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.506023e-01%)
Noelle:     Loop "  %233 = icmp slt i64 %indvars.iv.i.i, %231" (2.375291e-01%)
Noelle:     Loop "  %248 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.037565e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (8.977412e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.001409e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.976524e-01%)
Noelle:     Loop "  %48 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.335384e+10%)
Noelle:     Loop "  %51 = icmp sgt i64 %spec.select, %indvars.iv18" (3.335384e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.528957e-01%)
Noelle:     Loop "  %86 = icmp sgt i64 %spec.select, %indvars.iv16" (8.505257e-01%)
Noelle:     Loop "  %94 = icmp slt i64 %indvars.iv.i, %92" (8.400228e-01%)
Noelle:     Loop "  %113 = icmp sgt i64 %spec.select, %indvars.iv14" (1.303492e-03%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv, %129" (1.012545e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.911395e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.828461e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.218454e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.179942e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.043970e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.962471e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.153802e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.258532e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.770214e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.507675e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.585605e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.939410e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.872871e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.874112e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.666229e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.989469e-05%)
Noelle:     Loop "  %67 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.704118e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %69, %indvars.iv" (2.073746e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.700578e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.451255e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.414231e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.666229e-04%)
Noelle:     Loop "  %201 = icmp slt i64 %.12.i, %.pre3.i" (4.153802e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.401156e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.007798e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.701100e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.585605e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.635851e-01%)
Noelle:     Loop "  %200 = icmp slt i64 %199, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.285329e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.362646e-03%)
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.000704e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.882621e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.264478e-01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.252628e-01%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %151" (4.200114e-01%)
Noelle:     Loop "  %171 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.517461e-04%)
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv.i, %185" (5.062723e-08%)
Noelle:     Loop "  %213 = icmp sgt i64 %210, %indvars.iv" (2.962471e-04%)
Noelle:     Loop "  %227 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.290442e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.363958e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.502095e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.303939e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.057947e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.490507e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.162322e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.444012e-05%)
Noelle:     Loop "  %199 = icmp sgt i64 %spec.select, %indvars.iv32" (2.506023e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %223" (2.375291e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.037565e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %274 = fdiv double %.0, %.02" (9.290449e+01%)
Noelle:     Loop "  %276 = icmp slt i64 %.01, %6" (9.290449e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.285139e+01%)
Noelle:     Loop "  %21 = icmp slt i64 %.0.i, %13" (1.876824e-05%)
Noelle:     Loop "  %32 = icmp slt i64 %.01.us, %6" (9.285137e+01%)
Noelle:     Loop "  %62 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.363958e-01%)
Noelle:     Loop "  %77 = icmp slt i64 %indvars.iv42.i, %74" (5.502095e-05%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.303938e-01%)
Noelle:     Loop "  %112 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.057946e+01%)
Noelle:     Loop "  %153 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.490507e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %110" (3.162322e-04%)
Noelle:     Loop "  %193 = icmp slt i64 %indvars.iv34.i, %190" (7.444012e-05%)
Noelle:     Loop "  %207 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.506023e-01%)
Noelle:     Loop "  %233 = icmp slt i64 %indvars.iv.i.i, %231" (2.375291e-01%)
Noelle:     Loop "  %248 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.037565e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (8.977412e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.001409e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.976524e-01%)
Noelle:     Loop "  %48 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.335384e+10%)
Noelle:     Loop "  %51 = icmp sgt i64 %spec.select, %indvars.iv18" (3.335384e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.528957e-01%)
Noelle:     Loop "  %86 = icmp sgt i64 %spec.select, %indvars.iv16" (8.505257e-01%)
Noelle:     Loop "  %94 = icmp slt i64 %indvars.iv.i, %92" (8.400228e-01%)
Noelle:     Loop "  %113 = icmp sgt i64 %spec.select, %indvars.iv14" (1.303492e-03%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv, %129" (1.012545e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.911395e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.828461e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.218454e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.179942e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.043970e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.962471e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.153802e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.258532e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.770214e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.507675e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.585605e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.939410e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.872871e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.874112e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-enable baseline_pre.bc baseline_pre.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: Enablers: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.CA9TkgUQHA (.ll version is /tmp/tmp.FKSaePwWb1)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.hHIFfO2nyp (.ll version is /tmp/tmp.lCcjrR6CNq)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.666229e-04%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.989469e-05%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %67 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.704118e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %69, %indvars.iv" (2.073746e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.700578e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.451255e-02%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.414231e-02%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.666229e-04%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.153802e-04%)
Noelle:  Disable loop "8" as cold code
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.401156e+01%)
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.007798e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.701100e-08%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.585605e-07%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.635851e-01%)
Noelle:     Loop "  %200 = icmp slt i64 %199, %1" (0.000000e+00%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.285329e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.362646e-03%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.000704e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.882621e-02%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.264478e-01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.252628e-01%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %151" (4.200114e-01%)
Noelle:     Loop "  %171 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.517461e-04%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv.i, %185" (5.062723e-08%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %213 = icmp sgt i64 %210, %indvars.iv" (2.962471e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %227 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.290442e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.363958e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.502095e-05%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.303939e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.057947e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.490507e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.162322e-04%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.444012e-05%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %199 = icmp sgt i64 %spec.select, %indvars.iv32" (2.506023e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %223" (2.375291e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.037565e-03%)
Noelle:  Disable loop "35" as cold code
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.290449e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.290449e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.285139e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.876824e-05%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.285137e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.363958e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.502095e-05%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.303938e-01%)
Noelle:     Loop "  %111 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.057946e+01%)
Noelle:     Loop "  %152 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.490507e-01%)
Noelle:     Loop "  %162 = icmp slt i32 %.03.i, %109" (3.162322e-04%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.444012e-05%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.506023e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %230" (2.375291e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.037565e-03%)
Noelle:  Disable loop "50" as cold code
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (8.977412e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.001409e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.976524e-01%)
Noelle:     Loop "  %48 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.335384e+10%)
Noelle:     Loop "  %51 = icmp sgt i64 %spec.select, %indvars.iv18" (3.335384e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.528957e-01%)
Noelle:     Loop "  %86 = icmp sgt i64 %spec.select, %indvars.iv16" (8.505257e-01%)
Noelle:     Loop "  %94 = icmp slt i64 %indvars.iv.i, %92" (8.400228e-01%)
Noelle:     Loop "  %113 = icmp sgt i64 %spec.select, %indvars.iv14" (1.303492e-03%)
Noelle:  Disable loop "59" as cold code
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv, %129" (1.012545e-07%)
Noelle:  Disable loop "60" as cold code
Noelle:  Function "_Z11contcentersP6Points"
Noelle:  Disable "_Z11contcentersP6Points" as cold function
Noelle:  Function "_Z7shuffleP6Points"
Noelle:  Disable "_Z7shuffleP6Points" as cold function
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:  Disable "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t" as cold function
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:  Disable "_Z12outcenterIDsP6PointsPlPc" as cold function
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Disable "_ZN9SimStreamC2El" as cold function
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Disable "_ZN9SimStreamD0Ev" as cold function
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Disable "_ZN7PStreamC2Ev" as cold function
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Disable "_ZN9SimStream4feofEv" as cold function
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Disable "_ZN7PStreamD2Ev" as cold function
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Disable "_ZN9SimStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Disable "_ZN10FileStreamD0Ev" as cold function
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Disable "_ZN10FileStreamD2Ev" as cold function
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Disable "_ZN10FileStream4feofEv" as cold function
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Disable "_ZN10FileStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Disable "_ZN10FileStreamC2EPc" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Disable "_ZN7PStreamD0Ev" as cold function
EnablersManager:   Try to improve all 34 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "_Z11localSearchP6PointsllPl"
EnablersManager:     Entry instruction =   %28 = sext i32 %27 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %28 = sext i32 %27 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %29, label %30, label %45, !prof !35
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %227 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %227 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35"
LICM:     Invariant = "  %230 = tail call double @log(double %221) #3
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %231 = fmul double %230, %220
LICM:       Checking dependences
LICM:         Dependent instruction = "  %230 = tail call double @log(double %221) #3
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %230 = tail call double @log(double %221) #3
LICM:     Invariant = "  %232 = fptosi double %231 to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %231 = fmul double %230, %220
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %231 = fmul double %230, %220
LICM:     Invariant = "  %244 = tail call double @log(double %221) #3
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %245 = fmul double %244, %220
LICM:       Checking dependences
LICM:         Dependent instruction = "  %244 = tail call double @log(double %221) #3
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %244 = tail call double @log(double %221) #3
LICM:     Invariant = "  %246 = fptosi double %245 to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %245 = fmul double %244, %220
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %245 = fmul double %244, %220
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %231 = fmul double %230, %220
LICM:           It can be hoisted
LICM:         Invariant   %232 = fptosi double %231 to i64
LICM:           It can be hoisted
LICM:         Invariant   %245 = fmul double %244, %220
LICM:           It can be hoisted
LICM:         Invariant   %246 = fptosi double %245 to i64
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %152 = icmp sgt i64 %spec.select.i, %indvars.iv36.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %152 = icmp sgt i64 %spec.select.i, %indvars.iv36.i"
LICM:     Invariant = "  %158 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %159 = load i32*, i32** @_ZL12center_table, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %173 = bitcast double* %158 to i8*
LICM:       Checking dependences
LICM:         Dependent instruction = "  %158 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %158 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %173 = bitcast double* %158 to i8*
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %111 = icmp sgt i64 %spec.select.i, %indvars.iv38.i
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %87 = icmp sgt i64 %spec.select.i, %indvars.iv40.i
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %232 = icmp slt i64 %indvars.iv.i.i, %230
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %206 = icmp sgt i64 %spec.select.i, %indvars.iv32.i
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %31 = icmp slt i64 %.01.us, %6
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %18 = fdiv double %.0.us, %.02.us
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %101 = icmp sgt i64 %spec.select, %indvars.iv38
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38"
LICM:     Invariant = "  %115 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !41
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %125 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !41
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %103 = load %struct.Point*, %struct.Point** %98, align 8, !tbaa !52
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %105 = getelementptr inbounds %struct.Point, %struct.Point* %103, i64 %0
LICM:       Checking dependences
LICM:         Dependent instruction = "  %103 = load %struct.Point*, %struct.Point** %98, align 8, !tbaa !52
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %103 = load %struct.Point*, %struct.Point** %98, align 8, !tbaa !52
LICM:     Invariant = "  %106 = load i32, i32* %99, align 8, !tbaa !53
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %105 = getelementptr inbounds %struct.Point, %struct.Point* %103, i64 %0
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z4distRK5PointS1_i"
EnablersManager:     Entry instruction =   %10 = icmp slt i64 %indvars.iv, %8
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %10 = icmp slt i64 %indvars.iv, %8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %10, label %11, label %19, !prof !30
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %120 = sext i32 %119 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %120 = sext i32 %119 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %121, label %122, label %137, !prof !54
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %67 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca %union.pthread_barrier_t, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %67 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47"
LICM:     Invariant = "  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !31
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %71 = getelementptr [16 x i8], [16 x i8]* @.str.7, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %94 = icmp slt i64 %indvars.iv.i, %92
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %94 = icmp slt i64 %indvars.iv.i, %92"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %94, label %95, label %_Z4distRK5PointS1_i.exit, !prof !42
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %86 = icmp sgt i64 %spec.select, %indvars.iv16
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %86 = icmp sgt i64 %spec.select, %indvars.iv16"
LICM:     Invariant = "  %88 = load i32, i32* %17, align 8, !tbaa !41
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %89 = load float*, float** %84, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %92 = sext i32 %88 to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %88 = load i32, i32* %17, align 8, !tbaa !41
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %88 = load i32, i32* %17, align 8, !tbaa !41
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %92 = sext i32 %88 to i64
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
EnablersManager:     The current loop belongs to the function _Z7pspeedyP6PointsfPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %142 = icmp sgt i64 %spec.select, %indvars.iv36
EnablersManager:     The current loop belongs to the function _Z5pgainlP6PointsdPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %38 = icmp sgt i64 %spec.select, %indvars.iv44
EnablersManager:     The current loop belongs to the function _Z5pgainlP6PointsdPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %68 = icmp sgt i64 %spec.select, %indvars.iv40
EnablersManager:     The current loop belongs to the function _Z5pgainlP6PointsdPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %153 = icmp slt i64 %indvars.iv.i.i, %151
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %145 = icmp sgt i64 %spec.select.i, %indvars.iv16.i
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %69 = icmp slt i64 %68, %1
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %225 = icmp slt i64 %indvars.iv.i, %223
EnablersManager:     The current loop belongs to the function _Z5pgainlP6PointsdPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %199 = icmp sgt i64 %spec.select, %indvars.iv32
EnablersManager:     The current loop belongs to the function _Z5pgainlP6PointsdPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %30 = icmp slt i64 %indvars.iv.i1, %28
EnablersManager:     The current loop belongs to the function _Z7pspeedyP6PointsfPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %20 = icmp sgt i64 %spec.select, %indvars.iv20
EnablersManager:     The current loop belongs to the function _Z7pspeedyP6PointsfPliP17pthread_barrier_t , which has already been modified.
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.666229e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.989469e-05%)
Noelle:     Loop "  %67 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.704118e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %69, %indvars.iv" (2.073746e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.700578e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.451255e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.414231e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.666229e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.153802e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.401156e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.007798e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.701100e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.585605e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.635851e-01%)
Noelle:     Loop "  %200 = icmp slt i64 %199, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.285329e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.362646e-03%)
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.000704e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.882621e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.264478e-01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.252628e-01%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %151" (4.200114e-01%)
Noelle:     Loop "  %171 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.517461e-04%)
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv.i, %185" (5.062723e-08%)
Noelle:     Loop "  %213 = icmp sgt i64 %210, %indvars.iv" (2.962471e-04%)
Noelle:     Loop "  %227 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.290442e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.363958e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.502095e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.303939e-01%)
Noelle:     Loop "  %101 = icmp sgt i64 %spec.select, %indvars.iv38" (9.057947e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.490507e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.162322e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.444012e-05%)
Noelle:     Loop "  %199 = icmp sgt i64 %spec.select, %indvars.iv32" (2.506023e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %223" (2.375291e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.037565e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.290449e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.290449e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.285139e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.876824e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.285137e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.363958e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.502095e-05%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.303938e-01%)
Noelle:     Loop "  %111 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.057946e+01%)
Noelle:     Loop "  %152 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.490507e-01%)
Noelle:     Loop "  %162 = icmp slt i32 %.03.i, %109" (3.162322e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.444012e-05%)
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.506023e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %230" (2.375291e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.037565e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (8.977412e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.001409e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.976524e-01%)
Noelle:     Loop "  %48 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.335384e+10%)
Noelle:     Loop "  %51 = icmp sgt i64 %spec.select, %indvars.iv18" (3.335384e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.528957e-01%)
Noelle:     Loop "  %86 = icmp sgt i64 %spec.select, %indvars.iv16" (8.505257e-01%)
Noelle:     Loop "  %94 = icmp slt i64 %indvars.iv.i, %92" (8.400228e-01%)
Noelle:     Loop "  %113 = icmp sgt i64 %spec.select, %indvars.iv14" (1.303492e-03%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv, %129" (1.012545e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.911395e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.828461e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.218454e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.179942e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.043970e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.962471e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.153802e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.258532e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.770214e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.507675e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.585605e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.939410e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.872871e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.874112e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.671938e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.993729e-05%)
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.714150e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.078186e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710602e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.458644e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.421541e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.671938e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.162695e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.421205e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.018521e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.711166e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.591141e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.637710e-01%)
Noelle:     Loop "  %200 = icmp slt i64 %199, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.296645e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.365564e-03%)
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.002847e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.903781e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.273609e-01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.261734e-01%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %151" (4.209107e-01%)
Noelle:     Loop "  %171 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.531415e-04%)
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv.i, %185" (5.073563e-08%)
Noelle:     Loop "  %213 = icmp sgt i64 %210, %indvars.iv" (2.968814e-04%)
Noelle:     Loop "  %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.310329e+01%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.289086e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.289086e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.305015e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.880842e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.305013e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.377584e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.513876e-05%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.315295e-01%)
Noelle:     Loop "  %111 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.077340e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.508127e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.169092e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.459950e-05%)
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.511389e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %230" (2.380377e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.048351e-03%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.377584e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.513876e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.315295e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.056084e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.508686e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.169092e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.459950e-05%)
Noelle:     Loop "  %199 = icmp sgt i64 %spec.select, %indvars.iv32" (2.511389e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %223" (2.380377e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.048351e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (8.996633e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.005694e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.980756e-01%)
Noelle:     Loop "  %48 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.342526e+10%)
Noelle:     Loop "  %51 = icmp sgt i64 %spec.select, %indvars.iv18" (3.342526e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.532078e-01%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select, %indvars.iv16" (8.508327e-01%)
Noelle:     Loop "  %94 = icmp slt i64 %indvars.iv.i, %87" (8.418214e-01%)
Noelle:     Loop "  %113 = icmp sgt i64 %spec.select, %indvars.iv14" (1.306283e-03%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv, %129" (1.014713e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.926193e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.843082e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.227486e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.188891e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.048346e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.968814e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.162695e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.265508e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.776145e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.513045e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.591141e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.949986e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.883304e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.878124e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint:       There are 0 different instructions and -19 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.hHIFfO2nyp -o /tmp/tmp.hHIFfO2nyp
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.hHIFfO2nyp -o /tmp/tmp.hHIFfO2nyp
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.671938e-04%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.993729e-05%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.714150e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.078186e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710602e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.458644e-02%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.421541e-02%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.671938e-04%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.162695e-04%)
Noelle:  Disable loop "8" as cold code
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.421205e+01%)
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.018521e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.711166e-08%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.591141e-07%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.637710e-01%)
Noelle:     Loop "  %200 = icmp slt i64 %199, %1" (0.000000e+00%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.296645e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.365564e-03%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.002847e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.903781e-02%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.273609e-01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.261734e-01%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %151" (4.209107e-01%)
Noelle:     Loop "  %171 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.531415e-04%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv.i, %185" (5.073563e-08%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %213 = icmp sgt i64 %210, %indvars.iv" (2.968814e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.310329e+01%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.289086e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.289086e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.305015e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.880842e-05%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.305013e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.377584e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.513876e-05%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.315295e-01%)
Noelle:     Loop "  %111 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.077340e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.508127e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.169092e-04%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.459950e-05%)
Noelle:  Disable loop "37" as cold code
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.511389e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %230" (2.380377e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.048351e-03%)
Noelle:  Disable loop "40" as cold code
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.377584e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.513876e-05%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.315295e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.056084e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.508686e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.169092e-04%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.459950e-05%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %199 = icmp sgt i64 %spec.select, %indvars.iv32" (2.511389e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %223" (2.380377e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.048351e-03%)
Noelle:  Disable loop "50" as cold code
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (8.996633e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.005694e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.980756e-01%)
Noelle:     Loop "  %48 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.342526e+10%)
Noelle:     Loop "  %51 = icmp sgt i64 %spec.select, %indvars.iv18" (3.342526e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.532078e-01%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select, %indvars.iv16" (8.508327e-01%)
Noelle:     Loop "  %94 = icmp slt i64 %indvars.iv.i, %87" (8.418214e-01%)
Noelle:     Loop "  %113 = icmp sgt i64 %spec.select, %indvars.iv14" (1.306283e-03%)
Noelle:  Disable loop "59" as cold code
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv, %129" (1.014713e-07%)
Noelle:  Disable loop "60" as cold code
Noelle:  Function "_Z11contcentersP6Points"
Noelle:  Disable "_Z11contcentersP6Points" as cold function
Noelle:  Function "_Z7shuffleP6Points"
Noelle:  Disable "_Z7shuffleP6Points" as cold function
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:  Disable "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t" as cold function
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:  Disable "_Z12outcenterIDsP6PointsPlPc" as cold function
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Disable "_ZN9SimStreamC2El" as cold function
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Disable "_ZN9SimStreamD0Ev" as cold function
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Disable "_ZN7PStreamC2Ev" as cold function
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Disable "_ZN9SimStream4feofEv" as cold function
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Disable "_ZN7PStreamD2Ev" as cold function
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Disable "_ZN9SimStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Disable "_ZN10FileStreamD0Ev" as cold function
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Disable "_ZN10FileStreamD2Ev" as cold function
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Disable "_ZN10FileStream4feofEv" as cold function
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Disable "_ZN10FileStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Disable "_ZN10FileStreamC2EPc" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Disable "_ZN7PStreamD0Ev" as cold function
EnablersManager:   Try to improve all 34 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "_Z11localSearchP6PointsllPl"
EnablersManager:     Entry instruction =   %28 = sext i32 %27 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %28 = sext i32 %27 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %29, label %30, label %45, !prof !35
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %or.cond24, label %._crit_edge57.._crit_edge52_crit_edge, label %242, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %111 = icmp sgt i64 %spec.select.i, %indvars.iv38.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %111 = icmp sgt i64 %spec.select.i, %indvars.iv38.i"
LICM:     Invariant = "  %125 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %135 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %113 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !56
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %115 = getelementptr inbounds %struct.Point, %struct.Point* %113, i64 %38
LICM:       Checking dependences
LICM:         Dependent instruction = "  %113 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !56
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %113 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !56
LICM:     Invariant = "  %116 = load i32, i32* %17, align 8, !tbaa !57
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %115 = getelementptr inbounds %struct.Point, %struct.Point* %113, i64 %38
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %87 = icmp sgt i64 %spec.select.i, %indvars.iv40.i
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %232 = icmp slt i64 %indvars.iv.i.i, %230
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %206 = icmp sgt i64 %spec.select.i, %indvars.iv32.i
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %31 = icmp slt i64 %.01.us, %6
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %18 = fdiv double %.0.us, %.02.us
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %106 = icmp sgt i64 %spec.select, %indvars.iv38
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %106, label %107, label %134, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z4distRK5PointS1_i"
EnablersManager:     Entry instruction =   %10 = icmp slt i64 %indvars.iv, %8
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %10 = icmp slt i64 %indvars.iv, %8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %10, label %11, label %19, !prof !30
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %120 = sext i32 %119 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %120 = sext i32 %119 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %121, label %122, label %137, !prof !54
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca %union.pthread_barrier_t, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %77, label %78, label %._crit_edge17.._crit_edge_crit_edge, !prof !51
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %94 = icmp slt i64 %indvars.iv.i, %87
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %94 = icmp slt i64 %indvars.iv.i, %87"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %94, label %95, label %_Z4distRK5PointS1_i.exit, !prof !42
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %89 = icmp sgt i64 %spec.select, %indvars.iv16
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %89 = icmp sgt i64 %spec.select, %indvars.iv16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %89, label %90, label %._crit_edge26.loopexit, !prof !53
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37"
LICM:     Invariant = "  %74 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %68 = load i64, i64* %6, align 8, !tbaa !30
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %85 = load i32, i32* %17, align 8, !tbaa !41
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %87 = sext i32 %85 to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %85 = load i32, i32* %17, align 8, !tbaa !41
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %85 = load i32, i32* %17, align 8, !tbaa !41
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %87 = sext i32 %85 to i64
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %142 = icmp sgt i64 %spec.select, %indvars.iv36
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36"
LICM:     Invariant = "  %148 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %149 = load i32*, i32** @_ZL12center_table, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %163 = bitcast double* %148 to i8*
LICM:       Checking dependences
LICM:         Dependent instruction = "  %148 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %148 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %163 = bitcast double* %148 to i8*
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %38 = icmp sgt i64 %spec.select, %indvars.iv44
EnablersManager:     The current loop belongs to the function _Z5pgainlP6PointsdPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %68 = icmp sgt i64 %spec.select, %indvars.iv40
EnablersManager:     The current loop belongs to the function _Z5pgainlP6PointsdPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %153 = icmp slt i64 %indvars.iv.i.i, %151
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %151"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %153, label %154, label %_Z4distRK5PointS1_i.exit.i, !prof !61
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %145 = icmp sgt i64 %spec.select.i, %indvars.iv16.i
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %145 = icmp sgt i64 %spec.select.i, %indvars.iv16.i"
LICM:     Invariant = "  %147 = load i32, i32* %14, align 8, !tbaa !37
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %148 = load float*, float** %143, align 8
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %151 = sext i32 %147 to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %147 = load i32, i32* %14, align 8, !tbaa !37
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %147 = load i32, i32* %14, align 8, !tbaa !37
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %151 = sext i32 %147 to i64
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %69 = icmp slt i64 %68, %1
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %225 = icmp slt i64 %indvars.iv.i, %223
EnablersManager:     The current loop belongs to the function _Z5pgainlP6PointsdPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %199 = icmp sgt i64 %spec.select, %indvars.iv32
EnablersManager:     The current loop belongs to the function _Z5pgainlP6PointsdPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %30 = icmp slt i64 %indvars.iv.i1, %28
EnablersManager:     The current loop belongs to the function _Z7pspeedyP6PointsfPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %20 = icmp sgt i64 %spec.select, %indvars.iv20
EnablersManager:     The current loop belongs to the function _Z7pspeedyP6PointsfPliP17pthread_barrier_t , which has already been modified.
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.671938e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.993729e-05%)
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.714150e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.078186e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710602e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.458644e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.421541e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.671938e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.162695e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.421205e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.018521e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.711166e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.591141e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.637710e-01%)
Noelle:     Loop "  %200 = icmp slt i64 %199, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.296645e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.365564e-03%)
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.002847e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.903781e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.273609e-01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.261734e-01%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %151" (4.209107e-01%)
Noelle:     Loop "  %171 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.531415e-04%)
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv.i, %185" (5.073563e-08%)
Noelle:     Loop "  %213 = icmp sgt i64 %210, %indvars.iv" (2.968814e-04%)
Noelle:     Loop "  %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.310329e+01%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.289086e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.289086e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.305015e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.880842e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.305013e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.377584e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.513876e-05%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.315295e-01%)
Noelle:     Loop "  %111 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.077340e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.508127e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.169092e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.459950e-05%)
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.511389e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %230" (2.380377e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.048351e-03%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.377584e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.513876e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.315295e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.056084e+01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select, %indvars.iv36" (8.508686e-01%)
Noelle:     Loop "  %152 = icmp slt i32 %.03, %97" (3.169092e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.459950e-05%)
Noelle:     Loop "  %199 = icmp sgt i64 %spec.select, %indvars.iv32" (2.511389e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %223" (2.380377e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.048351e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (8.996633e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.005694e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.980756e-01%)
Noelle:     Loop "  %48 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.342526e+10%)
Noelle:     Loop "  %51 = icmp sgt i64 %spec.select, %indvars.iv18" (3.342526e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.532078e-01%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select, %indvars.iv16" (8.508327e-01%)
Noelle:     Loop "  %94 = icmp slt i64 %indvars.iv.i, %87" (8.418214e-01%)
Noelle:     Loop "  %113 = icmp sgt i64 %spec.select, %indvars.iv14" (1.306283e-03%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv, %129" (1.014713e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.926193e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.843082e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.227486e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.188891e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.048346e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.968814e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.162695e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.265508e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.776145e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.513045e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.591141e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.949986e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.883304e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.878124e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677657e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.997997e-05%)
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713547e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082634e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.709991e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466048e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.428864e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677657e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171605e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.419982e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029262e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721250e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596687e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.642761e-01%)
Noelle:     Loop "  %200 = icmp slt i64 %199, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.300396e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368487e-03%)
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.004994e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.924979e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.275170e-01%)
Noelle:     Loop "  %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.263269e-01%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %146" (4.218116e-01%)
Noelle:     Loop "  %171 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545395e-04%)
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv.i, %185" (5.084423e-08%)
Noelle:     Loop "  %213 = icmp sgt i64 %210, %indvars.iv" (2.975168e-04%)
Noelle:     Loop "  %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.308957e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391235e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525678e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326672e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075468e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526338e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.175876e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.475917e-05%)
Noelle:     Loop "  %199 = icmp sgt i64 %spec.select, %indvars.iv32" (2.516764e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %223" (2.385472e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059157e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.308964e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.308964e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303632e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884868e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303630e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391234e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525678e-05%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326672e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075468e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526338e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.175876e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.475917e-05%)
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.516764e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %230" (2.385472e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059157e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.015890e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.009987e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.984996e-01%)
Noelle:     Loop "  %52 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349680e+10%)
Noelle:     Loop "  %55 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349680e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.547960e-01%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select, %indvars.iv16" (8.526538e-01%)
Noelle:     Loop "  %94 = icmp slt i64 %indvars.iv.i, %51" (8.436232e-01%)
Noelle:     Loop "  %113 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309079e-03%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv, %129" (1.016885e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.941018e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.857729e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.236534e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.197857e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.052730e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.975168e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.171605e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.272498e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.782087e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.518424e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.596687e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.960581e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.893757e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.882144e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint:       There are 0 different instructions and -15 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.hHIFfO2nyp -o /tmp/tmp.hHIFfO2nyp
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.hHIFfO2nyp -o /tmp/tmp.hHIFfO2nyp
NOELLE: FixedPoint:     Invocation 2
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677657e-04%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.997997e-05%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713547e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082634e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.709991e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466048e-02%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.428864e-02%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677657e-04%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171605e-04%)
Noelle:  Disable loop "8" as cold code
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.419982e+01%)
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029262e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721250e-08%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596687e-07%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.642761e-01%)
Noelle:     Loop "  %200 = icmp slt i64 %199, %1" (0.000000e+00%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.300396e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368487e-03%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.004994e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.924979e-02%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.275170e-01%)
Noelle:     Loop "  %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.263269e-01%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %146" (4.218116e-01%)
Noelle:     Loop "  %171 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545395e-04%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv.i, %185" (5.084423e-08%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %213 = icmp sgt i64 %210, %indvars.iv" (2.975168e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.308957e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391235e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525678e-05%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326672e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075468e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526338e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.175876e-04%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.475917e-05%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %199 = icmp sgt i64 %spec.select, %indvars.iv32" (2.516764e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %223" (2.385472e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059157e-03%)
Noelle:  Disable loop "35" as cold code
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.308964e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.308964e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303632e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884868e-05%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303630e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391234e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525678e-05%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326672e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075468e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526338e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.175876e-04%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.475917e-05%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.516764e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %230" (2.385472e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059157e-03%)
Noelle:  Disable loop "50" as cold code
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.015890e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.009987e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.984996e-01%)
Noelle:     Loop "  %52 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349680e+10%)
Noelle:     Loop "  %55 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349680e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.547960e-01%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select, %indvars.iv16" (8.526538e-01%)
Noelle:     Loop "  %94 = icmp slt i64 %indvars.iv.i, %51" (8.436232e-01%)
Noelle:     Loop "  %113 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309079e-03%)
Noelle:  Disable loop "59" as cold code
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv, %129" (1.016885e-07%)
Noelle:  Disable loop "60" as cold code
Noelle:  Function "_Z11contcentersP6Points"
Noelle:  Disable "_Z11contcentersP6Points" as cold function
Noelle:  Function "_Z7shuffleP6Points"
Noelle:  Disable "_Z7shuffleP6Points" as cold function
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:  Disable "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t" as cold function
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:  Disable "_Z12outcenterIDsP6PointsPlPc" as cold function
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Disable "_ZN9SimStreamC2El" as cold function
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Disable "_ZN9SimStreamD0Ev" as cold function
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Disable "_ZN7PStreamC2Ev" as cold function
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Disable "_ZN9SimStream4feofEv" as cold function
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Disable "_ZN7PStreamD2Ev" as cold function
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Disable "_ZN9SimStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Disable "_ZN10FileStreamD0Ev" as cold function
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Disable "_ZN10FileStreamD2Ev" as cold function
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Disable "_ZN10FileStream4feofEv" as cold function
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Disable "_ZN10FileStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Disable "_ZN10FileStreamC2EPc" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Disable "_ZN7PStreamD0Ev" as cold function
EnablersManager:   Try to improve all 34 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "_Z11localSearchP6PointsllPl"
EnablersManager:     Entry instruction =   %28 = sext i32 %27 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %28 = sext i32 %27 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %29, label %30, label %45, !prof !35
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %or.cond24, label %._crit_edge57.._crit_edge52_crit_edge, label %242, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %61, label %62, label %69, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %116, label %117, label %144, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %155, label %156, label %181, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %232 = icmp slt i64 %indvars.iv.i.i, %230
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %230"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %232, label %233, label %_Z4distRK5PointS1_i.exit.i, !prof !69
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %206 = icmp sgt i64 %spec.select.i, %indvars.iv32.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %206 = icmp sgt i64 %spec.select.i, %indvars.iv32.i"
LICM:     Invariant = "  %208 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !45
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %209 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !56
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %218 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !45
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %225 = load i32, i32* %17, align 8, !tbaa !57
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %228 = getelementptr inbounds %struct.Point, %struct.Point* %209, i64 %38, i32 1
LICM:       Checking dependences
LICM:         Dependent instruction = "  %209 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !56
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %209 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !56
LICM:     Invariant = "  %229 = load float*, float** %228, align 8
LICM:       Checking dependences
LICM:         Dependent instruction = "  %228 = getelementptr inbounds %struct.Point, %struct.Point* %209, i64 %38, i32 1
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %228 = getelementptr inbounds %struct.Point, %struct.Point* %209, i64 %38, i32 1
LICM:     Invariant = "  %230 = sext i32 %225 to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %225 = load i32, i32* %17, align 8, !tbaa !57
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %225 = load i32, i32* %17, align 8, !tbaa !57
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %228 = getelementptr inbounds %struct.Point, %struct.Point* %209, i64 %38, i32 1
LICM:           It can be hoisted
LICM:         Invariant   %229 = load float*, float** %228, align 8
LICM:           It can be hoisted
LICM:         Invariant   %230 = sext i32 %225 to i64
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %87 = icmp sgt i64 %spec.select.i, %indvars.iv40.i
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %31 = icmp slt i64 %.01.us, %6
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %18 = fdiv double %.0.us, %.02.us
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %106 = icmp sgt i64 %spec.select, %indvars.iv38
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %106, label %107, label %134, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z4distRK5PointS1_i"
EnablersManager:     Entry instruction =   %10 = icmp slt i64 %indvars.iv, %8
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %10 = icmp slt i64 %indvars.iv, %8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %10, label %11, label %19, !prof !30
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %120 = sext i32 %119 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %120 = sext i32 %119 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %121, label %122, label %137, !prof !54
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca %union.pthread_barrier_t, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %77, label %78, label %._crit_edge17.._crit_edge_crit_edge, !prof !51
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %94 = icmp slt i64 %indvars.iv.i, %51
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %94 = icmp slt i64 %indvars.iv.i, %51"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %94, label %95, label %_Z4distRK5PointS1_i.exit, !prof !42
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %89 = icmp sgt i64 %spec.select, %indvars.iv16
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %89 = icmp sgt i64 %spec.select, %indvars.iv16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %89, label %90, label %._crit_edge26.loopexit, !prof !53
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %72, label %73, label %.loopexit7.loopexit, !prof !51
Mem2Reg:   The loop has 2SCCs that each one access the same memory location
Mem2Reg:     Loop invariant memory location: @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i = internal unnamed_addr global i32 0, align 4
Mem2Reg:     SCC:
Internal nodes: 7
	  %111 = add nsw i32 %77, 1
	  %storemerge = phi i32 [ 1, %._crit_edge ], [ %111, %._crit_edge26 ]
	  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
	  %71 = sext i32 %storemerge to i64
	  %72 = icmp sgt i64 %48, %71
	  br i1 %72, label %73, label %.loopexit7.loopexit, !prof !51
	  %77 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
External nodes: 10
	  br label %70
	  %74 = tail call i64 @lrand48() #3
	  %75 = sitofp i64 %74 to float
	  %76 = fmul float %75, 0x3E00000000000000
	  %78 = sext i32 %77 to i64
	  %79 = getelementptr inbounds %struct.Point, %struct.Point* %49, i64 %78, i32 3
	  %80 = load float, float* %79, align 8, !tbaa !47
	  %81 = fdiv float %80, %1
	  %82 = fcmp olt float %76, %81
	  br i1 %82, label %83, label %.._crit_edge26_crit_edge, !prof !52
Edges: 26

Mem2Reg:  Collecting and ordering memory loads/stores by basic block
Mem2Reg: Iterating basic blocks to determine last stored values
Mem2Reg: placeholder PHI required: label %71
Mem2Reg:  checking for last value entering block: label %71
Mem2Reg:  Last value entering block: label %71	  %72 = phi i32 
Mem2Reg:  Value updated:   %storemerge = phi i32 [ 1, %._crit_edge ], [ %113, %._crit_edge26 ]
Mem2Reg:  checking for last value entering block: label %75
Mem2Reg:  Last value entering block: label %75	  %storemerge = phi i32 [ 1, %._crit_edge ], [ %113, %._crit_edge26 ]
Mem2Reg:  checking for last value entering block: label %85
Mem2Reg:  Last value entering block: label %85	  %storemerge = phi i32 [ 1, %._crit_edge ], [ %113, %._crit_edge26 ]
Mem2Reg:  checking for last value entering block: label %.._crit_edge26_crit_edge
Mem2Reg:  Last value entering block: label %.._crit_edge26_crit_edge	  %storemerge = phi i32 [ 1, %._crit_edge ], [ %113, %._crit_edge26 ]
Mem2Reg: placeholder PHI required: label %90
Mem2Reg:  checking for last value entering block: label %90
Mem2Reg:  Last value entering block: label %90	  %91 = phi i32 
Mem2Reg: placeholder PHI required: label %._crit_edge26
Mem2Reg:  checking for last value entering block: label %._crit_edge26
Mem2Reg:  Last value entering block: label %._crit_edge26	  %114 = phi i32 
Mem2Reg:  checking for last value entering block: label %93
Mem2Reg:  Last value entering block: label %93	  %91 = phi i32 
Mem2Reg:  checking for last value entering block: label %._crit_edge26.loopexit
Mem2Reg:  Last value entering block: label %._crit_edge26.loopexit	  %91 = phi i32 
Mem2Reg: placeholder PHI required: label %96
Mem2Reg:  checking for last value entering block: label %96
Mem2Reg:  Last value entering block: label %96	  %97 = phi i32 
Mem2Reg:  checking for last value entering block: label %99
Mem2Reg:  Last value entering block: label %99	  %97 = phi i32 
Mem2Reg:  checking for last value entering block: label %_Z4distRK5PointS1_i.exit
Mem2Reg:  Last value entering block: label %_Z4distRK5PointS1_i.exit	  %97 = phi i32 
Mem2Reg:  checking for last value entering block: label %113
Mem2Reg:  Last value entering block: label %113	  %97 = phi i32 
Mem2Reg:  checking for last value entering block: label %_Z4distRK5PointS1_i.exit.._crit_edge27_crit_edge
Mem2Reg:  Last value entering block: label %_Z4distRK5PointS1_i.exit.._crit_edge27_crit_edge	  %97 = phi i32 
Mem2Reg:  checking for last value entering block: label %._crit_edge27
Mem2Reg:  Last value entering block: label %._crit_edge27	  %115 = phi i32 [ %97, %_Z4distRK5PointS1_i.exit.._crit_edge27_crit_edge ], [ %97, %113 ]
Mem2Reg:  Removing
  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
Mem2Reg:  Removing
  %79 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37
Mem2Reg:       The memory location has been promoted
Mem2Reg: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %145 = icmp sgt i64 %spec.select, %indvars.iv36
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %145, label %146, label %171, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %38 = icmp sgt i64 %spec.select, %indvars.iv44
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %38, label %39, label %46, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %68 = icmp sgt i64 %spec.select, %indvars.iv40
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40"
LICM:     Invariant = "  %74 = load double, double* %51, align 8, !tbaa !42
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %75 = fptosi double %74 to i32
LICM:       Checking dependences
LICM:         Dependent instruction = "  %74 = load double, double* %51, align 8, !tbaa !42
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %74 = load double, double* %51, align 8, !tbaa !42
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %75 = fptosi double %74 to i32
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %153 = icmp slt i64 %indvars.iv.i.i, %146
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %146"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %153, label %154, label %_Z4distRK5PointS1_i.exit.i, !prof !61
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %148, label %149, label %._crit_edge26.i.loopexit, !prof !64
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30"
LICM:     Invariant = "  %133 = load %struct.Point*, %struct.Point** %23, align 8, !tbaa !42
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %127 = load i64, i64* %13, align 8, !tbaa !40
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %144 = load i32, i32* %14, align 8, !tbaa !37
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %146 = sext i32 %144 to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %144 = load i32, i32* %14, align 8, !tbaa !37
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %144 = load i32, i32* %14, align 8, !tbaa !37
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %146 = sext i32 %144 to i64
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %69 = icmp slt i64 %68, %1
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %225 = icmp slt i64 %indvars.iv.i, %223
EnablersManager:     The current loop belongs to the function _Z5pgainlP6PointsdPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %199 = icmp sgt i64 %spec.select, %indvars.iv32
EnablersManager:     The current loop belongs to the function _Z5pgainlP6PointsdPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %30 = icmp slt i64 %indvars.iv.i1, %28
EnablersManager:     The current loop belongs to the function _Z7pspeedyP6PointsfPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %20 = icmp sgt i64 %spec.select, %indvars.iv20
EnablersManager:     The current loop belongs to the function _Z7pspeedyP6PointsfPliP17pthread_barrier_t , which has already been modified.
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677657e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.997997e-05%)
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713547e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082634e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.709991e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466048e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.428864e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677657e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171605e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.419982e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029262e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721250e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596687e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.642761e-01%)
Noelle:     Loop "  %200 = icmp slt i64 %199, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.300396e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368487e-03%)
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.004994e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.924979e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.275170e-01%)
Noelle:     Loop "  %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.263269e-01%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %146" (4.218116e-01%)
Noelle:     Loop "  %171 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545395e-04%)
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv.i, %185" (5.084423e-08%)
Noelle:     Loop "  %213 = icmp sgt i64 %210, %indvars.iv" (2.975168e-04%)
Noelle:     Loop "  %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.308957e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391235e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525678e-05%)
Noelle:     Loop "  %68 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326672e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075468e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526338e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.175876e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.475917e-05%)
Noelle:     Loop "  %199 = icmp sgt i64 %spec.select, %indvars.iv32" (2.516764e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %223" (2.385472e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059157e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.308964e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.308964e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303632e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884868e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303630e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391234e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525678e-05%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326672e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075468e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526338e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.175876e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.475917e-05%)
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.516764e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %230" (2.385472e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059157e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.015890e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.009987e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.984996e-01%)
Noelle:     Loop "  %52 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349680e+10%)
Noelle:     Loop "  %55 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349680e+10%)
Noelle:     Loop "  store i32 %storemerge, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (8.547960e-01%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select, %indvars.iv16" (8.526538e-01%)
Noelle:     Loop "  %94 = icmp slt i64 %indvars.iv.i, %51" (8.436232e-01%)
Noelle:     Loop "  %113 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309079e-03%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv, %129" (1.016885e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.941018e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.857729e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.236534e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.197857e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.052730e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.975168e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.171605e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.272498e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.782087e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.518424e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.596687e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.960581e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.893757e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.882144e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.674214e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.995427e-05%)
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.710646e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.079956e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.707095e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.461591e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.424455e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.674214e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.166241e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.414190e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.022795e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.715179e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.593348e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.966427e-01%)
Noelle:     Loop "  %200 = icmp slt i64 %199, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.292392e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.366727e-03%)
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.003701e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.912217e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.268484e-01%)
Noelle:     Loop "  %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.257787e-01%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %128" (4.212692e-01%)
Noelle:     Loop "  %171 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.536979e-04%)
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv.i, %185" (5.077885e-08%)
Noelle:     Loop "  %213 = icmp sgt i64 %210, %indvars.iv" (2.971342e-04%)
Noelle:     Loop "  %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.296778e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.383016e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.518573e-05%)
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.319449e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.063798e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.515374e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.171792e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.466304e-05%)
Noelle:     Loop "  %199 = icmp sgt i64 %spec.select, %indvars.iv32" (2.513528e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %223" (2.382405e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.052651e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.296990e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.296990e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.291459e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.882444e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.291458e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.383016e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.518573e-05%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.319822e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.063798e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.515374e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.171792e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.466304e-05%)
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.492661e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.382405e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.052651e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.004297e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.007402e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.982443e-01%)
Noelle:     Loop "  %53 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.345373e+10%)
Noelle:     Loop "  %56 = icmp sgt i64 %spec.select, %indvars.iv18" (3.345373e+10%)
Noelle:     Loop "  %73 = sext i32 %storemerge to i64" (9.845227e-01%)
Noelle:     Loop "  %91 = icmp sgt i64 %spec.select, %indvars.iv16" (9.823833e-01%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv.i, %51" (9.723540e-01%)
Noelle:     Loop "  %119 = icmp sgt i64 %spec.select, %indvars.iv14" (1.307396e-03%)
Noelle:     Loop "  %138 = icmp slt i64 %indvars.iv, %135" (1.015577e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.932092e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.848911e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.231087e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.192459e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.050091e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.971342e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.166241e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.268290e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.778510e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.515185e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.593348e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.954202e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.887464e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.879724e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint:       There are 0 different instructions and -15 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.hHIFfO2nyp -o /tmp/tmp.hHIFfO2nyp
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.hHIFfO2nyp -o /tmp/tmp.hHIFfO2nyp
NOELLE: FixedPoint:     Invocation 3
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677702e-04%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.998031e-05%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713530e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082670e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.709974e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466107e-02%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.428923e-02%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677702e-04%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171677e-04%)
Noelle:  Disable loop "8" as cold code
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.419949e+01%)
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029348e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721330e-08%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596732e-07%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.644145e-01%)
Noelle:     Loop "  %200 = icmp slt i64 %199, %1" (0.000000e+00%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.299296e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368510e-03%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.005011e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.925148e-02%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.274053e-01%)
Noelle:     Loop "  %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.263342e-01%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %128" (4.218188e-01%)
Noelle:     Loop "  %171 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545507e-04%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv.i, %185" (5.084509e-08%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %213 = icmp sgt i64 %210, %indvars.iv" (2.975219e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.308907e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391343e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525772e-05%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326389e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075623e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526483e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.175930e-04%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.476045e-05%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %199 = icmp sgt i64 %spec.select, %indvars.iv32" (2.516807e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %223" (2.385513e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059243e-03%)
Noelle:  Disable loop "35" as cold code
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.309119e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.309119e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303581e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884900e-05%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303579e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391343e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525772e-05%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326762e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075622e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526483e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.175930e-04%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.476045e-05%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.495913e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.385513e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059243e-03%)
Noelle:  Disable loop "50" as cold code
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.016044e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.010021e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.985030e-01%)
Noelle:     Loop "  %52 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349737e+10%)
Noelle:     Loop "  %55 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349737e+10%)
Noelle:     Loop "  %71 = icmp sgt i64 %48, %indvars.iv2" (8.553462e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.536799e-01%)
Noelle:     Loop "  %93 = icmp slt i64 %indvars.iv.i, %51" (8.436376e-01%)
Noelle:     Loop "  %113 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309101e-03%)
Noelle:  Disable loop "59" as cold code
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv, %129" (1.016902e-07%)
Noelle:  Disable loop "60" as cold code
Noelle:  Function "_Z11contcentersP6Points"
Noelle:  Disable "_Z11contcentersP6Points" as cold function
Noelle:  Function "_Z7shuffleP6Points"
Noelle:  Disable "_Z7shuffleP6Points" as cold function
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:  Disable "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t" as cold function
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:  Disable "_Z12outcenterIDsP6PointsPlPc" as cold function
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Disable "_ZN9SimStreamC2El" as cold function
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Disable "_ZN9SimStreamD0Ev" as cold function
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Disable "_ZN7PStreamC2Ev" as cold function
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Disable "_ZN9SimStream4feofEv" as cold function
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Disable "_ZN7PStreamD2Ev" as cold function
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Disable "_ZN9SimStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Disable "_ZN10FileStreamD0Ev" as cold function
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Disable "_ZN10FileStreamD2Ev" as cold function
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Disable "_ZN10FileStream4feofEv" as cold function
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Disable "_ZN10FileStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Disable "_ZN10FileStreamC2EPc" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Disable "_ZN7PStreamD0Ev" as cold function
EnablersManager:   Try to improve all 34 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "_Z11localSearchP6PointsllPl"
EnablersManager:     Entry instruction =   %28 = sext i32 %27 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %28 = sext i32 %27 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %29, label %30, label %45, !prof !35
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %or.cond24, label %._crit_edge57.._crit_edge52_crit_edge, label %242, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %61, label %62, label %69, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %116, label %117, label %144, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %155, label %156, label %181, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %232 = icmp slt i64 %indvars.iv.i.i, %212
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %232, label %233, label %_Z4distRK5PointS1_i.exit.i, !prof !69
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %213, label %214, label %243, !prof !67
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %87 = icmp sgt i64 %spec.select.i, %indvars.iv40.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %87 = icmp sgt i64 %spec.select.i, %indvars.iv40.i"
LICM:     Invariant = "  %93 = load double, double* %70, align 8, !tbaa !46
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %94 = fptosi double %93 to i32
LICM:       Checking dependences
LICM:         Dependent instruction = "  %93 = load double, double* %70, align 8, !tbaa !46
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %93 = load double, double* %70, align 8, !tbaa !46
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %94 = fptosi double %93 to i32
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %31 = icmp slt i64 %.01.us, %6
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %18 = fdiv double %.0.us, %.02.us
EnablersManager:     The current loop belongs to the function _Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %106 = icmp sgt i64 %spec.select, %indvars.iv38
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %106, label %107, label %134, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z4distRK5PointS1_i"
EnablersManager:     Entry instruction =   %10 = icmp slt i64 %indvars.iv, %8
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %10 = icmp slt i64 %indvars.iv, %8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %10, label %11, label %19, !prof !30
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %120 = sext i32 %119 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %120 = sext i32 %119 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %121, label %122, label %137, !prof !54
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca %union.pthread_barrier_t, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %77, label %78, label %._crit_edge17.._crit_edge_crit_edge, !prof !51
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %93 = icmp slt i64 %indvars.iv.i, %51
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %93 = icmp slt i64 %indvars.iv.i, %51"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %93, label %94, label %_Z4distRK5PointS1_i.exit, !prof !42
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %88 = icmp sgt i64 %spec.select, %indvars.iv16
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %88, label %89, label %._crit_edge26.loopexit, !prof !53
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
SCEVSimplification: Removing loop entry PHI (part of PHI-only propagation):   %87 = phi i32 [ %110, %._crit_edge27 ], [ %85, %80 ]
SCEVSimplification: 	Removing PHI (part of PHI-only propagation):   %110 = phi i32 [ %87, %_Z4distRK5PointS1_i.exit.._crit_edge27_crit_edge ], [ %87, %108 ]
SCEVSimplification: 	Removing PHI (part of PHI-only propagation):   %87 = phi i32 [ %110, %._crit_edge27 ], [ %85, %80 ]
EnablersManager:       Loop constant PHIs have been simplified
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %71 = icmp sgt i64 %48, %indvars.iv2
EnablersManager:     The current loop belongs to the function _Z7pspeedyP6PointsfPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %145 = icmp sgt i64 %spec.select, %indvars.iv36
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %145, label %146, label %171, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %38 = icmp sgt i64 %spec.select, %indvars.iv44
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %38, label %39, label %46, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %70 = icmp sgt i64 %spec.select, %indvars.iv40
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %70, label %71, label %79, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %153 = icmp slt i64 %indvars.iv.i.i, %128
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %128"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %153, label %154, label %_Z4distRK5PointS1_i.exit.i, !prof !61
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %148, label %149, label %._crit_edge26.i.loopexit, !prof !64
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %131, label %132, label %.loopexit7.loopexit.i.preheader, !prof !62
Mem2Reg:   The loop has 2SCCs that each one access the same memory location
Mem2Reg:     Loop invariant memory location: @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i = internal unnamed_addr global i32 0, align 4
Mem2Reg:     SCC:
Internal nodes: 7
	  %storemerge.i = phi i32 [ 1, %118 ], [ %170, %._crit_edge26.i ]
	  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30
	  %130 = sext i32 %storemerge.i to i64
	  %131 = icmp sgt i64 %125, %130
	  br i1 %131, label %132, label %.loopexit7.loopexit.i.preheader, !prof !62
	  %136 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30
	  %170 = add nsw i32 %136, 1
External nodes: 10
	  %133 = tail call i64 @lrand48() #3
	  %134 = sitofp i64 %133 to float
	  %135 = fmul float %134, 0x3E00000000000000
	  %137 = sext i32 %136 to i64
	  %138 = getelementptr inbounds %struct.Point, %struct.Point* %126, i64 %137, i32 3
	  %139 = load float, float* %138, align 8, !tbaa !52
	  %140 = fdiv float %139, %122
	  %141 = fcmp olt float %135, %140
	  br i1 %141, label %142, label %.._crit_edge26.i_crit_edge, !prof !63
	  br label %129
Edges: 26

Mem2Reg:  Collecting and ordering memory loads/stores by basic block
Mem2Reg: Iterating basic blocks to determine last stored values
Mem2Reg: placeholder PHI required: label %130
Mem2Reg:  checking for last value entering block: label %130
Mem2Reg:  Last value entering block: label %130	  %131 = phi i32 
Mem2Reg:  Value updated:   %storemerge.i = phi i32 [ 1, %118 ], [ %172, %._crit_edge26.i ]
Mem2Reg:  checking for last value entering block: label %134
Mem2Reg:  Last value entering block: label %134	  %storemerge.i = phi i32 [ 1, %118 ], [ %172, %._crit_edge26.i ]
Mem2Reg:  checking for last value entering block: label %144
Mem2Reg:  Last value entering block: label %144	  %storemerge.i = phi i32 [ 1, %118 ], [ %172, %._crit_edge26.i ]
Mem2Reg:  checking for last value entering block: label %.._crit_edge26.i_crit_edge
Mem2Reg:  Last value entering block: label %.._crit_edge26.i_crit_edge	  %storemerge.i = phi i32 [ 1, %118 ], [ %172, %._crit_edge26.i ]
Mem2Reg: placeholder PHI required: label %149
Mem2Reg:  checking for last value entering block: label %149
Mem2Reg:  Last value entering block: label %149	  %150 = phi i32 
Mem2Reg: placeholder PHI required: label %._crit_edge26.i
Mem2Reg:  checking for last value entering block: label %._crit_edge26.i
Mem2Reg:  Last value entering block: label %._crit_edge26.i	  %173 = phi i32 
Mem2Reg:  checking for last value entering block: label %152
Mem2Reg:  Last value entering block: label %152	  %150 = phi i32 
Mem2Reg:  checking for last value entering block: label %._crit_edge26.i.loopexit
Mem2Reg:  Last value entering block: label %._crit_edge26.i.loopexit	  %150 = phi i32 
Mem2Reg: placeholder PHI required: label %155
Mem2Reg:  checking for last value entering block: label %155
Mem2Reg:  Last value entering block: label %155	  %156 = phi i32 
Mem2Reg:  checking for last value entering block: label %158
Mem2Reg:  Last value entering block: label %158	  %156 = phi i32 
Mem2Reg:  checking for last value entering block: label %_Z4distRK5PointS1_i.exit.i
Mem2Reg:  Last value entering block: label %_Z4distRK5PointS1_i.exit.i	  %156 = phi i32 
Mem2Reg:  checking for last value entering block: label %172
Mem2Reg:  Last value entering block: label %172	  %156 = phi i32 
Mem2Reg:  checking for last value entering block: label %_Z4distRK5PointS1_i.exit.i.._crit_edge27.i_crit_edge
Mem2Reg:  Last value entering block: label %_Z4distRK5PointS1_i.exit.i.._crit_edge27.i_crit_edge	  %156 = phi i32 
Mem2Reg:  checking for last value entering block: label %._crit_edge27.i
Mem2Reg:  Last value entering block: label %._crit_edge27.i	  %174 = phi i32 [ %156, %_Z4distRK5PointS1_i.exit.i.._crit_edge27.i_crit_edge ], [ %156, %172 ]
Mem2Reg:  Removing
  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30
Mem2Reg:  Removing
  %138 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30
Mem2Reg:       The memory location has been promoted
Mem2Reg: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %69 = icmp slt i64 %68, %1
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %225 = icmp slt i64 %indvars.iv.i, %223
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %225 = icmp slt i64 %indvars.iv.i, %223"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %225, label %226, label %_Z4distRK5PointS1_i.exit, !prof !65
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %199 = icmp sgt i64 %spec.select, %indvars.iv32
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %199 = icmp sgt i64 %spec.select, %indvars.iv32"
LICM:     Invariant = "  %201 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !41
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %202 = load %struct.Point*, %struct.Point** %98, align 8, !tbaa !52
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %211 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !41
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %218 = load i32, i32* %99, align 8, !tbaa !53
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %221 = getelementptr inbounds %struct.Point, %struct.Point* %202, i64 %0, i32 1
LICM:       Checking dependences
LICM:         Dependent instruction = "  %202 = load %struct.Point*, %struct.Point** %98, align 8, !tbaa !52
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %202 = load %struct.Point*, %struct.Point** %98, align 8, !tbaa !52
LICM:     Invariant = "  %222 = load float*, float** %221, align 8
LICM:       Checking dependences
LICM:         Dependent instruction = "  %221 = getelementptr inbounds %struct.Point, %struct.Point* %202, i64 %0, i32 1
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %221 = getelementptr inbounds %struct.Point, %struct.Point* %202, i64 %0, i32 1
LICM:     Invariant = "  %223 = sext i32 %218 to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %218 = load i32, i32* %99, align 8, !tbaa !53
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %218 = load i32, i32* %99, align 8, !tbaa !53
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %221 = getelementptr inbounds %struct.Point, %struct.Point* %202, i64 %0, i32 1
LICM:           It can be hoisted
LICM:         Invariant   %222 = load float*, float** %221, align 8
LICM:           It can be hoisted
LICM:         Invariant   %223 = sext i32 %218 to i64
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %30 = icmp slt i64 %indvars.iv.i1, %28
EnablersManager:     The current loop belongs to the function _Z7pspeedyP6PointsfPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %20 = icmp sgt i64 %spec.select, %indvars.iv20
EnablersManager:     The current loop belongs to the function _Z7pspeedyP6PointsfPliP17pthread_barrier_t , which has already been modified.
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677702e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.998031e-05%)
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713530e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082670e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.709974e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466107e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.428923e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677702e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171677e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.419949e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029348e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721330e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596732e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.644145e-01%)
Noelle:     Loop "  %200 = icmp slt i64 %199, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.299296e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368510e-03%)
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.005011e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.925148e-02%)
Noelle:     Loop "  store i32 %storemerge.i, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !30" (4.274053e-01%)
Noelle:     Loop "  %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.263342e-01%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %128" (4.218188e-01%)
Noelle:     Loop "  %171 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545507e-04%)
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv.i, %185" (5.084509e-08%)
Noelle:     Loop "  %213 = icmp sgt i64 %210, %indvars.iv" (2.975219e-04%)
Noelle:     Loop "  %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.308907e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391343e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525772e-05%)
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326389e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075623e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526483e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.175930e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.476045e-05%)
Noelle:     Loop "  %199 = icmp sgt i64 %spec.select, %indvars.iv32" (2.516807e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %223" (2.385513e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059243e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.309119e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.309119e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303581e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884900e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303579e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391343e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525772e-05%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326762e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075622e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526483e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.175930e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.476045e-05%)
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.495913e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.385513e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059243e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.016044e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.010021e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.985030e-01%)
Noelle:     Loop "  %52 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349737e+10%)
Noelle:     Loop "  %55 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349737e+10%)
Noelle:     Loop "  %71 = icmp sgt i64 %48, %indvars.iv2" (8.553462e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.536799e-01%)
Noelle:     Loop "  %93 = icmp slt i64 %indvars.iv.i, %51" (8.436376e-01%)
Noelle:     Loop "  %113 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309101e-03%)
Noelle:     Loop "  %132 = icmp slt i64 %indvars.iv, %129" (1.016902e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.941136e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.857846e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.236607e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.197929e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.052765e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.975219e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.171677e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.272554e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.782135e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.518466e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.596732e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.960665e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.893840e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.882176e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.676033e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.996785e-05%)
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713838e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.081371e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710285e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.463946e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.426786e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.676033e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.169076e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.420570e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.026213e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.718387e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.595113e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.639970e-01%)
Noelle:     Loop "  %206 = icmp slt i64 %205, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.950568e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.367657e-03%)
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.004384e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.918962e-02%)
Noelle:     Loop "  %132 = sext i32 %storemerge.i to i64" (4.925963e-01%)
Noelle:     Loop "  %150 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.915259e-01%)
Noelle:     Loop "  %156 = icmp slt i64 %indvars.iv.i.i, %128" (4.865078e-01%)
Noelle:     Loop "  %177 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.541427e-04%)
Noelle:     Loop "  %194 = icmp slt i64 %indvars.iv.i, %191" (5.081340e-08%)
Noelle:     Loop "  %219 = icmp sgt i64 %216, %indvars.iv" (2.973364e-04%)
Noelle:     Loop "  %239 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.303102e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.387360e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.522328e-05%)
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.323069e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.069966e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.521169e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.173950e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.471385e-05%)
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32" (2.494357e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %205" (2.384026e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.056090e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.303108e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.303108e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.297779e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.883725e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.297777e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.387360e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.522328e-05%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.323069e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.069966e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.521169e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.173950e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.471385e-05%)
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.494357e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.384026e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.056090e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.010424e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.008768e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.983792e-01%)
Noelle:     Loop "  %52 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.347649e+10%)
Noelle:     Loop "  %55 = icmp sgt i64 %spec.select, %indvars.iv18" (3.347649e+10%)
Noelle:     Loop "  %71 = icmp sgt i64 %48, %indvars.iv2" (8.538021e-01%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select, %indvars.iv16" (8.521369e-01%)
Noelle:     Loop "  %92 = icmp slt i64 %indvars.iv.i, %51" (8.431118e-01%)
Noelle:     Loop "  %111 = icmp sgt i64 %spec.select, %indvars.iv14" (1.308285e-03%)
Noelle:     Loop "  %130 = icmp slt i64 %indvars.iv, %127" (1.016268e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.936810e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.853571e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.233966e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.195312e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.051486e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.973364e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.169076e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.270514e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.780401e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.516897e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.595113e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.957573e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.890790e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.881003e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint:       There are 0 different instructions and -11 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.hHIFfO2nyp -o /tmp/tmp.hHIFfO2nyp
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.hHIFfO2nyp -o /tmp/tmp.hHIFfO2nyp
NOELLE: FixedPoint:     Invocation 4
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677779e-04%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.998088e-05%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713651e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082729e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710096e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466206e-02%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.429021e-02%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677779e-04%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171796e-04%)
Noelle:  Disable loop "8" as cold code
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.420192e+01%)
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029492e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721465e-08%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596806e-07%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.641692e-01%)
Noelle:     Loop "  %200 = icmp slt i64 %199, %1" (0.000000e+00%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.302126e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368549e-03%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.005039e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.925432e-02%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %130 = icmp sgt i64 %125, %indvars.iv3" (4.276853e-01%)
Noelle:     Loop "  %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.268522e-01%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %128" (4.218309e-01%)
Noelle:     Loop "  %171 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545694e-04%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv.i, %185" (5.084655e-08%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %213 = icmp sgt i64 %210, %indvars.iv" (2.975304e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.309170e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391527e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525930e-05%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326542e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075883e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526728e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.176021e-04%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.476259e-05%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32" (2.495985e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %205" (2.385581e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059388e-03%)
Noelle:  Disable loop "35" as cold code
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.309177e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.309177e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303845e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884954e-05%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303843e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391526e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525930e-05%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326541e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075882e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526727e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.176021e-04%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.476259e-05%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.495985e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.385581e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059388e-03%)
Noelle:  Disable loop "50" as cold code
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.016302e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.010079e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.985086e-01%)
Noelle:     Loop "  %52 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349833e+10%)
Noelle:     Loop "  %55 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349833e+10%)
Noelle:     Loop "  %71 = icmp sgt i64 %48, %indvars.iv2" (8.543590e-01%)
Noelle:     Loop "  %86 = icmp sgt i64 %spec.select, %indvars.iv16" (8.526928e-01%)
Noelle:     Loop "  %91 = icmp slt i64 %indvars.iv.i, %51" (8.436618e-01%)
Noelle:     Loop "  %110 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309139e-03%)
Noelle:  Disable loop "59" as cold code
Noelle:     Loop "  %129 = icmp slt i64 %indvars.iv, %126" (1.016931e-07%)
Noelle:  Disable loop "60" as cold code
Noelle:  Function "_Z11contcentersP6Points"
Noelle:  Disable "_Z11contcentersP6Points" as cold function
Noelle:  Function "_Z7shuffleP6Points"
Noelle:  Disable "_Z7shuffleP6Points" as cold function
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:  Disable "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t" as cold function
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:  Disable "_Z12outcenterIDsP6PointsPlPc" as cold function
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Disable "_ZN9SimStreamC2El" as cold function
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Disable "_ZN9SimStreamD0Ev" as cold function
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Disable "_ZN7PStreamC2Ev" as cold function
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Disable "_ZN9SimStream4feofEv" as cold function
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Disable "_ZN7PStreamD2Ev" as cold function
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Disable "_ZN9SimStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Disable "_ZN10FileStreamD0Ev" as cold function
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Disable "_ZN10FileStreamD2Ev" as cold function
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Disable "_ZN10FileStream4feofEv" as cold function
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Disable "_ZN10FileStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Disable "_ZN10FileStreamC2EPc" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Disable "_ZN7PStreamD0Ev" as cold function
EnablersManager:   Try to improve all 34 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "_Z11localSearchP6PointsllPl"
EnablersManager:     Entry instruction =   %28 = sext i32 %27 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %28 = sext i32 %27 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %29, label %30, label %45, !prof !35
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %or.cond24, label %._crit_edge57.._crit_edge52_crit_edge, label %242, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %61, label %62, label %69, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %89, label %90, label %98, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %116, label %117, label %144, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %232 = icmp slt i64 %indvars.iv.i.i, %212
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %232, label %233, label %_Z4distRK5PointS1_i.exit.i, !prof !69
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %213, label %214, label %243, !prof !67
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %155, label %156, label %181, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %31 = icmp slt i64 %.01.us, %6
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %31 = icmp slt i64 %.01.us, %6"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %31, label %34, label %32, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %18 = fdiv double %.0.us, %.02.us
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %18 = fdiv double %.0.us, %.02.us"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %19, label %.preheader3.preheader, label %.us-lcssa.us.loopexit, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %106 = icmp sgt i64 %spec.select, %indvars.iv38
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %106, label %107, label %134, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z4distRK5PointS1_i"
EnablersManager:     Entry instruction =   %10 = icmp slt i64 %indvars.iv, %8
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %10 = icmp slt i64 %indvars.iv, %8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %10, label %11, label %19, !prof !30
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %120 = sext i32 %119 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %120 = sext i32 %119 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %121, label %122, label %137, !prof !54
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca %union.pthread_barrier_t, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %77, label %78, label %._crit_edge17.._crit_edge_crit_edge, !prof !51
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %91 = icmp slt i64 %indvars.iv.i, %51
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %91 = icmp slt i64 %indvars.iv.i, %51"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %91, label %92, label %_Z4distRK5PointS1_i.exit, !prof !42
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %86 = icmp sgt i64 %spec.select, %indvars.iv16
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %86 = icmp sgt i64 %spec.select, %indvars.iv16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %86, label %87, label %._crit_edge26.loopexit, !prof !53
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %71 = icmp sgt i64 %48, %indvars.iv2
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %71 = icmp sgt i64 %48, %indvars.iv2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %71, label %72, label %.loopexit7.loopexit, !prof !51
Mem2Reg:   The loop has 1SCCs that each one access the same memory location
Mem2Reg:     Loop invariant memory location: i64* %2
Mem2Reg:     SCC:
Internal nodes: 3
	  %81 = load i64, i64* %2, align 8, !tbaa !49
	  %82 = add nsw i64 %81, 1
	  store i64 %82, i64* %2, align 8, !tbaa !49
External nodes: 1
	  br i1 %79, label %80, label %.._crit_edge26_crit_edge, !prof !52
Edges: 8

Mem2Reg:  Collecting and ordering memory loads/stores by basic block
Mem2Reg: Iterating basic blocks to determine last stored values
Mem2Reg: placeholder PHI required: label %71
Mem2Reg:  checking for last value entering block: label %71
Mem2Reg:  Last value entering block: label %71	  %72 = phi i64 
Mem2Reg:  checking for last value entering block: label %74
Mem2Reg:  Last value entering block: label %74	  %72 = phi i64 
Mem2Reg:  checking for last value entering block: label %82
Mem2Reg:  Last value entering block: label %82	  %72 = phi i64 
Mem2Reg:  Value updated:   %84 = add nsw i64 %72, 1
Mem2Reg:  checking for last value entering block: label %.._crit_edge26_crit_edge
Mem2Reg:  Last value entering block: label %.._crit_edge26_crit_edge	  %72 = phi i64 
Mem2Reg: placeholder PHI required: label %87
Mem2Reg:  checking for last value entering block: label %87
Mem2Reg:  Last value entering block: label %87	  %88 = phi i64 
Mem2Reg: placeholder PHI required: label %._crit_edge26
Mem2Reg:  checking for last value entering block: label %._crit_edge26
Mem2Reg:  Last value entering block: label %._crit_edge26	  %111 = phi i64 
Mem2Reg:  checking for last value entering block: label %90
Mem2Reg:  Last value entering block: label %90	  %88 = phi i64 
Mem2Reg:  checking for last value entering block: label %._crit_edge26.loopexit
Mem2Reg:  Last value entering block: label %._crit_edge26.loopexit	  %88 = phi i64 
Mem2Reg: placeholder PHI required: label %93
Mem2Reg:  checking for last value entering block: label %93
Mem2Reg:  Last value entering block: label %93	  %94 = phi i64 
Mem2Reg:  checking for last value entering block: label %96
Mem2Reg:  Last value entering block: label %96	  %94 = phi i64 
Mem2Reg:  checking for last value entering block: label %_Z4distRK5PointS1_i.exit
Mem2Reg:  Last value entering block: label %_Z4distRK5PointS1_i.exit	  %94 = phi i64 
Mem2Reg:  checking for last value entering block: label %110
Mem2Reg:  Last value entering block: label %110	  %94 = phi i64 
Mem2Reg:  checking for last value entering block: label %_Z4distRK5PointS1_i.exit.._crit_edge27_crit_edge
Mem2Reg:  Last value entering block: label %_Z4distRK5PointS1_i.exit.._crit_edge27_crit_edge	  %94 = phi i64 
Mem2Reg:  checking for last value entering block: label %._crit_edge27
Mem2Reg:  Last value entering block: label %._crit_edge27	  %112 = phi i64 [ %94, %_Z4distRK5PointS1_i.exit.._crit_edge27_crit_edge ], [ %94, %110 ]
Mem2Reg:  Removing
  %83 = load i64, i64* %2, align 8, !tbaa !49
Mem2Reg:  Removing
  store i64 %83, i64* %2, align 8, !tbaa !49
Mem2Reg:       The memory location has been promoted
Mem2Reg: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %145 = icmp sgt i64 %spec.select, %indvars.iv36
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %145, label %146, label %171, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %38 = icmp sgt i64 %spec.select, %indvars.iv44
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %38, label %39, label %46, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %70 = icmp sgt i64 %spec.select, %indvars.iv40
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %70, label %71, label %79, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %153 = icmp slt i64 %indvars.iv.i.i, %128
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %128"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %153, label %154, label %_Z4distRK5PointS1_i.exit.i, !prof !61
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %148, label %149, label %._crit_edge26.i.loopexit, !prof !64
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
SCEVSimplification: Removing loop entry PHI (part of PHI-only propagation):   %147 = phi i32 [ %170, %._crit_edge27.i ], [ %145, %140 ]
SCEVSimplification: 	Removing PHI (part of PHI-only propagation):   %170 = phi i32 [ %147, %_Z4distRK5PointS1_i.exit.i.._crit_edge27.i_crit_edge ], [ %147, %168 ]
SCEVSimplification: 	Removing PHI (part of PHI-only propagation):   %147 = phi i32 [ %170, %._crit_edge27.i ], [ %145, %140 ]
EnablersManager:       Loop constant PHIs have been simplified
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %130 = icmp sgt i64 %125, %indvars.iv3
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %69 = icmp slt i64 %68, %1
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %225 = icmp slt i64 %indvars.iv.i, %205
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %225 = icmp slt i64 %indvars.iv.i, %205"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %225, label %226, label %_Z4distRK5PointS1_i.exit, !prof !65
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %206 = icmp sgt i64 %spec.select, %indvars.iv32
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %206, label %207, label %236, !prof !63
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %30 = icmp slt i64 %indvars.iv.i1, %28
EnablersManager:     The current loop belongs to the function _Z7pspeedyP6PointsfPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %20 = icmp sgt i64 %spec.select, %indvars.iv20
EnablersManager:     The current loop belongs to the function _Z7pspeedyP6PointsfPliP17pthread_barrier_t , which has already been modified.
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677779e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.998088e-05%)
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713651e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082729e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710096e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466206e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.429021e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677779e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171796e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.420192e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029492e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721465e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596806e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.641692e-01%)
Noelle:     Loop "  %200 = icmp slt i64 %199, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.302126e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368549e-03%)
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.005039e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.925432e-02%)
Noelle:     Loop "  %130 = icmp sgt i64 %125, %indvars.iv3" (4.276853e-01%)
Noelle:     Loop "  %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.268522e-01%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %128" (4.218309e-01%)
Noelle:     Loop "  %171 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545694e-04%)
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv.i, %185" (5.084655e-08%)
Noelle:     Loop "  %213 = icmp sgt i64 %210, %indvars.iv" (2.975304e-04%)
Noelle:     Loop "  %233 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.309170e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391527e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525930e-05%)
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326542e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075883e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526728e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.176021e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.476259e-05%)
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32" (2.495985e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %205" (2.385581e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059388e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.309177e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.309177e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303845e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884954e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303843e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391526e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525930e-05%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326541e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075882e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526727e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.176021e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.476259e-05%)
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.495985e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.385581e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059388e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.016302e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.010079e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.985086e-01%)
Noelle:     Loop "  %52 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349833e+10%)
Noelle:     Loop "  %55 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349833e+10%)
Noelle:     Loop "  %71 = icmp sgt i64 %48, %indvars.iv2" (8.543590e-01%)
Noelle:     Loop "  %86 = icmp sgt i64 %spec.select, %indvars.iv16" (8.526928e-01%)
Noelle:     Loop "  %91 = icmp slt i64 %indvars.iv.i, %51" (8.436618e-01%)
Noelle:     Loop "  %110 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309139e-03%)
Noelle:     Loop "  %129 = icmp slt i64 %indvars.iv, %126" (1.016931e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.941335e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.858042e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.236728e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.198049e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.052824e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.975304e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.171796e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.272647e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.782214e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.518539e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.596806e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.960807e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.893980e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.882230e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.674283e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.995479e-05%)
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.710749e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.080010e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.707198e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.461680e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.424544e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.674283e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.166349e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.414395e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.022926e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.715301e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.593416e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.965910e-01%)
Noelle:     Loop "  %198 = icmp slt i64 %197, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.290152e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.366763e-03%)
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.003727e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.912474e-02%)
Noelle:     Loop "  %130 = icmp sgt i64 %125, %indvars.iv3" (4.266218e-01%)
Noelle:     Loop "  %147 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.257897e-01%)
Noelle:     Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %128" (4.212801e-01%)
Noelle:     Loop "  %169 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.537148e-04%)
Noelle:     Loop "  %186 = icmp slt i64 %indvars.iv.i, %183" (5.078016e-08%)
Noelle:     Loop "  %211 = icmp sgt i64 %208, %indvars.iv" (2.971419e-04%)
Noelle:     Loop "  %231 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.297016e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.383182e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.518716e-05%)
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.319587e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.064033e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.515595e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.171874e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.466498e-05%)
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32" (2.492726e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %205" (2.382466e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.052782e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.297023e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.297023e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.291697e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.882493e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.291695e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.383181e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.518716e-05%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.319587e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.064033e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.515595e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.171874e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.466498e-05%)
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.492726e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.382466e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.052782e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.004530e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.007454e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.982495e-01%)
Noelle:     Loop "  %53 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.345460e+10%)
Noelle:     Loop "  %56 = icmp sgt i64 %spec.select, %indvars.iv18" (3.345460e+10%)
Noelle:     Loop "  %73 = icmp sgt i64 %48, %indvars.iv2" (9.843104e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (9.824087e-01%)
Noelle:     Loop "  %94 = icmp slt i64 %indvars.iv.i, %51" (9.723792e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select, %indvars.iv14" (1.307430e-03%)
Noelle:     Loop "  %135 = icmp slt i64 %indvars.iv, %132" (1.015603e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.932272e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.849088e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.231196e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.192568e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.050144e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.971419e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.166349e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.268375e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.778582e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.515250e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.593416e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.954330e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.887591e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.879773e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint:       There are 0 different instructions and -2 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.hHIFfO2nyp -o /tmp/tmp.hHIFfO2nyp
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.hHIFfO2nyp -o /tmp/tmp.hHIFfO2nyp
NOELLE: FixedPoint:     Invocation 5
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677759e-04%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.998073e-05%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713622e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082714e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710067e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466180e-02%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.428996e-02%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677759e-04%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171765e-04%)
Noelle:  Disable loop "8" as cold code
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.420133e+01%)
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029455e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721430e-08%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596787e-07%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.644796e-01%)
Noelle:     Loop "  %197 = icmp slt i64 %196, %1" (0.000000e+00%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.297029e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368539e-03%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.005032e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.925359e-02%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %130 = icmp sgt i64 %125, %indvars.iv3" (4.271763e-01%)
Noelle:     Loop "  %146 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.263432e-01%)
Noelle:     Loop "  %151 = icmp slt i64 %indvars.iv.i.i, %128" (4.218277e-01%)
Noelle:     Loop "  %168 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545646e-04%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %185 = icmp slt i64 %indvars.iv.i, %182" (5.084617e-08%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %210 = icmp sgt i64 %207, %indvars.iv" (2.975282e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %230 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.309101e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391479e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525889e-05%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326502e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075815e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526664e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.175997e-04%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.476203e-05%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32" (2.495966e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %205" (2.385563e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059350e-03%)
Noelle:  Disable loop "35" as cold code
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.309108e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.309108e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303775e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884940e-05%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303773e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391479e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525889e-05%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326502e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075815e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526664e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.175997e-04%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.476203e-05%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.495966e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.385563e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059350e-03%)
Noelle:  Disable loop "50" as cold code
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.016235e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.010064e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.985072e-01%)
Noelle:     Loop "  %53 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349808e+10%)
Noelle:     Loop "  %56 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349808e+10%)
Noelle:     Loop "  %73 = icmp sgt i64 %48, %indvars.iv2" (8.556023e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.536980e-01%)
Noelle:     Loop "  %93 = icmp slt i64 %indvars.iv.i, %51" (8.436555e-01%)
Noelle:     Loop "  %114 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309129e-03%)
Noelle:  Disable loop "59" as cold code
Noelle:     Loop "  %133 = icmp slt i64 %indvars.iv, %130" (1.016923e-07%)
Noelle:  Disable loop "60" as cold code
Noelle:  Function "_Z11contcentersP6Points"
Noelle:  Disable "_Z11contcentersP6Points" as cold function
Noelle:  Function "_Z7shuffleP6Points"
Noelle:  Disable "_Z7shuffleP6Points" as cold function
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:  Disable "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t" as cold function
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:  Disable "_Z12outcenterIDsP6PointsPlPc" as cold function
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Disable "_ZN9SimStreamC2El" as cold function
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Disable "_ZN9SimStreamD0Ev" as cold function
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Disable "_ZN7PStreamC2Ev" as cold function
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Disable "_ZN9SimStream4feofEv" as cold function
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Disable "_ZN7PStreamD2Ev" as cold function
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Disable "_ZN9SimStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Disable "_ZN10FileStreamD0Ev" as cold function
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Disable "_ZN10FileStreamD2Ev" as cold function
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Disable "_ZN10FileStream4feofEv" as cold function
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Disable "_ZN10FileStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Disable "_ZN10FileStreamC2EPc" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Disable "_ZN7PStreamD0Ev" as cold function
EnablersManager:   Try to improve all 34 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "_Z11localSearchP6PointsllPl"
EnablersManager:     Entry instruction =   %28 = sext i32 %27 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %28 = sext i32 %27 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %29, label %30, label %45, !prof !35
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %230 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %230 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %or.cond24, label %._crit_edge57.._crit_edge52_crit_edge, label %239, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %61, label %62, label %69, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %116, label %117, label %144, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %155, label %156, label %181, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %232 = icmp slt i64 %indvars.iv.i.i, %212
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %232, label %233, label %_Z4distRK5PointS1_i.exit.i, !prof !69
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %213, label %214, label %243, !prof !67
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %89, label %90, label %98, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %31 = icmp slt i64 %.01.us, %6
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %31 = icmp slt i64 %.01.us, %6"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %31, label %34, label %32, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %18 = fdiv double %.0.us, %.02.us
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %18 = fdiv double %.0.us, %.02.us"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %19, label %.preheader3.preheader, label %.us-lcssa.us.loopexit, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %106 = icmp sgt i64 %spec.select, %indvars.iv38
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %106, label %107, label %134, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z4distRK5PointS1_i"
EnablersManager:     Entry instruction =   %10 = icmp slt i64 %indvars.iv, %8
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %10 = icmp slt i64 %indvars.iv, %8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %10, label %11, label %19, !prof !30
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %120 = sext i32 %119 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %120 = sext i32 %119 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %121, label %122, label %137, !prof !54
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca %union.pthread_barrier_t, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %77, label %78, label %._crit_edge17.._crit_edge_crit_edge, !prof !51
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %93 = icmp slt i64 %indvars.iv.i, %51
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %93 = icmp slt i64 %indvars.iv.i, %51"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %93, label %94, label %_Z4distRK5PointS1_i.exit, !prof !42
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %88 = icmp sgt i64 %spec.select, %indvars.iv16
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %88, label %89, label %._crit_edge26.loopexit, !prof !53
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
SCEVSimplification: Removing loop entry PHI (part of PHI-only propagation):   %87 = phi i64 [ %110, %._crit_edge27 ], [ %83, %82 ]
SCEVSimplification: 	Removing PHI (part of PHI-only propagation):   %110 = phi i64 [ %87, %_Z4distRK5PointS1_i.exit.._crit_edge27_crit_edge ], [ %87, %108 ]
SCEVSimplification: 	Removing PHI (part of PHI-only propagation):   %87 = phi i64 [ %110, %._crit_edge27 ], [ %83, %82 ]
EnablersManager:       Loop constant PHIs have been simplified
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %73 = icmp sgt i64 %48, %indvars.iv2
EnablersManager:     The current loop belongs to the function _Z7pspeedyP6PointsfPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %145 = icmp sgt i64 %spec.select, %indvars.iv36
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %145, label %146, label %171, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %38 = icmp sgt i64 %spec.select, %indvars.iv44
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %38, label %39, label %46, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %70 = icmp sgt i64 %spec.select, %indvars.iv40
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %70, label %71, label %79, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %151 = icmp slt i64 %indvars.iv.i.i, %128
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %151 = icmp slt i64 %indvars.iv.i.i, %128"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %151, label %152, label %_Z4distRK5PointS1_i.exit.i, !prof !61
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %146 = icmp sgt i64 %spec.select.i, %indvars.iv16.i
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %146 = icmp sgt i64 %spec.select.i, %indvars.iv16.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %146, label %147, label %._crit_edge26.i.loopexit, !prof !64
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %130 = icmp sgt i64 %125, %indvars.iv3
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %130 = icmp sgt i64 %125, %indvars.iv3"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %130, label %132, label %.loopexit7.loopexit.i.preheader, !prof !62
Mem2Reg:   The loop has 1SCCs that each one access the same memory location
Mem2Reg:     Loop invariant memory location: @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k = internal global i64 0, align 8
Mem2Reg:     SCC:
Internal nodes: 3
	  %141 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
	  %142 = add nsw i64 %141, 1
	  store i64 %142, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
External nodes: 1
	  br i1 %139, label %140, label %.._crit_edge26.i_crit_edge, !prof !63
Edges: 8

Mem2Reg:  Collecting and ordering memory loads/stores by basic block
Mem2Reg: Iterating basic blocks to determine last stored values
Mem2Reg: placeholder PHI required: label %130
Mem2Reg:  checking for last value entering block: label %130
Mem2Reg:  Last value entering block: label %130	  %131 = phi i64 
Mem2Reg:  checking for last value entering block: label %134
Mem2Reg:  Last value entering block: label %134	  %131 = phi i64 
Mem2Reg:  checking for last value entering block: label %142
Mem2Reg:  Last value entering block: label %142	  %131 = phi i64 
Mem2Reg:  Value updated:   %144 = add nsw i64 %131, 1
Mem2Reg:  checking for last value entering block: label %.._crit_edge26.i_crit_edge
Mem2Reg:  Last value entering block: label %.._crit_edge26.i_crit_edge	  %131 = phi i64 
Mem2Reg: placeholder PHI required: label %147
Mem2Reg:  checking for last value entering block: label %147
Mem2Reg:  Last value entering block: label %147	  %148 = phi i64 
Mem2Reg: placeholder PHI required: label %._crit_edge26.i
Mem2Reg:  checking for last value entering block: label %._crit_edge26.i
Mem2Reg:  Last value entering block: label %._crit_edge26.i	  %171 = phi i64 
Mem2Reg:  checking for last value entering block: label %150
Mem2Reg:  Last value entering block: label %150	  %148 = phi i64 
Mem2Reg:  checking for last value entering block: label %._crit_edge26.i.loopexit
Mem2Reg:  Last value entering block: label %._crit_edge26.i.loopexit	  %148 = phi i64 
Mem2Reg: placeholder PHI required: label %153
Mem2Reg:  checking for last value entering block: label %153
Mem2Reg:  Last value entering block: label %153	  %154 = phi i64 
Mem2Reg:  checking for last value entering block: label %156
Mem2Reg:  Last value entering block: label %156	  %154 = phi i64 
Mem2Reg:  checking for last value entering block: label %_Z4distRK5PointS1_i.exit.i
Mem2Reg:  Last value entering block: label %_Z4distRK5PointS1_i.exit.i	  %154 = phi i64 
Mem2Reg:  checking for last value entering block: label %170
Mem2Reg:  Last value entering block: label %170	  %154 = phi i64 
Mem2Reg:  checking for last value entering block: label %_Z4distRK5PointS1_i.exit.i.._crit_edge27.i_crit_edge
Mem2Reg:  Last value entering block: label %_Z4distRK5PointS1_i.exit.i.._crit_edge27.i_crit_edge	  %154 = phi i64 
Mem2Reg:  checking for last value entering block: label %._crit_edge27.i
Mem2Reg:  Last value entering block: label %._crit_edge27.i	  %172 = phi i64 [ %154, %_Z4distRK5PointS1_i.exit.i.._crit_edge27.i_crit_edge ], [ %154, %170 ]
Mem2Reg:  Removing
  %143 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
Mem2Reg:  Removing
  store i64 %143, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
Mem2Reg:       The memory location has been promoted
Mem2Reg: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %69 = icmp slt i64 %68, %1
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %225 = icmp slt i64 %indvars.iv.i, %205
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %225 = icmp slt i64 %indvars.iv.i, %205"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %225, label %226, label %_Z4distRK5PointS1_i.exit, !prof !65
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %206 = icmp sgt i64 %spec.select, %indvars.iv32
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %206, label %207, label %236, !prof !63
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %30 = icmp slt i64 %indvars.iv.i1, %28
EnablersManager:     The current loop belongs to the function _Z7pspeedyP6PointsfPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %20 = icmp sgt i64 %spec.select, %indvars.iv20
EnablersManager:     The current loop belongs to the function _Z7pspeedyP6PointsfPliP17pthread_barrier_t , which has already been modified.
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677759e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.998073e-05%)
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713622e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082714e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710067e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466180e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.428996e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677759e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171765e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.420133e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029455e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721430e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596787e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.644796e-01%)
Noelle:     Loop "  %197 = icmp slt i64 %196, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.297029e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368539e-03%)
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.005032e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.925359e-02%)
Noelle:     Loop "  %130 = icmp sgt i64 %125, %indvars.iv3" (4.271763e-01%)
Noelle:     Loop "  %146 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.263432e-01%)
Noelle:     Loop "  %151 = icmp slt i64 %indvars.iv.i.i, %128" (4.218277e-01%)
Noelle:     Loop "  %168 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545646e-04%)
Noelle:     Loop "  %185 = icmp slt i64 %indvars.iv.i, %182" (5.084617e-08%)
Noelle:     Loop "  %210 = icmp sgt i64 %207, %indvars.iv" (2.975282e-04%)
Noelle:     Loop "  %230 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.309101e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391479e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525889e-05%)
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326502e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075815e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526664e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.175997e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.476203e-05%)
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32" (2.495966e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %205" (2.385563e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059350e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.309108e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.309108e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303775e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884940e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303773e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391479e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525889e-05%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326502e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075815e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526664e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.175997e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.476203e-05%)
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.495966e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.385563e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059350e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.016235e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.010064e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.985072e-01%)
Noelle:     Loop "  %53 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349808e+10%)
Noelle:     Loop "  %56 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349808e+10%)
Noelle:     Loop "  %73 = icmp sgt i64 %48, %indvars.iv2" (8.556023e-01%)
Noelle:     Loop "  %88 = icmp sgt i64 %spec.select, %indvars.iv16" (8.536980e-01%)
Noelle:     Loop "  %93 = icmp slt i64 %indvars.iv.i, %51" (8.436555e-01%)
Noelle:     Loop "  %114 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309129e-03%)
Noelle:     Loop "  %133 = icmp slt i64 %indvars.iv, %130" (1.016923e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.941283e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.857991e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.236696e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.198018e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.052809e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.975282e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.171765e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.272623e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.782194e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.518520e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.596787e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.960770e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.893944e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.882216e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.676030e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.996783e-05%)
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713832e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.081369e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710279e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.463942e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.426782e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.676030e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.169071e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.420558e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.026207e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.718382e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.595110e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.640561e-01%)
Noelle:     Loop "  %203 = icmp slt i64 %202, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.949371e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.367656e-03%)
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.004383e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.918950e-02%)
Noelle:     Loop "  %132 = icmp sgt i64 %125, %indvars.iv3" (4.924768e-01%)
Noelle:     Loop "  %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.915253e-01%)
Noelle:     Loop "  %154 = icmp slt i64 %indvars.iv.i.i, %128" (4.865073e-01%)
Noelle:     Loop "  %174 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.541419e-04%)
Noelle:     Loop "  %191 = icmp slt i64 %indvars.iv.i, %188" (5.081334e-08%)
Noelle:     Loop "  %216 = icmp sgt i64 %213, %indvars.iv" (2.973361e-04%)
Noelle:     Loop "  %236 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.303091e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.387352e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.522321e-05%)
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.323063e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.069955e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.521159e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.173947e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.471376e-05%)
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32" (2.494355e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %205" (2.384023e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.056084e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.303097e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.303097e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.297768e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.883723e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.297766e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.387352e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.522321e-05%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.323063e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.069955e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.521159e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.173947e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.471376e-05%)
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.494355e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.384023e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.056084e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.010413e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.008766e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.983790e-01%)
Noelle:     Loop "  %53 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.347645e+10%)
Noelle:     Loop "  %56 = icmp sgt i64 %spec.select, %indvars.iv18" (3.347645e+10%)
Noelle:     Loop "  %73 = icmp sgt i64 %48, %indvars.iv2" (8.540389e-01%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select, %indvars.iv16" (8.521359e-01%)
Noelle:     Loop "  %92 = icmp slt i64 %indvars.iv.i, %51" (8.431108e-01%)
Noelle:     Loop "  %112 = icmp sgt i64 %spec.select, %indvars.iv14" (1.308284e-03%)
Noelle:     Loop "  %131 = icmp slt i64 %indvars.iv, %128" (1.016267e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.936802e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.853563e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.233961e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.195307e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.051483e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.973361e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.169071e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.270510e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.780397e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.516894e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.595110e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.957567e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.890784e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.881001e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint:       There are 0 different instructions and -2 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.hHIFfO2nyp -o /tmp/tmp.hHIFfO2nyp
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.hHIFfO2nyp -o /tmp/tmp.hHIFfO2nyp
NOELLE: FixedPoint:     Invocation 6
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677770e-04%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.998081e-05%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713646e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082722e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710091e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466193e-02%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.429009e-02%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677770e-04%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171781e-04%)
Noelle:  Disable loop "8" as cold code
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.420182e+01%)
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029474e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721448e-08%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596797e-07%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.642277e-01%)
Noelle:     Loop "  %201 = icmp slt i64 %200, %1" (0.000000e+00%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.303297e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368545e-03%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.005036e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.925397e-02%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %132 = icmp sgt i64 %125, %indvars.iv3" (4.278028e-01%)
Noelle:     Loop "  %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.268507e-01%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %128" (4.218294e-01%)
Noelle:     Loop "  %172 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545671e-04%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %189 = icmp slt i64 %indvars.iv.i, %186" (5.084637e-08%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %214 = icmp sgt i64 %211, %indvars.iv" (2.975293e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %234 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.309137e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391504e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525911e-05%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326522e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075850e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526697e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.176009e-04%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.476232e-05%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32" (2.495976e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %205" (2.385573e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059370e-03%)
Noelle:  Disable loop "35" as cold code
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.309144e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.309144e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303811e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884948e-05%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303809e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391503e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525911e-05%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326522e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075850e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526697e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.176009e-04%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.476232e-05%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.495976e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.385573e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059370e-03%)
Noelle:  Disable loop "50" as cold code
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.016270e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.010072e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.985079e-01%)
Noelle:     Loop "  %53 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349821e+10%)
Noelle:     Loop "  %56 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349821e+10%)
Noelle:     Loop "  %73 = icmp sgt i64 %48, %indvars.iv2" (8.545940e-01%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select, %indvars.iv16" (8.526897e-01%)
Noelle:     Loop "  %92 = icmp slt i64 %indvars.iv.i, %51" (8.436588e-01%)
Noelle:     Loop "  %112 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309134e-03%)
Noelle:  Disable loop "59" as cold code
Noelle:     Loop "  %131 = icmp slt i64 %indvars.iv, %128" (1.016927e-07%)
Noelle:  Disable loop "60" as cold code
Noelle:  Function "_Z11contcentersP6Points"
Noelle:  Disable "_Z11contcentersP6Points" as cold function
Noelle:  Function "_Z7shuffleP6Points"
Noelle:  Disable "_Z7shuffleP6Points" as cold function
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:  Disable "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t" as cold function
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:  Disable "_Z12outcenterIDsP6PointsPlPc" as cold function
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Disable "_ZN9SimStreamC2El" as cold function
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Disable "_ZN9SimStreamD0Ev" as cold function
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Disable "_ZN7PStreamC2Ev" as cold function
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Disable "_ZN9SimStream4feofEv" as cold function
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Disable "_ZN7PStreamD2Ev" as cold function
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Disable "_ZN9SimStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Disable "_ZN10FileStreamD0Ev" as cold function
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Disable "_ZN10FileStreamD2Ev" as cold function
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Disable "_ZN10FileStream4feofEv" as cold function
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Disable "_ZN10FileStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Disable "_ZN10FileStreamC2EPc" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Disable "_ZN7PStreamD0Ev" as cold function
EnablersManager:   Try to improve all 34 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "_Z11localSearchP6PointsllPl"
EnablersManager:     Entry instruction =   %28 = sext i32 %27 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %28 = sext i32 %27 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %29, label %30, label %45, !prof !35
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %234 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %234 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %or.cond24, label %._crit_edge57.._crit_edge52_crit_edge, label %243, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %155, label %156, label %181, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %116, label %117, label %144, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %89, label %90, label %98, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %232 = icmp slt i64 %indvars.iv.i.i, %212
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %232, label %233, label %_Z4distRK5PointS1_i.exit.i, !prof !69
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %213, label %214, label %243, !prof !67
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %61, label %62, label %69, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %31 = icmp slt i64 %.01.us, %6
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %31 = icmp slt i64 %.01.us, %6"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %31, label %34, label %32, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %18 = fdiv double %.0.us, %.02.us
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %18 = fdiv double %.0.us, %.02.us"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %19, label %.preheader3.preheader, label %.us-lcssa.us.loopexit, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %106 = icmp sgt i64 %spec.select, %indvars.iv38
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %106, label %107, label %134, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z4distRK5PointS1_i"
EnablersManager:     Entry instruction =   %10 = icmp slt i64 %indvars.iv, %8
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %10 = icmp slt i64 %indvars.iv, %8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %10, label %11, label %19, !prof !30
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %120 = sext i32 %119 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %120 = sext i32 %119 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %121, label %122, label %137, !prof !54
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca %union.pthread_barrier_t, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %77, label %78, label %._crit_edge17.._crit_edge_crit_edge, !prof !51
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %92 = icmp slt i64 %indvars.iv.i, %51
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %92 = icmp slt i64 %indvars.iv.i, %51"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %92, label %93, label %_Z4distRK5PointS1_i.exit, !prof !42
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %87 = icmp sgt i64 %spec.select, %indvars.iv16
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %87 = icmp sgt i64 %spec.select, %indvars.iv16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %87, label %88, label %._crit_edge26.loopexit, !prof !53
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %73 = icmp sgt i64 %48, %indvars.iv2
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %73 = icmp sgt i64 %48, %indvars.iv2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %73, label %74, label %.loopexit7.loopexit, !prof !51
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %145 = icmp sgt i64 %spec.select, %indvars.iv36
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %145, label %146, label %171, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %38 = icmp sgt i64 %spec.select, %indvars.iv44
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %38, label %39, label %46, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %70 = icmp sgt i64 %spec.select, %indvars.iv40
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %70, label %71, label %79, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %153 = icmp slt i64 %indvars.iv.i.i, %128
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %128"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %153, label %154, label %_Z4distRK5PointS1_i.exit.i, !prof !61
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %148, label %149, label %._crit_edge26.i.loopexit, !prof !64
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
SCEVSimplification: Removing loop entry PHI (part of PHI-only propagation):   %147 = phi i64 [ %170, %._crit_edge27.i ], [ %143, %142 ]
SCEVSimplification: 	Removing PHI (part of PHI-only propagation):   %170 = phi i64 [ %147, %_Z4distRK5PointS1_i.exit.i.._crit_edge27.i_crit_edge ], [ %147, %168 ]
SCEVSimplification: 	Removing PHI (part of PHI-only propagation):   %147 = phi i64 [ %170, %._crit_edge27.i ], [ %143, %142 ]
EnablersManager:       Loop constant PHIs have been simplified
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %132 = icmp sgt i64 %125, %indvars.iv3
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %69 = icmp slt i64 %68, %1
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %225 = icmp slt i64 %indvars.iv.i, %205
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %225 = icmp slt i64 %indvars.iv.i, %205"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %225, label %226, label %_Z4distRK5PointS1_i.exit, !prof !65
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %206 = icmp sgt i64 %spec.select, %indvars.iv32
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %206, label %207, label %236, !prof !63
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %30 = icmp slt i64 %indvars.iv.i1, %28
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %30, label %31, label %_Z4distRK5PointS1_i.exit4, !prof !42
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %20 = icmp sgt i64 %spec.select, %indvars.iv20
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20"
LICM:     Invariant = "  %22 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %23 = load i32, i32* %17, align 8, !tbaa !41
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %26 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 0, i32 1
LICM:       Checking dependences
LICM:         Dependent instruction = "  %22 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %22 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !40
LICM:     Invariant = "  %27 = load float*, float** %26, align 8
LICM:       Checking dependences
LICM:         Dependent instruction = "  %26 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 0, i32 1
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %26 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 0, i32 1
LICM:     Invariant = "  %28 = sext i32 %23 to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %23 = load i32, i32* %17, align 8, !tbaa !41
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %23 = load i32, i32* %17, align 8, !tbaa !41
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %26 = getelementptr inbounds %struct.Point, %struct.Point* %22, i64 0, i32 1
LICM:           It can be hoisted
LICM:         Invariant   %27 = load float*, float** %26, align 8
LICM:           It can be hoisted
LICM:         Invariant   %28 = sext i32 %23 to i64
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677770e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.998081e-05%)
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713646e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082722e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710091e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466193e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.429009e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677770e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171781e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.420182e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029474e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721448e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596797e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.642277e-01%)
Noelle:     Loop "  %201 = icmp slt i64 %200, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.303297e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368545e-03%)
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.005036e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.925397e-02%)
Noelle:     Loop "  %132 = icmp sgt i64 %125, %indvars.iv3" (4.278028e-01%)
Noelle:     Loop "  %148 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.268507e-01%)
Noelle:     Loop "  %153 = icmp slt i64 %indvars.iv.i.i, %128" (4.218294e-01%)
Noelle:     Loop "  %172 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545671e-04%)
Noelle:     Loop "  %189 = icmp slt i64 %indvars.iv.i, %186" (5.084637e-08%)
Noelle:     Loop "  %214 = icmp sgt i64 %211, %indvars.iv" (2.975293e-04%)
Noelle:     Loop "  %234 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.309137e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391504e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525911e-05%)
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326522e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075850e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526697e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.176009e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.476232e-05%)
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32" (2.495976e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %205" (2.385573e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059370e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.309144e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.309144e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303811e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884948e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303809e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391503e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525911e-05%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326522e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075850e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526697e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.176009e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.476232e-05%)
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.495976e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.385573e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059370e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.016270e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %20 = icmp sgt i64 %spec.select, %indvars.iv20" (2.010072e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %28" (1.985079e-01%)
Noelle:     Loop "  %53 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349821e+10%)
Noelle:     Loop "  %56 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349821e+10%)
Noelle:     Loop "  %73 = icmp sgt i64 %48, %indvars.iv2" (8.545940e-01%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select, %indvars.iv16" (8.526897e-01%)
Noelle:     Loop "  %92 = icmp slt i64 %indvars.iv.i, %51" (8.436588e-01%)
Noelle:     Loop "  %112 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309134e-03%)
Noelle:     Loop "  %131 = icmp slt i64 %indvars.iv, %128" (1.016927e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.941310e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.858018e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.236713e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.198034e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.052817e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.975293e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.171781e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.272636e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.782204e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.518530e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.596797e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.960790e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.893963e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.882224e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677799e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.998103e-05%)
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713658e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082745e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710103e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466232e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.429047e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677799e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171827e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.420205e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029530e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721500e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596825e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.640819e-01%)
Noelle:     Loop "  %199 = icmp slt i64 %198, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.298298e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368560e-03%)
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.005047e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.925506e-02%)
Noelle:     Loop "  %132 = icmp sgt i64 %125, %indvars.iv3" (4.273017e-01%)
Noelle:     Loop "  %147 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.263496e-01%)
Noelle:     Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %128" (4.218340e-01%)
Noelle:     Loop "  %170 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545743e-04%)
Noelle:     Loop "  %187 = icmp slt i64 %indvars.iv.i, %184" (5.084693e-08%)
Noelle:     Loop "  %212 = icmp sgt i64 %209, %indvars.iv" (2.975326e-04%)
Noelle:     Loop "  %232 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.309240e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391574e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525972e-05%)
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326581e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075950e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526791e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.176044e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.476314e-05%)
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32" (2.496003e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %205" (2.385599e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059426e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.309246e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.309246e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303914e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884968e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303912e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391574e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525972e-05%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326581e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075950e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526791e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.176044e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.476314e-05%)
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.496003e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.385599e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059426e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.016369e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp sgt i64 %spec.select, %indvars.iv20" (2.004143e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %23" (1.985101e-01%)
Noelle:     Loop "  %53 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349858e+10%)
Noelle:     Loop "  %56 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349858e+10%)
Noelle:     Loop "  %73 = icmp sgt i64 %48, %indvars.iv2" (8.546034e-01%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select, %indvars.iv16" (8.526991e-01%)
Noelle:     Loop "  %92 = icmp slt i64 %indvars.iv.i, %51" (8.436680e-01%)
Noelle:     Loop "  %112 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309149e-03%)
Noelle:     Loop "  %131 = icmp slt i64 %indvars.iv, %128" (1.016939e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.941387e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.858093e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.236759e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.198080e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.052839e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.975326e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.171827e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.272672e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.782235e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.518557e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.596825e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.960844e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.894017e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.882244e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint:       There are 0 different instructions and -5 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.hHIFfO2nyp -o /tmp/tmp.hHIFfO2nyp
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.hHIFfO2nyp -o /tmp/tmp.hHIFfO2nyp
NOELLE: FixedPoint:     Invocation 7
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677799e-04%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.998103e-05%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713658e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082745e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710103e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466232e-02%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.429047e-02%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677799e-04%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171827e-04%)
Noelle:  Disable loop "8" as cold code
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.420205e+01%)
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029530e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721500e-08%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596825e-07%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.640819e-01%)
Noelle:     Loop "  %199 = icmp slt i64 %198, %1" (0.000000e+00%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.298298e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368560e-03%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.005047e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.925506e-02%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %132 = icmp sgt i64 %125, %indvars.iv3" (4.273017e-01%)
Noelle:     Loop "  %147 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.263496e-01%)
Noelle:     Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %128" (4.218340e-01%)
Noelle:     Loop "  %170 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545743e-04%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %187 = icmp slt i64 %indvars.iv.i, %184" (5.084693e-08%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %212 = icmp sgt i64 %209, %indvars.iv" (2.975326e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %232 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.309240e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391574e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525972e-05%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326581e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075950e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526791e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.176044e-04%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.476314e-05%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32" (2.496003e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %205" (2.385599e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059426e-03%)
Noelle:  Disable loop "35" as cold code
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.309246e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.309246e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303914e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884968e-05%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303912e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391574e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525972e-05%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326581e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075950e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526791e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.176044e-04%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.476314e-05%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.496003e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.385599e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059426e-03%)
Noelle:  Disable loop "50" as cold code
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.016369e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp sgt i64 %spec.select, %indvars.iv20" (2.004143e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %23" (1.985101e-01%)
Noelle:     Loop "  %53 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349858e+10%)
Noelle:     Loop "  %56 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349858e+10%)
Noelle:     Loop "  %73 = icmp sgt i64 %48, %indvars.iv2" (8.546034e-01%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select, %indvars.iv16" (8.526991e-01%)
Noelle:     Loop "  %92 = icmp slt i64 %indvars.iv.i, %51" (8.436680e-01%)
Noelle:     Loop "  %112 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309149e-03%)
Noelle:  Disable loop "59" as cold code
Noelle:     Loop "  %131 = icmp slt i64 %indvars.iv, %128" (1.016939e-07%)
Noelle:  Disable loop "60" as cold code
Noelle:  Function "_Z11contcentersP6Points"
Noelle:  Disable "_Z11contcentersP6Points" as cold function
Noelle:  Function "_Z7shuffleP6Points"
Noelle:  Disable "_Z7shuffleP6Points" as cold function
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:  Disable "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t" as cold function
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:  Disable "_Z12outcenterIDsP6PointsPlPc" as cold function
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Disable "_ZN9SimStreamC2El" as cold function
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Disable "_ZN9SimStreamD0Ev" as cold function
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Disable "_ZN7PStreamC2Ev" as cold function
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Disable "_ZN9SimStream4feofEv" as cold function
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Disable "_ZN7PStreamD2Ev" as cold function
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Disable "_ZN9SimStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Disable "_ZN10FileStreamD0Ev" as cold function
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Disable "_ZN10FileStreamD2Ev" as cold function
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Disable "_ZN10FileStream4feofEv" as cold function
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Disable "_ZN10FileStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Disable "_ZN10FileStreamC2EPc" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Disable "_ZN7PStreamD0Ev" as cold function
EnablersManager:   Try to improve all 34 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "_Z11localSearchP6PointsllPl"
EnablersManager:     Entry instruction =   %28 = sext i32 %27 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %28 = sext i32 %27 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %29, label %30, label %45, !prof !35
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %232 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %232 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %or.cond24, label %._crit_edge57.._crit_edge52_crit_edge, label %241, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %61, label %62, label %69, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %155, label %156, label %181, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %116, label %117, label %144, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %232 = icmp slt i64 %indvars.iv.i.i, %212
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %232, label %233, label %_Z4distRK5PointS1_i.exit.i, !prof !69
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %213, label %214, label %243, !prof !67
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %89, label %90, label %98, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %31 = icmp slt i64 %.01.us, %6
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %31 = icmp slt i64 %.01.us, %6"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %31, label %34, label %32, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %18 = fdiv double %.0.us, %.02.us
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %18 = fdiv double %.0.us, %.02.us"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %19, label %.preheader3.preheader, label %.us-lcssa.us.loopexit, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %106 = icmp sgt i64 %spec.select, %indvars.iv38
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %106, label %107, label %134, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z4distRK5PointS1_i"
EnablersManager:     Entry instruction =   %10 = icmp slt i64 %indvars.iv, %8
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %10 = icmp slt i64 %indvars.iv, %8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %10, label %11, label %19, !prof !30
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %120 = sext i32 %119 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %120 = sext i32 %119 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %121, label %122, label %137, !prof !54
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca %union.pthread_barrier_t, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %77, label %78, label %._crit_edge17.._crit_edge_crit_edge, !prof !51
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %92 = icmp slt i64 %indvars.iv.i, %51
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %92 = icmp slt i64 %indvars.iv.i, %51"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %92, label %93, label %_Z4distRK5PointS1_i.exit, !prof !42
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %87 = icmp sgt i64 %spec.select, %indvars.iv16
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %87 = icmp sgt i64 %spec.select, %indvars.iv16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %87, label %88, label %._crit_edge26.loopexit, !prof !53
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %73 = icmp sgt i64 %48, %indvars.iv2
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %73 = icmp sgt i64 %48, %indvars.iv2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %73, label %74, label %.loopexit7.loopexit, !prof !51
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %145 = icmp sgt i64 %spec.select, %indvars.iv36
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %145, label %146, label %171, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %38 = icmp sgt i64 %spec.select, %indvars.iv44
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %38, label %39, label %46, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %70 = icmp sgt i64 %spec.select, %indvars.iv40
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %70, label %71, label %79, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %152 = icmp slt i64 %indvars.iv.i.i, %128
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %128"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %152, label %153, label %_Z4distRK5PointS1_i.exit.i, !prof !61
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %147 = icmp sgt i64 %spec.select.i, %indvars.iv16.i
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %147 = icmp sgt i64 %spec.select.i, %indvars.iv16.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %147, label %148, label %._crit_edge26.i.loopexit, !prof !64
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %132 = icmp sgt i64 %125, %indvars.iv3
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %132 = icmp sgt i64 %125, %indvars.iv3"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %132, label %134, label %.loopexit7.loopexit.i.preheader, !prof !62
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i"
LICM:     Invariant = "  %96 = load %struct.Point*, %struct.Point** %23, align 8, !tbaa !42
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %97 = load i32, i32* %14, align 8, !tbaa !37
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %100 = getelementptr inbounds %struct.Point, %struct.Point* %96, i64 0, i32 1
LICM:       Checking dependences
LICM:         Dependent instruction = "  %96 = load %struct.Point*, %struct.Point** %23, align 8, !tbaa !42
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %96 = load %struct.Point*, %struct.Point** %23, align 8, !tbaa !42
LICM:     Invariant = "  %101 = load float*, float** %100, align 8
LICM:       Checking dependences
LICM:         Dependent instruction = "  %100 = getelementptr inbounds %struct.Point, %struct.Point* %96, i64 0, i32 1
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %100 = getelementptr inbounds %struct.Point, %struct.Point* %96, i64 0, i32 1
LICM:     Invariant = "  %102 = sext i32 %97 to i64
LICM:       Checking dependences
LICM:         Dependent instruction = "  %97 = load i32, i32* %14, align 8, !tbaa !37
LICM:       The instruction is conditionally hoisted if the next invariants are hoisted as well:
LICM:         %97 = load i32, i32* %14, align 8, !tbaa !37
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:         Invariant   %100 = getelementptr inbounds %struct.Point, %struct.Point* %96, i64 0, i32 1
LICM:           It can be hoisted
LICM:         Invariant   %101 = load float*, float** %100, align 8
LICM:           It can be hoisted
LICM:         Invariant   %102 = sext i32 %97 to i64
LICM:           It can be hoisted
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %69 = icmp slt i64 %68, %1
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
EnablersManager:     The current loop belongs to the function _Z8pkmedianP6PointsllPliP17pthread_barrier_t , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %225 = icmp slt i64 %indvars.iv.i, %205
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %225 = icmp slt i64 %indvars.iv.i, %205"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %225, label %226, label %_Z4distRK5PointS1_i.exit, !prof !65
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %206 = icmp sgt i64 %spec.select, %indvars.iv32
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %206, label %207, label %236, !prof !63
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %30 = icmp slt i64 %indvars.iv.i1, %23
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %30 = icmp slt i64 %indvars.iv.i1, %23"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %30, label %31, label %_Z4distRK5PointS1_i.exit4, !prof !42
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %25 = icmp sgt i64 %spec.select, %indvars.iv20
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %25 = icmp sgt i64 %spec.select, %indvars.iv20"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %25, label %26, label %44, !prof !41
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677799e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.998103e-05%)
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713658e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082745e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710103e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466232e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.429047e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677799e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171827e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.420205e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029530e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721500e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596825e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.640819e-01%)
Noelle:     Loop "  %199 = icmp slt i64 %198, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.298298e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368560e-03%)
Noelle:     Loop "  %94 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.005047e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %102" (9.925506e-02%)
Noelle:     Loop "  %132 = icmp sgt i64 %125, %indvars.iv3" (4.273017e-01%)
Noelle:     Loop "  %147 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.263496e-01%)
Noelle:     Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %128" (4.218340e-01%)
Noelle:     Loop "  %170 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545743e-04%)
Noelle:     Loop "  %187 = icmp slt i64 %indvars.iv.i, %184" (5.084693e-08%)
Noelle:     Loop "  %212 = icmp sgt i64 %209, %indvars.iv" (2.975326e-04%)
Noelle:     Loop "  %232 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.309240e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391574e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525972e-05%)
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326581e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075950e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526791e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.176044e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.476314e-05%)
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32" (2.496003e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %205" (2.385599e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059426e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.309246e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.309246e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303914e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884968e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303912e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391574e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525972e-05%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326581e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075950e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526791e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.176044e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.476314e-05%)
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.496003e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.385599e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059426e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.016369e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp sgt i64 %spec.select, %indvars.iv20" (2.004143e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %23" (1.985101e-01%)
Noelle:     Loop "  %53 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349858e+10%)
Noelle:     Loop "  %56 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349858e+10%)
Noelle:     Loop "  %73 = icmp sgt i64 %48, %indvars.iv2" (8.546034e-01%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select, %indvars.iv16" (8.526991e-01%)
Noelle:     Loop "  %92 = icmp slt i64 %indvars.iv.i, %51" (8.436680e-01%)
Noelle:     Loop "  %112 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309149e-03%)
Noelle:     Loop "  %131 = icmp slt i64 %indvars.iv, %128" (1.016939e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.941387e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.858093e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.236759e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.198080e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.052839e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.975326e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.171827e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.272672e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.782235e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.518557e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.596825e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.960844e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.894017e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.882244e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677807e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.998109e-05%)
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713657e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082751e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710102e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466242e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.429057e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677807e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171839e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.420203e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029544e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721515e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596833e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.640827e-01%)
Noelle:     Loop "  %199 = icmp slt i64 %198, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.295338e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368564e-03%)
Noelle:     Loop "  %99 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.002075e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %97" (9.925536e-02%)
Noelle:     Loop "  %132 = icmp sgt i64 %125, %indvars.iv3" (4.273029e-01%)
Noelle:     Loop "  %147 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.263508e-01%)
Noelle:     Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %128" (4.218353e-01%)
Noelle:     Loop "  %170 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545762e-04%)
Noelle:     Loop "  %187 = icmp slt i64 %indvars.iv.i, %184" (5.084708e-08%)
Noelle:     Loop "  %212 = icmp sgt i64 %209, %indvars.iv" (2.975335e-04%)
Noelle:     Loop "  %232 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.309267e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391593e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525988e-05%)
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326597e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075977e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526816e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.176054e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.476337e-05%)
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32" (2.496011e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %205" (2.385606e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059441e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.309274e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.309274e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303941e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884974e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303940e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391593e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525988e-05%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326597e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075977e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526816e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.176054e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.476337e-05%)
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.496011e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.385606e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059441e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.016396e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp sgt i64 %spec.select, %indvars.iv20" (2.004149e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %23" (1.985107e-01%)
Noelle:     Loop "  %53 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349868e+10%)
Noelle:     Loop "  %56 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349868e+10%)
Noelle:     Loop "  %73 = icmp sgt i64 %48, %indvars.iv2" (8.546059e-01%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select, %indvars.iv16" (8.527017e-01%)
Noelle:     Loop "  %92 = icmp slt i64 %indvars.iv.i, %51" (8.436705e-01%)
Noelle:     Loop "  %112 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309152e-03%)
Noelle:     Loop "  %131 = icmp slt i64 %indvars.iv, %128" (1.016942e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.941407e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.858114e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.236772e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.198093e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.052846e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.975335e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.171839e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.272681e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.782243e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.518565e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.596833e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.960859e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.894031e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.882250e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint:       There are 0 different instructions and -5 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.hHIFfO2nyp -o /tmp/tmp.hHIFfO2nyp
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.hHIFfO2nyp -o /tmp/tmp.hHIFfO2nyp
NOELLE: FixedPoint:     Invocation 8
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.CA9TkgUQHA -o /tmp/tmp.hHIFfO2nyp
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677807e-04%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.998109e-05%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713657e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082751e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710102e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466242e-02%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.429057e-02%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677807e-04%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171839e-04%)
Noelle:  Disable loop "8" as cold code
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.420203e+01%)
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029544e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721515e-08%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596833e-07%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.640827e-01%)
Noelle:     Loop "  %199 = icmp slt i64 %198, %1" (0.000000e+00%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.295338e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368564e-03%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %99 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.002075e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %97" (9.925536e-02%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %132 = icmp sgt i64 %125, %indvars.iv3" (4.273029e-01%)
Noelle:     Loop "  %147 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.263508e-01%)
Noelle:     Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %128" (4.218353e-01%)
Noelle:     Loop "  %170 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545762e-04%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %187 = icmp slt i64 %indvars.iv.i, %184" (5.084708e-08%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %212 = icmp sgt i64 %209, %indvars.iv" (2.975335e-04%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %232 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.309267e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391593e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525988e-05%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326597e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075977e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526816e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.176054e-04%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.476337e-05%)
Noelle:  Disable loop "32" as cold code
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32" (2.496011e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %205" (2.385606e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059441e-03%)
Noelle:  Disable loop "35" as cold code
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.309274e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.309274e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303941e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884974e-05%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303940e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391593e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525988e-05%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326597e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075977e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526816e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.176054e-04%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.476337e-05%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.496011e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.385606e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059441e-03%)
Noelle:  Disable loop "50" as cold code
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.016396e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp sgt i64 %spec.select, %indvars.iv20" (2.004149e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %23" (1.985107e-01%)
Noelle:     Loop "  %53 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349868e+10%)
Noelle:     Loop "  %56 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349868e+10%)
Noelle:     Loop "  %73 = icmp sgt i64 %48, %indvars.iv2" (8.546059e-01%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select, %indvars.iv16" (8.527017e-01%)
Noelle:     Loop "  %92 = icmp slt i64 %indvars.iv.i, %51" (8.436705e-01%)
Noelle:     Loop "  %112 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309152e-03%)
Noelle:  Disable loop "59" as cold code
Noelle:     Loop "  %131 = icmp slt i64 %indvars.iv, %128" (1.016942e-07%)
Noelle:  Disable loop "60" as cold code
Noelle:  Function "_Z11contcentersP6Points"
Noelle:  Disable "_Z11contcentersP6Points" as cold function
Noelle:  Function "_Z7shuffleP6Points"
Noelle:  Disable "_Z7shuffleP6Points" as cold function
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:  Disable "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t" as cold function
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:  Disable "_Z12outcenterIDsP6PointsPlPc" as cold function
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Disable "_ZN9SimStreamC2El" as cold function
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Disable "_ZN9SimStreamD0Ev" as cold function
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Disable "_ZN7PStreamC2Ev" as cold function
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Disable "_ZN9SimStream4feofEv" as cold function
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Disable "_ZN7PStreamD2Ev" as cold function
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Disable "_ZN9SimStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Disable "_ZN10FileStreamD0Ev" as cold function
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Disable "_ZN10FileStreamD2Ev" as cold function
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Disable "_ZN10FileStream4feofEv" as cold function
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Disable "_ZN10FileStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Disable "_ZN10FileStreamC2EPc" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Disable "_ZN7PStreamD0Ev" as cold function
EnablersManager:   Try to improve all 34 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "_Z11localSearchP6PointsllPl"
EnablersManager:     Entry instruction =   %28 = sext i32 %27 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %28 = sext i32 %27 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %29, label %30, label %45, !prof !35
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %232 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %232 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %or.cond24, label %._crit_edge57.._crit_edge52_crit_edge, label %241, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %61, label %62, label %69, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %116, label %117, label %144, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %155, label %156, label %181, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %232 = icmp slt i64 %indvars.iv.i.i, %212
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %232, label %233, label %_Z4distRK5PointS1_i.exit.i, !prof !69
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %213, label %214, label %243, !prof !67
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %89, label %90, label %98, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %31 = icmp slt i64 %.01.us, %6
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %31 = icmp slt i64 %.01.us, %6"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %31, label %34, label %32, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %18 = fdiv double %.0.us, %.02.us
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %18 = fdiv double %.0.us, %.02.us"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %19, label %.preheader3.preheader, label %.us-lcssa.us.loopexit, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %106 = icmp sgt i64 %spec.select, %indvars.iv38
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %106, label %107, label %134, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z4distRK5PointS1_i"
EnablersManager:     Entry instruction =   %10 = icmp slt i64 %indvars.iv, %8
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %10 = icmp slt i64 %indvars.iv, %8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %10, label %11, label %19, !prof !30
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %120 = sext i32 %119 to i64
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %120 = sext i32 %119 to i64"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %121, label %122, label %137, !prof !54
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z13streamClusterP7PStreamllillPc"
EnablersManager:     Entry instruction =   %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i64, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %struct.Points, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca %union.pthread_barrier_t, align 8
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca %union.pthread_barrier_t, align 8 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %struct.Points, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %77, label %78, label %._crit_edge17.._crit_edge_crit_edge, !prof !51
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %92 = icmp slt i64 %indvars.iv.i, %51
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %92 = icmp slt i64 %indvars.iv.i, %51"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %92, label %93, label %_Z4distRK5PointS1_i.exit, !prof !42
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %87 = icmp sgt i64 %spec.select, %indvars.iv16
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %87 = icmp sgt i64 %spec.select, %indvars.iv16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %87, label %88, label %._crit_edge26.loopexit, !prof !53
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %73 = icmp sgt i64 %48, %indvars.iv2
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %73 = icmp sgt i64 %48, %indvars.iv2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %73, label %74, label %.loopexit7.loopexit, !prof !51
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %145 = icmp sgt i64 %spec.select, %indvars.iv36
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %145, label %146, label %171, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %38 = icmp sgt i64 %spec.select, %indvars.iv44
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %38, label %39, label %46, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %70 = icmp sgt i64 %spec.select, %indvars.iv40
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %70, label %71, label %79, !prof !44
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %152 = icmp slt i64 %indvars.iv.i.i, %128
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %128"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %152, label %153, label %_Z4distRK5PointS1_i.exit.i, !prof !61
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %147 = icmp sgt i64 %spec.select.i, %indvars.iv16.i
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %147 = icmp sgt i64 %spec.select.i, %indvars.iv16.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %147, label %148, label %._crit_edge26.i.loopexit, !prof !64
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %132 = icmp sgt i64 %125, %indvars.iv3
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %132 = icmp sgt i64 %125, %indvars.iv3"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %132, label %134, label %.loopexit7.loopexit.i.preheader, !prof !62
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %99 = icmp sgt i64 %spec.select.i, %indvars.iv20.i
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %99 = icmp sgt i64 %spec.select.i, %indvars.iv20.i"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %99, label %100, label %118, !prof !60
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %69 = icmp slt i64 %68, %1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %69 = icmp slt i64 %68, %1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %69, label %._crit_edge49, label %.us-lcssa.us.loopexit, !prof !55
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %spec.select23, label %196, label %.preheader, !prof !49
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %225 = icmp slt i64 %indvars.iv.i, %205
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %225 = icmp slt i64 %indvars.iv.i, %205"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %225, label %226, label %_Z4distRK5PointS1_i.exit, !prof !65
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %206 = icmp sgt i64 %spec.select, %indvars.iv32
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %206, label %207, label %236, !prof !63
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %30 = icmp slt i64 %indvars.iv.i1, %23
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %30 = icmp slt i64 %indvars.iv.i1, %23"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %30, label %31, label %_Z4distRK5PointS1_i.exit4, !prof !42
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
EnablersManager:     Entry instruction =   %25 = icmp sgt i64 %spec.select, %indvars.iv20
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %25 = icmp sgt i64 %spec.select, %indvars.iv20"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %25, label %26, label %44, !prof !41
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677807e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.998109e-05%)
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713657e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082751e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710102e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466242e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.429057e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677807e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171839e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.420203e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029544e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721515e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596833e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.640827e-01%)
Noelle:     Loop "  %199 = icmp slt i64 %198, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.295338e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368564e-03%)
Noelle:     Loop "  %99 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.002075e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %97" (9.925536e-02%)
Noelle:     Loop "  %132 = icmp sgt i64 %125, %indvars.iv3" (4.273029e-01%)
Noelle:     Loop "  %147 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.263508e-01%)
Noelle:     Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %128" (4.218353e-01%)
Noelle:     Loop "  %170 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545762e-04%)
Noelle:     Loop "  %187 = icmp slt i64 %indvars.iv.i, %184" (5.084708e-08%)
Noelle:     Loop "  %212 = icmp sgt i64 %209, %indvars.iv" (2.975335e-04%)
Noelle:     Loop "  %232 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.309267e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391593e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525988e-05%)
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326597e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075977e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526816e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.176054e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.476337e-05%)
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32" (2.496011e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %205" (2.385606e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059441e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.309274e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.309274e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303941e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884974e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303940e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391593e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525988e-05%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326597e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075977e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526816e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.176054e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.476337e-05%)
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.496011e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.385606e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059441e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.016396e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp sgt i64 %spec.select, %indvars.iv20" (2.004149e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %23" (1.985107e-01%)
Noelle:     Loop "  %53 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349868e+10%)
Noelle:     Loop "  %56 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349868e+10%)
Noelle:     Loop "  %73 = icmp sgt i64 %48, %indvars.iv2" (8.546059e-01%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select, %indvars.iv16" (8.527017e-01%)
Noelle:     Loop "  %92 = icmp slt i64 %indvars.iv.i, %51" (8.436705e-01%)
Noelle:     Loop "  %112 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309152e-03%)
Noelle:     Loop "  %131 = icmp slt i64 %indvars.iv, %128" (1.016942e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.941407e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.858114e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.236772e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.198093e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.052846e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.975335e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.171839e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.272681e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.782243e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.518565e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.596833e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.960859e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.894031e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.882250e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4" (2.677807e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5" (1.998109e-05%)
Noelle:     Loop "  %69 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !47" (4.713657e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %71, %indvars.iv" (2.082751e-04%)
Noelle:     Loop "  %120 = sext i32 %119 to i64" (4.710102e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140" (3.466242e-02%)
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143" (3.429057e-02%)
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140" (2.677807e-04%)
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i" (4.171839e-04%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64" (9.420203e+01%)
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select" (5.029544e-02%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10" (4.721515e-08%)
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select" (2.596833e-07%)
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !54" (2.640827e-01%)
Noelle:     Loop "  %199 = icmp slt i64 %198, %1" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %68, %1" (5.295338e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !40" (1.368564e-03%)
Noelle:     Loop "  %99 = icmp sgt i64 %spec.select.i, %indvars.iv20.i" (1.002075e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %97" (9.925536e-02%)
Noelle:     Loop "  %132 = icmp sgt i64 %125, %indvars.iv3" (4.273029e-01%)
Noelle:     Loop "  %147 = icmp sgt i64 %spec.select.i, %indvars.iv16.i" (4.263508e-01%)
Noelle:     Loop "  %152 = icmp slt i64 %indvars.iv.i.i, %128" (4.218353e-01%)
Noelle:     Loop "  %170 = icmp sgt i64 %spec.select.i, %indvars.iv14.i" (6.545762e-04%)
Noelle:     Loop "  %187 = icmp slt i64 %indvars.iv.i, %184" (5.084708e-08%)
Noelle:     Loop "  %212 = icmp sgt i64 %209, %indvars.iv" (2.975335e-04%)
Noelle:     Loop "  %232 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !35" (9.309267e+01%)
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:     Loop "  %38 = icmp sgt i64 %spec.select, %indvars.iv44" (6.391593e-01%)
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv42, %54" (5.525988e-05%)
Noelle:     Loop "  %70 = icmp sgt i64 %spec.select, %indvars.iv40" (5.326597e-01%)
Noelle:     Loop "  %106 = icmp sgt i64 %spec.select, %indvars.iv38" (9.075977e+01%)
Noelle:     Loop "  %145 = icmp sgt i64 %spec.select, %indvars.iv36" (8.526816e-01%)
Noelle:     Loop "  %153 = icmp slt i32 %.03, %97" (3.176054e-04%)
Noelle:     Loop "  %184 = icmp slt i64 %indvars.iv34, %180" (7.476337e-05%)
Noelle:     Loop "  %206 = icmp sgt i64 %spec.select, %indvars.iv32" (2.496011e-01%)
Noelle:     Loop "  %225 = icmp slt i64 %indvars.iv.i, %205" (2.385606e-01%)
Noelle:     Loop "  %240 = icmp sgt i64 %spec.select, %indvars.iv" (5.059441e-03%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %273 = fdiv double %.0, %.02" (9.309274e+01%)
Noelle:     Loop "  %275 = icmp slt i64 %.01, %6" (9.309274e+01%)
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us" (9.303941e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13" (1.884974e-05%)
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6" (9.303940e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i" (6.391593e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73" (5.525988e-05%)
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i" (5.326597e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i" (9.075977e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i" (8.526816e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109" (3.176054e-04%)
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189" (7.476337e-05%)
Noelle:     Loop "  %213 = icmp sgt i64 %spec.select.i, %indvars.iv32.i" (2.496011e-01%)
Noelle:     Loop "  %232 = icmp slt i64 %indvars.iv.i.i, %212" (2.385606e-01%)
Noelle:     Loop "  %247 = icmp sgt i64 %spec.select.i, %indvars.iv.i" (5.059441e-03%)
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (9.016396e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp sgt i64 %spec.select, %indvars.iv20" (2.004149e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %23" (1.985107e-01%)
Noelle:     Loop "  %53 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !37" (3.349868e+10%)
Noelle:     Loop "  %56 = icmp sgt i64 %spec.select, %indvars.iv18" (3.349868e+10%)
Noelle:     Loop "  %73 = icmp sgt i64 %48, %indvars.iv2" (8.546059e-01%)
Noelle:     Loop "  %87 = icmp sgt i64 %spec.select, %indvars.iv16" (8.527017e-01%)
Noelle:     Loop "  %92 = icmp slt i64 %indvars.iv.i, %51" (8.436705e-01%)
Noelle:     Loop "  %112 = icmp sgt i64 %spec.select, %indvars.iv14" (1.309152e-03%)
Noelle:     Loop "  %131 = icmp slt i64 %indvars.iv, %128" (1.016942e-07%)
Noelle:  Function "_Z11contcentersP6Points"
Noelle:     Loop "  %7 = icmp slt i64 %.0, %3" (6.941407e-02%)
Noelle:     Loop "  %27 = icmp slt i64 %.01, %21" (6.858114e-02%)
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:     Loop "  %9 = icmp slt i64 %.02, %7" (4.236772e-02%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %6" (4.198093e-02%)
Noelle:  Function "_Z7shuffleP6Points"
Noelle:     Loop "  %7 = load i64, i64* %4, align 8, !tbaa !30" (2.052846e-03%)
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:     Loop "  %10 = icmp slt i64 %.01, %6" (2.975335e-04%)
Noelle:     Loop "  %23 = icmp slt i64 %.12, %.pre3" (4.171839e-04%)
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:     Loop "  %43 = icmp sgt i64 %25, %indvars.iv16" (3.272681e-04%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv14, %20" (2.782243e-05%)
Noelle:     Loop "  %69 = add nsw i32 %.06, 1" (2.518565e-05%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:     Loop "  %18 = icmp sgt i64 %13, %indvars.iv10" (2.596833e-07%)
Noelle:     Loop "  %27 = icmp sgt i64 %.pre6, %indvars.iv8" (4.960859e-05%)
Noelle:     Loop "  %44 = load i32, i32* %25, align 8, !tbaa !48" (4.894031e-05%)
Noelle:  Function "_Z10intshufflePii"
Noelle:     Loop "  %5 = icmp slt i64 %.0, %3" (1.882250e-05%)
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Function "__cxx_global_var_init"
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Function "atoi"
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:     Loop "  %5 = icmp ne i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Function "_ZN10FileStream4readEPfii"
NOELLE: FixedPoint: Exit
NOELLE: Enablers: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true baseline_pre.bc -o baseline_pre.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata baseline_pre.bc -o baseline_pre.bc
Running: ./baseline_pre_prof 10 20 128 16384 16384 1000 none output.txt 1 in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/streamcluster
PARSEC Benchmark Suite Version 3.0-beta-20150206
read 16384 points
--------------------------------------------------------------------------------------
DONE
opt -pgo-test-profile-file=/tmp/tmp.VlXxj2ZQ6K -block-freq -pgo-instr-use baseline_pre.bc -o baseline_with_metadata.bc
noelle-load -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
PDGAnalysis: Construct PDG from Analysis
Embed PDG as metadata
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4, !noelle.pdg.inst.id !4581" (2.839218e-04%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5, !noelle.pdg.inst.id !4603" (2.118549e-05%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %68 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !4623, !noelle.pdg.inst.id !79" (5.001458e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %70, %indvars.iv, !noelle.pdg.inst.id !4647" (2.208293e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %120 = sext i32 %119 to i64, !noelle.pdg.inst.id !4675" (4.994013e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140, !noelle.pdg.inst.id !4704" (7.350320e-02%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143, !noelle.pdg.inst.id !4723" (7.271494e-02%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140, !noelle.pdg.inst.id !4750" (2.839218e-04%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i, !noelle.pdg.inst.id !4763" (4.423306e-04%)
Noelle:  Disable loop "8" as cold code
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select, !noelle.pdg.inst.id !1999" (5.332711e-02%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10, !noelle.pdg.inst.id !2021" (5.006114e-08%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select, !noelle.pdg.inst.id !2037" (2.753363e-07%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !2051, !noelle.pdg.inst.id !182" (1.603586e-01%)
Noelle:     Loop "  %194 = icmp slt i64 %193, %1, !noelle.pdg.inst.id !2238" (0.000000e+00%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %69 = icmp slt i64 %68, %1, !noelle.pdg.inst.id !2077" (8.007370e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !1987, !noelle.pdg.inst.id !184" (1.451057e-03%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %99 = icmp sgt i64 %spec.select.i, %indvars.iv20.i, !noelle.pdg.inst.id !2112" (1.062477e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %97, !noelle.pdg.inst.id !2120" (1.052382e-01%)
Noelle:     Loop "  %128 = icmp sgt i64 %125, %indvars.iv3, !noelle.pdg.inst.id !2147" (6.923439e-01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select.i, %indvars.iv16.i, !noelle.pdg.inst.id !2165" (6.913344e-01%)
Noelle:     Loop "  %147 = icmp slt i64 %indvars.iv.i.i, %97, !noelle.pdg.inst.id !2173" (6.840482e-01%)
Noelle:     Loop "  %166 = icmp sgt i64 %spec.select.i, %indvars.iv14.i, !noelle.pdg.inst.id !2203" (6.940322e-04%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %182 = icmp slt i64 %indvars.iv.i, %179, !noelle.pdg.inst.id !2219" (5.391200e-08%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %207 = icmp sgt i64 %204, %indvars.iv, !noelle.pdg.inst.id !2267" (3.154680e-04%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %227 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !1979, !noelle.pdg.inst.id !47" (9.870403e+01%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %269 = fdiv double %.0, %.02, !noelle.pdg.inst.id !1798" (0.000000e+00%)
Noelle:  Disable loop "25" as cold code
Noelle:     Loop "  %271 = icmp slt i64 %.01, %6, !noelle.pdg.inst.id !1805" (0.000000e+00%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us, !noelle.pdg.inst.id !1474" (9.864757e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13, !noelle.pdg.inst.id !1481" (1.998595e-05%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6, !noelle.pdg.inst.id !1499" (9.864755e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i, !noelle.pdg.inst.id !1541" (6.776860e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73, !noelle.pdg.inst.id !1567" (5.859079e-05%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i, !noelle.pdg.inst.id !1581" (5.647669e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i, !noelle.pdg.inst.id !1606" (9.623051e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i, !noelle.pdg.inst.id !1650" (9.040788e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109, !noelle.pdg.inst.id !1661" (3.367497e-04%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189, !noelle.pdg.inst.id !1701" (7.926989e-05%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %209 = icmp sgt i64 %spec.select.i, %indvars.iv32.i, !noelle.pdg.inst.id !1722" (2.646463e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i.i, %208, !noelle.pdg.inst.id !1742" (2.529403e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select.i, %indvars.iv.i, !noelle.pdg.inst.id !1762" (5.364409e-03%)
Noelle:  Disable loop "39" as cold code
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8, !noelle.pdg.inst.id !41" (9.424084e+01%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64, !noelle.pdg.inst.id !307" (4.994013e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp sgt i64 %spec.select, %indvars.iv20, !noelle.pdg.inst.id !321" (1.062477e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %23, !noelle.pdg.inst.id !329" (1.052382e-01%)
Noelle:     Loop "  %50 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !301, !noelle.pdg.inst.id !361" (3.227018e-06%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  %54 = icmp sgt i64 %spec.select, %indvars.iv18, !noelle.pdg.inst.id !369" (3.227018e-06%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %68 = icmp sgt i64 %48, %indvars.iv2, !noelle.pdg.inst.id !385" (2.137752e-01%)
Noelle:     Loop "  %81 = icmp sgt i64 %spec.select, %indvars.iv16, !noelle.pdg.inst.id !400" (2.127657e-01%)
Noelle:     Loop "  %86 = icmp slt i64 %indvars.iv.i, %23, !noelle.pdg.inst.id !408" (2.104764e-01%)
Noelle:     Loop "  %107 = icmp sgt i64 %spec.select, %indvars.iv14, !noelle.pdg.inst.id !444" (6.940322e-04%)
Noelle:  Disable loop "49" as cold code
Noelle:     Loop "  %126 = icmp slt i64 %indvars.iv, %123, !noelle.pdg.inst.id !465" (5.391200e-08%)
Noelle:  Disable loop "50" as cold code
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:  Disable "_ZN9SimStream4readEPfii" as cold function
Noelle:  Function "_Z7shuffleP6Points"
Noelle:  Disable "_Z7shuffleP6Points" as cold function
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:  Disable "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t" as cold function
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:  Disable "_Z12outcenterIDsP6PointsPlPc" as cold function
Noelle:  Function "_Z11contcentersP6Points"
Noelle:  Disable "_Z11contcentersP6Points" as cold function
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Disable "_ZN9SimStreamC2El" as cold function
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Disable "_GLOBAL__sub_I_streamcluster.cpp" as cold function
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Disable "_ZN9SimStreamD0Ev" as cold function
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Disable "_ZN7PStreamC2Ev" as cold function
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Disable "_ZN9SimStream4feofEv" as cold function
Noelle:  Function "__cxx_global_var_init"
Noelle:  Disable "__cxx_global_var_init" as cold function
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Disable "_ZN9SimStream6ferrorEv" as cold function
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Disable "_ZN7PStreamD2Ev" as cold function
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Disable "_ZN10FileStreamC2EPc" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Disable "_ZN7PStreamD0Ev" as cold function
Noelle:  Function "_Z10intshufflePii"
Noelle:  Disable "_Z10intshufflePii" as cold function
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:  Disable "_Z11isIdenticalPfS_i" as cold function
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:  Disable "_Z5pgainlP6PointsdPliP17pthread_barrier_t" as cold function
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Disable "_ZN10FileStreamD0Ev" as cold function
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Disable "_ZN10FileStreamD2Ev" as cold function
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Disable "_ZN10FileStream4feofEv" as cold function
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Disable "_ZN10FileStream6ferrorEv" as cold function
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:  Disable "_Z11copycentersP6PointsS0_Pll" as cold function
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Disable "_Z14localSearchSubPv" as cold function
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Disable "_ZN10FileStream4readEPfii" as cold function
Planner:    There are 25 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:    Loop 10 has 1.668000e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 62 has 1.000000e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 25 has 2.000000e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 36 has 1.668000e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 68 has 1.000000e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 70 has 1.000000e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 45 has 1.000000e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 3 has 1.668000e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 5 has 1.668000e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 47 has 2.000000e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 53 has 1.668000e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 50 has 1.668000e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 57 has 7.000000e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:  There are 5 loop nesting trees in the program
Planner:    ID: 49 (1)
Planner:      Function: "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Planner:      Loop: "  %99 = icmp sgt i64 %spec.select.i, %indvars.iv20.i, !noelle.pdg.inst.id !2112"
Planner:      Loop nesting level: 2
Planner:      Hotness = 1.062477e-01 %
Planner:      Average instructions per invocation = 2.759066e+07 %
Planner:      Average iterations per invocation = 1.638450e+04 %
Planner:    
Planner:    ID: 51 (1)
Planner:      Function: "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Planner:      Loop: "  %128 = icmp sgt i64 %125, %indvars.iv3, !noelle.pdg.inst.id !2147"
Planner:      Loop nesting level: 2
Planner:      Hotness = 6.923439e-01 %
Planner:      Average instructions per invocation = 1.797896e+08 %
Planner:      Average iterations per invocation = 1.638350e+04 %
Planner:    
Planner:      ID: 52 (2)
Planner:        Function: "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Planner:        Loop: "  %142 = icmp sgt i64 %spec.select.i, %indvars.iv16.i, !noelle.pdg.inst.id !2165"
Planner:        Loop nesting level: 3
Planner:        Hotness = 6.913344e-01 %
Planner:        Average instructions per invocation = 2.761960e+07 %
Planner:        Average iterations per invocation = 1.638492e+04 %
Planner:      
Planner:    ID: 27 (1)
Planner:      Function: "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Planner:      Loop: "  %31 = icmp slt i64 %.01.us, %6, !noelle.pdg.inst.id !1499"
Planner:      Loop nesting level: 2
Planner:      Hotness = 9.864755e+01 %
Planner:      Average instructions per invocation = 5.123407e+09 %
Planner:      Average iterations per invocation = 1.799000e+02 %
Planner:    
Planner:      ID: 31 (2)
Planner:        Function: "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Planner:        Loop: "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i, !noelle.pdg.inst.id !1606"
Planner:        Loop nesting level: 3
Planner:        Hotness = 9.623051e+01 %
Planner:        Average instructions per invocation = 2.792109e+07 %
Planner:        Average iterations per invocation = 1.638500e+04 %
Planner:      
Planner:      ID: 30 (2)
Planner:        Function: "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Planner:        Loop: "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i, !noelle.pdg.inst.id !1581"
Planner:        Loop nesting level: 3
Planner:        Hotness = 5.647669e-01 %
Planner:        Average instructions per invocation = 1.638660e+05 %
Planner:        Average iterations per invocation = 1.638500e+04 %
Planner:      
Planner:      ID: 32 (2)
Planner:        Function: "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Planner:        Loop: "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i, !noelle.pdg.inst.id !1650"
Planner:        Loop nesting level: 3
Planner:        Hotness = 9.040788e-01 %
Planner:        Average instructions per invocation = 2.623167e+05 %
Planner:        Average iterations per invocation = 1.638500e+04 %
Planner:      
Planner:      ID: 35 (2)
Planner:        Function: "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Planner:        Loop: "  %209 = icmp sgt i64 %spec.select.i, %indvars.iv32.i, !noelle.pdg.inst.id !1722"
Planner:        Loop nesting level: 3
Planner:        Hotness = 2.646463e-01 %
Planner:        Average instructions per invocation = 8.085177e+06 %
Planner:        Average iterations per invocation = 1.638494e+04 %
Planner:      
Planner:      ID: 28 (2)
Planner:        Function: "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Planner:        Loop: "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i, !noelle.pdg.inst.id !1541"
Planner:        Loop nesting level: 3
Planner:        Hotness = 6.776860e-01 %
Planner:        Average instructions per invocation = 1.966292e+05 %
Planner:        Average iterations per invocation = 1.638500e+04 %
Planner:      
Planner:    ID: 8 (1)
Planner:      Function: "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Planner:      Loop: "  %68 = icmp sgt i64 %48, %indvars.iv2, !noelle.pdg.inst.id !385"
Planner:      Loop nesting level: 1
Planner:      Hotness = 2.137752e-01 %
Planner:      Average instructions per invocation = 5.551366e+07 %
Planner:      Average iterations per invocation = 1.638350e+04 %
Planner:    
Planner:      ID: 9 (2)
Planner:        Function: "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Planner:        Loop: "  %81 = icmp sgt i64 %spec.select, %indvars.iv16, !noelle.pdg.inst.id !400"
Planner:        Loop nesting level: 2
Planner:        Hotness = 2.127657e-01 %
Planner:        Average instructions per invocation = 2.762576e+07 %
Planner:        Average iterations per invocation = 1.638475e+04 %
Planner:      
Planner:    ID: 4 (1)
Planner:      Function: "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Planner:      Loop: "  %25 = icmp sgt i64 %spec.select, %indvars.iv20, !noelle.pdg.inst.id !321"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.062477e-01 %
Planner:      Average instructions per invocation = 2.759066e+07 %
Planner:      Average iterations per invocation = 1.638450e+04 %
Planner:    
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8, !noelle.pdg.inst.id !1969
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8, !noelle.pdg.inst.id !1969
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 49 saves only 1.062477e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8, !noelle.pdg.inst.id !1969
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8, !noelle.pdg.inst.id !1969
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8, !noelle.pdg.inst.id !1969
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %struct.Point, align 8, !noelle.pdg.inst.id !1969
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 52 saves only 6.913344e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 51 saves only 5.468992e-02 when parallelized. Skip it
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 27 saves only 4.735714e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 30 saves only 5.647669e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 32 saves only 7.911003e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 28 saves only 5.647273e-01 when parallelized. Skip it
Planner: LoopSelector:  Loop 35 saves only 2.646463e-01 when parallelized. Skip it
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 31
Planner: LoopSelector:      Function: "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i, !noelle.pdg.inst.id !1606"
Planner: LoopSelector:      Coverage: 9.623051e+01%
Planner: LoopSelector:      Whole-program savings = 9.607873e+01%
Planner: LoopSelector:      Loop savings = 9.984227e+01%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 8 saves only 1.738342e-02 when parallelized. Skip it
Planner: LoopSelector:  Loop 9 saves only 2.127657e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 4 saves only 1.062477e-01 when parallelized. Skip it
Planner:   Maximum time saved = 9.826397e+01% (51034857461)
Planner:   Maximum time saved with DOALL only = 0.000000e+00% (0)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "_Z13streamClusterP7PStreamllillPc"
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv12, %4, !noelle.pdg.inst.id !4583" (2.839218e-04%)
Noelle:  Disable loop "0" as cold code
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv10, %5, !noelle.pdg.inst.id !4605" (2.118549e-05%)
Noelle:  Disable loop "1" as cold code
Noelle:     Loop "  %68 = load i64 (%class.PStream*, float*, i32, i32)**, i64 (%class.PStream*, float*, i32, i32)*** %63, align 8, !tbaa !4625, !noelle.pdg.inst.id !81" (5.001458e+01%)
Noelle:     Loop "  %91 = icmp sgt i64 %70, %indvars.iv, !noelle.pdg.inst.id !4649" (2.208293e-04%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %120 = sext i32 %119 to i64, !noelle.pdg.inst.id !4677" (4.994013e+01%)
Noelle:     Loop "  %145 = icmp slt i64 %.0.i1, %140, !noelle.pdg.inst.id !4706" (7.350320e-02%)
Noelle:  Disable loop "5" as cold code
Noelle:     Loop "  %162 = icmp slt i64 %.01.i4, %143, !noelle.pdg.inst.id !4725" (7.271494e-02%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %193 = icmp slt i64 %.01.i, %140, !noelle.pdg.inst.id !4752" (2.839218e-04%)
Noelle:  Disable loop "7" as cold code
Noelle:     Loop "  %200 = icmp slt i64 %.12.i, %.pre3.i, !noelle.pdg.inst.id !4765" (4.423306e-04%)
Noelle:  Disable loop "8" as cold code
Noelle:  Function "_Z8pkmedianP6PointsllPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp slt i64 %.04, %spec.select, !noelle.pdg.inst.id !2001" (5.332711e-02%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv42, %10, !noelle.pdg.inst.id !2023" (5.006114e-08%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %49 = icmp slt i64 %.02, %spec.select, !noelle.pdg.inst.id !2039" (2.753363e-07%)
Noelle:  Disable loop "11" as cold code
Noelle:     Loop "  %64 = load i64, i64* @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE1k, align 8, !tbaa !2053, !noelle.pdg.inst.id !184" (1.603586e-01%)
Noelle:     Loop "  %194 = icmp slt i64 %193, %1, !noelle.pdg.inst.id !2240" (0.000000e+00%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %69 = icmp slt i64 %68, %1, !noelle.pdg.inst.id !2079" (8.007370e-01%)
Noelle:     Loop "  %71 = load i64, i64* %13, align 8, !tbaa !1989, !noelle.pdg.inst.id !186" (1.451057e-03%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %99 = icmp sgt i64 %spec.select.i, %indvars.iv20.i, !noelle.pdg.inst.id !2114" (1.062477e-01%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv.i1.i, %97, !noelle.pdg.inst.id !2122" (1.052382e-01%)
Noelle:     Loop "  %128 = icmp sgt i64 %125, %indvars.iv3, !noelle.pdg.inst.id !2149" (6.923439e-01%)
Noelle:     Loop "  %142 = icmp sgt i64 %spec.select.i, %indvars.iv16.i, !noelle.pdg.inst.id !2167" (6.913344e-01%)
Noelle:     Loop "  %147 = icmp slt i64 %indvars.iv.i.i, %97, !noelle.pdg.inst.id !2175" (6.840482e-01%)
Noelle:     Loop "  %166 = icmp sgt i64 %spec.select.i, %indvars.iv14.i, !noelle.pdg.inst.id !2205" (6.940322e-04%)
Noelle:  Disable loop "21" as cold code
Noelle:     Loop "  %182 = icmp slt i64 %indvars.iv.i, %179, !noelle.pdg.inst.id !2221" (5.391200e-08%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %207 = icmp sgt i64 %204, %indvars.iv, !noelle.pdg.inst.id !2269" (3.154680e-04%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %227 = load i32*, i32** @_ZZ8pkmedianP6PointsllPliP17pthread_barrier_tE8feasible, align 8, !tbaa !1981, !noelle.pdg.inst.id !49" (9.870403e+01%)
Noelle:  Function "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Noelle:     Loop "  %269 = fdiv double %.0, %.02, !noelle.pdg.inst.id !1801" (0.000000e+00%)
Noelle:  Disable loop "25" as cold code
Noelle:     Loop "  %271 = icmp slt i64 %.01, %6, !noelle.pdg.inst.id !1808" (0.000000e+00%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  %18 = fdiv double %.0.us, %.02.us, !noelle.pdg.inst.id !1476" (9.864757e+01%)
Noelle:     Loop "  %20 = icmp slt i64 %.0.i, %13, !noelle.pdg.inst.id !1483" (1.998595e-05%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  %31 = icmp slt i64 %.01.us, %6, !noelle.pdg.inst.id !1501" (9.864755e+01%)
Noelle:     Loop "  %61 = icmp sgt i64 %spec.select.i, %indvars.iv44.i, !noelle.pdg.inst.id !1543" (6.776860e-01%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv42.i, %73, !noelle.pdg.inst.id !1569" (5.859079e-05%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %89 = icmp sgt i64 %spec.select.i, %indvars.iv40.i, !noelle.pdg.inst.id !1583" (5.647669e-01%)
Noelle:     Loop "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i, !noelle.pdg.inst.id !1608" (9.623051e+01%)
Noelle:     Loop "  %155 = icmp sgt i64 %spec.select.i, %indvars.iv36.i, !noelle.pdg.inst.id !1653" (9.040788e-01%)
Noelle:     Loop "  %163 = icmp slt i32 %.03.i, %109, !noelle.pdg.inst.id !1664" (3.367497e-04%)
Noelle:  Disable loop "35" as cold code
Noelle:     Loop "  %192 = icmp slt i64 %indvars.iv34.i, %189, !noelle.pdg.inst.id !1704" (7.926989e-05%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %209 = icmp sgt i64 %spec.select.i, %indvars.iv32.i, !noelle.pdg.inst.id !1725" (2.646463e-01%)
Noelle:     Loop "  %228 = icmp slt i64 %indvars.iv.i.i, %208, !noelle.pdg.inst.id !1745" (2.529403e-01%)
Noelle:     Loop "  %243 = icmp sgt i64 %spec.select.i, %indvars.iv.i, !noelle.pdg.inst.id !1765" (5.364409e-03%)
Noelle:  Disable loop "39" as cold code
Noelle:  Function "_Z4distRK5PointS1_i"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8, !noelle.pdg.inst.id !43" (9.424084e+01%)
Noelle:  Function "_Z11localSearchP6PointsllPl"
Noelle:     Loop "  %28 = sext i32 %27 to i64, !noelle.pdg.inst.id !309" (4.994013e+01%)
Noelle:  Function "_Z7pspeedyP6PointsfPliP17pthread_barrier_t"
Noelle:     Loop "  %25 = icmp sgt i64 %spec.select, %indvars.iv20, !noelle.pdg.inst.id !323" (1.062477e-01%)
Noelle:     Loop "  %30 = icmp slt i64 %indvars.iv.i1, %23, !noelle.pdg.inst.id !331" (1.052382e-01%)
Noelle:     Loop "  %50 = load i32, i32* @_ZZ7pspeedyP6PointsfPliP17pthread_barrier_tE1i, align 4, !tbaa !303, !noelle.pdg.inst.id !363" (3.227018e-06%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  %54 = icmp sgt i64 %spec.select, %indvars.iv18, !noelle.pdg.inst.id !371" (3.227018e-06%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %68 = icmp sgt i64 %48, %indvars.iv2, !noelle.pdg.inst.id !387" (2.137752e-01%)
Noelle:     Loop "  %81 = icmp sgt i64 %spec.select, %indvars.iv16, !noelle.pdg.inst.id !402" (2.127657e-01%)
Noelle:     Loop "  %86 = icmp slt i64 %indvars.iv.i, %23, !noelle.pdg.inst.id !410" (2.104764e-01%)
Noelle:     Loop "  %107 = icmp sgt i64 %spec.select, %indvars.iv14, !noelle.pdg.inst.id !446" (6.940322e-04%)
Noelle:  Disable loop "49" as cold code
Noelle:     Loop "  %126 = icmp slt i64 %indvars.iv, %123, !noelle.pdg.inst.id !467" (5.391200e-08%)
Noelle:  Disable loop "50" as cold code
Noelle:  Function "_ZN9SimStream4readEPfii"
Noelle:  Disable "_ZN9SimStream4readEPfii" as cold function
Noelle:  Function "_Z7shuffleP6Points"
Noelle:  Disable "_Z7shuffleP6Points" as cold function
Noelle:  Function "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t"
Noelle:  Disable "_Z19selectfeasible_fastP6PointsPPiiiP17pthread_barrier_t" as cold function
Noelle:  Function "_Z12outcenterIDsP6PointsPlPc"
Noelle:  Disable "_Z12outcenterIDsP6PointsPlPc" as cold function
Noelle:  Function "_Z11contcentersP6Points"
Noelle:  Disable "_Z11contcentersP6Points" as cold function
Noelle:  Function "_ZN9SimStreamC2El"
Noelle:  Disable "_ZN9SimStreamC2El" as cold function
Noelle:  Function "_GLOBAL__sub_I_streamcluster.cpp"
Noelle:  Disable "_GLOBAL__sub_I_streamcluster.cpp" as cold function
Noelle:  Function "_ZN9SimStreamD0Ev"
Noelle:  Disable "_ZN9SimStreamD0Ev" as cold function
Noelle:  Function "_ZN9SimStream4feofEv"
Noelle:  Disable "_ZN9SimStream4feofEv" as cold function
Noelle:  Function "_ZN7PStreamC2Ev"
Noelle:  Disable "_ZN7PStreamC2Ev" as cold function
Noelle:  Function "__cxx_global_var_init"
Noelle:  Disable "__cxx_global_var_init" as cold function
Noelle:  Function "_ZN9SimStream6ferrorEv"
Noelle:  Disable "_ZN9SimStream6ferrorEv" as cold function
Noelle:  Function "_ZN7PStreamD2Ev"
Noelle:  Disable "_ZN7PStreamD2Ev" as cold function
Noelle:  Function "_Z14localSearchSubPv"
Noelle:  Disable "_Z14localSearchSubPv" as cold function
Noelle:  Function "_Z11copycentersP6PointsS0_Pll"
Noelle:  Disable "_Z11copycentersP6PointsS0_Pll" as cold function
Noelle:  Function "_Z5pgainlP6PointsdPliP17pthread_barrier_t"
Noelle:  Disable "_Z5pgainlP6PointsdPliP17pthread_barrier_t" as cold function
Noelle:  Function "_ZN10FileStream4feofEv"
Noelle:  Disable "_ZN10FileStream4feofEv" as cold function
Noelle:  Function "_ZN7PStreamD0Ev"
Noelle:  Disable "_ZN7PStreamD0Ev" as cold function
Noelle:  Function "_ZN10FileStreamD0Ev"
Noelle:  Disable "_ZN10FileStreamD0Ev" as cold function
Noelle:  Function "_ZN10FileStreamD2Ev"
Noelle:  Disable "_ZN10FileStreamD2Ev" as cold function
Noelle:  Function "_ZN10FileStream6ferrorEv"
Noelle:  Disable "_ZN10FileStream6ferrorEv" as cold function
Noelle:  Function "_ZN10FileStream4readEPfii"
Noelle:  Disable "_ZN10FileStream4readEPfii" as cold function
Noelle:  Function "_ZN10FileStreamC2EPc"
Noelle:  Disable "_ZN10FileStreamC2EPc" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "_Z10intshufflePii"
Noelle:  Disable "_Z10intshufflePii" as cold function
Noelle:  Function "_Z11isIdenticalPfS_i"
Noelle:  Disable "_Z11isIdenticalPfS_i" as cold function
Parallelizer:    There are 25 loops in the program we are going to consider
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "_Z3pFLP6PointsPiifPldlfiP17pthread_barrier_t"
Parallelizer: parallelizerLoop:   Loop 31 = "  %116 = icmp sgt i64 %spec.select.i, %indvars.iv38.i, !noelle.pdg.inst.id !1608"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %spec.select.i = select i1 %43, i64 %39, i64 %42, !prof !1518, !noelle.pdg.inst.id !1519
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %108 = load double*, double** @_ZZ5pgainlP6PointsdPliP17pthread_barrier_tE8work_mem, align 8, !tbaa !1537, !noelle.pdg.inst.id !132
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %110 = load %struct.Point*, %struct.Point** %16, align 8, !tbaa !1602, !noelle.pdg.inst.id !136
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %111 = getelementptr inbounds %struct.Point, %struct.Point* %110, i64 %38, !noelle.pdg.inst.id !1603
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %112 = load i32, i32* %17, align 8, !tbaa !1604, !noelle.pdg.inst.id !138
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %113 = load i32*, i32** @_ZL12center_table, align 8, !tbaa !1537, !noelle.pdg.inst.id !140
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %114 = load i8*, i8** @_ZL17switch_membership, align 8, !tbaa !1537, !noelle.pdg.inst.id !142
Parallelizer: parallelizerLoop:   Environment:   Live-out 7 =   %.013.i = phi double [ %.114.i, %143 ], [ 0.000000e+00, %98 ], !noelle.pdg.inst.id !1607
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc streamcluster.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/streamcluster'
