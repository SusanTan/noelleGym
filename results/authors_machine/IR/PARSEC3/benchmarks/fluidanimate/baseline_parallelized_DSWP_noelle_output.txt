make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/fluidanimate'
./runEnablers.sh fluidanimate fluidanimate.bc simlarge "-lm -lstdc++ -lpthread -L../../parsec-3.0/pkgs/apps/x264/inst/amd64-linux.gclang/lib -lx264 -L/usr/lib64 -L/usr/lib" -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/fluidanimate /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/fluidanimate
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/fluidanimate
The IR has already been transformed for enabling parallelization
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, %23, !noelle.pdg.inst.id !182" (9.893907e+01%)
Noelle:  Function "_Z12AdvanceFramev"
Noelle:  Function "_Z13ComputeForcesv"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv58, %24, !noelle.pdg.inst.id !3403" (1.875137e-01%)
Noelle:     Loop "  %32 = icmp slt i32 %.05, %30, !noelle.pdg.inst.id !3412" (1.546733e-01%)
Noelle:     Loop "  %66 = icmp slt i64 %indvars.iv90, %63, !noelle.pdg.inst.id !3457" (3.203275e+01%)
Noelle:     Loop "  %69 = icmp slt i64 %indvars.iv88, %59, !noelle.pdg.inst.id !3466" (3.203273e+01%)
Noelle:     Loop "  %75 = icmp slt i64 %indvars.iv86, %61, !noelle.pdg.inst.id !3477" (3.203170e+01%)
Noelle:     Loop "  %85 = icmp eq i64 %indvars.iv83, 2, !noelle.pdg.inst.id !3492" (1.368649e+00%)
Noelle:     Loop "  %89 = icmp eq i64 %indvars.iv80, 2, !noelle.pdg.inst.id !3504" (1.299458e+00%)
Noelle:     Loop "  %96 = icmp eq i64 %indvars.iv77, 2, !noelle.pdg.inst.id !3525" (1.036190e+00%)
Noelle:     Loop "  %119 = icmp slt i32 %.016, %78, !noelle.pdg.inst.id !3568" (3.060445e+01%)
Noelle:     Loop "  %129 = icmp slt i64 %indvars.iv54, %117, !noelle.pdg.inst.id !3581" (3.044969e+01%)
Noelle:     Loop "  %138 = icmp slt i32 %.023, %136, !noelle.pdg.inst.id !3592" (2.911907e+01%)
Noelle:     Loop "  %199 = icmp slt i64 %indvars.iv52, %24, !noelle.pdg.inst.id !3669" (1.875137e-01%)
Noelle:     Loop "  %205 = icmp slt i32 %.027, %203, !noelle.pdg.inst.id !3677" (1.546733e-01%)
Noelle:     Loop "  %240 = sext i32 %239 to i64, !noelle.pdg.inst.id !3716" (6.212268e+01%)
Noelle:     Loop "  %244 = icmp slt i64 %indvars.iv73, %59, !noelle.pdg.inst.id !3725" (6.212266e+01%)
Noelle:     Loop "  %250 = icmp slt i64 %indvars.iv71, %61, !noelle.pdg.inst.id !3735" (6.212162e+01%)
Noelle:     Loop "  %260 = icmp eq i64 %indvars.iv68, 2, !noelle.pdg.inst.id !3748" (1.368649e+00%)
Noelle:     Loop "  %264 = icmp eq i64 %indvars.iv65, 2, !noelle.pdg.inst.id !3758" (1.299458e+00%)
Noelle:     Loop "  %271 = icmp eq i64 %indvars.iv63, 2, !noelle.pdg.inst.id !3777" (1.036190e+00%)
Noelle:     Loop "  %294 = icmp slt i32 %.018, %253, !noelle.pdg.inst.id !3816" (6.069438e+01%)
Noelle:     Loop "  %303 = icmp slt i64 %indvars.iv, %292, !noelle.pdg.inst.id !3827" (6.054786e+01%)
Noelle:     Loop "  %312 = icmp slt i32 %.04, %310, !noelle.pdg.inst.id !3837" (5.921724e+01%)
Noelle:  Function "_ZNK4Vec3miERKS_"
Noelle:  Function "_ZNK4Vec3mlEf"
Noelle:  Function "_ZN4Vec3C2Efff"
Noelle:  Function "_ZNK4Vec311GetLengthSqEv"
Noelle:  Function "_ZN4Vec3pLERKS_"
Noelle:  Function "_ZN4Vec3mIERKS_"
Noelle:  Function "_Z11RebuildGridv"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv29, %7, !noelle.pdg.inst.id !1250" (4.743599e-02%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %20 = sext i32 %19 to i64, !noelle.pdg.inst.id !1266" (1.247899e+00%)
Noelle:     Loop "  %29 = icmp slt i32 %.04, %27, !noelle.pdg.inst.id !1275" (1.167658e+00%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, %100, !noelle.pdg.inst.id !1379" (0.000000e+00%)
Noelle:  Disable loop "26" as cold code
Noelle:  Function "_Z16AdvanceParticlesv"
Noelle:     Loop "  %59 = icmp slt i64 %indvars.iv, %55, !noelle.pdg.inst.id !1665" (1.102129e+00%)
Noelle:     Loop "  %65 = icmp slt i32 %.02, %63, !noelle.pdg.inst.id !1674" (1.069289e+00%)
Noelle:  Function "_ZN4Vec3dVEf"
Noelle:  Function "_Z7InitSimPKc"
Noelle:     Loop "  %157 = icmp slt i64 %indvars.iv, %151, !noelle.pdg.inst.id !8040" (6.699223e-01%)
Noelle:     Loop "  %185 = load i32, i32* @numParticles, align 4, !tbaa !7941, !noelle.pdg.inst.id !82" (2.191821e-01%)
Noelle:     Loop "  %249 = icmp sgt i32 %.0, 16, !noelle.pdg.inst.id !8139" (6.591941e-03%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, %264, !noelle.pdg.inst.id !8188" (0.000000e+00%)
Noelle:  Disable loop "32" as cold code
Noelle:  Function "_ZN4CellC2Ev"
Noelle:     Loop "  tail call void @_ZN4Vec3C2Ev(%class.Vec3* %4), !noelle.pdg.inst.id !35" (1.375603e-01%)
Noelle:     Loop "  tail call void @_ZN4Vec3C2Ev(%class.Vec3* %10), !noelle.pdg.inst.id !46" (1.375603e-01%)
Noelle:     Loop "  tail call void @_ZN4Vec3C2Ev(%class.Vec3* %16), !noelle.pdg.inst.id !56" (1.375603e-01%)
Noelle:     Loop "  tail call void @_ZN4Vec3C2Ev(%class.Vec3* %22), !noelle.pdg.inst.id !66" (1.375603e-01%)
Noelle:  Function "_ZSt3maxIfERKT_S2_S2_"
Noelle:  Function "_Z8SaveFilePKc"
Noelle:     Loop "  %54 = load i32, i32* @numCells, align 4, !tbaa !1446, !noelle.pdg.inst.id !67" (1.526473e-01%)
Noelle:     Loop "  %63 = icmp slt i32 %.0, %61, !noelle.pdg.inst.id !1460" (4.411807e-02%)
Noelle:  Disable loop "38" as cold code
Noelle:     Loop "  %84 = icmp slt i32 %83, %61, !noelle.pdg.inst.id !1505" (9.685274e-02%)
Noelle:  Disable loop "39" as cold code
Noelle:  Function "_ZN4Vec3mLEf"
Noelle:  Function "_ZN4Vec3C2Ev"
Noelle:  Disable "_ZN4Vec3C2Ev" as cold function
Noelle:  Function "_Z17ProcessCollisionsv"
Noelle:  Disable "_Z17ProcessCollisionsv" as cold function
Noelle:  Function "_Z18ProcessCollisions2v"
Noelle:  Disable "_Z18ProcessCollisions2v" as cold function
Noelle:  Function "_Z10CleanUpSimv"
Noelle:  Disable "_Z10CleanUpSimv" as cold function
Noelle:  Function "_Z13cellpool_initP8cellpooli"
Noelle:  Disable "_Z13cellpool_initP8cellpooli" as cold function
Noelle:  Function "_ZL19cellpool_allocblocki"
Noelle:  Disable "_ZL19cellpool_allocblocki" as cold function
Noelle:  Function "_ZSt4swapIPiENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SD_"
Noelle:  Disable "_ZSt4swapIPiENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SD_" as cold function
Noelle:  Function "_ZSt4swapIP4CellENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SE_"
Noelle:  Disable "_ZSt4swapIP4CellENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SE_" as cold function
Noelle:  Function "_GLOBAL__sub_I_serial.cpp"
Noelle:  Disable "_GLOBAL__sub_I_serial.cpp" as cold function
Noelle:  Function "_GLOBAL__sub_I_cellpool.cpp"
Noelle:  Disable "_GLOBAL__sub_I_cellpool.cpp" as cold function
Noelle:  Function "_Z16cellpool_destroyP8cellpool"
Noelle:  Disable "_Z16cellpool_destroyP8cellpool" as cold function
Noelle:  Function "_ZSt4moveIRPiEONSt16remove_referenceIT_E4typeEOS3_"
Noelle:  Disable "_ZSt4moveIRPiEONSt16remove_referenceIT_E4typeEOS3_" as cold function
Noelle:  Function "_ZSt4moveIRP4CellEONSt16remove_referenceIT_E4typeEOS4_"
Noelle:  Disable "_ZSt4moveIRP4CellEONSt16remove_referenceIT_E4typeEOS4_" as cold function
Noelle:  Function "__cxx_global_var_init.3.8"
Noelle:  Disable "__cxx_global_var_init.3.8" as cold function
Noelle:  Function "__cxx_global_var_init.2.7"
Noelle:  Disable "__cxx_global_var_init.2.7" as cold function
Noelle:  Function "__cxx_global_var_init.1.6"
Noelle:  Disable "__cxx_global_var_init.1.6" as cold function
Noelle:  Function "__cxx_global_var_init.1"
Noelle:  Disable "__cxx_global_var_init.1" as cold function
Noelle:  Function "__cxx_global_var_init.2"
Noelle:  Disable "__cxx_global_var_init.2" as cold function
Noelle:  Function "__cxx_global_var_init.3"
Noelle:  Disable "__cxx_global_var_init.3" as cold function
Noelle:  Function "__cxx_global_var_init"
Noelle:  Disable "__cxx_global_var_init" as cold function
Noelle:  Function "__cxx_global_var_init.5"
Noelle:  Disable "__cxx_global_var_init.5" as cold function
Noelle:  Function "__cxx_global_var_init.4"
Noelle:  Disable "__cxx_global_var_init.4" as cold function
Noelle:  Function "_ZSt13__check_facetISt5ctypeIcEERKT_PS3_"
Noelle:  Disable "_ZSt13__check_facetISt5ctypeIcEERKT_PS3_" as cold function
Noelle:  Function "_ZNKSt5ctypeIcE5widenEc"
Noelle:  Disable "_ZNKSt5ctypeIcE5widenEc" as cold function
Noelle:  Function "_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode"
Noelle:  Disable "_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode" as cold function
Noelle:  Function "_ZNKSt9basic_iosIcSt11char_traitsIcEEcvbEv"
Noelle:  Disable "_ZNKSt9basic_iosIcSt11char_traitsIcEEcvbEv" as cold function
Noelle:  Function "_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev"
Noelle:  Disable "_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev" as cold function
Noelle:  Function "_ZNSt14basic_ofstreamIcSt11char_traitsIcEED2Ev"
Noelle:  Disable "_ZNSt14basic_ofstreamIcSt11char_traitsIcEED2Ev" as cold function
Noelle:  Function "_ZNSoD2Ev"
Noelle:  Disable "_ZNSoD2Ev" as cold function
Noelle:  Function "_ZNSoC2Ev"
Noelle:  Disable "_ZNSoC2Ev" as cold function
Noelle:  Function "_Z19cellpool_returncellP8cellpoolP4Cell"
Noelle:  Disable "_Z19cellpool_returncellP8cellpoolP4Cell" as cold function
Noelle:  Function "_Z16cellpool_getcellP8cellpool"
Noelle:  Disable "_Z16cellpool_getcellP8cellpool" as cold function
Noelle:  Function "_ZNSt14basic_ofstreamIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode"
Noelle:  Disable "_ZNSt14basic_ofstreamIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode" as cold function
Noelle:  Function "_ZNSt9basic_iosIcSt11char_traitsIcEED2Ev"
Noelle:  Disable "_ZNSt9basic_iosIcSt11char_traitsIcEED2Ev" as cold function
Noelle:  Function "_ZNSt11char_traitsIcE6lengthEPKc"
Noelle:  Disable "_ZNSt11char_traitsIcE6lengthEPKc" as cold function
Noelle:  Function "_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev"
Noelle:  Disable "_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev" as cold function
Noelle:  Function "_Z16GetNeighborCellsiiiPi"
Noelle:  Disable "_Z16GetNeighborCellsiiiPi" as cold function
Noelle:  Function "_ZNSt15basic_streambufIcSt11char_traitsIcEED2Ev"
Noelle:  Disable "_ZNSt15basic_streambufIcSt11char_traitsIcEED2Ev" as cold function
Noelle:  Function "_ZNSiD2Ev"
Noelle:  Disable "_ZNSiD2Ev" as cold function
Noelle:  Function "_ZNSt13basic_filebufIcSt11char_traitsIcEED2Ev"
Noelle:  Disable "_ZNSt13basic_filebufIcSt11char_traitsIcEED2Ev" as cold function
Noelle:  Function "_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv"
Noelle:  Disable "_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv" as cold function
Noelle:  Function "_ZNKSt9basic_iosIcSt11char_traitsIcEE4failEv"
Noelle:  Disable "_ZNKSt9basic_iosIcSt11char_traitsIcEE4failEv" as cold function
Noelle:  Function "_ZStorSt12_Ios_IostateS_"
Noelle:  Disable "_ZStorSt12_Ios_IostateS_" as cold function
Noelle:  Function "_ZNKSt9basic_iosIcSt11char_traitsIcEEntEv"
Noelle:  Disable "_ZNKSt9basic_iosIcSt11char_traitsIcEEntEv" as cold function
Noelle:  Function "_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode"
Noelle:  Disable "_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode" as cold function
Noelle:  Function "_ZNSolsEPFRSoS_E"
Noelle:  Disable "_ZNSolsEPFRSoS_E" as cold function
Noelle:  Function "_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_"
Noelle:  Disable "_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_" as cold function
Noelle:  Function "_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc"
Noelle:  Disable "_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc" as cold function
Noelle:  Function "_ZSt5flushIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_"
Noelle:  Disable "_ZSt5flushIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_" as cold function
Noelle:  Function "_ZNSt14basic_ifstreamIcSt11char_traitsIcEED2Ev"
Noelle:  Disable "_ZNSt14basic_ifstreamIcSt11char_traitsIcEED2Ev" as cold function
Noelle:  Function "_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc"
Noelle:  Disable "_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc" as cold function
Noelle:  Function "_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate"
Noelle:  Disable "_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate" as cold function
Noelle:  Function "_ZStorSt13_Ios_OpenmodeS_"
Noelle:  Disable "_ZStorSt13_Ios_OpenmodeS_" as cold function
Noelle:  Function "_ZNSt14basic_ifstreamIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode"
Noelle:  Disable "_ZNSt14basic_ifstreamIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "_ZNSiC2Ev"
Noelle:  Disable "_ZNSiC2Ev" as cold function
Noelle:  Function "_ZNSt9basic_iosIcSt11char_traitsIcEEC2Ev"
Noelle:  Disable "_ZNSt9basic_iosIcSt11char_traitsIcEEC2Ev" as cold function
Noelle:  Function "_ZStanSt12_Ios_IostateS_"
Noelle:  Disable "_ZStanSt12_Ios_IostateS_" as cold function
Planner:    There are 34 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:    Loop 6 has 9.425000e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 5 has 9.425000e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 4 has 9.425000e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 7 has 9.425000e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 79 has 2.930438e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 21 has 4.238870e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 32 has 4.238870e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 36 has 8.497111e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 37 has 2.709065e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 38 has 7.340981e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 39 has 6.115508e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 41 has 5.441522e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 80 has 5.000000e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 28 has 6.115508e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 30 has 2.675776e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 25 has 8.497111e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 26 has 2.709065e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 27 has 7.340981e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 15 has 3.201421e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:  There are 9 loop nesting trees in the program
Planner:    ID: 1 (1)
Planner:      Function: "_Z7InitSimPKc"
Planner:      Loop: "  %185 = load i32, i32* @numParticles, align 4, !tbaa !7941, !noelle.pdg.inst.id !82"
Planner:      Loop nesting level: 1
Planner:      Hotness = 2.191821e-01 %
Planner:      Average instructions per invocation = 4.067420e+07 %
Planner:      Average iterations per invocation = 3.058210e+05 %
Planner:    
Planner:    ID: 0 (1)
Planner:      Function: "_Z7InitSimPKc"
Planner:      Loop: "  %157 = icmp slt i64 %indvars.iv, %151, !noelle.pdg.inst.id !8040"
Planner:      Loop nesting level: 1
Planner:      Hotness = 6.699223e-01 %
Planner:      Average instructions per invocation = 1.243193e+08 %
Planner:      Average iterations per invocation = 1.354270e+05 %
Planner:    
Planner:    ID: 78 (1)
Planner:      Function: "_Z16AdvanceParticlesv"
Planner:      Loop: "  %59 = icmp slt i64 %indvars.iv, %55, !noelle.pdg.inst.id !1665"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.102129e+00 %
Planner:      Average instructions per invocation = 4.090501e+07 %
Planner:      Average iterations per invocation = 1.354282e+05 %
Planner:    
Planner:    ID: 20 (1)
Planner:      Function: "_Z13ComputeForcesv"
Planner:      Loop: "  %26 = icmp slt i64 %indvars.iv58, %24, !noelle.pdg.inst.id !3403"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.875137e-01 %
Planner:      Average instructions per invocation = 6.959482e+06 %
Planner:      Average iterations per invocation = 1.354290e+05 %
Planner:    
Planner:    ID: 31 (1)
Planner:      Function: "_Z13ComputeForcesv"
Planner:      Loop: "  %199 = icmp slt i64 %indvars.iv52, %24, !noelle.pdg.inst.id !3669"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.875137e-01 %
Planner:      Average instructions per invocation = 6.959482e+06 %
Planner:      Average iterations per invocation = 1.354290e+05 %
Planner:    
Planner:    ID: 33 (1)
Planner:      Function: "_Z13ComputeForcesv"
Planner:      Loop: "  %240 = sext i32 %239 to i64, !noelle.pdg.inst.id !3716"
Planner:      Loop nesting level: 1
Planner:      Hotness = 6.212268e+01 %
Planner:      Average instructions per invocation = 2.305654e+09 %
Planner:      Average iterations per invocation = 4.680000e+01 %
Planner:    
Planner:      ID: 34 (2)
Planner:        Function: "_Z13ComputeForcesv"
Planner:        Loop: "  %244 = icmp slt i64 %indvars.iv73, %59, !noelle.pdg.inst.id !3725"
Planner:        Loop nesting level: 2
Planner:        Hotness = 6.212266e+01 %
Planner:        Average instructions per invocation = 5.012290e+07 %
Planner:        Average iterations per invocation = 6.499565e+01 %
Planner:      
Planner:        ID: 35 (3)
Planner:          Function: "_Z13ComputeForcesv"
Planner:          Loop: "  %250 = icmp slt i64 %indvars.iv71, %61, !noelle.pdg.inst.id !3735"
Planner:          Loop nesting level: 3
Planner:          Hotness = 6.212162e+01 %
Planner:          Average instructions per invocation = 7.831573e+05 %
Planner:          Average iterations per invocation = 4.700027e+01 %
Planner:        
Planner:          ID: 40 (4)
Planner:            Function: "_Z13ComputeForcesv"
Planner:            Loop: "  %303 = icmp slt i64 %indvars.iv, %292, !noelle.pdg.inst.id !3827"
Planner:            Loop nesting level: 5
Planner:            Hotness = 6.054786e+01 %
Planner:            Average instructions per invocation = 7.348338e+03 %
Planner:            Average iterations per invocation = 1.420742e+01 %
Planner:          
Planner:    ID: 8 (1)
Planner:      Function: "_Z8SaveFilePKc"
Planner:      Loop: "  %54 = load i32, i32* @numCells, align 4, !tbaa !1446, !noelle.pdg.inst.id !67"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.526473e-01 %
Planner:      Average instructions per invocation = 2.832717e+07 %
Planner:      Average iterations per invocation = 1.354270e+05 %
Planner:    
Planner:    ID: 22 (1)
Planner:      Function: "_Z13ComputeForcesv"
Planner:      Loop: "  %66 = icmp slt i64 %indvars.iv90, %63, !noelle.pdg.inst.id !3457"
Planner:      Loop nesting level: 1
Planner:      Hotness = 3.203275e+01 %
Planner:      Average instructions per invocation = 1.188880e+09 %
Planner:      Average iterations per invocation = 4.680000e+01 %
Planner:    
Planner:      ID: 23 (2)
Planner:        Function: "_Z13ComputeForcesv"
Planner:        Loop: "  %69 = icmp slt i64 %indvars.iv88, %59, !noelle.pdg.inst.id !3466"
Planner:        Loop nesting level: 2
Planner:        Hotness = 3.203273e+01 %
Planner:        Average instructions per invocation = 2.584521e+07 %
Planner:        Average iterations per invocation = 6.499565e+01 %
Planner:      
Planner:        ID: 24 (3)
Planner:          Function: "_Z13ComputeForcesv"
Planner:          Loop: "  %75 = icmp slt i64 %indvars.iv86, %61, !noelle.pdg.inst.id !3477"
Planner:          Loop nesting level: 3
Planner:          Hotness = 3.203170e+01 %
Planner:          Average instructions per invocation = 4.038184e+05 %
Planner:          Average iterations per invocation = 4.700027e+01 %
Planner:        
Planner:          ID: 29 (4)
Planner:            Function: "_Z13ComputeForcesv"
Planner:            Loop: "  %129 = icmp slt i64 %indvars.iv54, %117, !noelle.pdg.inst.id !3581"
Planner:            Loop nesting level: 5
Planner:            Hotness = 3.044969e+01 %
Planner:            Average instructions per invocation = 3.695500e+03 %
Planner:            Average iterations per invocation = 1.420742e+01 %
Planner:          
Planner:    ID: 14 (1)
Planner:      Function: "_Z11RebuildGridv"
Planner:      Loop: "  %20 = sext i32 %19 to i64, !noelle.pdg.inst.id !1266"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.247899e+00 %
Planner:      Average instructions per invocation = 4.631517e+07 %
Planner:      Average iterations per invocation = 1.353690e+05 %
Planner:    
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca float, align 4, !noelle.pdg.inst.id !7914
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca float, align 4, !noelle.pdg.inst.id !7913
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca float, align 4, !noelle.pdg.inst.id !7912
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca float, align 4, !noelle.pdg.inst.id !7911
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca float, align 4, !noelle.pdg.inst.id !7910
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca float, align 4, !noelle.pdg.inst.id !7909
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca float, align 4, !noelle.pdg.inst.id !7908
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !7907
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !7906
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca %"class.std::basic_ifstream", align 8, !noelle.pdg.inst.id !7901
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !7900
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !7900 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca float, align 4, !noelle.pdg.inst.id !7902
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !7903
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !7904
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !7905
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca float, align 4, !noelle.pdg.inst.id !7914
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca float, align 4, !noelle.pdg.inst.id !7913
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca float, align 4, !noelle.pdg.inst.id !7912
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca float, align 4, !noelle.pdg.inst.id !7911
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca float, align 4, !noelle.pdg.inst.id !7910
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca float, align 4, !noelle.pdg.inst.id !7909
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca float, align 4, !noelle.pdg.inst.id !7908
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !7907
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !7906
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca %"class.std::basic_ifstream", align 8, !noelle.pdg.inst.id !7901
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !7900
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !7900 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca float, align 4, !noelle.pdg.inst.id !7902
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !7903
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !7904
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !7905
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 1 saves only 9.887911e-03 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca float, align 4, !noelle.pdg.inst.id !7914
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca float, align 4, !noelle.pdg.inst.id !7913
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca float, align 4, !noelle.pdg.inst.id !7912
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca float, align 4, !noelle.pdg.inst.id !7911
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca float, align 4, !noelle.pdg.inst.id !7910
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca float, align 4, !noelle.pdg.inst.id !7909
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca float, align 4, !noelle.pdg.inst.id !7908
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !7907
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !7906
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca %"class.std::basic_ifstream", align 8, !noelle.pdg.inst.id !7901
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !7900
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca float, align 4, !noelle.pdg.inst.id !7902
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !7903
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !7904
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !7905
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca float, align 4, !noelle.pdg.inst.id !7914
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca float, align 4, !noelle.pdg.inst.id !7913
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca float, align 4, !noelle.pdg.inst.id !7912
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca float, align 4, !noelle.pdg.inst.id !7911
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca float, align 4, !noelle.pdg.inst.id !7910
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca float, align 4, !noelle.pdg.inst.id !7909
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca float, align 4, !noelle.pdg.inst.id !7908
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !7907
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !7906
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca %"class.std::basic_ifstream", align 8, !noelle.pdg.inst.id !7901
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !7900
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca float, align 4, !noelle.pdg.inst.id !7902
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !7903
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !7904
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !7905
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 0 saves only 6.699223e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1618
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1617
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1616
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1615
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1615 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1614
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1613
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1612
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1612 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1611
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1610
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1610 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1609
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1604
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1604 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1603
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1605
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1606
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1606 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1607
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1608
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1608 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1618
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1617
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1616
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1615
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1615 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1614
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1613
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1612
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1612 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1611
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1610
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1610 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1609
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1604
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1604 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1603
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1605
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1606
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1606 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !1607
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1608
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !1608 can be cloned
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 78 saves only 3.505413e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 20 saves only 4.567121e-02 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 31 saves only 1.875137e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390 can be cloned
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 40
Planner: LoopSelector:      Function: "_Z13ComputeForcesv"
Planner: LoopSelector:      Loop nesting level: 5
Planner: LoopSelector:      "  %303 = icmp slt i64 %indvars.iv, %292, !noelle.pdg.inst.id !3827"
Planner: LoopSelector:      Coverage: 6.054786e+01%
Planner: LoopSelector:      Whole-program savings = 6.708336e+00%
Planner: LoopSelector:      Loop savings = 1.107939e+01%
Planner: LoopSelector:    Loop 34
Planner: LoopSelector:      Function: "_Z13ComputeForcesv"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %244 = icmp slt i64 %indvars.iv73, %59, !noelle.pdg.inst.id !3725"
Planner: LoopSelector:      Coverage: 6.212266e+01%
Planner: LoopSelector:      Whole-program savings = 5.908374e+00%
Planner: LoopSelector:      Loop savings = 9.510820e+00%
Planner: LoopSelector:    Loop 35
Planner: LoopSelector:      Function: "_Z13ComputeForcesv"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %250 = icmp slt i64 %indvars.iv71, %61, !noelle.pdg.inst.id !3735"
Planner: LoopSelector:      Coverage: 6.212162e+01%
Planner: LoopSelector:      Whole-program savings = 5.907338e+00%
Planner: LoopSelector:      Loop savings = 9.509311e+00%
Planner: LoopSelector:    Loop 33
Planner: LoopSelector:      Function: "_Z13ComputeForcesv"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %240 = sext i32 %239 to i64, !noelle.pdg.inst.id !3716"
Planner: LoopSelector:      Coverage: 6.212268e+01%
Planner: LoopSelector:      Whole-program savings = 5.881640e+00%
Planner: LoopSelector:      Loop savings = 9.467783e+00%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca float, align 4, !noelle.pdg.inst.id !1405
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca float, align 4, !noelle.pdg.inst.id !1405 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca float, align 4, !noelle.pdg.inst.id !1404
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca float, align 4, !noelle.pdg.inst.id !1404 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !1403
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !1403 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !1402
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !1402 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca float, align 4, !noelle.pdg.inst.id !1397
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca float, align 4, !noelle.pdg.inst.id !1397 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %"class.std::basic_ofstream", align 8, !noelle.pdg.inst.id !1396
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca float, align 4, !noelle.pdg.inst.id !1398
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca float, align 4, !noelle.pdg.inst.id !1398 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca float, align 4, !noelle.pdg.inst.id !1399
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca float, align 4, !noelle.pdg.inst.id !1399 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca float, align 4, !noelle.pdg.inst.id !1400
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca float, align 4, !noelle.pdg.inst.id !1400 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca float, align 4, !noelle.pdg.inst.id !1401
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca float, align 4, !noelle.pdg.inst.id !1401 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca float, align 4, !noelle.pdg.inst.id !1405
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca float, align 4, !noelle.pdg.inst.id !1405 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca float, align 4, !noelle.pdg.inst.id !1404
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca float, align 4, !noelle.pdg.inst.id !1404 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !1403
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !1403 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !1402
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !1402 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca float, align 4, !noelle.pdg.inst.id !1397
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca float, align 4, !noelle.pdg.inst.id !1397 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %"class.std::basic_ofstream", align 8, !noelle.pdg.inst.id !1396
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca float, align 4, !noelle.pdg.inst.id !1398
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca float, align 4, !noelle.pdg.inst.id !1398 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca float, align 4, !noelle.pdg.inst.id !1399
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca float, align 4, !noelle.pdg.inst.id !1399 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca float, align 4, !noelle.pdg.inst.id !1400
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca float, align 4, !noelle.pdg.inst.id !1400 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca float, align 4, !noelle.pdg.inst.id !1401
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca float, align 4, !noelle.pdg.inst.id !1401 can be cloned
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 8 saves only 5.106289e-02 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3378 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3375
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3376 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector: Start
Planner: LoopSelector:   Order of loops and their maximum savings
Planner: LoopSelector:    Loop 22
Planner: LoopSelector:      Function: "_Z13ComputeForcesv"
Planner: LoopSelector:      Loop nesting level: 1
Planner: LoopSelector:      "  %66 = icmp slt i64 %indvars.iv90, %63, !noelle.pdg.inst.id !3457"
Planner: LoopSelector:      Coverage: 3.203275e+01%
Planner: LoopSelector:      Whole-program savings = 1.264995e+01%
Planner: LoopSelector:      Loop savings = 3.949068e+01%
Planner: LoopSelector:    Loop 23
Planner: LoopSelector:      Function: "_Z13ComputeForcesv"
Planner: LoopSelector:      Loop nesting level: 2
Planner: LoopSelector:      "  %69 = icmp slt i64 %indvars.iv88, %59, !noelle.pdg.inst.id !3466"
Planner: LoopSelector:      Coverage: 3.203273e+01%
Planner: LoopSelector:      Whole-program savings = 1.264994e+01%
Planner: LoopSelector:      Loop savings = 3.949066e+01%
Planner: LoopSelector:    Loop 24
Planner: LoopSelector:      Function: "_Z13ComputeForcesv"
Planner: LoopSelector:      Loop nesting level: 3
Planner: LoopSelector:      "  %75 = icmp slt i64 %indvars.iv86, %61, !noelle.pdg.inst.id !3477"
Planner: LoopSelector:      Coverage: 3.203170e+01%
Planner: LoopSelector:      Whole-program savings = 1.264890e+01%
Planner: LoopSelector:      Loop savings = 3.948870e+01%
Planner: LoopSelector:    Loop 29
Planner: LoopSelector:      Function: "_Z13ComputeForcesv"
Planner: LoopSelector:      Loop nesting level: 5
Planner: LoopSelector:      "  %129 = icmp slt i64 %indvars.iv54, %117, !noelle.pdg.inst.id !3581"
Planner: LoopSelector:      Coverage: 3.044969e+01%
Planner: LoopSelector:      Whole-program savings = 1.112618e+01%
Planner: LoopSelector:      Loop savings = 3.653956e+01%
Planner: LoopSelector: End
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !1237
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %1 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !1237 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !1237
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %1 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !1237 can be cloned
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 14 saves only 6.035914e-02 when parallelized. Skip it
Planner:   Maximum time saved = 1.935828e+01% (3592368408)
Planner:   Maximum time saved with DOALL only = 0.000000e+00% (0)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, %23, !noelle.pdg.inst.id !184" (9.893907e+01%)
Noelle:  Function "_Z12AdvanceFramev"
Noelle:  Function "_Z13ComputeForcesv"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv58, %24, !noelle.pdg.inst.id !3405" (1.875137e-01%)
Noelle:     Loop "  %32 = icmp slt i32 %.05, %30, !noelle.pdg.inst.id !3414" (1.546733e-01%)
Noelle:     Loop "  %66 = icmp slt i64 %indvars.iv90, %63, !noelle.pdg.inst.id !3459" (3.203275e+01%)
Noelle:     Loop "  %69 = icmp slt i64 %indvars.iv88, %59, !noelle.pdg.inst.id !3469" (3.203273e+01%)
Noelle:     Loop "  %75 = icmp slt i64 %indvars.iv86, %61, !noelle.pdg.inst.id !3481" (3.203170e+01%)
Noelle:     Loop "  %85 = icmp eq i64 %indvars.iv83, 2, !noelle.pdg.inst.id !3497" (1.368649e+00%)
Noelle:     Loop "  %89 = icmp eq i64 %indvars.iv80, 2, !noelle.pdg.inst.id !3509" (1.299458e+00%)
Noelle:     Loop "  %96 = icmp eq i64 %indvars.iv77, 2, !noelle.pdg.inst.id !3530" (1.036190e+00%)
Noelle:     Loop "  %119 = icmp slt i32 %.016, %78, !noelle.pdg.inst.id !3573" (3.060445e+01%)
Noelle:     Loop "  %129 = icmp slt i64 %indvars.iv54, %117, !noelle.pdg.inst.id !3586" (3.044969e+01%)
Noelle:     Loop "  %138 = icmp slt i32 %.023, %136, !noelle.pdg.inst.id !3598" (2.911907e+01%)
Noelle:     Loop "  %199 = icmp slt i64 %indvars.iv52, %24, !noelle.pdg.inst.id !3675" (1.875137e-01%)
Noelle:     Loop "  %205 = icmp slt i32 %.027, %203, !noelle.pdg.inst.id !3683" (1.546733e-01%)
Noelle:     Loop "  %240 = sext i32 %239 to i64, !noelle.pdg.inst.id !3722" (6.212268e+01%)
Noelle:     Loop "  %244 = icmp slt i64 %indvars.iv73, %59, !noelle.pdg.inst.id !3732" (6.212266e+01%)
Noelle:     Loop "  %250 = icmp slt i64 %indvars.iv71, %61, !noelle.pdg.inst.id !3743" (6.212162e+01%)
Noelle:     Loop "  %260 = icmp eq i64 %indvars.iv68, 2, !noelle.pdg.inst.id !3757" (1.368649e+00%)
Noelle:     Loop "  %264 = icmp eq i64 %indvars.iv65, 2, !noelle.pdg.inst.id !3767" (1.299458e+00%)
Noelle:     Loop "  %271 = icmp eq i64 %indvars.iv63, 2, !noelle.pdg.inst.id !3786" (1.036190e+00%)
Noelle:     Loop "  %294 = icmp slt i32 %.018, %253, !noelle.pdg.inst.id !3825" (6.069438e+01%)
Noelle:     Loop "  %303 = icmp slt i64 %indvars.iv, %292, !noelle.pdg.inst.id !3836" (6.054786e+01%)
Noelle:     Loop "  %312 = icmp slt i32 %.04, %310, !noelle.pdg.inst.id !3847" (5.921724e+01%)
Noelle:  Function "_ZNK4Vec3miERKS_"
Noelle:  Function "_ZNK4Vec3mlEf"
Noelle:  Function "_ZN4Vec3C2Efff"
Noelle:  Function "_ZNK4Vec311GetLengthSqEv"
Noelle:  Function "_ZN4Vec3pLERKS_"
Noelle:  Function "_ZN4Vec3mIERKS_"
Noelle:  Function "_Z11RebuildGridv"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv29, %7, !noelle.pdg.inst.id !1252" (4.743599e-02%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %20 = sext i32 %19 to i64, !noelle.pdg.inst.id !1268" (1.247899e+00%)
Noelle:     Loop "  %29 = icmp slt i32 %.04, %27, !noelle.pdg.inst.id !1277" (1.167658e+00%)
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, %100, !noelle.pdg.inst.id !1381" (0.000000e+00%)
Noelle:  Disable loop "26" as cold code
Noelle:  Function "_Z16AdvanceParticlesv"
Noelle:     Loop "  %59 = icmp slt i64 %indvars.iv, %55, !noelle.pdg.inst.id !1667" (1.102129e+00%)
Noelle:     Loop "  %65 = icmp slt i32 %.02, %63, !noelle.pdg.inst.id !1676" (1.069289e+00%)
Noelle:  Function "_ZN4Vec3dVEf"
Noelle:  Function "_Z7InitSimPKc"
Noelle:     Loop "  %157 = icmp slt i64 %indvars.iv, %151, !noelle.pdg.inst.id !8042" (6.699223e-01%)
Noelle:     Loop "  %185 = load i32, i32* @numParticles, align 4, !tbaa !7943, !noelle.pdg.inst.id !84" (2.191821e-01%)
Noelle:     Loop "  %249 = icmp sgt i32 %.0, 16, !noelle.pdg.inst.id !8141" (6.591941e-03%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %exitcond.i = icmp eq i32 %.0.i, %264, !noelle.pdg.inst.id !8190" (0.000000e+00%)
Noelle:  Disable loop "32" as cold code
Noelle:  Function "_ZN4CellC2Ev"
Noelle:     Loop "  tail call void @_ZN4Vec3C2Ev(%class.Vec3* %4), !noelle.pdg.inst.id !37" (1.375603e-01%)
Noelle:     Loop "  tail call void @_ZN4Vec3C2Ev(%class.Vec3* %10), !noelle.pdg.inst.id !48" (1.375603e-01%)
Noelle:     Loop "  tail call void @_ZN4Vec3C2Ev(%class.Vec3* %16), !noelle.pdg.inst.id !58" (1.375603e-01%)
Noelle:     Loop "  tail call void @_ZN4Vec3C2Ev(%class.Vec3* %22), !noelle.pdg.inst.id !68" (1.375603e-01%)
Noelle:  Function "_ZSt3maxIfERKT_S2_S2_"
Noelle:  Function "_Z8SaveFilePKc"
Noelle:     Loop "  %54 = load i32, i32* @numCells, align 4, !tbaa !1448, !noelle.pdg.inst.id !69" (1.526473e-01%)
Noelle:     Loop "  %63 = icmp slt i32 %.0, %61, !noelle.pdg.inst.id !1462" (4.411807e-02%)
Noelle:  Disable loop "38" as cold code
Noelle:     Loop "  %84 = icmp slt i32 %83, %61, !noelle.pdg.inst.id !1507" (9.685274e-02%)
Noelle:  Disable loop "39" as cold code
Noelle:  Function "_ZN4Vec3mLEf"
Noelle:  Function "_ZN4Vec3C2Ev"
Noelle:  Disable "_ZN4Vec3C2Ev" as cold function
Noelle:  Function "_Z17ProcessCollisionsv"
Noelle:  Disable "_Z17ProcessCollisionsv" as cold function
Noelle:  Function "_Z18ProcessCollisions2v"
Noelle:  Disable "_Z18ProcessCollisions2v" as cold function
Noelle:  Function "_Z10CleanUpSimv"
Noelle:  Disable "_Z10CleanUpSimv" as cold function
Noelle:  Function "_Z13cellpool_initP8cellpooli"
Noelle:  Disable "_Z13cellpool_initP8cellpooli" as cold function
Noelle:  Function "_ZL19cellpool_allocblocki"
Noelle:  Disable "_ZL19cellpool_allocblocki" as cold function
Noelle:  Function "_ZSt4swapIPiENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SD_"
Noelle:  Disable "_ZSt4swapIPiENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SD_" as cold function
Noelle:  Function "_ZSt4swapIP4CellENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SE_"
Noelle:  Disable "_ZSt4swapIP4CellENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SE_" as cold function
Noelle:  Function "_GLOBAL__sub_I_serial.cpp"
Noelle:  Disable "_GLOBAL__sub_I_serial.cpp" as cold function
Noelle:  Function "_GLOBAL__sub_I_cellpool.cpp"
Noelle:  Disable "_GLOBAL__sub_I_cellpool.cpp" as cold function
Noelle:  Function "_Z16cellpool_destroyP8cellpool"
Noelle:  Disable "_Z16cellpool_destroyP8cellpool" as cold function
Noelle:  Function "_ZSt4moveIRPiEONSt16remove_referenceIT_E4typeEOS3_"
Noelle:  Disable "_ZSt4moveIRPiEONSt16remove_referenceIT_E4typeEOS3_" as cold function
Noelle:  Function "_ZSt4moveIRP4CellEONSt16remove_referenceIT_E4typeEOS4_"
Noelle:  Disable "_ZSt4moveIRP4CellEONSt16remove_referenceIT_E4typeEOS4_" as cold function
Noelle:  Function "__cxx_global_var_init.1.6"
Noelle:  Disable "__cxx_global_var_init.1.6" as cold function
Noelle:  Function "__cxx_global_var_init.2.7"
Noelle:  Disable "__cxx_global_var_init.2.7" as cold function
Noelle:  Function "__cxx_global_var_init.3.8"
Noelle:  Disable "__cxx_global_var_init.3.8" as cold function
Noelle:  Function "__cxx_global_var_init.1"
Noelle:  Disable "__cxx_global_var_init.1" as cold function
Noelle:  Function "__cxx_global_var_init.2"
Noelle:  Disable "__cxx_global_var_init.2" as cold function
Noelle:  Function "__cxx_global_var_init.3"
Noelle:  Disable "__cxx_global_var_init.3" as cold function
Noelle:  Function "__cxx_global_var_init.5"
Noelle:  Disable "__cxx_global_var_init.5" as cold function
Noelle:  Function "__cxx_global_var_init"
Noelle:  Disable "__cxx_global_var_init" as cold function
Noelle:  Function "__cxx_global_var_init.4"
Noelle:  Disable "__cxx_global_var_init.4" as cold function
Noelle:  Function "_ZStanSt12_Ios_IostateS_"
Noelle:  Disable "_ZStanSt12_Ios_IostateS_" as cold function
Noelle:  Function "_ZStorSt13_Ios_OpenmodeS_"
Noelle:  Disable "_ZStorSt13_Ios_OpenmodeS_" as cold function
Noelle:  Function "_ZNSt9basic_iosIcSt11char_traitsIcEEC2Ev"
Noelle:  Disable "_ZNSt9basic_iosIcSt11char_traitsIcEEC2Ev" as cold function
Noelle:  Function "_ZSt5flushIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_"
Noelle:  Disable "_ZSt5flushIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_" as cold function
Noelle:  Function "_ZNSiC2Ev"
Noelle:  Disable "_ZNSiC2Ev" as cold function
Noelle:  Function "_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc"
Noelle:  Disable "_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc" as cold function
Noelle:  Function "_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate"
Noelle:  Disable "_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate" as cold function
Noelle:  Function "_ZNSt14basic_ofstreamIcSt11char_traitsIcEED2Ev"
Noelle:  Disable "_ZNSt14basic_ofstreamIcSt11char_traitsIcEED2Ev" as cold function
Noelle:  Function "_ZNSt14basic_ifstreamIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode"
Noelle:  Disable "_ZNSt14basic_ifstreamIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode" as cold function
Noelle:  Function "_Z16cellpool_getcellP8cellpool"
Noelle:  Disable "_Z16cellpool_getcellP8cellpool" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "_Z16GetNeighborCellsiiiPi"
Noelle:  Disable "_Z16GetNeighborCellsiiiPi" as cold function
Noelle:  Function "_ZNSoC2Ev"
Noelle:  Disable "_ZNSoC2Ev" as cold function
Noelle:  Function "_ZNSoD2Ev"
Noelle:  Disable "_ZNSoD2Ev" as cold function
Noelle:  Function "_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev"
Noelle:  Disable "_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev" as cold function
Noelle:  Function "_ZNKSt9basic_iosIcSt11char_traitsIcEEcvbEv"
Noelle:  Disable "_ZNKSt9basic_iosIcSt11char_traitsIcEEcvbEv" as cold function
Noelle:  Function "_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode"
Noelle:  Disable "_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode" as cold function
Noelle:  Function "_ZNSt11char_traitsIcE6lengthEPKc"
Noelle:  Disable "_ZNSt11char_traitsIcE6lengthEPKc" as cold function
Noelle:  Function "_ZNKSt5ctypeIcE5widenEc"
Noelle:  Disable "_ZNKSt5ctypeIcE5widenEc" as cold function
Noelle:  Function "_ZSt13__check_facetISt5ctypeIcEERKT_PS3_"
Noelle:  Disable "_ZSt13__check_facetISt5ctypeIcEERKT_PS3_" as cold function
Noelle:  Function "_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv"
Noelle:  Disable "_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv" as cold function
Noelle:  Function "_ZNKSt9basic_iosIcSt11char_traitsIcEE4failEv"
Noelle:  Disable "_ZNKSt9basic_iosIcSt11char_traitsIcEE4failEv" as cold function
Noelle:  Function "_ZNSolsEPFRSoS_E"
Noelle:  Disable "_ZNSolsEPFRSoS_E" as cold function
Noelle:  Function "_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_"
Noelle:  Disable "_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_" as cold function
Noelle:  Function "_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc"
Noelle:  Disable "_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc" as cold function
Noelle:  Function "_ZNSt15basic_streambufIcSt11char_traitsIcEED2Ev"
Noelle:  Disable "_ZNSt15basic_streambufIcSt11char_traitsIcEED2Ev" as cold function
Noelle:  Function "_ZNSiD2Ev"
Noelle:  Disable "_ZNSiD2Ev" as cold function
Noelle:  Function "_ZNSt13basic_filebufIcSt11char_traitsIcEED2Ev"
Noelle:  Disable "_ZNSt13basic_filebufIcSt11char_traitsIcEED2Ev" as cold function
Noelle:  Function "_ZNSt9basic_iosIcSt11char_traitsIcEED2Ev"
Noelle:  Disable "_ZNSt9basic_iosIcSt11char_traitsIcEED2Ev" as cold function
Noelle:  Function "_ZNSt14basic_ifstreamIcSt11char_traitsIcEED2Ev"
Noelle:  Disable "_ZNSt14basic_ifstreamIcSt11char_traitsIcEED2Ev" as cold function
Noelle:  Function "_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev"
Noelle:  Disable "_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev" as cold function
Noelle:  Function "_ZStorSt12_Ios_IostateS_"
Noelle:  Disable "_ZStorSt12_Ios_IostateS_" as cold function
Noelle:  Function "_Z19cellpool_returncellP8cellpoolP4Cell"
Noelle:  Disable "_Z19cellpool_returncellP8cellpoolP4Cell" as cold function
Noelle:  Function "_ZNSt14basic_ofstreamIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode"
Noelle:  Disable "_ZNSt14basic_ofstreamIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode" as cold function
Noelle:  Function "_ZNKSt9basic_iosIcSt11char_traitsIcEEntEv"
Noelle:  Disable "_ZNKSt9basic_iosIcSt11char_traitsIcEEntEv" as cold function
Noelle:  Function "_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode"
Noelle:  Disable "_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode" as cold function
Parallelizer:    There are 34 loops in the program we are going to consider
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3394 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3393 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3382 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3380
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3377
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3378
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !3384 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !3385 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3386 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3387 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3388 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3392 can be cloned
MemoryCloningAnalysis: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "_Z13ComputeForcesv"
Parallelizer: parallelizerLoop:   Loop 40 = "  %303 = icmp slt i64 %indvars.iv, %292, !noelle.pdg.inst.id !3836"
Parallelizer: parallelizerLoop:   Nesting level = 5
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %195 = load %struct.Cell*, %struct.Cell** @cells, align 8, !noelle.pdg.inst.id !760
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %196 = load i32*, i32** @cnumPars, align 8, !noelle.pdg.inst.id !762
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %220 = bitcast %class.Vec3* %6 to i8*, !noelle.pdg.inst.id !3701
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %221 = bitcast { <2 x float>, float }* %7 to i8*, !noelle.pdg.inst.id !3702
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %222 = bitcast float* %8 to i8*, !noelle.pdg.inst.id !3703
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %223 = bitcast float* %9 to i8*, !noelle.pdg.inst.id !3704
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 =   %224 = bitcast %class.Vec3* %10 to i8*, !noelle.pdg.inst.id !3705
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 =   %225 = bitcast %class.Vec3* %11 to i8*, !noelle.pdg.inst.id !3706
Parallelizer: parallelizerLoop:   Environment:   Live-in 16 =   %226 = bitcast %class.Vec3* %12 to i8*, !noelle.pdg.inst.id !3707
Parallelizer: parallelizerLoop:   Environment:   Live-in 17 =   %227 = bitcast { <2 x float>, float }* %13 to i8*, !noelle.pdg.inst.id !3708
Parallelizer: parallelizerLoop:   Environment:   Live-in 18 =   %228 = bitcast { <2 x float>, float }* %14 to i8*, !noelle.pdg.inst.id !3709
Parallelizer: parallelizerLoop:   Environment:   Live-in 19 =   %229 = bitcast { <2 x float>, float }* %15 to i8*, !noelle.pdg.inst.id !3710
Parallelizer: parallelizerLoop:   Environment:   Live-in 20 =   %230 = bitcast %class.Vec3* %16 to i8*, !noelle.pdg.inst.id !3711
Parallelizer: parallelizerLoop:   Environment:   Live-in 21 =   %231 = bitcast %class.Vec3* %17 to i8*, !noelle.pdg.inst.id !3712
Parallelizer: parallelizerLoop:   Environment:   Live-in 22 =   %232 = bitcast %class.Vec3* %18 to i8*, !noelle.pdg.inst.id !3713
Parallelizer: parallelizerLoop:   Environment:   Live-in 23 =   %233 = bitcast { <2 x float>, float }* %19 to i8*, !noelle.pdg.inst.id !3714
Parallelizer: parallelizerLoop:   Environment:   Live-in 24 =   %234 = bitcast { <2 x float>, float }* %20 to i8*, !noelle.pdg.inst.id !3715
Parallelizer: parallelizerLoop:   Environment:   Live-in 25 =   %235 = bitcast { <2 x float>, float }* %21 to i8*, !noelle.pdg.inst.id !3716
Parallelizer: parallelizerLoop:   Environment:   Live-in 26 =   %292 = sext i32 %.03.i.lcssa to i64, !noelle.pdg.inst.id !3821
Parallelizer: parallelizerLoop:   Environment:   Live-in 27 =   %298 = getelementptr inbounds %struct.Cell, %struct.Cell* %.021, i64 0, i32 0, i64 %297, !noelle.pdg.inst.id !3830
Parallelizer: parallelizerLoop:   Environment:   Live-in 28 =   %299 = getelementptr inbounds %struct.Cell, %struct.Cell* %.021, i64 0, i32 4, i64 %297, !noelle.pdg.inst.id !3831
Parallelizer: parallelizerLoop:   Environment:   Live-in 29 =   %300 = getelementptr inbounds %struct.Cell, %struct.Cell* %.021, i64 0, i32 2, i64 %297, !noelle.pdg.inst.id !3832
Parallelizer: parallelizerLoop:   Environment:   Live-in 30 =   %301 = getelementptr inbounds %struct.Cell, %struct.Cell* %.021, i64 0, i32 3, i64 %297, !noelle.pdg.inst.id !3833
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 66
DOALL:     	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33
DOALL:     	  %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42
DOALL:     	  store { <2 x float>, float } %344, { <2 x float>, float }* %21, align 8, !noelle.pdg.inst.id !45
DOALL:     	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48
DOALL:     	  %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51
DOALL:     	  %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54
DOALL:     	  %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56
DOALL:     	  %348 = fmul float %346, %347, !noelle.pdg.inst.id !3881
DOALL:     	  %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58
DOALL:     	  %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61
DOALL:     	  %351 = getelementptr inbounds %struct.Cell, %struct.Cell* %.011, i64 0, i32 3, i64 %315, !noelle.pdg.inst.id !3882
DOALL:     	  %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64
DOALL:     	  %353 = icmp eq i32 %314, 15, !noelle.pdg.inst.id !3888
DOALL:     	  br i1 %353, label %354, label %._crit_edge67.._crit_edge69_crit_edge, !prof !3642, !noelle.pdg.inst.id !3889
DOALL:     	  %355 = getelementptr inbounds %struct.Cell, %struct.Cell* %.011, i64 0, i32 5, !noelle.pdg.inst.id !3891
DOALL:     	  %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67
DOALL:     	  %.112 = phi %struct.Cell* [ %356, %354 ], [ %.011, %._crit_edge67.._crit_edge69_crit_edge ], !noelle.pdg.inst.id !3893
DOALL:     	  %357 = add nuw nsw i32 %.04, 1, !noelle.pdg.inst.id !3894
DOALL:     	  %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81
DOALL:     	  %.011 = phi %struct.Cell* [ %308, %304 ], [ %.112, %._crit_edge69 ], !noelle.pdg.inst.id !3845
DOALL:     	  %.04 = phi i32 [ 0, %304 ], [ %357, %._crit_edge69 ], !noelle.pdg.inst.id !3846
DOALL:     	  %312 = icmp slt i32 %.04, %310, !noelle.pdg.inst.id !3847
DOALL:     	  br i1 %312, label %313, label %358, !prof !3599, !noelle.loop.id !3848, !noelle.pdg.inst.id !3849
DOALL:     	  %314 = and i32 %.04, 15, !noelle.pdg.inst.id !3850
DOALL:     	  %315 = zext i32 %314 to i64, !noelle.pdg.inst.id !3851
DOALL:     	  %316 = getelementptr inbounds %struct.Cell, %struct.Cell* %.011, i64 0, i32 0, i64 %315, !noelle.pdg.inst.id !3852
DOALL:     	  %317 = icmp ult %class.Vec3* %316, %298, !noelle.pdg.inst.id !3853
DOALL:     	  br i1 %317, label %318, label %.._crit_edge67_crit_edge, !prof !3606, !noelle.pdg.inst.id !3854
DOALL:     	  %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83
DOALL:     	  store { <2 x float>, float } %319, { <2 x float>, float }* %7, align 8, !noelle.pdg.inst.id !86
DOALL:     	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89
DOALL:     	  %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92
DOALL:     	  store float %320, float* %8, align 4, !tbaa !3421, !noelle.pdg.inst.id !95
DOALL:     	  %321 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !98
DOALL:     	  %322 = fcmp olt float %320, %321, !noelle.pdg.inst.id !3858
DOALL:     	  br i1 %322, label %323, label %.._crit_edge68_crit_edge, !prof !3631, !noelle.pdg.inst.id !3859
DOALL:     	  store float 0x3D71979980000000, float* %9, align 4, !tbaa !3421, !noelle.pdg.inst.id !100
DOALL:     	  %324 = call dereferenceable(4) float* @_ZSt3maxIfERKT_S2_S2_(float* nonnull dereferenceable(4) %8, float* nonnull dereferenceable(4) %9), !noelle.pdg.inst.id !103
DOALL:     	  %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106
DOALL:     	  %326 = call float @sqrtf(float %325) #6, !noelle.pdg.inst.id !108
DOALL:     	  %327 = load float, float* @h, align 4, !tbaa !3421, !noelle.pdg.inst.id !111
DOALL:     	  %328 = fsub float %327, %326, !noelle.pdg.inst.id !3863
DOALL:     	  %329 = load float, float* @pressureCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !113
DOALL:     	  %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115
DOALL:     	  store { <2 x float>, float } %330, { <2 x float>, float }* %13, align 8, !noelle.pdg.inst.id !118
DOALL:     	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121
DOALL:     	  %331 = fmul float %328, %328, !noelle.pdg.inst.id !3867
DOALL:     	  %332 = fdiv float %331, %326, !noelle.pdg.inst.id !3868
DOALL:     	  %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124
DOALL:     	  store { <2 x float>, float } %333, { <2 x float>, float }* %14, align 8, !noelle.pdg.inst.id !127
DOALL:     	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130
DOALL:     	  %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133
DOALL:     	  %335 = getelementptr inbounds %struct.Cell, %struct.Cell* %.011, i64 0, i32 4, i64 %315, !noelle.pdg.inst.id !3869
DOALL:     	  %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135
DOALL:     	  %337 = fadd float %334, %336, !noelle.pdg.inst.id !3870
DOALL:     	  %338 = fadd float %337, -2.000000e+03, !noelle.pdg.inst.id !3871
DOALL:     	  %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137
DOALL:     	  store { <2 x float>, float } %339, { <2 x float>, float }* %15, align 8, !noelle.pdg.inst.id !140
DOALL:     	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143
DOALL:     	  %340 = getelementptr inbounds %struct.Cell, %struct.Cell* %.011, i64 0, i32 2, i64 %315, !noelle.pdg.inst.id !3877
DOALL:     	  %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146
DOALL:     	  store { <2 x float>, float } %341, { <2 x float>, float }* %19, align 8, !noelle.pdg.inst.id !149
DOALL:     	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152
DOALL:     	  %342 = load float, float* @viscosityCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !155
DOALL:     	  %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157
DOALL:     	  store { <2 x float>, float } %343, { <2 x float>, float }* %20, align 8, !noelle.pdg.inst.id !160
DOALL:     External nodes: 28
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %232) #6, !noelle.pdg.inst.id !3878
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %231) #6, !noelle.pdg.inst.id !3879
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %230) #6, !noelle.pdg.inst.id !3880
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %224) #6, !noelle.pdg.inst.id !3883
DOALL:     	  br label %._crit_edge68, !noelle.pdg.inst.id !3884
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %222) #6, !noelle.pdg.inst.id !3885
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %220) #6, !noelle.pdg.inst.id !3886
DOALL:     	  br label %._crit_edge67, !noelle.pdg.inst.id !3887
DOALL:     	  br label %._crit_edge69, !noelle.pdg.inst.id !3890
DOALL:     	  br label %._crit_edge69, !noelle.pdg.inst.id !3892
DOALL:     	  br label %311, !noelle.pdg.inst.id !3895
DOALL:     	  br i1 %303, label %304, label %359, !prof !3587, !noelle.loop.id !3837, !noelle.pdg.inst.id !3838, !noelle.parallelizer.looporder !3839
DOALL:     	  %308 = getelementptr inbounds %struct.Cell, %struct.Cell* %195, i64 %307, !noelle.pdg.inst.id !3842
DOALL:     	  %309 = getelementptr inbounds i32, i32* %196, i64 %307, !noelle.pdg.inst.id !3843
DOALL:     	  br label %._crit_edge67, !noelle.pdg.inst.id !3855
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %220) #6, !noelle.pdg.inst.id !3856
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %222) #6, !noelle.pdg.inst.id !3857
DOALL:     	  br label %._crit_edge68, !noelle.pdg.inst.id !3860
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %223) #6, !noelle.pdg.inst.id !3861
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %223) #6, !noelle.pdg.inst.id !3862
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %224) #6, !noelle.pdg.inst.id !3864
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %225) #6, !noelle.pdg.inst.id !3865
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %226) #6, !noelle.pdg.inst.id !3866
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %226) #6, !noelle.pdg.inst.id !3872
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %225) #6, !noelle.pdg.inst.id !3873
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %230) #6, !noelle.pdg.inst.id !3874
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %231) #6, !noelle.pdg.inst.id !3875
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %232) #6, !noelle.pdg.inst.id !3876
DOALL:     Edges: 1011
DOALL:     Loop-carried data dependences
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         store { <2 x float>, float } %344, { <2 x float>, float }* %21, align 8, !noelle.pdg.inst.id !45 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         store { <2 x float>, float } %344, { <2 x float>, float }* %21, align 8, !noelle.pdg.inst.id !45 --->   store { <2 x float>, float } %344, { <2 x float>, float }* %21, align 8, !noelle.pdg.inst.id !45 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         store { <2 x float>, float } %333, { <2 x float>, float }* %14, align 8, !noelle.pdg.inst.id !127 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         store { <2 x float>, float } %333, { <2 x float>, float }* %14, align 8, !noelle.pdg.inst.id !127 --->   store { <2 x float>, float } %333, { <2 x float>, float }* %14, align 8, !noelle.pdg.inst.id !127 via memory
DOALL:         store { <2 x float>, float } %341, { <2 x float>, float }* %19, align 8, !noelle.pdg.inst.id !149 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         store { <2 x float>, float } %341, { <2 x float>, float }* %19, align 8, !noelle.pdg.inst.id !149 --->   store { <2 x float>, float } %341, { <2 x float>, float }* %19, align 8, !noelle.pdg.inst.id !149 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   store { <2 x float>, float } %341, { <2 x float>, float }* %19, align 8, !noelle.pdg.inst.id !149 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %324 = call dereferenceable(4) float* @_ZSt3maxIfERKT_S2_S2_(float* nonnull dereferenceable(4) %8, float* nonnull dereferenceable(4) %9), !noelle.pdg.inst.id !103 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %324 = call dereferenceable(4) float* @_ZSt3maxIfERKT_S2_S2_(float* nonnull dereferenceable(4) %8, float* nonnull dereferenceable(4) %9), !noelle.pdg.inst.id !103 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %324 = call dereferenceable(4) float* @_ZSt3maxIfERKT_S2_S2_(float* nonnull dereferenceable(4) %8, float* nonnull dereferenceable(4) %9), !noelle.pdg.inst.id !103 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %324 = call dereferenceable(4) float* @_ZSt3maxIfERKT_S2_S2_(float* nonnull dereferenceable(4) %8, float* nonnull dereferenceable(4) %9), !noelle.pdg.inst.id !103 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %324 = call dereferenceable(4) float* @_ZSt3maxIfERKT_S2_S2_(float* nonnull dereferenceable(4) %8, float* nonnull dereferenceable(4) %9), !noelle.pdg.inst.id !103 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %324 = call dereferenceable(4) float* @_ZSt3maxIfERKT_S2_S2_(float* nonnull dereferenceable(4) %8, float* nonnull dereferenceable(4) %9), !noelle.pdg.inst.id !103 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %324 = call dereferenceable(4) float* @_ZSt3maxIfERKT_S2_S2_(float* nonnull dereferenceable(4) %8, float* nonnull dereferenceable(4) %9), !noelle.pdg.inst.id !103 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %329 = load float, float* @pressureCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !113 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %329 = load float, float* @pressureCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !113 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %329 = load float, float* @pressureCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !113 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %329 = load float, float* @pressureCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !113 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %329 = load float, float* @pressureCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !113 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %329 = load float, float* @pressureCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !113 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %329 = load float, float* @pressureCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !113 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %342 = load float, float* @viscosityCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !155 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %342 = load float, float* @viscosityCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !155 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %342 = load float, float* @viscosityCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !155 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %342 = load float, float* @viscosityCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !155 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %342 = load float, float* @viscosityCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !155 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %342 = load float, float* @viscosityCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !155 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %342 = load float, float* @viscosityCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !155 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %321 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !98 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %321 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !98 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %321 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !98 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %321 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !98 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %321 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !98 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %321 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !98 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %321 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !98 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %327 = load float, float* @h, align 4, !tbaa !3421, !noelle.pdg.inst.id !111 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %327 = load float, float* @h, align 4, !tbaa !3421, !noelle.pdg.inst.id !111 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %327 = load float, float* @h, align 4, !tbaa !3421, !noelle.pdg.inst.id !111 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %327 = load float, float* @h, align 4, !tbaa !3421, !noelle.pdg.inst.id !111 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %327 = load float, float* @h, align 4, !tbaa !3421, !noelle.pdg.inst.id !111 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %327 = load float, float* @h, align 4, !tbaa !3421, !noelle.pdg.inst.id !111 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %327 = load float, float* @h, align 4, !tbaa !3421, !noelle.pdg.inst.id !111 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         store { <2 x float>, float } %343, { <2 x float>, float }* %20, align 8, !noelle.pdg.inst.id !160 --->   store { <2 x float>, float } %343, { <2 x float>, float }* %20, align 8, !noelle.pdg.inst.id !160 via memory
DOALL:         store { <2 x float>, float } %343, { <2 x float>, float }* %20, align 8, !noelle.pdg.inst.id !160 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         store { <2 x float>, float } %330, { <2 x float>, float }* %13, align 8, !noelle.pdg.inst.id !118 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         store { <2 x float>, float } %330, { <2 x float>, float }* %13, align 8, !noelle.pdg.inst.id !118 --->   store { <2 x float>, float } %330, { <2 x float>, float }* %13, align 8, !noelle.pdg.inst.id !118 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   store { <2 x float>, float } %330, { <2 x float>, float }* %13, align 8, !noelle.pdg.inst.id !118 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   store { <2 x float>, float } %333, { <2 x float>, float }* %14, align 8, !noelle.pdg.inst.id !127 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   store { <2 x float>, float } %319, { <2 x float>, float }* %7, align 8, !noelle.pdg.inst.id !86 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   store { <2 x float>, float } %344, { <2 x float>, float }* %21, align 8, !noelle.pdg.inst.id !45 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   store { <2 x float>, float } %339, { <2 x float>, float }* %15, align 8, !noelle.pdg.inst.id !140 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         store { <2 x float>, float } %319, { <2 x float>, float }* %7, align 8, !noelle.pdg.inst.id !86 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         store { <2 x float>, float } %319, { <2 x float>, float }* %7, align 8, !noelle.pdg.inst.id !86 --->   store { <2 x float>, float } %319, { <2 x float>, float }* %7, align 8, !noelle.pdg.inst.id !86 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   store { <2 x float>, float } %343, { <2 x float>, float }* %20, align 8, !noelle.pdg.inst.id !160 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         store { <2 x float>, float } %339, { <2 x float>, float }* %15, align 8, !noelle.pdg.inst.id !140 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         store { <2 x float>, float } %339, { <2 x float>, float }* %15, align 8, !noelle.pdg.inst.id !140 --->   store { <2 x float>, float } %339, { <2 x float>, float }* %15, align 8, !noelle.pdg.inst.id !140 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DSWP: It is not applicable because the coverage of the biggest SCC is 8.892061e-01
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "_Z13ComputeForcesv"
Parallelizer: parallelizerLoop:   Loop 34 = "  %244 = icmp slt i64 %indvars.iv73, %59, !noelle.pdg.inst.id !3732"
Parallelizer: parallelizerLoop:   Nesting level = 2
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %47 = getelementptr inbounds [27 x i32], [27 x i32]* %3, i64 0, i64 0, !noelle.pdg.inst.id !3442
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %59 = sext i32 %58 to i64, !noelle.pdg.inst.id !3453
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %60 = load i32, i32* @nx, align 4, !tbaa !3398, !noelle.pdg.inst.id !688
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %61 = sext i32 %60 to i64, !noelle.pdg.inst.id !3454
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %195 = load %struct.Cell*, %struct.Cell** @cells, align 8, !noelle.pdg.inst.id !760
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %196 = load i32*, i32** @cnumPars, align 8, !noelle.pdg.inst.id !762
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 =   %220 = bitcast %class.Vec3* %6 to i8*, !noelle.pdg.inst.id !3701
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 =   %221 = bitcast { <2 x float>, float }* %7 to i8*, !noelle.pdg.inst.id !3702
Parallelizer: parallelizerLoop:   Environment:   Live-in 16 =   %222 = bitcast float* %8 to i8*, !noelle.pdg.inst.id !3703
Parallelizer: parallelizerLoop:   Environment:   Live-in 17 =   %223 = bitcast float* %9 to i8*, !noelle.pdg.inst.id !3704
Parallelizer: parallelizerLoop:   Environment:   Live-in 18 =   %224 = bitcast %class.Vec3* %10 to i8*, !noelle.pdg.inst.id !3705
Parallelizer: parallelizerLoop:   Environment:   Live-in 19 =   %225 = bitcast %class.Vec3* %11 to i8*, !noelle.pdg.inst.id !3706
Parallelizer: parallelizerLoop:   Environment:   Live-in 20 =   %226 = bitcast %class.Vec3* %12 to i8*, !noelle.pdg.inst.id !3707
Parallelizer: parallelizerLoop:   Environment:   Live-in 21 =   %227 = bitcast { <2 x float>, float }* %13 to i8*, !noelle.pdg.inst.id !3708
Parallelizer: parallelizerLoop:   Environment:   Live-in 22 =   %228 = bitcast { <2 x float>, float }* %14 to i8*, !noelle.pdg.inst.id !3709
Parallelizer: parallelizerLoop:   Environment:   Live-in 23 =   %229 = bitcast { <2 x float>, float }* %15 to i8*, !noelle.pdg.inst.id !3710
Parallelizer: parallelizerLoop:   Environment:   Live-in 24 =   %230 = bitcast %class.Vec3* %16 to i8*, !noelle.pdg.inst.id !3711
Parallelizer: parallelizerLoop:   Environment:   Live-in 25 =   %231 = bitcast %class.Vec3* %17 to i8*, !noelle.pdg.inst.id !3712
Parallelizer: parallelizerLoop:   Environment:   Live-in 26 =   %232 = bitcast %class.Vec3* %18 to i8*, !noelle.pdg.inst.id !3713
Parallelizer: parallelizerLoop:   Environment:   Live-in 27 =   %233 = bitcast { <2 x float>, float }* %19 to i8*, !noelle.pdg.inst.id !3714
Parallelizer: parallelizerLoop:   Environment:   Live-in 28 =   %234 = bitcast { <2 x float>, float }* %20 to i8*, !noelle.pdg.inst.id !3715
Parallelizer: parallelizerLoop:   Environment:   Live-in 29 =   %235 = bitcast { <2 x float>, float }* %21 to i8*, !noelle.pdg.inst.id !3716
Parallelizer: parallelizerLoop:   Environment:   Live-in 30 =   %237 = sext i32 %236 to i64, !noelle.pdg.inst.id !3717
Parallelizer: parallelizerLoop:   Environment:   Live-in 31 =   %indvars.iv75 = phi i64 [ %indvars.iv.next76, %367 ], [ 0, %219 ], !noelle.pdg.inst.id !3719
Parallelizer: parallelizerLoop:   Environment:   Live-in 32 =   %.3 = phi i32 [ %.4.lcssa, %367 ], [ 0, %219 ], !noelle.pdg.inst.id !3721
Parallelizer: parallelizerLoop:   Environment:   Live-in 33 =   %243 = mul nsw i32 %58, %242, !noelle.pdg.inst.id !3728
Parallelizer: parallelizerLoop:   Environment:   Live-out 34 =   %.4 = phi i32 [ %.3, %.preheader37.preheader ], [ %366, %365 ], !noelle.pdg.inst.id !3731
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 34
DSWP: It is not applicable because the coverage of the biggest SCC is 9.048918e-01
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "_Z13ComputeForcesv"
Parallelizer: parallelizerLoop:   Loop 35 = "  %250 = icmp slt i64 %indvars.iv71, %61, !noelle.pdg.inst.id !3743"
Parallelizer: parallelizerLoop:   Nesting level = 3
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %47 = getelementptr inbounds [27 x i32], [27 x i32]* %3, i64 0, i64 0, !noelle.pdg.inst.id !3442
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %59 = sext i32 %58 to i64, !noelle.pdg.inst.id !3453
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %61 = sext i32 %60 to i64, !noelle.pdg.inst.id !3454
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %195 = load %struct.Cell*, %struct.Cell** @cells, align 8, !noelle.pdg.inst.id !760
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %196 = load i32*, i32** @cnumPars, align 8, !noelle.pdg.inst.id !762
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %220 = bitcast %class.Vec3* %6 to i8*, !noelle.pdg.inst.id !3701
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 =   %221 = bitcast { <2 x float>, float }* %7 to i8*, !noelle.pdg.inst.id !3702
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 =   %222 = bitcast float* %8 to i8*, !noelle.pdg.inst.id !3703
Parallelizer: parallelizerLoop:   Environment:   Live-in 16 =   %223 = bitcast float* %9 to i8*, !noelle.pdg.inst.id !3704
Parallelizer: parallelizerLoop:   Environment:   Live-in 17 =   %224 = bitcast %class.Vec3* %10 to i8*, !noelle.pdg.inst.id !3705
Parallelizer: parallelizerLoop:   Environment:   Live-in 18 =   %225 = bitcast %class.Vec3* %11 to i8*, !noelle.pdg.inst.id !3706
Parallelizer: parallelizerLoop:   Environment:   Live-in 19 =   %226 = bitcast %class.Vec3* %12 to i8*, !noelle.pdg.inst.id !3707
Parallelizer: parallelizerLoop:   Environment:   Live-in 20 =   %227 = bitcast { <2 x float>, float }* %13 to i8*, !noelle.pdg.inst.id !3708
Parallelizer: parallelizerLoop:   Environment:   Live-in 21 =   %228 = bitcast { <2 x float>, float }* %14 to i8*, !noelle.pdg.inst.id !3709
Parallelizer: parallelizerLoop:   Environment:   Live-in 22 =   %229 = bitcast { <2 x float>, float }* %15 to i8*, !noelle.pdg.inst.id !3710
Parallelizer: parallelizerLoop:   Environment:   Live-in 23 =   %230 = bitcast %class.Vec3* %16 to i8*, !noelle.pdg.inst.id !3711
Parallelizer: parallelizerLoop:   Environment:   Live-in 24 =   %231 = bitcast %class.Vec3* %17 to i8*, !noelle.pdg.inst.id !3712
Parallelizer: parallelizerLoop:   Environment:   Live-in 25 =   %232 = bitcast %class.Vec3* %18 to i8*, !noelle.pdg.inst.id !3713
Parallelizer: parallelizerLoop:   Environment:   Live-in 26 =   %233 = bitcast { <2 x float>, float }* %19 to i8*, !noelle.pdg.inst.id !3714
Parallelizer: parallelizerLoop:   Environment:   Live-in 27 =   %234 = bitcast { <2 x float>, float }* %20 to i8*, !noelle.pdg.inst.id !3715
Parallelizer: parallelizerLoop:   Environment:   Live-in 28 =   %235 = bitcast { <2 x float>, float }* %21 to i8*, !noelle.pdg.inst.id !3716
Parallelizer: parallelizerLoop:   Environment:   Live-in 29 =   %237 = sext i32 %236 to i64, !noelle.pdg.inst.id !3717
Parallelizer: parallelizerLoop:   Environment:   Live-in 30 =   %indvars.iv75 = phi i64 [ %indvars.iv.next76, %367 ], [ 0, %219 ], !noelle.pdg.inst.id !3719
Parallelizer: parallelizerLoop:   Environment:   Live-in 31 =   %indvars.iv73 = phi i64 [ 0, %.preheader37.preheader ], [ %indvars.iv.next74, %365 ], !noelle.pdg.inst.id !3730
Parallelizer: parallelizerLoop:   Environment:   Live-in 32 =   %245 = sext i32 %.4 to i64, !noelle.pdg.inst.id !3736
Parallelizer: parallelizerLoop:   Environment:   Live-in 33 =   %248 = mul nsw i32 %247, %60, !noelle.pdg.inst.id !3739
Parallelizer: parallelizerLoop:   Environment:   Live-out 34 =   %indvars.iv50 = phi i64 [ %245, %.preheader ], [ %indvars.iv.next51, %._crit_edge66 ], !noelle.pdg.inst.id !3742
DOALL: Checking if the loop is DOALL
DOALL:   The next live-out variables are not reducable
DOALL:     Live-out ID = 34
DSWP: It is not applicable because the coverage of the biggest SCC is 9.049069e-01
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "_Z13ComputeForcesv"
Parallelizer: parallelizerLoop:   Loop 33 = "  %240 = sext i32 %239 to i64, !noelle.pdg.inst.id !3722"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3383
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3389
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3390
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3391
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3395
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3396
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3397
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %47 = getelementptr inbounds [27 x i32], [27 x i32]* %3, i64 0, i64 0, !noelle.pdg.inst.id !3442
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %.pre60 = load i32, i32* @nz, align 4, !tbaa !3398, !noelle.pdg.inst.id !684
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %58 = load i32, i32* @ny, align 4, !tbaa !3398, !noelle.pdg.inst.id !686
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %59 = sext i32 %58 to i64, !noelle.pdg.inst.id !3453
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %60 = load i32, i32* @nx, align 4, !tbaa !3398, !noelle.pdg.inst.id !688
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %61 = sext i32 %60 to i64, !noelle.pdg.inst.id !3454
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 =   %195 = load %struct.Cell*, %struct.Cell** @cells, align 8, !noelle.pdg.inst.id !760
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 =   %196 = load i32*, i32** @cnumPars, align 8, !noelle.pdg.inst.id !762
Parallelizer: parallelizerLoop:   Environment:   Live-in 16 =   %220 = bitcast %class.Vec3* %6 to i8*, !noelle.pdg.inst.id !3701
Parallelizer: parallelizerLoop:   Environment:   Live-in 17 =   %221 = bitcast { <2 x float>, float }* %7 to i8*, !noelle.pdg.inst.id !3702
Parallelizer: parallelizerLoop:   Environment:   Live-in 18 =   %222 = bitcast float* %8 to i8*, !noelle.pdg.inst.id !3703
Parallelizer: parallelizerLoop:   Environment:   Live-in 19 =   %223 = bitcast float* %9 to i8*, !noelle.pdg.inst.id !3704
Parallelizer: parallelizerLoop:   Environment:   Live-in 20 =   %224 = bitcast %class.Vec3* %10 to i8*, !noelle.pdg.inst.id !3705
Parallelizer: parallelizerLoop:   Environment:   Live-in 21 =   %225 = bitcast %class.Vec3* %11 to i8*, !noelle.pdg.inst.id !3706
Parallelizer: parallelizerLoop:   Environment:   Live-in 22 =   %226 = bitcast %class.Vec3* %12 to i8*, !noelle.pdg.inst.id !3707
Parallelizer: parallelizerLoop:   Environment:   Live-in 23 =   %227 = bitcast { <2 x float>, float }* %13 to i8*, !noelle.pdg.inst.id !3708
Parallelizer: parallelizerLoop:   Environment:   Live-in 24 =   %228 = bitcast { <2 x float>, float }* %14 to i8*, !noelle.pdg.inst.id !3709
Parallelizer: parallelizerLoop:   Environment:   Live-in 25 =   %229 = bitcast { <2 x float>, float }* %15 to i8*, !noelle.pdg.inst.id !3710
Parallelizer: parallelizerLoop:   Environment:   Live-in 26 =   %230 = bitcast %class.Vec3* %16 to i8*, !noelle.pdg.inst.id !3711
Parallelizer: parallelizerLoop:   Environment:   Live-in 27 =   %231 = bitcast %class.Vec3* %17 to i8*, !noelle.pdg.inst.id !3712
Parallelizer: parallelizerLoop:   Environment:   Live-in 28 =   %232 = bitcast %class.Vec3* %18 to i8*, !noelle.pdg.inst.id !3713
Parallelizer: parallelizerLoop:   Environment:   Live-in 29 =   %233 = bitcast { <2 x float>, float }* %19 to i8*, !noelle.pdg.inst.id !3714
Parallelizer: parallelizerLoop:   Environment:   Live-in 30 =   %234 = bitcast { <2 x float>, float }* %20 to i8*, !noelle.pdg.inst.id !3715
Parallelizer: parallelizerLoop:   Environment:   Live-in 31 =   %235 = bitcast { <2 x float>, float }* %21 to i8*, !noelle.pdg.inst.id !3716
Parallelizer: parallelizerLoop:   Environment:   Live-in 32 =   %237 = sext i32 %236 to i64, !noelle.pdg.inst.id !3717
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 180
DOALL:     	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33
DOALL:     	  %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42
DOALL:     	  store { <2 x float>, float } %344, { <2 x float>, float }* %21, align 8, !noelle.pdg.inst.id !45
DOALL:     	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48
DOALL:     	  %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51
DOALL:     	  %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54
DOALL:     	  %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56
DOALL:     	  %348 = fmul float %346, %347, !noelle.pdg.inst.id !3881
DOALL:     	  %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58
DOALL:     	  %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61
DOALL:     	  %351 = getelementptr inbounds %struct.Cell, %struct.Cell* %.011, i64 0, i32 3, i64 %315, !noelle.pdg.inst.id !3882
DOALL:     	  %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64
DOALL:     	  %353 = icmp eq i32 %314, 15, !noelle.pdg.inst.id !3888
DOALL:     	  br i1 %353, label %354, label %._crit_edge67.._crit_edge69_crit_edge, !prof !3642, !noelle.pdg.inst.id !3889
DOALL:     	  %355 = getelementptr inbounds %struct.Cell, %struct.Cell* %.011, i64 0, i32 5, !noelle.pdg.inst.id !3891
DOALL:     	  %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67
DOALL:     	  %.112 = phi %struct.Cell* [ %356, %354 ], [ %.011, %._crit_edge67.._crit_edge69_crit_edge ], !noelle.pdg.inst.id !3893
DOALL:     	  %357 = add nuw nsw i32 %.04, 1, !noelle.pdg.inst.id !3894
DOALL:     	  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !noelle.pdg.inst.id !3896
DOALL:     	  %indvars.iv75 = phi i64 [ %indvars.iv.next76, %367 ], [ 0, %219 ], !noelle.pdg.inst.id !3719
DOALL:     	  %239 = phi i32 [ %.pre49, %367 ], [ %.pre60, %219 ], !noelle.pdg.inst.id !3720
DOALL:     	  %.3 = phi i32 [ %.4.lcssa, %367 ], [ 0, %219 ], !noelle.pdg.inst.id !3721
DOALL:     	  %240 = sext i32 %239 to i64, !noelle.pdg.inst.id !3722
DOALL:     	  %241 = icmp slt i64 %indvars.iv75, %240, !noelle.pdg.inst.id !3723
DOALL:     	  br i1 %241, label %.preheader37.preheader, label %368, !prof !3460, !noelle.loop.id !3724, !noelle.pdg.inst.id !3725, !noelle.parallelizer.looporder !3726
DOALL:     	  %242 = trunc i64 %indvars.iv75 to i32, !noelle.pdg.inst.id !3727
DOALL:     	  %243 = mul nsw i32 %58, %242, !noelle.pdg.inst.id !3728
DOALL:     	  %indvars.iv73 = phi i64 [ 0, %.preheader37.preheader ], [ %indvars.iv.next74, %365 ], !noelle.pdg.inst.id !3730
DOALL:     	  %.4 = phi i32 [ %.3, %.preheader37.preheader ], [ %366, %365 ], !noelle.pdg.inst.id !3731
DOALL:     	  %244 = icmp slt i64 %indvars.iv73, %59, !noelle.pdg.inst.id !3732
DOALL:     	  br i1 %244, label %.preheader, label %367, !prof !3470, !noelle.loop.id !3733, !noelle.pdg.inst.id !3734, !noelle.parallelizer.looporder !3735
DOALL:     	  %245 = sext i32 %.4 to i64, !noelle.pdg.inst.id !3736
DOALL:     	  %246 = trunc i64 %indvars.iv73 to i32, !noelle.pdg.inst.id !3737
DOALL:     	  %247 = add nsw i32 %243, %246, !noelle.pdg.inst.id !3738
DOALL:     	  %248 = mul nsw i32 %247, %60, !noelle.pdg.inst.id !3739
DOALL:     	  %indvars.iv71 = phi i64 [ 0, %.preheader ], [ %indvars.iv.next72, %._crit_edge66 ], !noelle.pdg.inst.id !3741
DOALL:     	  %indvars.iv50 = phi i64 [ %245, %.preheader ], [ %indvars.iv.next51, %._crit_edge66 ], !noelle.pdg.inst.id !3742
DOALL:     	  %250 = icmp slt i64 %indvars.iv71, %61, !noelle.pdg.inst.id !3743
DOALL:     	  br i1 %250, label %251, label %365, !prof !3482, !noelle.loop.id !3744, !noelle.pdg.inst.id !3745, !noelle.parallelizer.looporder !3746
DOALL:     	  %252 = getelementptr inbounds i32, i32* %196, i64 %indvars.iv50, !noelle.pdg.inst.id !3747
DOALL:     	  %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69
DOALL:     	  %254 = icmp eq i32 %253, 0, !noelle.pdg.inst.id !3748
DOALL:     	  br i1 %254, label %.._crit_edge66_crit_edge, label %255, !prof !3488, !noelle.pdg.inst.id !3749
DOALL:     	  %256 = trunc i64 %indvars.iv71 to i32, !noelle.pdg.inst.id !3751
DOALL:     	  %257 = add nsw i32 %248, %256, !noelle.pdg.inst.id !3752
DOALL:     	  store i32 %257, i32* %47, align 16, !tbaa !3398, !noelle.pdg.inst.id !71
DOALL:     	  %258 = sext i32 %257 to i64, !noelle.pdg.inst.id !3753
DOALL:     	  %indvars.iv68 = phi i64 [ %indvars.iv.next69, %.us-lcssa.us ], [ -1, %255 ], !noelle.pdg.inst.id !3755
DOALL:     	  %.03.i = phi i32 [ %.1.i.lcssa, %.us-lcssa.us ], [ 1, %255 ], !noelle.pdg.inst.id !3756
DOALL:     	  %260 = icmp eq i64 %indvars.iv68, 2, !noelle.pdg.inst.id !3757
DOALL:     	  br i1 %260, label %_Z16GetNeighborCellsiiiPi.exit, label %261, !prof !3498, !noelle.loop.id !3758, !noelle.pdg.inst.id !3759
DOALL:     	  %262 = add nsw i64 %indvars.iv68, %indvars.iv71, !noelle.pdg.inst.id !3760
DOALL:     	  %263 = icmp slt i64 %262, %61, !noelle.pdg.inst.id !3761
DOALL:     	  br i1 %263, label %.split.us.preheader, label %..us-lcssa.us_crit_edge, !prof !3503, !noelle.pdg.inst.id !3762
DOALL:     	  %indvars.iv65 = phi i64 [ %indvars.iv.next66, %.us-lcssa.us.i.us ], [ -1, %.split.us.preheader ], !noelle.pdg.inst.id !3765
DOALL:     	  %.1.i.us = phi i32 [ %.2.lcssa.i.us, %.us-lcssa.us.i.us ], [ %.03.i, %.split.us.preheader ], !noelle.pdg.inst.id !3766
DOALL:     	  %264 = icmp eq i64 %indvars.iv65, 2, !noelle.pdg.inst.id !3767
DOALL:     	  br i1 %264, label %.us-lcssa.us.loopexit, label %265, !prof !3510, !noelle.loop.id !3768, !noelle.pdg.inst.id !3769
DOALL:     	  %266 = add nsw i64 %indvars.iv65, %indvars.iv73, !noelle.pdg.inst.id !3770
DOALL:     	  %267 = or i64 %262, %266, !noelle.pdg.inst.id !3771
DOALL:     	  %268 = trunc i64 %267 to i32, !noelle.pdg.inst.id !3772
DOALL:     	  %269 = icmp sgt i32 %268, -1, !noelle.pdg.inst.id !3773
DOALL:     	  %270 = icmp slt i64 %266, %59, !noelle.pdg.inst.id !3774
DOALL:     	  %or.cond3 = and i1 %269, %270, !noelle.pdg.inst.id !3775
DOALL:     	  br i1 %or.cond3, label %.split.us..split.us.split_crit_edge.i.us.us.us.preheader, label %..us-lcssa.us.i.us_crit_edge, !prof !3519, !noelle.pdg.inst.id !3776
DOALL:     	  %.2.us.i.us.us.us.lcssa = phi i32 [ %.2.us.i.us.us.us, %.split.us..split.us.split_crit_edge.i.us.us.us ], !noelle.pdg.inst.id !3779
DOALL:     	  %.2.lcssa.i.us = phi i32 [ %.1.i.us, %..us-lcssa.us.i.us_crit_edge ], [ %.2.us.i.us.us.us.lcssa, %.us-lcssa.us.i.us.loopexit ], !noelle.pdg.inst.id !3781
DOALL:     	  %indvars.iv.next66 = add nsw i64 %indvars.iv65, 1, !noelle.pdg.inst.id !3782
DOALL:     	  %indvars.iv63 = phi i64 [ %indvars.iv.next64, %._crit_edge.i.us.us.us ], [ -1, %.split.us..split.us.split_crit_edge.i.us.us.us.preheader ], !noelle.pdg.inst.id !3784
DOALL:     	  %.2.us.i.us.us.us = phi i32 [ %.4.us.i.us.us.us, %._crit_edge.i.us.us.us ], [ %.1.i.us, %.split.us..split.us.split_crit_edge.i.us.us.us.preheader ], !noelle.pdg.inst.id !3785
DOALL:     	  %271 = icmp eq i64 %indvars.iv63, 2, !noelle.pdg.inst.id !3786
DOALL:     	  br i1 %271, label %.us-lcssa.us.i.us.loopexit, label %272, !prof !3531, !noelle.loop.id !3787, !noelle.pdg.inst.id !3788
DOALL:     	  %273 = add nsw i64 %indvars.iv63, %indvars.iv75, !noelle.pdg.inst.id !3789
DOALL:     	  %274 = icmp sgt i64 %273, -1, !noelle.pdg.inst.id !3790
DOALL:     	  %275 = icmp slt i64 %273, %237, !noelle.pdg.inst.id !3791
DOALL:     	  %or.cond6.us.i.us.us.us = and i1 %274, %275, !noelle.pdg.inst.id !3792
DOALL:     	  br i1 %or.cond6.us.i.us.us.us, label %276, label %.._crit_edge.i.us.us.us_crit_edge, !prof !3538, !noelle.pdg.inst.id !3793
DOALL:     	  %277 = mul nsw i64 %273, %59, !noelle.pdg.inst.id !3795
DOALL:     	  %278 = add nsw i64 %277, %266, !noelle.pdg.inst.id !3796
DOALL:     	  %279 = mul nsw i64 %278, %61, !noelle.pdg.inst.id !3797
DOALL:     	  %280 = add nsw i64 %279, %262, !noelle.pdg.inst.id !3798
DOALL:     	  %281 = icmp slt i64 %280, %258, !noelle.pdg.inst.id !3799
DOALL:     	  br i1 %281, label %282, label %.._crit_edge.i.us.us.us_crit_edge36, !prof !3546, !noelle.pdg.inst.id !3800
DOALL:     	  %283 = getelementptr inbounds i32, i32* %196, i64 %280, !noelle.pdg.inst.id !3802
DOALL:     	  %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74
DOALL:     	  %285 = icmp eq i32 %284, 0, !noelle.pdg.inst.id !3803
DOALL:     	  br i1 %285, label %.._crit_edge.i.us.us.us_crit_edge37, label %286, !prof !3551, !noelle.pdg.inst.id !3804
DOALL:     	  %287 = sext i32 %.2.us.i.us.us.us to i64, !noelle.pdg.inst.id !3806
DOALL:     	  %288 = getelementptr inbounds [27 x i32], [27 x i32]* %3, i64 0, i64 %287, !noelle.pdg.inst.id !3807
DOALL:     	  %289 = trunc i64 %280 to i32, !noelle.pdg.inst.id !3808
DOALL:     	  store i32 %289, i32* %288, align 4, !tbaa !3398, !noelle.pdg.inst.id !76
DOALL:     	  %290 = add nsw i32 %.2.us.i.us.us.us, 1, !noelle.pdg.inst.id !3809
DOALL:     	  %.4.us.i.us.us.us = phi i32 [ %290, %286 ], [ %.2.us.i.us.us.us, %.._crit_edge.i.us.us.us_crit_edge ], [ %.2.us.i.us.us.us, %.._crit_edge.i.us.us.us_crit_edge36 ], [ %.2.us.i.us.us.us, %.._crit_edge.i.us.us.us_crit_edge37 ], !noelle.pdg.inst.id !3811
DOALL:     	  %indvars.iv.next64 = add nsw i64 %indvars.iv63, 1, !noelle.pdg.inst.id !3812
DOALL:     	  %.1.i.us.lcssa = phi i32 [ %.1.i.us, %.split.us ], !noelle.pdg.inst.id !3814
DOALL:     	  %.1.i.lcssa = phi i32 [ %.03.i, %..us-lcssa.us_crit_edge ], [ %.1.i.us.lcssa, %.us-lcssa.us.loopexit ], !noelle.pdg.inst.id !3816
DOALL:     	  %indvars.iv.next69 = add nsw i64 %indvars.iv68, 1, !noelle.pdg.inst.id !3817
DOALL:     	  %.03.i.lcssa = phi i32 [ %.03.i, %259 ], !noelle.pdg.inst.id !3819
DOALL:     	  %291 = getelementptr inbounds %struct.Cell, %struct.Cell* %195, i64 %indvars.iv50, !noelle.pdg.inst.id !3820
DOALL:     	  %292 = sext i32 %.03.i.lcssa to i64, !noelle.pdg.inst.id !3821
DOALL:     	  %.021 = phi %struct.Cell* [ %291, %_Z16GetNeighborCellsiiiPi.exit ], [ %.122, %._crit_edge70 ], !noelle.pdg.inst.id !3823
DOALL:     	  %.018 = phi i32 [ 0, %_Z16GetNeighborCellsiiiPi.exit ], [ %364, %._crit_edge70 ], !noelle.pdg.inst.id !3824
DOALL:     	  %294 = icmp slt i32 %.018, %253, !noelle.pdg.inst.id !3825
DOALL:     	  br i1 %294, label %295, label %._crit_edge66.loopexit, !prof !3574, !noelle.loop.id !3826, !noelle.pdg.inst.id !3827
DOALL:     	  %296 = and i32 %.018, 15, !noelle.pdg.inst.id !3828
DOALL:     	  %297 = zext i32 %296 to i64, !noelle.pdg.inst.id !3829
DOALL:     	  %298 = getelementptr inbounds %struct.Cell, %struct.Cell* %.021, i64 0, i32 0, i64 %297, !noelle.pdg.inst.id !3830
DOALL:     	  %299 = getelementptr inbounds %struct.Cell, %struct.Cell* %.021, i64 0, i32 4, i64 %297, !noelle.pdg.inst.id !3831
DOALL:     	  %300 = getelementptr inbounds %struct.Cell, %struct.Cell* %.021, i64 0, i32 2, i64 %297, !noelle.pdg.inst.id !3832
DOALL:     	  %301 = getelementptr inbounds %struct.Cell, %struct.Cell* %.021, i64 0, i32 3, i64 %297, !noelle.pdg.inst.id !3833
DOALL:     	  %indvars.iv = phi i64 [ %indvars.iv.next, %358 ], [ 0, %295 ], !noelle.pdg.inst.id !3835
DOALL:     	  %303 = icmp slt i64 %indvars.iv, %292, !noelle.pdg.inst.id !3836
DOALL:     	  br i1 %303, label %304, label %359, !prof !3587, !noelle.loop.id !3837, !noelle.pdg.inst.id !3838, !noelle.parallelizer.looporder !3839
DOALL:     	  %305 = getelementptr inbounds [27 x i32], [27 x i32]* %3, i64 0, i64 %indvars.iv, !noelle.pdg.inst.id !3840
DOALL:     	  %306 = load i32, i32* %305, align 4, !tbaa !3398, !noelle.pdg.inst.id !79
DOALL:     	  %307 = sext i32 %306 to i64, !noelle.pdg.inst.id !3841
DOALL:     	  %308 = getelementptr inbounds %struct.Cell, %struct.Cell* %195, i64 %307, !noelle.pdg.inst.id !3842
DOALL:     	  %309 = getelementptr inbounds i32, i32* %196, i64 %307, !noelle.pdg.inst.id !3843
DOALL:     	  %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81
DOALL:     	  %.011 = phi %struct.Cell* [ %308, %304 ], [ %.112, %._crit_edge69 ], !noelle.pdg.inst.id !3845
DOALL:     	  %.04 = phi i32 [ 0, %304 ], [ %357, %._crit_edge69 ], !noelle.pdg.inst.id !3846
DOALL:     	  %312 = icmp slt i32 %.04, %310, !noelle.pdg.inst.id !3847
DOALL:     	  br i1 %312, label %313, label %358, !prof !3599, !noelle.loop.id !3848, !noelle.pdg.inst.id !3849
DOALL:     	  %314 = and i32 %.04, 15, !noelle.pdg.inst.id !3850
DOALL:     	  %315 = zext i32 %314 to i64, !noelle.pdg.inst.id !3851
DOALL:     	  %316 = getelementptr inbounds %struct.Cell, %struct.Cell* %.011, i64 0, i32 0, i64 %315, !noelle.pdg.inst.id !3852
DOALL:     	  %317 = icmp ult %class.Vec3* %316, %298, !noelle.pdg.inst.id !3853
DOALL:     	  br i1 %317, label %318, label %.._crit_edge67_crit_edge, !prof !3606, !noelle.pdg.inst.id !3854
DOALL:     	  %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83
DOALL:     	  store { <2 x float>, float } %319, { <2 x float>, float }* %7, align 8, !noelle.pdg.inst.id !86
DOALL:     	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89
DOALL:     	  %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92
DOALL:     	  store float %320, float* %8, align 4, !tbaa !3421, !noelle.pdg.inst.id !95
DOALL:     	  %321 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !98
DOALL:     	  %322 = fcmp olt float %320, %321, !noelle.pdg.inst.id !3858
DOALL:     	  br i1 %322, label %323, label %.._crit_edge68_crit_edge, !prof !3631, !noelle.pdg.inst.id !3859
DOALL:     	  store float 0x3D71979980000000, float* %9, align 4, !tbaa !3421, !noelle.pdg.inst.id !100
DOALL:     	  %324 = call dereferenceable(4) float* @_ZSt3maxIfERKT_S2_S2_(float* nonnull dereferenceable(4) %8, float* nonnull dereferenceable(4) %9), !noelle.pdg.inst.id !103
DOALL:     	  %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106
DOALL:     	  %326 = call float @sqrtf(float %325) #6, !noelle.pdg.inst.id !108
DOALL:     	  %327 = load float, float* @h, align 4, !tbaa !3421, !noelle.pdg.inst.id !111
DOALL:     	  %328 = fsub float %327, %326, !noelle.pdg.inst.id !3863
DOALL:     	  %329 = load float, float* @pressureCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !113
DOALL:     	  %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115
DOALL:     	  store { <2 x float>, float } %330, { <2 x float>, float }* %13, align 8, !noelle.pdg.inst.id !118
DOALL:     	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121
DOALL:     	  %331 = fmul float %328, %328, !noelle.pdg.inst.id !3867
DOALL:     	  %332 = fdiv float %331, %326, !noelle.pdg.inst.id !3868
DOALL:     	  %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124
DOALL:     	  store { <2 x float>, float } %333, { <2 x float>, float }* %14, align 8, !noelle.pdg.inst.id !127
DOALL:     	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130
DOALL:     	  %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133
DOALL:     	  %335 = getelementptr inbounds %struct.Cell, %struct.Cell* %.011, i64 0, i32 4, i64 %315, !noelle.pdg.inst.id !3869
DOALL:     	  %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135
DOALL:     	  %337 = fadd float %334, %336, !noelle.pdg.inst.id !3870
DOALL:     	  %338 = fadd float %337, -2.000000e+03, !noelle.pdg.inst.id !3871
DOALL:     	  %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137
DOALL:     	  store { <2 x float>, float } %339, { <2 x float>, float }* %15, align 8, !noelle.pdg.inst.id !140
DOALL:     	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143
DOALL:     	  %340 = getelementptr inbounds %struct.Cell, %struct.Cell* %.011, i64 0, i32 2, i64 %315, !noelle.pdg.inst.id !3877
DOALL:     	  %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146
DOALL:     	  store { <2 x float>, float } %341, { <2 x float>, float }* %19, align 8, !noelle.pdg.inst.id !149
DOALL:     	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152
DOALL:     	  %342 = load float, float* @viscosityCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !155
DOALL:     	  %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157
DOALL:     	  store { <2 x float>, float } %343, { <2 x float>, float }* %20, align 8, !noelle.pdg.inst.id !160
DOALL:     	  %360 = icmp eq i32 %296, 15, !noelle.pdg.inst.id !3898
DOALL:     	  br i1 %360, label %361, label %.._crit_edge70_crit_edge, !prof !3427, !noelle.pdg.inst.id !3899
DOALL:     	  %362 = getelementptr inbounds %struct.Cell, %struct.Cell* %.021, i64 0, i32 5, !noelle.pdg.inst.id !3901
DOALL:     	  %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163
DOALL:     	  %.122 = phi %struct.Cell* [ %363, %361 ], [ %.021, %.._crit_edge70_crit_edge ], !noelle.pdg.inst.id !3903
DOALL:     	  %364 = add nuw nsw i32 %.018, 1, !noelle.pdg.inst.id !3904
DOALL:     	  %indvars.iv.next72 = add nuw nsw i64 %indvars.iv71, 1, !noelle.pdg.inst.id !3907
DOALL:     	  %indvars.iv.next51 = add nsw i64 %indvars.iv50, 1, !noelle.pdg.inst.id !3908
DOALL:     	  %indvars.iv50.lcssa = phi i64 [ %indvars.iv50, %249 ], !noelle.pdg.inst.id !3910
DOALL:     	  %366 = trunc i64 %indvars.iv50.lcssa to i32, !noelle.pdg.inst.id !3911
DOALL:     	  %indvars.iv.next74 = add nuw nsw i64 %indvars.iv73, 1, !noelle.pdg.inst.id !3912
DOALL:     	  %.4.lcssa = phi i32 [ %.4, %.preheader37 ], !noelle.pdg.inst.id !3914
DOALL:     	  %indvars.iv.next76 = add nuw nsw i64 %indvars.iv75, 1, !noelle.pdg.inst.id !3915
DOALL:     	  %.pre49 = load i32, i32* @nz, align 4, !tbaa !3398, !noelle.pdg.inst.id !165
DOALL:     External nodes: 53
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %232) #6, !noelle.pdg.inst.id !3878
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %231) #6, !noelle.pdg.inst.id !3879
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %230) #6, !noelle.pdg.inst.id !3880
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %224) #6, !noelle.pdg.inst.id !3883
DOALL:     	  br label %._crit_edge68, !noelle.pdg.inst.id !3884
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %222) #6, !noelle.pdg.inst.id !3885
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %220) #6, !noelle.pdg.inst.id !3886
DOALL:     	  br label %._crit_edge67, !noelle.pdg.inst.id !3887
DOALL:     	  br label %._crit_edge69, !noelle.pdg.inst.id !3890
DOALL:     	  br label %._crit_edge69, !noelle.pdg.inst.id !3892
DOALL:     	  br label %311, !noelle.pdg.inst.id !3895
DOALL:     	  br label %.preheader37, !noelle.pdg.inst.id !3729
DOALL:     	  br label %249, !noelle.pdg.inst.id !3740
DOALL:     	  br label %._crit_edge66, !noelle.pdg.inst.id !3750
DOALL:     	  br label %259, !noelle.pdg.inst.id !3754
DOALL:     	  br label %.us-lcssa.us, !noelle.pdg.inst.id !3763
DOALL:     	  br label %.split.us, !noelle.pdg.inst.id !3764
DOALL:     	  br label %.us-lcssa.us.i.us, !noelle.pdg.inst.id !3777
DOALL:     	  br label %.split.us..split.us.split_crit_edge.i.us.us.us, !noelle.pdg.inst.id !3778
DOALL:     	  br label %.us-lcssa.us.i.us, !noelle.pdg.inst.id !3780
DOALL:     	  br label %.split.us, !noelle.pdg.inst.id !3783
DOALL:     	  br label %._crit_edge.i.us.us.us, !noelle.pdg.inst.id !3794
DOALL:     	  br label %._crit_edge.i.us.us.us, !noelle.pdg.inst.id !3801
DOALL:     	  br label %._crit_edge.i.us.us.us, !noelle.pdg.inst.id !3805
DOALL:     	  br label %._crit_edge.i.us.us.us, !noelle.pdg.inst.id !3810
DOALL:     	  br label %.split.us..split.us.split_crit_edge.i.us.us.us, !noelle.pdg.inst.id !3813
DOALL:     	  br label %.us-lcssa.us, !noelle.pdg.inst.id !3815
DOALL:     	  br label %259, !noelle.pdg.inst.id !3818
DOALL:     	  br label %293, !noelle.pdg.inst.id !3822
DOALL:     	  br label %302, !noelle.pdg.inst.id !3834
DOALL:     	  br label %311, !noelle.pdg.inst.id !3844
DOALL:     	  br label %._crit_edge67, !noelle.pdg.inst.id !3855
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %220) #6, !noelle.pdg.inst.id !3856
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %222) #6, !noelle.pdg.inst.id !3857
DOALL:     	  br label %._crit_edge68, !noelle.pdg.inst.id !3860
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %223) #6, !noelle.pdg.inst.id !3861
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %223) #6, !noelle.pdg.inst.id !3862
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %224) #6, !noelle.pdg.inst.id !3864
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %225) #6, !noelle.pdg.inst.id !3865
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %226) #6, !noelle.pdg.inst.id !3866
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %226) #6, !noelle.pdg.inst.id !3872
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %225) #6, !noelle.pdg.inst.id !3873
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %230) #6, !noelle.pdg.inst.id !3874
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %231) #6, !noelle.pdg.inst.id !3875
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %232) #6, !noelle.pdg.inst.id !3876
DOALL:     	  br label %302, !noelle.pdg.inst.id !3897
DOALL:     	  br label %._crit_edge70, !noelle.pdg.inst.id !3900
DOALL:     	  br label %._crit_edge70, !noelle.pdg.inst.id !3902
DOALL:     	  br label %293, !noelle.pdg.inst.id !3905
DOALL:     	  br label %._crit_edge66, !noelle.pdg.inst.id !3906
DOALL:     	  br label %249, !noelle.pdg.inst.id !3909
DOALL:     	  br label %.preheader37, !noelle.pdg.inst.id !3913
DOALL:     	  br label %238, !noelle.pdg.inst.id !3916
DOALL:     Edges: 1441
DOALL:     Loop-carried data dependences
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         store i32 %257, i32* %47, align 16, !tbaa !3398, !noelle.pdg.inst.id !71 --->   %306 = load i32, i32* %305, align 4, !tbaa !3398, !noelle.pdg.inst.id !79 via memory
DOALL:         store i32 %257, i32* %47, align 16, !tbaa !3398, !noelle.pdg.inst.id !71 --->   store i32 %257, i32* %47, align 16, !tbaa !3398, !noelle.pdg.inst.id !71 via memory
DOALL:         store i32 %257, i32* %47, align 16, !tbaa !3398, !noelle.pdg.inst.id !71 --->   store i32 %289, i32* %288, align 4, !tbaa !3398, !noelle.pdg.inst.id !76 via memory
DOALL:         store { <2 x float>, float } %319, { <2 x float>, float }* %7, align 8, !noelle.pdg.inst.id !86 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         store { <2 x float>, float } %319, { <2 x float>, float }* %7, align 8, !noelle.pdg.inst.id !86 --->   store { <2 x float>, float } %319, { <2 x float>, float }* %7, align 8, !noelle.pdg.inst.id !86 via memory
DOALL:         %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         store { <2 x float>, float } %330, { <2 x float>, float }* %13, align 8, !noelle.pdg.inst.id !118 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         store { <2 x float>, float } %330, { <2 x float>, float }* %13, align 8, !noelle.pdg.inst.id !118 --->   store { <2 x float>, float } %330, { <2 x float>, float }* %13, align 8, !noelle.pdg.inst.id !118 via memory
DOALL:         %indvars.iv.next76 = add nuw nsw i64 %indvars.iv75, 1, !noelle.pdg.inst.id !3915 --->   %indvars.iv75 = phi i64 [ %indvars.iv.next76, %367 ], [ 0, %219 ], !noelle.pdg.inst.id !3719 via variable
DOALL:         %.pre49 = load i32, i32* @nz, align 4, !tbaa !3398, !noelle.pdg.inst.id !165 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %.pre49 = load i32, i32* @nz, align 4, !tbaa !3398, !noelle.pdg.inst.id !165 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %.pre49 = load i32, i32* @nz, align 4, !tbaa !3398, !noelle.pdg.inst.id !165 --->   %239 = phi i32 [ %.pre49, %367 ], [ %.pre60, %219 ], !noelle.pdg.inst.id !3720 via variable
DOALL:         %.pre49 = load i32, i32* @nz, align 4, !tbaa !3398, !noelle.pdg.inst.id !165 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %.pre49 = load i32, i32* @nz, align 4, !tbaa !3398, !noelle.pdg.inst.id !165 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %.pre49 = load i32, i32* @nz, align 4, !tbaa !3398, !noelle.pdg.inst.id !165 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %.pre49 = load i32, i32* @nz, align 4, !tbaa !3398, !noelle.pdg.inst.id !165 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %.pre49 = load i32, i32* @nz, align 4, !tbaa !3398, !noelle.pdg.inst.id !165 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   store { <2 x float>, float } %330, { <2 x float>, float }* %13, align 8, !noelle.pdg.inst.id !118 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %.4.lcssa = phi i32 [ %.4, %.preheader37 ], !noelle.pdg.inst.id !3914 --->   %.3 = phi i32 [ %.4.lcssa, %367 ], [ 0, %219 ], !noelle.pdg.inst.id !3721 via variable
DOALL:         store i32 %289, i32* %288, align 4, !tbaa !3398, !noelle.pdg.inst.id !76 --->   store i32 %257, i32* %47, align 16, !tbaa !3398, !noelle.pdg.inst.id !71 via memory
DOALL:         store i32 %289, i32* %288, align 4, !tbaa !3398, !noelle.pdg.inst.id !76 --->   %306 = load i32, i32* %305, align 4, !tbaa !3398, !noelle.pdg.inst.id !79 via memory
DOALL:         store i32 %289, i32* %288, align 4, !tbaa !3398, !noelle.pdg.inst.id !76 --->   store i32 %289, i32* %288, align 4, !tbaa !3398, !noelle.pdg.inst.id !76 via memory
DOALL:         %329 = load float, float* @pressureCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !113 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %329 = load float, float* @pressureCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !113 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %329 = load float, float* @pressureCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !113 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %329 = load float, float* @pressureCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !113 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %329 = load float, float* @pressureCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !113 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %329 = load float, float* @pressureCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !113 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %329 = load float, float* @pressureCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !113 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   store { <2 x float>, float } %343, { <2 x float>, float }* %20, align 8, !noelle.pdg.inst.id !160 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 --->   store { <2 x float>, float } %319, { <2 x float>, float }* %7, align 8, !noelle.pdg.inst.id !86 via memory
DOALL:         store { <2 x float>, float } %344, { <2 x float>, float }* %21, align 8, !noelle.pdg.inst.id !45 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         store { <2 x float>, float } %344, { <2 x float>, float }* %21, align 8, !noelle.pdg.inst.id !45 --->   store { <2 x float>, float } %344, { <2 x float>, float }* %21, align 8, !noelle.pdg.inst.id !45 via memory
DOALL:         %306 = load i32, i32* %305, align 4, !tbaa !3398, !noelle.pdg.inst.id !79 --->   store i32 %289, i32* %288, align 4, !tbaa !3398, !noelle.pdg.inst.id !76 via memory
DOALL:         %306 = load i32, i32* %305, align 4, !tbaa !3398, !noelle.pdg.inst.id !79 --->   store i32 %257, i32* %47, align 16, !tbaa !3398, !noelle.pdg.inst.id !71 via memory
DOALL:         %324 = call dereferenceable(4) float* @_ZSt3maxIfERKT_S2_S2_(float* nonnull dereferenceable(4) %8, float* nonnull dereferenceable(4) %9), !noelle.pdg.inst.id !103 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %324 = call dereferenceable(4) float* @_ZSt3maxIfERKT_S2_S2_(float* nonnull dereferenceable(4) %8, float* nonnull dereferenceable(4) %9), !noelle.pdg.inst.id !103 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %324 = call dereferenceable(4) float* @_ZSt3maxIfERKT_S2_S2_(float* nonnull dereferenceable(4) %8, float* nonnull dereferenceable(4) %9), !noelle.pdg.inst.id !103 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %324 = call dereferenceable(4) float* @_ZSt3maxIfERKT_S2_S2_(float* nonnull dereferenceable(4) %8, float* nonnull dereferenceable(4) %9), !noelle.pdg.inst.id !103 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %324 = call dereferenceable(4) float* @_ZSt3maxIfERKT_S2_S2_(float* nonnull dereferenceable(4) %8, float* nonnull dereferenceable(4) %9), !noelle.pdg.inst.id !103 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %324 = call dereferenceable(4) float* @_ZSt3maxIfERKT_S2_S2_(float* nonnull dereferenceable(4) %8, float* nonnull dereferenceable(4) %9), !noelle.pdg.inst.id !103 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %324 = call dereferenceable(4) float* @_ZSt3maxIfERKT_S2_S2_(float* nonnull dereferenceable(4) %8, float* nonnull dereferenceable(4) %9), !noelle.pdg.inst.id !103 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %327 = load float, float* @h, align 4, !tbaa !3421, !noelle.pdg.inst.id !111 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %327 = load float, float* @h, align 4, !tbaa !3421, !noelle.pdg.inst.id !111 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %327 = load float, float* @h, align 4, !tbaa !3421, !noelle.pdg.inst.id !111 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %327 = load float, float* @h, align 4, !tbaa !3421, !noelle.pdg.inst.id !111 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %327 = load float, float* @h, align 4, !tbaa !3421, !noelle.pdg.inst.id !111 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %327 = load float, float* @h, align 4, !tbaa !3421, !noelle.pdg.inst.id !111 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %327 = load float, float* @h, align 4, !tbaa !3421, !noelle.pdg.inst.id !111 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %342 = load float, float* @viscosityCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !155 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %342 = load float, float* @viscosityCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !155 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %342 = load float, float* @viscosityCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !155 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %342 = load float, float* @viscosityCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !155 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %342 = load float, float* @viscosityCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !155 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %342 = load float, float* @viscosityCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !155 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %342 = load float, float* @viscosityCoeff, align 4, !tbaa !3421, !noelle.pdg.inst.id !155 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         store { <2 x float>, float } %341, { <2 x float>, float }* %19, align 8, !noelle.pdg.inst.id !149 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         store { <2 x float>, float } %341, { <2 x float>, float }* %19, align 8, !noelle.pdg.inst.id !149 --->   store { <2 x float>, float } %341, { <2 x float>, float }* %19, align 8, !noelle.pdg.inst.id !149 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   store { <2 x float>, float } %341, { <2 x float>, float }* %19, align 8, !noelle.pdg.inst.id !149 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         store { <2 x float>, float } %343, { <2 x float>, float }* %20, align 8, !noelle.pdg.inst.id !160 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         store { <2 x float>, float } %343, { <2 x float>, float }* %20, align 8, !noelle.pdg.inst.id !160 --->   store { <2 x float>, float } %343, { <2 x float>, float }* %20, align 8, !noelle.pdg.inst.id !160 via memory
DOALL:         %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %320 = call float @_ZNK4Vec311GetLengthSqEv(%class.Vec3* nonnull %6), !noelle.pdg.inst.id !92 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %321 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !98 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %321 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !98 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %321 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !98 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %321 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !98 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %321 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !98 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %321 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !98 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %321 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !98 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   store { <2 x float>, float } %339, { <2 x float>, float }* %15, align 8, !noelle.pdg.inst.id !140 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %349 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3dVEf(%class.Vec3* nonnull %10, float %348), !noelle.pdg.inst.id !58 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %345 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %10, %class.Vec3* nonnull dereferenceable(12) %16), !noelle.pdg.inst.id !51 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         store { <2 x float>, float } %339, { <2 x float>, float }* %15, align 8, !noelle.pdg.inst.id !140 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         store { <2 x float>, float } %339, { <2 x float>, float }* %15, align 8, !noelle.pdg.inst.id !140 --->   store { <2 x float>, float } %339, { <2 x float>, float }* %15, align 8, !noelle.pdg.inst.id !140 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   store { <2 x float>, float } %344, { <2 x float>, float }* %21, align 8, !noelle.pdg.inst.id !45 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %253 = load i32, i32* %252, align 4, !tbaa !3398, !noelle.pdg.inst.id !69 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %356 = load %struct.Cell*, %struct.Cell** %355, align 8, !tbaa !3431, !noelle.pdg.inst.id !67 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %284 = load i32, i32* %283, align 4, !tbaa !3398, !noelle.pdg.inst.id !74 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %325 = load float, float* %324, align 4, !tbaa !3421, !noelle.pdg.inst.id !106 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* nonnull align 8 %227, i64 12, i1 false), !noelle.pdg.inst.id !121 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 8 %233, i64 12, i1 false), !noelle.pdg.inst.id !152 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %231, i8* nonnull align 8 %234, i64 12, i1 false), !noelle.pdg.inst.id !33 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %224, i8* nonnull align 8 %229, i64 12, i1 false), !noelle.pdg.inst.id !143 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %230, i8* nonnull align 8 %235, i64 12, i1 false), !noelle.pdg.inst.id !48 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   %319 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* %298, %class.Vec3* dereferenceable(12) %316), !noelle.pdg.inst.id !83 via memory
DOALL:         %310 = load i32, i32* %309, align 4, !tbaa !3398, !noelle.pdg.inst.id !81 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %220, i8* nonnull align 8 %221, i64 12, i1 false), !noelle.pdg.inst.id !89 via memory
DOALL:         store { <2 x float>, float } %333, { <2 x float>, float }* %14, align 8, !noelle.pdg.inst.id !127 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         store { <2 x float>, float } %333, { <2 x float>, float }* %14, align 8, !noelle.pdg.inst.id !127 --->   store { <2 x float>, float } %333, { <2 x float>, float }* %14, align 8, !noelle.pdg.inst.id !127 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %363 = load %struct.Cell*, %struct.Cell** %362, align 8, !tbaa !3431, !noelle.pdg.inst.id !163 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %343 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %18, float %342), !noelle.pdg.inst.id !157 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %341 = call { <2 x float>, float } @_ZNK4Vec3miERKS_(%class.Vec3* nonnull %340, %class.Vec3* nonnull dereferenceable(12) %300), !noelle.pdg.inst.id !146 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %339 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %11, float %338), !noelle.pdg.inst.id !137 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %336 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !135 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %334 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !133 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   store { <2 x float>, float } %333, { <2 x float>, float }* %14, align 8, !noelle.pdg.inst.id !127 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %330 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %6, float %329), !noelle.pdg.inst.id !115 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %350 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3pLERKS_(%class.Vec3* nonnull %301, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !61 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %347 = load float, float* %335, align 4, !tbaa !3421, !noelle.pdg.inst.id !56 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %344 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %17, float %328), !noelle.pdg.inst.id !42 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %346 = load float, float* %299, align 4, !tbaa !3421, !noelle.pdg.inst.id !54 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %352 = call dereferenceable(12) %class.Vec3* @_ZN4Vec3mIERKS_(%class.Vec3* nonnull %351, %class.Vec3* nonnull dereferenceable(12) %10), !noelle.pdg.inst.id !64 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %225, i8* nonnull align 8 %228, i64 12, i1 false), !noelle.pdg.inst.id !130 --->   %333 = call { <2 x float>, float } @_ZNK4Vec3mlEf(%class.Vec3* nonnull %12, float %332), !noelle.pdg.inst.id !124 via memory
DSWP: It is not applicable because the coverage of the biggest SCC is 9.053222e-01
Parallelizer: parallelizerLoop:   The loop has not been parallelized
Parallelizer: parallelizerLoop: Exit
Parallelizer: parallelizerLoop: Start
Parallelizer: parallelizerLoop:   Function = "_Z13ComputeForcesv"
Parallelizer: parallelizerLoop:   Loop 22 = "  %66 = icmp slt i64 %indvars.iv90, %63, !noelle.pdg.inst.id !3459"
Parallelizer: parallelizerLoop:   Nesting level = 1
Parallelizer: parallelizerLoop:   Number of threads to extract = 8
Parallelizer: parallelizerLoop:   Environment: live-in and live-out values
Parallelizer: parallelizerLoop:   Environment:   Live-in 0 =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
Parallelizer: parallelizerLoop:   Environment:   Live-in 1 =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
Parallelizer: parallelizerLoop:   Environment:   Live-in 2 =   %22 = load %struct.Cell*, %struct.Cell** @cells, align 8, !noelle.pdg.inst.id !547
Parallelizer: parallelizerLoop:   Environment:   Live-in 3 =   %23 = load i32*, i32** @cnumPars, align 8, !noelle.pdg.inst.id !568
Parallelizer: parallelizerLoop:   Environment:   Live-in 4 =   %47 = getelementptr inbounds [27 x i32], [27 x i32]* %3, i64 0, i64 0, !noelle.pdg.inst.id !3442
Parallelizer: parallelizerLoop:   Environment:   Live-in 5 =   %48 = bitcast %class.Vec3* %4 to i8*, !noelle.pdg.inst.id !3443
Parallelizer: parallelizerLoop:   Environment:   Live-in 6 =   %49 = bitcast { <2 x float>, float }* %5 to i8*, !noelle.pdg.inst.id !3444
Parallelizer: parallelizerLoop:   Environment:   Live-in 7 =   %50 = bitcast %class.Vec3* %1 to i8*, !noelle.pdg.inst.id !3445
Parallelizer: parallelizerLoop:   Environment:   Live-in 8 =   %51 = bitcast { <2 x float>, float }* %2 to i8*, !noelle.pdg.inst.id !3446
Parallelizer: parallelizerLoop:   Environment:   Live-in 9 =   %52 = getelementptr inbounds %class.Vec3, %class.Vec3* %1, i64 0, i32 0, !noelle.pdg.inst.id !3447
Parallelizer: parallelizerLoop:   Environment:   Live-in 10 =   %53 = getelementptr inbounds %class.Vec3, %class.Vec3* %1, i64 0, i32 1, !noelle.pdg.inst.id !3448
Parallelizer: parallelizerLoop:   Environment:   Live-in 11 =   %54 = getelementptr inbounds %class.Vec3, %class.Vec3* %1, i64 0, i32 2, !noelle.pdg.inst.id !3449
Parallelizer: parallelizerLoop:   Environment:   Live-in 12 =   %55 = getelementptr inbounds %class.Vec3, %class.Vec3* %4, i64 0, i32 0, !noelle.pdg.inst.id !3450
Parallelizer: parallelizerLoop:   Environment:   Live-in 13 =   %56 = getelementptr inbounds %class.Vec3, %class.Vec3* %4, i64 0, i32 1, !noelle.pdg.inst.id !3451
Parallelizer: parallelizerLoop:   Environment:   Live-in 14 =   %57 = getelementptr inbounds %class.Vec3, %class.Vec3* %4, i64 0, i32 2, !noelle.pdg.inst.id !3452
Parallelizer: parallelizerLoop:   Environment:   Live-in 15 =   %58 = load i32, i32* @ny, align 4, !tbaa !3398, !noelle.pdg.inst.id !686
Parallelizer: parallelizerLoop:   Environment:   Live-in 16 =   %59 = sext i32 %58 to i64, !noelle.pdg.inst.id !3453
Parallelizer: parallelizerLoop:   Environment:   Live-in 17 =   %60 = load i32, i32* @nx, align 4, !tbaa !3398, !noelle.pdg.inst.id !688
Parallelizer: parallelizerLoop:   Environment:   Live-in 18 =   %61 = sext i32 %60 to i64, !noelle.pdg.inst.id !3454
Parallelizer: parallelizerLoop:   Environment:   Live-in 19 =   %62 = load i32*, i32** @cnumPars, align 8, !noelle.pdg.inst.id !690
Parallelizer: parallelizerLoop:   Environment:   Live-in 20 =   %63 = sext i32 %.pre60 to i64, !noelle.pdg.inst.id !3455
Parallelizer: parallelizerLoop:   Environment:   Live-in 21 =   %64 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !692
DOALL: Checking if the loop is DOALL
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 55
DOALL:     	  %.014 = phi %struct.Cell* [ %116, %_Z16GetNeighborCellsiiiPi.exit24 ], [ %.115, %._crit_edge64 ], !noelle.pdg.inst.id !3572
DOALL:     	  %123 = getelementptr inbounds %struct.Cell, %struct.Cell* %.014, i64 0, i32 0, i64 %122, !noelle.pdg.inst.id !3579
DOALL:     	  %124 = getelementptr inbounds %struct.Cell, %struct.Cell* %.014, i64 0, i32 4, i64 %122, !noelle.pdg.inst.id !3580
DOALL:     	  %125 = getelementptr inbounds %class.Vec3, %class.Vec3* %123, i64 0, i32 0, !noelle.pdg.inst.id !3581
DOALL:     	  %126 = getelementptr inbounds %struct.Cell, %struct.Cell* %.014, i64 0, i32 0, i64 %122, i32 1, !noelle.pdg.inst.id !3582
DOALL:     	  %127 = getelementptr inbounds %struct.Cell, %struct.Cell* %.014, i64 0, i32 0, i64 %122, i32 2, !noelle.pdg.inst.id !3583
DOALL:     	  %.019 = phi %struct.Cell* [ %134, %130 ], [ %.120, %._crit_edge63 ], !noelle.pdg.inst.id !3597
DOALL:     	  %142 = getelementptr inbounds %struct.Cell, %struct.Cell* %.019, i64 0, i32 0, i64 %141, !noelle.pdg.inst.id !3604
DOALL:     	  %143 = icmp ult %class.Vec3* %142, %123, !noelle.pdg.inst.id !3605
DOALL:     	  br i1 %143, label %144, label %.._crit_edge61_crit_edge, !prof !3606, !noelle.pdg.inst.id !3607
DOALL:     	  %145 = load float, float* %125, align 4, !tbaa !3612, !noelle.pdg.inst.id !708
DOALL:     	  %146 = getelementptr inbounds %class.Vec3, %class.Vec3* %142, i64 0, i32 0, !noelle.pdg.inst.id !3614
DOALL:     	  %147 = load float, float* %146, align 4, !tbaa !3612, !noelle.pdg.inst.id !710
DOALL:     	  %148 = fsub float %145, %147, !noelle.pdg.inst.id !3615
DOALL:     	  %149 = load float, float* %126, align 4, !tbaa !3616, !noelle.pdg.inst.id !712
DOALL:     	  %150 = getelementptr inbounds %struct.Cell, %struct.Cell* %.019, i64 0, i32 0, i64 %141, i32 1, !noelle.pdg.inst.id !3617
DOALL:     	  %151 = load float, float* %150, align 4, !tbaa !3616, !noelle.pdg.inst.id !714
DOALL:     	  %152 = fsub float %149, %151, !noelle.pdg.inst.id !3618
DOALL:     	  %153 = load float, float* %127, align 4, !tbaa !3619, !noelle.pdg.inst.id !716
DOALL:     	  %154 = getelementptr inbounds %struct.Cell, %struct.Cell* %.019, i64 0, i32 0, i64 %141, i32 2, !noelle.pdg.inst.id !3620
DOALL:     	  %155 = load float, float* %154, align 4, !tbaa !3619, !noelle.pdg.inst.id !718
DOALL:     	  %156 = fsub float %153, %155, !noelle.pdg.inst.id !3621
DOALL:     	  store float %148, float* %52, align 4, !tbaa !3612, !noelle.pdg.inst.id !720
DOALL:     	  store float %152, float* %53, align 4, !tbaa !3616, !noelle.pdg.inst.id !723
DOALL:     	  store float %156, float* %54, align 4, !tbaa !3619, !noelle.pdg.inst.id !726
DOALL:     	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553
DOALL:     	  %157 = load { <2 x float>, float }, { <2 x float>, float }* %2, align 8, !noelle.pdg.inst.id !731
DOALL:     	  store { <2 x float>, float } %157, { <2 x float>, float }* %5, align 8, !noelle.pdg.inst.id !733
DOALL:     	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555
DOALL:     	  %158 = load float, float* %55, align 4, !tbaa !3612, !noelle.pdg.inst.id !738
DOALL:     	  %159 = fmul float %158, %158, !noelle.pdg.inst.id !3624
DOALL:     	  %160 = load float, float* %56, align 4, !tbaa !3616, !noelle.pdg.inst.id !740
DOALL:     	  %161 = fmul float %160, %160, !noelle.pdg.inst.id !3625
DOALL:     	  %162 = fadd float %159, %161, !noelle.pdg.inst.id !3626
DOALL:     	  %163 = load float, float* %57, align 4, !tbaa !3619, !noelle.pdg.inst.id !742
DOALL:     	  %164 = fmul float %163, %163, !noelle.pdg.inst.id !3627
DOALL:     	  %165 = fadd float %162, %164, !noelle.pdg.inst.id !3628
DOALL:     	  %166 = fcmp olt float %165, %64, !noelle.pdg.inst.id !3630
DOALL:     	  br i1 %166, label %167, label %.._crit_edge61_crit_edge35, !prof !3631, !noelle.pdg.inst.id !3632
DOALL:     	  %168 = fsub float %64, %165, !noelle.pdg.inst.id !3634
DOALL:     	  %169 = fmul float %168, %168, !noelle.pdg.inst.id !3635
DOALL:     	  %170 = fmul float %169, %168, !noelle.pdg.inst.id !3636
DOALL:     	  %171 = load float, float* %124, align 4, !tbaa !3421, !noelle.pdg.inst.id !744
DOALL:     	  %172 = fadd float %171, %170, !noelle.pdg.inst.id !3637
DOALL:     	  store float %172, float* %124, align 4, !tbaa !3421, !noelle.pdg.inst.id !746
DOALL:     	  %173 = getelementptr inbounds %struct.Cell, %struct.Cell* %.019, i64 0, i32 4, i64 %141, !noelle.pdg.inst.id !3638
DOALL:     	  %174 = load float, float* %173, align 4, !tbaa !3421, !noelle.pdg.inst.id !749
DOALL:     	  %175 = fadd float %174, %170, !noelle.pdg.inst.id !3639
DOALL:     	  store float %175, float* %173, align 4, !tbaa !3421, !noelle.pdg.inst.id !751
DOALL:     	  %178 = getelementptr inbounds %struct.Cell, %struct.Cell* %.019, i64 0, i32 5, !noelle.pdg.inst.id !3645
DOALL:     	  %179 = load %struct.Cell*, %struct.Cell** %178, align 8, !tbaa !3431, !noelle.pdg.inst.id !754
DOALL:     	  %.120 = phi %struct.Cell* [ %179, %177 ], [ %.019, %._crit_edge61.._crit_edge63_crit_edge ], !noelle.pdg.inst.id !3647
DOALL:     	  %185 = getelementptr inbounds %struct.Cell, %struct.Cell* %.014, i64 0, i32 5, !noelle.pdg.inst.id !3655
DOALL:     	  %186 = load %struct.Cell*, %struct.Cell** %185, align 8, !tbaa !3431, !noelle.pdg.inst.id !756
DOALL:     	  %.115 = phi %struct.Cell* [ %186, %184 ], [ %.014, %.._crit_edge64_crit_edge ], !noelle.pdg.inst.id !3657
DOALL:     External nodes: 19
DOALL:     	  br i1 %79, label %.._crit_edge60_crit_edge, label %80, !prof !3488, !noelle.pdg.inst.id !3489
DOALL:     	  %116 = getelementptr inbounds %struct.Cell, %struct.Cell* %22, i64 %indvars.iv56, !noelle.pdg.inst.id !3568
DOALL:     	  br i1 %119, label %120, label %._crit_edge60.loopexit, !prof !3574, !noelle.loop.id !3575, !noelle.pdg.inst.id !3576
DOALL:     	  %122 = zext i32 %121 to i64, !noelle.pdg.inst.id !3578
DOALL:     	  br i1 %129, label %130, label %182, !prof !3587, !noelle.loop.id !3588, !noelle.pdg.inst.id !3589, !noelle.parallelizer.looporder !3590
DOALL:     	  %134 = getelementptr inbounds %struct.Cell, %struct.Cell* %22, i64 %133, !noelle.pdg.inst.id !3593
DOALL:     	  br i1 %138, label %139, label %181, !prof !3599, !noelle.loop.id !3600, !noelle.pdg.inst.id !3601
DOALL:     	  %141 = zext i32 %140 to i64, !noelle.pdg.inst.id !3603
DOALL:     	  br label %._crit_edge61, !noelle.pdg.inst.id !3608
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %48) #6, !noelle.pdg.inst.id !3609
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %50), !noelle.pdg.inst.id !3610
DOALL:     	  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51), !noelle.pdg.inst.id !3611
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %50), !noelle.pdg.inst.id !3622
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %51), !noelle.pdg.inst.id !3623
DOALL:     	  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %48) #6, !noelle.pdg.inst.id !3629
DOALL:     	  br label %._crit_edge61, !noelle.pdg.inst.id !3633
DOALL:     	  br label %._crit_edge61, !noelle.pdg.inst.id !3640
DOALL:     	  br i1 %176, label %177, label %._crit_edge61.._crit_edge63_crit_edge, !prof !3642, !noelle.pdg.inst.id !3643
DOALL:     	  br i1 %183, label %184, label %.._crit_edge64_crit_edge, !prof !3427, !noelle.pdg.inst.id !3653
DOALL:     Edges: 226
DOALL:     Loop-carried data dependences
DOALL:         %186 = load %struct.Cell*, %struct.Cell** %185, align 8, !tbaa !3431, !noelle.pdg.inst.id !756 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 via memory
DOALL:         %186 = load %struct.Cell*, %struct.Cell** %185, align 8, !tbaa !3431, !noelle.pdg.inst.id !756 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 --->   %186 = load %struct.Cell*, %struct.Cell** %185, align 8, !tbaa !3431, !noelle.pdg.inst.id !756 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 --->   %179 = load %struct.Cell*, %struct.Cell** %178, align 8, !tbaa !3431, !noelle.pdg.inst.id !754 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 --->   store float %175, float* %173, align 4, !tbaa !3421, !noelle.pdg.inst.id !751 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 --->   store float %175, float* %173, align 4, !tbaa !3421, !noelle.pdg.inst.id !751 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 --->   %174 = load float, float* %173, align 4, !tbaa !3421, !noelle.pdg.inst.id !749 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 --->   %155 = load float, float* %154, align 4, !tbaa !3619, !noelle.pdg.inst.id !718 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 --->   %153 = load float, float* %127, align 4, !tbaa !3619, !noelle.pdg.inst.id !716 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 --->   %151 = load float, float* %150, align 4, !tbaa !3616, !noelle.pdg.inst.id !714 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 --->   %149 = load float, float* %126, align 4, !tbaa !3616, !noelle.pdg.inst.id !712 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 --->   %145 = load float, float* %125, align 4, !tbaa !3612, !noelle.pdg.inst.id !708 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 --->   %147 = load float, float* %146, align 4, !tbaa !3612, !noelle.pdg.inst.id !710 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 --->   %171 = load float, float* %124, align 4, !tbaa !3421, !noelle.pdg.inst.id !744 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 --->   store float %172, float* %124, align 4, !tbaa !3421, !noelle.pdg.inst.id !746 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 --->   store float %172, float* %124, align 4, !tbaa !3421, !noelle.pdg.inst.id !746 via memory
DOALL:         store { <2 x float>, float } %157, { <2 x float>, float }* %5, align 8, !noelle.pdg.inst.id !733 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 via memory
DOALL:         store { <2 x float>, float } %157, { <2 x float>, float }* %5, align 8, !noelle.pdg.inst.id !733 --->   store { <2 x float>, float } %157, { <2 x float>, float }* %5, align 8, !noelle.pdg.inst.id !733 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   %186 = load %struct.Cell*, %struct.Cell** %185, align 8, !tbaa !3431, !noelle.pdg.inst.id !756 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   store float %175, float* %173, align 4, !tbaa !3421, !noelle.pdg.inst.id !751 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   %174 = load float, float* %173, align 4, !tbaa !3421, !noelle.pdg.inst.id !749 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   %149 = load float, float* %126, align 4, !tbaa !3616, !noelle.pdg.inst.id !712 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   %153 = load float, float* %127, align 4, !tbaa !3619, !noelle.pdg.inst.id !716 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   %155 = load float, float* %154, align 4, !tbaa !3619, !noelle.pdg.inst.id !718 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   %145 = load float, float* %125, align 4, !tbaa !3612, !noelle.pdg.inst.id !708 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   %179 = load %struct.Cell*, %struct.Cell** %178, align 8, !tbaa !3431, !noelle.pdg.inst.id !754 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   store float %172, float* %124, align 4, !tbaa !3421, !noelle.pdg.inst.id !746 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   %147 = load float, float* %146, align 4, !tbaa !3612, !noelle.pdg.inst.id !710 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   %171 = load float, float* %124, align 4, !tbaa !3421, !noelle.pdg.inst.id !744 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   store { <2 x float>, float } %157, { <2 x float>, float }* %5, align 8, !noelle.pdg.inst.id !733 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   store float %175, float* %173, align 4, !tbaa !3421, !noelle.pdg.inst.id !751 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   %151 = load float, float* %150, align 4, !tbaa !3616, !noelle.pdg.inst.id !714 via memory
DOALL:         call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 --->   store float %172, float* %124, align 4, !tbaa !3421, !noelle.pdg.inst.id !746 via memory
DOALL:         %145 = load float, float* %125, align 4, !tbaa !3612, !noelle.pdg.inst.id !708 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 via memory
DOALL:         %145 = load float, float* %125, align 4, !tbaa !3612, !noelle.pdg.inst.id !708 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 via memory
DOALL:         %147 = load float, float* %146, align 4, !tbaa !3612, !noelle.pdg.inst.id !710 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 via memory
DOALL:         %147 = load float, float* %146, align 4, !tbaa !3612, !noelle.pdg.inst.id !710 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 via memory
DOALL:         %149 = load float, float* %126, align 4, !tbaa !3616, !noelle.pdg.inst.id !712 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 via memory
DOALL:         %149 = load float, float* %126, align 4, !tbaa !3616, !noelle.pdg.inst.id !712 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 via memory
DOALL:         %151 = load float, float* %150, align 4, !tbaa !3616, !noelle.pdg.inst.id !714 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 via memory
DOALL:         %151 = load float, float* %150, align 4, !tbaa !3616, !noelle.pdg.inst.id !714 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 via memory
DOALL:         %153 = load float, float* %127, align 4, !tbaa !3619, !noelle.pdg.inst.id !716 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 via memory
DOALL:         %153 = load float, float* %127, align 4, !tbaa !3619, !noelle.pdg.inst.id !716 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 via memory
DOALL:         %155 = load float, float* %154, align 4, !tbaa !3619, !noelle.pdg.inst.id !718 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 via memory
DOALL:         %155 = load float, float* %154, align 4, !tbaa !3619, !noelle.pdg.inst.id !718 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 via memory
DOALL:         store float %172, float* %124, align 4, !tbaa !3421, !noelle.pdg.inst.id !746 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 via memory
DOALL:         store float %172, float* %124, align 4, !tbaa !3421, !noelle.pdg.inst.id !746 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 via memory
DOALL:         store float %172, float* %124, align 4, !tbaa !3421, !noelle.pdg.inst.id !746 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 via memory
DOALL:         store float %172, float* %124, align 4, !tbaa !3421, !noelle.pdg.inst.id !746 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 via memory
DOALL:         store float %175, float* %173, align 4, !tbaa !3421, !noelle.pdg.inst.id !751 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 via memory
DOALL:         store float %175, float* %173, align 4, !tbaa !3421, !noelle.pdg.inst.id !751 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 via memory
DOALL:         store float %175, float* %173, align 4, !tbaa !3421, !noelle.pdg.inst.id !751 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 via memory
DOALL:         store float %175, float* %173, align 4, !tbaa !3421, !noelle.pdg.inst.id !751 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 via memory
DOALL:         %179 = load %struct.Cell*, %struct.Cell** %178, align 8, !tbaa !3431, !noelle.pdg.inst.id !754 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553 via memory
DOALL:         %179 = load %struct.Cell*, %struct.Cell** %178, align 8, !tbaa !3431, !noelle.pdg.inst.id !754 --->   call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 3
DOALL:     	  store i32 %82, i32* %47, align 16, !tbaa !3398, !noelle.pdg.inst.id !696
DOALL:     	  store i32 %114, i32* %113, align 4, !tbaa !3398, !noelle.pdg.inst.id !701
DOALL:     	  %132 = load i32, i32* %131, align 4, !tbaa !3398, !noelle.pdg.inst.id !704
DOALL:     External nodes: 8
DOALL:     	  br i1 %79, label %.._crit_edge60_crit_edge, label %80, !prof !3488, !noelle.pdg.inst.id !3489
DOALL:     	  %82 = add nsw i32 %73, %81, !noelle.pdg.inst.id !3492
DOALL:     	  br i1 %110, label %.._crit_edge.i20.us.us.us_crit_edge34, label %111, !prof !3551, !noelle.pdg.inst.id !3552
DOALL:     	  %113 = getelementptr inbounds [27 x i32], [27 x i32]* %3, i64 0, i64 %112, !noelle.pdg.inst.id !3555
DOALL:     	  %114 = trunc i64 %105 to i32, !noelle.pdg.inst.id !3556
DOALL:     	  br i1 %129, label %130, label %182, !prof !3587, !noelle.loop.id !3588, !noelle.pdg.inst.id !3589, !noelle.parallelizer.looporder !3590
DOALL:     	  %131 = getelementptr inbounds [27 x i32], [27 x i32]* %3, i64 0, i64 %indvars.iv54, !noelle.pdg.inst.id !3591
DOALL:     	  %133 = sext i32 %132 to i64, !noelle.pdg.inst.id !3592
DOALL:     Edges: 16
DOALL:     Loop-carried data dependences
DOALL:         store i32 %114, i32* %113, align 4, !tbaa !3398, !noelle.pdg.inst.id !701 --->   store i32 %82, i32* %47, align 16, !tbaa !3398, !noelle.pdg.inst.id !696 via memory
DOALL:         store i32 %114, i32* %113, align 4, !tbaa !3398, !noelle.pdg.inst.id !701 --->   %132 = load i32, i32* %131, align 4, !tbaa !3398, !noelle.pdg.inst.id !704 via memory
DOALL:         store i32 %114, i32* %113, align 4, !tbaa !3398, !noelle.pdg.inst.id !701 --->   store i32 %114, i32* %113, align 4, !tbaa !3398, !noelle.pdg.inst.id !701 via memory
DOALL:         %132 = load i32, i32* %131, align 4, !tbaa !3398, !noelle.pdg.inst.id !704 --->   store i32 %82, i32* %47, align 16, !tbaa !3398, !noelle.pdg.inst.id !696 via memory
DOALL:         %132 = load i32, i32* %131, align 4, !tbaa !3398, !noelle.pdg.inst.id !704 --->   store i32 %114, i32* %113, align 4, !tbaa !3398, !noelle.pdg.inst.id !701 via memory
DOALL:         store i32 %82, i32* %47, align 16, !tbaa !3398, !noelle.pdg.inst.id !696 --->   %132 = load i32, i32* %131, align 4, !tbaa !3398, !noelle.pdg.inst.id !704 via memory
DOALL:         store i32 %82, i32* %47, align 16, !tbaa !3398, !noelle.pdg.inst.id !696 --->   store i32 %82, i32* %47, align 16, !tbaa !3398, !noelle.pdg.inst.id !696 via memory
DOALL:         store i32 %82, i32* %47, align 16, !tbaa !3398, !noelle.pdg.inst.id !696 --->   store i32 %114, i32* %113, align 4, !tbaa !3398, !noelle.pdg.inst.id !701 via memory
DOALL:   We found an SCC of the loop that is non clonable and non commutative
DOALL:     Internal nodes: 8
DOALL:     	  %.06 = phi i32 [ %.17.lcssa, %190 ], [ 0, %45 ], !noelle.pdg.inst.id !3458
DOALL:     	  %.17 = phi i32 [ %.06, %.preheader40.preheader ], [ %189, %188 ], !noelle.pdg.inst.id !3468
DOALL:     	  %70 = sext i32 %.17 to i64, !noelle.pdg.inst.id !3474
DOALL:     	  %indvars.iv56 = phi i64 [ %70, %.preheader39 ], [ %indvars.iv.next57, %._crit_edge60 ], !noelle.pdg.inst.id !3480
DOALL:     	  %indvars.iv.next57 = add nsw i64 %indvars.iv56, 1, !noelle.pdg.inst.id !3662
DOALL:     	  %indvars.iv56.lcssa = phi i64 [ %indvars.iv56, %74 ], !noelle.pdg.inst.id !3664
DOALL:     	  %189 = trunc i64 %indvars.iv56.lcssa to i32, !noelle.pdg.inst.id !3665
DOALL:     	  %.17.lcssa = phi i32 [ %.17, %.preheader40 ], !noelle.pdg.inst.id !3668
DOALL:     External nodes: 5
DOALL:     	  br i1 %66, label %.preheader40.preheader, label %191, !prof !3460, !noelle.loop.id !3461, !noelle.pdg.inst.id !3462, !noelle.parallelizer.looporder !3463
DOALL:     	  br i1 %69, label %.preheader39, label %190, !prof !3470, !noelle.loop.id !3471, !noelle.pdg.inst.id !3472, !noelle.parallelizer.looporder !3473
DOALL:     	  br i1 %75, label %76, label %188, !prof !3482, !noelle.loop.id !3483, !noelle.pdg.inst.id !3484, !noelle.parallelizer.looporder !3485
DOALL:     	  %77 = getelementptr inbounds i32, i32* %23, i64 %indvars.iv56, !noelle.pdg.inst.id !3486
DOALL:     	  %116 = getelementptr inbounds %struct.Cell, %struct.Cell* %22, i64 %indvars.iv56, !noelle.pdg.inst.id !3568
DOALL:     Edges: 22
DOALL:     Loop-carried data dependences
DOALL:         %.17.lcssa = phi i32 [ %.17, %.preheader40 ], !noelle.pdg.inst.id !3668 --->   %.06 = phi i32 [ %.17.lcssa, %190 ], [ 0, %45 ], !noelle.pdg.inst.id !3458 via variable
DSWP: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences:  Initial number of partitions: 10
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Exit
DSWP:  Before partitioning the SCCDAG
Heuristic:   PCA: Lowered cost: 0 Merged cost: 4242510 Instruction count: 12
Heuristic:   PCA: Saved cost: 0 Merged set cost: 4242510 Instruction count: 12
Heuristic:   PCA: Lowered cost: 0 Merged cost: 4956391440 Instruction count: 70
Heuristic:   PCA: Lowered cost: 0 Merged cost: 369182557 Instruction count: 15
Heuristic:   PCA: Saved cost: 0 Merged set cost: 369182557 Instruction count: 15
Heuristic:   PCA: No candidates
DSWP:  Final number of partitions: 8
DSWP:  After partitioning the SCCDAG
DSWP:  There are 8 partitions in the SCCDAG
DSWP:  Pipeline stages
DSWP:    Stage: 0
DSWP:    SCC
DSWP:      store i32 %82, i32* %47, align 16, !tbaa !3398, !noelle.pdg.inst.id !696
DSWP:      store i32 %114, i32* %113, align 4, !tbaa !3398, !noelle.pdg.inst.id !701
DSWP:      %132 = load i32, i32* %131, align 4, !tbaa !3398, !noelle.pdg.inst.id !704
DSWP:    
DSWP:    SCC
DSWP:      %.06 = phi i32 [ %.17.lcssa, %190 ], [ 0, %45 ], !noelle.pdg.inst.id !3458
DSWP:      %.17 = phi i32 [ %.06, %.preheader40.preheader ], [ %189, %188 ], !noelle.pdg.inst.id !3468
DSWP:      %70 = sext i32 %.17 to i64, !noelle.pdg.inst.id !3474
DSWP:      %indvars.iv56 = phi i64 [ %70, %.preheader39 ], [ %indvars.iv.next57, %._crit_edge60 ], !noelle.pdg.inst.id !3480
DSWP:      %indvars.iv.next57 = add nsw i64 %indvars.iv56, 1, !noelle.pdg.inst.id !3662
DSWP:      %indvars.iv56.lcssa = phi i64 [ %indvars.iv56, %74 ], !noelle.pdg.inst.id !3664
DSWP:      %189 = trunc i64 %indvars.iv56.lcssa to i32, !noelle.pdg.inst.id !3665
DSWP:      %.17.lcssa = phi i32 [ %.17, %.preheader40 ], !noelle.pdg.inst.id !3668
DSWP:    
DSWP:    SCC
DSWP:      %indvars.iv90 = phi i64 [ %indvars.iv.next91, %190 ], [ 0, %45 ], !noelle.pdg.inst.id !3457
DSWP:      %66 = icmp slt i64 %indvars.iv90, %63, !noelle.pdg.inst.id !3459
DSWP:      br i1 %66, label %.preheader40.preheader, label %191, !prof !3460, !noelle.loop.id !3461, !noelle.pdg.inst.id !3462, !noelle.parallelizer.looporder !3463
DSWP:      %indvars.iv.next91 = add nuw nsw i64 %indvars.iv90, 1, !noelle.pdg.inst.id !3669
DSWP:    
DSWP:    Stage: 1
DSWP:    SCC
DSWP:      %.014 = phi %struct.Cell* [ %116, %_Z16GetNeighborCellsiiiPi.exit24 ], [ %.115, %._crit_edge64 ], !noelle.pdg.inst.id !3572
DSWP:      %123 = getelementptr inbounds %struct.Cell, %struct.Cell* %.014, i64 0, i32 0, i64 %122, !noelle.pdg.inst.id !3579
DSWP:      %124 = getelementptr inbounds %struct.Cell, %struct.Cell* %.014, i64 0, i32 4, i64 %122, !noelle.pdg.inst.id !3580
DSWP:      %125 = getelementptr inbounds %class.Vec3, %class.Vec3* %123, i64 0, i32 0, !noelle.pdg.inst.id !3581
DSWP:      %126 = getelementptr inbounds %struct.Cell, %struct.Cell* %.014, i64 0, i32 0, i64 %122, i32 1, !noelle.pdg.inst.id !3582
DSWP:      %127 = getelementptr inbounds %struct.Cell, %struct.Cell* %.014, i64 0, i32 0, i64 %122, i32 2, !noelle.pdg.inst.id !3583
DSWP:      %.019 = phi %struct.Cell* [ %134, %130 ], [ %.120, %._crit_edge63 ], !noelle.pdg.inst.id !3597
DSWP:      %142 = getelementptr inbounds %struct.Cell, %struct.Cell* %.019, i64 0, i32 0, i64 %141, !noelle.pdg.inst.id !3604
DSWP:      %143 = icmp ult %class.Vec3* %142, %123, !noelle.pdg.inst.id !3605
DSWP:      br i1 %143, label %144, label %.._crit_edge61_crit_edge, !prof !3606, !noelle.pdg.inst.id !3607
DSWP:      %145 = load float, float* %125, align 4, !tbaa !3612, !noelle.pdg.inst.id !708
DSWP:      %146 = getelementptr inbounds %class.Vec3, %class.Vec3* %142, i64 0, i32 0, !noelle.pdg.inst.id !3614
DSWP:      %147 = load float, float* %146, align 4, !tbaa !3612, !noelle.pdg.inst.id !710
DSWP:      %148 = fsub float %145, %147, !noelle.pdg.inst.id !3615
DSWP:      %149 = load float, float* %126, align 4, !tbaa !3616, !noelle.pdg.inst.id !712
DSWP:      %150 = getelementptr inbounds %struct.Cell, %struct.Cell* %.019, i64 0, i32 0, i64 %141, i32 1, !noelle.pdg.inst.id !3617
DSWP:      %151 = load float, float* %150, align 4, !tbaa !3616, !noelle.pdg.inst.id !714
DSWP:      %152 = fsub float %149, %151, !noelle.pdg.inst.id !3618
DSWP:      %153 = load float, float* %127, align 4, !tbaa !3619, !noelle.pdg.inst.id !716
DSWP:      %154 = getelementptr inbounds %struct.Cell, %struct.Cell* %.019, i64 0, i32 0, i64 %141, i32 2, !noelle.pdg.inst.id !3620
DSWP:      %155 = load float, float* %154, align 4, !tbaa !3619, !noelle.pdg.inst.id !718
DSWP:      %156 = fsub float %153, %155, !noelle.pdg.inst.id !3621
DSWP:      store float %148, float* %52, align 4, !tbaa !3612, !noelle.pdg.inst.id !720
DSWP:      store float %152, float* %53, align 4, !tbaa !3616, !noelle.pdg.inst.id !723
DSWP:      store float %156, float* %54, align 4, !tbaa !3619, !noelle.pdg.inst.id !726
DSWP:      call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* nonnull align 4 %50, i64 12, i1 false) #6, !noelle.pdg.inst.id !553
DSWP:      %157 = load { <2 x float>, float }, { <2 x float>, float }* %2, align 8, !noelle.pdg.inst.id !731
DSWP:      store { <2 x float>, float } %157, { <2 x float>, float }* %5, align 8, !noelle.pdg.inst.id !733
DSWP:      call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* nonnull align 8 %49, i64 12, i1 false), !noelle.pdg.inst.id !555
DSWP:      %158 = load float, float* %55, align 4, !tbaa !3612, !noelle.pdg.inst.id !738
DSWP:      %159 = fmul float %158, %158, !noelle.pdg.inst.id !3624
DSWP:      %160 = load float, float* %56, align 4, !tbaa !3616, !noelle.pdg.inst.id !740
DSWP:      %161 = fmul float %160, %160, !noelle.pdg.inst.id !3625
DSWP:      %162 = fadd float %159, %161, !noelle.pdg.inst.id !3626
DSWP:      %163 = load float, float* %57, align 4, !tbaa !3619, !noelle.pdg.inst.id !742
DSWP:      %164 = fmul float %163, %163, !noelle.pdg.inst.id !3627
DSWP:      %165 = fadd float %162, %164, !noelle.pdg.inst.id !3628
DSWP:      %166 = fcmp olt float %165, %64, !noelle.pdg.inst.id !3630
DSWP:      br i1 %166, label %167, label %.._crit_edge61_crit_edge35, !prof !3631, !noelle.pdg.inst.id !3632
DSWP:      %168 = fsub float %64, %165, !noelle.pdg.inst.id !3634
DSWP:      %169 = fmul float %168, %168, !noelle.pdg.inst.id !3635
DSWP:      %170 = fmul float %169, %168, !noelle.pdg.inst.id !3636
DSWP:      %171 = load float, float* %124, align 4, !tbaa !3421, !noelle.pdg.inst.id !744
DSWP:      %172 = fadd float %171, %170, !noelle.pdg.inst.id !3637
DSWP:      store float %172, float* %124, align 4, !tbaa !3421, !noelle.pdg.inst.id !746
DSWP:      %173 = getelementptr inbounds %struct.Cell, %struct.Cell* %.019, i64 0, i32 4, i64 %141, !noelle.pdg.inst.id !3638
DSWP:      %174 = load float, float* %173, align 4, !tbaa !3421, !noelle.pdg.inst.id !749
DSWP:      %175 = fadd float %174, %170, !noelle.pdg.inst.id !3639
DSWP:      store float %175, float* %173, align 4, !tbaa !3421, !noelle.pdg.inst.id !751
DSWP:      %178 = getelementptr inbounds %struct.Cell, %struct.Cell* %.019, i64 0, i32 5, !noelle.pdg.inst.id !3645
DSWP:      %179 = load %struct.Cell*, %struct.Cell** %178, align 8, !tbaa !3431, !noelle.pdg.inst.id !754
DSWP:      %.120 = phi %struct.Cell* [ %179, %177 ], [ %.019, %._crit_edge61.._crit_edge63_crit_edge ], !noelle.pdg.inst.id !3647
DSWP:      %185 = getelementptr inbounds %struct.Cell, %struct.Cell* %.014, i64 0, i32 5, !noelle.pdg.inst.id !3655
DSWP:      %186 = load %struct.Cell*, %struct.Cell** %185, align 8, !tbaa !3431, !noelle.pdg.inst.id !756
DSWP:      %.115 = phi %struct.Cell* [ %186, %184 ], [ %.014, %.._crit_edge64_crit_edge ], !noelle.pdg.inst.id !3657
DSWP:    
DSWP:    Stage: 2
DSWP:    SCC
DSWP:      call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %50), !noelle.pdg.inst.id !3622
DSWP:    
DSWP:    Stage: 3
DSWP:    SCC
DSWP:      call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %51), !noelle.pdg.inst.id !3623
DSWP:    
DSWP:    Stage: 4
DSWP:    SCC
DSWP:      call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %48) #6, !noelle.pdg.inst.id !3609
DSWP:    
DSWP:    Stage: 5
DSWP:    SCC
DSWP:      call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %48) #6, !noelle.pdg.inst.id !3629
DSWP:    
DSWP:    Stage: 6
DSWP:    SCC
DSWP:      call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51), !noelle.pdg.inst.id !3611
DSWP:    
DSWP:    Stage: 7
DSWP:    SCC
DSWP:      call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %50), !noelle.pdg.inst.id !3610
DSWP:    
DSWP:  Queues that connect the pipeline stages
DSWP:    Stage: 0
DSWP:      Push value queues: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 33 34 35 36 37 38 39 
DSWP:      Pop value queues: 
DSWP:    Stage: 1
DSWP:      Push value queues: 21 22 23 24 25 26 27 28 29 30 31 32 
DSWP:      Pop value queues: 0 1 2 38 
DSWP:    Stage: 2
DSWP:      Push value queues: 
DSWP:      Pop value queues: 3 4 5 25 31 37 
DSWP:    Stage: 3
DSWP:      Push value queues: 
DSWP:      Pop value queues: 6 7 8 24 30 36 
DSWP:    Stage: 4
DSWP:      Push value queues: 
DSWP:      Pop value queues: 9 10 11 23 29 35 
DSWP:    Stage: 5
DSWP:      Push value queues: 
DSWP:      Pop value queues: 12 13 14 22 28 34 
DSWP:    Stage: 6
DSWP:      Push value queues: 
DSWP:      Pop value queues: 15 16 17 21 27 33 
DSWP:    Stage: 7
DSWP:      Push value queues: 
DSWP:      Pop value queues: 18 19 20 26 32 39 
DSWP:    Queue: 0
DSWP:     Producer:	  %132 = load i32, i32* %131, align 4, !tbaa !3398, !noelle.pdg.inst.id !704
DSWP:     Consumer:	  %133 = sext i32 %132 to i64, !noelle.pdg.inst.id !3592
DSWP:    Queue: 1
DSWP:     Producer:	  %indvars.iv90 = phi i64 [ %indvars.iv.next91, %190 ], [ 0, %45 ], !noelle.pdg.inst.id !3457
DSWP:     Consumer:	  %67 = trunc i64 %indvars.iv90 to i32, !noelle.pdg.inst.id !3464
DSWP:     Consumer:	  %98 = add nsw i64 %indvars.iv77, %indvars.iv90, !noelle.pdg.inst.id !3534
DSWP:    Queue: 2
DSWP:     Producer:	  %indvars.iv56 = phi i64 [ %70, %.preheader39 ], [ %indvars.iv.next57, %._crit_edge60 ], !noelle.pdg.inst.id !3480
DSWP:     Consumer:	  %77 = getelementptr inbounds i32, i32* %23, i64 %indvars.iv56, !noelle.pdg.inst.id !3486
DSWP:     Consumer:	  %116 = getelementptr inbounds %struct.Cell, %struct.Cell* %22, i64 %indvars.iv56, !noelle.pdg.inst.id !3568
DSWP:    Queue: 3
DSWP:     Producer:	  %132 = load i32, i32* %131, align 4, !tbaa !3398, !noelle.pdg.inst.id !704
DSWP:     Consumer:	  %133 = sext i32 %132 to i64, !noelle.pdg.inst.id !3592
DSWP:    Queue: 4
DSWP:     Producer:	  %indvars.iv90 = phi i64 [ %indvars.iv.next91, %190 ], [ 0, %45 ], !noelle.pdg.inst.id !3457
DSWP:     Consumer:	  %67 = trunc i64 %indvars.iv90 to i32, !noelle.pdg.inst.id !3464
DSWP:     Consumer:	  %98 = add nsw i64 %indvars.iv77, %indvars.iv90, !noelle.pdg.inst.id !3534
DSWP:    Queue: 5
DSWP:     Producer:	  %indvars.iv56 = phi i64 [ %70, %.preheader39 ], [ %indvars.iv.next57, %._crit_edge60 ], !noelle.pdg.inst.id !3480
DSWP:     Consumer:	  %77 = getelementptr inbounds i32, i32* %23, i64 %indvars.iv56, !noelle.pdg.inst.id !3486
DSWP:     Consumer:	  %116 = getelementptr inbounds %struct.Cell, %struct.Cell* %22, i64 %indvars.iv56, !noelle.pdg.inst.id !3568
DSWP:    Queue: 6
DSWP:     Producer:	  %132 = load i32, i32* %131, align 4, !tbaa !3398, !noelle.pdg.inst.id !704
DSWP:     Consumer:	  %133 = sext i32 %132 to i64, !noelle.pdg.inst.id !3592
DSWP:    Queue: 7
DSWP:     Producer:	  %indvars.iv90 = phi i64 [ %indvars.iv.next91, %190 ], [ 0, %45 ], !noelle.pdg.inst.id !3457
DSWP:     Consumer:	  %67 = trunc i64 %indvars.iv90 to i32, !noelle.pdg.inst.id !3464
DSWP:     Consumer:	  %98 = add nsw i64 %indvars.iv77, %indvars.iv90, !noelle.pdg.inst.id !3534
DSWP:    Queue: 8
DSWP:     Producer:	  %indvars.iv56 = phi i64 [ %70, %.preheader39 ], [ %indvars.iv.next57, %._crit_edge60 ], !noelle.pdg.inst.id !3480
DSWP:     Consumer:	  %77 = getelementptr inbounds i32, i32* %23, i64 %indvars.iv56, !noelle.pdg.inst.id !3486
DSWP:     Consumer:	  %116 = getelementptr inbounds %struct.Cell, %struct.Cell* %22, i64 %indvars.iv56, !noelle.pdg.inst.id !3568
DSWP:    Queue: 9
DSWP:     Producer:	  %132 = load i32, i32* %131, align 4, !tbaa !3398, !noelle.pdg.inst.id !704
DSWP:     Consumer:	  %133 = sext i32 %132 to i64, !noelle.pdg.inst.id !3592
DSWP:    Queue: 10
DSWP:     Producer:	  %indvars.iv90 = phi i64 [ %indvars.iv.next91, %190 ], [ 0, %45 ], !noelle.pdg.inst.id !3457
DSWP:     Consumer:	  %67 = trunc i64 %indvars.iv90 to i32, !noelle.pdg.inst.id !3464
DSWP:     Consumer:	  %98 = add nsw i64 %indvars.iv77, %indvars.iv90, !noelle.pdg.inst.id !3534
DSWP:    Queue: 11
DSWP:     Producer:	  %indvars.iv56 = phi i64 [ %70, %.preheader39 ], [ %indvars.iv.next57, %._crit_edge60 ], !noelle.pdg.inst.id !3480
DSWP:     Consumer:	  %77 = getelementptr inbounds i32, i32* %23, i64 %indvars.iv56, !noelle.pdg.inst.id !3486
DSWP:     Consumer:	  %116 = getelementptr inbounds %struct.Cell, %struct.Cell* %22, i64 %indvars.iv56, !noelle.pdg.inst.id !3568
DSWP:    Queue: 12
DSWP:     Producer:	  %132 = load i32, i32* %131, align 4, !tbaa !3398, !noelle.pdg.inst.id !704
DSWP:     Consumer:	  %133 = sext i32 %132 to i64, !noelle.pdg.inst.id !3592
DSWP:    Queue: 13
DSWP:     Producer:	  %indvars.iv90 = phi i64 [ %indvars.iv.next91, %190 ], [ 0, %45 ], !noelle.pdg.inst.id !3457
DSWP:     Consumer:	  %67 = trunc i64 %indvars.iv90 to i32, !noelle.pdg.inst.id !3464
DSWP:     Consumer:	  %98 = add nsw i64 %indvars.iv77, %indvars.iv90, !noelle.pdg.inst.id !3534
DSWP:    Queue: 14
DSWP:     Producer:	  %indvars.iv56 = phi i64 [ %70, %.preheader39 ], [ %indvars.iv.next57, %._crit_edge60 ], !noelle.pdg.inst.id !3480
DSWP:     Consumer:	  %77 = getelementptr inbounds i32, i32* %23, i64 %indvars.iv56, !noelle.pdg.inst.id !3486
DSWP:     Consumer:	  %116 = getelementptr inbounds %struct.Cell, %struct.Cell* %22, i64 %indvars.iv56, !noelle.pdg.inst.id !3568
DSWP:    Queue: 15
DSWP:     Producer:	  %132 = load i32, i32* %131, align 4, !tbaa !3398, !noelle.pdg.inst.id !704
DSWP:     Consumer:	  %133 = sext i32 %132 to i64, !noelle.pdg.inst.id !3592
DSWP:    Queue: 16
DSWP:     Producer:	  %indvars.iv90 = phi i64 [ %indvars.iv.next91, %190 ], [ 0, %45 ], !noelle.pdg.inst.id !3457
DSWP:     Consumer:	  %67 = trunc i64 %indvars.iv90 to i32, !noelle.pdg.inst.id !3464
DSWP:     Consumer:	  %98 = add nsw i64 %indvars.iv77, %indvars.iv90, !noelle.pdg.inst.id !3534
DSWP:    Queue: 17
DSWP:     Producer:	  %indvars.iv56 = phi i64 [ %70, %.preheader39 ], [ %indvars.iv.next57, %._crit_edge60 ], !noelle.pdg.inst.id !3480
DSWP:     Consumer:	  %77 = getelementptr inbounds i32, i32* %23, i64 %indvars.iv56, !noelle.pdg.inst.id !3486
DSWP:     Consumer:	  %116 = getelementptr inbounds %struct.Cell, %struct.Cell* %22, i64 %indvars.iv56, !noelle.pdg.inst.id !3568
DSWP:    Queue: 18
DSWP:     Producer:	  %132 = load i32, i32* %131, align 4, !tbaa !3398, !noelle.pdg.inst.id !704
DSWP:     Consumer:	  %133 = sext i32 %132 to i64, !noelle.pdg.inst.id !3592
DSWP:    Queue: 19
DSWP:     Producer:	  %indvars.iv90 = phi i64 [ %indvars.iv.next91, %190 ], [ 0, %45 ], !noelle.pdg.inst.id !3457
DSWP:     Consumer:	  %67 = trunc i64 %indvars.iv90 to i32, !noelle.pdg.inst.id !3464
DSWP:     Consumer:	  %98 = add nsw i64 %indvars.iv77, %indvars.iv90, !noelle.pdg.inst.id !3534
DSWP:    Queue: 20
DSWP:     Producer:	  %indvars.iv56 = phi i64 [ %70, %.preheader39 ], [ %indvars.iv.next57, %._crit_edge60 ], !noelle.pdg.inst.id !3480
DSWP:     Consumer:	  %77 = getelementptr inbounds i32, i32* %23, i64 %indvars.iv56, !noelle.pdg.inst.id !3486
DSWP:     Consumer:	  %116 = getelementptr inbounds %struct.Cell, %struct.Cell* %22, i64 %indvars.iv56, !noelle.pdg.inst.id !3568
DSWP:    Queue: 21
DSWP:     Producer:	  %143 = icmp ult %class.Vec3* %142, %123, !noelle.pdg.inst.id !3605
DSWP:     Consumer:	  br i1 %143, label %144, label %.._crit_edge61_crit_edge, !prof !3606, !noelle.pdg.inst.id !3607
DSWP:    Queue: 22
DSWP:     Producer:	  %143 = icmp ult %class.Vec3* %142, %123, !noelle.pdg.inst.id !3605
DSWP:     Consumer:	  br i1 %143, label %144, label %.._crit_edge61_crit_edge, !prof !3606, !noelle.pdg.inst.id !3607
DSWP:    Queue: 23
DSWP:     Producer:	  %143 = icmp ult %class.Vec3* %142, %123, !noelle.pdg.inst.id !3605
DSWP:     Consumer:	  br i1 %143, label %144, label %.._crit_edge61_crit_edge, !prof !3606, !noelle.pdg.inst.id !3607
DSWP:    Queue: 24
DSWP:     Producer:	  %143 = icmp ult %class.Vec3* %142, %123, !noelle.pdg.inst.id !3605
DSWP:     Consumer:	  br i1 %143, label %144, label %.._crit_edge61_crit_edge, !prof !3606, !noelle.pdg.inst.id !3607
DSWP:    Queue: 25
DSWP:     Producer:	  %143 = icmp ult %class.Vec3* %142, %123, !noelle.pdg.inst.id !3605
DSWP:     Consumer:	  br i1 %143, label %144, label %.._crit_edge61_crit_edge, !prof !3606, !noelle.pdg.inst.id !3607
DSWP:    Queue: 26
DSWP:     Producer:	  %143 = icmp ult %class.Vec3* %142, %123, !noelle.pdg.inst.id !3605
DSWP:     Consumer:	  br i1 %143, label %144, label %.._crit_edge61_crit_edge, !prof !3606, !noelle.pdg.inst.id !3607
DSWP:    Queue: 27
DSWP:     Producer:	  %166 = fcmp olt float %165, %64, !noelle.pdg.inst.id !3630
DSWP:     Consumer:	  br i1 %166, label %167, label %.._crit_edge61_crit_edge35, !prof !3631, !noelle.pdg.inst.id !3632
DSWP:    Queue: 28
DSWP:     Producer:	  %166 = fcmp olt float %165, %64, !noelle.pdg.inst.id !3630
DSWP:     Consumer:	  br i1 %166, label %167, label %.._crit_edge61_crit_edge35, !prof !3631, !noelle.pdg.inst.id !3632
DSWP:    Queue: 29
DSWP:     Producer:	  %166 = fcmp olt float %165, %64, !noelle.pdg.inst.id !3630
DSWP:     Consumer:	  br i1 %166, label %167, label %.._crit_edge61_crit_edge35, !prof !3631, !noelle.pdg.inst.id !3632
DSWP:    Queue: 30
DSWP:     Producer:	  %166 = fcmp olt float %165, %64, !noelle.pdg.inst.id !3630
DSWP:     Consumer:	  br i1 %166, label %167, label %.._crit_edge61_crit_edge35, !prof !3631, !noelle.pdg.inst.id !3632
DSWP:    Queue: 31
DSWP:     Producer:	  %166 = fcmp olt float %165, %64, !noelle.pdg.inst.id !3630
DSWP:     Consumer:	  br i1 %166, label %167, label %.._crit_edge61_crit_edge35, !prof !3631, !noelle.pdg.inst.id !3632
DSWP:    Queue: 32
DSWP:     Producer:	  %166 = fcmp olt float %165, %64, !noelle.pdg.inst.id !3630
DSWP:     Consumer:	  br i1 %166, label %167, label %.._crit_edge61_crit_edge35, !prof !3631, !noelle.pdg.inst.id !3632
DSWP:    Queue: 33
DSWP:     Producer:	  %66 = icmp slt i64 %indvars.iv90, %63, !noelle.pdg.inst.id !3459
DSWP:     Consumer:	  br i1 %66, label %.preheader40.preheader, label %191, !prof !3460, !noelle.loop.id !3461, !noelle.pdg.inst.id !3462, !noelle.parallelizer.looporder !3463
DSWP:    Queue: 34
DSWP:     Producer:	  %66 = icmp slt i64 %indvars.iv90, %63, !noelle.pdg.inst.id !3459
DSWP:     Consumer:	  br i1 %66, label %.preheader40.preheader, label %191, !prof !3460, !noelle.loop.id !3461, !noelle.pdg.inst.id !3462, !noelle.parallelizer.looporder !3463
DSWP:    Queue: 35
DSWP:     Producer:	  %66 = icmp slt i64 %indvars.iv90, %63, !noelle.pdg.inst.id !3459
DSWP:     Consumer:	  br i1 %66, label %.preheader40.preheader, label %191, !prof !3460, !noelle.loop.id !3461, !noelle.pdg.inst.id !3462, !noelle.parallelizer.looporder !3463
DSWP:    Queue: 36
DSWP:     Producer:	  %66 = icmp slt i64 %indvars.iv90, %63, !noelle.pdg.inst.id !3459
DSWP:     Consumer:	  br i1 %66, label %.preheader40.preheader, label %191, !prof !3460, !noelle.loop.id !3461, !noelle.pdg.inst.id !3462, !noelle.parallelizer.looporder !3463
DSWP:    Queue: 37
DSWP:     Producer:	  %66 = icmp slt i64 %indvars.iv90, %63, !noelle.pdg.inst.id !3459
DSWP:     Consumer:	  br i1 %66, label %.preheader40.preheader, label %191, !prof !3460, !noelle.loop.id !3461, !noelle.pdg.inst.id !3462, !noelle.parallelizer.looporder !3463
DSWP:    Queue: 38
DSWP:     Producer:	  %66 = icmp slt i64 %indvars.iv90, %63, !noelle.pdg.inst.id !3459
DSWP:     Consumer:	  br i1 %66, label %.preheader40.preheader, label %191, !prof !3460, !noelle.loop.id !3461, !noelle.pdg.inst.id !3462, !noelle.parallelizer.looporder !3463
DSWP:    Queue: 39
DSWP:     Producer:	  %66 = icmp slt i64 %indvars.iv90, %63, !noelle.pdg.inst.id !3459
DSWP:     Consumer:	  br i1 %66, label %.preheader40.preheader, label %191, !prof !3460, !noelle.loop.id !3461, !noelle.pdg.inst.id !3462, !noelle.parallelizer.looporder !3463
DSWP:  Environment
DSWP:    Pre loop env 1, producer:	  %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !3379
DSWP:    Pre loop env 2, producer:	  %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3381
DSWP:    Pre loop env 3, producer:	  %22 = load %struct.Cell*, %struct.Cell** @cells, align 8, !noelle.pdg.inst.id !547
DSWP:    Pre loop env 4, producer:	  %23 = load i32*, i32** @cnumPars, align 8, !noelle.pdg.inst.id !568
DSWP:    Pre loop env 5, producer:	  %47 = getelementptr inbounds [27 x i32], [27 x i32]* %3, i64 0, i64 0, !noelle.pdg.inst.id !3442
DSWP:    Pre loop env 6, producer:	  %48 = bitcast %class.Vec3* %4 to i8*, !noelle.pdg.inst.id !3443
DSWP:    Pre loop env 7, producer:	  %49 = bitcast { <2 x float>, float }* %5 to i8*, !noelle.pdg.inst.id !3444
DSWP:    Pre loop env 8, producer:	  %50 = bitcast %class.Vec3* %1 to i8*, !noelle.pdg.inst.id !3445
DSWP:    Pre loop env 9, producer:	  %51 = bitcast { <2 x float>, float }* %2 to i8*, !noelle.pdg.inst.id !3446
DSWP:    Pre loop env 10, producer:	  %52 = getelementptr inbounds %class.Vec3, %class.Vec3* %1, i64 0, i32 0, !noelle.pdg.inst.id !3447
DSWP:    Pre loop env 11, producer:	  %53 = getelementptr inbounds %class.Vec3, %class.Vec3* %1, i64 0, i32 1, !noelle.pdg.inst.id !3448
DSWP:    Pre loop env 12, producer:	  %54 = getelementptr inbounds %class.Vec3, %class.Vec3* %1, i64 0, i32 2, !noelle.pdg.inst.id !3449
DSWP:    Pre loop env 13, producer:	  %55 = getelementptr inbounds %class.Vec3, %class.Vec3* %4, i64 0, i32 0, !noelle.pdg.inst.id !3450
DSWP:    Pre loop env 14, producer:	  %56 = getelementptr inbounds %class.Vec3, %class.Vec3* %4, i64 0, i32 1, !noelle.pdg.inst.id !3451
DSWP:    Pre loop env 15, producer:	  %57 = getelementptr inbounds %class.Vec3, %class.Vec3* %4, i64 0, i32 2, !noelle.pdg.inst.id !3452
DSWP:    Pre loop env 16, producer:	  %58 = load i32, i32* @ny, align 4, !tbaa !3398, !noelle.pdg.inst.id !686
DSWP:    Pre loop env 17, producer:	  %59 = sext i32 %58 to i64, !noelle.pdg.inst.id !3453
DSWP:    Pre loop env 18, producer:	  %60 = load i32, i32* @nx, align 4, !tbaa !3398, !noelle.pdg.inst.id !688
DSWP:    Pre loop env 19, producer:	  %61 = sext i32 %60 to i64, !noelle.pdg.inst.id !3454
DSWP:    Pre loop env 20, producer:	  %62 = load i32*, i32** @cnumPars, align 8, !noelle.pdg.inst.id !690
DSWP:    Pre loop env 21, producer:	  %63 = sext i32 %.pre60 to i64, !noelle.pdg.inst.id !3455
DSWP:    Pre loop env 22, producer:	  %64 = load float, float* @hSq, align 4, !tbaa !3421, !noelle.pdg.inst.id !692
DSWP:  Create 8 pipeline stages
DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 0:

define void @noelle_task_0(i8*, i8*) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [176 x i64]*
  %3 = bitcast i8* %1 to [40 x i8*]*
  %4 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 0
  %5 = load i8*, i8** %4
  %6 = alloca i32
  %7 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 1
  %8 = load i8*, i8** %7
  %9 = alloca i64
  %10 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 2
  %11 = load i8*, i8** %10
  %12 = alloca i64
  %13 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 3
  %14 = load i8*, i8** %13
  %15 = alloca i32
  %16 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 4
  %17 = load i8*, i8** %16
  %18 = alloca i64
  %19 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 5
  %20 = load i8*, i8** %19
  %21 = alloca i64
  %22 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 6
  %23 = load i8*, i8** %22
  %24 = alloca i32
  %25 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 7
  %26 = load i8*, i8** %25
  %27 = alloca i64
  %28 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 8
  %29 = load i8*, i8** %28
  %30 = alloca i64
  %31 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 9
  %32 = load i8*, i8** %31
  %33 = alloca i32
  %34 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 10
  %35 = load i8*, i8** %34
  %36 = alloca i64
  %37 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 11
  %38 = load i8*, i8** %37
  %39 = alloca i64
  %40 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 12
  %41 = load i8*, i8** %40
  %42 = alloca i32
  %43 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 13
  %44 = load i8*, i8** %43
  %45 = alloca i64
  %46 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 14
  %47 = load i8*, i8** %46
  %48 = alloca i64
  %49 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 15
  %50 = load i8*, i8** %49
  %51 = alloca i32
  %52 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 16
  %53 = load i8*, i8** %52
  %54 = alloca i64
  %55 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 17
  %56 = load i8*, i8** %55
  %57 = alloca i64
  %58 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 18
  %59 = load i8*, i8** %58
  %60 = alloca i32
  %61 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 19
  %62 = load i8*, i8** %61
  %63 = alloca i64
  %64 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 20
  %65 = load i8*, i8** %64
  %66 = alloca i64
  %67 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 33
  %68 = load i8*, i8** %67
  %69 = alloca i1
  %70 = bitcast i1* %69 to i8*
  %71 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 34
  %72 = load i8*, i8** %71
  %73 = alloca i1
  %74 = bitcast i1* %73 to i8*
  %75 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 35
  %76 = load i8*, i8** %75
  %77 = alloca i1
  %78 = bitcast i1* %77 to i8*
  %79 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 36
  %80 = load i8*, i8** %79
  %81 = alloca i1
  %82 = bitcast i1* %81 to i8*
  %83 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 37
  %84 = load i8*, i8** %83
  %85 = alloca i1
  %86 = bitcast i1* %85 to i8*
  %87 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 38
  %88 = load i8*, i8** %87
  %89 = alloca i1
  %90 = bitcast i1* %89 to i8*
  %91 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 39
  %92 = load i8*, i8** %91
  %93 = alloca i1
  %94 = bitcast i1* %93 to i8*
  %95 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 0
  %96 = bitcast i64* %95 to [27 x i32]**
  %noelle_environment_variable_0 = load [27 x i32]*, [27 x i32]** %96
  %97 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 24
  %98 = bitcast i64* %97 to i32**
  %noelle_environment_variable_3 = load i32*, i32** %98
  %99 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 32
  %100 = bitcast i64* %99 to i32**
  %noelle_environment_variable_4 = load i32*, i32** %100
  %101 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 120
  %102 = bitcast i64* %101 to i32*
  %noelle_environment_variable_15 = load i32, i32* %102
  %103 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 128
  %noelle_environment_variable_16 = load i64, i64* %103
  %104 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 136
  %105 = bitcast i64* %104 to i32*
  %noelle_environment_variable_17 = load i32, i32* %105
  %106 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 144
  %noelle_environment_variable_18 = load i64, i64* %106
  %107 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 152
  %108 = bitcast i64* %107 to i32**
  %noelle_environment_variable_19 = load i32*, i32** %108
  %109 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 160
  %noelle_environment_variable_20 = load i64, i64* %109
  br label %112

110:                                              ; preds = %111
  ret void

111:                                              ; preds = %112
  br label %110

112:                                              ; preds = %2, %218
  %113 = phi i64 [ %220, %218 ], [ 0, %2 ], !noelle.pdg.inst.id !30
  %114 = phi i32 [ %219, %218 ], [ 0, %2 ], !noelle.pdg.inst.id !31
  store i64 %113, i64* %63
  call void @queuePush64(i8* %62, i64* %63)
  store i64 %113, i64* %54
  call void @queuePush64(i8* %53, i64* %54)
  store i64 %113, i64* %45
  call void @queuePush64(i8* %44, i64* %45)
  store i64 %113, i64* %36
  call void @queuePush64(i8* %35, i64* %36)
  store i64 %113, i64* %27
  call void @queuePush64(i8* %26, i64* %27)
  store i64 %113, i64* %18
  call void @queuePush64(i8* %17, i64* %18)
  store i64 %113, i64* %9
  call void @queuePush64(i8* %8, i64* %9)
  %115 = icmp slt i64 %113, %noelle_environment_variable_20, !noelle.pdg.inst.id !32
  store i1 %115, i1* %93
  call void @queuePush8(i8* %92, i8* %94)
  store i1 %115, i1* %89
  call void @queuePush8(i8* %88, i8* %90)
  store i1 %115, i1* %85
  call void @queuePush8(i8* %84, i8* %86)
  store i1 %115, i1* %81
  call void @queuePush8(i8* %80, i8* %82)
  store i1 %115, i1* %77
  call void @queuePush8(i8* %76, i8* %78)
  store i1 %115, i1* %73
  call void @queuePush8(i8* %72, i8* %74)
  store i1 %115, i1* %69
  call void @queuePush8(i8* %68, i8* %70)
  br i1 %115, label %116, label %111, !prof !33, !noelle.loop.id !34, !noelle.pdg.inst.id !35, !noelle.parallelizer.looporder !36

116:                                              ; preds = %112
  %117 = trunc i64 %113 to i32, !noelle.pdg.inst.id !37
  %118 = mul nsw i32 %noelle_environment_variable_15, %117, !noelle.pdg.inst.id !38
  br label %119

119:                                              ; preds = %214, %116
  %120 = phi i64 [ 0, %116 ], [ %217, %214 ], !noelle.pdg.inst.id !39
  %121 = phi i32 [ %114, %116 ], [ %216, %214 ], !noelle.pdg.inst.id !40
  %122 = icmp slt i64 %120, %noelle_environment_variable_16, !noelle.pdg.inst.id !41
  br i1 %122, label %123, label %218, !prof !42, !noelle.loop.id !43, !noelle.pdg.inst.id !44, !noelle.parallelizer.looporder !45

123:                                              ; preds = %119
  %124 = sext i32 %121 to i64, !noelle.pdg.inst.id !46
  %125 = trunc i64 %120 to i32, !noelle.pdg.inst.id !47
  %126 = add nsw i32 %118, %125, !noelle.pdg.inst.id !48
  %127 = mul nsw i32 %126, %noelle_environment_variable_17, !noelle.pdg.inst.id !49
  br label %128

128:                                              ; preds = %211, %123
  %129 = phi i64 [ 0, %123 ], [ %212, %211 ], !noelle.pdg.inst.id !50
  %130 = phi i64 [ %124, %123 ], [ %213, %211 ], !noelle.pdg.inst.id !51
  store i64 %130, i64* %66
  call void @queuePush64(i8* %65, i64* %66)
  store i64 %130, i64* %57
  call void @queuePush64(i8* %56, i64* %57)
  store i64 %130, i64* %48
  call void @queuePush64(i8* %47, i64* %48)
  store i64 %130, i64* %39
  call void @queuePush64(i8* %38, i64* %39)
  store i64 %130, i64* %30
  call void @queuePush64(i8* %29, i64* %30)
  store i64 %130, i64* %21
  call void @queuePush64(i8* %20, i64* %21)
  store i64 %130, i64* %12
  call void @queuePush64(i8* %11, i64* %12)
  %131 = icmp slt i64 %129, %noelle_environment_variable_18, !noelle.pdg.inst.id !52
  br i1 %131, label %132, label %214, !prof !53, !noelle.loop.id !54, !noelle.pdg.inst.id !55, !noelle.parallelizer.looporder !56

132:                                              ; preds = %128
  %133 = getelementptr inbounds i32, i32* %noelle_environment_variable_3, i64 %130, !noelle.pdg.inst.id !57
  %134 = load i32, i32* %133, align 4, !tbaa !58, !noelle.pdg.inst.id !62
  %135 = icmp eq i32 %134, 0, !noelle.pdg.inst.id !63
  br i1 %135, label %221, label %136, !prof !64, !noelle.pdg.inst.id !65

136:                                              ; preds = %132
  %137 = trunc i64 %129 to i32, !noelle.pdg.inst.id !66
  %138 = add nsw i32 %127, %137, !noelle.pdg.inst.id !67
  store i32 %138, i32* %noelle_environment_variable_4, align 16, !tbaa !58, !noelle.pdg.inst.id !68
  %139 = sext i32 %138 to i64, !noelle.pdg.inst.id !69
  br label %140

140:                                              ; preds = %192, %136
  %141 = phi i64 [ %194, %192 ], [ -1, %136 ], !noelle.pdg.inst.id !70
  %142 = phi i32 [ %193, %192 ], [ 1, %136 ], !noelle.pdg.inst.id !71
  %143 = icmp eq i64 %141, 2, !noelle.pdg.inst.id !72
  br i1 %143, label %195, label %144, !prof !73, !noelle.loop.id !74, !noelle.pdg.inst.id !75

144:                                              ; preds = %140
  %145 = add nsw i64 %141, %129, !noelle.pdg.inst.id !76
  %146 = icmp slt i64 %145, %noelle_environment_variable_18, !noelle.pdg.inst.id !77
  br i1 %146, label %225, label %226, !prof !78, !noelle.pdg.inst.id !79

147:                                              ; preds = %160, %225
  %148 = phi i64 [ %162, %160 ], [ -1, %225 ], !noelle.pdg.inst.id !80
  %149 = phi i32 [ %161, %160 ], [ %142, %225 ], !noelle.pdg.inst.id !81
  %150 = icmp eq i64 %148, 2, !noelle.pdg.inst.id !82
  br i1 %150, label %190, label %151, !prof !83, !noelle.loop.id !84, !noelle.pdg.inst.id !85

151:                                              ; preds = %147
  %152 = add nsw i64 %148, %120, !noelle.pdg.inst.id !86
  %153 = or i64 %145, %152, !noelle.pdg.inst.id !87
  %154 = trunc i64 %153 to i32, !noelle.pdg.inst.id !88
  %155 = icmp sgt i32 %154, -1, !noelle.pdg.inst.id !89
  %156 = icmp slt i64 %152, %noelle_environment_variable_16, !noelle.pdg.inst.id !90
  %157 = and i1 %155, %156, !noelle.pdg.inst.id !91
  br i1 %157, label %228, label %223, !prof !92, !noelle.pdg.inst.id !93

158:                                              ; preds = %163
  %159 = phi i32 [ %165, %163 ], !noelle.pdg.inst.id !94
  br label %160

160:                                              ; preds = %158, %223
  %161 = phi i32 [ %149, %223 ], [ %159, %158 ], !noelle.pdg.inst.id !95
  %162 = add nsw i64 %148, 1, !noelle.pdg.inst.id !96
  br label %147

163:                                              ; preds = %187, %228
  %164 = phi i64 [ %189, %187 ], [ -1, %228 ], !noelle.pdg.inst.id !97
  %165 = phi i32 [ %188, %187 ], [ %149, %228 ], !noelle.pdg.inst.id !98
  %166 = icmp eq i64 %164, 2, !noelle.pdg.inst.id !99
  br i1 %166, label %158, label %167, !prof !100, !noelle.loop.id !101, !noelle.pdg.inst.id !102

167:                                              ; preds = %163
  %168 = add nsw i64 %164, %113, !noelle.pdg.inst.id !103
  %169 = icmp sgt i64 %168, -1, !noelle.pdg.inst.id !104
  %170 = icmp slt i64 %168, %noelle_environment_variable_20, !noelle.pdg.inst.id !105
  %171 = and i1 %169, %170, !noelle.pdg.inst.id !106
  br i1 %171, label %172, label %229, !prof !107, !noelle.pdg.inst.id !108

172:                                              ; preds = %167
  %173 = mul nsw i64 %168, %noelle_environment_variable_16, !noelle.pdg.inst.id !109
  %174 = add nsw i64 %173, %152, !noelle.pdg.inst.id !110
  %175 = mul nsw i64 %174, %noelle_environment_variable_18, !noelle.pdg.inst.id !111
  %176 = add nsw i64 %175, %145, !noelle.pdg.inst.id !112
  %177 = icmp slt i64 %176, %139, !noelle.pdg.inst.id !113
  br i1 %177, label %178, label %230, !prof !114, !noelle.pdg.inst.id !115

178:                                              ; preds = %172
  %179 = getelementptr inbounds i32, i32* %noelle_environment_variable_19, i64 %176, !noelle.pdg.inst.id !116
  %180 = load i32, i32* %179, align 4, !tbaa !58, !noelle.pdg.inst.id !117
  %181 = icmp eq i32 %180, 0, !noelle.pdg.inst.id !118
  br i1 %181, label %231, label %182, !prof !119, !noelle.pdg.inst.id !120

182:                                              ; preds = %178
  %183 = sext i32 %165 to i64, !noelle.pdg.inst.id !121
  %184 = getelementptr inbounds [27 x i32], [27 x i32]* %noelle_environment_variable_0, i64 0, i64 %183, !noelle.pdg.inst.id !122
  %185 = trunc i64 %176 to i32, !noelle.pdg.inst.id !123
  store i32 %185, i32* %184, align 4, !tbaa !58, !noelle.pdg.inst.id !124
  %186 = add nsw i32 %165, 1, !noelle.pdg.inst.id !125
  br label %187

187:                                              ; preds = %182, %231, %230, %229
  %188 = phi i32 [ %186, %182 ], [ %165, %229 ], [ %165, %230 ], [ %165, %231 ], !noelle.pdg.inst.id !126
  %189 = add nsw i64 %164, 1, !noelle.pdg.inst.id !127
  br label %163

190:                                              ; preds = %147
  %191 = phi i32 [ %149, %147 ], !noelle.pdg.inst.id !128
  br label %192

192:                                              ; preds = %190, %226
  %193 = phi i32 [ %142, %226 ], [ %191, %190 ], !noelle.pdg.inst.id !129
  %194 = add nsw i64 %141, 1, !noelle.pdg.inst.id !130
  br label %140

195:                                              ; preds = %140
  %196 = phi i32 [ %142, %140 ], !noelle.pdg.inst.id !131
  %197 = sext i32 %196 to i64, !noelle.pdg.inst.id !132
  br label %198

198:                                              ; preds = %209, %195
  %199 = phi i32 [ 0, %195 ], [ %210, %209 ], !noelle.pdg.inst.id !133
  %200 = icmp slt i32 %199, %134, !noelle.pdg.inst.id !134
  br i1 %200, label %232, label %224, !prof !135, !noelle.loop.id !136, !noelle.pdg.inst.id !137

201:                                              ; preds = %207, %232
  %202 = phi i64 [ %208, %207 ], [ 0, %232 ], !noelle.pdg.inst.id !138
  %203 = icmp slt i64 %202, %197, !noelle.pdg.inst.id !139
  br i1 %203, label %204, label %227, !prof !140, !noelle.loop.id !141, !noelle.pdg.inst.id !142, !noelle.parallelizer.looporder !143

204:                                              ; preds = %201
  %205 = getelementptr inbounds [27 x i32], [27 x i32]* %noelle_environment_variable_0, i64 0, i64 %202, !noelle.pdg.inst.id !144
  %206 = load i32, i32* %205, align 4, !tbaa !58, !noelle.pdg.inst.id !145
  store i32 %206, i32* %60
  call void @queuePush32(i8* %59, i32* %60)
  store i32 %206, i32* %51
  call void @queuePush32(i8* %50, i32* %51)
  store i32 %206, i32* %42
  call void @queuePush32(i8* %41, i32* %42)
  store i32 %206, i32* %33
  call void @queuePush32(i8* %32, i32* %33)
  store i32 %206, i32* %24
  call void @queuePush32(i8* %23, i32* %24)
  store i32 %206, i32* %15
  call void @queuePush32(i8* %14, i32* %15)
  store i32 %206, i32* %6
  call void @queuePush32(i8* %5, i32* %6)
  br label %222

207:                                              ; preds = %222
  %208 = add nuw nsw i64 %202, 1, !noelle.pdg.inst.id !146
  br label %201

209:                                              ; preds = %227
  %210 = add nuw nsw i32 %199, 1, !noelle.pdg.inst.id !147
  br label %198

211:                                              ; preds = %224, %221
  %212 = add nuw nsw i64 %129, 1, !noelle.pdg.inst.id !148
  %213 = add nsw i64 %130, 1, !noelle.pdg.inst.id !149
  br label %128

214:                                              ; preds = %128
  %215 = phi i64 [ %130, %128 ], !noelle.pdg.inst.id !150
  %216 = trunc i64 %215 to i32, !noelle.pdg.inst.id !151
  %217 = add nuw nsw i64 %120, 1, !noelle.pdg.inst.id !152
  br label %119

218:                                              ; preds = %119
  %219 = phi i32 [ %121, %119 ], !noelle.pdg.inst.id !153
  %220 = add nuw nsw i64 %113, 1, !noelle.pdg.inst.id !154
  br label %112

221:                                              ; preds = %132
  br label %211

222:                                              ; preds = %204
  br label %207

223:                                              ; preds = %151
  br label %160

224:                                              ; preds = %198
  br label %211

225:                                              ; preds = %144
  br label %147

226:                                              ; preds = %144
  br label %192

227:                                              ; preds = %201
  br label %209

228:                                              ; preds = %151
  br label %163

229:                                              ; preds = %167
  br label %187

230:                                              ; preds = %172
  br label %187

231:                                              ; preds = %178
  br label %187

232:                                              ; preds = %198
  br label %201
}

DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 1:

define void @noelle_task_1(i8*, i8*) {
  %3 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !30
  %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !31
  %noelle.environment_variable.pointer = bitcast i8* %0 to [176 x i64]*
  %5 = bitcast i8* %1 to [40 x i8*]*
  %6 = getelementptr inbounds [40 x i8*], [40 x i8*]* %5, i64 0, i64 21
  %7 = load i8*, i8** %6
  %8 = alloca i1
  %9 = bitcast i1* %8 to i8*
  %10 = getelementptr inbounds [40 x i8*], [40 x i8*]* %5, i64 0, i64 22
  %11 = load i8*, i8** %10
  %12 = alloca i1
  %13 = bitcast i1* %12 to i8*
  %14 = getelementptr inbounds [40 x i8*], [40 x i8*]* %5, i64 0, i64 23
  %15 = load i8*, i8** %14
  %16 = alloca i1
  %17 = bitcast i1* %16 to i8*
  %18 = getelementptr inbounds [40 x i8*], [40 x i8*]* %5, i64 0, i64 24
  %19 = load i8*, i8** %18
  %20 = alloca i1
  %21 = bitcast i1* %20 to i8*
  %22 = getelementptr inbounds [40 x i8*], [40 x i8*]* %5, i64 0, i64 25
  %23 = load i8*, i8** %22
  %24 = alloca i1
  %25 = bitcast i1* %24 to i8*
  %26 = getelementptr inbounds [40 x i8*], [40 x i8*]* %5, i64 0, i64 26
  %27 = load i8*, i8** %26
  %28 = alloca i1
  %29 = bitcast i1* %28 to i8*
  %30 = getelementptr inbounds [40 x i8*], [40 x i8*]* %5, i64 0, i64 27
  %31 = load i8*, i8** %30
  %32 = alloca i1
  %33 = bitcast i1* %32 to i8*
  %34 = getelementptr inbounds [40 x i8*], [40 x i8*]* %5, i64 0, i64 28
  %35 = load i8*, i8** %34
  %36 = alloca i1
  %37 = bitcast i1* %36 to i8*
  %38 = getelementptr inbounds [40 x i8*], [40 x i8*]* %5, i64 0, i64 29
  %39 = load i8*, i8** %38
  %40 = alloca i1
  %41 = bitcast i1* %40 to i8*
  %42 = getelementptr inbounds [40 x i8*], [40 x i8*]* %5, i64 0, i64 30
  %43 = load i8*, i8** %42
  %44 = alloca i1
  %45 = bitcast i1* %44 to i8*
  %46 = getelementptr inbounds [40 x i8*], [40 x i8*]* %5, i64 0, i64 31
  %47 = load i8*, i8** %46
  %48 = alloca i1
  %49 = bitcast i1* %48 to i8*
  %50 = getelementptr inbounds [40 x i8*], [40 x i8*]* %5, i64 0, i64 32
  %51 = load i8*, i8** %50
  %52 = alloca i1
  %53 = bitcast i1* %52 to i8*
  %54 = getelementptr inbounds [40 x i8*], [40 x i8*]* %5, i64 0, i64 0
  %55 = load i8*, i8** %54
  %56 = alloca i32
  %57 = getelementptr inbounds [40 x i8*], [40 x i8*]* %5, i64 0, i64 1
  %58 = load i8*, i8** %57
  %59 = alloca i64
  %60 = getelementptr inbounds [40 x i8*], [40 x i8*]* %5, i64 0, i64 2
  %61 = load i8*, i8** %60
  %62 = alloca i64
  %63 = getelementptr inbounds [40 x i8*], [40 x i8*]* %5, i64 0, i64 38
  %64 = load i8*, i8** %63
  %65 = alloca i1
  %66 = bitcast i1* %65 to i8*
  %67 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 0
  %68 = bitcast i64* %67 to [27 x i32]**
  %noelle_environment_variable_0 = load [27 x i32]*, [27 x i32]** %68
  %69 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 8
  %70 = bitcast i64* %69 to { <2 x float>, float }**
  %noelle_environment_variable_1 = load { <2 x float>, float }*, { <2 x float>, float }** %70
  %71 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 16
  %72 = bitcast i64* %71 to %struct.Cell**
  %noelle_environment_variable_2 = load %struct.Cell*, %struct.Cell** %72
  %73 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 24
  %74 = bitcast i64* %73 to i32**
  %noelle_environment_variable_3 = load i32*, i32** %74
  %75 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 40
  %76 = bitcast i64* %75 to i8**
  %noelle_environment_variable_5 = load i8*, i8** %76
  %77 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 48
  %78 = bitcast i64* %77 to i8**
  %noelle_environment_variable_6 = load i8*, i8** %78
  %79 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 56
  %80 = bitcast i64* %79 to i8**
  %noelle_environment_variable_7 = load i8*, i8** %80
  %81 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 64
  %82 = bitcast i64* %81 to i8**
  %noelle_environment_variable_8 = load i8*, i8** %82
  %83 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 72
  %84 = bitcast i64* %83 to float**
  %noelle_environment_variable_9 = load float*, float** %84
  %85 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 80
  %86 = bitcast i64* %85 to float**
  %noelle_environment_variable_10 = load float*, float** %86
  %87 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 88
  %88 = bitcast i64* %87 to float**
  %noelle_environment_variable_11 = load float*, float** %88
  %89 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 96
  %90 = bitcast i64* %89 to float**
  %noelle_environment_variable_12 = load float*, float** %90
  %91 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 104
  %92 = bitcast i64* %91 to float**
  %noelle_environment_variable_13 = load float*, float** %92
  %93 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 112
  %94 = bitcast i64* %93 to float**
  %noelle_environment_variable_14 = load float*, float** %94
  %95 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 120
  %96 = bitcast i64* %95 to i32*
  %noelle_environment_variable_15 = load i32, i32* %96
  %97 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 128
  %noelle_environment_variable_16 = load i64, i64* %97
  %98 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 136
  %99 = bitcast i64* %98 to i32*
  %noelle_environment_variable_17 = load i32, i32* %99
  %100 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 144
  %noelle_environment_variable_18 = load i64, i64* %100
  %101 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 152
  %102 = bitcast i64* %101 to i32**
  %noelle_environment_variable_19 = load i32*, i32** %102
  %103 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 160
  %noelle_environment_variable_20 = load i64, i64* %103
  %104 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 168
  %105 = bitcast i64* %104 to float*
  %noelle_environment_variable_21 = load float, float* %105
  %106 = getelementptr inbounds %class.Vec3, %class.Vec3* %4, i64 0, i32 2, !noelle.pdg.inst.id !32
  %107 = getelementptr inbounds %class.Vec3, %class.Vec3* %4, i64 0, i32 1, !noelle.pdg.inst.id !33
  %108 = bitcast %class.Vec3* %4 to i8*, !noelle.pdg.inst.id !34
  %109 = getelementptr inbounds %class.Vec3, %class.Vec3* %4, i64 0, i32 0, !noelle.pdg.inst.id !35
  %110 = bitcast { <2 x float>, float }* %3 to i8*, !noelle.pdg.inst.id !36
  br label %113

111:                                              ; preds = %112
  ret void

112:                                              ; preds = %113
  br label %111

113:                                              ; preds = %2, %291
  call void @queuePop8(i8* %64, i8* %66)
  %114 = load i1, i1* %65
  call void @queuePop64(i8* %58, i64* %59)
  %115 = load i64, i64* %59
  br i1 %114, label %116, label %112, !prof !37, !noelle.loop.id !38, !noelle.pdg.inst.id !39, !noelle.parallelizer.looporder !40

116:                                              ; preds = %113
  %117 = trunc i64 %115 to i32, !noelle.pdg.inst.id !41
  %118 = mul nsw i32 %noelle_environment_variable_15, %117, !noelle.pdg.inst.id !42
  br label %119

119:                                              ; preds = %280, %116
  %120 = phi i64 [ 0, %116 ], [ %281, %280 ], !noelle.pdg.inst.id !43
  %121 = icmp slt i64 %120, %noelle_environment_variable_16, !noelle.pdg.inst.id !44
  br i1 %121, label %122, label %291, !prof !45, !noelle.loop.id !46, !noelle.pdg.inst.id !47, !noelle.parallelizer.looporder !48

122:                                              ; preds = %119
  %123 = trunc i64 %120 to i32, !noelle.pdg.inst.id !49
  %124 = add nsw i32 %118, %123, !noelle.pdg.inst.id !50
  %125 = mul nsw i32 %124, %noelle_environment_variable_17, !noelle.pdg.inst.id !51
  br label %126

126:                                              ; preds = %278, %122
  %127 = phi i64 [ 0, %122 ], [ %279, %278 ], !noelle.pdg.inst.id !52
  call void @queuePop64(i8* %61, i64* %62)
  %128 = load i64, i64* %62
  %129 = icmp slt i64 %127, %noelle_environment_variable_18, !noelle.pdg.inst.id !53
  br i1 %129, label %130, label %280, !prof !54, !noelle.loop.id !55, !noelle.pdg.inst.id !56, !noelle.parallelizer.looporder !57

130:                                              ; preds = %126
  %131 = getelementptr inbounds i32, i32* %noelle_environment_variable_3, i64 %128, !noelle.pdg.inst.id !58
  %132 = load i32, i32* %131, align 4, !tbaa !59, !noelle.pdg.inst.id !63
  %133 = icmp eq i32 %132, 0, !noelle.pdg.inst.id !64
  br i1 %133, label %282, label %134, !prof !65, !noelle.pdg.inst.id !66

134:                                              ; preds = %130
  %135 = trunc i64 %127 to i32, !noelle.pdg.inst.id !67
  %136 = add nsw i32 %125, %135, !noelle.pdg.inst.id !68
  %137 = sext i32 %136 to i64, !noelle.pdg.inst.id !69
  br label %138

138:                                              ; preds = %190, %134
  %139 = phi i64 [ %192, %190 ], [ -1, %134 ], !noelle.pdg.inst.id !70
  %140 = phi i32 [ %191, %190 ], [ 1, %134 ], !noelle.pdg.inst.id !71
  %141 = icmp eq i64 %139, 2, !noelle.pdg.inst.id !72
  br i1 %141, label %193, label %142, !prof !73, !noelle.loop.id !74, !noelle.pdg.inst.id !75

142:                                              ; preds = %138
  %143 = add nsw i64 %139, %127, !noelle.pdg.inst.id !76
  %144 = icmp slt i64 %143, %noelle_environment_variable_18, !noelle.pdg.inst.id !77
  br i1 %144, label %289, label %290, !prof !78, !noelle.pdg.inst.id !79

145:                                              ; preds = %158, %289
  %146 = phi i64 [ %160, %158 ], [ -1, %289 ], !noelle.pdg.inst.id !80
  %147 = phi i32 [ %159, %158 ], [ %140, %289 ], !noelle.pdg.inst.id !81
  %148 = icmp eq i64 %146, 2, !noelle.pdg.inst.id !82
  br i1 %148, label %188, label %149, !prof !83, !noelle.loop.id !84, !noelle.pdg.inst.id !85

149:                                              ; preds = %145
  %150 = add nsw i64 %146, %120, !noelle.pdg.inst.id !86
  %151 = or i64 %143, %150, !noelle.pdg.inst.id !87
  %152 = trunc i64 %151 to i32, !noelle.pdg.inst.id !88
  %153 = icmp sgt i32 %152, -1, !noelle.pdg.inst.id !89
  %154 = icmp slt i64 %150, %noelle_environment_variable_16, !noelle.pdg.inst.id !90
  %155 = and i1 %153, %154, !noelle.pdg.inst.id !91
  br i1 %155, label %292, label %287, !prof !92, !noelle.pdg.inst.id !93

156:                                              ; preds = %161
  %157 = phi i32 [ %163, %161 ], !noelle.pdg.inst.id !94
  br label %158

158:                                              ; preds = %156, %287
  %159 = phi i32 [ %147, %287 ], [ %157, %156 ], !noelle.pdg.inst.id !95
  %160 = add nsw i64 %146, 1, !noelle.pdg.inst.id !96
  br label %145

161:                                              ; preds = %185, %292
  %162 = phi i64 [ %187, %185 ], [ -1, %292 ], !noelle.pdg.inst.id !97
  %163 = phi i32 [ %186, %185 ], [ %147, %292 ], !noelle.pdg.inst.id !98
  %164 = icmp eq i64 %162, 2, !noelle.pdg.inst.id !99
  br i1 %164, label %156, label %165, !prof !100, !noelle.loop.id !101, !noelle.pdg.inst.id !102

165:                                              ; preds = %161
  %166 = add nsw i64 %162, %115, !noelle.pdg.inst.id !103
  %167 = icmp sgt i64 %166, -1, !noelle.pdg.inst.id !104
  %168 = icmp slt i64 %166, %noelle_environment_variable_20, !noelle.pdg.inst.id !105
  %169 = and i1 %167, %168, !noelle.pdg.inst.id !106
  br i1 %169, label %170, label %293, !prof !107, !noelle.pdg.inst.id !108

170:                                              ; preds = %165
  %171 = mul nsw i64 %166, %noelle_environment_variable_16, !noelle.pdg.inst.id !109
  %172 = add nsw i64 %171, %150, !noelle.pdg.inst.id !110
  %173 = mul nsw i64 %172, %noelle_environment_variable_18, !noelle.pdg.inst.id !111
  %174 = add nsw i64 %173, %143, !noelle.pdg.inst.id !112
  %175 = icmp slt i64 %174, %137, !noelle.pdg.inst.id !113
  br i1 %175, label %176, label %294, !prof !114, !noelle.pdg.inst.id !115

176:                                              ; preds = %170
  %177 = getelementptr inbounds i32, i32* %noelle_environment_variable_19, i64 %174, !noelle.pdg.inst.id !116
  %178 = load i32, i32* %177, align 4, !tbaa !59, !noelle.pdg.inst.id !117
  %179 = icmp eq i32 %178, 0, !noelle.pdg.inst.id !118
  br i1 %179, label %295, label %180, !prof !119, !noelle.pdg.inst.id !120

180:                                              ; preds = %176
  %181 = sext i32 %163 to i64, !noelle.pdg.inst.id !121
  %182 = getelementptr inbounds [27 x i32], [27 x i32]* %noelle_environment_variable_0, i64 0, i64 %181, !noelle.pdg.inst.id !122
  %183 = trunc i64 %174 to i32, !noelle.pdg.inst.id !123
  %184 = add nsw i32 %163, 1, !noelle.pdg.inst.id !124
  br label %185

185:                                              ; preds = %180, %295, %294, %293
  %186 = phi i32 [ %184, %180 ], [ %163, %293 ], [ %163, %294 ], [ %163, %295 ], !noelle.pdg.inst.id !125
  %187 = add nsw i64 %162, 1, !noelle.pdg.inst.id !126
  br label %161

188:                                              ; preds = %145
  %189 = phi i32 [ %147, %145 ], !noelle.pdg.inst.id !127
  br label %190

190:                                              ; preds = %188, %290
  %191 = phi i32 [ %140, %290 ], [ %189, %188 ], !noelle.pdg.inst.id !128
  %192 = add nsw i64 %139, 1, !noelle.pdg.inst.id !129
  br label %138

193:                                              ; preds = %138
  %194 = phi i32 [ %140, %138 ], !noelle.pdg.inst.id !130
  %195 = getelementptr inbounds %struct.Cell, %struct.Cell* %noelle_environment_variable_2, i64 %128, !noelle.pdg.inst.id !131
  %196 = sext i32 %194 to i64, !noelle.pdg.inst.id !132
  br label %197

197:                                              ; preds = %275, %193
  %198 = phi i32 [ 0, %193 ], [ %277, %275 ], !noelle.pdg.inst.id !133
  %199 = phi %struct.Cell* [ %195, %193 ], [ %276, %275 ], !noelle.pdg.inst.id !134
  %200 = icmp slt i32 %198, %132, !noelle.pdg.inst.id !135
  br i1 %200, label %201, label %288, !prof !136, !noelle.loop.id !137, !noelle.pdg.inst.id !138

201:                                              ; preds = %197
  %202 = and i32 %198, 15, !noelle.pdg.inst.id !139
  %203 = zext i32 %202 to i64, !noelle.pdg.inst.id !140
  %204 = getelementptr inbounds %struct.Cell, %struct.Cell* %199, i64 0, i32 0, i64 %203, !noelle.pdg.inst.id !141
  %205 = getelementptr inbounds %struct.Cell, %struct.Cell* %199, i64 0, i32 4, i64 %203, !noelle.pdg.inst.id !142
  %206 = getelementptr inbounds %class.Vec3, %class.Vec3* %204, i64 0, i32 0, !noelle.pdg.inst.id !143
  %207 = getelementptr inbounds %struct.Cell, %struct.Cell* %199, i64 0, i32 0, i64 %203, i32 1, !noelle.pdg.inst.id !144
  %208 = getelementptr inbounds %struct.Cell, %struct.Cell* %199, i64 0, i32 0, i64 %203, i32 2, !noelle.pdg.inst.id !145
  br label %209

209:                                              ; preds = %268, %201
  %210 = phi i64 [ %269, %268 ], [ 0, %201 ], !noelle.pdg.inst.id !146
  %211 = icmp slt i64 %210, %196, !noelle.pdg.inst.id !147
  br i1 %211, label %212, label %270, !prof !148, !noelle.loop.id !149, !noelle.pdg.inst.id !150, !noelle.parallelizer.looporder !151

212:                                              ; preds = %209
  call void @queuePop32(i8* %55, i32* %56)
  %213 = load i32, i32* %56
  %214 = getelementptr inbounds [27 x i32], [27 x i32]* %noelle_environment_variable_0, i64 0, i64 %210, !noelle.pdg.inst.id !152
  %215 = sext i32 %213 to i64, !noelle.pdg.inst.id !153
  %216 = getelementptr inbounds %struct.Cell, %struct.Cell* %noelle_environment_variable_2, i64 %215, !noelle.pdg.inst.id !154
  %217 = getelementptr inbounds i32, i32* %noelle_environment_variable_19, i64 %215, !noelle.pdg.inst.id !155
  %218 = load i32, i32* %217, align 4, !tbaa !59, !noelle.pdg.inst.id !156
  br label %219

219:                                              ; preds = %265, %212
  %220 = phi i32 [ 0, %212 ], [ %267, %265 ], !noelle.pdg.inst.id !157
  %221 = phi %struct.Cell* [ %216, %212 ], [ %266, %265 ], !noelle.pdg.inst.id !158
  %222 = icmp slt i32 %220, %218, !noelle.pdg.inst.id !159
  br i1 %222, label %223, label %268, !prof !160, !noelle.loop.id !161, !noelle.pdg.inst.id !162

223:                                              ; preds = %219
  %224 = and i32 %220, 15, !noelle.pdg.inst.id !163
  %225 = zext i32 %224 to i64, !noelle.pdg.inst.id !164
  %226 = getelementptr inbounds %struct.Cell, %struct.Cell* %221, i64 0, i32 0, i64 %225, !noelle.pdg.inst.id !165
  %227 = icmp ult %class.Vec3* %226, %204, !noelle.pdg.inst.id !166
  store i1 %227, i1* %28
  call void @queuePush8(i8* %27, i8* %29)
  store i1 %227, i1* %24
  call void @queuePush8(i8* %23, i8* %25)
  store i1 %227, i1* %20
  call void @queuePush8(i8* %19, i8* %21)
  store i1 %227, i1* %16
  call void @queuePush8(i8* %15, i8* %17)
  store i1 %227, i1* %12
  call void @queuePush8(i8* %11, i8* %13)
  store i1 %227, i1* %8
  call void @queuePush8(i8* %7, i8* %9)
  br i1 %227, label %228, label %285, !prof !167, !noelle.pdg.inst.id !168

228:                                              ; preds = %223
  %229 = load float, float* %206, align 4, !tbaa !169, !noelle.pdg.inst.id !172
  %230 = getelementptr inbounds %class.Vec3, %class.Vec3* %226, i64 0, i32 0, !noelle.pdg.inst.id !173
  %231 = load float, float* %230, align 4, !tbaa !169, !noelle.pdg.inst.id !174
  %232 = fsub float %229, %231, !noelle.pdg.inst.id !175
  %233 = load float, float* %207, align 4, !tbaa !176, !noelle.pdg.inst.id !177
  %234 = getelementptr inbounds %struct.Cell, %struct.Cell* %221, i64 0, i32 0, i64 %225, i32 1, !noelle.pdg.inst.id !178
  %235 = load float, float* %234, align 4, !tbaa !176, !noelle.pdg.inst.id !179
  %236 = fsub float %233, %235, !noelle.pdg.inst.id !180
  %237 = load float, float* %208, align 4, !tbaa !181, !noelle.pdg.inst.id !182
  %238 = getelementptr inbounds %struct.Cell, %struct.Cell* %221, i64 0, i32 0, i64 %225, i32 2, !noelle.pdg.inst.id !183
  %239 = load float, float* %238, align 4, !tbaa !181, !noelle.pdg.inst.id !184
  %240 = fsub float %237, %239, !noelle.pdg.inst.id !185
  store float %232, float* %noelle_environment_variable_9, align 4, !tbaa !169, !noelle.pdg.inst.id !186
  store float %236, float* %noelle_environment_variable_10, align 4, !tbaa !176, !noelle.pdg.inst.id !187
  store float %240, float* %noelle_environment_variable_11, align 4, !tbaa !181, !noelle.pdg.inst.id !188
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %110, i8* nonnull align 4 %noelle_environment_variable_7, i64 12, i1 false) #6, !noelle.pdg.inst.id !189
  %241 = load { <2 x float>, float }, { <2 x float>, float }* %3, align 8, !noelle.pdg.inst.id !190
  store { <2 x float>, float } %241, { <2 x float>, float }* %noelle_environment_variable_1, align 8, !noelle.pdg.inst.id !191
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %108, i8* nonnull align 8 %noelle_environment_variable_6, i64 12, i1 false), !noelle.pdg.inst.id !192
  %242 = load float, float* %109, align 4, !tbaa !169, !noelle.pdg.inst.id !193
  %243 = fmul float %242, %242, !noelle.pdg.inst.id !194
  %244 = load float, float* %107, align 4, !tbaa !176, !noelle.pdg.inst.id !195
  %245 = fmul float %244, %244, !noelle.pdg.inst.id !196
  %246 = fadd float %243, %245, !noelle.pdg.inst.id !197
  %247 = load float, float* %106, align 4, !tbaa !181, !noelle.pdg.inst.id !198
  %248 = fmul float %247, %247, !noelle.pdg.inst.id !199
  %249 = fadd float %246, %248, !noelle.pdg.inst.id !200
  %250 = fcmp olt float %249, %noelle_environment_variable_21, !noelle.pdg.inst.id !201
  store i1 %250, i1* %52
  call void @queuePush8(i8* %51, i8* %53)
  store i1 %250, i1* %48
  call void @queuePush8(i8* %47, i8* %49)
  store i1 %250, i1* %44
  call void @queuePush8(i8* %43, i8* %45)
  store i1 %250, i1* %40
  call void @queuePush8(i8* %39, i8* %41)
  store i1 %250, i1* %36
  call void @queuePush8(i8* %35, i8* %37)
  store i1 %250, i1* %32
  call void @queuePush8(i8* %31, i8* %33)
  br i1 %250, label %251, label %284, !prof !202, !noelle.pdg.inst.id !203

251:                                              ; preds = %228
  %252 = fsub float %noelle_environment_variable_21, %249, !noelle.pdg.inst.id !204
  %253 = fmul float %252, %252, !noelle.pdg.inst.id !205
  %254 = fmul float %253, %252, !noelle.pdg.inst.id !206
  %255 = load float, float* %205, align 4, !tbaa !207, !noelle.pdg.inst.id !208
  %256 = fadd float %255, %254, !noelle.pdg.inst.id !209
  store float %256, float* %205, align 4, !tbaa !207, !noelle.pdg.inst.id !210
  %257 = getelementptr inbounds %struct.Cell, %struct.Cell* %221, i64 0, i32 4, i64 %225, !noelle.pdg.inst.id !211
  %258 = load float, float* %257, align 4, !tbaa !207, !noelle.pdg.inst.id !212
  %259 = fadd float %258, %254, !noelle.pdg.inst.id !213
  store float %259, float* %257, align 4, !tbaa !207, !noelle.pdg.inst.id !214
  br label %260

260:                                              ; preds = %284, %251, %285
  %261 = icmp eq i32 %224, 15, !noelle.pdg.inst.id !215
  br i1 %261, label %262, label %283, !prof !216, !noelle.pdg.inst.id !217

262:                                              ; preds = %260
  %263 = getelementptr inbounds %struct.Cell, %struct.Cell* %221, i64 0, i32 5, !noelle.pdg.inst.id !218
  %264 = load %struct.Cell*, %struct.Cell** %263, align 8, !tbaa !219, !noelle.pdg.inst.id !222
  br label %265

265:                                              ; preds = %283, %262
  %266 = phi %struct.Cell* [ %264, %262 ], [ %221, %283 ], !noelle.pdg.inst.id !223
  %267 = add nuw nsw i32 %220, 1, !noelle.pdg.inst.id !224
  br label %219

268:                                              ; preds = %219
  %269 = add nuw nsw i64 %210, 1, !noelle.pdg.inst.id !225
  br label %209

270:                                              ; preds = %209
  %271 = icmp eq i32 %202, 15, !noelle.pdg.inst.id !226
  br i1 %271, label %272, label %286, !prof !227, !noelle.pdg.inst.id !228

272:                                              ; preds = %270
  %273 = getelementptr inbounds %struct.Cell, %struct.Cell* %199, i64 0, i32 5, !noelle.pdg.inst.id !229
  %274 = load %struct.Cell*, %struct.Cell** %273, align 8, !tbaa !219, !noelle.pdg.inst.id !230
  br label %275

275:                                              ; preds = %286, %272
  %276 = phi %struct.Cell* [ %274, %272 ], [ %199, %286 ], !noelle.pdg.inst.id !231
  %277 = add nuw nsw i32 %198, 1, !noelle.pdg.inst.id !232
  br label %197

278:                                              ; preds = %288, %282
  %279 = add nuw nsw i64 %127, 1, !noelle.pdg.inst.id !233
  br label %126

280:                                              ; preds = %126
  %281 = add nuw nsw i64 %120, 1, !noelle.pdg.inst.id !234
  br label %119

282:                                              ; preds = %130
  br label %278

283:                                              ; preds = %260
  br label %265

284:                                              ; preds = %228
  br label %260

285:                                              ; preds = %223
  br label %260

286:                                              ; preds = %270
  br label %275

287:                                              ; preds = %149
  br label %158

288:                                              ; preds = %197
  br label %278

289:                                              ; preds = %142
  br label %145

290:                                              ; preds = %142
  br label %190

291:                                              ; preds = %119
  br label %113

292:                                              ; preds = %149
  br label %161

293:                                              ; preds = %165
  br label %185

294:                                              ; preds = %170
  br label %185

295:                                              ; preds = %176
  br label %185
}

DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 2:

define void @noelle_task_2(i8*, i8*) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [176 x i64]*
  %3 = bitcast i8* %1 to [40 x i8*]*
  %4 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 3
  %5 = load i8*, i8** %4
  %6 = alloca i32
  %7 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 4
  %8 = load i8*, i8** %7
  %9 = alloca i64
  %10 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 5
  %11 = load i8*, i8** %10
  %12 = alloca i64
  %13 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 25
  %14 = load i8*, i8** %13
  %15 = alloca i1
  %16 = bitcast i1* %15 to i8*
  %17 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 31
  %18 = load i8*, i8** %17
  %19 = alloca i1
  %20 = bitcast i1* %19 to i8*
  %21 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 37
  %22 = load i8*, i8** %21
  %23 = alloca i1
  %24 = bitcast i1* %23 to i8*
  %25 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 0
  %26 = bitcast i64* %25 to [27 x i32]**
  %noelle_environment_variable_0 = load [27 x i32]*, [27 x i32]** %26
  %27 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 16
  %28 = bitcast i64* %27 to %struct.Cell**
  %noelle_environment_variable_2 = load %struct.Cell*, %struct.Cell** %28
  %29 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 24
  %30 = bitcast i64* %29 to i32**
  %noelle_environment_variable_3 = load i32*, i32** %30
  %31 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 56
  %32 = bitcast i64* %31 to i8**
  %noelle_environment_variable_7 = load i8*, i8** %32
  %33 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 120
  %34 = bitcast i64* %33 to i32*
  %noelle_environment_variable_15 = load i32, i32* %34
  %35 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 128
  %noelle_environment_variable_16 = load i64, i64* %35
  %36 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 136
  %37 = bitcast i64* %36 to i32*
  %noelle_environment_variable_17 = load i32, i32* %37
  %38 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 144
  %noelle_environment_variable_18 = load i64, i64* %38
  %39 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 152
  %40 = bitcast i64* %39 to i32**
  %noelle_environment_variable_19 = load i32*, i32** %40
  %41 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 160
  %noelle_environment_variable_20 = load i64, i64* %41
  br label %44

42:                                               ; preds = %43
  ret void

43:                                               ; preds = %44
  br label %42

44:                                               ; preds = %2, %179
  call void @queuePop8(i8* %22, i8* %24)
  %45 = load i1, i1* %23
  call void @queuePop64(i8* %8, i64* %9)
  %46 = load i64, i64* %9
  br i1 %45, label %47, label %43, !prof !30, !noelle.loop.id !31, !noelle.pdg.inst.id !32, !noelle.parallelizer.looporder !33

47:                                               ; preds = %44
  %48 = trunc i64 %46 to i32, !noelle.pdg.inst.id !34
  %49 = mul nsw i32 %noelle_environment_variable_15, %48, !noelle.pdg.inst.id !35
  br label %50

50:                                               ; preds = %165, %47
  %51 = phi i64 [ 0, %47 ], [ %166, %165 ], !noelle.pdg.inst.id !36
  %52 = icmp slt i64 %51, %noelle_environment_variable_16, !noelle.pdg.inst.id !37
  br i1 %52, label %53, label %179, !prof !38, !noelle.loop.id !39, !noelle.pdg.inst.id !40, !noelle.parallelizer.looporder !41

53:                                               ; preds = %50
  %54 = trunc i64 %51 to i32, !noelle.pdg.inst.id !42
  %55 = add nsw i32 %49, %54, !noelle.pdg.inst.id !43
  %56 = mul nsw i32 %55, %noelle_environment_variable_17, !noelle.pdg.inst.id !44
  br label %57

57:                                               ; preds = %163, %53
  %58 = phi i64 [ 0, %53 ], [ %164, %163 ], !noelle.pdg.inst.id !45
  call void @queuePop64(i8* %11, i64* %12)
  %59 = load i64, i64* %12
  %60 = icmp slt i64 %58, %noelle_environment_variable_18, !noelle.pdg.inst.id !46
  br i1 %60, label %61, label %165, !prof !47, !noelle.loop.id !48, !noelle.pdg.inst.id !49, !noelle.parallelizer.looporder !50

61:                                               ; preds = %57
  %62 = getelementptr inbounds i32, i32* %noelle_environment_variable_3, i64 %59, !noelle.pdg.inst.id !51
  %63 = load i32, i32* %62, align 4, !tbaa !52, !noelle.pdg.inst.id !56
  %64 = icmp eq i32 %63, 0, !noelle.pdg.inst.id !57
  br i1 %64, label %167, label %65, !prof !58, !noelle.pdg.inst.id !59

65:                                               ; preds = %61
  %66 = trunc i64 %58 to i32, !noelle.pdg.inst.id !60
  %67 = add nsw i32 %56, %66, !noelle.pdg.inst.id !61
  %68 = sext i32 %67 to i64, !noelle.pdg.inst.id !62
  br label %69

69:                                               ; preds = %121, %65
  %70 = phi i64 [ %123, %121 ], [ -1, %65 ], !noelle.pdg.inst.id !63
  %71 = phi i32 [ %122, %121 ], [ 1, %65 ], !noelle.pdg.inst.id !64
  %72 = icmp eq i64 %70, 2, !noelle.pdg.inst.id !65
  br i1 %72, label %124, label %73, !prof !66, !noelle.loop.id !67, !noelle.pdg.inst.id !68

73:                                               ; preds = %69
  %74 = add nsw i64 %70, %58, !noelle.pdg.inst.id !69
  %75 = icmp slt i64 %74, %noelle_environment_variable_18, !noelle.pdg.inst.id !70
  br i1 %75, label %177, label %178, !prof !71, !noelle.pdg.inst.id !72

76:                                               ; preds = %89, %177
  %77 = phi i64 [ %91, %89 ], [ -1, %177 ], !noelle.pdg.inst.id !73
  %78 = phi i32 [ %90, %89 ], [ %71, %177 ], !noelle.pdg.inst.id !74
  %79 = icmp eq i64 %77, 2, !noelle.pdg.inst.id !75
  br i1 %79, label %119, label %80, !prof !76, !noelle.loop.id !77, !noelle.pdg.inst.id !78

80:                                               ; preds = %76
  %81 = add nsw i64 %77, %51, !noelle.pdg.inst.id !79
  %82 = or i64 %74, %81, !noelle.pdg.inst.id !80
  %83 = trunc i64 %82 to i32, !noelle.pdg.inst.id !81
  %84 = icmp sgt i32 %83, -1, !noelle.pdg.inst.id !82
  %85 = icmp slt i64 %81, %noelle_environment_variable_16, !noelle.pdg.inst.id !83
  %86 = and i1 %84, %85, !noelle.pdg.inst.id !84
  br i1 %86, label %180, label %175, !prof !85, !noelle.pdg.inst.id !86

87:                                               ; preds = %92
  %88 = phi i32 [ %94, %92 ], !noelle.pdg.inst.id !87
  br label %89

89:                                               ; preds = %87, %175
  %90 = phi i32 [ %78, %175 ], [ %88, %87 ], !noelle.pdg.inst.id !88
  %91 = add nsw i64 %77, 1, !noelle.pdg.inst.id !89
  br label %76

92:                                               ; preds = %116, %180
  %93 = phi i64 [ %118, %116 ], [ -1, %180 ], !noelle.pdg.inst.id !90
  %94 = phi i32 [ %117, %116 ], [ %78, %180 ], !noelle.pdg.inst.id !91
  %95 = icmp eq i64 %93, 2, !noelle.pdg.inst.id !92
  br i1 %95, label %87, label %96, !prof !93, !noelle.loop.id !94, !noelle.pdg.inst.id !95

96:                                               ; preds = %92
  %97 = add nsw i64 %93, %46, !noelle.pdg.inst.id !96
  %98 = icmp sgt i64 %97, -1, !noelle.pdg.inst.id !97
  %99 = icmp slt i64 %97, %noelle_environment_variable_20, !noelle.pdg.inst.id !98
  %100 = and i1 %98, %99, !noelle.pdg.inst.id !99
  br i1 %100, label %101, label %181, !prof !100, !noelle.pdg.inst.id !101

101:                                              ; preds = %96
  %102 = mul nsw i64 %97, %noelle_environment_variable_16, !noelle.pdg.inst.id !102
  %103 = add nsw i64 %102, %81, !noelle.pdg.inst.id !103
  %104 = mul nsw i64 %103, %noelle_environment_variable_18, !noelle.pdg.inst.id !104
  %105 = add nsw i64 %104, %74, !noelle.pdg.inst.id !105
  %106 = icmp slt i64 %105, %68, !noelle.pdg.inst.id !106
  br i1 %106, label %107, label %182, !prof !107, !noelle.pdg.inst.id !108

107:                                              ; preds = %101
  %108 = getelementptr inbounds i32, i32* %noelle_environment_variable_19, i64 %105, !noelle.pdg.inst.id !109
  %109 = load i32, i32* %108, align 4, !tbaa !52, !noelle.pdg.inst.id !110
  %110 = icmp eq i32 %109, 0, !noelle.pdg.inst.id !111
  br i1 %110, label %183, label %111, !prof !112, !noelle.pdg.inst.id !113

111:                                              ; preds = %107
  %112 = sext i32 %94 to i64, !noelle.pdg.inst.id !114
  %113 = getelementptr inbounds [27 x i32], [27 x i32]* %noelle_environment_variable_0, i64 0, i64 %112, !noelle.pdg.inst.id !115
  %114 = trunc i64 %105 to i32, !noelle.pdg.inst.id !116
  %115 = add nsw i32 %94, 1, !noelle.pdg.inst.id !117
  br label %116

116:                                              ; preds = %111, %183, %182, %181
  %117 = phi i32 [ %115, %111 ], [ %94, %181 ], [ %94, %182 ], [ %94, %183 ], !noelle.pdg.inst.id !118
  %118 = add nsw i64 %93, 1, !noelle.pdg.inst.id !119
  br label %92

119:                                              ; preds = %76
  %120 = phi i32 [ %78, %76 ], !noelle.pdg.inst.id !120
  br label %121

121:                                              ; preds = %119, %178
  %122 = phi i32 [ %71, %178 ], [ %120, %119 ], !noelle.pdg.inst.id !121
  %123 = add nsw i64 %70, 1, !noelle.pdg.inst.id !122
  br label %69

124:                                              ; preds = %69
  %125 = phi i32 [ %71, %69 ], !noelle.pdg.inst.id !123
  %126 = getelementptr inbounds %struct.Cell, %struct.Cell* %noelle_environment_variable_2, i64 %59, !noelle.pdg.inst.id !124
  %127 = sext i32 %125 to i64, !noelle.pdg.inst.id !125
  br label %128

128:                                              ; preds = %161, %124
  %129 = phi i32 [ 0, %124 ], [ %162, %161 ], !noelle.pdg.inst.id !126
  %130 = icmp slt i32 %129, %63, !noelle.pdg.inst.id !127
  br i1 %130, label %131, label %176, !prof !128, !noelle.loop.id !129, !noelle.pdg.inst.id !130

131:                                              ; preds = %128
  %132 = and i32 %129, 15, !noelle.pdg.inst.id !131
  %133 = zext i32 %132 to i64, !noelle.pdg.inst.id !132
  br label %134

134:                                              ; preds = %157, %131
  %135 = phi i64 [ %158, %157 ], [ 0, %131 ], !noelle.pdg.inst.id !133
  %136 = icmp slt i64 %135, %127, !noelle.pdg.inst.id !134
  br i1 %136, label %137, label %159, !prof !135, !noelle.loop.id !136, !noelle.pdg.inst.id !137, !noelle.parallelizer.looporder !138

137:                                              ; preds = %134
  call void @queuePop32(i8* %5, i32* %6)
  %138 = load i32, i32* %6
  %139 = getelementptr inbounds [27 x i32], [27 x i32]* %noelle_environment_variable_0, i64 0, i64 %135, !noelle.pdg.inst.id !139
  %140 = sext i32 %138 to i64, !noelle.pdg.inst.id !140
  %141 = getelementptr inbounds %struct.Cell, %struct.Cell* %noelle_environment_variable_2, i64 %140, !noelle.pdg.inst.id !141
  %142 = getelementptr inbounds i32, i32* %noelle_environment_variable_19, i64 %140, !noelle.pdg.inst.id !142
  %143 = load i32, i32* %142, align 4, !tbaa !52, !noelle.pdg.inst.id !143
  br label %144

144:                                              ; preds = %155, %137
  %145 = phi i32 [ 0, %137 ], [ %156, %155 ], !noelle.pdg.inst.id !144
  %146 = icmp slt i32 %145, %143, !noelle.pdg.inst.id !145
  br i1 %146, label %147, label %157, !prof !146, !noelle.loop.id !147, !noelle.pdg.inst.id !148

147:                                              ; preds = %144
  call void @queuePop8(i8* %14, i8* %16)
  %148 = load i1, i1* %15
  %149 = and i32 %145, 15, !noelle.pdg.inst.id !149
  %150 = zext i32 %149 to i64, !noelle.pdg.inst.id !150
  br i1 %148, label %151, label %172, !prof !151, !noelle.pdg.inst.id !152

151:                                              ; preds = %147
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %noelle_environment_variable_7), !noelle.pdg.inst.id !153
  call void @queuePop8(i8* %18, i8* %20)
  %152 = load i1, i1* %19
  br i1 %152, label %170, label %171, !prof !154, !noelle.pdg.inst.id !155

153:                                              ; preds = %171, %170, %172
  %154 = icmp eq i32 %149, 15, !noelle.pdg.inst.id !156
  br i1 %154, label %168, label %169, !prof !157, !noelle.pdg.inst.id !158

155:                                              ; preds = %169, %168
  %156 = add nuw nsw i32 %145, 1, !noelle.pdg.inst.id !159
  br label %144

157:                                              ; preds = %144
  %158 = add nuw nsw i64 %135, 1, !noelle.pdg.inst.id !160
  br label %134

159:                                              ; preds = %134
  %160 = icmp eq i32 %132, 15, !noelle.pdg.inst.id !161
  br i1 %160, label %173, label %174, !prof !162, !noelle.pdg.inst.id !163

161:                                              ; preds = %174, %173
  %162 = add nuw nsw i32 %129, 1, !noelle.pdg.inst.id !164
  br label %128

163:                                              ; preds = %176, %167
  %164 = add nuw nsw i64 %58, 1, !noelle.pdg.inst.id !165
  br label %57

165:                                              ; preds = %57
  %166 = add nuw nsw i64 %51, 1, !noelle.pdg.inst.id !166
  br label %50

167:                                              ; preds = %61
  br label %163

168:                                              ; preds = %153
  br label %155

169:                                              ; preds = %153
  br label %155

170:                                              ; preds = %151
  br label %153

171:                                              ; preds = %151
  br label %153

172:                                              ; preds = %147
  br label %153

173:                                              ; preds = %159
  br label %161

174:                                              ; preds = %159
  br label %161

175:                                              ; preds = %80
  br label %89

176:                                              ; preds = %128
  br label %163

177:                                              ; preds = %73
  br label %76

178:                                              ; preds = %73
  br label %121

179:                                              ; preds = %50
  br label %44

180:                                              ; preds = %80
  br label %92

181:                                              ; preds = %96
  br label %116

182:                                              ; preds = %101
  br label %116

183:                                              ; preds = %107
  br label %116
}

DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 3:

define void @noelle_task_3(i8*, i8*) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [176 x i64]*
  %3 = bitcast i8* %1 to [40 x i8*]*
  %4 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 6
  %5 = load i8*, i8** %4
  %6 = alloca i32
  %7 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 7
  %8 = load i8*, i8** %7
  %9 = alloca i64
  %10 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 8
  %11 = load i8*, i8** %10
  %12 = alloca i64
  %13 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 24
  %14 = load i8*, i8** %13
  %15 = alloca i1
  %16 = bitcast i1* %15 to i8*
  %17 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 30
  %18 = load i8*, i8** %17
  %19 = alloca i1
  %20 = bitcast i1* %19 to i8*
  %21 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 36
  %22 = load i8*, i8** %21
  %23 = alloca i1
  %24 = bitcast i1* %23 to i8*
  %25 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 0
  %26 = bitcast i64* %25 to [27 x i32]**
  %noelle_environment_variable_0 = load [27 x i32]*, [27 x i32]** %26
  %27 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 16
  %28 = bitcast i64* %27 to %struct.Cell**
  %noelle_environment_variable_2 = load %struct.Cell*, %struct.Cell** %28
  %29 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 24
  %30 = bitcast i64* %29 to i32**
  %noelle_environment_variable_3 = load i32*, i32** %30
  %31 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 64
  %32 = bitcast i64* %31 to i8**
  %noelle_environment_variable_8 = load i8*, i8** %32
  %33 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 120
  %34 = bitcast i64* %33 to i32*
  %noelle_environment_variable_15 = load i32, i32* %34
  %35 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 128
  %noelle_environment_variable_16 = load i64, i64* %35
  %36 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 136
  %37 = bitcast i64* %36 to i32*
  %noelle_environment_variable_17 = load i32, i32* %37
  %38 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 144
  %noelle_environment_variable_18 = load i64, i64* %38
  %39 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 152
  %40 = bitcast i64* %39 to i32**
  %noelle_environment_variable_19 = load i32*, i32** %40
  %41 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 160
  %noelle_environment_variable_20 = load i64, i64* %41
  br label %44

42:                                               ; preds = %43
  ret void

43:                                               ; preds = %44
  br label %42

44:                                               ; preds = %2, %179
  call void @queuePop8(i8* %22, i8* %24)
  %45 = load i1, i1* %23
  call void @queuePop64(i8* %8, i64* %9)
  %46 = load i64, i64* %9
  br i1 %45, label %47, label %43, !prof !30, !noelle.loop.id !31, !noelle.pdg.inst.id !32, !noelle.parallelizer.looporder !33

47:                                               ; preds = %44
  %48 = trunc i64 %46 to i32, !noelle.pdg.inst.id !34
  %49 = mul nsw i32 %noelle_environment_variable_15, %48, !noelle.pdg.inst.id !35
  br label %50

50:                                               ; preds = %165, %47
  %51 = phi i64 [ 0, %47 ], [ %166, %165 ], !noelle.pdg.inst.id !36
  %52 = icmp slt i64 %51, %noelle_environment_variable_16, !noelle.pdg.inst.id !37
  br i1 %52, label %53, label %179, !prof !38, !noelle.loop.id !39, !noelle.pdg.inst.id !40, !noelle.parallelizer.looporder !41

53:                                               ; preds = %50
  %54 = trunc i64 %51 to i32, !noelle.pdg.inst.id !42
  %55 = add nsw i32 %49, %54, !noelle.pdg.inst.id !43
  %56 = mul nsw i32 %55, %noelle_environment_variable_17, !noelle.pdg.inst.id !44
  br label %57

57:                                               ; preds = %163, %53
  %58 = phi i64 [ 0, %53 ], [ %164, %163 ], !noelle.pdg.inst.id !45
  call void @queuePop64(i8* %11, i64* %12)
  %59 = load i64, i64* %12
  %60 = icmp slt i64 %58, %noelle_environment_variable_18, !noelle.pdg.inst.id !46
  br i1 %60, label %61, label %165, !prof !47, !noelle.loop.id !48, !noelle.pdg.inst.id !49, !noelle.parallelizer.looporder !50

61:                                               ; preds = %57
  %62 = getelementptr inbounds i32, i32* %noelle_environment_variable_3, i64 %59, !noelle.pdg.inst.id !51
  %63 = load i32, i32* %62, align 4, !tbaa !52, !noelle.pdg.inst.id !56
  %64 = icmp eq i32 %63, 0, !noelle.pdg.inst.id !57
  br i1 %64, label %167, label %65, !prof !58, !noelle.pdg.inst.id !59

65:                                               ; preds = %61
  %66 = trunc i64 %58 to i32, !noelle.pdg.inst.id !60
  %67 = add nsw i32 %56, %66, !noelle.pdg.inst.id !61
  %68 = sext i32 %67 to i64, !noelle.pdg.inst.id !62
  br label %69

69:                                               ; preds = %121, %65
  %70 = phi i64 [ %123, %121 ], [ -1, %65 ], !noelle.pdg.inst.id !63
  %71 = phi i32 [ %122, %121 ], [ 1, %65 ], !noelle.pdg.inst.id !64
  %72 = icmp eq i64 %70, 2, !noelle.pdg.inst.id !65
  br i1 %72, label %124, label %73, !prof !66, !noelle.loop.id !67, !noelle.pdg.inst.id !68

73:                                               ; preds = %69
  %74 = add nsw i64 %70, %58, !noelle.pdg.inst.id !69
  %75 = icmp slt i64 %74, %noelle_environment_variable_18, !noelle.pdg.inst.id !70
  br i1 %75, label %177, label %178, !prof !71, !noelle.pdg.inst.id !72

76:                                               ; preds = %89, %177
  %77 = phi i64 [ %91, %89 ], [ -1, %177 ], !noelle.pdg.inst.id !73
  %78 = phi i32 [ %90, %89 ], [ %71, %177 ], !noelle.pdg.inst.id !74
  %79 = icmp eq i64 %77, 2, !noelle.pdg.inst.id !75
  br i1 %79, label %119, label %80, !prof !76, !noelle.loop.id !77, !noelle.pdg.inst.id !78

80:                                               ; preds = %76
  %81 = add nsw i64 %77, %51, !noelle.pdg.inst.id !79
  %82 = or i64 %74, %81, !noelle.pdg.inst.id !80
  %83 = trunc i64 %82 to i32, !noelle.pdg.inst.id !81
  %84 = icmp sgt i32 %83, -1, !noelle.pdg.inst.id !82
  %85 = icmp slt i64 %81, %noelle_environment_variable_16, !noelle.pdg.inst.id !83
  %86 = and i1 %84, %85, !noelle.pdg.inst.id !84
  br i1 %86, label %180, label %175, !prof !85, !noelle.pdg.inst.id !86

87:                                               ; preds = %92
  %88 = phi i32 [ %94, %92 ], !noelle.pdg.inst.id !87
  br label %89

89:                                               ; preds = %87, %175
  %90 = phi i32 [ %78, %175 ], [ %88, %87 ], !noelle.pdg.inst.id !88
  %91 = add nsw i64 %77, 1, !noelle.pdg.inst.id !89
  br label %76

92:                                               ; preds = %116, %180
  %93 = phi i64 [ %118, %116 ], [ -1, %180 ], !noelle.pdg.inst.id !90
  %94 = phi i32 [ %117, %116 ], [ %78, %180 ], !noelle.pdg.inst.id !91
  %95 = icmp eq i64 %93, 2, !noelle.pdg.inst.id !92
  br i1 %95, label %87, label %96, !prof !93, !noelle.loop.id !94, !noelle.pdg.inst.id !95

96:                                               ; preds = %92
  %97 = add nsw i64 %93, %46, !noelle.pdg.inst.id !96
  %98 = icmp sgt i64 %97, -1, !noelle.pdg.inst.id !97
  %99 = icmp slt i64 %97, %noelle_environment_variable_20, !noelle.pdg.inst.id !98
  %100 = and i1 %98, %99, !noelle.pdg.inst.id !99
  br i1 %100, label %101, label %181, !prof !100, !noelle.pdg.inst.id !101

101:                                              ; preds = %96
  %102 = mul nsw i64 %97, %noelle_environment_variable_16, !noelle.pdg.inst.id !102
  %103 = add nsw i64 %102, %81, !noelle.pdg.inst.id !103
  %104 = mul nsw i64 %103, %noelle_environment_variable_18, !noelle.pdg.inst.id !104
  %105 = add nsw i64 %104, %74, !noelle.pdg.inst.id !105
  %106 = icmp slt i64 %105, %68, !noelle.pdg.inst.id !106
  br i1 %106, label %107, label %182, !prof !107, !noelle.pdg.inst.id !108

107:                                              ; preds = %101
  %108 = getelementptr inbounds i32, i32* %noelle_environment_variable_19, i64 %105, !noelle.pdg.inst.id !109
  %109 = load i32, i32* %108, align 4, !tbaa !52, !noelle.pdg.inst.id !110
  %110 = icmp eq i32 %109, 0, !noelle.pdg.inst.id !111
  br i1 %110, label %183, label %111, !prof !112, !noelle.pdg.inst.id !113

111:                                              ; preds = %107
  %112 = sext i32 %94 to i64, !noelle.pdg.inst.id !114
  %113 = getelementptr inbounds [27 x i32], [27 x i32]* %noelle_environment_variable_0, i64 0, i64 %112, !noelle.pdg.inst.id !115
  %114 = trunc i64 %105 to i32, !noelle.pdg.inst.id !116
  %115 = add nsw i32 %94, 1, !noelle.pdg.inst.id !117
  br label %116

116:                                              ; preds = %111, %183, %182, %181
  %117 = phi i32 [ %115, %111 ], [ %94, %181 ], [ %94, %182 ], [ %94, %183 ], !noelle.pdg.inst.id !118
  %118 = add nsw i64 %93, 1, !noelle.pdg.inst.id !119
  br label %92

119:                                              ; preds = %76
  %120 = phi i32 [ %78, %76 ], !noelle.pdg.inst.id !120
  br label %121

121:                                              ; preds = %119, %178
  %122 = phi i32 [ %71, %178 ], [ %120, %119 ], !noelle.pdg.inst.id !121
  %123 = add nsw i64 %70, 1, !noelle.pdg.inst.id !122
  br label %69

124:                                              ; preds = %69
  %125 = phi i32 [ %71, %69 ], !noelle.pdg.inst.id !123
  %126 = getelementptr inbounds %struct.Cell, %struct.Cell* %noelle_environment_variable_2, i64 %59, !noelle.pdg.inst.id !124
  %127 = sext i32 %125 to i64, !noelle.pdg.inst.id !125
  br label %128

128:                                              ; preds = %161, %124
  %129 = phi i32 [ 0, %124 ], [ %162, %161 ], !noelle.pdg.inst.id !126
  %130 = icmp slt i32 %129, %63, !noelle.pdg.inst.id !127
  br i1 %130, label %131, label %176, !prof !128, !noelle.loop.id !129, !noelle.pdg.inst.id !130

131:                                              ; preds = %128
  %132 = and i32 %129, 15, !noelle.pdg.inst.id !131
  %133 = zext i32 %132 to i64, !noelle.pdg.inst.id !132
  br label %134

134:                                              ; preds = %157, %131
  %135 = phi i64 [ %158, %157 ], [ 0, %131 ], !noelle.pdg.inst.id !133
  %136 = icmp slt i64 %135, %127, !noelle.pdg.inst.id !134
  br i1 %136, label %137, label %159, !prof !135, !noelle.loop.id !136, !noelle.pdg.inst.id !137, !noelle.parallelizer.looporder !138

137:                                              ; preds = %134
  call void @queuePop32(i8* %5, i32* %6)
  %138 = load i32, i32* %6
  %139 = getelementptr inbounds [27 x i32], [27 x i32]* %noelle_environment_variable_0, i64 0, i64 %135, !noelle.pdg.inst.id !139
  %140 = sext i32 %138 to i64, !noelle.pdg.inst.id !140
  %141 = getelementptr inbounds %struct.Cell, %struct.Cell* %noelle_environment_variable_2, i64 %140, !noelle.pdg.inst.id !141
  %142 = getelementptr inbounds i32, i32* %noelle_environment_variable_19, i64 %140, !noelle.pdg.inst.id !142
  %143 = load i32, i32* %142, align 4, !tbaa !52, !noelle.pdg.inst.id !143
  br label %144

144:                                              ; preds = %155, %137
  %145 = phi i32 [ 0, %137 ], [ %156, %155 ], !noelle.pdg.inst.id !144
  %146 = icmp slt i32 %145, %143, !noelle.pdg.inst.id !145
  br i1 %146, label %147, label %157, !prof !146, !noelle.loop.id !147, !noelle.pdg.inst.id !148

147:                                              ; preds = %144
  call void @queuePop8(i8* %14, i8* %16)
  %148 = load i1, i1* %15
  %149 = and i32 %145, 15, !noelle.pdg.inst.id !149
  %150 = zext i32 %149 to i64, !noelle.pdg.inst.id !150
  br i1 %148, label %151, label %172, !prof !151, !noelle.pdg.inst.id !152

151:                                              ; preds = %147
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %noelle_environment_variable_8), !noelle.pdg.inst.id !153
  call void @queuePop8(i8* %18, i8* %20)
  %152 = load i1, i1* %19
  br i1 %152, label %170, label %171, !prof !154, !noelle.pdg.inst.id !155

153:                                              ; preds = %171, %170, %172
  %154 = icmp eq i32 %149, 15, !noelle.pdg.inst.id !156
  br i1 %154, label %168, label %169, !prof !157, !noelle.pdg.inst.id !158

155:                                              ; preds = %169, %168
  %156 = add nuw nsw i32 %145, 1, !noelle.pdg.inst.id !159
  br label %144

157:                                              ; preds = %144
  %158 = add nuw nsw i64 %135, 1, !noelle.pdg.inst.id !160
  br label %134

159:                                              ; preds = %134
  %160 = icmp eq i32 %132, 15, !noelle.pdg.inst.id !161
  br i1 %160, label %173, label %174, !prof !162, !noelle.pdg.inst.id !163

161:                                              ; preds = %174, %173
  %162 = add nuw nsw i32 %129, 1, !noelle.pdg.inst.id !164
  br label %128

163:                                              ; preds = %176, %167
  %164 = add nuw nsw i64 %58, 1, !noelle.pdg.inst.id !165
  br label %57

165:                                              ; preds = %57
  %166 = add nuw nsw i64 %51, 1, !noelle.pdg.inst.id !166
  br label %50

167:                                              ; preds = %61
  br label %163

168:                                              ; preds = %153
  br label %155

169:                                              ; preds = %153
  br label %155

170:                                              ; preds = %151
  br label %153

171:                                              ; preds = %151
  br label %153

172:                                              ; preds = %147
  br label %153

173:                                              ; preds = %159
  br label %161

174:                                              ; preds = %159
  br label %161

175:                                              ; preds = %80
  br label %89

176:                                              ; preds = %128
  br label %163

177:                                              ; preds = %73
  br label %76

178:                                              ; preds = %73
  br label %121

179:                                              ; preds = %50
  br label %44

180:                                              ; preds = %80
  br label %92

181:                                              ; preds = %96
  br label %116

182:                                              ; preds = %101
  br label %116

183:                                              ; preds = %107
  br label %116
}

DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 4:

define void @noelle_task_4(i8*, i8*) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [176 x i64]*
  %3 = bitcast i8* %1 to [40 x i8*]*
  %4 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 9
  %5 = load i8*, i8** %4
  %6 = alloca i32
  %7 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 10
  %8 = load i8*, i8** %7
  %9 = alloca i64
  %10 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 11
  %11 = load i8*, i8** %10
  %12 = alloca i64
  %13 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 23
  %14 = load i8*, i8** %13
  %15 = alloca i1
  %16 = bitcast i1* %15 to i8*
  %17 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 29
  %18 = load i8*, i8** %17
  %19 = alloca i1
  %20 = bitcast i1* %19 to i8*
  %21 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 35
  %22 = load i8*, i8** %21
  %23 = alloca i1
  %24 = bitcast i1* %23 to i8*
  %25 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 0
  %26 = bitcast i64* %25 to [27 x i32]**
  %noelle_environment_variable_0 = load [27 x i32]*, [27 x i32]** %26
  %27 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 16
  %28 = bitcast i64* %27 to %struct.Cell**
  %noelle_environment_variable_2 = load %struct.Cell*, %struct.Cell** %28
  %29 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 24
  %30 = bitcast i64* %29 to i32**
  %noelle_environment_variable_3 = load i32*, i32** %30
  %31 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 40
  %32 = bitcast i64* %31 to i8**
  %noelle_environment_variable_5 = load i8*, i8** %32
  %33 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 120
  %34 = bitcast i64* %33 to i32*
  %noelle_environment_variable_15 = load i32, i32* %34
  %35 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 128
  %noelle_environment_variable_16 = load i64, i64* %35
  %36 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 136
  %37 = bitcast i64* %36 to i32*
  %noelle_environment_variable_17 = load i32, i32* %37
  %38 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 144
  %noelle_environment_variable_18 = load i64, i64* %38
  %39 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 152
  %40 = bitcast i64* %39 to i32**
  %noelle_environment_variable_19 = load i32*, i32** %40
  %41 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 160
  %noelle_environment_variable_20 = load i64, i64* %41
  br label %44

42:                                               ; preds = %43
  ret void

43:                                               ; preds = %44
  br label %42

44:                                               ; preds = %2, %179
  call void @queuePop8(i8* %22, i8* %24)
  %45 = load i1, i1* %23
  call void @queuePop64(i8* %8, i64* %9)
  %46 = load i64, i64* %9
  br i1 %45, label %47, label %43, !prof !30, !noelle.loop.id !31, !noelle.pdg.inst.id !32, !noelle.parallelizer.looporder !33

47:                                               ; preds = %44
  %48 = trunc i64 %46 to i32, !noelle.pdg.inst.id !34
  %49 = mul nsw i32 %noelle_environment_variable_15, %48, !noelle.pdg.inst.id !35
  br label %50

50:                                               ; preds = %165, %47
  %51 = phi i64 [ 0, %47 ], [ %166, %165 ], !noelle.pdg.inst.id !36
  %52 = icmp slt i64 %51, %noelle_environment_variable_16, !noelle.pdg.inst.id !37
  br i1 %52, label %53, label %179, !prof !38, !noelle.loop.id !39, !noelle.pdg.inst.id !40, !noelle.parallelizer.looporder !41

53:                                               ; preds = %50
  %54 = trunc i64 %51 to i32, !noelle.pdg.inst.id !42
  %55 = add nsw i32 %49, %54, !noelle.pdg.inst.id !43
  %56 = mul nsw i32 %55, %noelle_environment_variable_17, !noelle.pdg.inst.id !44
  br label %57

57:                                               ; preds = %163, %53
  %58 = phi i64 [ 0, %53 ], [ %164, %163 ], !noelle.pdg.inst.id !45
  call void @queuePop64(i8* %11, i64* %12)
  %59 = load i64, i64* %12
  %60 = icmp slt i64 %58, %noelle_environment_variable_18, !noelle.pdg.inst.id !46
  br i1 %60, label %61, label %165, !prof !47, !noelle.loop.id !48, !noelle.pdg.inst.id !49, !noelle.parallelizer.looporder !50

61:                                               ; preds = %57
  %62 = getelementptr inbounds i32, i32* %noelle_environment_variable_3, i64 %59, !noelle.pdg.inst.id !51
  %63 = load i32, i32* %62, align 4, !tbaa !52, !noelle.pdg.inst.id !56
  %64 = icmp eq i32 %63, 0, !noelle.pdg.inst.id !57
  br i1 %64, label %167, label %65, !prof !58, !noelle.pdg.inst.id !59

65:                                               ; preds = %61
  %66 = trunc i64 %58 to i32, !noelle.pdg.inst.id !60
  %67 = add nsw i32 %56, %66, !noelle.pdg.inst.id !61
  %68 = sext i32 %67 to i64, !noelle.pdg.inst.id !62
  br label %69

69:                                               ; preds = %121, %65
  %70 = phi i64 [ %123, %121 ], [ -1, %65 ], !noelle.pdg.inst.id !63
  %71 = phi i32 [ %122, %121 ], [ 1, %65 ], !noelle.pdg.inst.id !64
  %72 = icmp eq i64 %70, 2, !noelle.pdg.inst.id !65
  br i1 %72, label %124, label %73, !prof !66, !noelle.loop.id !67, !noelle.pdg.inst.id !68

73:                                               ; preds = %69
  %74 = add nsw i64 %70, %58, !noelle.pdg.inst.id !69
  %75 = icmp slt i64 %74, %noelle_environment_variable_18, !noelle.pdg.inst.id !70
  br i1 %75, label %177, label %178, !prof !71, !noelle.pdg.inst.id !72

76:                                               ; preds = %89, %177
  %77 = phi i64 [ %91, %89 ], [ -1, %177 ], !noelle.pdg.inst.id !73
  %78 = phi i32 [ %90, %89 ], [ %71, %177 ], !noelle.pdg.inst.id !74
  %79 = icmp eq i64 %77, 2, !noelle.pdg.inst.id !75
  br i1 %79, label %119, label %80, !prof !76, !noelle.loop.id !77, !noelle.pdg.inst.id !78

80:                                               ; preds = %76
  %81 = add nsw i64 %77, %51, !noelle.pdg.inst.id !79
  %82 = or i64 %74, %81, !noelle.pdg.inst.id !80
  %83 = trunc i64 %82 to i32, !noelle.pdg.inst.id !81
  %84 = icmp sgt i32 %83, -1, !noelle.pdg.inst.id !82
  %85 = icmp slt i64 %81, %noelle_environment_variable_16, !noelle.pdg.inst.id !83
  %86 = and i1 %84, %85, !noelle.pdg.inst.id !84
  br i1 %86, label %180, label %175, !prof !85, !noelle.pdg.inst.id !86

87:                                               ; preds = %92
  %88 = phi i32 [ %94, %92 ], !noelle.pdg.inst.id !87
  br label %89

89:                                               ; preds = %87, %175
  %90 = phi i32 [ %78, %175 ], [ %88, %87 ], !noelle.pdg.inst.id !88
  %91 = add nsw i64 %77, 1, !noelle.pdg.inst.id !89
  br label %76

92:                                               ; preds = %116, %180
  %93 = phi i64 [ %118, %116 ], [ -1, %180 ], !noelle.pdg.inst.id !90
  %94 = phi i32 [ %117, %116 ], [ %78, %180 ], !noelle.pdg.inst.id !91
  %95 = icmp eq i64 %93, 2, !noelle.pdg.inst.id !92
  br i1 %95, label %87, label %96, !prof !93, !noelle.loop.id !94, !noelle.pdg.inst.id !95

96:                                               ; preds = %92
  %97 = add nsw i64 %93, %46, !noelle.pdg.inst.id !96
  %98 = icmp sgt i64 %97, -1, !noelle.pdg.inst.id !97
  %99 = icmp slt i64 %97, %noelle_environment_variable_20, !noelle.pdg.inst.id !98
  %100 = and i1 %98, %99, !noelle.pdg.inst.id !99
  br i1 %100, label %101, label %181, !prof !100, !noelle.pdg.inst.id !101

101:                                              ; preds = %96
  %102 = mul nsw i64 %97, %noelle_environment_variable_16, !noelle.pdg.inst.id !102
  %103 = add nsw i64 %102, %81, !noelle.pdg.inst.id !103
  %104 = mul nsw i64 %103, %noelle_environment_variable_18, !noelle.pdg.inst.id !104
  %105 = add nsw i64 %104, %74, !noelle.pdg.inst.id !105
  %106 = icmp slt i64 %105, %68, !noelle.pdg.inst.id !106
  br i1 %106, label %107, label %182, !prof !107, !noelle.pdg.inst.id !108

107:                                              ; preds = %101
  %108 = getelementptr inbounds i32, i32* %noelle_environment_variable_19, i64 %105, !noelle.pdg.inst.id !109
  %109 = load i32, i32* %108, align 4, !tbaa !52, !noelle.pdg.inst.id !110
  %110 = icmp eq i32 %109, 0, !noelle.pdg.inst.id !111
  br i1 %110, label %183, label %111, !prof !112, !noelle.pdg.inst.id !113

111:                                              ; preds = %107
  %112 = sext i32 %94 to i64, !noelle.pdg.inst.id !114
  %113 = getelementptr inbounds [27 x i32], [27 x i32]* %noelle_environment_variable_0, i64 0, i64 %112, !noelle.pdg.inst.id !115
  %114 = trunc i64 %105 to i32, !noelle.pdg.inst.id !116
  %115 = add nsw i32 %94, 1, !noelle.pdg.inst.id !117
  br label %116

116:                                              ; preds = %111, %183, %182, %181
  %117 = phi i32 [ %115, %111 ], [ %94, %181 ], [ %94, %182 ], [ %94, %183 ], !noelle.pdg.inst.id !118
  %118 = add nsw i64 %93, 1, !noelle.pdg.inst.id !119
  br label %92

119:                                              ; preds = %76
  %120 = phi i32 [ %78, %76 ], !noelle.pdg.inst.id !120
  br label %121

121:                                              ; preds = %119, %178
  %122 = phi i32 [ %71, %178 ], [ %120, %119 ], !noelle.pdg.inst.id !121
  %123 = add nsw i64 %70, 1, !noelle.pdg.inst.id !122
  br label %69

124:                                              ; preds = %69
  %125 = phi i32 [ %71, %69 ], !noelle.pdg.inst.id !123
  %126 = getelementptr inbounds %struct.Cell, %struct.Cell* %noelle_environment_variable_2, i64 %59, !noelle.pdg.inst.id !124
  %127 = sext i32 %125 to i64, !noelle.pdg.inst.id !125
  br label %128

128:                                              ; preds = %161, %124
  %129 = phi i32 [ 0, %124 ], [ %162, %161 ], !noelle.pdg.inst.id !126
  %130 = icmp slt i32 %129, %63, !noelle.pdg.inst.id !127
  br i1 %130, label %131, label %176, !prof !128, !noelle.loop.id !129, !noelle.pdg.inst.id !130

131:                                              ; preds = %128
  %132 = and i32 %129, 15, !noelle.pdg.inst.id !131
  %133 = zext i32 %132 to i64, !noelle.pdg.inst.id !132
  br label %134

134:                                              ; preds = %157, %131
  %135 = phi i64 [ %158, %157 ], [ 0, %131 ], !noelle.pdg.inst.id !133
  %136 = icmp slt i64 %135, %127, !noelle.pdg.inst.id !134
  br i1 %136, label %137, label %159, !prof !135, !noelle.loop.id !136, !noelle.pdg.inst.id !137, !noelle.parallelizer.looporder !138

137:                                              ; preds = %134
  call void @queuePop32(i8* %5, i32* %6)
  %138 = load i32, i32* %6
  %139 = getelementptr inbounds [27 x i32], [27 x i32]* %noelle_environment_variable_0, i64 0, i64 %135, !noelle.pdg.inst.id !139
  %140 = sext i32 %138 to i64, !noelle.pdg.inst.id !140
  %141 = getelementptr inbounds %struct.Cell, %struct.Cell* %noelle_environment_variable_2, i64 %140, !noelle.pdg.inst.id !141
  %142 = getelementptr inbounds i32, i32* %noelle_environment_variable_19, i64 %140, !noelle.pdg.inst.id !142
  %143 = load i32, i32* %142, align 4, !tbaa !52, !noelle.pdg.inst.id !143
  br label %144

144:                                              ; preds = %155, %137
  %145 = phi i32 [ 0, %137 ], [ %156, %155 ], !noelle.pdg.inst.id !144
  %146 = icmp slt i32 %145, %143, !noelle.pdg.inst.id !145
  br i1 %146, label %147, label %157, !prof !146, !noelle.loop.id !147, !noelle.pdg.inst.id !148

147:                                              ; preds = %144
  call void @queuePop8(i8* %14, i8* %16)
  %148 = load i1, i1* %15
  %149 = and i32 %145, 15, !noelle.pdg.inst.id !149
  %150 = zext i32 %149 to i64, !noelle.pdg.inst.id !150
  br i1 %148, label %151, label %172, !prof !151, !noelle.pdg.inst.id !152

151:                                              ; preds = %147
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %noelle_environment_variable_5) #6, !noelle.pdg.inst.id !153
  call void @queuePop8(i8* %18, i8* %20)
  %152 = load i1, i1* %19
  br i1 %152, label %170, label %171, !prof !154, !noelle.pdg.inst.id !155

153:                                              ; preds = %171, %170, %172
  %154 = icmp eq i32 %149, 15, !noelle.pdg.inst.id !156
  br i1 %154, label %168, label %169, !prof !157, !noelle.pdg.inst.id !158

155:                                              ; preds = %169, %168
  %156 = add nuw nsw i32 %145, 1, !noelle.pdg.inst.id !159
  br label %144

157:                                              ; preds = %144
  %158 = add nuw nsw i64 %135, 1, !noelle.pdg.inst.id !160
  br label %134

159:                                              ; preds = %134
  %160 = icmp eq i32 %132, 15, !noelle.pdg.inst.id !161
  br i1 %160, label %173, label %174, !prof !162, !noelle.pdg.inst.id !163

161:                                              ; preds = %174, %173
  %162 = add nuw nsw i32 %129, 1, !noelle.pdg.inst.id !164
  br label %128

163:                                              ; preds = %176, %167
  %164 = add nuw nsw i64 %58, 1, !noelle.pdg.inst.id !165
  br label %57

165:                                              ; preds = %57
  %166 = add nuw nsw i64 %51, 1, !noelle.pdg.inst.id !166
  br label %50

167:                                              ; preds = %61
  br label %163

168:                                              ; preds = %153
  br label %155

169:                                              ; preds = %153
  br label %155

170:                                              ; preds = %151
  br label %153

171:                                              ; preds = %151
  br label %153

172:                                              ; preds = %147
  br label %153

173:                                              ; preds = %159
  br label %161

174:                                              ; preds = %159
  br label %161

175:                                              ; preds = %80
  br label %89

176:                                              ; preds = %128
  br label %163

177:                                              ; preds = %73
  br label %76

178:                                              ; preds = %73
  br label %121

179:                                              ; preds = %50
  br label %44

180:                                              ; preds = %80
  br label %92

181:                                              ; preds = %96
  br label %116

182:                                              ; preds = %101
  br label %116

183:                                              ; preds = %107
  br label %116
}

DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 5:

define void @noelle_task_5(i8*, i8*) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [176 x i64]*
  %3 = bitcast i8* %1 to [40 x i8*]*
  %4 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 12
  %5 = load i8*, i8** %4
  %6 = alloca i32
  %7 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 13
  %8 = load i8*, i8** %7
  %9 = alloca i64
  %10 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 14
  %11 = load i8*, i8** %10
  %12 = alloca i64
  %13 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 22
  %14 = load i8*, i8** %13
  %15 = alloca i1
  %16 = bitcast i1* %15 to i8*
  %17 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 28
  %18 = load i8*, i8** %17
  %19 = alloca i1
  %20 = bitcast i1* %19 to i8*
  %21 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 34
  %22 = load i8*, i8** %21
  %23 = alloca i1
  %24 = bitcast i1* %23 to i8*
  %25 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 0
  %26 = bitcast i64* %25 to [27 x i32]**
  %noelle_environment_variable_0 = load [27 x i32]*, [27 x i32]** %26
  %27 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 16
  %28 = bitcast i64* %27 to %struct.Cell**
  %noelle_environment_variable_2 = load %struct.Cell*, %struct.Cell** %28
  %29 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 24
  %30 = bitcast i64* %29 to i32**
  %noelle_environment_variable_3 = load i32*, i32** %30
  %31 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 40
  %32 = bitcast i64* %31 to i8**
  %noelle_environment_variable_5 = load i8*, i8** %32
  %33 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 120
  %34 = bitcast i64* %33 to i32*
  %noelle_environment_variable_15 = load i32, i32* %34
  %35 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 128
  %noelle_environment_variable_16 = load i64, i64* %35
  %36 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 136
  %37 = bitcast i64* %36 to i32*
  %noelle_environment_variable_17 = load i32, i32* %37
  %38 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 144
  %noelle_environment_variable_18 = load i64, i64* %38
  %39 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 152
  %40 = bitcast i64* %39 to i32**
  %noelle_environment_variable_19 = load i32*, i32** %40
  %41 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 160
  %noelle_environment_variable_20 = load i64, i64* %41
  br label %44

42:                                               ; preds = %43
  ret void

43:                                               ; preds = %44
  br label %42

44:                                               ; preds = %2, %179
  call void @queuePop8(i8* %22, i8* %24)
  %45 = load i1, i1* %23
  call void @queuePop64(i8* %8, i64* %9)
  %46 = load i64, i64* %9
  br i1 %45, label %47, label %43, !prof !30, !noelle.loop.id !31, !noelle.pdg.inst.id !32, !noelle.parallelizer.looporder !33

47:                                               ; preds = %44
  %48 = trunc i64 %46 to i32, !noelle.pdg.inst.id !34
  %49 = mul nsw i32 %noelle_environment_variable_15, %48, !noelle.pdg.inst.id !35
  br label %50

50:                                               ; preds = %165, %47
  %51 = phi i64 [ 0, %47 ], [ %166, %165 ], !noelle.pdg.inst.id !36
  %52 = icmp slt i64 %51, %noelle_environment_variable_16, !noelle.pdg.inst.id !37
  br i1 %52, label %53, label %179, !prof !38, !noelle.loop.id !39, !noelle.pdg.inst.id !40, !noelle.parallelizer.looporder !41

53:                                               ; preds = %50
  %54 = trunc i64 %51 to i32, !noelle.pdg.inst.id !42
  %55 = add nsw i32 %49, %54, !noelle.pdg.inst.id !43
  %56 = mul nsw i32 %55, %noelle_environment_variable_17, !noelle.pdg.inst.id !44
  br label %57

57:                                               ; preds = %163, %53
  %58 = phi i64 [ 0, %53 ], [ %164, %163 ], !noelle.pdg.inst.id !45
  call void @queuePop64(i8* %11, i64* %12)
  %59 = load i64, i64* %12
  %60 = icmp slt i64 %58, %noelle_environment_variable_18, !noelle.pdg.inst.id !46
  br i1 %60, label %61, label %165, !prof !47, !noelle.loop.id !48, !noelle.pdg.inst.id !49, !noelle.parallelizer.looporder !50

61:                                               ; preds = %57
  %62 = getelementptr inbounds i32, i32* %noelle_environment_variable_3, i64 %59, !noelle.pdg.inst.id !51
  %63 = load i32, i32* %62, align 4, !tbaa !52, !noelle.pdg.inst.id !56
  %64 = icmp eq i32 %63, 0, !noelle.pdg.inst.id !57
  br i1 %64, label %167, label %65, !prof !58, !noelle.pdg.inst.id !59

65:                                               ; preds = %61
  %66 = trunc i64 %58 to i32, !noelle.pdg.inst.id !60
  %67 = add nsw i32 %56, %66, !noelle.pdg.inst.id !61
  %68 = sext i32 %67 to i64, !noelle.pdg.inst.id !62
  br label %69

69:                                               ; preds = %121, %65
  %70 = phi i64 [ %123, %121 ], [ -1, %65 ], !noelle.pdg.inst.id !63
  %71 = phi i32 [ %122, %121 ], [ 1, %65 ], !noelle.pdg.inst.id !64
  %72 = icmp eq i64 %70, 2, !noelle.pdg.inst.id !65
  br i1 %72, label %124, label %73, !prof !66, !noelle.loop.id !67, !noelle.pdg.inst.id !68

73:                                               ; preds = %69
  %74 = add nsw i64 %70, %58, !noelle.pdg.inst.id !69
  %75 = icmp slt i64 %74, %noelle_environment_variable_18, !noelle.pdg.inst.id !70
  br i1 %75, label %177, label %178, !prof !71, !noelle.pdg.inst.id !72

76:                                               ; preds = %89, %177
  %77 = phi i64 [ %91, %89 ], [ -1, %177 ], !noelle.pdg.inst.id !73
  %78 = phi i32 [ %90, %89 ], [ %71, %177 ], !noelle.pdg.inst.id !74
  %79 = icmp eq i64 %77, 2, !noelle.pdg.inst.id !75
  br i1 %79, label %119, label %80, !prof !76, !noelle.loop.id !77, !noelle.pdg.inst.id !78

80:                                               ; preds = %76
  %81 = add nsw i64 %77, %51, !noelle.pdg.inst.id !79
  %82 = or i64 %74, %81, !noelle.pdg.inst.id !80
  %83 = trunc i64 %82 to i32, !noelle.pdg.inst.id !81
  %84 = icmp sgt i32 %83, -1, !noelle.pdg.inst.id !82
  %85 = icmp slt i64 %81, %noelle_environment_variable_16, !noelle.pdg.inst.id !83
  %86 = and i1 %84, %85, !noelle.pdg.inst.id !84
  br i1 %86, label %180, label %175, !prof !85, !noelle.pdg.inst.id !86

87:                                               ; preds = %92
  %88 = phi i32 [ %94, %92 ], !noelle.pdg.inst.id !87
  br label %89

89:                                               ; preds = %87, %175
  %90 = phi i32 [ %78, %175 ], [ %88, %87 ], !noelle.pdg.inst.id !88
  %91 = add nsw i64 %77, 1, !noelle.pdg.inst.id !89
  br label %76

92:                                               ; preds = %116, %180
  %93 = phi i64 [ %118, %116 ], [ -1, %180 ], !noelle.pdg.inst.id !90
  %94 = phi i32 [ %117, %116 ], [ %78, %180 ], !noelle.pdg.inst.id !91
  %95 = icmp eq i64 %93, 2, !noelle.pdg.inst.id !92
  br i1 %95, label %87, label %96, !prof !93, !noelle.loop.id !94, !noelle.pdg.inst.id !95

96:                                               ; preds = %92
  %97 = add nsw i64 %93, %46, !noelle.pdg.inst.id !96
  %98 = icmp sgt i64 %97, -1, !noelle.pdg.inst.id !97
  %99 = icmp slt i64 %97, %noelle_environment_variable_20, !noelle.pdg.inst.id !98
  %100 = and i1 %98, %99, !noelle.pdg.inst.id !99
  br i1 %100, label %101, label %181, !prof !100, !noelle.pdg.inst.id !101

101:                                              ; preds = %96
  %102 = mul nsw i64 %97, %noelle_environment_variable_16, !noelle.pdg.inst.id !102
  %103 = add nsw i64 %102, %81, !noelle.pdg.inst.id !103
  %104 = mul nsw i64 %103, %noelle_environment_variable_18, !noelle.pdg.inst.id !104
  %105 = add nsw i64 %104, %74, !noelle.pdg.inst.id !105
  %106 = icmp slt i64 %105, %68, !noelle.pdg.inst.id !106
  br i1 %106, label %107, label %182, !prof !107, !noelle.pdg.inst.id !108

107:                                              ; preds = %101
  %108 = getelementptr inbounds i32, i32* %noelle_environment_variable_19, i64 %105, !noelle.pdg.inst.id !109
  %109 = load i32, i32* %108, align 4, !tbaa !52, !noelle.pdg.inst.id !110
  %110 = icmp eq i32 %109, 0, !noelle.pdg.inst.id !111
  br i1 %110, label %183, label %111, !prof !112, !noelle.pdg.inst.id !113

111:                                              ; preds = %107
  %112 = sext i32 %94 to i64, !noelle.pdg.inst.id !114
  %113 = getelementptr inbounds [27 x i32], [27 x i32]* %noelle_environment_variable_0, i64 0, i64 %112, !noelle.pdg.inst.id !115
  %114 = trunc i64 %105 to i32, !noelle.pdg.inst.id !116
  %115 = add nsw i32 %94, 1, !noelle.pdg.inst.id !117
  br label %116

116:                                              ; preds = %111, %183, %182, %181
  %117 = phi i32 [ %115, %111 ], [ %94, %181 ], [ %94, %182 ], [ %94, %183 ], !noelle.pdg.inst.id !118
  %118 = add nsw i64 %93, 1, !noelle.pdg.inst.id !119
  br label %92

119:                                              ; preds = %76
  %120 = phi i32 [ %78, %76 ], !noelle.pdg.inst.id !120
  br label %121

121:                                              ; preds = %119, %178
  %122 = phi i32 [ %71, %178 ], [ %120, %119 ], !noelle.pdg.inst.id !121
  %123 = add nsw i64 %70, 1, !noelle.pdg.inst.id !122
  br label %69

124:                                              ; preds = %69
  %125 = phi i32 [ %71, %69 ], !noelle.pdg.inst.id !123
  %126 = getelementptr inbounds %struct.Cell, %struct.Cell* %noelle_environment_variable_2, i64 %59, !noelle.pdg.inst.id !124
  %127 = sext i32 %125 to i64, !noelle.pdg.inst.id !125
  br label %128

128:                                              ; preds = %161, %124
  %129 = phi i32 [ 0, %124 ], [ %162, %161 ], !noelle.pdg.inst.id !126
  %130 = icmp slt i32 %129, %63, !noelle.pdg.inst.id !127
  br i1 %130, label %131, label %176, !prof !128, !noelle.loop.id !129, !noelle.pdg.inst.id !130

131:                                              ; preds = %128
  %132 = and i32 %129, 15, !noelle.pdg.inst.id !131
  %133 = zext i32 %132 to i64, !noelle.pdg.inst.id !132
  br label %134

134:                                              ; preds = %157, %131
  %135 = phi i64 [ %158, %157 ], [ 0, %131 ], !noelle.pdg.inst.id !133
  %136 = icmp slt i64 %135, %127, !noelle.pdg.inst.id !134
  br i1 %136, label %137, label %159, !prof !135, !noelle.loop.id !136, !noelle.pdg.inst.id !137, !noelle.parallelizer.looporder !138

137:                                              ; preds = %134
  call void @queuePop32(i8* %5, i32* %6)
  %138 = load i32, i32* %6
  %139 = getelementptr inbounds [27 x i32], [27 x i32]* %noelle_environment_variable_0, i64 0, i64 %135, !noelle.pdg.inst.id !139
  %140 = sext i32 %138 to i64, !noelle.pdg.inst.id !140
  %141 = getelementptr inbounds %struct.Cell, %struct.Cell* %noelle_environment_variable_2, i64 %140, !noelle.pdg.inst.id !141
  %142 = getelementptr inbounds i32, i32* %noelle_environment_variable_19, i64 %140, !noelle.pdg.inst.id !142
  %143 = load i32, i32* %142, align 4, !tbaa !52, !noelle.pdg.inst.id !143
  br label %144

144:                                              ; preds = %155, %137
  %145 = phi i32 [ 0, %137 ], [ %156, %155 ], !noelle.pdg.inst.id !144
  %146 = icmp slt i32 %145, %143, !noelle.pdg.inst.id !145
  br i1 %146, label %147, label %157, !prof !146, !noelle.loop.id !147, !noelle.pdg.inst.id !148

147:                                              ; preds = %144
  call void @queuePop8(i8* %14, i8* %16)
  %148 = load i1, i1* %15
  %149 = and i32 %145, 15, !noelle.pdg.inst.id !149
  %150 = zext i32 %149 to i64, !noelle.pdg.inst.id !150
  br i1 %148, label %151, label %172, !prof !151, !noelle.pdg.inst.id !152

151:                                              ; preds = %147
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %noelle_environment_variable_5) #6, !noelle.pdg.inst.id !153
  call void @queuePop8(i8* %18, i8* %20)
  %152 = load i1, i1* %19
  br i1 %152, label %170, label %171, !prof !154, !noelle.pdg.inst.id !155

153:                                              ; preds = %171, %170, %172
  %154 = icmp eq i32 %149, 15, !noelle.pdg.inst.id !156
  br i1 %154, label %168, label %169, !prof !157, !noelle.pdg.inst.id !158

155:                                              ; preds = %169, %168
  %156 = add nuw nsw i32 %145, 1, !noelle.pdg.inst.id !159
  br label %144

157:                                              ; preds = %144
  %158 = add nuw nsw i64 %135, 1, !noelle.pdg.inst.id !160
  br label %134

159:                                              ; preds = %134
  %160 = icmp eq i32 %132, 15, !noelle.pdg.inst.id !161
  br i1 %160, label %173, label %174, !prof !162, !noelle.pdg.inst.id !163

161:                                              ; preds = %174, %173
  %162 = add nuw nsw i32 %129, 1, !noelle.pdg.inst.id !164
  br label %128

163:                                              ; preds = %176, %167
  %164 = add nuw nsw i64 %58, 1, !noelle.pdg.inst.id !165
  br label %57

165:                                              ; preds = %57
  %166 = add nuw nsw i64 %51, 1, !noelle.pdg.inst.id !166
  br label %50

167:                                              ; preds = %61
  br label %163

168:                                              ; preds = %153
  br label %155

169:                                              ; preds = %153
  br label %155

170:                                              ; preds = %151
  br label %153

171:                                              ; preds = %151
  br label %153

172:                                              ; preds = %147
  br label %153

173:                                              ; preds = %159
  br label %161

174:                                              ; preds = %159
  br label %161

175:                                              ; preds = %80
  br label %89

176:                                              ; preds = %128
  br label %163

177:                                              ; preds = %73
  br label %76

178:                                              ; preds = %73
  br label %121

179:                                              ; preds = %50
  br label %44

180:                                              ; preds = %80
  br label %92

181:                                              ; preds = %96
  br label %116

182:                                              ; preds = %101
  br label %116

183:                                              ; preds = %107
  br label %116
}

DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 6:

define void @noelle_task_6(i8*, i8*) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [176 x i64]*
  %3 = bitcast i8* %1 to [40 x i8*]*
  %4 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 15
  %5 = load i8*, i8** %4
  %6 = alloca i32
  %7 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 16
  %8 = load i8*, i8** %7
  %9 = alloca i64
  %10 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 17
  %11 = load i8*, i8** %10
  %12 = alloca i64
  %13 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 21
  %14 = load i8*, i8** %13
  %15 = alloca i1
  %16 = bitcast i1* %15 to i8*
  %17 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 27
  %18 = load i8*, i8** %17
  %19 = alloca i1
  %20 = bitcast i1* %19 to i8*
  %21 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 33
  %22 = load i8*, i8** %21
  %23 = alloca i1
  %24 = bitcast i1* %23 to i8*
  %25 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 0
  %26 = bitcast i64* %25 to [27 x i32]**
  %noelle_environment_variable_0 = load [27 x i32]*, [27 x i32]** %26
  %27 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 16
  %28 = bitcast i64* %27 to %struct.Cell**
  %noelle_environment_variable_2 = load %struct.Cell*, %struct.Cell** %28
  %29 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 24
  %30 = bitcast i64* %29 to i32**
  %noelle_environment_variable_3 = load i32*, i32** %30
  %31 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 64
  %32 = bitcast i64* %31 to i8**
  %noelle_environment_variable_8 = load i8*, i8** %32
  %33 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 120
  %34 = bitcast i64* %33 to i32*
  %noelle_environment_variable_15 = load i32, i32* %34
  %35 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 128
  %noelle_environment_variable_16 = load i64, i64* %35
  %36 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 136
  %37 = bitcast i64* %36 to i32*
  %noelle_environment_variable_17 = load i32, i32* %37
  %38 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 144
  %noelle_environment_variable_18 = load i64, i64* %38
  %39 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 152
  %40 = bitcast i64* %39 to i32**
  %noelle_environment_variable_19 = load i32*, i32** %40
  %41 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 160
  %noelle_environment_variable_20 = load i64, i64* %41
  br label %44

42:                                               ; preds = %43
  ret void

43:                                               ; preds = %44
  br label %42

44:                                               ; preds = %2, %179
  call void @queuePop8(i8* %22, i8* %24)
  %45 = load i1, i1* %23
  call void @queuePop64(i8* %8, i64* %9)
  %46 = load i64, i64* %9
  br i1 %45, label %47, label %43, !prof !30, !noelle.loop.id !31, !noelle.pdg.inst.id !32, !noelle.parallelizer.looporder !33

47:                                               ; preds = %44
  %48 = trunc i64 %46 to i32, !noelle.pdg.inst.id !34
  %49 = mul nsw i32 %noelle_environment_variable_15, %48, !noelle.pdg.inst.id !35
  br label %50

50:                                               ; preds = %165, %47
  %51 = phi i64 [ 0, %47 ], [ %166, %165 ], !noelle.pdg.inst.id !36
  %52 = icmp slt i64 %51, %noelle_environment_variable_16, !noelle.pdg.inst.id !37
  br i1 %52, label %53, label %179, !prof !38, !noelle.loop.id !39, !noelle.pdg.inst.id !40, !noelle.parallelizer.looporder !41

53:                                               ; preds = %50
  %54 = trunc i64 %51 to i32, !noelle.pdg.inst.id !42
  %55 = add nsw i32 %49, %54, !noelle.pdg.inst.id !43
  %56 = mul nsw i32 %55, %noelle_environment_variable_17, !noelle.pdg.inst.id !44
  br label %57

57:                                               ; preds = %163, %53
  %58 = phi i64 [ 0, %53 ], [ %164, %163 ], !noelle.pdg.inst.id !45
  call void @queuePop64(i8* %11, i64* %12)
  %59 = load i64, i64* %12
  %60 = icmp slt i64 %58, %noelle_environment_variable_18, !noelle.pdg.inst.id !46
  br i1 %60, label %61, label %165, !prof !47, !noelle.loop.id !48, !noelle.pdg.inst.id !49, !noelle.parallelizer.looporder !50

61:                                               ; preds = %57
  %62 = getelementptr inbounds i32, i32* %noelle_environment_variable_3, i64 %59, !noelle.pdg.inst.id !51
  %63 = load i32, i32* %62, align 4, !tbaa !52, !noelle.pdg.inst.id !56
  %64 = icmp eq i32 %63, 0, !noelle.pdg.inst.id !57
  br i1 %64, label %167, label %65, !prof !58, !noelle.pdg.inst.id !59

65:                                               ; preds = %61
  %66 = trunc i64 %58 to i32, !noelle.pdg.inst.id !60
  %67 = add nsw i32 %56, %66, !noelle.pdg.inst.id !61
  %68 = sext i32 %67 to i64, !noelle.pdg.inst.id !62
  br label %69

69:                                               ; preds = %121, %65
  %70 = phi i64 [ %123, %121 ], [ -1, %65 ], !noelle.pdg.inst.id !63
  %71 = phi i32 [ %122, %121 ], [ 1, %65 ], !noelle.pdg.inst.id !64
  %72 = icmp eq i64 %70, 2, !noelle.pdg.inst.id !65
  br i1 %72, label %124, label %73, !prof !66, !noelle.loop.id !67, !noelle.pdg.inst.id !68

73:                                               ; preds = %69
  %74 = add nsw i64 %70, %58, !noelle.pdg.inst.id !69
  %75 = icmp slt i64 %74, %noelle_environment_variable_18, !noelle.pdg.inst.id !70
  br i1 %75, label %177, label %178, !prof !71, !noelle.pdg.inst.id !72

76:                                               ; preds = %89, %177
  %77 = phi i64 [ %91, %89 ], [ -1, %177 ], !noelle.pdg.inst.id !73
  %78 = phi i32 [ %90, %89 ], [ %71, %177 ], !noelle.pdg.inst.id !74
  %79 = icmp eq i64 %77, 2, !noelle.pdg.inst.id !75
  br i1 %79, label %119, label %80, !prof !76, !noelle.loop.id !77, !noelle.pdg.inst.id !78

80:                                               ; preds = %76
  %81 = add nsw i64 %77, %51, !noelle.pdg.inst.id !79
  %82 = or i64 %74, %81, !noelle.pdg.inst.id !80
  %83 = trunc i64 %82 to i32, !noelle.pdg.inst.id !81
  %84 = icmp sgt i32 %83, -1, !noelle.pdg.inst.id !82
  %85 = icmp slt i64 %81, %noelle_environment_variable_16, !noelle.pdg.inst.id !83
  %86 = and i1 %84, %85, !noelle.pdg.inst.id !84
  br i1 %86, label %180, label %175, !prof !85, !noelle.pdg.inst.id !86

87:                                               ; preds = %92
  %88 = phi i32 [ %94, %92 ], !noelle.pdg.inst.id !87
  br label %89

89:                                               ; preds = %87, %175
  %90 = phi i32 [ %78, %175 ], [ %88, %87 ], !noelle.pdg.inst.id !88
  %91 = add nsw i64 %77, 1, !noelle.pdg.inst.id !89
  br label %76

92:                                               ; preds = %116, %180
  %93 = phi i64 [ %118, %116 ], [ -1, %180 ], !noelle.pdg.inst.id !90
  %94 = phi i32 [ %117, %116 ], [ %78, %180 ], !noelle.pdg.inst.id !91
  %95 = icmp eq i64 %93, 2, !noelle.pdg.inst.id !92
  br i1 %95, label %87, label %96, !prof !93, !noelle.loop.id !94, !noelle.pdg.inst.id !95

96:                                               ; preds = %92
  %97 = add nsw i64 %93, %46, !noelle.pdg.inst.id !96
  %98 = icmp sgt i64 %97, -1, !noelle.pdg.inst.id !97
  %99 = icmp slt i64 %97, %noelle_environment_variable_20, !noelle.pdg.inst.id !98
  %100 = and i1 %98, %99, !noelle.pdg.inst.id !99
  br i1 %100, label %101, label %181, !prof !100, !noelle.pdg.inst.id !101

101:                                              ; preds = %96
  %102 = mul nsw i64 %97, %noelle_environment_variable_16, !noelle.pdg.inst.id !102
  %103 = add nsw i64 %102, %81, !noelle.pdg.inst.id !103
  %104 = mul nsw i64 %103, %noelle_environment_variable_18, !noelle.pdg.inst.id !104
  %105 = add nsw i64 %104, %74, !noelle.pdg.inst.id !105
  %106 = icmp slt i64 %105, %68, !noelle.pdg.inst.id !106
  br i1 %106, label %107, label %182, !prof !107, !noelle.pdg.inst.id !108

107:                                              ; preds = %101
  %108 = getelementptr inbounds i32, i32* %noelle_environment_variable_19, i64 %105, !noelle.pdg.inst.id !109
  %109 = load i32, i32* %108, align 4, !tbaa !52, !noelle.pdg.inst.id !110
  %110 = icmp eq i32 %109, 0, !noelle.pdg.inst.id !111
  br i1 %110, label %183, label %111, !prof !112, !noelle.pdg.inst.id !113

111:                                              ; preds = %107
  %112 = sext i32 %94 to i64, !noelle.pdg.inst.id !114
  %113 = getelementptr inbounds [27 x i32], [27 x i32]* %noelle_environment_variable_0, i64 0, i64 %112, !noelle.pdg.inst.id !115
  %114 = trunc i64 %105 to i32, !noelle.pdg.inst.id !116
  %115 = add nsw i32 %94, 1, !noelle.pdg.inst.id !117
  br label %116

116:                                              ; preds = %111, %183, %182, %181
  %117 = phi i32 [ %115, %111 ], [ %94, %181 ], [ %94, %182 ], [ %94, %183 ], !noelle.pdg.inst.id !118
  %118 = add nsw i64 %93, 1, !noelle.pdg.inst.id !119
  br label %92

119:                                              ; preds = %76
  %120 = phi i32 [ %78, %76 ], !noelle.pdg.inst.id !120
  br label %121

121:                                              ; preds = %119, %178
  %122 = phi i32 [ %71, %178 ], [ %120, %119 ], !noelle.pdg.inst.id !121
  %123 = add nsw i64 %70, 1, !noelle.pdg.inst.id !122
  br label %69

124:                                              ; preds = %69
  %125 = phi i32 [ %71, %69 ], !noelle.pdg.inst.id !123
  %126 = getelementptr inbounds %struct.Cell, %struct.Cell* %noelle_environment_variable_2, i64 %59, !noelle.pdg.inst.id !124
  %127 = sext i32 %125 to i64, !noelle.pdg.inst.id !125
  br label %128

128:                                              ; preds = %161, %124
  %129 = phi i32 [ 0, %124 ], [ %162, %161 ], !noelle.pdg.inst.id !126
  %130 = icmp slt i32 %129, %63, !noelle.pdg.inst.id !127
  br i1 %130, label %131, label %176, !prof !128, !noelle.loop.id !129, !noelle.pdg.inst.id !130

131:                                              ; preds = %128
  %132 = and i32 %129, 15, !noelle.pdg.inst.id !131
  %133 = zext i32 %132 to i64, !noelle.pdg.inst.id !132
  br label %134

134:                                              ; preds = %157, %131
  %135 = phi i64 [ %158, %157 ], [ 0, %131 ], !noelle.pdg.inst.id !133
  %136 = icmp slt i64 %135, %127, !noelle.pdg.inst.id !134
  br i1 %136, label %137, label %159, !prof !135, !noelle.loop.id !136, !noelle.pdg.inst.id !137, !noelle.parallelizer.looporder !138

137:                                              ; preds = %134
  call void @queuePop32(i8* %5, i32* %6)
  %138 = load i32, i32* %6
  %139 = getelementptr inbounds [27 x i32], [27 x i32]* %noelle_environment_variable_0, i64 0, i64 %135, !noelle.pdg.inst.id !139
  %140 = sext i32 %138 to i64, !noelle.pdg.inst.id !140
  %141 = getelementptr inbounds %struct.Cell, %struct.Cell* %noelle_environment_variable_2, i64 %140, !noelle.pdg.inst.id !141
  %142 = getelementptr inbounds i32, i32* %noelle_environment_variable_19, i64 %140, !noelle.pdg.inst.id !142
  %143 = load i32, i32* %142, align 4, !tbaa !52, !noelle.pdg.inst.id !143
  br label %144

144:                                              ; preds = %155, %137
  %145 = phi i32 [ 0, %137 ], [ %156, %155 ], !noelle.pdg.inst.id !144
  %146 = icmp slt i32 %145, %143, !noelle.pdg.inst.id !145
  br i1 %146, label %147, label %157, !prof !146, !noelle.loop.id !147, !noelle.pdg.inst.id !148

147:                                              ; preds = %144
  call void @queuePop8(i8* %14, i8* %16)
  %148 = load i1, i1* %15
  %149 = and i32 %145, 15, !noelle.pdg.inst.id !149
  %150 = zext i32 %149 to i64, !noelle.pdg.inst.id !150
  br i1 %148, label %151, label %172, !prof !151, !noelle.pdg.inst.id !152

151:                                              ; preds = %147
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %noelle_environment_variable_8), !noelle.pdg.inst.id !153
  call void @queuePop8(i8* %18, i8* %20)
  %152 = load i1, i1* %19
  br i1 %152, label %170, label %171, !prof !154, !noelle.pdg.inst.id !155

153:                                              ; preds = %171, %170, %172
  %154 = icmp eq i32 %149, 15, !noelle.pdg.inst.id !156
  br i1 %154, label %168, label %169, !prof !157, !noelle.pdg.inst.id !158

155:                                              ; preds = %169, %168
  %156 = add nuw nsw i32 %145, 1, !noelle.pdg.inst.id !159
  br label %144

157:                                              ; preds = %144
  %158 = add nuw nsw i64 %135, 1, !noelle.pdg.inst.id !160
  br label %134

159:                                              ; preds = %134
  %160 = icmp eq i32 %132, 15, !noelle.pdg.inst.id !161
  br i1 %160, label %173, label %174, !prof !162, !noelle.pdg.inst.id !163

161:                                              ; preds = %174, %173
  %162 = add nuw nsw i32 %129, 1, !noelle.pdg.inst.id !164
  br label %128

163:                                              ; preds = %176, %167
  %164 = add nuw nsw i64 %58, 1, !noelle.pdg.inst.id !165
  br label %57

165:                                              ; preds = %57
  %166 = add nuw nsw i64 %51, 1, !noelle.pdg.inst.id !166
  br label %50

167:                                              ; preds = %61
  br label %163

168:                                              ; preds = %153
  br label %155

169:                                              ; preds = %153
  br label %155

170:                                              ; preds = %151
  br label %153

171:                                              ; preds = %151
  br label %153

172:                                              ; preds = %147
  br label %153

173:                                              ; preds = %159
  br label %161

174:                                              ; preds = %159
  br label %161

175:                                              ; preds = %80
  br label %89

176:                                              ; preds = %128
  br label %163

177:                                              ; preds = %73
  br label %76

178:                                              ; preds = %73
  br label %121

179:                                              ; preds = %50
  br label %44

180:                                              ; preds = %80
  br label %92

181:                                              ; preds = %96
  br label %116

182:                                              ; preds = %101
  br label %116

183:                                              ; preds = %107
  br label %116
}

DSWP:  Loaded queue pointers
DSWP:  Added queue pop and push instructions
DSWP:  Loaded live-in variables
DSWP:  Adjusted data flow between cloned instructions
DSWP:  Stored live out instructions
Pipeline stage 7:

define void @noelle_task_7(i8*, i8*) {
  %noelle.environment_variable.pointer = bitcast i8* %0 to [176 x i64]*
  %3 = bitcast i8* %1 to [40 x i8*]*
  %4 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 18
  %5 = load i8*, i8** %4
  %6 = alloca i32
  %7 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 19
  %8 = load i8*, i8** %7
  %9 = alloca i64
  %10 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 20
  %11 = load i8*, i8** %10
  %12 = alloca i64
  %13 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 26
  %14 = load i8*, i8** %13
  %15 = alloca i1
  %16 = bitcast i1* %15 to i8*
  %17 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 32
  %18 = load i8*, i8** %17
  %19 = alloca i1
  %20 = bitcast i1* %19 to i8*
  %21 = getelementptr inbounds [40 x i8*], [40 x i8*]* %3, i64 0, i64 39
  %22 = load i8*, i8** %21
  %23 = alloca i1
  %24 = bitcast i1* %23 to i8*
  %25 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 0
  %26 = bitcast i64* %25 to [27 x i32]**
  %noelle_environment_variable_0 = load [27 x i32]*, [27 x i32]** %26
  %27 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 16
  %28 = bitcast i64* %27 to %struct.Cell**
  %noelle_environment_variable_2 = load %struct.Cell*, %struct.Cell** %28
  %29 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 24
  %30 = bitcast i64* %29 to i32**
  %noelle_environment_variable_3 = load i32*, i32** %30
  %31 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 56
  %32 = bitcast i64* %31 to i8**
  %noelle_environment_variable_7 = load i8*, i8** %32
  %33 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 120
  %34 = bitcast i64* %33 to i32*
  %noelle_environment_variable_15 = load i32, i32* %34
  %35 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 128
  %noelle_environment_variable_16 = load i64, i64* %35
  %36 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 136
  %37 = bitcast i64* %36 to i32*
  %noelle_environment_variable_17 = load i32, i32* %37
  %38 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 144
  %noelle_environment_variable_18 = load i64, i64* %38
  %39 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 152
  %40 = bitcast i64* %39 to i32**
  %noelle_environment_variable_19 = load i32*, i32** %40
  %41 = getelementptr inbounds [176 x i64], [176 x i64]* %noelle.environment_variable.pointer, i64 0, i64 160
  %noelle_environment_variable_20 = load i64, i64* %41
  br label %44

42:                                               ; preds = %43
  ret void

43:                                               ; preds = %44
  br label %42

44:                                               ; preds = %2, %179
  call void @queuePop8(i8* %22, i8* %24)
  %45 = load i1, i1* %23
  call void @queuePop64(i8* %8, i64* %9)
  %46 = load i64, i64* %9
  br i1 %45, label %47, label %43, !prof !30, !noelle.loop.id !31, !noelle.pdg.inst.id !32, !noelle.parallelizer.looporder !33

47:                                               ; preds = %44
  %48 = trunc i64 %46 to i32, !noelle.pdg.inst.id !34
  %49 = mul nsw i32 %noelle_environment_variable_15, %48, !noelle.pdg.inst.id !35
  br label %50

50:                                               ; preds = %165, %47
  %51 = phi i64 [ 0, %47 ], [ %166, %165 ], !noelle.pdg.inst.id !36
  %52 = icmp slt i64 %51, %noelle_environment_variable_16, !noelle.pdg.inst.id !37
  br i1 %52, label %53, label %179, !prof !38, !noelle.loop.id !39, !noelle.pdg.inst.id !40, !noelle.parallelizer.looporder !41

53:                                               ; preds = %50
  %54 = trunc i64 %51 to i32, !noelle.pdg.inst.id !42
  %55 = add nsw i32 %49, %54, !noelle.pdg.inst.id !43
  %56 = mul nsw i32 %55, %noelle_environment_variable_17, !noelle.pdg.inst.id !44
  br label %57

57:                                               ; preds = %163, %53
  %58 = phi i64 [ 0, %53 ], [ %164, %163 ], !noelle.pdg.inst.id !45
  call void @queuePop64(i8* %11, i64* %12)
  %59 = load i64, i64* %12
  %60 = icmp slt i64 %58, %noelle_environment_variable_18, !noelle.pdg.inst.id !46
  br i1 %60, label %61, label %165, !prof !47, !noelle.loop.id !48, !noelle.pdg.inst.id !49, !noelle.parallelizer.looporder !50

61:                                               ; preds = %57
  %62 = getelementptr inbounds i32, i32* %noelle_environment_variable_3, i64 %59, !noelle.pdg.inst.id !51
  %63 = load i32, i32* %62, align 4, !tbaa !52, !noelle.pdg.inst.id !56
  %64 = icmp eq i32 %63, 0, !noelle.pdg.inst.id !57
  br i1 %64, label %167, label %65, !prof !58, !noelle.pdg.inst.id !59

65:                                               ; preds = %61
  %66 = trunc i64 %58 to i32, !noelle.pdg.inst.id !60
  %67 = add nsw i32 %56, %66, !noelle.pdg.inst.id !61
  %68 = sext i32 %67 to i64, !noelle.pdg.inst.id !62
  br label %69

69:                                               ; preds = %121, %65
  %70 = phi i64 [ %123, %121 ], [ -1, %65 ], !noelle.pdg.inst.id !63
  %71 = phi i32 [ %122, %121 ], [ 1, %65 ], !noelle.pdg.inst.id !64
  %72 = icmp eq i64 %70, 2, !noelle.pdg.inst.id !65
  br i1 %72, label %124, label %73, !prof !66, !noelle.loop.id !67, !noelle.pdg.inst.id !68

73:                                               ; preds = %69
  %74 = add nsw i64 %70, %58, !noelle.pdg.inst.id !69
  %75 = icmp slt i64 %74, %noelle_environment_variable_18, !noelle.pdg.inst.id !70
  br i1 %75, label %177, label %178, !prof !71, !noelle.pdg.inst.id !72

76:                                               ; preds = %89, %177
  %77 = phi i64 [ %91, %89 ], [ -1, %177 ], !noelle.pdg.inst.id !73
  %78 = phi i32 [ %90, %89 ], [ %71, %177 ], !noelle.pdg.inst.id !74
  %79 = icmp eq i64 %77, 2, !noelle.pdg.inst.id !75
  br i1 %79, label %119, label %80, !prof !76, !noelle.loop.id !77, !noelle.pdg.inst.id !78

80:                                               ; preds = %76
  %81 = add nsw i64 %77, %51, !noelle.pdg.inst.id !79
  %82 = or i64 %74, %81, !noelle.pdg.inst.id !80
  %83 = trunc i64 %82 to i32, !noelle.pdg.inst.id !81
  %84 = icmp sgt i32 %83, -1, !noelle.pdg.inst.id !82
  %85 = icmp slt i64 %81, %noelle_environment_variable_16, !noelle.pdg.inst.id !83
  %86 = and i1 %84, %85, !noelle.pdg.inst.id !84
  br i1 %86, label %180, label %175, !prof !85, !noelle.pdg.inst.id !86

87:                                               ; preds = %92
  %88 = phi i32 [ %94, %92 ], !noelle.pdg.inst.id !87
  br label %89

89:                                               ; preds = %87, %175
  %90 = phi i32 [ %78, %175 ], [ %88, %87 ], !noelle.pdg.inst.id !88
  %91 = add nsw i64 %77, 1, !noelle.pdg.inst.id !89
  br label %76

92:                                               ; preds = %116, %180
  %93 = phi i64 [ %118, %116 ], [ -1, %180 ], !noelle.pdg.inst.id !90
  %94 = phi i32 [ %117, %116 ], [ %78, %180 ], !noelle.pdg.inst.id !91
  %95 = icmp eq i64 %93, 2, !noelle.pdg.inst.id !92
  br i1 %95, label %87, label %96, !prof !93, !noelle.loop.id !94, !noelle.pdg.inst.id !95

96:                                               ; preds = %92
  %97 = add nsw i64 %93, %46, !noelle.pdg.inst.id !96
  %98 = icmp sgt i64 %97, -1, !noelle.pdg.inst.id !97
  %99 = icmp slt i64 %97, %noelle_environment_variable_20, !noelle.pdg.inst.id !98
  %100 = and i1 %98, %99, !noelle.pdg.inst.id !99
  br i1 %100, label %101, label %181, !prof !100, !noelle.pdg.inst.id !101

101:                                              ; preds = %96
  %102 = mul nsw i64 %97, %noelle_environment_variable_16, !noelle.pdg.inst.id !102
  %103 = add nsw i64 %102, %81, !noelle.pdg.inst.id !103
  %104 = mul nsw i64 %103, %noelle_environment_variable_18, !noelle.pdg.inst.id !104
  %105 = add nsw i64 %104, %74, !noelle.pdg.inst.id !105
  %106 = icmp slt i64 %105, %68, !noelle.pdg.inst.id !106
  br i1 %106, label %107, label %182, !prof !107, !noelle.pdg.inst.id !108

107:                                              ; preds = %101
  %108 = getelementptr inbounds i32, i32* %noelle_environment_variable_19, i64 %105, !noelle.pdg.inst.id !109
  %109 = load i32, i32* %108, align 4, !tbaa !52, !noelle.pdg.inst.id !110
  %110 = icmp eq i32 %109, 0, !noelle.pdg.inst.id !111
  br i1 %110, label %183, label %111, !prof !112, !noelle.pdg.inst.id !113

111:                                              ; preds = %107
  %112 = sext i32 %94 to i64, !noelle.pdg.inst.id !114
  %113 = getelementptr inbounds [27 x i32], [27 x i32]* %noelle_environment_variable_0, i64 0, i64 %112, !noelle.pdg.inst.id !115
  %114 = trunc i64 %105 to i32, !noelle.pdg.inst.id !116
  %115 = add nsw i32 %94, 1, !noelle.pdg.inst.id !117
  br label %116

116:                                              ; preds = %111, %183, %182, %181
  %117 = phi i32 [ %115, %111 ], [ %94, %181 ], [ %94, %182 ], [ %94, %183 ], !noelle.pdg.inst.id !118
  %118 = add nsw i64 %93, 1, !noelle.pdg.inst.id !119
  br label %92

119:                                              ; preds = %76
  %120 = phi i32 [ %78, %76 ], !noelle.pdg.inst.id !120
  br label %121

121:                                              ; preds = %119, %178
  %122 = phi i32 [ %71, %178 ], [ %120, %119 ], !noelle.pdg.inst.id !121
  %123 = add nsw i64 %70, 1, !noelle.pdg.inst.id !122
  br label %69

124:                                              ; preds = %69
  %125 = phi i32 [ %71, %69 ], !noelle.pdg.inst.id !123
  %126 = getelementptr inbounds %struct.Cell, %struct.Cell* %noelle_environment_variable_2, i64 %59, !noelle.pdg.inst.id !124
  %127 = sext i32 %125 to i64, !noelle.pdg.inst.id !125
  br label %128

128:                                              ; preds = %161, %124
  %129 = phi i32 [ 0, %124 ], [ %162, %161 ], !noelle.pdg.inst.id !126
  %130 = icmp slt i32 %129, %63, !noelle.pdg.inst.id !127
  br i1 %130, label %131, label %176, !prof !128, !noelle.loop.id !129, !noelle.pdg.inst.id !130

131:                                              ; preds = %128
  %132 = and i32 %129, 15, !noelle.pdg.inst.id !131
  %133 = zext i32 %132 to i64, !noelle.pdg.inst.id !132
  br label %134

134:                                              ; preds = %157, %131
  %135 = phi i64 [ %158, %157 ], [ 0, %131 ], !noelle.pdg.inst.id !133
  %136 = icmp slt i64 %135, %127, !noelle.pdg.inst.id !134
  br i1 %136, label %137, label %159, !prof !135, !noelle.loop.id !136, !noelle.pdg.inst.id !137, !noelle.parallelizer.looporder !138

137:                                              ; preds = %134
  call void @queuePop32(i8* %5, i32* %6)
  %138 = load i32, i32* %6
  %139 = getelementptr inbounds [27 x i32], [27 x i32]* %noelle_environment_variable_0, i64 0, i64 %135, !noelle.pdg.inst.id !139
  %140 = sext i32 %138 to i64, !noelle.pdg.inst.id !140
  %141 = getelementptr inbounds %struct.Cell, %struct.Cell* %noelle_environment_variable_2, i64 %140, !noelle.pdg.inst.id !141
  %142 = getelementptr inbounds i32, i32* %noelle_environment_variable_19, i64 %140, !noelle.pdg.inst.id !142
  %143 = load i32, i32* %142, align 4, !tbaa !52, !noelle.pdg.inst.id !143
  br label %144

144:                                              ; preds = %155, %137
  %145 = phi i32 [ 0, %137 ], [ %156, %155 ], !noelle.pdg.inst.id !144
  %146 = icmp slt i32 %145, %143, !noelle.pdg.inst.id !145
  br i1 %146, label %147, label %157, !prof !146, !noelle.loop.id !147, !noelle.pdg.inst.id !148

147:                                              ; preds = %144
  call void @queuePop8(i8* %14, i8* %16)
  %148 = load i1, i1* %15
  %149 = and i32 %145, 15, !noelle.pdg.inst.id !149
  %150 = zext i32 %149 to i64, !noelle.pdg.inst.id !150
  br i1 %148, label %151, label %172, !prof !151, !noelle.pdg.inst.id !152

151:                                              ; preds = %147
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %noelle_environment_variable_7), !noelle.pdg.inst.id !153
  call void @queuePop8(i8* %18, i8* %20)
  %152 = load i1, i1* %19
  br i1 %152, label %170, label %171, !prof !154, !noelle.pdg.inst.id !155

153:                                              ; preds = %171, %170, %172
  %154 = icmp eq i32 %149, 15, !noelle.pdg.inst.id !156
  br i1 %154, label %168, label %169, !prof !157, !noelle.pdg.inst.id !158

155:                                              ; preds = %169, %168
  %156 = add nuw nsw i32 %145, 1, !noelle.pdg.inst.id !159
  br label %144

157:                                              ; preds = %144
  %158 = add nuw nsw i64 %135, 1, !noelle.pdg.inst.id !160
  br label %134

159:                                              ; preds = %134
  %160 = icmp eq i32 %132, 15, !noelle.pdg.inst.id !161
  br i1 %160, label %173, label %174, !prof !162, !noelle.pdg.inst.id !163

161:                                              ; preds = %174, %173
  %162 = add nuw nsw i32 %129, 1, !noelle.pdg.inst.id !164
  br label %128

163:                                              ; preds = %176, %167
  %164 = add nuw nsw i64 %58, 1, !noelle.pdg.inst.id !165
  br label %57

165:                                              ; preds = %57
  %166 = add nuw nsw i64 %51, 1, !noelle.pdg.inst.id !166
  br label %50

167:                                              ; preds = %61
  br label %163

168:                                              ; preds = %153
  br label %155

169:                                              ; preds = %153
  br label %155

170:                                              ; preds = %151
  br label %153

171:                                              ; preds = %151
  br label %153

172:                                              ; preds = %147
  br label %153

173:                                              ; preds = %159
  br label %161

174:                                              ; preds = %159
  br label %161

175:                                              ; preds = %80
  br label %89

176:                                              ; preds = %128
  br label %163

177:                                              ; preds = %73
  br label %76

178:                                              ; preds = %73
  br label %121

179:                                              ; preds = %50
  br label %44

180:                                              ; preds = %80
  br label %92

181:                                              ; preds = %96
  br label %116

182:                                              ; preds = %101
  br label %116

183:                                              ; preds = %107
  br label %116
}

DSWP:  Link pipeline stages
DSWP: Exit
Parallelizer: parallelizerLoop:   Link the parallelize loop
Parallelizer: parallelizerLoop:   The loop has been parallelized with DSWP
Parallelizer: parallelizerLoop: Exit
Parallelizer:    Keep track of basic blocks being modified by the parallelization
Parallelizer:    Loop 23 cannot be parallelized because one of its parent has been parallelized already
Parallelizer:    Loop 24 cannot be parallelized because one of its parent has been parallelized already
Parallelizer:    Loop 29 cannot be parallelized because one of its parent has been parallelized already
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc fluidanimate.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/fluidanimate'
